// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetServiceWirelessLanFeature
    {
        /// <summary>
        /// This data source can read the Service Wireless LAN Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceWirelessLanFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceWirelessLanFeatureResult> InvokeAsync(GetServiceWirelessLanFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceWirelessLanFeatureResult>("sdwan:index/getServiceWirelessLanFeature:getServiceWirelessLanFeature", args ?? new GetServiceWirelessLanFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service Wireless LAN Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceWirelessLanFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceWirelessLanFeatureResult> Invoke(GetServiceWirelessLanFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceWirelessLanFeatureResult>("sdwan:index/getServiceWirelessLanFeature:getServiceWirelessLanFeature", args ?? new GetServiceWirelessLanFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service Wireless LAN Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceWirelessLanFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceWirelessLanFeatureResult> Invoke(GetServiceWirelessLanFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceWirelessLanFeatureResult>("sdwan:index/getServiceWirelessLanFeature:getServiceWirelessLanFeature", args ?? new GetServiceWirelessLanFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceWirelessLanFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetServiceWirelessLanFeatureArgs()
        {
        }
        public static new GetServiceWirelessLanFeatureArgs Empty => new GetServiceWirelessLanFeatureArgs();
    }

    public sealed class GetServiceWirelessLanFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetServiceWirelessLanFeatureInvokeArgs()
        {
        }
        public static new GetServiceWirelessLanFeatureInvokeArgs Empty => new GetServiceWirelessLanFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceWirelessLanFeatureResult
    {
        /// <summary>
        /// Select country
        /// </summary>
        public readonly string Country;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CountryVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 2.4GHz Enabled
        /// </summary>
        public readonly bool Enable24g;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Enable24gVariable;
        /// <summary>
        /// 5GHz Enabled
        /// </summary>
        public readonly bool Enable5g;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Enable5gVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set mobile express default gateway
        /// </summary>
        public readonly string MeDefaultGateway;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MeDefaultGatewayVariable;
        /// <summary>
        /// ME management IP dynamic allocated by DHCP
        /// </summary>
        public readonly bool MeDynamicIpEnabled;
        /// <summary>
        /// Set mobile express controller address
        /// </summary>
        public readonly string MeIpv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MeIpv4AddressVariable;
        /// <summary>
        /// Set mobile express controller subnet mask
        /// </summary>
        public readonly string MeSubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MeSubnetMaskVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PasswordVariable;
        /// <summary>
        /// Configure Wi-Fi SSID profile
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceWirelessLanFeatureSsidResult> Ssids;
        /// <summary>
        /// Set management username
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string UsernameVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetServiceWirelessLanFeatureResult(
            string country,

            string countryVariable,

            string description,

            bool enable24g,

            string enable24gVariable,

            bool enable5g,

            string enable5gVariable,

            string featureProfileId,

            string id,

            string meDefaultGateway,

            string meDefaultGatewayVariable,

            bool meDynamicIpEnabled,

            string meIpv4Address,

            string meIpv4AddressVariable,

            string meSubnetMask,

            string meSubnetMaskVariable,

            string name,

            string password,

            string passwordVariable,

            ImmutableArray<Outputs.GetServiceWirelessLanFeatureSsidResult> ssids,

            string username,

            string usernameVariable,

            int version)
        {
            Country = country;
            CountryVariable = countryVariable;
            Description = description;
            Enable24g = enable24g;
            Enable24gVariable = enable24gVariable;
            Enable5g = enable5g;
            Enable5gVariable = enable5gVariable;
            FeatureProfileId = featureProfileId;
            Id = id;
            MeDefaultGateway = meDefaultGateway;
            MeDefaultGatewayVariable = meDefaultGatewayVariable;
            MeDynamicIpEnabled = meDynamicIpEnabled;
            MeIpv4Address = meIpv4Address;
            MeIpv4AddressVariable = meIpv4AddressVariable;
            MeSubnetMask = meSubnetMask;
            MeSubnetMaskVariable = meSubnetMaskVariable;
            Name = name;
            Password = password;
            PasswordVariable = passwordVariable;
            Ssids = ssids;
            Username = username;
            UsernameVariable = usernameVariable;
            Version = version;
        }
    }
}
