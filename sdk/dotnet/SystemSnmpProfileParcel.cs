// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a System SNMP profile parcel.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/systemSnmpProfileParcel:SystemSnmpProfileParcel example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/systemSnmpProfileParcel:SystemSnmpProfileParcel")]
    public partial class SystemSnmpProfileParcel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure SNMP community
        /// </summary>
        [Output("communities")]
        public Output<ImmutableArray<Outputs.SystemSnmpProfileParcelCommunity>> Communities { get; private set; } = null!;

        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        [Output("contactPerson")]
        public Output<string?> ContactPerson { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("contactPersonVariable")]
        public Output<string?> ContactPersonVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string?> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.SystemSnmpProfileParcelGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        [Output("locationOfDevice")]
        public Output<string?> LocationOfDevice { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("locationOfDeviceVariable")]
        public Output<string?> LocationOfDeviceVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable or disable SNMP - Default value: `false`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        [Output("trapTargetServers")]
        public Output<ImmutableArray<Outputs.SystemSnmpProfileParcelTrapTargetServer>> TrapTargetServers { get; private set; } = null!;

        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.SystemSnmpProfileParcelUser>> Users { get; private set; } = null!;

        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Configure a view record
        /// </summary>
        [Output("views")]
        public Output<ImmutableArray<Outputs.SystemSnmpProfileParcelView>> Views { get; private set; } = null!;


        /// <summary>
        /// Create a SystemSnmpProfileParcel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemSnmpProfileParcel(string name, SystemSnmpProfileParcelArgs? args = null, CustomResourceOptions? options = null)
            : base("sdwan:index/systemSnmpProfileParcel:SystemSnmpProfileParcel", name, args ?? new SystemSnmpProfileParcelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemSnmpProfileParcel(string name, Input<string> id, SystemSnmpProfileParcelState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/systemSnmpProfileParcel:SystemSnmpProfileParcel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemSnmpProfileParcel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemSnmpProfileParcel Get(string name, Input<string> id, SystemSnmpProfileParcelState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemSnmpProfileParcel(name, id, state, options);
        }
    }

    public sealed class SystemSnmpProfileParcelArgs : global::Pulumi.ResourceArgs
    {
        [Input("communities")]
        private InputList<Inputs.SystemSnmpProfileParcelCommunityArgs>? _communities;

        /// <summary>
        /// Configure SNMP community
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelCommunityArgs> Communities
        {
            get => _communities ?? (_communities = new InputList<Inputs.SystemSnmpProfileParcelCommunityArgs>());
            set => _communities = value;
        }

        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        [Input("contactPerson")]
        public Input<string>? ContactPerson { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("contactPersonVariable")]
        public Input<string>? ContactPersonVariable { get; set; }

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("groups")]
        private InputList<Inputs.SystemSnmpProfileParcelGroupArgs>? _groups;

        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.SystemSnmpProfileParcelGroupArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        [Input("locationOfDevice")]
        public Input<string>? LocationOfDevice { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("locationOfDeviceVariable")]
        public Input<string>? LocationOfDeviceVariable { get; set; }

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable SNMP - Default value: `false`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        [Input("trapTargetServers")]
        private InputList<Inputs.SystemSnmpProfileParcelTrapTargetServerArgs>? _trapTargetServers;

        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelTrapTargetServerArgs> TrapTargetServers
        {
            get => _trapTargetServers ?? (_trapTargetServers = new InputList<Inputs.SystemSnmpProfileParcelTrapTargetServerArgs>());
            set => _trapTargetServers = value;
        }

        [Input("users")]
        private InputList<Inputs.SystemSnmpProfileParcelUserArgs>? _users;

        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.SystemSnmpProfileParcelUserArgs>());
            set => _users = value;
        }

        [Input("views")]
        private InputList<Inputs.SystemSnmpProfileParcelViewArgs>? _views;

        /// <summary>
        /// Configure a view record
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelViewArgs> Views
        {
            get => _views ?? (_views = new InputList<Inputs.SystemSnmpProfileParcelViewArgs>());
            set => _views = value;
        }

        public SystemSnmpProfileParcelArgs()
        {
        }
        public static new SystemSnmpProfileParcelArgs Empty => new SystemSnmpProfileParcelArgs();
    }

    public sealed class SystemSnmpProfileParcelState : global::Pulumi.ResourceArgs
    {
        [Input("communities")]
        private InputList<Inputs.SystemSnmpProfileParcelCommunityGetArgs>? _communities;

        /// <summary>
        /// Configure SNMP community
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelCommunityGetArgs> Communities
        {
            get => _communities ?? (_communities = new InputList<Inputs.SystemSnmpProfileParcelCommunityGetArgs>());
            set => _communities = value;
        }

        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        [Input("contactPerson")]
        public Input<string>? ContactPerson { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("contactPersonVariable")]
        public Input<string>? ContactPersonVariable { get; set; }

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("groups")]
        private InputList<Inputs.SystemSnmpProfileParcelGroupGetArgs>? _groups;

        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.SystemSnmpProfileParcelGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        [Input("locationOfDevice")]
        public Input<string>? LocationOfDevice { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("locationOfDeviceVariable")]
        public Input<string>? LocationOfDeviceVariable { get; set; }

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable SNMP - Default value: `false`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        [Input("trapTargetServers")]
        private InputList<Inputs.SystemSnmpProfileParcelTrapTargetServerGetArgs>? _trapTargetServers;

        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelTrapTargetServerGetArgs> TrapTargetServers
        {
            get => _trapTargetServers ?? (_trapTargetServers = new InputList<Inputs.SystemSnmpProfileParcelTrapTargetServerGetArgs>());
            set => _trapTargetServers = value;
        }

        [Input("users")]
        private InputList<Inputs.SystemSnmpProfileParcelUserGetArgs>? _users;

        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.SystemSnmpProfileParcelUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        [Input("views")]
        private InputList<Inputs.SystemSnmpProfileParcelViewGetArgs>? _views;

        /// <summary>
        /// Configure a view record
        /// </summary>
        public InputList<Inputs.SystemSnmpProfileParcelViewGetArgs> Views
        {
            get => _views ?? (_views = new InputList<Inputs.SystemSnmpProfileParcelViewGetArgs>());
            set => _views = value;
        }

        public SystemSnmpProfileParcelState()
        {
        }
        public static new SystemSnmpProfileParcelState Empty => new SystemSnmpProfileParcelState();
    }
}
