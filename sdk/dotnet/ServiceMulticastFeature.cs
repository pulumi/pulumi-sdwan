// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service Multicast Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "service_multicast_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceMulticastFeature:ServiceMulticastFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceMulticastFeature:ServiceMulticastFeature")]
    public partial class ServiceMulticastFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable or disable RP Announce
        /// </summary>
        [Output("autoRpAnnounces")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeatureAutoRpAnnounce>> AutoRpAnnounces { get; private set; } = null!;

        /// <summary>
        /// Enable or disable RP Discovery
        /// </summary>
        [Output("autoRpDiscoveries")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeatureAutoRpDiscovery>> AutoRpDiscoveries { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable or disable auto-RP
        ///   - Default value: `false`
        /// </summary>
        [Output("enableAutoRp")]
        public Output<bool?> EnableAutoRp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enableAutoRpVariable")]
        public Output<string?> EnableAutoRpVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Set IGMP interface parameters
        /// </summary>
        [Output("igmpInterfaces")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeatureIgmpInterface>> IgmpInterfaces { get; private set; } = null!;

        /// <summary>
        /// Replicator is local to this device
        ///   - Default value: `false`
        /// </summary>
        [Output("localReplicator")]
        public Output<bool?> LocalReplicator { get; private set; } = null!;

        /// <summary>
        /// Set number of joins per group the router supports
        ///   - Range: `0`-`131072`
        /// </summary>
        [Output("localReplicatorThreshold")]
        public Output<int?> LocalReplicatorThreshold { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("localReplicatorThresholdVariable")]
        public Output<string?> LocalReplicatorThresholdVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("localReplicatorVariable")]
        public Output<string?> LocalReplicatorVariable { get; private set; } = null!;

        /// <summary>
        /// Set MSDP refresh timer
        ///   - Range: `1`-`60`
        /// </summary>
        [Output("msdpConnectionRetryInterval")]
        public Output<int?> MsdpConnectionRetryInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("msdpConnectionRetryIntervalVariable")]
        public Output<string?> MsdpConnectionRetryIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// multicast MSDP peer
        /// </summary>
        [Output("msdpGroups")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeatureMsdpGroup>> MsdpGroups { get; private set; } = null!;

        /// <summary>
        /// Set MSDP originator ID
        /// </summary>
        [Output("msdpOriginatorId")]
        public Output<string?> MsdpOriginatorId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("msdpOriginatorIdVariable")]
        public Output<string?> MsdpOriginatorIdVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// bsr candidate Attributes
        /// </summary>
        [Output("pimBsrCandidates")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeaturePimBsrCandidate>> PimBsrCandidates { get; private set; } = null!;

        /// <summary>
        /// Set RP Discovery Scope
        /// </summary>
        [Output("pimBsrRpCandidates")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeaturePimBsrRpCandidate>> PimBsrRpCandidates { get; private set; } = null!;

        /// <summary>
        /// Set PIM interface parameters
        /// </summary>
        [Output("pimInterfaces")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeaturePimInterface>> PimInterfaces { get; private set; } = null!;

        /// <summary>
        /// Set Access List for PIM SSM
        /// </summary>
        [Output("pimSourceSpecificMulticastAccessList")]
        public Output<string?> PimSourceSpecificMulticastAccessList { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("pimSourceSpecificMulticastAccessListVariable")]
        public Output<string?> PimSourceSpecificMulticastAccessListVariable { get; private set; } = null!;

        /// <summary>
        /// turn SSM on/off
        /// </summary>
        [Output("pimSourceSpecificMulticastEnable")]
        public Output<bool> PimSourceSpecificMulticastEnable { get; private set; } = null!;

        /// <summary>
        /// Set when PIM router joins the SPT (kbps)
        ///   - Choices: `0`, `infinity`
        ///   - Default value: `0`
        /// </summary>
        [Output("pimSptThreshold")]
        public Output<string?> PimSptThreshold { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("pimSptThresholdVariable")]
        public Output<string?> PimSptThresholdVariable { get; private set; } = null!;

        /// <summary>
        /// Shortest Path Tree (SPT) Only Mode
        ///   - Default value: `false`
        /// </summary>
        [Output("sptOnly")]
        public Output<bool?> SptOnly { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sptOnlyVariable")]
        public Output<string?> SptOnlyVariable { get; private set; } = null!;

        /// <summary>
        /// Set Static RP Address(es)
        /// </summary>
        [Output("staticRpAddresses")]
        public Output<ImmutableArray<Outputs.ServiceMulticastFeatureStaticRpAddress>> StaticRpAddresses { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceMulticastFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceMulticastFeature(string name, ServiceMulticastFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceMulticastFeature:ServiceMulticastFeature", name, args ?? new ServiceMulticastFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceMulticastFeature(string name, Input<string> id, ServiceMulticastFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceMulticastFeature:ServiceMulticastFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceMulticastFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceMulticastFeature Get(string name, Input<string> id, ServiceMulticastFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceMulticastFeature(name, id, state, options);
        }
    }

    public sealed class ServiceMulticastFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("autoRpAnnounces")]
        private InputList<Inputs.ServiceMulticastFeatureAutoRpAnnounceArgs>? _autoRpAnnounces;

        /// <summary>
        /// Enable or disable RP Announce
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureAutoRpAnnounceArgs> AutoRpAnnounces
        {
            get => _autoRpAnnounces ?? (_autoRpAnnounces = new InputList<Inputs.ServiceMulticastFeatureAutoRpAnnounceArgs>());
            set => _autoRpAnnounces = value;
        }

        [Input("autoRpDiscoveries")]
        private InputList<Inputs.ServiceMulticastFeatureAutoRpDiscoveryArgs>? _autoRpDiscoveries;

        /// <summary>
        /// Enable or disable RP Discovery
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureAutoRpDiscoveryArgs> AutoRpDiscoveries
        {
            get => _autoRpDiscoveries ?? (_autoRpDiscoveries = new InputList<Inputs.ServiceMulticastFeatureAutoRpDiscoveryArgs>());
            set => _autoRpDiscoveries = value;
        }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable auto-RP
        ///   - Default value: `false`
        /// </summary>
        [Input("enableAutoRp")]
        public Input<bool>? EnableAutoRp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableAutoRpVariable")]
        public Input<string>? EnableAutoRpVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("igmpInterfaces")]
        private InputList<Inputs.ServiceMulticastFeatureIgmpInterfaceArgs>? _igmpInterfaces;

        /// <summary>
        /// Set IGMP interface parameters
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureIgmpInterfaceArgs> IgmpInterfaces
        {
            get => _igmpInterfaces ?? (_igmpInterfaces = new InputList<Inputs.ServiceMulticastFeatureIgmpInterfaceArgs>());
            set => _igmpInterfaces = value;
        }

        /// <summary>
        /// Replicator is local to this device
        ///   - Default value: `false`
        /// </summary>
        [Input("localReplicator")]
        public Input<bool>? LocalReplicator { get; set; }

        /// <summary>
        /// Set number of joins per group the router supports
        ///   - Range: `0`-`131072`
        /// </summary>
        [Input("localReplicatorThreshold")]
        public Input<int>? LocalReplicatorThreshold { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("localReplicatorThresholdVariable")]
        public Input<string>? LocalReplicatorThresholdVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("localReplicatorVariable")]
        public Input<string>? LocalReplicatorVariable { get; set; }

        /// <summary>
        /// Set MSDP refresh timer
        ///   - Range: `1`-`60`
        /// </summary>
        [Input("msdpConnectionRetryInterval")]
        public Input<int>? MsdpConnectionRetryInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("msdpConnectionRetryIntervalVariable")]
        public Input<string>? MsdpConnectionRetryIntervalVariable { get; set; }

        [Input("msdpGroups")]
        private InputList<Inputs.ServiceMulticastFeatureMsdpGroupArgs>? _msdpGroups;

        /// <summary>
        /// multicast MSDP peer
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureMsdpGroupArgs> MsdpGroups
        {
            get => _msdpGroups ?? (_msdpGroups = new InputList<Inputs.ServiceMulticastFeatureMsdpGroupArgs>());
            set => _msdpGroups = value;
        }

        /// <summary>
        /// Set MSDP originator ID
        /// </summary>
        [Input("msdpOriginatorId")]
        public Input<string>? MsdpOriginatorId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("msdpOriginatorIdVariable")]
        public Input<string>? MsdpOriginatorIdVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pimBsrCandidates")]
        private InputList<Inputs.ServiceMulticastFeaturePimBsrCandidateArgs>? _pimBsrCandidates;

        /// <summary>
        /// bsr candidate Attributes
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeaturePimBsrCandidateArgs> PimBsrCandidates
        {
            get => _pimBsrCandidates ?? (_pimBsrCandidates = new InputList<Inputs.ServiceMulticastFeaturePimBsrCandidateArgs>());
            set => _pimBsrCandidates = value;
        }

        [Input("pimBsrRpCandidates")]
        private InputList<Inputs.ServiceMulticastFeaturePimBsrRpCandidateArgs>? _pimBsrRpCandidates;

        /// <summary>
        /// Set RP Discovery Scope
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeaturePimBsrRpCandidateArgs> PimBsrRpCandidates
        {
            get => _pimBsrRpCandidates ?? (_pimBsrRpCandidates = new InputList<Inputs.ServiceMulticastFeaturePimBsrRpCandidateArgs>());
            set => _pimBsrRpCandidates = value;
        }

        [Input("pimInterfaces")]
        private InputList<Inputs.ServiceMulticastFeaturePimInterfaceArgs>? _pimInterfaces;

        /// <summary>
        /// Set PIM interface parameters
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeaturePimInterfaceArgs> PimInterfaces
        {
            get => _pimInterfaces ?? (_pimInterfaces = new InputList<Inputs.ServiceMulticastFeaturePimInterfaceArgs>());
            set => _pimInterfaces = value;
        }

        /// <summary>
        /// Set Access List for PIM SSM
        /// </summary>
        [Input("pimSourceSpecificMulticastAccessList")]
        public Input<string>? PimSourceSpecificMulticastAccessList { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pimSourceSpecificMulticastAccessListVariable")]
        public Input<string>? PimSourceSpecificMulticastAccessListVariable { get; set; }

        /// <summary>
        /// turn SSM on/off
        /// </summary>
        [Input("pimSourceSpecificMulticastEnable", required: true)]
        public Input<bool> PimSourceSpecificMulticastEnable { get; set; } = null!;

        /// <summary>
        /// Set when PIM router joins the SPT (kbps)
        ///   - Choices: `0`, `infinity`
        ///   - Default value: `0`
        /// </summary>
        [Input("pimSptThreshold")]
        public Input<string>? PimSptThreshold { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pimSptThresholdVariable")]
        public Input<string>? PimSptThresholdVariable { get; set; }

        /// <summary>
        /// Shortest Path Tree (SPT) Only Mode
        ///   - Default value: `false`
        /// </summary>
        [Input("sptOnly")]
        public Input<bool>? SptOnly { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sptOnlyVariable")]
        public Input<string>? SptOnlyVariable { get; set; }

        [Input("staticRpAddresses")]
        private InputList<Inputs.ServiceMulticastFeatureStaticRpAddressArgs>? _staticRpAddresses;

        /// <summary>
        /// Set Static RP Address(es)
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureStaticRpAddressArgs> StaticRpAddresses
        {
            get => _staticRpAddresses ?? (_staticRpAddresses = new InputList<Inputs.ServiceMulticastFeatureStaticRpAddressArgs>());
            set => _staticRpAddresses = value;
        }

        public ServiceMulticastFeatureArgs()
        {
        }
        public static new ServiceMulticastFeatureArgs Empty => new ServiceMulticastFeatureArgs();
    }

    public sealed class ServiceMulticastFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("autoRpAnnounces")]
        private InputList<Inputs.ServiceMulticastFeatureAutoRpAnnounceGetArgs>? _autoRpAnnounces;

        /// <summary>
        /// Enable or disable RP Announce
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureAutoRpAnnounceGetArgs> AutoRpAnnounces
        {
            get => _autoRpAnnounces ?? (_autoRpAnnounces = new InputList<Inputs.ServiceMulticastFeatureAutoRpAnnounceGetArgs>());
            set => _autoRpAnnounces = value;
        }

        [Input("autoRpDiscoveries")]
        private InputList<Inputs.ServiceMulticastFeatureAutoRpDiscoveryGetArgs>? _autoRpDiscoveries;

        /// <summary>
        /// Enable or disable RP Discovery
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureAutoRpDiscoveryGetArgs> AutoRpDiscoveries
        {
            get => _autoRpDiscoveries ?? (_autoRpDiscoveries = new InputList<Inputs.ServiceMulticastFeatureAutoRpDiscoveryGetArgs>());
            set => _autoRpDiscoveries = value;
        }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable or disable auto-RP
        ///   - Default value: `false`
        /// </summary>
        [Input("enableAutoRp")]
        public Input<bool>? EnableAutoRp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableAutoRpVariable")]
        public Input<string>? EnableAutoRpVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("igmpInterfaces")]
        private InputList<Inputs.ServiceMulticastFeatureIgmpInterfaceGetArgs>? _igmpInterfaces;

        /// <summary>
        /// Set IGMP interface parameters
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureIgmpInterfaceGetArgs> IgmpInterfaces
        {
            get => _igmpInterfaces ?? (_igmpInterfaces = new InputList<Inputs.ServiceMulticastFeatureIgmpInterfaceGetArgs>());
            set => _igmpInterfaces = value;
        }

        /// <summary>
        /// Replicator is local to this device
        ///   - Default value: `false`
        /// </summary>
        [Input("localReplicator")]
        public Input<bool>? LocalReplicator { get; set; }

        /// <summary>
        /// Set number of joins per group the router supports
        ///   - Range: `0`-`131072`
        /// </summary>
        [Input("localReplicatorThreshold")]
        public Input<int>? LocalReplicatorThreshold { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("localReplicatorThresholdVariable")]
        public Input<string>? LocalReplicatorThresholdVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("localReplicatorVariable")]
        public Input<string>? LocalReplicatorVariable { get; set; }

        /// <summary>
        /// Set MSDP refresh timer
        ///   - Range: `1`-`60`
        /// </summary>
        [Input("msdpConnectionRetryInterval")]
        public Input<int>? MsdpConnectionRetryInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("msdpConnectionRetryIntervalVariable")]
        public Input<string>? MsdpConnectionRetryIntervalVariable { get; set; }

        [Input("msdpGroups")]
        private InputList<Inputs.ServiceMulticastFeatureMsdpGroupGetArgs>? _msdpGroups;

        /// <summary>
        /// multicast MSDP peer
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureMsdpGroupGetArgs> MsdpGroups
        {
            get => _msdpGroups ?? (_msdpGroups = new InputList<Inputs.ServiceMulticastFeatureMsdpGroupGetArgs>());
            set => _msdpGroups = value;
        }

        /// <summary>
        /// Set MSDP originator ID
        /// </summary>
        [Input("msdpOriginatorId")]
        public Input<string>? MsdpOriginatorId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("msdpOriginatorIdVariable")]
        public Input<string>? MsdpOriginatorIdVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("pimBsrCandidates")]
        private InputList<Inputs.ServiceMulticastFeaturePimBsrCandidateGetArgs>? _pimBsrCandidates;

        /// <summary>
        /// bsr candidate Attributes
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeaturePimBsrCandidateGetArgs> PimBsrCandidates
        {
            get => _pimBsrCandidates ?? (_pimBsrCandidates = new InputList<Inputs.ServiceMulticastFeaturePimBsrCandidateGetArgs>());
            set => _pimBsrCandidates = value;
        }

        [Input("pimBsrRpCandidates")]
        private InputList<Inputs.ServiceMulticastFeaturePimBsrRpCandidateGetArgs>? _pimBsrRpCandidates;

        /// <summary>
        /// Set RP Discovery Scope
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeaturePimBsrRpCandidateGetArgs> PimBsrRpCandidates
        {
            get => _pimBsrRpCandidates ?? (_pimBsrRpCandidates = new InputList<Inputs.ServiceMulticastFeaturePimBsrRpCandidateGetArgs>());
            set => _pimBsrRpCandidates = value;
        }

        [Input("pimInterfaces")]
        private InputList<Inputs.ServiceMulticastFeaturePimInterfaceGetArgs>? _pimInterfaces;

        /// <summary>
        /// Set PIM interface parameters
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeaturePimInterfaceGetArgs> PimInterfaces
        {
            get => _pimInterfaces ?? (_pimInterfaces = new InputList<Inputs.ServiceMulticastFeaturePimInterfaceGetArgs>());
            set => _pimInterfaces = value;
        }

        /// <summary>
        /// Set Access List for PIM SSM
        /// </summary>
        [Input("pimSourceSpecificMulticastAccessList")]
        public Input<string>? PimSourceSpecificMulticastAccessList { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pimSourceSpecificMulticastAccessListVariable")]
        public Input<string>? PimSourceSpecificMulticastAccessListVariable { get; set; }

        /// <summary>
        /// turn SSM on/off
        /// </summary>
        [Input("pimSourceSpecificMulticastEnable")]
        public Input<bool>? PimSourceSpecificMulticastEnable { get; set; }

        /// <summary>
        /// Set when PIM router joins the SPT (kbps)
        ///   - Choices: `0`, `infinity`
        ///   - Default value: `0`
        /// </summary>
        [Input("pimSptThreshold")]
        public Input<string>? PimSptThreshold { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pimSptThresholdVariable")]
        public Input<string>? PimSptThresholdVariable { get; set; }

        /// <summary>
        /// Shortest Path Tree (SPT) Only Mode
        ///   - Default value: `false`
        /// </summary>
        [Input("sptOnly")]
        public Input<bool>? SptOnly { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sptOnlyVariable")]
        public Input<string>? SptOnlyVariable { get; set; }

        [Input("staticRpAddresses")]
        private InputList<Inputs.ServiceMulticastFeatureStaticRpAddressGetArgs>? _staticRpAddresses;

        /// <summary>
        /// Set Static RP Address(es)
        /// </summary>
        public InputList<Inputs.ServiceMulticastFeatureStaticRpAddressGetArgs> StaticRpAddresses
        {
            get => _staticRpAddresses ?? (_staticRpAddresses = new InputList<Inputs.ServiceMulticastFeatureStaticRpAddressGetArgs>());
            set => _staticRpAddresses = value;
        }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ServiceMulticastFeatureState()
        {
        }
        public static new ServiceMulticastFeatureState Empty => new ServiceMulticastFeatureState();
    }
}
