// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Transport Management VPN Interface Ethernet Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "transport_management_vpn_interface_ethernet_feature_id,feature_profile_id,transport_management_vpn_feature_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/transportManagementVpnInterfaceEthernetFeature:TransportManagementVpnInterfaceEthernetFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/transportManagementVpnInterfaceEthernetFeature:TransportManagementVpnInterfaceEthernetFeature")]
    public partial class TransportManagementVpnInterfaceEthernetFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure ARP entries
        /// </summary>
        [Output("arpEntries")]
        public Output<ImmutableArray<Outputs.TransportManagementVpnInterfaceEthernetFeatureArpEntry>> ArpEntries { get; private set; } = null!;

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Output("arpTimeout")]
        public Output<int?> ArpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("arpTimeoutVariable")]
        public Output<string?> ArpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Output("autonegotiate")]
        public Output<bool?> Autonegotiate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("autonegotiateVariable")]
        public Output<string?> AutonegotiateVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`, `Auto`
        /// </summary>
        [Output("duplex")]
        public Output<string?> Duplex { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("duplexVariable")]
        public Output<string?> DuplexVariable { get; private set; } = null!;

        /// <summary>
        /// Enable DHCPv6, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Output("enableDhcpv6")]
        public Output<bool?> EnableDhcpv6 { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        ///   - Default value: `True`
        /// </summary>
        [Output("icmpRedirectDisable")]
        public Output<bool?> IcmpRedirectDisable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("icmpRedirectDisableVariable")]
        public Output<string?> IcmpRedirectDisableVariable { get; private set; } = null!;

        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `False`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// IP Address, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `False`
        /// </summary>
        [Output("ipv4AutoDetectBandwidth")]
        public Output<bool?> Ipv4AutoDetectBandwidth { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4AutoDetectBandwidthVariable")]
        public Output<string?> Ipv4AutoDetectBandwidthVariable { get; private set; } = null!;

        /// <summary>
        /// IPv4 Configuration Type
        ///   - Choices: `Dynamic`, `Static`
        ///   - Default value: `Dynamic`
        /// </summary>
        [Output("ipv4ConfigurationType")]
        public Output<string?> Ipv4ConfigurationType { get; private set; } = null!;

        /// <summary>
        /// DHCP Distance, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Output("ipv4DhcpDistance")]
        public Output<int?> Ipv4DhcpDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Output("ipv4DhcpDistanceVariable")]
        public Output<string?> Ipv4DhcpDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpHelperVariable")]
        public Output<string?> Ipv4DhcpHelperVariable { get; private set; } = null!;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        [Output("ipv4DhcpHelpers")]
        public Output<ImmutableArray<string>> Ipv4DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Output("ipv4IperfServer")]
        public Output<string?> Ipv4IperfServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4IperfServerVariable")]
        public Output<string?> Ipv4IperfServerVariable { get; private set; } = null!;

        /// <summary>
        /// Secondary IpV4 Addresses, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress>> Ipv4SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Subnet Mask, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("ipv4SubnetMask")]
        public Output<string?> Ipv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4SubnetMaskVariable")]
        public Output<string?> Ipv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Secondary, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv6Address")]
        public Output<string?> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv6AddressVariable")]
        public Output<string?> Ipv6AddressVariable { get; private set; } = null!;

        /// <summary>
        /// IPv6 Configuration Type
        ///   - Choices: `Dynamic`, `Static`, `None`
        ///   - Default value: `None`
        /// </summary>
        [Output("ipv6ConfigurationType")]
        public Output<string?> Ipv6ConfigurationType { get; private set; } = null!;

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Output("loadInterval")]
        public Output<int?> LoadInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("loadIntervalVariable")]
        public Output<string?> LoadIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// MAC Address
        /// </summary>
        [Output("macAddress")]
        public Output<string?> MacAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("macAddressVariable")]
        public Output<string?> MacAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `Rj45`, `Sfp`
        /// </summary>
        [Output("mediaType")]
        public Output<string?> MediaType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mediaTypeVariable")]
        public Output<string?> MediaTypeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// - Default value: `True`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Output("speed")]
        public Output<string?> Speed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("speedVariable")]
        public Output<string?> SpeedVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Transport Management VPN Feature ID
        /// </summary>
        [Output("transportManagementVpnFeatureId")]
        public Output<string> TransportManagementVpnFeatureId { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TransportManagementVpnInterfaceEthernetFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransportManagementVpnInterfaceEthernetFeature(string name, TransportManagementVpnInterfaceEthernetFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/transportManagementVpnInterfaceEthernetFeature:TransportManagementVpnInterfaceEthernetFeature", name, args ?? new TransportManagementVpnInterfaceEthernetFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransportManagementVpnInterfaceEthernetFeature(string name, Input<string> id, TransportManagementVpnInterfaceEthernetFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/transportManagementVpnInterfaceEthernetFeature:TransportManagementVpnInterfaceEthernetFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransportManagementVpnInterfaceEthernetFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransportManagementVpnInterfaceEthernetFeature Get(string name, Input<string> id, TransportManagementVpnInterfaceEthernetFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new TransportManagementVpnInterfaceEthernetFeature(name, id, state, options);
        }
    }

    public sealed class TransportManagementVpnInterfaceEthernetFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("arpEntries")]
        private InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureArpEntryArgs>? _arpEntries;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureArpEntryArgs> ArpEntries
        {
            get => _arpEntries ?? (_arpEntries = new InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureArpEntryArgs>());
            set => _arpEntries = value;
        }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`, `Auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("enableDhcpv6")]
        public Input<bool>? EnableDhcpv6 { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        ///   - Default value: `True`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `False`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// IP Address, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv4AutoDetectBandwidth")]
        public Input<bool>? Ipv4AutoDetectBandwidth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AutoDetectBandwidthVariable")]
        public Input<string>? Ipv4AutoDetectBandwidthVariable { get; set; }

        /// <summary>
        /// IPv4 Configuration Type
        ///   - Choices: `Dynamic`, `Static`
        ///   - Default value: `Dynamic`
        /// </summary>
        [Input("ipv4ConfigurationType")]
        public Input<string>? Ipv4ConfigurationType { get; set; }

        /// <summary>
        /// DHCP Distance, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("ipv4DhcpDistance")]
        public Input<int>? Ipv4DhcpDistance { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("ipv4DhcpDistanceVariable")]
        public Input<string>? Ipv4DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Input("ipv4IperfServer")]
        public Input<string>? Ipv4IperfServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4IperfServerVariable")]
        public Input<string>? Ipv4IperfServerVariable { get; set; }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Secondary IpV4 Addresses, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        public InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        /// <summary>
        /// Subnet Mask, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// IPv6 Address Secondary, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// IPv6 Configuration Type
        ///   - Choices: `Dynamic`, `Static`, `None`
        ///   - Default value: `None`
        /// </summary>
        [Input("ipv6ConfigurationType")]
        public Input<string>? Ipv6ConfigurationType { get; set; }

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// MAC Address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `Rj45`, `Sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - Default value: `True`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Transport Management VPN Feature ID
        /// </summary>
        [Input("transportManagementVpnFeatureId", required: true)]
        public Input<string> TransportManagementVpnFeatureId { get; set; } = null!;

        public TransportManagementVpnInterfaceEthernetFeatureArgs()
        {
        }
        public static new TransportManagementVpnInterfaceEthernetFeatureArgs Empty => new TransportManagementVpnInterfaceEthernetFeatureArgs();
    }

    public sealed class TransportManagementVpnInterfaceEthernetFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("arpEntries")]
        private InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureArpEntryGetArgs>? _arpEntries;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureArpEntryGetArgs> ArpEntries
        {
            get => _arpEntries ?? (_arpEntries = new InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureArpEntryGetArgs>());
            set => _arpEntries = value;
        }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`, `Auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("enableDhcpv6")]
        public Input<bool>? EnableDhcpv6 { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        ///   - Default value: `True`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `False`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// IP Address, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv4AutoDetectBandwidth")]
        public Input<bool>? Ipv4AutoDetectBandwidth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AutoDetectBandwidthVariable")]
        public Input<string>? Ipv4AutoDetectBandwidthVariable { get; set; }

        /// <summary>
        /// IPv4 Configuration Type
        ///   - Choices: `Dynamic`, `Static`
        ///   - Default value: `Dynamic`
        /// </summary>
        [Input("ipv4ConfigurationType")]
        public Input<string>? Ipv4ConfigurationType { get; set; }

        /// <summary>
        /// DHCP Distance, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("ipv4DhcpDistance")]
        public Input<int>? Ipv4DhcpDistance { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("ipv4DhcpDistanceVariable")]
        public Input<string>? Ipv4DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Input("ipv4IperfServer")]
        public Input<string>? Ipv4IperfServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4IperfServerVariable")]
        public Input<string>? Ipv4IperfServerVariable { get; set; }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Secondary IpV4 Addresses, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        public InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        /// <summary>
        /// Subnet Mask, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// IPv6 Address Secondary, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// IPv6 Configuration Type
        ///   - Choices: `Dynamic`, `Static`, `None`
        ///   - Default value: `None`
        /// </summary>
        [Input("ipv6ConfigurationType")]
        public Input<string>? Ipv6ConfigurationType { get; set; }

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// MAC Address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `Rj45`, `Sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// - Default value: `True`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Transport Management VPN Feature ID
        /// </summary>
        [Input("transportManagementVpnFeatureId")]
        public Input<string>? TransportManagementVpnFeatureId { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TransportManagementVpnInterfaceEthernetFeatureState()
        {
        }
        public static new TransportManagementVpnInterfaceEthernetFeatureState Empty => new TransportManagementVpnInterfaceEthernetFeatureState();
    }
}
