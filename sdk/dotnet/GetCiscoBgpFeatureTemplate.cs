// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoBgpFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco BGP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoBgpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoBgpFeatureTemplateResult> InvokeAsync(GetCiscoBgpFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoBgpFeatureTemplateResult>("sdwan:index/getCiscoBgpFeatureTemplate:getCiscoBgpFeatureTemplate", args ?? new GetCiscoBgpFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco BGP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoBgpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoBgpFeatureTemplateResult> Invoke(GetCiscoBgpFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoBgpFeatureTemplateResult>("sdwan:index/getCiscoBgpFeatureTemplate:getCiscoBgpFeatureTemplate", args ?? new GetCiscoBgpFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoBgpFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoBgpFeatureTemplateArgs()
        {
        }
        public static new GetCiscoBgpFeatureTemplateArgs Empty => new GetCiscoBgpFeatureTemplateArgs();
    }

    public sealed class GetCiscoBgpFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoBgpFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoBgpFeatureTemplateInvokeArgs Empty => new GetCiscoBgpFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoBgpFeatureTemplateResult
    {
        /// <summary>
        /// Set BGP address family
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateAddressFamilyResult> AddressFamilies;
        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        /// </summary>
        public readonly bool AlwaysCompareMed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AlwaysCompareMedVariable;
        /// <summary>
        /// Set autonomous system number \n\n or \n\n
        /// </summary>
        public readonly string AsNumber;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AsNumberVariable;
        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        /// </summary>
        public readonly bool CompareRouterId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CompareRouterIdVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        /// </summary>
        public readonly bool DeterministicMed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DeterministicMedVariable;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Set administrative distance for external BGP routes
        /// </summary>
        public readonly int DistanceExternal;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceExternalVariable;
        /// <summary>
        /// Set administrative distance for internal BGP routes
        /// </summary>
        public readonly int DistanceInternal;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceInternalVariable;
        /// <summary>
        /// Set administrative distance for local BGP routes
        /// </summary>
        public readonly int DistanceLocal;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceLocalVariable;
        /// <summary>
        /// Set the interval when BGP considers a neighbor to be down
        /// </summary>
        public readonly int Holdtime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string HoldtimeVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set BGP neighbors
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv4NeighborResult> Ipv4Neighbors;
        /// <summary>
        /// Router Target for IPV4
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetResult> Ipv4RouteTargets;
        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv6NeighborResult> Ipv6Neighbors;
        /// <summary>
        /// Router Target for IPV6
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetResult> Ipv6RouteTargets;
        /// <summary>
        /// Set how often keepalive messages are sent to BGP peer
        /// </summary>
        public readonly int Keepalive;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string KeepaliveVariable;
        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        /// </summary>
        public readonly bool MissingMedWorst;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MissingMedWorstVariable;
        /// <summary>
        /// MPLS BGP Interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateMplsInterfaceResult> MplsInterfaces;
        /// <summary>
        /// Ignore AS for multipath selection
        /// </summary>
        public readonly bool MultipathRelax;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MultipathRelaxVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Propagate AS Path
        /// </summary>
        public readonly bool PropagateAspath;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PropagateAspathVariable;
        /// <summary>
        /// Propagate Community
        /// </summary>
        public readonly bool PropagateCommunity;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PropagateCommunityVariable;
        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RouterIdVariable;
        /// <summary>
        /// Enable or disable BGP
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCiscoBgpFeatureTemplateResult(
            ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateAddressFamilyResult> addressFamilies,

            bool alwaysCompareMed,

            string alwaysCompareMedVariable,

            string asNumber,

            string asNumberVariable,

            bool compareRouterId,

            string compareRouterIdVariable,

            string description,

            bool deterministicMed,

            string deterministicMedVariable,

            ImmutableArray<string> deviceTypes,

            int distanceExternal,

            string distanceExternalVariable,

            int distanceInternal,

            string distanceInternalVariable,

            int distanceLocal,

            string distanceLocalVariable,

            int holdtime,

            string holdtimeVariable,

            string id,

            ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv4NeighborResult> ipv4Neighbors,

            ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetResult> ipv4RouteTargets,

            ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv6NeighborResult> ipv6Neighbors,

            ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetResult> ipv6RouteTargets,

            int keepalive,

            string keepaliveVariable,

            bool missingMedWorst,

            string missingMedWorstVariable,

            ImmutableArray<Outputs.GetCiscoBgpFeatureTemplateMplsInterfaceResult> mplsInterfaces,

            bool multipathRelax,

            string multipathRelaxVariable,

            string name,

            bool propagateAspath,

            string propagateAspathVariable,

            bool propagateCommunity,

            string propagateCommunityVariable,

            string routerId,

            string routerIdVariable,

            bool shutdown,

            string shutdownVariable,

            string templateType,

            int version)
        {
            AddressFamilies = addressFamilies;
            AlwaysCompareMed = alwaysCompareMed;
            AlwaysCompareMedVariable = alwaysCompareMedVariable;
            AsNumber = asNumber;
            AsNumberVariable = asNumberVariable;
            CompareRouterId = compareRouterId;
            CompareRouterIdVariable = compareRouterIdVariable;
            Description = description;
            DeterministicMed = deterministicMed;
            DeterministicMedVariable = deterministicMedVariable;
            DeviceTypes = deviceTypes;
            DistanceExternal = distanceExternal;
            DistanceExternalVariable = distanceExternalVariable;
            DistanceInternal = distanceInternal;
            DistanceInternalVariable = distanceInternalVariable;
            DistanceLocal = distanceLocal;
            DistanceLocalVariable = distanceLocalVariable;
            Holdtime = holdtime;
            HoldtimeVariable = holdtimeVariable;
            Id = id;
            Ipv4Neighbors = ipv4Neighbors;
            Ipv4RouteTargets = ipv4RouteTargets;
            Ipv6Neighbors = ipv6Neighbors;
            Ipv6RouteTargets = ipv6RouteTargets;
            Keepalive = keepalive;
            KeepaliveVariable = keepaliveVariable;
            MissingMedWorst = missingMedWorst;
            MissingMedWorstVariable = missingMedWorstVariable;
            MplsInterfaces = mplsInterfaces;
            MultipathRelax = multipathRelax;
            MultipathRelaxVariable = multipathRelaxVariable;
            Name = name;
            PropagateAspath = propagateAspath;
            PropagateAspathVariable = propagateAspathVariable;
            PropagateCommunity = propagateCommunity;
            PropagateCommunityVariable = propagateCommunityVariable;
            RouterId = routerId;
            RouterIdVariable = routerIdVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TemplateType = templateType;
            Version = version;
        }
    }
}
