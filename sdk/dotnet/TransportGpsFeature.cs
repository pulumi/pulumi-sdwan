// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Transport GPS Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.TransportGpsFeature("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         GpsEnable = false,
    ///         GpsMode = "ms-based",
    ///         NmeaEnable = false,
    ///         NmeaSourceAddress = "1.2.3.4",
    ///         NmeaDestinationAddress = "2.3.4.5",
    ///         NmeaDestinationPort = 22,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/transportGpsFeature:TransportGpsFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/transportGpsFeature:TransportGpsFeature")]
    public partial class TransportGpsFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Enable/disable GPS - Default value: `false`
        /// </summary>
        [Output("gpsEnable")]
        public Output<bool?> GpsEnable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("gpsEnableVariable")]
        public Output<string?> GpsEnableVariable { get; private set; } = null!;

        /// <summary>
        /// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
        /// </summary>
        [Output("gpsMode")]
        public Output<string?> GpsMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("gpsModeVariable")]
        public Output<string?> GpsModeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Destination address
        /// </summary>
        [Output("nmeaDestinationAddress")]
        public Output<string?> NmeaDestinationAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nmeaDestinationAddressVariable")]
        public Output<string?> NmeaDestinationAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Destination port - Range: `1`-`65535`
        /// </summary>
        [Output("nmeaDestinationPort")]
        public Output<int?> NmeaDestinationPort { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nmeaDestinationPortVariable")]
        public Output<string?> NmeaDestinationPortVariable { get; private set; } = null!;

        /// <summary>
        /// Enable/disable NMEA data - Default value: `false`
        /// </summary>
        [Output("nmeaEnable")]
        public Output<bool?> NmeaEnable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nmeaEnableVariable")]
        public Output<string?> NmeaEnableVariable { get; private set; } = null!;

        /// <summary>
        /// Source address
        /// </summary>
        [Output("nmeaSourceAddress")]
        public Output<string?> NmeaSourceAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nmeaSourceAddressVariable")]
        public Output<string?> NmeaSourceAddressVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TransportGpsFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransportGpsFeature(string name, TransportGpsFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/transportGpsFeature:TransportGpsFeature", name, args ?? new TransportGpsFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransportGpsFeature(string name, Input<string> id, TransportGpsFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/transportGpsFeature:TransportGpsFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransportGpsFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransportGpsFeature Get(string name, Input<string> id, TransportGpsFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new TransportGpsFeature(name, id, state, options);
        }
    }

    public sealed class TransportGpsFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Enable/disable GPS - Default value: `false`
        /// </summary>
        [Input("gpsEnable")]
        public Input<bool>? GpsEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsEnableVariable")]
        public Input<string>? GpsEnableVariable { get; set; }

        /// <summary>
        /// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
        /// </summary>
        [Input("gpsMode")]
        public Input<string>? GpsMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsModeVariable")]
        public Input<string>? GpsModeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Destination address
        /// </summary>
        [Input("nmeaDestinationAddress")]
        public Input<string>? NmeaDestinationAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaDestinationAddressVariable")]
        public Input<string>? NmeaDestinationAddressVariable { get; set; }

        /// <summary>
        /// Destination port - Range: `1`-`65535`
        /// </summary>
        [Input("nmeaDestinationPort")]
        public Input<int>? NmeaDestinationPort { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaDestinationPortVariable")]
        public Input<string>? NmeaDestinationPortVariable { get; set; }

        /// <summary>
        /// Enable/disable NMEA data - Default value: `false`
        /// </summary>
        [Input("nmeaEnable")]
        public Input<bool>? NmeaEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaEnableVariable")]
        public Input<string>? NmeaEnableVariable { get; set; }

        /// <summary>
        /// Source address
        /// </summary>
        [Input("nmeaSourceAddress")]
        public Input<string>? NmeaSourceAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaSourceAddressVariable")]
        public Input<string>? NmeaSourceAddressVariable { get; set; }

        public TransportGpsFeatureArgs()
        {
        }
        public static new TransportGpsFeatureArgs Empty => new TransportGpsFeatureArgs();
    }

    public sealed class TransportGpsFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Enable/disable GPS - Default value: `false`
        /// </summary>
        [Input("gpsEnable")]
        public Input<bool>? GpsEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsEnableVariable")]
        public Input<string>? GpsEnableVariable { get; set; }

        /// <summary>
        /// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
        /// </summary>
        [Input("gpsMode")]
        public Input<string>? GpsMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsModeVariable")]
        public Input<string>? GpsModeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Destination address
        /// </summary>
        [Input("nmeaDestinationAddress")]
        public Input<string>? NmeaDestinationAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaDestinationAddressVariable")]
        public Input<string>? NmeaDestinationAddressVariable { get; set; }

        /// <summary>
        /// Destination port - Range: `1`-`65535`
        /// </summary>
        [Input("nmeaDestinationPort")]
        public Input<int>? NmeaDestinationPort { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaDestinationPortVariable")]
        public Input<string>? NmeaDestinationPortVariable { get; set; }

        /// <summary>
        /// Enable/disable NMEA data - Default value: `false`
        /// </summary>
        [Input("nmeaEnable")]
        public Input<bool>? NmeaEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaEnableVariable")]
        public Input<string>? NmeaEnableVariable { get; set; }

        /// <summary>
        /// Source address
        /// </summary>
        [Input("nmeaSourceAddress")]
        public Input<string>? NmeaSourceAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaSourceAddressVariable")]
        public Input<string>? NmeaSourceAddressVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TransportGpsFeatureState()
        {
        }
        public static new TransportGpsFeatureState Empty => new TransportGpsFeatureState();
    }
}
