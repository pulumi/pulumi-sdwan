// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoVpnInterfaceFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco VPN Interface feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoVpnInterfaceFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoVpnInterfaceFeatureTemplateResult> InvokeAsync(GetCiscoVpnInterfaceFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoVpnInterfaceFeatureTemplateResult>("sdwan:index/getCiscoVpnInterfaceFeatureTemplate:getCiscoVpnInterfaceFeatureTemplate", args ?? new GetCiscoVpnInterfaceFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco VPN Interface feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoVpnInterfaceFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoVpnInterfaceFeatureTemplateResult> Invoke(GetCiscoVpnInterfaceFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoVpnInterfaceFeatureTemplateResult>("sdwan:index/getCiscoVpnInterfaceFeatureTemplate:getCiscoVpnInterfaceFeatureTemplate", args ?? new GetCiscoVpnInterfaceFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoVpnInterfaceFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoVpnInterfaceFeatureTemplateArgs()
        {
        }
        public static new GetCiscoVpnInterfaceFeatureTemplateArgs Empty => new GetCiscoVpnInterfaceFeatureTemplateArgs();
    }

    public sealed class GetCiscoVpnInterfaceFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoVpnInterfaceFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoVpnInterfaceFeatureTemplateInvokeArgs Empty => new GetCiscoVpnInterfaceFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoVpnInterfaceFeatureTemplateResult
    {
        /// <summary>
        /// Apply ACL
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateAccessListResult> AccessLists;
        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AddressVariable;
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, \n\n seconds
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpTimeoutVariable;
        /// <summary>
        /// Interface auto detect bandwidth
        /// </summary>
        public readonly bool AutoBandwidthDetect;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutoBandwidthDetectVariable;
        /// <summary>
        /// Link autonegotiation
        /// </summary>
        public readonly bool Autonegotiate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutonegotiateVariable;
        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthDownstreamVariable;
        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthUpstreamVariable;
        /// <summary>
        /// Block packets originating from IP address that is not from this source
        /// </summary>
        public readonly bool BlockNonSourceIp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BlockNonSourceIpVariable;
        /// <summary>
        /// Enable core region
        /// </summary>
        public readonly string CoreRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CoreRegionVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Enable DHCP
        /// </summary>
        public readonly bool Dhcp;
        /// <summary>
        /// Set administrative distance for DHCP default route
        /// </summary>
        public readonly int DhcpDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DhcpDistanceVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DhcpVariable;
        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        public readonly bool Dhcpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Dhcpv6Variable;
        /// <summary>
        /// Duplex mode
        /// </summary>
        public readonly string Duplex;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DuplexVariable;
        /// <summary>
        /// Enable core region
        /// </summary>
        public readonly bool EnableCoreRegion;
        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        /// </summary>
        public readonly bool EnableSgt;
        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        public readonly string GreTunnelSourceIp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GreTunnelSourceIpVariable;
        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        public readonly string GreTunnelXconnect;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GreTunnelXconnectVariable;
        /// <summary>
        /// Set this option to disable the icmp/icmpv6 redirect packets
        /// </summary>
        public readonly bool IcmpRedirectDisable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IcmpRedirectDisableVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Interface description
        /// </summary>
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        /// <summary>
        /// Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
        /// </summary>
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        public readonly string IperfServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IperfServerVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpHelperVariable;
        /// <summary>
        /// List of DHCP IPv4 helper addresses
        /// </summary>
        public readonly ImmutableArray<string> Ipv4DhcpHelpers;
        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressResult> Ipv4SecondaryAddresses;
        /// <summary>
        /// Enable VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpResult> Ipv4Vrrps;
        /// <summary>
        /// Apply IPv6 access list
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6AccessListResult> Ipv6AccessLists;
        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperResult> Ipv6DhcpHelpers;
        /// <summary>
        /// NAT64 on this interface
        /// </summary>
        public readonly bool Ipv6Nat;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6NatVariable;
        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressResult> Ipv6SecondaryAddresses;
        /// <summary>
        /// Enable VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpResult> Ipv6Vrrps;
        /// <summary>
        /// Interval for interface load calculation
        /// </summary>
        public readonly int LoadInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LoadIntervalVariable;
        /// <summary>
        /// Set MAC-layer address
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MacAddressVariable;
        /// <summary>
        /// Media type
        /// </summary>
        public readonly string MediaType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MediaTypeVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network Address Translation on this interface
        /// </summary>
        public readonly bool Nat;
        /// <summary>
        /// NAT64 on this interface
        /// </summary>
        public readonly bool Nat64Interface;
        /// <summary>
        /// NAT66 on this interface
        /// </summary>
        public readonly bool Nat66Interface;
        /// <summary>
        /// Configure NAT Inside Loopback Interface
        /// </summary>
        public readonly string NatInsideSourceLoopbackInterface;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatInsideSourceLoopbackInterfaceVariable;
        /// <summary>
        /// Enable port translation(PAT)
        /// </summary>
        public readonly bool NatOverload;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatOverloadVariable;
        /// <summary>
        /// Ending IP address of NAT Pool Prefix Length
        /// </summary>
        public readonly int NatPoolPrefixLength;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatPoolPrefixLengthVariable;
        /// <summary>
        /// Ending IP address of NAT pool range
        /// </summary>
        public readonly string NatPoolRangeEnd;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatPoolRangeEndVariable;
        /// <summary>
        /// Starting IP address of NAT pool range
        /// </summary>
        public readonly string NatPoolRangeStart;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatPoolRangeStartVariable;
        /// <summary>
        /// NAT type
        /// </summary>
        public readonly string NatType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatTypeVariable;
        /// <summary>
        /// Configure interface as Power-over-Ethernet source
        /// </summary>
        public readonly bool Poe;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PoeVariable;
        /// <summary>
        /// Enable/Disable CTS SGT propagation on an interface.
        /// </summary>
        public readonly bool PropagateSgt;
        /// <summary>
        /// Adaptive QoS default downstream bandwidth
        /// </summary>
        public readonly int QosAdaptiveBandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveBandwidthDownstreamVariable;
        /// <summary>
        /// Adaptive QoS default upstream bandwidth
        /// </summary>
        public readonly int QosAdaptiveBandwidthUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveBandwidthUpstreamVariable;
        /// <summary>
        /// Downstream max bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMaxDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMaxDownstreamVariable;
        /// <summary>
        /// Upstream max bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMaxUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMaxUpstreamVariable;
        /// <summary>
        /// Downstream min bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMinDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMinDownstreamVariable;
        /// <summary>
        /// Upstream min bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMinUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMinUpstreamVariable;
        /// <summary>
        /// Periodic timer for adaptive QoS in minutes
        /// </summary>
        public readonly int QosAdaptivePeriod;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptivePeriodVariable;
        /// <summary>
        /// Name of QoS map
        /// </summary>
        public readonly string QosMap;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosMapVariable;
        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        public readonly string QosMapVpn;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosMapVpnVariable;
        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        public readonly string RewriteRuleName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RewriteRuleNameVariable;
        /// <summary>
        /// Enable secondary region
        /// </summary>
        public readonly string SecondaryRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryRegionVariable;
        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        /// </summary>
        public readonly bool SgtEnforcement;
        /// <summary>
        /// SGT value between 2 and 65519.
        /// </summary>
        public readonly int SgtEnforcementSgt;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SgtEnforcementSgtVariable;
        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        /// </summary>
        public readonly int ShapingRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShapingRateVariable;
        /// <summary>
        /// Administrative state
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Set interface speed
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpeedVariable;
        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticArpResult> StaticArps;
        /// <summary>
        /// static NAT
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNat66EntryResult> StaticNat66Entries;
        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNatEntryResult> StaticNatEntries;
        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryResult> StaticPortForwardEntries;
        /// <summary>
        /// SGT value between 2 and 65519.
        /// </summary>
        public readonly int StaticSgt;
        /// <summary>
        /// Indicates that the interface is trustworthy for CTS.
        /// </summary>
        public readonly bool StaticSgtTrusted;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string StaticSgtVariable;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMssAdjust;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssAdjustVariable;
        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        /// </summary>
        public readonly int TcpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpTimeoutVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        public readonly string TlocExtension;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TlocExtensionVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TrackerVariable;
        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public readonly ImmutableArray<string> Trackers;
        /// <summary>
        /// Tunnels Bandwidth Percent
        /// </summary>
        public readonly int TunnelBandwidth;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelBandwidthVariable;
        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        /// </summary>
        public readonly bool TunnelInterfaceAllowAll;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowAllVariable;
        /// <summary>
        /// Allow/deny BGP
        /// </summary>
        public readonly bool TunnelInterfaceAllowBgp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBgpVariable;
        /// <summary>
        /// Allow/Deny DHCP
        /// </summary>
        public readonly bool TunnelInterfaceAllowDhcp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDhcpVariable;
        /// <summary>
        /// Allow/Deny DNS
        /// </summary>
        public readonly bool TunnelInterfaceAllowDns;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDnsVariable;
        /// <summary>
        /// Allow/Deny Https
        /// </summary>
        public readonly bool TunnelInterfaceAllowHttps;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowHttpsVariable;
        /// <summary>
        /// Allow/Deny ICMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowIcmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowIcmpVariable;
        /// <summary>
        /// Allow/Deny NETCONF
        /// </summary>
        public readonly bool TunnelInterfaceAllowNetconf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNetconfVariable;
        /// <summary>
        /// Allow/Deny NTP
        /// </summary>
        public readonly bool TunnelInterfaceAllowNtp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNtpVariable;
        /// <summary>
        /// Allow/Deny OSPF
        /// </summary>
        public readonly bool TunnelInterfaceAllowOspf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowOspfVariable;
        /// <summary>
        /// Allow/Deny SNMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowSnmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSnmpVariable;
        /// <summary>
        /// Allow/Deny SSH
        /// </summary>
        public readonly bool TunnelInterfaceAllowSsh;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSshVariable;
        /// <summary>
        /// Allow/Deny STUN
        /// </summary>
        public readonly bool TunnelInterfaceAllowStun;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowStunVariable;
        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnel;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnelVariable;
        /// <summary>
        /// Set TLOC as border TLOC
        /// </summary>
        public readonly bool TunnelInterfaceBorder;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBorderVariable;
        /// <summary>
        /// Set carrier for TLOC
        /// </summary>
        public readonly string TunnelInterfaceCarrier;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceCarrierVariable;
        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        /// </summary>
        public readonly bool TunnelInterfaceClearDontFragment;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceClearDontFragmentVariable;
        /// <summary>
        /// Set color for TLOC
        /// </summary>
        public readonly string TunnelInterfaceColor;
        /// <summary>
        /// Restrict this TLOC behavior
        /// </summary>
        public readonly bool TunnelInterfaceColorRestrict;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorRestrictVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorVariable;
        /// <summary>
        /// Allow Control Connection
        /// </summary>
        public readonly bool TunnelInterfaceControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceControlConnectionsVariable;
        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationResult> TunnelInterfaceEncapsulations;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceExcludeControllerGroupListVariable;
        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceExcludeControllerGroupLists;
        /// <summary>
        /// Extend the TLOC to a remote node over GRE tunnel
        /// </summary>
        public readonly string TunnelInterfaceGreTunnelDestinationIp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGreTunnelDestinationIpVariable;
        /// <summary>
        /// List of groups
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceGroups;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGroupsVariable;
        /// <summary>
        /// Set time period of control hello packets \n\n milli seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloIntervalVariable;
        /// <summary>
        /// Set tolerance of control hello packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloTolerance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloToleranceVariable;
        /// <summary>
        /// Set TLOC as last resort
        /// </summary>
        public readonly bool TunnelInterfaceLastResortCircuit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLastResortCircuitVariable;
        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        /// </summary>
        public readonly bool TunnelInterfaceLowBandwidthLink;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLowBandwidthLinkVariable;
        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        /// </summary>
        public readonly int TunnelInterfaceMaxControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceMaxControlConnectionsVariable;
        /// <summary>
        /// Set time period of nat refresh packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceNatRefreshInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNatRefreshIntervalVariable;
        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        /// </summary>
        public readonly bool TunnelInterfaceNetworkBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNetworkBroadcastVariable;
        /// <summary>
        /// Disallow port hopping on the tunnel interface
        /// </summary>
        public readonly bool TunnelInterfacePortHop;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfacePortHopVariable;
        /// <summary>
        /// CTS SGT Propagation configuration
        /// </summary>
        public readonly bool TunnelInterfacePropagateSgt;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfacePropagateSgtVariable;
        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TunnelInterfaceTunnelTcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceTunnelTcpMssVariable;
        /// <summary>
        /// Put this wan interface in STUN mode only
        /// </summary>
        public readonly bool TunnelInterfaceVbondAsStunServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVbondAsStunServerVariable;
        /// <summary>
        /// Set interface preference for control connection to vManage \n\n
        /// </summary>
        public readonly int TunnelInterfaceVmanageConnectionPreference;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVmanageConnectionPreferenceVariable;
        /// <summary>
        /// Set tunnel QoS mode
        /// </summary>
        public readonly string TunnelQosMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelQosModeVariable;
        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        /// </summary>
        public readonly int UdpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string UdpTimeoutVariable;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCiscoVpnInterfaceFeatureTemplateResult(
            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateAccessListResult> accessLists,

            string address,

            string addressVariable,

            int arpTimeout,

            string arpTimeoutVariable,

            bool autoBandwidthDetect,

            string autoBandwidthDetectVariable,

            bool autonegotiate,

            string autonegotiateVariable,

            int bandwidthDownstream,

            string bandwidthDownstreamVariable,

            int bandwidthUpstream,

            string bandwidthUpstreamVariable,

            bool blockNonSourceIp,

            string blockNonSourceIpVariable,

            string coreRegion,

            string coreRegionVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            bool dhcp,

            int dhcpDistance,

            string dhcpDistanceVariable,

            string dhcpVariable,

            bool dhcpv6,

            string dhcpv6Variable,

            string duplex,

            string duplexVariable,

            bool enableCoreRegion,

            bool enableSgt,

            string greTunnelSourceIp,

            string greTunnelSourceIpVariable,

            string greTunnelXconnect,

            string greTunnelXconnectVariable,

            bool icmpRedirectDisable,

            string icmpRedirectDisableVariable,

            string id,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            int interfaceMtu,

            string interfaceMtuVariable,

            string interfaceName,

            string interfaceNameVariable,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            string iperfServer,

            string iperfServerVariable,

            string ipv4DhcpHelperVariable,

            ImmutableArray<string> ipv4DhcpHelpers,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressResult> ipv4SecondaryAddresses,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpResult> ipv4Vrrps,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6AccessListResult> ipv6AccessLists,

            string ipv6Address,

            string ipv6AddressVariable,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperResult> ipv6DhcpHelpers,

            bool ipv6Nat,

            string ipv6NatVariable,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressResult> ipv6SecondaryAddresses,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpResult> ipv6Vrrps,

            int loadInterval,

            string loadIntervalVariable,

            string macAddress,

            string macAddressVariable,

            string mediaType,

            string mediaTypeVariable,

            string name,

            bool nat,

            bool nat64Interface,

            bool nat66Interface,

            string natInsideSourceLoopbackInterface,

            string natInsideSourceLoopbackInterfaceVariable,

            bool natOverload,

            string natOverloadVariable,

            int natPoolPrefixLength,

            string natPoolPrefixLengthVariable,

            string natPoolRangeEnd,

            string natPoolRangeEndVariable,

            string natPoolRangeStart,

            string natPoolRangeStartVariable,

            string natType,

            string natTypeVariable,

            bool poe,

            string poeVariable,

            bool propagateSgt,

            int qosAdaptiveBandwidthDownstream,

            string qosAdaptiveBandwidthDownstreamVariable,

            int qosAdaptiveBandwidthUpstream,

            string qosAdaptiveBandwidthUpstreamVariable,

            int qosAdaptiveMaxDownstream,

            string qosAdaptiveMaxDownstreamVariable,

            int qosAdaptiveMaxUpstream,

            string qosAdaptiveMaxUpstreamVariable,

            int qosAdaptiveMinDownstream,

            string qosAdaptiveMinDownstreamVariable,

            int qosAdaptiveMinUpstream,

            string qosAdaptiveMinUpstreamVariable,

            int qosAdaptivePeriod,

            string qosAdaptivePeriodVariable,

            string qosMap,

            string qosMapVariable,

            string qosMapVpn,

            string qosMapVpnVariable,

            string rewriteRuleName,

            string rewriteRuleNameVariable,

            string secondaryRegion,

            string secondaryRegionVariable,

            bool sgtEnforcement,

            int sgtEnforcementSgt,

            string sgtEnforcementSgtVariable,

            int shapingRate,

            string shapingRateVariable,

            bool shutdown,

            string shutdownVariable,

            string speed,

            string speedVariable,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticArpResult> staticArps,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNat66EntryResult> staticNat66Entries,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNatEntryResult> staticNatEntries,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryResult> staticPortForwardEntries,

            int staticSgt,

            bool staticSgtTrusted,

            string staticSgtVariable,

            int tcpMssAdjust,

            string tcpMssAdjustVariable,

            int tcpTimeout,

            string tcpTimeoutVariable,

            string templateType,

            string tlocExtension,

            string tlocExtensionVariable,

            string trackerVariable,

            ImmutableArray<string> trackers,

            int tunnelBandwidth,

            string tunnelBandwidthVariable,

            bool tunnelInterfaceAllowAll,

            string tunnelInterfaceAllowAllVariable,

            bool tunnelInterfaceAllowBgp,

            string tunnelInterfaceAllowBgpVariable,

            bool tunnelInterfaceAllowDhcp,

            string tunnelInterfaceAllowDhcpVariable,

            bool tunnelInterfaceAllowDns,

            string tunnelInterfaceAllowDnsVariable,

            bool tunnelInterfaceAllowHttps,

            string tunnelInterfaceAllowHttpsVariable,

            bool tunnelInterfaceAllowIcmp,

            string tunnelInterfaceAllowIcmpVariable,

            bool tunnelInterfaceAllowNetconf,

            string tunnelInterfaceAllowNetconfVariable,

            bool tunnelInterfaceAllowNtp,

            string tunnelInterfaceAllowNtpVariable,

            bool tunnelInterfaceAllowOspf,

            string tunnelInterfaceAllowOspfVariable,

            bool tunnelInterfaceAllowSnmp,

            string tunnelInterfaceAllowSnmpVariable,

            bool tunnelInterfaceAllowSsh,

            string tunnelInterfaceAllowSshVariable,

            bool tunnelInterfaceAllowStun,

            string tunnelInterfaceAllowStunVariable,

            string tunnelInterfaceBindLoopbackTunnel,

            string tunnelInterfaceBindLoopbackTunnelVariable,

            bool tunnelInterfaceBorder,

            string tunnelInterfaceBorderVariable,

            string tunnelInterfaceCarrier,

            string tunnelInterfaceCarrierVariable,

            bool tunnelInterfaceClearDontFragment,

            string tunnelInterfaceClearDontFragmentVariable,

            string tunnelInterfaceColor,

            bool tunnelInterfaceColorRestrict,

            string tunnelInterfaceColorRestrictVariable,

            string tunnelInterfaceColorVariable,

            bool tunnelInterfaceControlConnections,

            string tunnelInterfaceControlConnectionsVariable,

            ImmutableArray<Outputs.GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationResult> tunnelInterfaceEncapsulations,

            string tunnelInterfaceExcludeControllerGroupListVariable,

            ImmutableArray<int> tunnelInterfaceExcludeControllerGroupLists,

            string tunnelInterfaceGreTunnelDestinationIp,

            string tunnelInterfaceGreTunnelDestinationIpVariable,

            ImmutableArray<int> tunnelInterfaceGroups,

            string tunnelInterfaceGroupsVariable,

            int tunnelInterfaceHelloInterval,

            string tunnelInterfaceHelloIntervalVariable,

            int tunnelInterfaceHelloTolerance,

            string tunnelInterfaceHelloToleranceVariable,

            bool tunnelInterfaceLastResortCircuit,

            string tunnelInterfaceLastResortCircuitVariable,

            bool tunnelInterfaceLowBandwidthLink,

            string tunnelInterfaceLowBandwidthLinkVariable,

            int tunnelInterfaceMaxControlConnections,

            string tunnelInterfaceMaxControlConnectionsVariable,

            int tunnelInterfaceNatRefreshInterval,

            string tunnelInterfaceNatRefreshIntervalVariable,

            bool tunnelInterfaceNetworkBroadcast,

            string tunnelInterfaceNetworkBroadcastVariable,

            bool tunnelInterfacePortHop,

            string tunnelInterfacePortHopVariable,

            bool tunnelInterfacePropagateSgt,

            string tunnelInterfacePropagateSgtVariable,

            int tunnelInterfaceTunnelTcpMss,

            string tunnelInterfaceTunnelTcpMssVariable,

            bool tunnelInterfaceVbondAsStunServer,

            string tunnelInterfaceVbondAsStunServerVariable,

            int tunnelInterfaceVmanageConnectionPreference,

            string tunnelInterfaceVmanageConnectionPreferenceVariable,

            string tunnelQosMode,

            string tunnelQosModeVariable,

            int udpTimeout,

            string udpTimeoutVariable,

            int version)
        {
            AccessLists = accessLists;
            Address = address;
            AddressVariable = addressVariable;
            ArpTimeout = arpTimeout;
            ArpTimeoutVariable = arpTimeoutVariable;
            AutoBandwidthDetect = autoBandwidthDetect;
            AutoBandwidthDetectVariable = autoBandwidthDetectVariable;
            Autonegotiate = autonegotiate;
            AutonegotiateVariable = autonegotiateVariable;
            BandwidthDownstream = bandwidthDownstream;
            BandwidthDownstreamVariable = bandwidthDownstreamVariable;
            BandwidthUpstream = bandwidthUpstream;
            BandwidthUpstreamVariable = bandwidthUpstreamVariable;
            BlockNonSourceIp = blockNonSourceIp;
            BlockNonSourceIpVariable = blockNonSourceIpVariable;
            CoreRegion = coreRegion;
            CoreRegionVariable = coreRegionVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            Dhcp = dhcp;
            DhcpDistance = dhcpDistance;
            DhcpDistanceVariable = dhcpDistanceVariable;
            DhcpVariable = dhcpVariable;
            Dhcpv6 = dhcpv6;
            Dhcpv6Variable = dhcpv6Variable;
            Duplex = duplex;
            DuplexVariable = duplexVariable;
            EnableCoreRegion = enableCoreRegion;
            EnableSgt = enableSgt;
            GreTunnelSourceIp = greTunnelSourceIp;
            GreTunnelSourceIpVariable = greTunnelSourceIpVariable;
            GreTunnelXconnect = greTunnelXconnect;
            GreTunnelXconnectVariable = greTunnelXconnectVariable;
            IcmpRedirectDisable = icmpRedirectDisable;
            IcmpRedirectDisableVariable = icmpRedirectDisableVariable;
            Id = id;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            IperfServer = iperfServer;
            IperfServerVariable = iperfServerVariable;
            Ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            Ipv4DhcpHelpers = ipv4DhcpHelpers;
            Ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            Ipv4Vrrps = ipv4Vrrps;
            Ipv6AccessLists = ipv6AccessLists;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Ipv6DhcpHelpers = ipv6DhcpHelpers;
            Ipv6Nat = ipv6Nat;
            Ipv6NatVariable = ipv6NatVariable;
            Ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            Ipv6Vrrps = ipv6Vrrps;
            LoadInterval = loadInterval;
            LoadIntervalVariable = loadIntervalVariable;
            MacAddress = macAddress;
            MacAddressVariable = macAddressVariable;
            MediaType = mediaType;
            MediaTypeVariable = mediaTypeVariable;
            Name = name;
            Nat = nat;
            Nat64Interface = nat64Interface;
            Nat66Interface = nat66Interface;
            NatInsideSourceLoopbackInterface = natInsideSourceLoopbackInterface;
            NatInsideSourceLoopbackInterfaceVariable = natInsideSourceLoopbackInterfaceVariable;
            NatOverload = natOverload;
            NatOverloadVariable = natOverloadVariable;
            NatPoolPrefixLength = natPoolPrefixLength;
            NatPoolPrefixLengthVariable = natPoolPrefixLengthVariable;
            NatPoolRangeEnd = natPoolRangeEnd;
            NatPoolRangeEndVariable = natPoolRangeEndVariable;
            NatPoolRangeStart = natPoolRangeStart;
            NatPoolRangeStartVariable = natPoolRangeStartVariable;
            NatType = natType;
            NatTypeVariable = natTypeVariable;
            Poe = poe;
            PoeVariable = poeVariable;
            PropagateSgt = propagateSgt;
            QosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            QosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            QosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            QosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            QosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            QosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            QosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            QosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            QosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            QosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            QosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            QosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            QosAdaptivePeriod = qosAdaptivePeriod;
            QosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            QosMap = qosMap;
            QosMapVariable = qosMapVariable;
            QosMapVpn = qosMapVpn;
            QosMapVpnVariable = qosMapVpnVariable;
            RewriteRuleName = rewriteRuleName;
            RewriteRuleNameVariable = rewriteRuleNameVariable;
            SecondaryRegion = secondaryRegion;
            SecondaryRegionVariable = secondaryRegionVariable;
            SgtEnforcement = sgtEnforcement;
            SgtEnforcementSgt = sgtEnforcementSgt;
            SgtEnforcementSgtVariable = sgtEnforcementSgtVariable;
            ShapingRate = shapingRate;
            ShapingRateVariable = shapingRateVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            Speed = speed;
            SpeedVariable = speedVariable;
            StaticArps = staticArps;
            StaticNat66Entries = staticNat66Entries;
            StaticNatEntries = staticNatEntries;
            StaticPortForwardEntries = staticPortForwardEntries;
            StaticSgt = staticSgt;
            StaticSgtTrusted = staticSgtTrusted;
            StaticSgtVariable = staticSgtVariable;
            TcpMssAdjust = tcpMssAdjust;
            TcpMssAdjustVariable = tcpMssAdjustVariable;
            TcpTimeout = tcpTimeout;
            TcpTimeoutVariable = tcpTimeoutVariable;
            TemplateType = templateType;
            TlocExtension = tlocExtension;
            TlocExtensionVariable = tlocExtensionVariable;
            TrackerVariable = trackerVariable;
            Trackers = trackers;
            TunnelBandwidth = tunnelBandwidth;
            TunnelBandwidthVariable = tunnelBandwidthVariable;
            TunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            TunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            TunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            TunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            TunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            TunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            TunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            TunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            TunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            TunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            TunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            TunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            TunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            TunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            TunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            TunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            TunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            TunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            TunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            TunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            TunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            TunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            TunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            TunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            TunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            TunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            TunnelInterfaceBorder = tunnelInterfaceBorder;
            TunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            TunnelInterfaceCarrier = tunnelInterfaceCarrier;
            TunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            TunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            TunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            TunnelInterfaceColor = tunnelInterfaceColor;
            TunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            TunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            TunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            TunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            TunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            TunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            TunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            TunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            TunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            TunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            TunnelInterfaceGroups = tunnelInterfaceGroups;
            TunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            TunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            TunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            TunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            TunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            TunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            TunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            TunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            TunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            TunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            TunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            TunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            TunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            TunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            TunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            TunnelInterfacePortHop = tunnelInterfacePortHop;
            TunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            TunnelInterfacePropagateSgt = tunnelInterfacePropagateSgt;
            TunnelInterfacePropagateSgtVariable = tunnelInterfacePropagateSgtVariable;
            TunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            TunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            TunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            TunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            TunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            TunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            TunnelQosMode = tunnelQosMode;
            TunnelQosModeVariable = tunnelQosModeVariable;
            UdpTimeout = udpTimeout;
            UdpTimeoutVariable = udpTimeoutVariable;
            Version = version;
        }
    }
}
