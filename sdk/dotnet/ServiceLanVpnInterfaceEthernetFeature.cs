// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service LAN VPN Interface Ethernet Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// Expected import identifier with the format: "service_lan_vpn_interface_ethernet_feature_id,feature_profile_id,service_lan_vpn_feature_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature")]
    public partial class ServiceLanVpnInterfaceEthernetFeature : global::Pulumi.CustomResource
    {
        [Output("aclIpv4EgressPolicyId")]
        public Output<string?> AclIpv4EgressPolicyId { get; private set; } = null!;

        [Output("aclIpv4IngressPolicyId")]
        public Output<string?> AclIpv4IngressPolicyId { get; private set; } = null!;

        [Output("aclIpv6EgressPolicyId")]
        public Output<string?> AclIpv6EgressPolicyId { get; private set; } = null!;

        [Output("aclIpv6IngressPolicyId")]
        public Output<string?> AclIpv6IngressPolicyId { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate (Kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("aclShapingRate")]
        public Output<int?> AclShapingRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("aclShapingRateVariable")]
        public Output<string?> AclShapingRateVariable { get; private set; } = null!;

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds - Range: `0`-`2147483` - Default value: `1200`
        /// </summary>
        [Output("arpTimeout")]
        public Output<int?> ArpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("arpTimeoutVariable")]
        public Output<string?> ArpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        [Output("arps")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureArp>> Arps { get; private set; } = null!;

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Output("autonegotiate")]
        public Output<bool?> Autonegotiate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("autonegotiateVariable")]
        public Output<string?> AutonegotiateVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Duplex mode - Choices: `full`, `half`, `auto`
        /// </summary>
        [Output("duplex")]
        public Output<string?> Duplex { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("duplexVariable")]
        public Output<string?> DuplexVariable { get; private set; } = null!;

        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        [Output("enableDhcpv6")]
        public Output<bool?> EnableDhcpv6 { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable - Default value: `true`
        /// </summary>
        [Output("icmpRedirectDisable")]
        public Output<bool?> IcmpRedirectDisable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("icmpRedirectDisableVariable")]
        public Output<string?> IcmpRedirectDisableVariable { get; private set; } = null!;

        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU - Range: `1500`-`9216` - Default value: `1500`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
        /// &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// IP Address
        /// </summary>
        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// DHCP Distance - Range: `1`-`65536`
        /// </summary>
        [Output("ipv4DhcpDistance")]
        public Output<int?> Ipv4DhcpDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpDistanceVariable")]
        public Output<string?> Ipv4DhcpDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpHelperVariable")]
        public Output<string?> Ipv4DhcpHelperVariable { get; private set; } = null!;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        [Output("ipv4DhcpHelpers")]
        public Output<ImmutableArray<string>> Ipv4DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// enable Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Output("ipv4Nat")]
        public Output<bool?> Ipv4Nat { get; private set; } = null!;

        /// <summary>
        /// NAT Inside Source Loopback Interface
        /// </summary>
        [Output("ipv4NatLoopback")]
        public Output<string?> Ipv4NatLoopback { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatLoopbackVariable")]
        public Output<string?> Ipv4NatLoopbackVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Overload - Default value: `true`
        /// </summary>
        [Output("ipv4NatOverload")]
        public Output<bool?> Ipv4NatOverload { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatOverloadVariable")]
        public Output<string?> Ipv4NatOverloadVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Pool Prefix Length - Range: `1`-`32`
        /// </summary>
        [Output("ipv4NatPrefixLength")]
        public Output<int?> Ipv4NatPrefixLength { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatPrefixLengthVariable")]
        public Output<string?> Ipv4NatPrefixLengthVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Pool Range End
        /// </summary>
        [Output("ipv4NatRangeEnd")]
        public Output<string?> Ipv4NatRangeEnd { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatRangeEndVariable")]
        public Output<string?> Ipv4NatRangeEndVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Pool Range Start
        /// </summary>
        [Output("ipv4NatRangeStart")]
        public Output<string?> Ipv4NatRangeStart { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatRangeStartVariable")]
        public Output<string?> Ipv4NatRangeStartVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Output("ipv4NatTcpTimeout")]
        public Output<int?> Ipv4NatTcpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatTcpTimeoutVariable")]
        public Output<string?> Ipv4NatTcpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Type - Choices: `pool`, `loopback`
        /// </summary>
        [Output("ipv4NatType")]
        public Output<string?> Ipv4NatType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatTypeVariable")]
        public Output<string?> Ipv4NatTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Output("ipv4NatUdpTimeout")]
        public Output<int?> Ipv4NatUdpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4NatUdpTimeoutVariable")]
        public Output<string?> Ipv4NatUdpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Secondary IpV4 Addresses
        /// </summary>
        [Output("ipv4SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress>> Ipv4SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("ipv4SubnetMask")]
        public Output<string?> Ipv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4SubnetMaskVariable")]
        public Output<string?> Ipv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        [Output("ipv4Vrrps")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp>> Ipv4Vrrps { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Secondary
        /// </summary>
        [Output("ipv6Address")]
        public Output<string?> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6AddressVariable")]
        public Output<string?> Ipv6AddressVariable { get; private set; } = null!;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        [Output("ipv6DhcpHelpers")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper>> Ipv6DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// secondary IPv6 addresses
        /// </summary>
        [Output("ipv6DhcpSecondaryAddresses")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress>> Ipv6DhcpSecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// enable Network Address Translation ipv6 on this interface - Default value: `false`
        /// </summary>
        [Output("ipv6Nat")]
        public Output<bool?> Ipv6Nat { get; private set; } = null!;

        /// <summary>
        /// Static secondary IPv6 addresses
        /// </summary>
        [Output("ipv6SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress>> Ipv6SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Enable VRRP Ipv6
        /// </summary>
        [Output("ipv6Vrrps")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp>> Ipv6Vrrps { get; private set; } = null!;

        /// <summary>
        /// Interval for interface load calculation - Range: `30`-`600` - Default value: `30`
        /// </summary>
        [Output("loadInterval")]
        public Output<int?> LoadInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("loadIntervalVariable")]
        public Output<string?> LoadIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// MAC Address
        /// </summary>
        [Output("macAddress")]
        public Output<string?> MacAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("macAddressVariable")]
        public Output<string?> MacAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Media type - Choices: `auto-select`, `rj45`, `sfp`
        /// </summary>
        [Output("mediaType")]
        public Output<string?> MediaType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mediaTypeVariable")]
        public Output<string?> MediaTypeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// NAT64 on this interface - Default value: `false`
        /// </summary>
        [Output("nat64")]
        public Output<bool?> Nat64 { get; private set; } = null!;

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Output("serviceLanVpnFeatureId")]
        public Output<string?> ServiceLanVpnFeatureId { get; private set; } = null!;

        /// <summary>
        /// - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface speed - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Output("speed")]
        public Output<string?> Speed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("speedVariable")]
        public Output<string?> SpeedVariable { get; private set; } = null!;

        /// <summary>
        /// static NAT
        /// </summary>
        [Output("staticNats")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnInterfaceEthernetFeatureStaticNat>> StaticNats { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("tracker")]
        public Output<string?> Tracker { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable SGT Enforcement on an interface
        /// </summary>
        [Output("trustsecEnableEnforcedPropogation")]
        public Output<bool?> TrustsecEnableEnforcedPropogation { get; private set; } = null!;

        /// <summary>
        /// Indicates that the interface is trustworthy for CTS - Default value: `false`
        /// </summary>
        [Output("trustsecEnableSgtPropogation")]
        public Output<bool?> TrustsecEnableSgtPropogation { get; private set; } = null!;

        /// <summary>
        /// SGT value between 2 and 65519 - Range: `2`-`65519`
        /// </summary>
        [Output("trustsecEnforcedSecurityGroupTag")]
        public Output<int?> TrustsecEnforcedSecurityGroupTag { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trustsecEnforcedSecurityGroupTagVariable")]
        public Output<string?> TrustsecEnforcedSecurityGroupTagVariable { get; private set; } = null!;

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding - Default value: `true`
        /// </summary>
        [Output("trustsecPropogate")]
        public Output<bool?> TrustsecPropogate { get; private set; } = null!;

        /// <summary>
        /// SGT value between 2 and 65519 - Range: `2`-`65519`
        /// </summary>
        [Output("trustsecSecurityGroupTag")]
        public Output<int?> TrustsecSecurityGroupTag { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trustsecSecurityGroupTagVariable")]
        public Output<string?> TrustsecSecurityGroupTagVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local LAN interface
        /// </summary>
        [Output("xconnect")]
        public Output<string?> Xconnect { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("xconnectVariable")]
        public Output<string?> XconnectVariable { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceLanVpnInterfaceEthernetFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceLanVpnInterfaceEthernetFeature(string name, ServiceLanVpnInterfaceEthernetFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature", name, args ?? new ServiceLanVpnInterfaceEthernetFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceLanVpnInterfaceEthernetFeature(string name, Input<string> id, ServiceLanVpnInterfaceEthernetFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceLanVpnInterfaceEthernetFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceLanVpnInterfaceEthernetFeature Get(string name, Input<string> id, ServiceLanVpnInterfaceEthernetFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceLanVpnInterfaceEthernetFeature(name, id, state, options);
        }
    }

    public sealed class ServiceLanVpnInterfaceEthernetFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclIpv4EgressPolicyId")]
        public Input<string>? AclIpv4EgressPolicyId { get; set; }

        [Input("aclIpv4IngressPolicyId")]
        public Input<string>? AclIpv4IngressPolicyId { get; set; }

        [Input("aclIpv6EgressPolicyId")]
        public Input<string>? AclIpv6EgressPolicyId { get; set; }

        [Input("aclIpv6IngressPolicyId")]
        public Input<string>? AclIpv6IngressPolicyId { get; set; }

        /// <summary>
        /// Shaping Rate (Kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("aclShapingRate")]
        public Input<int>? AclShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("aclShapingRateVariable")]
        public Input<string>? AclShapingRateVariable { get; set; }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds - Range: `0`-`2147483` - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        [Input("arps")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureArpArgs>? _arps;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureArpArgs> Arps
        {
            get => _arps ?? (_arps = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureArpArgs>());
            set => _arps = value;
        }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duplex mode - Choices: `full`, `half`, `auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        [Input("enableDhcpv6")]
        public Input<bool>? EnableDhcpv6 { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable - Default value: `true`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU - Range: `1500`-`9216` - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
        /// &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// IP Address
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// DHCP Distance - Range: `1`-`65536`
        /// </summary>
        [Input("ipv4DhcpDistance")]
        public Input<int>? Ipv4DhcpDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpDistanceVariable")]
        public Input<string>? Ipv4DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        /// <summary>
        /// enable Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Input("ipv4Nat")]
        public Input<bool>? Ipv4Nat { get; set; }

        /// <summary>
        /// NAT Inside Source Loopback Interface
        /// </summary>
        [Input("ipv4NatLoopback")]
        public Input<string>? Ipv4NatLoopback { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatLoopbackVariable")]
        public Input<string>? Ipv4NatLoopbackVariable { get; set; }

        /// <summary>
        /// NAT Overload - Default value: `true`
        /// </summary>
        [Input("ipv4NatOverload")]
        public Input<bool>? Ipv4NatOverload { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatOverloadVariable")]
        public Input<string>? Ipv4NatOverloadVariable { get; set; }

        /// <summary>
        /// NAT Pool Prefix Length - Range: `1`-`32`
        /// </summary>
        [Input("ipv4NatPrefixLength")]
        public Input<int>? Ipv4NatPrefixLength { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatPrefixLengthVariable")]
        public Input<string>? Ipv4NatPrefixLengthVariable { get; set; }

        /// <summary>
        /// NAT Pool Range End
        /// </summary>
        [Input("ipv4NatRangeEnd")]
        public Input<string>? Ipv4NatRangeEnd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatRangeEndVariable")]
        public Input<string>? Ipv4NatRangeEndVariable { get; set; }

        /// <summary>
        /// NAT Pool Range Start
        /// </summary>
        [Input("ipv4NatRangeStart")]
        public Input<string>? Ipv4NatRangeStart { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatRangeStartVariable")]
        public Input<string>? Ipv4NatRangeStartVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Input("ipv4NatTcpTimeout")]
        public Input<int>? Ipv4NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatTcpTimeoutVariable")]
        public Input<string>? Ipv4NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// NAT Type - Choices: `pool`, `loopback`
        /// </summary>
        [Input("ipv4NatType")]
        public Input<string>? Ipv4NatType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatTypeVariable")]
        public Input<string>? Ipv4NatTypeVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Input("ipv4NatUdpTimeout")]
        public Input<int>? Ipv4NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatUdpTimeoutVariable")]
        public Input<string>? Ipv4NatUdpTimeoutVariable { get; set; }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Secondary IpV4 Addresses
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        /// <summary>
        /// Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        [Input("ipv4Vrrps")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs>? _ipv4Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs> Ipv4Vrrps
        {
            get => _ipv4Vrrps ?? (_ipv4Vrrps = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpArgs>());
            set => _ipv4Vrrps = value;
        }

        /// <summary>
        /// IPv6 Address Secondary
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        [Input("ipv6DhcpHelpers")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs>? _ipv6DhcpHelpers;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs> Ipv6DhcpHelpers
        {
            get => _ipv6DhcpHelpers ?? (_ipv6DhcpHelpers = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperArgs>());
            set => _ipv6DhcpHelpers = value;
        }

        [Input("ipv6DhcpSecondaryAddresses")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs>? _ipv6DhcpSecondaryAddresses;

        /// <summary>
        /// secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs> Ipv6DhcpSecondaryAddresses
        {
            get => _ipv6DhcpSecondaryAddresses ?? (_ipv6DhcpSecondaryAddresses = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs>());
            set => _ipv6DhcpSecondaryAddresses = value;
        }

        /// <summary>
        /// enable Network Address Translation ipv6 on this interface - Default value: `false`
        /// </summary>
        [Input("ipv6Nat")]
        public Input<bool>? Ipv6Nat { get; set; }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Static secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        [Input("ipv6Vrrps")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs>? _ipv6Vrrps;

        /// <summary>
        /// Enable VRRP Ipv6
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs> Ipv6Vrrps
        {
            get => _ipv6Vrrps ?? (_ipv6Vrrps = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpArgs>());
            set => _ipv6Vrrps = value;
        }

        /// <summary>
        /// Interval for interface load calculation - Range: `30`-`600` - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// MAC Address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type - Choices: `auto-select`, `rj45`, `sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NAT64 on this interface - Default value: `false`
        /// </summary>
        [Input("nat64")]
        public Input<bool>? Nat64 { get; set; }

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId")]
        public Input<string>? ServiceLanVpnFeatureId { get; set; }

        /// <summary>
        /// - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        [Input("staticNats")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs>? _staticNats;

        /// <summary>
        /// static NAT
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureStaticNatArgs>());
            set => _staticNats = value;
        }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("tracker")]
        public Input<string>? Tracker { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        /// <summary>
        /// Enable/Disable SGT Enforcement on an interface
        /// </summary>
        [Input("trustsecEnableEnforcedPropogation")]
        public Input<bool>? TrustsecEnableEnforcedPropogation { get; set; }

        /// <summary>
        /// Indicates that the interface is trustworthy for CTS - Default value: `false`
        /// </summary>
        [Input("trustsecEnableSgtPropogation")]
        public Input<bool>? TrustsecEnableSgtPropogation { get; set; }

        /// <summary>
        /// SGT value between 2 and 65519 - Range: `2`-`65519`
        /// </summary>
        [Input("trustsecEnforcedSecurityGroupTag")]
        public Input<int>? TrustsecEnforcedSecurityGroupTag { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trustsecEnforcedSecurityGroupTagVariable")]
        public Input<string>? TrustsecEnforcedSecurityGroupTagVariable { get; set; }

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding - Default value: `true`
        /// </summary>
        [Input("trustsecPropogate")]
        public Input<bool>? TrustsecPropogate { get; set; }

        /// <summary>
        /// SGT value between 2 and 65519 - Range: `2`-`65519`
        /// </summary>
        [Input("trustsecSecurityGroupTag")]
        public Input<int>? TrustsecSecurityGroupTag { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trustsecSecurityGroupTagVariable")]
        public Input<string>? TrustsecSecurityGroupTagVariable { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local LAN interface
        /// </summary>
        [Input("xconnect")]
        public Input<string>? Xconnect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("xconnectVariable")]
        public Input<string>? XconnectVariable { get; set; }

        public ServiceLanVpnInterfaceEthernetFeatureArgs()
        {
        }
        public static new ServiceLanVpnInterfaceEthernetFeatureArgs Empty => new ServiceLanVpnInterfaceEthernetFeatureArgs();
    }

    public sealed class ServiceLanVpnInterfaceEthernetFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("aclIpv4EgressPolicyId")]
        public Input<string>? AclIpv4EgressPolicyId { get; set; }

        [Input("aclIpv4IngressPolicyId")]
        public Input<string>? AclIpv4IngressPolicyId { get; set; }

        [Input("aclIpv6EgressPolicyId")]
        public Input<string>? AclIpv6EgressPolicyId { get; set; }

        [Input("aclIpv6IngressPolicyId")]
        public Input<string>? AclIpv6IngressPolicyId { get; set; }

        /// <summary>
        /// Shaping Rate (Kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("aclShapingRate")]
        public Input<int>? AclShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("aclShapingRateVariable")]
        public Input<string>? AclShapingRateVariable { get; set; }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds - Range: `0`-`2147483` - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        [Input("arps")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureArpGetArgs>? _arps;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureArpGetArgs> Arps
        {
            get => _arps ?? (_arps = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureArpGetArgs>());
            set => _arps = value;
        }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duplex mode - Choices: `full`, `half`, `auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        [Input("enableDhcpv6")]
        public Input<bool>? EnableDhcpv6 { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable - Default value: `true`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU - Range: `1500`-`9216` - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
        /// &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// IP Address
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// DHCP Distance - Range: `1`-`65536`
        /// </summary>
        [Input("ipv4DhcpDistance")]
        public Input<int>? Ipv4DhcpDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpDistanceVariable")]
        public Input<string>? Ipv4DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        /// <summary>
        /// enable Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Input("ipv4Nat")]
        public Input<bool>? Ipv4Nat { get; set; }

        /// <summary>
        /// NAT Inside Source Loopback Interface
        /// </summary>
        [Input("ipv4NatLoopback")]
        public Input<string>? Ipv4NatLoopback { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatLoopbackVariable")]
        public Input<string>? Ipv4NatLoopbackVariable { get; set; }

        /// <summary>
        /// NAT Overload - Default value: `true`
        /// </summary>
        [Input("ipv4NatOverload")]
        public Input<bool>? Ipv4NatOverload { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatOverloadVariable")]
        public Input<string>? Ipv4NatOverloadVariable { get; set; }

        /// <summary>
        /// NAT Pool Prefix Length - Range: `1`-`32`
        /// </summary>
        [Input("ipv4NatPrefixLength")]
        public Input<int>? Ipv4NatPrefixLength { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatPrefixLengthVariable")]
        public Input<string>? Ipv4NatPrefixLengthVariable { get; set; }

        /// <summary>
        /// NAT Pool Range End
        /// </summary>
        [Input("ipv4NatRangeEnd")]
        public Input<string>? Ipv4NatRangeEnd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatRangeEndVariable")]
        public Input<string>? Ipv4NatRangeEndVariable { get; set; }

        /// <summary>
        /// NAT Pool Range Start
        /// </summary>
        [Input("ipv4NatRangeStart")]
        public Input<string>? Ipv4NatRangeStart { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatRangeStartVariable")]
        public Input<string>? Ipv4NatRangeStartVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Input("ipv4NatTcpTimeout")]
        public Input<int>? Ipv4NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatTcpTimeoutVariable")]
        public Input<string>? Ipv4NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// NAT Type - Choices: `pool`, `loopback`
        /// </summary>
        [Input("ipv4NatType")]
        public Input<string>? Ipv4NatType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatTypeVariable")]
        public Input<string>? Ipv4NatTypeVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Input("ipv4NatUdpTimeout")]
        public Input<int>? Ipv4NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4NatUdpTimeoutVariable")]
        public Input<string>? Ipv4NatUdpTimeoutVariable { get; set; }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Secondary IpV4 Addresses
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        /// <summary>
        /// Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        [Input("ipv4Vrrps")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpGetArgs>? _ipv4Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpGetArgs> Ipv4Vrrps
        {
            get => _ipv4Vrrps ?? (_ipv4Vrrps = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpGetArgs>());
            set => _ipv4Vrrps = value;
        }

        /// <summary>
        /// IPv6 Address Secondary
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        [Input("ipv6DhcpHelpers")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperGetArgs>? _ipv6DhcpHelpers;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperGetArgs> Ipv6DhcpHelpers
        {
            get => _ipv6DhcpHelpers ?? (_ipv6DhcpHelpers = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperGetArgs>());
            set => _ipv6DhcpHelpers = value;
        }

        [Input("ipv6DhcpSecondaryAddresses")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressGetArgs>? _ipv6DhcpSecondaryAddresses;

        /// <summary>
        /// secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressGetArgs> Ipv6DhcpSecondaryAddresses
        {
            get => _ipv6DhcpSecondaryAddresses ?? (_ipv6DhcpSecondaryAddresses = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressGetArgs>());
            set => _ipv6DhcpSecondaryAddresses = value;
        }

        /// <summary>
        /// enable Network Address Translation ipv6 on this interface - Default value: `false`
        /// </summary>
        [Input("ipv6Nat")]
        public Input<bool>? Ipv6Nat { get; set; }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressGetArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Static secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressGetArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressGetArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        [Input("ipv6Vrrps")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpGetArgs>? _ipv6Vrrps;

        /// <summary>
        /// Enable VRRP Ipv6
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpGetArgs> Ipv6Vrrps
        {
            get => _ipv6Vrrps ?? (_ipv6Vrrps = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpGetArgs>());
            set => _ipv6Vrrps = value;
        }

        /// <summary>
        /// Interval for interface load calculation - Range: `30`-`600` - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// MAC Address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type - Choices: `auto-select`, `rj45`, `sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NAT64 on this interface - Default value: `false`
        /// </summary>
        [Input("nat64")]
        public Input<bool>? Nat64 { get; set; }

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId")]
        public Input<string>? ServiceLanVpnFeatureId { get; set; }

        /// <summary>
        /// - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        [Input("staticNats")]
        private InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureStaticNatGetArgs>? _staticNats;

        /// <summary>
        /// static NAT
        /// </summary>
        public InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureStaticNatGetArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.ServiceLanVpnInterfaceEthernetFeatureStaticNatGetArgs>());
            set => _staticNats = value;
        }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("tracker")]
        public Input<string>? Tracker { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        /// <summary>
        /// Enable/Disable SGT Enforcement on an interface
        /// </summary>
        [Input("trustsecEnableEnforcedPropogation")]
        public Input<bool>? TrustsecEnableEnforcedPropogation { get; set; }

        /// <summary>
        /// Indicates that the interface is trustworthy for CTS - Default value: `false`
        /// </summary>
        [Input("trustsecEnableSgtPropogation")]
        public Input<bool>? TrustsecEnableSgtPropogation { get; set; }

        /// <summary>
        /// SGT value between 2 and 65519 - Range: `2`-`65519`
        /// </summary>
        [Input("trustsecEnforcedSecurityGroupTag")]
        public Input<int>? TrustsecEnforcedSecurityGroupTag { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trustsecEnforcedSecurityGroupTagVariable")]
        public Input<string>? TrustsecEnforcedSecurityGroupTagVariable { get; set; }

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding - Default value: `true`
        /// </summary>
        [Input("trustsecPropogate")]
        public Input<bool>? TrustsecPropogate { get; set; }

        /// <summary>
        /// SGT value between 2 and 65519 - Range: `2`-`65519`
        /// </summary>
        [Input("trustsecSecurityGroupTag")]
        public Input<int>? TrustsecSecurityGroupTag { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trustsecSecurityGroupTagVariable")]
        public Input<string>? TrustsecSecurityGroupTagVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local LAN interface
        /// </summary>
        [Input("xconnect")]
        public Input<string>? Xconnect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("xconnectVariable")]
        public Input<string>? XconnectVariable { get; set; }

        public ServiceLanVpnInterfaceEthernetFeatureState()
        {
        }
        public static new ServiceLanVpnInterfaceEthernetFeatureState Empty => new ServiceLanVpnInterfaceEthernetFeatureState();
    }
}
