// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service LAN VPN Interface IPSec Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.ServiceLanVpnInterfaceIpsecFeature("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         ServiceLanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
    ///         InterfaceName = "ipsec987",
    ///         Shutdown = true,
    ///         InterfaceDescription = "ipsec987",
    ///         Ipv4Address = "9.7.5.4",
    ///         Ipv4SubnetMask = "255.255.255.0",
    ///         TunnelSourceIpv4Address = "1.3.5.88",
    ///         TunnelSourceIpv4SubnetMask = "255.255.255.0",
    ///         TunnelSourceInterface = "GigabitEthernet8",
    ///         TunnelDestinationIpv4Address = "2.55.67.99",
    ///         TunnelDestinationIpv4SubnetMask = "255.255.255.0",
    ///         ApplicationTunnelType = "none",
    ///         TcpMss = 1460,
    ///         ClearDontFragment = false,
    ///         IpMtu = 1500,
    ///         DpdInterval = 10,
    ///         DpdRetries = 3,
    ///         IkePresharedKey = "123",
    ///         IkeVersion = 1,
    ///         IkeIntegrityProtocol = "main",
    ///         IkeRekeyInterval = 14400,
    ///         IkeCiphersuite = "aes256-cbc-sha1",
    ///         IkeDiffieHellmanGroup = "16",
    ///         IkeIdLocalEndPoint = "xxx",
    ///         IkeIdRemoteEndPoint = "xxx",
    ///         IpsecRekeyInterval = 3600,
    ///         IpsecReplayWindow = 512,
    ///         IpsecCiphersuite = "aes256-gcm",
    ///         PerfectForwardSecrecy = "group-16",
    ///         TunnelRouteVia = "2222",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "service_lan_vpn_interface_ipsec_feature_id,feature_profile_id,service_lan_vpn_feature_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceLanVpnInterfaceIpsecFeature:ServiceLanVpnInterfaceIpsecFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceLanVpnInterfaceIpsecFeature:ServiceLanVpnInterfaceIpsecFeature")]
    public partial class ServiceLanVpnInterfaceIpsecFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig`
        /// </summary>
        [Output("applicationTunnelType")]
        public Output<string?> ApplicationTunnelType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("applicationTunnelTypeVariable")]
        public Output<string?> ApplicationTunnelTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Output("clearDontFragment")]
        public Output<bool?> ClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("clearDontFragmentVariable")]
        public Output<string?> ClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
        /// </summary>
        [Output("dpdInterval")]
        public Output<int?> DpdInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dpdIntervalVariable")]
        public Output<string?> DpdIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
        /// </summary>
        [Output("dpdRetries")]
        public Output<int?> DpdRetries { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dpdRetriesVariable")]
        public Output<string?> DpdRetriesVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
        /// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
        /// </summary>
        [Output("ikeCiphersuite")]
        public Output<string?> IkeCiphersuite { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeCiphersuiteVariable")]
        public Output<string?> IkeCiphersuiteVariable { get; private set; } = null!;

        /// <summary>
        /// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
        /// </summary>
        [Output("ikeDiffieHellmanGroup")]
        public Output<string?> IkeDiffieHellmanGroup { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeDiffieHellmanGroupVariable")]
        public Output<string?> IkeDiffieHellmanGroupVariable { get; private set; } = null!;

        /// <summary>
        /// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Output("ikeIdLocalEndPoint")]
        public Output<string?> IkeIdLocalEndPoint { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeIdLocalEndPointVariable")]
        public Output<string?> IkeIdLocalEndPointVariable { get; private set; } = null!;

        /// <summary>
        /// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Output("ikeIdRemoteEndPoint")]
        public Output<string?> IkeIdRemoteEndPoint { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeIdRemoteEndPointVariable")]
        public Output<string?> IkeIdRemoteEndPointVariable { get; private set; } = null!;

        /// <summary>
        /// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
        /// </summary>
        [Output("ikeIntegrityProtocol")]
        public Output<string?> IkeIntegrityProtocol { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeIntegrityProtocolVariable")]
        public Output<string?> IkeIntegrityProtocolVariable { get; private set; } = null!;

        /// <summary>
        /// Use preshared key to authenticate IKE peer
        /// </summary>
        [Output("ikePresharedKey")]
        public Output<string?> IkePresharedKey { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikePresharedKeyVariable")]
        public Output<string?> IkePresharedKeyVariable { get; private set; } = null!;

        /// <summary>
        /// IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
        /// </summary>
        [Output("ikeRekeyInterval")]
        public Output<int?> IkeRekeyInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeRekeyIntervalVariable")]
        public Output<string?> IkeRekeyIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
        /// </summary>
        [Output("ikeVersion")]
        public Output<int?> IkeVersion { get; private set; } = null!;

        /// <summary>
        /// Interface description
        /// </summary>
        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
        /// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
        /// `aes256-gcm`
        /// </summary>
        [Output("ipsecCiphersuite")]
        public Output<string?> IpsecCiphersuite { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecCiphersuiteVariable")]
        public Output<string?> IpsecCiphersuiteVariable { get; private set; } = null!;

        /// <summary>
        /// IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
        /// </summary>
        [Output("ipsecRekeyInterval")]
        public Output<int?> IpsecRekeyInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecRekeyIntervalVariable")]
        public Output<string?> IpsecRekeyIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
        /// </summary>
        [Output("ipsecReplayWindow")]
        public Output<int?> IpsecReplayWindow { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecReplayWindowVariable")]
        public Output<string?> IpsecReplayWindowVariable { get; private set; } = null!;

        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("ipv4SubnetMask")]
        public Output<string?> Ipv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4SubnetMaskVariable")]
        public Output<string?> Ipv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
        /// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
        /// </summary>
        [Output("perfectForwardSecrecy")]
        public Output<string?> PerfectForwardSecrecy { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("perfectForwardSecrecyVariable")]
        public Output<string?> PerfectForwardSecrecyVariable { get; private set; } = null!;

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Output("serviceLanVpnFeatureId")]
        public Output<string> ServiceLanVpnFeatureId { get; private set; } = null!;

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("trackerId")]
        public Output<string?> TrackerId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerIdVariable")]
        public Output<string?> TrackerIdVariable { get; private set; } = null!;

        [Output("tunnelDestinationIpv4Address")]
        public Output<string?> TunnelDestinationIpv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelDestinationIpv4AddressVariable")]
        public Output<string?> TunnelDestinationIpv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("tunnelDestinationIpv4SubnetMask")]
        public Output<string> TunnelDestinationIpv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelDestinationIpv4SubnetMaskVariable")]
        public Output<string?> TunnelDestinationIpv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Output("tunnelRouteVia")]
        public Output<string?> TunnelRouteVia { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelRouteViaVariable")]
        public Output<string?> TunnelRouteViaVariable { get; private set; } = null!;

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Output("tunnelSourceInterface")]
        public Output<string?> TunnelSourceInterface { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceInterfaceVariable")]
        public Output<string?> TunnelSourceInterfaceVariable { get; private set; } = null!;

        [Output("tunnelSourceIpv4Address")]
        public Output<string?> TunnelSourceIpv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceIpv4AddressVariable")]
        public Output<string?> TunnelSourceIpv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("tunnelSourceIpv4SubnetMask")]
        public Output<string?> TunnelSourceIpv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceIpv4SubnetMaskVariable")]
        public Output<string?> TunnelSourceIpv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceLanVpnInterfaceIpsecFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceLanVpnInterfaceIpsecFeature(string name, ServiceLanVpnInterfaceIpsecFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnInterfaceIpsecFeature:ServiceLanVpnInterfaceIpsecFeature", name, args ?? new ServiceLanVpnInterfaceIpsecFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceLanVpnInterfaceIpsecFeature(string name, Input<string> id, ServiceLanVpnInterfaceIpsecFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnInterfaceIpsecFeature:ServiceLanVpnInterfaceIpsecFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceLanVpnInterfaceIpsecFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceLanVpnInterfaceIpsecFeature Get(string name, Input<string> id, ServiceLanVpnInterfaceIpsecFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceLanVpnInterfaceIpsecFeature(name, id, state, options);
        }
    }

    public sealed class ServiceLanVpnInterfaceIpsecFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig`
        /// </summary>
        [Input("applicationTunnelType")]
        public Input<string>? ApplicationTunnelType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("applicationTunnelTypeVariable")]
        public Input<string>? ApplicationTunnelTypeVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("clearDontFragment")]
        public Input<bool>? ClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clearDontFragmentVariable")]
        public Input<string>? ClearDontFragmentVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
        /// </summary>
        [Input("dpdInterval")]
        public Input<int>? DpdInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dpdIntervalVariable")]
        public Input<string>? DpdIntervalVariable { get; set; }

        /// <summary>
        /// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
        /// </summary>
        [Input("dpdRetries")]
        public Input<int>? DpdRetries { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dpdRetriesVariable")]
        public Input<string>? DpdRetriesVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
        /// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
        /// </summary>
        [Input("ikeCiphersuite")]
        public Input<string>? IkeCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeCiphersuiteVariable")]
        public Input<string>? IkeCiphersuiteVariable { get; set; }

        /// <summary>
        /// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
        /// </summary>
        [Input("ikeDiffieHellmanGroup")]
        public Input<string>? IkeDiffieHellmanGroup { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeDiffieHellmanGroupVariable")]
        public Input<string>? IkeDiffieHellmanGroupVariable { get; set; }

        /// <summary>
        /// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikeIdLocalEndPoint")]
        public Input<string>? IkeIdLocalEndPoint { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeIdLocalEndPointVariable")]
        public Input<string>? IkeIdLocalEndPointVariable { get; set; }

        /// <summary>
        /// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikeIdRemoteEndPoint")]
        public Input<string>? IkeIdRemoteEndPoint { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeIdRemoteEndPointVariable")]
        public Input<string>? IkeIdRemoteEndPointVariable { get; set; }

        /// <summary>
        /// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
        /// </summary>
        [Input("ikeIntegrityProtocol")]
        public Input<string>? IkeIntegrityProtocol { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeIntegrityProtocolVariable")]
        public Input<string>? IkeIntegrityProtocolVariable { get; set; }

        /// <summary>
        /// Use preshared key to authenticate IKE peer
        /// </summary>
        [Input("ikePresharedKey")]
        public Input<string>? IkePresharedKey { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePresharedKeyVariable")]
        public Input<string>? IkePresharedKeyVariable { get; set; }

        /// <summary>
        /// IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
        /// </summary>
        [Input("ikeRekeyInterval")]
        public Input<int>? IkeRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeRekeyIntervalVariable")]
        public Input<string>? IkeRekeyIntervalVariable { get; set; }

        /// <summary>
        /// IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
        /// </summary>
        [Input("ikeVersion")]
        public Input<int>? IkeVersion { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
        /// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
        /// `aes256-gcm`
        /// </summary>
        [Input("ipsecCiphersuite")]
        public Input<string>? IpsecCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecCiphersuiteVariable")]
        public Input<string>? IpsecCiphersuiteVariable { get; set; }

        /// <summary>
        /// IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
        /// </summary>
        [Input("ipsecRekeyInterval")]
        public Input<int>? IpsecRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecRekeyIntervalVariable")]
        public Input<string>? IpsecRekeyIntervalVariable { get; set; }

        /// <summary>
        /// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
        /// </summary>
        [Input("ipsecReplayWindow")]
        public Input<int>? IpsecReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecReplayWindowVariable")]
        public Input<string>? IpsecReplayWindowVariable { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
        /// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
        /// </summary>
        [Input("perfectForwardSecrecy")]
        public Input<string>? PerfectForwardSecrecy { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perfectForwardSecrecyVariable")]
        public Input<string>? PerfectForwardSecrecyVariable { get; set; }

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId", required: true)]
        public Input<string> ServiceLanVpnFeatureId { get; set; } = null!;

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("trackerId")]
        public Input<string>? TrackerId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerIdVariable")]
        public Input<string>? TrackerIdVariable { get; set; }

        [Input("tunnelDestinationIpv4Address")]
        public Input<string>? TunnelDestinationIpv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationIpv4AddressVariable")]
        public Input<string>? TunnelDestinationIpv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("tunnelDestinationIpv4SubnetMask", required: true)]
        public Input<string> TunnelDestinationIpv4SubnetMask { get; set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationIpv4SubnetMaskVariable")]
        public Input<string>? TunnelDestinationIpv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelRouteVia")]
        public Input<string>? TunnelRouteVia { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelRouteViaVariable")]
        public Input<string>? TunnelRouteViaVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelSourceInterface")]
        public Input<string>? TunnelSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceInterfaceVariable")]
        public Input<string>? TunnelSourceInterfaceVariable { get; set; }

        [Input("tunnelSourceIpv4Address")]
        public Input<string>? TunnelSourceIpv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceIpv4AddressVariable")]
        public Input<string>? TunnelSourceIpv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("tunnelSourceIpv4SubnetMask")]
        public Input<string>? TunnelSourceIpv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceIpv4SubnetMaskVariable")]
        public Input<string>? TunnelSourceIpv4SubnetMaskVariable { get; set; }

        public ServiceLanVpnInterfaceIpsecFeatureArgs()
        {
        }
        public static new ServiceLanVpnInterfaceIpsecFeatureArgs Empty => new ServiceLanVpnInterfaceIpsecFeatureArgs();
    }

    public sealed class ServiceLanVpnInterfaceIpsecFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig`
        /// </summary>
        [Input("applicationTunnelType")]
        public Input<string>? ApplicationTunnelType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("applicationTunnelTypeVariable")]
        public Input<string>? ApplicationTunnelTypeVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("clearDontFragment")]
        public Input<bool>? ClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clearDontFragmentVariable")]
        public Input<string>? ClearDontFragmentVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
        /// </summary>
        [Input("dpdInterval")]
        public Input<int>? DpdInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dpdIntervalVariable")]
        public Input<string>? DpdIntervalVariable { get; set; }

        /// <summary>
        /// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
        /// </summary>
        [Input("dpdRetries")]
        public Input<int>? DpdRetries { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dpdRetriesVariable")]
        public Input<string>? DpdRetriesVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
        /// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
        /// </summary>
        [Input("ikeCiphersuite")]
        public Input<string>? IkeCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeCiphersuiteVariable")]
        public Input<string>? IkeCiphersuiteVariable { get; set; }

        /// <summary>
        /// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
        /// </summary>
        [Input("ikeDiffieHellmanGroup")]
        public Input<string>? IkeDiffieHellmanGroup { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeDiffieHellmanGroupVariable")]
        public Input<string>? IkeDiffieHellmanGroupVariable { get; set; }

        /// <summary>
        /// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikeIdLocalEndPoint")]
        public Input<string>? IkeIdLocalEndPoint { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeIdLocalEndPointVariable")]
        public Input<string>? IkeIdLocalEndPointVariable { get; set; }

        /// <summary>
        /// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikeIdRemoteEndPoint")]
        public Input<string>? IkeIdRemoteEndPoint { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeIdRemoteEndPointVariable")]
        public Input<string>? IkeIdRemoteEndPointVariable { get; set; }

        /// <summary>
        /// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
        /// </summary>
        [Input("ikeIntegrityProtocol")]
        public Input<string>? IkeIntegrityProtocol { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeIntegrityProtocolVariable")]
        public Input<string>? IkeIntegrityProtocolVariable { get; set; }

        /// <summary>
        /// Use preshared key to authenticate IKE peer
        /// </summary>
        [Input("ikePresharedKey")]
        public Input<string>? IkePresharedKey { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePresharedKeyVariable")]
        public Input<string>? IkePresharedKeyVariable { get; set; }

        /// <summary>
        /// IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
        /// </summary>
        [Input("ikeRekeyInterval")]
        public Input<int>? IkeRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeRekeyIntervalVariable")]
        public Input<string>? IkeRekeyIntervalVariable { get; set; }

        /// <summary>
        /// IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
        /// </summary>
        [Input("ikeVersion")]
        public Input<int>? IkeVersion { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
        /// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
        /// `aes256-gcm`
        /// </summary>
        [Input("ipsecCiphersuite")]
        public Input<string>? IpsecCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecCiphersuiteVariable")]
        public Input<string>? IpsecCiphersuiteVariable { get; set; }

        /// <summary>
        /// IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
        /// </summary>
        [Input("ipsecRekeyInterval")]
        public Input<int>? IpsecRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecRekeyIntervalVariable")]
        public Input<string>? IpsecRekeyIntervalVariable { get; set; }

        /// <summary>
        /// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
        /// </summary>
        [Input("ipsecReplayWindow")]
        public Input<int>? IpsecReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecReplayWindowVariable")]
        public Input<string>? IpsecReplayWindowVariable { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
        /// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
        /// </summary>
        [Input("perfectForwardSecrecy")]
        public Input<string>? PerfectForwardSecrecy { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perfectForwardSecrecyVariable")]
        public Input<string>? PerfectForwardSecrecyVariable { get; set; }

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId")]
        public Input<string>? ServiceLanVpnFeatureId { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("trackerId")]
        public Input<string>? TrackerId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerIdVariable")]
        public Input<string>? TrackerIdVariable { get; set; }

        [Input("tunnelDestinationIpv4Address")]
        public Input<string>? TunnelDestinationIpv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationIpv4AddressVariable")]
        public Input<string>? TunnelDestinationIpv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("tunnelDestinationIpv4SubnetMask")]
        public Input<string>? TunnelDestinationIpv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationIpv4SubnetMaskVariable")]
        public Input<string>? TunnelDestinationIpv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelRouteVia")]
        public Input<string>? TunnelRouteVia { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelRouteViaVariable")]
        public Input<string>? TunnelRouteViaVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelSourceInterface")]
        public Input<string>? TunnelSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceInterfaceVariable")]
        public Input<string>? TunnelSourceInterfaceVariable { get; set; }

        [Input("tunnelSourceIpv4Address")]
        public Input<string>? TunnelSourceIpv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceIpv4AddressVariable")]
        public Input<string>? TunnelSourceIpv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("tunnelSourceIpv4SubnetMask")]
        public Input<string>? TunnelSourceIpv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceIpv4SubnetMaskVariable")]
        public Input<string>? TunnelSourceIpv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ServiceLanVpnInterfaceIpsecFeatureState()
        {
        }
        public static new ServiceLanVpnInterfaceIpsecFeatureState Empty => new ServiceLanVpnInterfaceIpsecFeatureState();
    }
}
