// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportGpsFeature
    {
        /// <summary>
        /// This data source can read the Transport GPS Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportGpsFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportGpsFeatureResult> InvokeAsync(GetTransportGpsFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportGpsFeatureResult>("sdwan:index/getTransportGpsFeature:getTransportGpsFeature", args ?? new GetTransportGpsFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport GPS Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportGpsFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportGpsFeatureResult> Invoke(GetTransportGpsFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportGpsFeatureResult>("sdwan:index/getTransportGpsFeature:getTransportGpsFeature", args ?? new GetTransportGpsFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport GPS Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportGpsFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportGpsFeatureResult> Invoke(GetTransportGpsFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportGpsFeatureResult>("sdwan:index/getTransportGpsFeature:getTransportGpsFeature", args ?? new GetTransportGpsFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportGpsFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTransportGpsFeatureArgs()
        {
        }
        public static new GetTransportGpsFeatureArgs Empty => new GetTransportGpsFeatureArgs();
    }

    public sealed class GetTransportGpsFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTransportGpsFeatureInvokeArgs()
        {
        }
        public static new GetTransportGpsFeatureInvokeArgs Empty => new GetTransportGpsFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportGpsFeatureResult
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// Enable/disable GPS
        /// </summary>
        public readonly bool GpsEnable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GpsEnableVariable;
        /// <summary>
        /// Select GPS mode
        /// </summary>
        public readonly string GpsMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GpsModeVariable;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Destination address
        /// </summary>
        public readonly string NmeaDestinationAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NmeaDestinationAddressVariable;
        /// <summary>
        /// Destination port
        /// </summary>
        public readonly int NmeaDestinationPort;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NmeaDestinationPortVariable;
        /// <summary>
        /// Enable/disable NMEA data
        /// </summary>
        public readonly bool NmeaEnable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NmeaEnableVariable;
        /// <summary>
        /// Source address
        /// </summary>
        public readonly string NmeaSourceAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NmeaSourceAddressVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetTransportGpsFeatureResult(
            string description,

            string featureProfileId,

            bool gpsEnable,

            string gpsEnableVariable,

            string gpsMode,

            string gpsModeVariable,

            string id,

            string name,

            string nmeaDestinationAddress,

            string nmeaDestinationAddressVariable,

            int nmeaDestinationPort,

            string nmeaDestinationPortVariable,

            bool nmeaEnable,

            string nmeaEnableVariable,

            string nmeaSourceAddress,

            string nmeaSourceAddressVariable,

            int version)
        {
            Description = description;
            FeatureProfileId = featureProfileId;
            GpsEnable = gpsEnable;
            GpsEnableVariable = gpsEnableVariable;
            GpsMode = gpsMode;
            GpsModeVariable = gpsModeVariable;
            Id = id;
            Name = name;
            NmeaDestinationAddress = nmeaDestinationAddress;
            NmeaDestinationAddressVariable = nmeaDestinationAddressVariable;
            NmeaDestinationPort = nmeaDestinationPort;
            NmeaDestinationPortVariable = nmeaDestinationPortVariable;
            NmeaEnable = nmeaEnable;
            NmeaEnableVariable = nmeaEnableVariable;
            NmeaSourceAddress = nmeaSourceAddress;
            NmeaSourceAddressVariable = nmeaSourceAddressVariable;
            Version = version;
        }
    }
}
