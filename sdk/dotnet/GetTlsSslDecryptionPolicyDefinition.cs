// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTlsSslDecryptionPolicyDefinition
    {
        /// <summary>
        /// This data source can read the TLS SSL Decryption Policy Definition .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTlsSslDecryptionPolicyDefinition.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTlsSslDecryptionPolicyDefinitionResult> InvokeAsync(GetTlsSslDecryptionPolicyDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsSslDecryptionPolicyDefinitionResult>("sdwan:index/getTlsSslDecryptionPolicyDefinition:getTlsSslDecryptionPolicyDefinition", args ?? new GetTlsSslDecryptionPolicyDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the TLS SSL Decryption Policy Definition .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTlsSslDecryptionPolicyDefinition.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTlsSslDecryptionPolicyDefinitionResult> Invoke(GetTlsSslDecryptionPolicyDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsSslDecryptionPolicyDefinitionResult>("sdwan:index/getTlsSslDecryptionPolicyDefinition:getTlsSslDecryptionPolicyDefinition", args ?? new GetTlsSslDecryptionPolicyDefinitionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the TLS SSL Decryption Policy Definition .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTlsSslDecryptionPolicyDefinition.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTlsSslDecryptionPolicyDefinitionResult> Invoke(GetTlsSslDecryptionPolicyDefinitionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsSslDecryptionPolicyDefinitionResult>("sdwan:index/getTlsSslDecryptionPolicyDefinition:getTlsSslDecryptionPolicyDefinition", args ?? new GetTlsSslDecryptionPolicyDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsSslDecryptionPolicyDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTlsSslDecryptionPolicyDefinitionArgs()
        {
        }
        public static new GetTlsSslDecryptionPolicyDefinitionArgs Empty => new GetTlsSslDecryptionPolicyDefinitionArgs();
    }

    public sealed class GetTlsSslDecryptionPolicyDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTlsSslDecryptionPolicyDefinitionInvokeArgs()
        {
        }
        public static new GetTlsSslDecryptionPolicyDefinitionInvokeArgs Empty => new GetTlsSslDecryptionPolicyDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsSslDecryptionPolicyDefinitionResult
    {
        /// <summary>
        /// Certificate Lifetime(in Days)
        /// </summary>
        public readonly int CertificateLifetimeInDays;
        /// <summary>
        /// Certificate revocation status
        /// </summary>
        public readonly string CertificateRevocationStatus;
        /// <summary>
        /// Default action (applies when `mode` set to `security`)
        /// </summary>
        public readonly string DefaultAction;
        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// EC Key Type
        /// </summary>
        public readonly string EcKeyType;
        /// <summary>
        /// Expired certificate action
        /// </summary>
        public readonly string ExpiredCertificate;
        /// <summary>
        /// Failure mode
        /// </summary>
        public readonly string FailureMode;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Minimal TLS Version
        /// </summary>
        public readonly string MinimalTlsVersion;
        /// <summary>
        /// The policy mode
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// List of network rules (applies when `mode` set to `security`)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRuleResult> NetworkRules;
        /// <summary>
        /// RSA key pair modules
        /// </summary>
        public readonly string RsaKeyPairModulus;
        /// <summary>
        /// SSL decryption enabled
        /// </summary>
        public readonly string SslDecryptionEnabled;
        /// <summary>
        /// Unknown revocation status action
        /// </summary>
        public readonly string UnknownRevocationStatus;
        /// <summary>
        /// Unsupported cipher suites action
        /// </summary>
        public readonly string UnsupportedCipherSuites;
        /// <summary>
        /// Unsupported protocol versions action
        /// </summary>
        public readonly string UnsupportedProtocolVersions;
        /// <summary>
        /// Untrusted certificate action
        /// </summary>
        public readonly string UntrustedCertificate;
        /// <summary>
        /// List of url rules (applies when `mode` set to `security`)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTlsSslDecryptionPolicyDefinitionUrlRuleResult> UrlRules;
        /// <summary>
        /// Use default CA certificate bundle
        /// </summary>
        public readonly bool UseDefaultCaCertBundle;
        /// <summary>
        /// The version of the object
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetTlsSslDecryptionPolicyDefinitionResult(
            int certificateLifetimeInDays,

            string certificateRevocationStatus,

            string defaultAction,

            string description,

            string ecKeyType,

            string expiredCertificate,

            string failureMode,

            string id,

            string minimalTlsVersion,

            string mode,

            string name,

            ImmutableArray<Outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRuleResult> networkRules,

            string rsaKeyPairModulus,

            string sslDecryptionEnabled,

            string unknownRevocationStatus,

            string unsupportedCipherSuites,

            string unsupportedProtocolVersions,

            string untrustedCertificate,

            ImmutableArray<Outputs.GetTlsSslDecryptionPolicyDefinitionUrlRuleResult> urlRules,

            bool useDefaultCaCertBundle,

            int version)
        {
            CertificateLifetimeInDays = certificateLifetimeInDays;
            CertificateRevocationStatus = certificateRevocationStatus;
            DefaultAction = defaultAction;
            Description = description;
            EcKeyType = ecKeyType;
            ExpiredCertificate = expiredCertificate;
            FailureMode = failureMode;
            Id = id;
            MinimalTlsVersion = minimalTlsVersion;
            Mode = mode;
            Name = name;
            NetworkRules = networkRules;
            RsaKeyPairModulus = rsaKeyPairModulus;
            SslDecryptionEnabled = sslDecryptionEnabled;
            UnknownRevocationStatus = unknownRevocationStatus;
            UnsupportedCipherSuites = unsupportedCipherSuites;
            UnsupportedProtocolVersions = unsupportedProtocolVersions;
            UntrustedCertificate = untrustedCertificate;
            UrlRules = urlRules;
            UseDefaultCaCertBundle = useDefaultCaCertBundle;
            Version = version;
        }
    }
}
