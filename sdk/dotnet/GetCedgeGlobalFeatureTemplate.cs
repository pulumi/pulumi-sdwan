// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCedgeGlobalFeatureTemplate
    {
        /// <summary>
        /// This data source can read the cEdge Global feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCedgeGlobalFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCedgeGlobalFeatureTemplateResult> InvokeAsync(GetCedgeGlobalFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCedgeGlobalFeatureTemplateResult>("sdwan:index/getCedgeGlobalFeatureTemplate:getCedgeGlobalFeatureTemplate", args ?? new GetCedgeGlobalFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the cEdge Global feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCedgeGlobalFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCedgeGlobalFeatureTemplateResult> Invoke(GetCedgeGlobalFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCedgeGlobalFeatureTemplateResult>("sdwan:index/getCedgeGlobalFeatureTemplate:getCedgeGlobalFeatureTemplate", args ?? new GetCedgeGlobalFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCedgeGlobalFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCedgeGlobalFeatureTemplateArgs()
        {
        }
        public static new GetCedgeGlobalFeatureTemplateArgs Empty => new GetCedgeGlobalFeatureTemplateArgs();
    }

    public sealed class GetCedgeGlobalFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCedgeGlobalFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCedgeGlobalFeatureTemplateInvokeArgs Empty => new GetCedgeGlobalFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCedgeGlobalFeatureTemplateResult
    {
        /// <summary>
        /// Set ARP Proxy
        /// </summary>
        public readonly bool ArpProxy;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpProxyVariable;
        /// <summary>
        /// Configure Ignore BOOTP
        /// </summary>
        public readonly bool Bootp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BootpVariable;
        /// <summary>
        /// Configure CDP
        /// </summary>
        public readonly bool Cdp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CdpVariable;
        /// <summary>
        /// Configure Console Logging
        /// </summary>
        public readonly bool ConsoleLogging;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ConsoleLoggingVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Configure Domain-Lookup
        /// </summary>
        public readonly bool DomainLookup;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DomainLookupVariable;
        /// <summary>
        /// Set Passive FTP
        /// </summary>
        public readonly bool FtpPassive;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string FtpPassiveVariable;
        /// <summary>
        /// Set preference for HTTP Authentication
        /// </summary>
        public readonly string HttpAuthentication;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string HttpAuthenticationVariable;
        /// <summary>
        /// Set HTTP Server
        /// </summary>
        public readonly bool HttpServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string HttpServerVariable;
        /// <summary>
        /// Set HTTPS Server
        /// </summary>
        public readonly bool HttpsServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string HttpsServerVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set Source Route
        /// </summary>
        public readonly bool IpSourceRouting;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpSourceRoutingVariable;
        /// <summary>
        /// Configure Telnet (Outbound)
        /// </summary>
        public readonly bool LineVty;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LineVtyVariable;
        /// <summary>
        /// Configure LLDP
        /// </summary>
        public readonly bool Lldp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LldpVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set NAT64 TCP session timeout, in seconds
        /// </summary>
        public readonly int Nat64TcpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Nat64TcpTimeoutVariable;
        /// <summary>
        /// Set NAT64 UDP session timeout, in seconds
        /// </summary>
        public readonly int Nat64UdpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Nat64UdpTimeoutVariable;
        /// <summary>
        /// Set RSH/RCP
        /// </summary>
        public readonly bool RshRcp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RshRcpVariable;
        /// <summary>
        /// Configure SNMP Ifindex Persist
        /// </summary>
        public readonly bool SnmpIfindexPersist;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SnmpIfindexPersistVariable;
        /// <summary>
        /// Specify interface for source address in all HTTP(S) client connections
        /// </summary>
        public readonly string SourceInterface;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SourceInterfaceVariable;
        /// <summary>
        /// Set SSH version
        /// </summary>
        public readonly int SshVersion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SshVersionVariable;
        /// <summary>
        /// Configure tcp-keepalives-in
        /// </summary>
        public readonly bool TcpKeepalivesIn;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpKeepalivesInVariable;
        /// <summary>
        /// Configure tcp-keepalives-out
        /// </summary>
        public readonly bool TcpKeepalivesOut;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpKeepalivesOutVariable;
        /// <summary>
        /// Configure tcp-small-servers
        /// </summary>
        public readonly bool TcpSmallServers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpSmallServersVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Configure udp-small-servers
        /// </summary>
        public readonly bool UdpSmallServers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string UdpSmallServersVariable;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Configure VTY Line Logging
        /// </summary>
        public readonly bool VtyLogging;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string VtyLoggingVariable;

        [OutputConstructor]
        private GetCedgeGlobalFeatureTemplateResult(
            bool arpProxy,

            string arpProxyVariable,

            bool bootp,

            string bootpVariable,

            bool cdp,

            string cdpVariable,

            bool consoleLogging,

            string consoleLoggingVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            bool domainLookup,

            string domainLookupVariable,

            bool ftpPassive,

            string ftpPassiveVariable,

            string httpAuthentication,

            string httpAuthenticationVariable,

            bool httpServer,

            string httpServerVariable,

            bool httpsServer,

            string httpsServerVariable,

            string id,

            bool ipSourceRouting,

            string ipSourceRoutingVariable,

            bool lineVty,

            string lineVtyVariable,

            bool lldp,

            string lldpVariable,

            string name,

            int nat64TcpTimeout,

            string nat64TcpTimeoutVariable,

            int nat64UdpTimeout,

            string nat64UdpTimeoutVariable,

            bool rshRcp,

            string rshRcpVariable,

            bool snmpIfindexPersist,

            string snmpIfindexPersistVariable,

            string sourceInterface,

            string sourceInterfaceVariable,

            int sshVersion,

            string sshVersionVariable,

            bool tcpKeepalivesIn,

            string tcpKeepalivesInVariable,

            bool tcpKeepalivesOut,

            string tcpKeepalivesOutVariable,

            bool tcpSmallServers,

            string tcpSmallServersVariable,

            string templateType,

            bool udpSmallServers,

            string udpSmallServersVariable,

            int version,

            bool vtyLogging,

            string vtyLoggingVariable)
        {
            ArpProxy = arpProxy;
            ArpProxyVariable = arpProxyVariable;
            Bootp = bootp;
            BootpVariable = bootpVariable;
            Cdp = cdp;
            CdpVariable = cdpVariable;
            ConsoleLogging = consoleLogging;
            ConsoleLoggingVariable = consoleLoggingVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            DomainLookup = domainLookup;
            DomainLookupVariable = domainLookupVariable;
            FtpPassive = ftpPassive;
            FtpPassiveVariable = ftpPassiveVariable;
            HttpAuthentication = httpAuthentication;
            HttpAuthenticationVariable = httpAuthenticationVariable;
            HttpServer = httpServer;
            HttpServerVariable = httpServerVariable;
            HttpsServer = httpsServer;
            HttpsServerVariable = httpsServerVariable;
            Id = id;
            IpSourceRouting = ipSourceRouting;
            IpSourceRoutingVariable = ipSourceRoutingVariable;
            LineVty = lineVty;
            LineVtyVariable = lineVtyVariable;
            Lldp = lldp;
            LldpVariable = lldpVariable;
            Name = name;
            Nat64TcpTimeout = nat64TcpTimeout;
            Nat64TcpTimeoutVariable = nat64TcpTimeoutVariable;
            Nat64UdpTimeout = nat64UdpTimeout;
            Nat64UdpTimeoutVariable = nat64UdpTimeoutVariable;
            RshRcp = rshRcp;
            RshRcpVariable = rshRcpVariable;
            SnmpIfindexPersist = snmpIfindexPersist;
            SnmpIfindexPersistVariable = snmpIfindexPersistVariable;
            SourceInterface = sourceInterface;
            SourceInterfaceVariable = sourceInterfaceVariable;
            SshVersion = sshVersion;
            SshVersionVariable = sshVersionVariable;
            TcpKeepalivesIn = tcpKeepalivesIn;
            TcpKeepalivesInVariable = tcpKeepalivesInVariable;
            TcpKeepalivesOut = tcpKeepalivesOut;
            TcpKeepalivesOutVariable = tcpKeepalivesOutVariable;
            TcpSmallServers = tcpSmallServers;
            TcpSmallServersVariable = tcpSmallServersVariable;
            TemplateType = templateType;
            UdpSmallServers = udpSmallServers;
            UdpSmallServersVariable = udpSmallServersVariable;
            Version = version;
            VtyLogging = vtyLogging;
            VtyLoggingVariable = vtyLoggingVariable;
        }
    }
}
