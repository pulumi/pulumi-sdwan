// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetServiceLanVpnInterfaceEthernetFeature
    {
        /// <summary>
        /// This data source can read the Service LAN VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         ServiceLanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceLanVpnInterfaceEthernetFeatureResult> InvokeAsync(GetServiceLanVpnInterfaceEthernetFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceLanVpnInterfaceEthernetFeatureResult>("sdwan:index/getServiceLanVpnInterfaceEthernetFeature:getServiceLanVpnInterfaceEthernetFeature", args ?? new GetServiceLanVpnInterfaceEthernetFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service LAN VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         ServiceLanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceLanVpnInterfaceEthernetFeatureResult> Invoke(GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceLanVpnInterfaceEthernetFeatureResult>("sdwan:index/getServiceLanVpnInterfaceEthernetFeature:getServiceLanVpnInterfaceEthernetFeature", args ?? new GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service LAN VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         ServiceLanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceLanVpnInterfaceEthernetFeatureResult> Invoke(GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceLanVpnInterfaceEthernetFeatureResult>("sdwan:index/getServiceLanVpnInterfaceEthernetFeature:getServiceLanVpnInterfaceEthernetFeature", args ?? new GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceLanVpnInterfaceEthernetFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId", required: true)]
        public string ServiceLanVpnFeatureId { get; set; } = null!;

        public GetServiceLanVpnInterfaceEthernetFeatureArgs()
        {
        }
        public static new GetServiceLanVpnInterfaceEthernetFeatureArgs Empty => new GetServiceLanVpnInterfaceEthernetFeatureArgs();
    }

    public sealed class GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId", required: true)]
        public Input<string> ServiceLanVpnFeatureId { get; set; } = null!;

        public GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs()
        {
        }
        public static new GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs Empty => new GetServiceLanVpnInterfaceEthernetFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceLanVpnInterfaceEthernetFeatureResult
    {
        public readonly string AclIpv4EgressPolicyId;
        public readonly string AclIpv4IngressPolicyId;
        public readonly string AclIpv6EgressPolicyId;
        public readonly string AclIpv6IngressPolicyId;
        /// <summary>
        /// Shaping Rate (Kbps)
        /// </summary>
        public readonly int AclShapingRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AclShapingRateVariable;
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, \n\n seconds
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpTimeoutVariable;
        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureArpResult> Arps;
        /// <summary>
        /// Link autonegotiation
        /// </summary>
        public readonly bool Autonegotiate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutonegotiateVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Duplex mode
        /// </summary>
        public readonly string Duplex;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DuplexVariable;
        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        public readonly bool EnableDhcpv6;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        /// </summary>
        public readonly bool IcmpRedirectDisable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IcmpRedirectDisableVariable;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// Interface MTU
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// IP Address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        /// <summary>
        /// DHCP Distance
        /// </summary>
        public readonly int Ipv4DhcpDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpDistanceVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpHelperVariable;
        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public readonly ImmutableArray<string> Ipv4DhcpHelpers;
        /// <summary>
        /// enable Network Address Translation on this interface
        /// </summary>
        public readonly bool Ipv4Nat;
        /// <summary>
        /// NAT Inside Source Loopback Interface
        /// </summary>
        public readonly string Ipv4NatLoopback;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatLoopbackVariable;
        /// <summary>
        /// NAT Overload
        /// </summary>
        public readonly bool Ipv4NatOverload;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatOverloadVariable;
        /// <summary>
        /// NAT Pool Prefix Length
        /// </summary>
        public readonly int Ipv4NatPrefixLength;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatPrefixLengthVariable;
        /// <summary>
        /// NAT Pool Range End
        /// </summary>
        public readonly string Ipv4NatRangeEnd;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatRangeEndVariable;
        /// <summary>
        /// NAT Pool Range Start
        /// </summary>
        public readonly string Ipv4NatRangeStart;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatRangeStartVariable;
        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        /// </summary>
        public readonly int Ipv4NatTcpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatTcpTimeoutVariable;
        /// <summary>
        /// NAT Type
        /// </summary>
        public readonly string Ipv4NatType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatTypeVariable;
        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        /// </summary>
        public readonly int Ipv4NatUdpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4NatUdpTimeoutVariable;
        /// <summary>
        /// Secondary IpV4 Addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult> Ipv4SecondaryAddresses;
        /// <summary>
        /// Subnet Mask
        /// </summary>
        public readonly string Ipv4SubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4SubnetMaskVariable;
        /// <summary>
        /// Enable VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpResult> Ipv4Vrrps;
        /// <summary>
        /// IPv6 Address Secondary
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperResult> Ipv6DhcpHelpers;
        /// <summary>
        /// secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult> Ipv6DhcpSecondaryAddresses;
        /// <summary>
        /// enable Network Address Translation ipv6 on this interface
        /// </summary>
        public readonly bool Ipv6Nat;
        /// <summary>
        /// Static secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult> Ipv6SecondaryAddresses;
        /// <summary>
        /// Enable VRRP Ipv6
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpResult> Ipv6Vrrps;
        /// <summary>
        /// Interval for interface load calculation
        /// </summary>
        public readonly int LoadInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LoadIntervalVariable;
        /// <summary>
        /// MAC Address
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MacAddressVariable;
        /// <summary>
        /// Media type
        /// </summary>
        public readonly string MediaType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MediaTypeVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NAT64 on this interface
        /// </summary>
        public readonly bool Nat64;
        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        public readonly string ServiceLanVpnFeatureId;
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Set interface speed
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpeedVariable;
        /// <summary>
        /// static NAT
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureStaticNatResult> StaticNats;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public readonly string Tracker;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TrackerVariable;
        /// <summary>
        /// Enable/Disable SGT Enforcement on an interface
        /// </summary>
        public readonly bool TrustsecEnableEnforcedPropogation;
        /// <summary>
        /// Indicates that the interface is trustworthy for CTS
        /// </summary>
        public readonly bool TrustsecEnableSgtPropogation;
        /// <summary>
        /// SGT value between 2 and 65519
        /// </summary>
        public readonly int TrustsecEnforcedSecurityGroupTag;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TrustsecEnforcedSecurityGroupTagVariable;
        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding
        /// </summary>
        public readonly bool TrustsecPropogate;
        /// <summary>
        /// SGT value between 2 and 65519
        /// </summary>
        public readonly int TrustsecSecurityGroupTag;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TrustsecSecurityGroupTagVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local LAN interface
        /// </summary>
        public readonly string Xconnect;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string XconnectVariable;

        [OutputConstructor]
        private GetServiceLanVpnInterfaceEthernetFeatureResult(
            string aclIpv4EgressPolicyId,

            string aclIpv4IngressPolicyId,

            string aclIpv6EgressPolicyId,

            string aclIpv6IngressPolicyId,

            int aclShapingRate,

            string aclShapingRateVariable,

            int arpTimeout,

            string arpTimeoutVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureArpResult> arps,

            bool autonegotiate,

            string autonegotiateVariable,

            string description,

            string duplex,

            string duplexVariable,

            bool enableDhcpv6,

            string featureProfileId,

            bool icmpRedirectDisable,

            string icmpRedirectDisableVariable,

            string id,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            int interfaceMtu,

            string interfaceMtuVariable,

            string interfaceName,

            string interfaceNameVariable,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            string ipv4Address,

            string ipv4AddressVariable,

            int ipv4DhcpDistance,

            string ipv4DhcpDistanceVariable,

            string ipv4DhcpHelperVariable,

            ImmutableArray<string> ipv4DhcpHelpers,

            bool ipv4Nat,

            string ipv4NatLoopback,

            string ipv4NatLoopbackVariable,

            bool ipv4NatOverload,

            string ipv4NatOverloadVariable,

            int ipv4NatPrefixLength,

            string ipv4NatPrefixLengthVariable,

            string ipv4NatRangeEnd,

            string ipv4NatRangeEndVariable,

            string ipv4NatRangeStart,

            string ipv4NatRangeStartVariable,

            int ipv4NatTcpTimeout,

            string ipv4NatTcpTimeoutVariable,

            string ipv4NatType,

            string ipv4NatTypeVariable,

            int ipv4NatUdpTimeout,

            string ipv4NatUdpTimeoutVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult> ipv4SecondaryAddresses,

            string ipv4SubnetMask,

            string ipv4SubnetMaskVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpResult> ipv4Vrrps,

            string ipv6Address,

            string ipv6AddressVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelperResult> ipv6DhcpHelpers,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult> ipv6DhcpSecondaryAddresses,

            bool ipv6Nat,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult> ipv6SecondaryAddresses,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpResult> ipv6Vrrps,

            int loadInterval,

            string loadIntervalVariable,

            string macAddress,

            string macAddressVariable,

            string mediaType,

            string mediaTypeVariable,

            string name,

            bool nat64,

            string serviceLanVpnFeatureId,

            bool shutdown,

            string shutdownVariable,

            string speed,

            string speedVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceEthernetFeatureStaticNatResult> staticNats,

            int tcpMss,

            string tcpMssVariable,

            string tracker,

            string trackerVariable,

            bool trustsecEnableEnforcedPropogation,

            bool trustsecEnableSgtPropogation,

            int trustsecEnforcedSecurityGroupTag,

            string trustsecEnforcedSecurityGroupTagVariable,

            bool trustsecPropogate,

            int trustsecSecurityGroupTag,

            string trustsecSecurityGroupTagVariable,

            int version,

            string xconnect,

            string xconnectVariable)
        {
            AclIpv4EgressPolicyId = aclIpv4EgressPolicyId;
            AclIpv4IngressPolicyId = aclIpv4IngressPolicyId;
            AclIpv6EgressPolicyId = aclIpv6EgressPolicyId;
            AclIpv6IngressPolicyId = aclIpv6IngressPolicyId;
            AclShapingRate = aclShapingRate;
            AclShapingRateVariable = aclShapingRateVariable;
            ArpTimeout = arpTimeout;
            ArpTimeoutVariable = arpTimeoutVariable;
            Arps = arps;
            Autonegotiate = autonegotiate;
            AutonegotiateVariable = autonegotiateVariable;
            Description = description;
            Duplex = duplex;
            DuplexVariable = duplexVariable;
            EnableDhcpv6 = enableDhcpv6;
            FeatureProfileId = featureProfileId;
            IcmpRedirectDisable = icmpRedirectDisable;
            IcmpRedirectDisableVariable = icmpRedirectDisableVariable;
            Id = id;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv4DhcpDistance = ipv4DhcpDistance;
            Ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            Ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            Ipv4DhcpHelpers = ipv4DhcpHelpers;
            Ipv4Nat = ipv4Nat;
            Ipv4NatLoopback = ipv4NatLoopback;
            Ipv4NatLoopbackVariable = ipv4NatLoopbackVariable;
            Ipv4NatOverload = ipv4NatOverload;
            Ipv4NatOverloadVariable = ipv4NatOverloadVariable;
            Ipv4NatPrefixLength = ipv4NatPrefixLength;
            Ipv4NatPrefixLengthVariable = ipv4NatPrefixLengthVariable;
            Ipv4NatRangeEnd = ipv4NatRangeEnd;
            Ipv4NatRangeEndVariable = ipv4NatRangeEndVariable;
            Ipv4NatRangeStart = ipv4NatRangeStart;
            Ipv4NatRangeStartVariable = ipv4NatRangeStartVariable;
            Ipv4NatTcpTimeout = ipv4NatTcpTimeout;
            Ipv4NatTcpTimeoutVariable = ipv4NatTcpTimeoutVariable;
            Ipv4NatType = ipv4NatType;
            Ipv4NatTypeVariable = ipv4NatTypeVariable;
            Ipv4NatUdpTimeout = ipv4NatUdpTimeout;
            Ipv4NatUdpTimeoutVariable = ipv4NatUdpTimeoutVariable;
            Ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            Ipv4SubnetMask = ipv4SubnetMask;
            Ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            Ipv4Vrrps = ipv4Vrrps;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Ipv6DhcpHelpers = ipv6DhcpHelpers;
            Ipv6DhcpSecondaryAddresses = ipv6DhcpSecondaryAddresses;
            Ipv6Nat = ipv6Nat;
            Ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            Ipv6Vrrps = ipv6Vrrps;
            LoadInterval = loadInterval;
            LoadIntervalVariable = loadIntervalVariable;
            MacAddress = macAddress;
            MacAddressVariable = macAddressVariable;
            MediaType = mediaType;
            MediaTypeVariable = mediaTypeVariable;
            Name = name;
            Nat64 = nat64;
            ServiceLanVpnFeatureId = serviceLanVpnFeatureId;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            Speed = speed;
            SpeedVariable = speedVariable;
            StaticNats = staticNats;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            Tracker = tracker;
            TrackerVariable = trackerVariable;
            TrustsecEnableEnforcedPropogation = trustsecEnableEnforcedPropogation;
            TrustsecEnableSgtPropogation = trustsecEnableSgtPropogation;
            TrustsecEnforcedSecurityGroupTag = trustsecEnforcedSecurityGroupTag;
            TrustsecEnforcedSecurityGroupTagVariable = trustsecEnforcedSecurityGroupTagVariable;
            TrustsecPropogate = trustsecPropogate;
            TrustsecSecurityGroupTag = trustsecSecurityGroupTag;
            TrustsecSecurityGroupTagVariable = trustsecSecurityGroupTagVariable;
            Version = version;
            Xconnect = xconnect;
            XconnectVariable = xconnectVariable;
        }
    }
}
