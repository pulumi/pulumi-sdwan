// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a URL Filtering Policy Definition .
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition")]
    public partial class UrlFilteringPolicyDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of alerts options that will be exported as syslog messages
        /// </summary>
        [Output("alerts")]
        public Output<ImmutableArray<string>> Alerts { get; private set; } = null!;

        /// <summary>
        /// Allow URL list ID
        /// </summary>
        [Output("allowUrlListId")]
        public Output<string?> AllowUrlListId { get; private set; } = null!;

        /// <summary>
        /// Allow URL list version
        /// </summary>
        [Output("allowUrlListVersion")]
        public Output<int?> AllowUrlListVersion { get; private set; } = null!;

        /// <summary>
        /// Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
        /// </summary>
        [Output("blockPageAction")]
        public Output<string?> BlockPageAction { get; private set; } = null!;

        /// <summary>
        /// The message displayed or URL redirected to when a blocked page is accessed.
        /// </summary>
        [Output("blockPageContents")]
        public Output<string?> BlockPageContents { get; private set; } = null!;

        /// <summary>
        /// Block URL list ID
        /// </summary>
        [Output("blockUrlListId")]
        public Output<string?> BlockUrlListId { get; private set; } = null!;

        /// <summary>
        /// Block URL list version
        /// </summary>
        [Output("blockUrlListVersion")]
        public Output<int?> BlockUrlListVersion { get; private set; } = null!;

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("loggings")]
        public Output<ImmutableArray<Outputs.UrlFilteringPolicyDefinitionLogging>> Loggings { get; private set; } = null!;

        /// <summary>
        /// The policy mode - Choices: `security`, `unified`
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of VPN IDs
        /// </summary>
        [Output("targetVpns")]
        public Output<ImmutableArray<string>> TargetVpns { get; private set; } = null!;

        /// <summary>
        /// The version of the object
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// List of categories to block or allow
        /// </summary>
        [Output("webCategories")]
        public Output<ImmutableArray<string>> WebCategories { get; private set; } = null!;

        /// <summary>
        /// whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
        /// </summary>
        [Output("webCategoriesAction")]
        public Output<string?> WebCategoriesAction { get; private set; } = null!;

        /// <summary>
        /// The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
        /// `trustworthy`
        /// </summary>
        [Output("webReputation")]
        public Output<string?> WebReputation { get; private set; } = null!;


        /// <summary>
        /// Create a UrlFilteringPolicyDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UrlFilteringPolicyDefinition(string name, UrlFilteringPolicyDefinitionArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition", name, args ?? new UrlFilteringPolicyDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UrlFilteringPolicyDefinition(string name, Input<string> id, UrlFilteringPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UrlFilteringPolicyDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UrlFilteringPolicyDefinition Get(string name, Input<string> id, UrlFilteringPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new UrlFilteringPolicyDefinition(name, id, state, options);
        }
    }

    public sealed class UrlFilteringPolicyDefinitionArgs : global::Pulumi.ResourceArgs
    {
        [Input("alerts")]
        private InputList<string>? _alerts;

        /// <summary>
        /// List of alerts options that will be exported as syslog messages
        /// </summary>
        public InputList<string> Alerts
        {
            get => _alerts ?? (_alerts = new InputList<string>());
            set => _alerts = value;
        }

        /// <summary>
        /// Allow URL list ID
        /// </summary>
        [Input("allowUrlListId")]
        public Input<string>? AllowUrlListId { get; set; }

        /// <summary>
        /// Allow URL list version
        /// </summary>
        [Input("allowUrlListVersion")]
        public Input<int>? AllowUrlListVersion { get; set; }

        /// <summary>
        /// Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
        /// </summary>
        [Input("blockPageAction")]
        public Input<string>? BlockPageAction { get; set; }

        /// <summary>
        /// The message displayed or URL redirected to when a blocked page is accessed.
        /// </summary>
        [Input("blockPageContents")]
        public Input<string>? BlockPageContents { get; set; }

        /// <summary>
        /// Block URL list ID
        /// </summary>
        [Input("blockUrlListId")]
        public Input<string>? BlockUrlListId { get; set; }

        /// <summary>
        /// Block URL list version
        /// </summary>
        [Input("blockUrlListVersion")]
        public Input<int>? BlockUrlListVersion { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("loggings")]
        private InputList<Inputs.UrlFilteringPolicyDefinitionLoggingArgs>? _loggings;
        public InputList<Inputs.UrlFilteringPolicyDefinitionLoggingArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.UrlFilteringPolicyDefinitionLoggingArgs>());
            set => _loggings = value;
        }

        /// <summary>
        /// The policy mode - Choices: `security`, `unified`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<string>? _targetVpns;

        /// <summary>
        /// List of VPN IDs
        /// </summary>
        public InputList<string> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<string>());
            set => _targetVpns = value;
        }

        [Input("webCategories")]
        private InputList<string>? _webCategories;

        /// <summary>
        /// List of categories to block or allow
        /// </summary>
        public InputList<string> WebCategories
        {
            get => _webCategories ?? (_webCategories = new InputList<string>());
            set => _webCategories = value;
        }

        /// <summary>
        /// whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
        /// </summary>
        [Input("webCategoriesAction")]
        public Input<string>? WebCategoriesAction { get; set; }

        /// <summary>
        /// The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
        /// `trustworthy`
        /// </summary>
        [Input("webReputation")]
        public Input<string>? WebReputation { get; set; }

        public UrlFilteringPolicyDefinitionArgs()
        {
        }
        public static new UrlFilteringPolicyDefinitionArgs Empty => new UrlFilteringPolicyDefinitionArgs();
    }

    public sealed class UrlFilteringPolicyDefinitionState : global::Pulumi.ResourceArgs
    {
        [Input("alerts")]
        private InputList<string>? _alerts;

        /// <summary>
        /// List of alerts options that will be exported as syslog messages
        /// </summary>
        public InputList<string> Alerts
        {
            get => _alerts ?? (_alerts = new InputList<string>());
            set => _alerts = value;
        }

        /// <summary>
        /// Allow URL list ID
        /// </summary>
        [Input("allowUrlListId")]
        public Input<string>? AllowUrlListId { get; set; }

        /// <summary>
        /// Allow URL list version
        /// </summary>
        [Input("allowUrlListVersion")]
        public Input<int>? AllowUrlListVersion { get; set; }

        /// <summary>
        /// Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
        /// </summary>
        [Input("blockPageAction")]
        public Input<string>? BlockPageAction { get; set; }

        /// <summary>
        /// The message displayed or URL redirected to when a blocked page is accessed.
        /// </summary>
        [Input("blockPageContents")]
        public Input<string>? BlockPageContents { get; set; }

        /// <summary>
        /// Block URL list ID
        /// </summary>
        [Input("blockUrlListId")]
        public Input<string>? BlockUrlListId { get; set; }

        /// <summary>
        /// Block URL list version
        /// </summary>
        [Input("blockUrlListVersion")]
        public Input<int>? BlockUrlListVersion { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("loggings")]
        private InputList<Inputs.UrlFilteringPolicyDefinitionLoggingGetArgs>? _loggings;
        public InputList<Inputs.UrlFilteringPolicyDefinitionLoggingGetArgs> Loggings
        {
            get => _loggings ?? (_loggings = new InputList<Inputs.UrlFilteringPolicyDefinitionLoggingGetArgs>());
            set => _loggings = value;
        }

        /// <summary>
        /// The policy mode - Choices: `security`, `unified`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<string>? _targetVpns;

        /// <summary>
        /// List of VPN IDs
        /// </summary>
        public InputList<string> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<string>());
            set => _targetVpns = value;
        }

        /// <summary>
        /// The version of the object
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        [Input("webCategories")]
        private InputList<string>? _webCategories;

        /// <summary>
        /// List of categories to block or allow
        /// </summary>
        public InputList<string> WebCategories
        {
            get => _webCategories ?? (_webCategories = new InputList<string>());
            set => _webCategories = value;
        }

        /// <summary>
        /// whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
        /// </summary>
        [Input("webCategoriesAction")]
        public Input<string>? WebCategoriesAction { get; set; }

        /// <summary>
        /// The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
        /// `trustworthy`
        /// </summary>
        [Input("webReputation")]
        public Input<string>? WebReputation { get; set; }

        public UrlFilteringPolicyDefinitionState()
        {
        }
        public static new UrlFilteringPolicyDefinitionState Empty => new UrlFilteringPolicyDefinitionState();
    }
}
