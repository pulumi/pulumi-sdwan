// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco Secure Internet Gateway feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.CiscoSecureInternetGatewayFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         VpnId = 1,
    ///         Interfaces = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs
    ///             {
    ///                 Name = "ipsec1",
    ///                 Auto_tunnel_mode = true,
    ///                 Shutdown = true,
    ///                 Description = "My Description",
    ///                 Ip_unnumbered = false,
    ///                 Ipv4_address = "1.2.3.4/24",
    ///                 Tunnel_source = "3.3.3.3",
    ///                 Tunnel_source_interface = "ge0/1",
    ///                 Tunnel_route_via = "ge0/2",
    ///                 Tunnel_destination = "3.4.5.6",
    ///                 Application = "sig",
    ///                 Sig_provider = "secure-internet-gateway-umbrella",
    ///                 Tunnel_dc_preference = "primary-dc",
    ///                 Tcp_mss = 1400,
    ///                 Mtu = 1500,
    ///                 Dead_peer_detection_interval = 30,
    ///                 Dead_peer_detection_retries = 5,
    ///                 Ike_version = 1,
    ///                 Ike_pre_shared_key = "A1234567",
    ///                 Ike_rekey_interval = 600,
    ///                 Ike_ciphersuite = "aes256-cbc-sha2",
    ///                 Ike_group = "14",
    ///                 Ike_pre_shared_key_dynamic = false,
    ///                 Ike_pre_shared_key_local_id = "1.2.3.4",
    ///                 Ike_pre_shared_key_remote_id = "2.3.4.5",
    ///                 Ipsec_rekey_interval = 7200,
    ///                 Ipsec_replay_window = 1024,
    ///                 Ipsec_ciphersuite = "aes256-cbc-sha1",
    ///                 Ipsec_perfect_forward_secrecy = "group-14",
    ///                 Tracker = "test",
    ///                 Track_enable = false,
    ///                 Tunnel_public_ip = "5.5.5.5",
    ///             },
    ///         },
    ///         Services = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceArgs
    ///             {
    ///                 Service_type = "sig",
    ///                 Interface_pairs = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "activeInterface", "e1" },
    ///                         { "activeInterfaceWeight", 10 },
    ///                         { "backupInterface", "e2" },
    ///                         { "backupInterfaceWeight", 20 },
    ///                     },
    ///                 },
    ///                 Zscaler_authentication_required = true,
    ///                 Zscaler_xff_forward = true,
    ///                 Zscaler_firewall_enabled = true,
    ///                 Zscaler_ips_control_enabled = true,
    ///                 Zscaler_caution_enabled = true,
    ///                 Zscaler_primary_data_center = "Auto",
    ///                 Zscaler_secondary_data_center = "Auto",
    ///                 Zscaler_surrogate_ip = true,
    ///                 Zscaler_surrogate_idle_time = 100,
    ///                 Zscaler_surrogate_display_time_unit = "MINUTE",
    ///                 Zscaler_surrogate_ip_enforce_for_known_browsers = true,
    ///                 Zscaler_surrogate_refresh_time = 12345,
    ///                 Zscaler_surrogate_refresh_time_unit = "MINUTE",
    ///                 Zscaler_aup_enabled = true,
    ///                 Zscaler_aup_block_internet_until_accepted = true,
    ///                 Zscaler_aup_force_ssl_inspection = true,
    ///                 Zscaler_aup_timeout = 60,
    ///                 Zscaler_location_name = "LOC1",
    ///                 Umbrella_primary_data_center = "Auto",
    ///                 Umbrella_secondary_data_center = "Auto",
    ///             },
    ///         },
    ///         TrackerSourceIp = "2.3.4.5",
    ///         Trackers = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerArgs
    ///             {
    ///                 Name = "TRACKER1",
    ///                 Endpoint_api_url = "https://1.1.1.1",
    ///                 Threshold = 500,
    ///                 Interval = 60,
    ///                 Multiplier = 4,
    ///                 Tracker_type = "SIG",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoSecureInternetGatewayFeatureTemplate:CiscoSecureInternetGatewayFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoSecureInternetGatewayFeatureTemplate:CiscoSecureInternetGatewayFeatureTemplate")]
    public partial class CiscoSecureInternetGatewayFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.CiscoSecureInternetGatewayFeatureTemplateInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configure services
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.CiscoSecureInternetGatewayFeatureTemplateService>> Services { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Source IP address for Tracker
        /// </summary>
        [Output("trackerSourceIp")]
        public Output<string?> TrackerSourceIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerSourceIpVariable")]
        public Output<string?> TrackerSourceIpVariable { get; private set; } = null!;

        /// <summary>
        /// Tracker configuration
        /// </summary>
        [Output("trackers")]
        public Output<ImmutableArray<Outputs.CiscoSecureInternetGatewayFeatureTemplateTracker>> Trackers { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// List of VPN instances
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Output("vpnId")]
        public Output<int?> VpnId { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoSecureInternetGatewayFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoSecureInternetGatewayFeatureTemplate(string name, CiscoSecureInternetGatewayFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoSecureInternetGatewayFeatureTemplate:CiscoSecureInternetGatewayFeatureTemplate", name, args ?? new CiscoSecureInternetGatewayFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoSecureInternetGatewayFeatureTemplate(string name, Input<string> id, CiscoSecureInternetGatewayFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoSecureInternetGatewayFeatureTemplate:CiscoSecureInternetGatewayFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoSecureInternetGatewayFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoSecureInternetGatewayFeatureTemplate Get(string name, Input<string> id, CiscoSecureInternetGatewayFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoSecureInternetGatewayFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoSecureInternetGatewayFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("interfaces")]
        private InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs>? _interfaces;

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        public InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("services")]
        private InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceArgs>? _services;

        /// <summary>
        /// Configure services
        /// </summary>
        public InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceArgs>());
            set => _services = value;
        }

        /// <summary>
        /// Source IP address for Tracker
        /// </summary>
        [Input("trackerSourceIp")]
        public Input<string>? TrackerSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerSourceIpVariable")]
        public Input<string>? TrackerSourceIpVariable { get; set; }

        [Input("trackers")]
        private InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerArgs>? _trackers;

        /// <summary>
        /// Tracker configuration
        /// </summary>
        public InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerArgs> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerArgs>());
            set => _trackers = value;
        }

        /// <summary>
        /// List of VPN instances
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Input("vpnId")]
        public Input<int>? VpnId { get; set; }

        public CiscoSecureInternetGatewayFeatureTemplateArgs()
        {
        }
        public static new CiscoSecureInternetGatewayFeatureTemplateArgs Empty => new CiscoSecureInternetGatewayFeatureTemplateArgs();
    }

    public sealed class CiscoSecureInternetGatewayFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("interfaces")]
        private InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        public InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("services")]
        private InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceGetArgs>? _services;

        /// <summary>
        /// Configure services
        /// </summary>
        public InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateServiceGetArgs>());
            set => _services = value;
        }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Source IP address for Tracker
        /// </summary>
        [Input("trackerSourceIp")]
        public Input<string>? TrackerSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerSourceIpVariable")]
        public Input<string>? TrackerSourceIpVariable { get; set; }

        [Input("trackers")]
        private InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerGetArgs>? _trackers;

        /// <summary>
        /// Tracker configuration
        /// </summary>
        public InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerGetArgs> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<Inputs.CiscoSecureInternetGatewayFeatureTemplateTrackerGetArgs>());
            set => _trackers = value;
        }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// List of VPN instances
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Input("vpnId")]
        public Input<int>? VpnId { get; set; }

        public CiscoSecureInternetGatewayFeatureTemplateState()
        {
        }
        public static new CiscoSecureInternetGatewayFeatureTemplateState Empty => new CiscoSecureInternetGatewayFeatureTemplateState();
    }
}
