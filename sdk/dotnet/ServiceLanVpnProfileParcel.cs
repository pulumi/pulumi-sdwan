// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service LAN VPN profile parcel.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceLanVpnProfileParcel:ServiceLanVpnProfileParcel example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceLanVpnProfileParcel:ServiceLanVpnProfileParcel")]
    public partial class ServiceLanVpnProfileParcel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        [Output("advertiseOmpIpv4s")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4>> AdvertiseOmpIpv4s { get; private set; } = null!;

        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        [Output("advertiseOmpIpv6s")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6>> AdvertiseOmpIpv6s { get; private set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Output("configDescription")]
        public Output<string?> ConfigDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("configDescriptionVariable")]
        public Output<string?> ConfigDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable SDWAN Remote Access - Default value: `false`
        /// </summary>
        [Output("enableSdwanRemoteAccess")]
        public Output<bool?> EnableSdwanRemoteAccess { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        [Output("greRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelGreRoute>> GreRoutes { get; private set; } = null!;

        [Output("hostMappings")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelHostMapping>> HostMappings { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        [Output("ipsecRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpsecRoute>> IpsecRoutes { get; private set; } = null!;

        [Output("ipv4ExportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpv4ExportRouteTarget>> Ipv4ExportRouteTargets { get; private set; } = null!;

        [Output("ipv4ImportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpv4ImportRouteTarget>> Ipv4ImportRouteTargets { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        [Output("ipv4StaticRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpv4StaticRoute>> Ipv4StaticRoutes { get; private set; } = null!;

        [Output("ipv6ExportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpv6ExportRouteTarget>> Ipv6ExportRouteTargets { get; private set; } = null!;

        [Output("ipv6ImportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpv6ImportRouteTarget>> Ipv6ImportRouteTargets { get; private set; } = null!;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        [Output("ipv6StaticRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelIpv6StaticRoute>> Ipv6StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        [Output("nat64V4Pools")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelNat64V4Pool>> Nat64V4Pools { get; private set; } = null!;

        /// <summary>
        /// NAT Pool
        /// </summary>
        [Output("natPools")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelNatPool>> NatPools { get; private set; } = null!;

        /// <summary>
        /// NAT Port Forward
        /// </summary>
        [Output("natPortForwards")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelNatPortForward>> NatPortForwards { get; private set; } = null!;

        /// <summary>
        /// OMP Admin Distance IPv4 - Range: `1`-`255`
        /// </summary>
        [Output("ompAdminDistanceIpv4")]
        public Output<int?> OmpAdminDistanceIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ompAdminDistanceIpv4Variable")]
        public Output<string?> OmpAdminDistanceIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// OMP Admin Distance IPv6 - Range: `1`-`255`
        /// </summary>
        [Output("ompAdminDistanceIpv6")]
        public Output<int?> OmpAdminDistanceIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ompAdminDistanceIpv6Variable")]
        public Output<string?> OmpAdminDistanceIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Output("primaryDnsAddressIpv4")]
        public Output<string> PrimaryDnsAddressIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primaryDnsAddressIpv4Variable")]
        public Output<string?> PrimaryDnsAddressIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Output("primaryDnsAddressIpv6")]
        public Output<string> PrimaryDnsAddressIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primaryDnsAddressIpv6Variable")]
        public Output<string?> PrimaryDnsAddressIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        [Output("routeLeakFromGlobalVpns")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpn>> RouteLeakFromGlobalVpns { get; private set; } = null!;

        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        [Output("routeLeakFromOtherServices")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelRouteLeakFromOtherService>> RouteLeakFromOtherServices { get; private set; } = null!;

        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        [Output("routeLeakToGlobalVpns")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpn>> RouteLeakToGlobalVpns { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Output("secondaryDnsAddressIpv4")]
        public Output<string?> SecondaryDnsAddressIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryDnsAddressIpv4Variable")]
        public Output<string?> SecondaryDnsAddressIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Output("secondaryDnsAddressIpv6")]
        public Output<string?> SecondaryDnsAddressIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryDnsAddressIpv6Variable")]
        public Output<string?> SecondaryDnsAddressIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Service
        /// </summary>
        [Output("serviceRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelServiceRoute>> ServiceRoutes { get; private set; } = null!;

        /// <summary>
        /// Service
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelService>> Services { get; private set; } = null!;

        /// <summary>
        /// Static NAT Rules
        /// </summary>
        [Output("staticNats")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnProfileParcelStaticNat>> StaticNats { get; private set; } = null!;

        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// VPN - Range: `1`-`65527` - Default value: `0`
        /// </summary>
        [Output("vpn")]
        public Output<int?> Vpn { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("vpnVariable")]
        public Output<string?> VpnVariable { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceLanVpnProfileParcel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceLanVpnProfileParcel(string name, ServiceLanVpnProfileParcelArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnProfileParcel:ServiceLanVpnProfileParcel", name, args ?? new ServiceLanVpnProfileParcelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceLanVpnProfileParcel(string name, Input<string> id, ServiceLanVpnProfileParcelState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnProfileParcel:ServiceLanVpnProfileParcel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceLanVpnProfileParcel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceLanVpnProfileParcel Get(string name, Input<string> id, ServiceLanVpnProfileParcelState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceLanVpnProfileParcel(name, id, state, options);
        }
    }

    public sealed class ServiceLanVpnProfileParcelArgs : global::Pulumi.ResourceArgs
    {
        [Input("advertiseOmpIpv4s")]
        private InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4Args>? _advertiseOmpIpv4s;

        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4Args> AdvertiseOmpIpv4s
        {
            get => _advertiseOmpIpv4s ?? (_advertiseOmpIpv4s = new InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4Args>());
            set => _advertiseOmpIpv4s = value;
        }

        [Input("advertiseOmpIpv6s")]
        private InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6Args>? _advertiseOmpIpv6s;

        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6Args> AdvertiseOmpIpv6s
        {
            get => _advertiseOmpIpv6s ?? (_advertiseOmpIpv6s = new InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6Args>());
            set => _advertiseOmpIpv6s = value;
        }

        /// <summary>
        /// Name
        /// </summary>
        [Input("configDescription")]
        public Input<string>? ConfigDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("configDescriptionVariable")]
        public Input<string>? ConfigDescriptionVariable { get; set; }

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable SDWAN Remote Access - Default value: `false`
        /// </summary>
        [Input("enableSdwanRemoteAccess")]
        public Input<bool>? EnableSdwanRemoteAccess { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("greRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelGreRouteArgs>? _greRoutes;

        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelGreRouteArgs> GreRoutes
        {
            get => _greRoutes ?? (_greRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelGreRouteArgs>());
            set => _greRoutes = value;
        }

        [Input("hostMappings")]
        private InputList<Inputs.ServiceLanVpnProfileParcelHostMappingArgs>? _hostMappings;
        public InputList<Inputs.ServiceLanVpnProfileParcelHostMappingArgs> HostMappings
        {
            get => _hostMappings ?? (_hostMappings = new InputList<Inputs.ServiceLanVpnProfileParcelHostMappingArgs>());
            set => _hostMappings = value;
        }

        [Input("ipsecRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpsecRouteArgs>? _ipsecRoutes;

        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelIpsecRouteArgs> IpsecRoutes
        {
            get => _ipsecRoutes ?? (_ipsecRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelIpsecRouteArgs>());
            set => _ipsecRoutes = value;
        }

        [Input("ipv4ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv4ExportRouteTargetArgs>? _ipv4ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv4ExportRouteTargetArgs> Ipv4ExportRouteTargets
        {
            get => _ipv4ExportRouteTargets ?? (_ipv4ExportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv4ExportRouteTargetArgs>());
            set => _ipv4ExportRouteTargets = value;
        }

        [Input("ipv4ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv4ImportRouteTargetArgs>? _ipv4ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv4ImportRouteTargetArgs> Ipv4ImportRouteTargets
        {
            get => _ipv4ImportRouteTargets ?? (_ipv4ImportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv4ImportRouteTargetArgs>());
            set => _ipv4ImportRouteTargets = value;
        }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv4StaticRouteArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv4StaticRouteArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelIpv4StaticRouteArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv6ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv6ExportRouteTargetArgs>? _ipv6ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv6ExportRouteTargetArgs> Ipv6ExportRouteTargets
        {
            get => _ipv6ExportRouteTargets ?? (_ipv6ExportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv6ExportRouteTargetArgs>());
            set => _ipv6ExportRouteTargets = value;
        }

        [Input("ipv6ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv6ImportRouteTargetArgs>? _ipv6ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv6ImportRouteTargetArgs> Ipv6ImportRouteTargets
        {
            get => _ipv6ImportRouteTargets ?? (_ipv6ImportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv6ImportRouteTargetArgs>());
            set => _ipv6ImportRouteTargets = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv6StaticRouteArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv6StaticRouteArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelIpv6StaticRouteArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat64V4Pools")]
        private InputList<Inputs.ServiceLanVpnProfileParcelNat64V4PoolArgs>? _nat64V4Pools;

        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelNat64V4PoolArgs> Nat64V4Pools
        {
            get => _nat64V4Pools ?? (_nat64V4Pools = new InputList<Inputs.ServiceLanVpnProfileParcelNat64V4PoolArgs>());
            set => _nat64V4Pools = value;
        }

        [Input("natPools")]
        private InputList<Inputs.ServiceLanVpnProfileParcelNatPoolArgs>? _natPools;

        /// <summary>
        /// NAT Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelNatPoolArgs> NatPools
        {
            get => _natPools ?? (_natPools = new InputList<Inputs.ServiceLanVpnProfileParcelNatPoolArgs>());
            set => _natPools = value;
        }

        [Input("natPortForwards")]
        private InputList<Inputs.ServiceLanVpnProfileParcelNatPortForwardArgs>? _natPortForwards;

        /// <summary>
        /// NAT Port Forward
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelNatPortForwardArgs> NatPortForwards
        {
            get => _natPortForwards ?? (_natPortForwards = new InputList<Inputs.ServiceLanVpnProfileParcelNatPortForwardArgs>());
            set => _natPortForwards = value;
        }

        /// <summary>
        /// OMP Admin Distance IPv4 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv4")]
        public Input<int>? OmpAdminDistanceIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv4Variable")]
        public Input<string>? OmpAdminDistanceIpv4Variable { get; set; }

        /// <summary>
        /// OMP Admin Distance IPv6 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv6")]
        public Input<int>? OmpAdminDistanceIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv6Variable")]
        public Input<string>? OmpAdminDistanceIpv6Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Input("primaryDnsAddressIpv4", required: true)]
        public Input<string> PrimaryDnsAddressIpv4 { get; set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv4Variable")]
        public Input<string>? PrimaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Input("primaryDnsAddressIpv6", required: true)]
        public Input<string> PrimaryDnsAddressIpv6 { get; set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv6Variable")]
        public Input<string>? PrimaryDnsAddressIpv6Variable { get; set; }

        [Input("routeLeakFromGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpnArgs>? _routeLeakFromGlobalVpns;

        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpnArgs> RouteLeakFromGlobalVpns
        {
            get => _routeLeakFromGlobalVpns ?? (_routeLeakFromGlobalVpns = new InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpnArgs>());
            set => _routeLeakFromGlobalVpns = value;
        }

        [Input("routeLeakFromOtherServices")]
        private InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromOtherServiceArgs>? _routeLeakFromOtherServices;

        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromOtherServiceArgs> RouteLeakFromOtherServices
        {
            get => _routeLeakFromOtherServices ?? (_routeLeakFromOtherServices = new InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromOtherServiceArgs>());
            set => _routeLeakFromOtherServices = value;
        }

        [Input("routeLeakToGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpnArgs>? _routeLeakToGlobalVpns;

        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpnArgs> RouteLeakToGlobalVpns
        {
            get => _routeLeakToGlobalVpns ?? (_routeLeakToGlobalVpns = new InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpnArgs>());
            set => _routeLeakToGlobalVpns = value;
        }

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Input("secondaryDnsAddressIpv4")]
        public Input<string>? SecondaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv4Variable")]
        public Input<string>? SecondaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Input("secondaryDnsAddressIpv6")]
        public Input<string>? SecondaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv6Variable")]
        public Input<string>? SecondaryDnsAddressIpv6Variable { get; set; }

        [Input("serviceRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelServiceRouteArgs>? _serviceRoutes;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelServiceRouteArgs> ServiceRoutes
        {
            get => _serviceRoutes ?? (_serviceRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelServiceRouteArgs>());
            set => _serviceRoutes = value;
        }

        [Input("services")]
        private InputList<Inputs.ServiceLanVpnProfileParcelServiceArgs>? _services;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ServiceLanVpnProfileParcelServiceArgs>());
            set => _services = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.ServiceLanVpnProfileParcelStaticNatArgs>? _staticNats;

        /// <summary>
        /// Static NAT Rules
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelStaticNatArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.ServiceLanVpnProfileParcelStaticNatArgs>());
            set => _staticNats = value;
        }

        /// <summary>
        /// VPN - Range: `1`-`65527` - Default value: `0`
        /// </summary>
        [Input("vpn")]
        public Input<int>? Vpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnVariable")]
        public Input<string>? VpnVariable { get; set; }

        public ServiceLanVpnProfileParcelArgs()
        {
        }
        public static new ServiceLanVpnProfileParcelArgs Empty => new ServiceLanVpnProfileParcelArgs();
    }

    public sealed class ServiceLanVpnProfileParcelState : global::Pulumi.ResourceArgs
    {
        [Input("advertiseOmpIpv4s")]
        private InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4GetArgs>? _advertiseOmpIpv4s;

        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4GetArgs> AdvertiseOmpIpv4s
        {
            get => _advertiseOmpIpv4s ?? (_advertiseOmpIpv4s = new InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv4GetArgs>());
            set => _advertiseOmpIpv4s = value;
        }

        [Input("advertiseOmpIpv6s")]
        private InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6GetArgs>? _advertiseOmpIpv6s;

        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6GetArgs> AdvertiseOmpIpv6s
        {
            get => _advertiseOmpIpv6s ?? (_advertiseOmpIpv6s = new InputList<Inputs.ServiceLanVpnProfileParcelAdvertiseOmpIpv6GetArgs>());
            set => _advertiseOmpIpv6s = value;
        }

        /// <summary>
        /// Name
        /// </summary>
        [Input("configDescription")]
        public Input<string>? ConfigDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("configDescriptionVariable")]
        public Input<string>? ConfigDescriptionVariable { get; set; }

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable SDWAN Remote Access - Default value: `false`
        /// </summary>
        [Input("enableSdwanRemoteAccess")]
        public Input<bool>? EnableSdwanRemoteAccess { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("greRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelGreRouteGetArgs>? _greRoutes;

        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelGreRouteGetArgs> GreRoutes
        {
            get => _greRoutes ?? (_greRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelGreRouteGetArgs>());
            set => _greRoutes = value;
        }

        [Input("hostMappings")]
        private InputList<Inputs.ServiceLanVpnProfileParcelHostMappingGetArgs>? _hostMappings;
        public InputList<Inputs.ServiceLanVpnProfileParcelHostMappingGetArgs> HostMappings
        {
            get => _hostMappings ?? (_hostMappings = new InputList<Inputs.ServiceLanVpnProfileParcelHostMappingGetArgs>());
            set => _hostMappings = value;
        }

        [Input("ipsecRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpsecRouteGetArgs>? _ipsecRoutes;

        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelIpsecRouteGetArgs> IpsecRoutes
        {
            get => _ipsecRoutes ?? (_ipsecRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelIpsecRouteGetArgs>());
            set => _ipsecRoutes = value;
        }

        [Input("ipv4ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv4ExportRouteTargetGetArgs>? _ipv4ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv4ExportRouteTargetGetArgs> Ipv4ExportRouteTargets
        {
            get => _ipv4ExportRouteTargets ?? (_ipv4ExportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv4ExportRouteTargetGetArgs>());
            set => _ipv4ExportRouteTargets = value;
        }

        [Input("ipv4ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv4ImportRouteTargetGetArgs>? _ipv4ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv4ImportRouteTargetGetArgs> Ipv4ImportRouteTargets
        {
            get => _ipv4ImportRouteTargets ?? (_ipv4ImportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv4ImportRouteTargetGetArgs>());
            set => _ipv4ImportRouteTargets = value;
        }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv4StaticRouteGetArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv4StaticRouteGetArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelIpv4StaticRouteGetArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv6ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv6ExportRouteTargetGetArgs>? _ipv6ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv6ExportRouteTargetGetArgs> Ipv6ExportRouteTargets
        {
            get => _ipv6ExportRouteTargets ?? (_ipv6ExportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv6ExportRouteTargetGetArgs>());
            set => _ipv6ExportRouteTargets = value;
        }

        [Input("ipv6ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv6ImportRouteTargetGetArgs>? _ipv6ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv6ImportRouteTargetGetArgs> Ipv6ImportRouteTargets
        {
            get => _ipv6ImportRouteTargets ?? (_ipv6ImportRouteTargets = new InputList<Inputs.ServiceLanVpnProfileParcelIpv6ImportRouteTargetGetArgs>());
            set => _ipv6ImportRouteTargets = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelIpv6StaticRouteGetArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelIpv6StaticRouteGetArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelIpv6StaticRouteGetArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat64V4Pools")]
        private InputList<Inputs.ServiceLanVpnProfileParcelNat64V4PoolGetArgs>? _nat64V4Pools;

        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelNat64V4PoolGetArgs> Nat64V4Pools
        {
            get => _nat64V4Pools ?? (_nat64V4Pools = new InputList<Inputs.ServiceLanVpnProfileParcelNat64V4PoolGetArgs>());
            set => _nat64V4Pools = value;
        }

        [Input("natPools")]
        private InputList<Inputs.ServiceLanVpnProfileParcelNatPoolGetArgs>? _natPools;

        /// <summary>
        /// NAT Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelNatPoolGetArgs> NatPools
        {
            get => _natPools ?? (_natPools = new InputList<Inputs.ServiceLanVpnProfileParcelNatPoolGetArgs>());
            set => _natPools = value;
        }

        [Input("natPortForwards")]
        private InputList<Inputs.ServiceLanVpnProfileParcelNatPortForwardGetArgs>? _natPortForwards;

        /// <summary>
        /// NAT Port Forward
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelNatPortForwardGetArgs> NatPortForwards
        {
            get => _natPortForwards ?? (_natPortForwards = new InputList<Inputs.ServiceLanVpnProfileParcelNatPortForwardGetArgs>());
            set => _natPortForwards = value;
        }

        /// <summary>
        /// OMP Admin Distance IPv4 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv4")]
        public Input<int>? OmpAdminDistanceIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv4Variable")]
        public Input<string>? OmpAdminDistanceIpv4Variable { get; set; }

        /// <summary>
        /// OMP Admin Distance IPv6 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv6")]
        public Input<int>? OmpAdminDistanceIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv6Variable")]
        public Input<string>? OmpAdminDistanceIpv6Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Input("primaryDnsAddressIpv4")]
        public Input<string>? PrimaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv4Variable")]
        public Input<string>? PrimaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Input("primaryDnsAddressIpv6")]
        public Input<string>? PrimaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv6Variable")]
        public Input<string>? PrimaryDnsAddressIpv6Variable { get; set; }

        [Input("routeLeakFromGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpnGetArgs>? _routeLeakFromGlobalVpns;

        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpnGetArgs> RouteLeakFromGlobalVpns
        {
            get => _routeLeakFromGlobalVpns ?? (_routeLeakFromGlobalVpns = new InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromGlobalVpnGetArgs>());
            set => _routeLeakFromGlobalVpns = value;
        }

        [Input("routeLeakFromOtherServices")]
        private InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromOtherServiceGetArgs>? _routeLeakFromOtherServices;

        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromOtherServiceGetArgs> RouteLeakFromOtherServices
        {
            get => _routeLeakFromOtherServices ?? (_routeLeakFromOtherServices = new InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakFromOtherServiceGetArgs>());
            set => _routeLeakFromOtherServices = value;
        }

        [Input("routeLeakToGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpnGetArgs>? _routeLeakToGlobalVpns;

        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpnGetArgs> RouteLeakToGlobalVpns
        {
            get => _routeLeakToGlobalVpns ?? (_routeLeakToGlobalVpns = new InputList<Inputs.ServiceLanVpnProfileParcelRouteLeakToGlobalVpnGetArgs>());
            set => _routeLeakToGlobalVpns = value;
        }

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Input("secondaryDnsAddressIpv4")]
        public Input<string>? SecondaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv4Variable")]
        public Input<string>? SecondaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Input("secondaryDnsAddressIpv6")]
        public Input<string>? SecondaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv6Variable")]
        public Input<string>? SecondaryDnsAddressIpv6Variable { get; set; }

        [Input("serviceRoutes")]
        private InputList<Inputs.ServiceLanVpnProfileParcelServiceRouteGetArgs>? _serviceRoutes;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelServiceRouteGetArgs> ServiceRoutes
        {
            get => _serviceRoutes ?? (_serviceRoutes = new InputList<Inputs.ServiceLanVpnProfileParcelServiceRouteGetArgs>());
            set => _serviceRoutes = value;
        }

        [Input("services")]
        private InputList<Inputs.ServiceLanVpnProfileParcelServiceGetArgs>? _services;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ServiceLanVpnProfileParcelServiceGetArgs>());
            set => _services = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.ServiceLanVpnProfileParcelStaticNatGetArgs>? _staticNats;

        /// <summary>
        /// Static NAT Rules
        /// </summary>
        public InputList<Inputs.ServiceLanVpnProfileParcelStaticNatGetArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.ServiceLanVpnProfileParcelStaticNatGetArgs>());
            set => _staticNats = value;
        }

        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// VPN - Range: `1`-`65527` - Default value: `0`
        /// </summary>
        [Input("vpn")]
        public Input<int>? Vpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnVariable")]
        public Input<string>? VpnVariable { get; set; }

        public ServiceLanVpnProfileParcelState()
        {
        }
        public static new ServiceLanVpnProfileParcelState Empty => new ServiceLanVpnProfileParcelState();
    }
}
