// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco Wireless LAN feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate")]
    public partial class CiscoWirelessLanFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set mobile express default gateway
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Output("controllerDefaultGateway")]
        public Output<string?> ControllerDefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("controllerDefaultGatewayVariable")]
        public Output<string?> ControllerDefaultGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// Set mobile express controller address
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Output("controllerIpAddress")]
        public Output<string?> ControllerIpAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("controllerIpAddressVariable")]
        public Output<string?> ControllerIpAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Set mobile express controller subnet mask
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Output("controllerSubnetMask")]
        public Output<string?> ControllerSubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("controllerSubnetMaskVariable")]
        public Output<string?> ControllerSubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// Select country
        ///   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
        /// </summary>
        [Output("country")]
        public Output<string?> Country { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("countryVariable")]
        public Output<string?> CountryVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set management password
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("passwordVariable")]
        public Output<string?> PasswordVariable { get; private set; } = null!;

        /// <summary>
        /// 2.4GHz Shutdown
        ///   - Default value: `false`
        /// </summary>
        [Output("shutdown24ghz")]
        public Output<bool?> Shutdown24ghz { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdown24ghzVariable")]
        public Output<string?> Shutdown24ghzVariable { get; private set; } = null!;

        /// <summary>
        /// 5GHz Shutdown
        ///   - Default value: `false`
        /// </summary>
        [Output("shutdown5ghz")]
        public Output<bool?> Shutdown5ghz { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdown5ghzVariable")]
        public Output<string?> Shutdown5ghzVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Wi-Fi SSID
        /// </summary>
        [Output("ssids")]
        public Output<ImmutableArray<Outputs.CiscoWirelessLanFeatureTemplateSsid>> Ssids { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Set management username
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("usernameVariable")]
        public Output<string?> UsernameVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoWirelessLanFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoWirelessLanFeatureTemplate(string name, CiscoWirelessLanFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate", name, args ?? new CiscoWirelessLanFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoWirelessLanFeatureTemplate(string name, Input<string> id, CiscoWirelessLanFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoWirelessLanFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoWirelessLanFeatureTemplate Get(string name, Input<string> id, CiscoWirelessLanFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoWirelessLanFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoWirelessLanFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set mobile express default gateway
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Input("controllerDefaultGateway")]
        public Input<string>? ControllerDefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerDefaultGatewayVariable")]
        public Input<string>? ControllerDefaultGatewayVariable { get; set; }

        /// <summary>
        /// Set mobile express controller address
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Input("controllerIpAddress")]
        public Input<string>? ControllerIpAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerIpAddressVariable")]
        public Input<string>? ControllerIpAddressVariable { get; set; }

        /// <summary>
        /// Set mobile express controller subnet mask
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Input("controllerSubnetMask")]
        public Input<string>? ControllerSubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerSubnetMaskVariable")]
        public Input<string>? ControllerSubnetMaskVariable { get; set; }

        /// <summary>
        /// Select country
        ///   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("countryVariable")]
        public Input<string>? CountryVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set management password
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("passwordVariable")]
        public Input<string>? PasswordVariable { get; set; }

        /// <summary>
        /// 2.4GHz Shutdown
        ///   - Default value: `false`
        /// </summary>
        [Input("shutdown24ghz")]
        public Input<bool>? Shutdown24ghz { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdown24ghzVariable")]
        public Input<string>? Shutdown24ghzVariable { get; set; }

        /// <summary>
        /// 5GHz Shutdown
        ///   - Default value: `false`
        /// </summary>
        [Input("shutdown5ghz")]
        public Input<bool>? Shutdown5ghz { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdown5ghzVariable")]
        public Input<string>? Shutdown5ghzVariable { get; set; }

        [Input("ssids")]
        private InputList<Inputs.CiscoWirelessLanFeatureTemplateSsidArgs>? _ssids;

        /// <summary>
        /// Configure Wi-Fi SSID
        /// </summary>
        public InputList<Inputs.CiscoWirelessLanFeatureTemplateSsidArgs> Ssids
        {
            get => _ssids ?? (_ssids = new InputList<Inputs.CiscoWirelessLanFeatureTemplateSsidArgs>());
            set => _ssids = value;
        }

        /// <summary>
        /// Set management username
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("usernameVariable")]
        public Input<string>? UsernameVariable { get; set; }

        public CiscoWirelessLanFeatureTemplateArgs()
        {
        }
        public static new CiscoWirelessLanFeatureTemplateArgs Empty => new CiscoWirelessLanFeatureTemplateArgs();
    }

    public sealed class CiscoWirelessLanFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set mobile express default gateway
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Input("controllerDefaultGateway")]
        public Input<string>? ControllerDefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerDefaultGatewayVariable")]
        public Input<string>? ControllerDefaultGatewayVariable { get; set; }

        /// <summary>
        /// Set mobile express controller address
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Input("controllerIpAddress")]
        public Input<string>? ControllerIpAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerIpAddressVariable")]
        public Input<string>? ControllerIpAddressVariable { get; set; }

        /// <summary>
        /// Set mobile express controller subnet mask
        ///   - Default value: `0.0.0.0`
        /// </summary>
        [Input("controllerSubnetMask")]
        public Input<string>? ControllerSubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerSubnetMaskVariable")]
        public Input<string>? ControllerSubnetMaskVariable { get; set; }

        /// <summary>
        /// Select country
        ///   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("countryVariable")]
        public Input<string>? CountryVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set management password
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("passwordVariable")]
        public Input<string>? PasswordVariable { get; set; }

        /// <summary>
        /// 2.4GHz Shutdown
        ///   - Default value: `false`
        /// </summary>
        [Input("shutdown24ghz")]
        public Input<bool>? Shutdown24ghz { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdown24ghzVariable")]
        public Input<string>? Shutdown24ghzVariable { get; set; }

        /// <summary>
        /// 5GHz Shutdown
        ///   - Default value: `false`
        /// </summary>
        [Input("shutdown5ghz")]
        public Input<bool>? Shutdown5ghz { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdown5ghzVariable")]
        public Input<string>? Shutdown5ghzVariable { get; set; }

        [Input("ssids")]
        private InputList<Inputs.CiscoWirelessLanFeatureTemplateSsidGetArgs>? _ssids;

        /// <summary>
        /// Configure Wi-Fi SSID
        /// </summary>
        public InputList<Inputs.CiscoWirelessLanFeatureTemplateSsidGetArgs> Ssids
        {
            get => _ssids ?? (_ssids = new InputList<Inputs.CiscoWirelessLanFeatureTemplateSsidGetArgs>());
            set => _ssids = value;
        }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Set management username
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("usernameVariable")]
        public Input<string>? UsernameVariable { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoWirelessLanFeatureTemplateState()
        {
        }
        public static new CiscoWirelessLanFeatureTemplateState Empty => new CiscoWirelessLanFeatureTemplateState();
    }
}
