// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportManagementVpnInterfaceEthernetFeature
    {
        /// <summary>
        /// This data source can read the Transport Management VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportManagementVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportManagementVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportManagementVpnInterfaceEthernetFeatureResult> InvokeAsync(GetTransportManagementVpnInterfaceEthernetFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportManagementVpnInterfaceEthernetFeatureResult>("sdwan:index/getTransportManagementVpnInterfaceEthernetFeature:getTransportManagementVpnInterfaceEthernetFeature", args ?? new GetTransportManagementVpnInterfaceEthernetFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport Management VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportManagementVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportManagementVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportManagementVpnInterfaceEthernetFeatureResult> Invoke(GetTransportManagementVpnInterfaceEthernetFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportManagementVpnInterfaceEthernetFeatureResult>("sdwan:index/getTransportManagementVpnInterfaceEthernetFeature:getTransportManagementVpnInterfaceEthernetFeature", args ?? new GetTransportManagementVpnInterfaceEthernetFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportManagementVpnInterfaceEthernetFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Transport Management VPN Feature ID
        /// </summary>
        [Input("transportManagementVpnFeatureId", required: true)]
        public string TransportManagementVpnFeatureId { get; set; } = null!;

        public GetTransportManagementVpnInterfaceEthernetFeatureArgs()
        {
        }
        public static new GetTransportManagementVpnInterfaceEthernetFeatureArgs Empty => new GetTransportManagementVpnInterfaceEthernetFeatureArgs();
    }

    public sealed class GetTransportManagementVpnInterfaceEthernetFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Transport Management VPN Feature ID
        /// </summary>
        [Input("transportManagementVpnFeatureId", required: true)]
        public Input<string> TransportManagementVpnFeatureId { get; set; } = null!;

        public GetTransportManagementVpnInterfaceEthernetFeatureInvokeArgs()
        {
        }
        public static new GetTransportManagementVpnInterfaceEthernetFeatureInvokeArgs Empty => new GetTransportManagementVpnInterfaceEthernetFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportManagementVpnInterfaceEthernetFeatureResult
    {
        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportManagementVpnInterfaceEthernetFeatureArpEntryResult> ArpEntries;
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, \n\n seconds
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpTimeoutVariable;
        /// <summary>
        /// Link autonegotiation
        /// </summary>
        public readonly bool Autonegotiate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutonegotiateVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Duplex mode
        /// </summary>
        public readonly string Duplex;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DuplexVariable;
        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        public readonly bool EnableDhcpv6;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        /// </summary>
        public readonly bool IcmpRedirectDisable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IcmpRedirectDisableVariable;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// Interface MTU
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// IP Address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        /// <summary>
        /// Interface auto detect bandwidth
        /// </summary>
        public readonly bool Ipv4AutoDetectBandwidth;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AutoDetectBandwidthVariable;
        /// <summary>
        /// IPv4 Configuration Type
        /// </summary>
        public readonly string Ipv4ConfigurationType;
        /// <summary>
        /// DHCP Distance
        /// </summary>
        public readonly int Ipv4DhcpDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpDistanceVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpHelperVariable;
        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public readonly ImmutableArray<string> Ipv4DhcpHelpers;
        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        public readonly string Ipv4IperfServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4IperfServerVariable;
        /// <summary>
        /// Secondary IpV4 Addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult> Ipv4SecondaryAddresses;
        /// <summary>
        /// Subnet Mask
        /// </summary>
        public readonly string Ipv4SubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4SubnetMaskVariable;
        /// <summary>
        /// IPv6 Address Secondary
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// IPv6 Configuration Type
        /// </summary>
        public readonly string Ipv6ConfigurationType;
        /// <summary>
        /// Interval for interface load calculation
        /// </summary>
        public readonly int LoadInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LoadIntervalVariable;
        /// <summary>
        /// MAC Address
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MacAddressVariable;
        /// <summary>
        /// Media type
        /// </summary>
        public readonly string MediaType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MediaTypeVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Set interface speed
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpeedVariable;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// Transport Management VPN Feature ID
        /// </summary>
        public readonly string TransportManagementVpnFeatureId;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetTransportManagementVpnInterfaceEthernetFeatureResult(
            ImmutableArray<Outputs.GetTransportManagementVpnInterfaceEthernetFeatureArpEntryResult> arpEntries,

            int arpTimeout,

            string arpTimeoutVariable,

            bool autonegotiate,

            string autonegotiateVariable,

            string description,

            string duplex,

            string duplexVariable,

            bool enableDhcpv6,

            string featureProfileId,

            bool icmpRedirectDisable,

            string icmpRedirectDisableVariable,

            string id,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            int interfaceMtu,

            string interfaceMtuVariable,

            string interfaceName,

            string interfaceNameVariable,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            string ipv4Address,

            string ipv4AddressVariable,

            bool ipv4AutoDetectBandwidth,

            string ipv4AutoDetectBandwidthVariable,

            string ipv4ConfigurationType,

            int ipv4DhcpDistance,

            string ipv4DhcpDistanceVariable,

            string ipv4DhcpHelperVariable,

            ImmutableArray<string> ipv4DhcpHelpers,

            string ipv4IperfServer,

            string ipv4IperfServerVariable,

            ImmutableArray<Outputs.GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult> ipv4SecondaryAddresses,

            string ipv4SubnetMask,

            string ipv4SubnetMaskVariable,

            string ipv6Address,

            string ipv6AddressVariable,

            string ipv6ConfigurationType,

            int loadInterval,

            string loadIntervalVariable,

            string macAddress,

            string macAddressVariable,

            string mediaType,

            string mediaTypeVariable,

            string name,

            bool shutdown,

            string shutdownVariable,

            string speed,

            string speedVariable,

            int tcpMss,

            string tcpMssVariable,

            string transportManagementVpnFeatureId,

            int version)
        {
            ArpEntries = arpEntries;
            ArpTimeout = arpTimeout;
            ArpTimeoutVariable = arpTimeoutVariable;
            Autonegotiate = autonegotiate;
            AutonegotiateVariable = autonegotiateVariable;
            Description = description;
            Duplex = duplex;
            DuplexVariable = duplexVariable;
            EnableDhcpv6 = enableDhcpv6;
            FeatureProfileId = featureProfileId;
            IcmpRedirectDisable = icmpRedirectDisable;
            IcmpRedirectDisableVariable = icmpRedirectDisableVariable;
            Id = id;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv4AutoDetectBandwidth = ipv4AutoDetectBandwidth;
            Ipv4AutoDetectBandwidthVariable = ipv4AutoDetectBandwidthVariable;
            Ipv4ConfigurationType = ipv4ConfigurationType;
            Ipv4DhcpDistance = ipv4DhcpDistance;
            Ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            Ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            Ipv4DhcpHelpers = ipv4DhcpHelpers;
            Ipv4IperfServer = ipv4IperfServer;
            Ipv4IperfServerVariable = ipv4IperfServerVariable;
            Ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            Ipv4SubnetMask = ipv4SubnetMask;
            Ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Ipv6ConfigurationType = ipv6ConfigurationType;
            LoadInterval = loadInterval;
            LoadIntervalVariable = loadIntervalVariable;
            MacAddress = macAddress;
            MacAddressVariable = macAddressVariable;
            MediaType = mediaType;
            MediaTypeVariable = mediaTypeVariable;
            Name = name;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            Speed = speed;
            SpeedVariable = speedVariable;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            TransportManagementVpnFeatureId = transportManagementVpnFeatureId;
            Version = version;
        }
    }
}
