// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service DHCP Server Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "service_dhcp_server_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature")]
    public partial class ServiceDhcpServerFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        [Output("defaultGateway")]
        public Output<string?> DefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("defaultGatewayVariable")]
        public Output<string?> DefaultGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dnsServersVariable")]
        public Output<string?> DnsServersVariable { get; private set; } = null!;

        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("domainNameVariable")]
        public Output<string?> DomainNameVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("excludeVariable")]
        public Output<string?> ExcludeVariable { get; private set; } = null!;

        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        [Output("excludes")]
        public Output<ImmutableArray<string>> Excludes { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Set MTU on interface to DHCP client - Range: `68`-`65535`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
        /// </summary>
        [Output("leaseTime")]
        public Output<int?> LeaseTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("leaseTimeVariable")]
        public Output<string?> LeaseTimeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network Address
        /// </summary>
        [Output("networkAddress")]
        public Output<string?> NetworkAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("networkAddressVariable")]
        public Output<string?> NetworkAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Options Code
        /// </summary>
        [Output("optionCodes")]
        public Output<ImmutableArray<Outputs.ServiceDhcpServerFeatureOptionCode>> OptionCodes { get; private set; } = null!;

        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        [Output("staticLeases")]
        public Output<ImmutableArray<Outputs.ServiceDhcpServerFeatureStaticLease>> StaticLeases { get; private set; } = null!;

        /// <summary>
        /// Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("subnetMask")]
        public Output<string?> SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("subnetMaskVariable")]
        public Output<string?> SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        [Output("tftpServers")]
        public Output<ImmutableArray<string>> TftpServers { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tftpServersVariable")]
        public Output<string?> TftpServersVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceDhcpServerFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceDhcpServerFeature(string name, ServiceDhcpServerFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature", name, args ?? new ServiceDhcpServerFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceDhcpServerFeature(string name, Input<string> id, ServiceDhcpServerFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceDhcpServerFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceDhcpServerFeature Get(string name, Input<string> id, ServiceDhcpServerFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceDhcpServerFeature(name, id, state, options);
        }
    }

    public sealed class ServiceDhcpServerFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("defaultGatewayVariable")]
        public Input<string>? DefaultGatewayVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dnsServersVariable")]
        public Input<string>? DnsServersVariable { get; set; }

        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("domainNameVariable")]
        public Input<string>? DomainNameVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("excludeVariable")]
        public Input<string>? ExcludeVariable { get; set; }

        [Input("excludes")]
        private InputList<string>? _excludes;

        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        public InputList<string> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<string>());
            set => _excludes = value;
        }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Set MTU on interface to DHCP client - Range: `68`-`65535`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("leaseTimeVariable")]
        public Input<string>? LeaseTimeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address
        /// </summary>
        [Input("networkAddress")]
        public Input<string>? NetworkAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("networkAddressVariable")]
        public Input<string>? NetworkAddressVariable { get; set; }

        [Input("optionCodes")]
        private InputList<Inputs.ServiceDhcpServerFeatureOptionCodeArgs>? _optionCodes;

        /// <summary>
        /// Configure Options Code
        /// </summary>
        public InputList<Inputs.ServiceDhcpServerFeatureOptionCodeArgs> OptionCodes
        {
            get => _optionCodes ?? (_optionCodes = new InputList<Inputs.ServiceDhcpServerFeatureOptionCodeArgs>());
            set => _optionCodes = value;
        }

        [Input("staticLeases")]
        private InputList<Inputs.ServiceDhcpServerFeatureStaticLeaseArgs>? _staticLeases;

        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        public InputList<Inputs.ServiceDhcpServerFeatureStaticLeaseArgs> StaticLeases
        {
            get => _staticLeases ?? (_staticLeases = new InputList<Inputs.ServiceDhcpServerFeatureStaticLeaseArgs>());
            set => _staticLeases = value;
        }

        /// <summary>
        /// Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("subnetMask")]
        public Input<string>? SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("subnetMaskVariable")]
        public Input<string>? SubnetMaskVariable { get; set; }

        [Input("tftpServers")]
        private InputList<string>? _tftpServers;

        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        public InputList<string> TftpServers
        {
            get => _tftpServers ?? (_tftpServers = new InputList<string>());
            set => _tftpServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tftpServersVariable")]
        public Input<string>? TftpServersVariable { get; set; }

        public ServiceDhcpServerFeatureArgs()
        {
        }
        public static new ServiceDhcpServerFeatureArgs Empty => new ServiceDhcpServerFeatureArgs();
    }

    public sealed class ServiceDhcpServerFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("defaultGatewayVariable")]
        public Input<string>? DefaultGatewayVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dnsServersVariable")]
        public Input<string>? DnsServersVariable { get; set; }

        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("domainNameVariable")]
        public Input<string>? DomainNameVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("excludeVariable")]
        public Input<string>? ExcludeVariable { get; set; }

        [Input("excludes")]
        private InputList<string>? _excludes;

        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        public InputList<string> Excludes
        {
            get => _excludes ?? (_excludes = new InputList<string>());
            set => _excludes = value;
        }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Set MTU on interface to DHCP client - Range: `68`-`65535`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("leaseTimeVariable")]
        public Input<string>? LeaseTimeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address
        /// </summary>
        [Input("networkAddress")]
        public Input<string>? NetworkAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("networkAddressVariable")]
        public Input<string>? NetworkAddressVariable { get; set; }

        [Input("optionCodes")]
        private InputList<Inputs.ServiceDhcpServerFeatureOptionCodeGetArgs>? _optionCodes;

        /// <summary>
        /// Configure Options Code
        /// </summary>
        public InputList<Inputs.ServiceDhcpServerFeatureOptionCodeGetArgs> OptionCodes
        {
            get => _optionCodes ?? (_optionCodes = new InputList<Inputs.ServiceDhcpServerFeatureOptionCodeGetArgs>());
            set => _optionCodes = value;
        }

        [Input("staticLeases")]
        private InputList<Inputs.ServiceDhcpServerFeatureStaticLeaseGetArgs>? _staticLeases;

        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        public InputList<Inputs.ServiceDhcpServerFeatureStaticLeaseGetArgs> StaticLeases
        {
            get => _staticLeases ?? (_staticLeases = new InputList<Inputs.ServiceDhcpServerFeatureStaticLeaseGetArgs>());
            set => _staticLeases = value;
        }

        /// <summary>
        /// Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("subnetMask")]
        public Input<string>? SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("subnetMaskVariable")]
        public Input<string>? SubnetMaskVariable { get; set; }

        [Input("tftpServers")]
        private InputList<string>? _tftpServers;

        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        public InputList<string> TftpServers
        {
            get => _tftpServers ?? (_tftpServers = new InputList<string>());
            set => _tftpServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tftpServersVariable")]
        public Input<string>? TftpServersVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ServiceDhcpServerFeatureState()
        {
        }
        public static new ServiceDhcpServerFeatureState Empty => new ServiceDhcpServerFeatureState();
    }
}
