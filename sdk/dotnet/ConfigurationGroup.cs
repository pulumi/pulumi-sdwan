// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Configuration Group .
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.ConfigurationGroup("example", new()
    ///     {
    ///         Name = "CG_1",
    ///         Description = "My config group 1",
    ///         Solution = "sdwan",
    ///         FeatureProfileIds = new[]
    ///         {
    ///             "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         },
    ///         Devices = new[]
    ///         {
    ///             new Sdwan.Inputs.ConfigurationGroupDeviceArgs
    ///             {
    ///                 Id = "C8K-40C0CCFD-9EA8-2B2E-E73B-32C5924EC79B",
    ///                 Variables = new[]
    ///                 {
    ///                     new Sdwan.Inputs.ConfigurationGroupDeviceVariableArgs
    ///                     {
    ///                         Name = "host_name",
    ///                         Value = "edge1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/configurationGroup:ConfigurationGroup example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/configurationGroup:ConfigurationGroup")]
    public partial class ConfigurationGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Description
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of devices
        /// </summary>
        [Output("devices")]
        public Output<ImmutableArray<Outputs.ConfigurationGroupDevice>> Devices { get; private set; } = null!;

        /// <summary>
        /// List of feature profile IDs
        /// </summary>
        [Output("featureProfileIds")]
        public Output<ImmutableArray<string>> FeatureProfileIds { get; private set; } = null!;

        /// <summary>
        /// List of all associated feature versions
        /// </summary>
        [Output("featureVersions")]
        public Output<ImmutableArray<string>> FeatureVersions { get; private set; } = null!;

        /// <summary>
        /// The name of the configuration group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
        /// </summary>
        [Output("solution")]
        public Output<string> Solution { get; private set; } = null!;

        /// <summary>
        /// List of topology device types
        /// </summary>
        [Output("topologyDevices")]
        public Output<ImmutableArray<Outputs.ConfigurationGroupTopologyDevice>> TopologyDevices { get; private set; } = null!;

        /// <summary>
        /// Number of devices per site - Range: `1`-`20`
        /// </summary>
        [Output("topologySiteDevices")]
        public Output<int?> TopologySiteDevices { get; private set; } = null!;


        /// <summary>
        /// Create a ConfigurationGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ConfigurationGroup(string name, ConfigurationGroupArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/configurationGroup:ConfigurationGroup", name, args ?? new ConfigurationGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ConfigurationGroup(string name, Input<string> id, ConfigurationGroupState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/configurationGroup:ConfigurationGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ConfigurationGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ConfigurationGroup Get(string name, Input<string> id, ConfigurationGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ConfigurationGroup(name, id, state, options);
        }
    }

    public sealed class ConfigurationGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("devices")]
        private InputList<Inputs.ConfigurationGroupDeviceArgs>? _devices;

        /// <summary>
        /// List of devices
        /// </summary>
        public InputList<Inputs.ConfigurationGroupDeviceArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.ConfigurationGroupDeviceArgs>());
            set => _devices = value;
        }

        [Input("featureProfileIds")]
        private InputList<string>? _featureProfileIds;

        /// <summary>
        /// List of feature profile IDs
        /// </summary>
        public InputList<string> FeatureProfileIds
        {
            get => _featureProfileIds ?? (_featureProfileIds = new InputList<string>());
            set => _featureProfileIds = value;
        }

        [Input("featureVersions")]
        private InputList<string>? _featureVersions;

        /// <summary>
        /// List of all associated feature versions
        /// </summary>
        public InputList<string> FeatureVersions
        {
            get => _featureVersions ?? (_featureVersions = new InputList<string>());
            set => _featureVersions = value;
        }

        /// <summary>
        /// The name of the configuration group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
        /// </summary>
        [Input("solution", required: true)]
        public Input<string> Solution { get; set; } = null!;

        [Input("topologyDevices")]
        private InputList<Inputs.ConfigurationGroupTopologyDeviceArgs>? _topologyDevices;

        /// <summary>
        /// List of topology device types
        /// </summary>
        public InputList<Inputs.ConfigurationGroupTopologyDeviceArgs> TopologyDevices
        {
            get => _topologyDevices ?? (_topologyDevices = new InputList<Inputs.ConfigurationGroupTopologyDeviceArgs>());
            set => _topologyDevices = value;
        }

        /// <summary>
        /// Number of devices per site - Range: `1`-`20`
        /// </summary>
        [Input("topologySiteDevices")]
        public Input<int>? TopologySiteDevices { get; set; }

        public ConfigurationGroupArgs()
        {
        }
        public static new ConfigurationGroupArgs Empty => new ConfigurationGroupArgs();
    }

    public sealed class ConfigurationGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("devices")]
        private InputList<Inputs.ConfigurationGroupDeviceGetArgs>? _devices;

        /// <summary>
        /// List of devices
        /// </summary>
        public InputList<Inputs.ConfigurationGroupDeviceGetArgs> Devices
        {
            get => _devices ?? (_devices = new InputList<Inputs.ConfigurationGroupDeviceGetArgs>());
            set => _devices = value;
        }

        [Input("featureProfileIds")]
        private InputList<string>? _featureProfileIds;

        /// <summary>
        /// List of feature profile IDs
        /// </summary>
        public InputList<string> FeatureProfileIds
        {
            get => _featureProfileIds ?? (_featureProfileIds = new InputList<string>());
            set => _featureProfileIds = value;
        }

        [Input("featureVersions")]
        private InputList<string>? _featureVersions;

        /// <summary>
        /// List of all associated feature versions
        /// </summary>
        public InputList<string> FeatureVersions
        {
            get => _featureVersions ?? (_featureVersions = new InputList<string>());
            set => _featureVersions = value;
        }

        /// <summary>
        /// The name of the configuration group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
        /// </summary>
        [Input("solution")]
        public Input<string>? Solution { get; set; }

        [Input("topologyDevices")]
        private InputList<Inputs.ConfigurationGroupTopologyDeviceGetArgs>? _topologyDevices;

        /// <summary>
        /// List of topology device types
        /// </summary>
        public InputList<Inputs.ConfigurationGroupTopologyDeviceGetArgs> TopologyDevices
        {
            get => _topologyDevices ?? (_topologyDevices = new InputList<Inputs.ConfigurationGroupTopologyDeviceGetArgs>());
            set => _topologyDevices = value;
        }

        /// <summary>
        /// Number of devices per site - Range: `1`-`20`
        /// </summary>
        [Input("topologySiteDevices")]
        public Input<int>? TopologySiteDevices { get; set; }

        public ConfigurationGroupState()
        {
        }
        public static new ConfigurationGroupState Empty => new ConfigurationGroupState();
    }
}
