// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Transport WAN VPN Interface T1 E1 Serial Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.TransportWanVpnInterfaceT1E1SerialFeature("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
    ///         Shutdown = true,
    ///         InterfaceName = "Serial0",
    ///         Ipv4Address = "1.2.3.4",
    ///         Ipv4SubnetMask = "0.0.0.0",
    ///         Ipv6Address = "2001:0:0:1::/64",
    ///         Bandwidth = 123456,
    ///         BandwidthDownstream = 123456,
    ///         ClockRate = "1200",
    ///         Encapsulation = "ppp",
    ///         TunnelInterface = true,
    ///         PerTunnelQos = true,
    ///         PerTunnelQosAggregator = false,
    ///         TunnelQosMode = "hub",
    ///         TunnelInterfaceColor = "mpls",
    ///         TunnelInterfaceRestrict = true,
    ///         TunnelInterfaceGroups = 42949672,
    ///         TunnelInterfaceBorder = false,
    ///         TunnelInterfaceMaxControlConnections = 62,
    ///         TunnelInterfaceVbondAsStunServer = false,
    ///         TunnelInterfaceExcludeControllerGroupLists = new[]
    ///         {
    ///             2,
    ///         },
    ///         TunnelInterfaceVmanageConnectionPreference = 8,
    ///         TunnelInterfacePortHop = true,
    ///         TunnelInterfaceLowBandwidthLink = false,
    ///         TunnelInterfaceTunnelTcpMss = 1460,
    ///         TunnelInterfaceClearDontFragment = false,
    ///         TunnelInterfaceClearNetworkBroadcast = false,
    ///         TunnelInterfaceCarrier = "default",
    ///         TunnelInterfaceBindLoopbackTunnel = "example",
    ///         TunnelInterfaceLastResortCircuit = false,
    ///         TunnelInterfaceNatRefreshInterval = 5,
    ///         TunnelInterfaceHelloInterval = 1000,
    ///         TunnelInterfaceHelloTolerance = 12,
    ///         TunnelInterfaceAllowAll = false,
    ///         TunnelInterfaceAllowBgp = false,
    ///         TunnelInterfaceAllowDhcp = true,
    ///         TunnelInterfaceAllowDns = true,
    ///         TunnelInterfaceAllowIcmp = true,
    ///         TunnelInterfaceAllowNetconf = false,
    ///         TunnelInterfaceAllowNtp = false,
    ///         TunnelInterfaceAllowOspf = false,
    ///         TunnelInterfaceAllowSsh = false,
    ///         TunnelInterfaceAllowStun = false,
    ///         TunnelInterfaceAllowHttps = true,
    ///         TunnelInterfaceAllowSnmp = false,
    ///         TunnelInterfaceAllowBfd = false,
    ///         TunnelInterfaceEncapsulations = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs
    ///             {
    ///                 Encapsulation = "gre",
    ///                 Preference = 4294967,
    ///                 Weight = 250,
    ///             },
    ///         },
    ///         AclIpv4EgressFeatureId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         AclIpv6IngressFeatureId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         TcpMss = 1460,
    ///         Mtu = 1500,
    ///         IpMtu = 1500,
    ///         TlocExtension = "tloc",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "transport_wan_vpn_interface_t1_e1_serial_feature_id,feature_profile_id,transport_wan_vpn_feature_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature")]
    public partial class TransportWanVpnInterfaceT1E1SerialFeature : global::Pulumi.CustomResource
    {
        [Output("aclIpv4EgressFeatureId")]
        public Output<string?> AclIpv4EgressFeatureId { get; private set; } = null!;

        [Output("aclIpv4IngressFeatureId")]
        public Output<string?> AclIpv4IngressFeatureId { get; private set; } = null!;

        [Output("aclIpv6EgressFeatureId")]
        public Output<string?> AclIpv6EgressFeatureId { get; private set; } = null!;

        [Output("aclIpv6IngressFeatureId")]
        public Output<string?> AclIpv6IngressFeatureId { get; private set; } = null!;

        /// <summary>
        /// Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
        /// </summary>
        [Output("bandwidth")]
        public Output<int?> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthDownstream")]
        public Output<int?> BandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthDownstreamVariable")]
        public Output<string?> BandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthVariable")]
        public Output<string?> BandwidthVariable { get; private set; } = null!;

        /// <summary>
        /// Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
        /// `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
        /// `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
        /// </summary>
        [Output("clockRate")]
        public Output<string?> ClockRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("clockRateVariable")]
        public Output<string?> ClockRateVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
        /// </summary>
        [Output("encapsulation")]
        public Output<string?> Encapsulation { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("encapsulationVariable")]
        public Output<string?> EncapsulationVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
        /// </summary>
        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// Set ip mtu - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("ipv4SubnetMask")]
        public Output<string?> Ipv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4SubnetMaskVariable")]
        public Output<string?> Ipv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Output("ipv6Address")]
        public Output<string?> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6AddressVariable")]
        public Output<string?> Ipv6AddressVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU &lt;68...2000&gt;, in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mtuVariable")]
        public Output<string?> MtuVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Output("perTunnelQos")]
        public Output<bool?> PerTunnelQos { get; private set; } = null!;

        /// <summary>
        /// Per-tunnel QoS Aggregator - Default value: `false`
        /// </summary>
        [Output("perTunnelQosAggregator")]
        public Output<bool?> PerTunnelQosAggregator { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("perTunnelQosAggregatorVariable")]
        public Output<string?> PerTunnelQosAggregatorVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("perTunnelQosVariable")]
        public Output<string?> PerTunnelQosVariable { get; private set; } = null!;

        /// <summary>
        /// 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
        /// </summary>
        [Output("qosShapingRate")]
        public Output<int?> QosShapingRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosShapingRateVariable")]
        public Output<string?> QosShapingRateVariable { get; private set; } = null!;

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Output("tlocExtension")]
        public Output<string?> TlocExtension { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tlocExtensionVariable")]
        public Output<string?> TlocExtensionVariable { get; private set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Output("transportWanVpnFeatureId")]
        public Output<string> TransportWanVpnFeatureId { get; private set; } = null!;

        /// <summary>
        /// Tunnel Interface - Default value: `false`
        /// </summary>
        [Output("tunnelInterface")]
        public Output<bool?> TunnelInterface { get; private set; } = null!;

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowAll")]
        public Output<bool?> TunnelInterfaceAllowAll { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowAllVariable")]
        public Output<string?> TunnelInterfaceAllowAllVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny BFD - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowBfd")]
        public Output<bool?> TunnelInterfaceAllowBfd { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBfdVariable")]
        public Output<string?> TunnelInterfaceAllowBfdVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowBgp")]
        public Output<bool?> TunnelInterfaceAllowBgp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBgpVariable")]
        public Output<string?> TunnelInterfaceAllowBgpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDhcp")]
        public Output<bool?> TunnelInterfaceAllowDhcp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDhcpVariable")]
        public Output<string?> TunnelInterfaceAllowDhcpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDns")]
        public Output<bool?> TunnelInterfaceAllowDns { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDnsVariable")]
        public Output<string?> TunnelInterfaceAllowDnsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny Https - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowHttps")]
        public Output<bool?> TunnelInterfaceAllowHttps { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowHttpsVariable")]
        public Output<string?> TunnelInterfaceAllowHttpsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowIcmp")]
        public Output<bool?> TunnelInterfaceAllowIcmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowIcmpVariable")]
        public Output<string?> TunnelInterfaceAllowIcmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNetconf")]
        public Output<bool?> TunnelInterfaceAllowNetconf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNetconfVariable")]
        public Output<string?> TunnelInterfaceAllowNetconfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NTP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNtp")]
        public Output<bool?> TunnelInterfaceAllowNtp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNtpVariable")]
        public Output<string?> TunnelInterfaceAllowNtpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowOspf")]
        public Output<bool?> TunnelInterfaceAllowOspf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowOspfVariable")]
        public Output<string?> TunnelInterfaceAllowOspfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSnmp")]
        public Output<bool?> TunnelInterfaceAllowSnmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSnmpVariable")]
        public Output<string?> TunnelInterfaceAllowSnmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SSH - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSsh")]
        public Output<bool?> TunnelInterfaceAllowSsh { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSshVariable")]
        public Output<string?> TunnelInterfaceAllowSshVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowStun")]
        public Output<bool?> TunnelInterfaceAllowStun { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowStunVariable")]
        public Output<string?> TunnelInterfaceAllowStunVariable { get; private set; } = null!;

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnel")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnel { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnelVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceBorder")]
        public Output<bool?> TunnelInterfaceBorder { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBorderVariable")]
        public Output<string?> TunnelInterfaceBorderVariable { get; private set; } = null!;

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceCarrier")]
        public Output<string?> TunnelInterfaceCarrier { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceCarrierVariable")]
        public Output<string?> TunnelInterfaceCarrierVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceClearDontFragment")]
        public Output<bool?> TunnelInterfaceClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceClearDontFragmentVariable")]
        public Output<string?> TunnelInterfaceClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceClearNetworkBroadcast")]
        public Output<bool?> TunnelInterfaceClearNetworkBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceClearNetworkBroadcastVariable")]
        public Output<string?> TunnelInterfaceClearNetworkBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceColor")]
        public Output<string?> TunnelInterfaceColor { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceColorVariable")]
        public Output<string?> TunnelInterfaceColorVariable { get; private set; } = null!;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        [Output("tunnelInterfaceEncapsulations")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>> TunnelInterfaceEncapsulations { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Output<string?> TunnelInterfaceExcludeControllerGroupListVariable { get; private set; } = null!;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupLists")]
        public Output<ImmutableArray<int>> TunnelInterfaceExcludeControllerGroupLists { get; private set; } = null!;

        /// <summary>
        /// List of groups - Range: `1`-`4294967295`
        /// </summary>
        [Output("tunnelInterfaceGroups")]
        public Output<int?> TunnelInterfaceGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceGroupsVariable")]
        public Output<string?> TunnelInterfaceGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Output("tunnelInterfaceHelloInterval")]
        public Output<int?> TunnelInterfaceHelloInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloIntervalVariable")]
        public Output<string?> TunnelInterfaceHelloIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Output("tunnelInterfaceHelloTolerance")]
        public Output<int?> TunnelInterfaceHelloTolerance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloToleranceVariable")]
        public Output<string?> TunnelInterfaceHelloToleranceVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuit")]
        public Output<bool?> TunnelInterfaceLastResortCircuit { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuitVariable")]
        public Output<string?> TunnelInterfaceLastResortCircuitVariable { get; private set; } = null!;

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLink")]
        public Output<bool?> TunnelInterfaceLowBandwidthLink { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLinkVariable")]
        public Output<string?> TunnelInterfaceLowBandwidthLinkVariable { get; private set; } = null!;

        /// <summary>
        /// Set the maximum number of control connections for this TLOC - Range: `0`-`100`
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnections")]
        public Output<int?> TunnelInterfaceMaxControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceMaxControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceNatRefreshInterval")]
        public Output<int?> TunnelInterfaceNatRefreshInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNatRefreshIntervalVariable")]
        public Output<string?> TunnelInterfaceNatRefreshIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Output("tunnelInterfacePortHop")]
        public Output<bool?> TunnelInterfacePortHop { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfacePortHopVariable")]
        public Output<string?> TunnelInterfacePortHopVariable { get; private set; } = null!;

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceRestrict")]
        public Output<bool?> TunnelInterfaceRestrict { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceRestrictVariable")]
        public Output<string?> TunnelInterfaceRestrictVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMss")]
        public Output<int?> TunnelInterfaceTunnelTcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMssVariable")]
        public Output<string?> TunnelInterfaceTunnelTcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServer")]
        public Output<bool?> TunnelInterfaceVbondAsStunServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServerVariable")]
        public Output<string?> TunnelInterfaceVbondAsStunServerVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreference")]
        public Output<int?> TunnelInterfaceVmanageConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Output<string?> TunnelInterfaceVmanageConnectionPreferenceVariable { get; private set; } = null!;

        /// <summary>
        /// Set tunnel QoS mode - Choices: `spoke`, `hub`
        /// </summary>
        [Output("tunnelQosMode")]
        public Output<string?> TunnelQosMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelQosModeVariable")]
        public Output<string?> TunnelQosModeVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TransportWanVpnInterfaceT1E1SerialFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransportWanVpnInterfaceT1E1SerialFeature(string name, TransportWanVpnInterfaceT1E1SerialFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature", name, args ?? new TransportWanVpnInterfaceT1E1SerialFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransportWanVpnInterfaceT1E1SerialFeature(string name, Input<string> id, TransportWanVpnInterfaceT1E1SerialFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransportWanVpnInterfaceT1E1SerialFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransportWanVpnInterfaceT1E1SerialFeature Get(string name, Input<string> id, TransportWanVpnInterfaceT1E1SerialFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new TransportWanVpnInterfaceT1E1SerialFeature(name, id, state, options);
        }
    }

    public sealed class TransportWanVpnInterfaceT1E1SerialFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclIpv4EgressFeatureId")]
        public Input<string>? AclIpv4EgressFeatureId { get; set; }

        [Input("aclIpv4IngressFeatureId")]
        public Input<string>? AclIpv4IngressFeatureId { get; set; }

        [Input("aclIpv6EgressFeatureId")]
        public Input<string>? AclIpv6EgressFeatureId { get; set; }

        [Input("aclIpv6IngressFeatureId")]
        public Input<string>? AclIpv6IngressFeatureId { get; set; }

        /// <summary>
        /// Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthVariable")]
        public Input<string>? BandwidthVariable { get; set; }

        /// <summary>
        /// Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
        /// `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
        /// `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
        /// </summary>
        [Input("clockRate")]
        public Input<string>? ClockRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clockRateVariable")]
        public Input<string>? ClockRateVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
        /// </summary>
        [Input("encapsulation")]
        public Input<string>? Encapsulation { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("encapsulationVariable")]
        public Input<string>? EncapsulationVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Set ip mtu - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;68...2000&gt;, in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mtuVariable")]
        public Input<string>? MtuVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Per-tunnel QoS Aggregator - Default value: `false`
        /// </summary>
        [Input("perTunnelQosAggregator")]
        public Input<bool>? PerTunnelQosAggregator { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosAggregatorVariable")]
        public Input<string>? PerTunnelQosAggregatorVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        /// <summary>
        /// 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
        /// </summary>
        [Input("qosShapingRate")]
        public Input<int>? QosShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosShapingRateVariable")]
        public Input<string>? QosShapingRateVariable { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId", required: true)]
        public Input<string> TransportWanVpnFeatureId { get; set; } = null!;

        /// <summary>
        /// Tunnel Interface - Default value: `false`
        /// </summary>
        [Input("tunnelInterface")]
        public Input<bool>? TunnelInterface { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/Deny BFD - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBfd")]
        public Input<bool>? TunnelInterfaceAllowBfd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBfdVariable")]
        public Input<string>? TunnelInterfaceAllowBfdVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny Https - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceClearNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceClearNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// List of groups - Range: `1`-`4294967295`
        /// </summary>
        [Input("tunnelInterfaceGroups")]
        public Input<int>? TunnelInterfaceGroups { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Set the maximum number of control connections for this TLOC - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceRestrict")]
        public Input<bool>? TunnelInterfaceRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceRestrictVariable")]
        public Input<string>? TunnelInterfaceRestrictVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode - Choices: `spoke`, `hub`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        public TransportWanVpnInterfaceT1E1SerialFeatureArgs()
        {
        }
        public static new TransportWanVpnInterfaceT1E1SerialFeatureArgs Empty => new TransportWanVpnInterfaceT1E1SerialFeatureArgs();
    }

    public sealed class TransportWanVpnInterfaceT1E1SerialFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("aclIpv4EgressFeatureId")]
        public Input<string>? AclIpv4EgressFeatureId { get; set; }

        [Input("aclIpv4IngressFeatureId")]
        public Input<string>? AclIpv4IngressFeatureId { get; set; }

        [Input("aclIpv6EgressFeatureId")]
        public Input<string>? AclIpv6EgressFeatureId { get; set; }

        [Input("aclIpv6IngressFeatureId")]
        public Input<string>? AclIpv6IngressFeatureId { get; set; }

        /// <summary>
        /// Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthVariable")]
        public Input<string>? BandwidthVariable { get; set; }

        /// <summary>
        /// Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
        /// `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
        /// `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
        /// </summary>
        [Input("clockRate")]
        public Input<string>? ClockRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clockRateVariable")]
        public Input<string>? ClockRateVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
        /// </summary>
        [Input("encapsulation")]
        public Input<string>? Encapsulation { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("encapsulationVariable")]
        public Input<string>? EncapsulationVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Set ip mtu - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
        /// `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
        /// `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
        /// `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
        /// `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;68...2000&gt;, in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mtuVariable")]
        public Input<string>? MtuVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Per-tunnel QoS Aggregator - Default value: `false`
        /// </summary>
        [Input("perTunnelQosAggregator")]
        public Input<bool>? PerTunnelQosAggregator { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosAggregatorVariable")]
        public Input<string>? PerTunnelQosAggregatorVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        /// <summary>
        /// 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
        /// </summary>
        [Input("qosShapingRate")]
        public Input<int>? QosShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosShapingRateVariable")]
        public Input<string>? QosShapingRateVariable { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId")]
        public Input<string>? TransportWanVpnFeatureId { get; set; }

        /// <summary>
        /// Tunnel Interface - Default value: `false`
        /// </summary>
        [Input("tunnelInterface")]
        public Input<bool>? TunnelInterface { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/Deny BFD - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBfd")]
        public Input<bool>? TunnelInterfaceAllowBfd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBfdVariable")]
        public Input<string>? TunnelInterfaceAllowBfdVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny Https - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceClearNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceClearNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationGetArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationGetArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationGetArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// List of groups - Range: `1`-`4294967295`
        /// </summary>
        [Input("tunnelInterfaceGroups")]
        public Input<int>? TunnelInterfaceGroups { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Set the maximum number of control connections for this TLOC - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceRestrict")]
        public Input<bool>? TunnelInterfaceRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceRestrictVariable")]
        public Input<string>? TunnelInterfaceRestrictVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode - Choices: `spoke`, `hub`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TransportWanVpnInterfaceT1E1SerialFeatureState()
        {
        }
        public static new TransportWanVpnInterfaceT1E1SerialFeatureState Empty => new TransportWanVpnInterfaceT1E1SerialFeatureState();
    }
}
