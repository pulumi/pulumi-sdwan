// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco Logging feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate")]
    public partial class CiscoLoggingFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Enable logging to local disk - Default value: `true`
        /// </summary>
        [Output("diskLogging")]
        public Output<bool?> DiskLogging { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("diskLoggingVariable")]
        public Output<string?> DiskLoggingVariable { get; private set; } = null!;

        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        [Output("ipv4Servers")]
        public Output<ImmutableArray<Outputs.CiscoLoggingFeatureTemplateIpv4Server>> Ipv4Servers { get; private set; } = null!;

        /// <summary>
        /// Enable logging to remote IPv6 server
        /// </summary>
        [Output("ipv6Servers")]
        public Output<ImmutableArray<Outputs.CiscoLoggingFeatureTemplateIpv6Server>> Ipv6Servers { get; private set; } = null!;

        /// <summary>
        /// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
        /// </summary>
        [Output("logRotations")]
        public Output<int?> LogRotations { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("logRotationsVariable")]
        public Output<string?> LogRotationsVariable { get; private set; } = null!;

        /// <summary>
        /// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
        /// </summary>
        [Output("maxSize")]
        public Output<int?> MaxSize { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("maxSizeVariable")]
        public Output<string?> MaxSizeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        [Output("tlsProfiles")]
        public Output<ImmutableArray<Outputs.CiscoLoggingFeatureTemplateTlsProfile>> TlsProfiles { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoLoggingFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoLoggingFeatureTemplate(string name, CiscoLoggingFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate", name, args ?? new CiscoLoggingFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoLoggingFeatureTemplate(string name, Input<string> id, CiscoLoggingFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoLoggingFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoLoggingFeatureTemplate Get(string name, Input<string> id, CiscoLoggingFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoLoggingFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoLoggingFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable logging to local disk - Default value: `true`
        /// </summary>
        [Input("diskLogging")]
        public Input<bool>? DiskLogging { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskLoggingVariable")]
        public Input<string>? DiskLoggingVariable { get; set; }

        [Input("ipv4Servers")]
        private InputList<Inputs.CiscoLoggingFeatureTemplateIpv4ServerArgs>? _ipv4Servers;

        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        public InputList<Inputs.CiscoLoggingFeatureTemplateIpv4ServerArgs> Ipv4Servers
        {
            get => _ipv4Servers ?? (_ipv4Servers = new InputList<Inputs.CiscoLoggingFeatureTemplateIpv4ServerArgs>());
            set => _ipv4Servers = value;
        }

        [Input("ipv6Servers")]
        private InputList<Inputs.CiscoLoggingFeatureTemplateIpv6ServerArgs>? _ipv6Servers;

        /// <summary>
        /// Enable logging to remote IPv6 server
        /// </summary>
        public InputList<Inputs.CiscoLoggingFeatureTemplateIpv6ServerArgs> Ipv6Servers
        {
            get => _ipv6Servers ?? (_ipv6Servers = new InputList<Inputs.CiscoLoggingFeatureTemplateIpv6ServerArgs>());
            set => _ipv6Servers = value;
        }

        /// <summary>
        /// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
        /// </summary>
        [Input("logRotations")]
        public Input<int>? LogRotations { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("logRotationsVariable")]
        public Input<string>? LogRotationsVariable { get; set; }

        /// <summary>
        /// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("maxSizeVariable")]
        public Input<string>? MaxSizeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tlsProfiles")]
        private InputList<Inputs.CiscoLoggingFeatureTemplateTlsProfileArgs>? _tlsProfiles;

        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        public InputList<Inputs.CiscoLoggingFeatureTemplateTlsProfileArgs> TlsProfiles
        {
            get => _tlsProfiles ?? (_tlsProfiles = new InputList<Inputs.CiscoLoggingFeatureTemplateTlsProfileArgs>());
            set => _tlsProfiles = value;
        }

        public CiscoLoggingFeatureTemplateArgs()
        {
        }
        public static new CiscoLoggingFeatureTemplateArgs Empty => new CiscoLoggingFeatureTemplateArgs();
    }

    public sealed class CiscoLoggingFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable logging to local disk - Default value: `true`
        /// </summary>
        [Input("diskLogging")]
        public Input<bool>? DiskLogging { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskLoggingVariable")]
        public Input<string>? DiskLoggingVariable { get; set; }

        [Input("ipv4Servers")]
        private InputList<Inputs.CiscoLoggingFeatureTemplateIpv4ServerGetArgs>? _ipv4Servers;

        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        public InputList<Inputs.CiscoLoggingFeatureTemplateIpv4ServerGetArgs> Ipv4Servers
        {
            get => _ipv4Servers ?? (_ipv4Servers = new InputList<Inputs.CiscoLoggingFeatureTemplateIpv4ServerGetArgs>());
            set => _ipv4Servers = value;
        }

        [Input("ipv6Servers")]
        private InputList<Inputs.CiscoLoggingFeatureTemplateIpv6ServerGetArgs>? _ipv6Servers;

        /// <summary>
        /// Enable logging to remote IPv6 server
        /// </summary>
        public InputList<Inputs.CiscoLoggingFeatureTemplateIpv6ServerGetArgs> Ipv6Servers
        {
            get => _ipv6Servers ?? (_ipv6Servers = new InputList<Inputs.CiscoLoggingFeatureTemplateIpv6ServerGetArgs>());
            set => _ipv6Servers = value;
        }

        /// <summary>
        /// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
        /// </summary>
        [Input("logRotations")]
        public Input<int>? LogRotations { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("logRotationsVariable")]
        public Input<string>? LogRotationsVariable { get; set; }

        /// <summary>
        /// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
        /// </summary>
        [Input("maxSize")]
        public Input<int>? MaxSize { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("maxSizeVariable")]
        public Input<string>? MaxSizeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        [Input("tlsProfiles")]
        private InputList<Inputs.CiscoLoggingFeatureTemplateTlsProfileGetArgs>? _tlsProfiles;

        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        public InputList<Inputs.CiscoLoggingFeatureTemplateTlsProfileGetArgs> TlsProfiles
        {
            get => _tlsProfiles ?? (_tlsProfiles = new InputList<Inputs.CiscoLoggingFeatureTemplateTlsProfileGetArgs>());
            set => _tlsProfiles = value;
        }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoLoggingFeatureTemplateState()
        {
        }
        public static new CiscoLoggingFeatureTemplateState Empty => new CiscoLoggingFeatureTemplateState();
    }
}
