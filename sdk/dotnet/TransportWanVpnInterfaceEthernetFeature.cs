// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Transport WAN VPN Interface Ethernet Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.TransportWanVpnInterfaceEthernetFeature("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
    ///         Shutdown = true,
    ///         InterfaceName = "GigabitEthernet1",
    ///         InterfaceDescription = "WAN",
    ///         Ipv4ConfigurationType = "static",
    ///         Ipv4Address = "1.2.3.4",
    ///         Ipv4SubnetMask = "0.0.0.0",
    ///         Ipv4SecondaryAddresses = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs
    ///             {
    ///                 Address = "1.2.3.4",
    ///                 Subnet_mask = "0.0.0.0",
    ///             },
    ///         },
    ///         Ipv4DhcpHelpers = new[]
    ///         {
    ///             "1.2.3.4",
    ///         },
    ///         Ipv6ConfigurationType = "static",
    ///         IperfServer = "example",
    ///         BlockNonSourceIp = false,
    ///         ServiceProvider = "example",
    ///         BandwidthUpstream = 21474836,
    ///         BandwidthDownstream = 21474836,
    ///         AutoDetectBandwidth = false,
    ///         TunnelInterface = true,
    ///         PerTunnelQos = true,
    ///         TunnelQosMode = "hub",
    ///         TunnelBandwidthPercent = 82,
    ///         TunnelInterfaceBindLoopbackTunnel = "example",
    ///         TunnelInterfaceCarrier = "default",
    ///         TunnelInterfaceColor = "default",
    ///         TunnelInterfaceHelloInterval = 1000,
    ///         TunnelInterfaceHelloTolerance = 12,
    ///         TunnelInterfaceLastResortCircuit = false,
    ///         TunnelInterfaceGreTunnelDestinationIp = "1.2.3.4",
    ///         TunnelInterfaceColorRestrict = true,
    ///         TunnelInterfaceGroups = 42949672,
    ///         TunnelInterfaceBorder = false,
    ///         TunnelInterfaceMaxControlConnections = 62,
    ///         TunnelInterfaceNatRefreshInterval = 5,
    ///         TunnelInterfaceVbondAsStunServer = false,
    ///         TunnelInterfaceExcludeControllerGroupLists = new[]
    ///         {
    ///             2,
    ///         },
    ///         TunnelInterfaceVmanageConnectionPreference = 8,
    ///         TunnelInterfacePortHop = true,
    ///         TunnelInterfaceLowBandwidthLink = false,
    ///         TunnelInterfaceTunnelTcpMss = 1460,
    ///         TunnelInterfaceClearDontFragment = false,
    ///         TunnelInterfaceCtsSgtPropagation = false,
    ///         TunnelInterfaceNetworkBroadcast = false,
    ///         TunnelInterfaceAllowAll = false,
    ///         TunnelInterfaceAllowBgp = false,
    ///         TunnelInterfaceAllowDhcp = true,
    ///         TunnelInterfaceAllowNtp = false,
    ///         TunnelInterfaceAllowSsh = false,
    ///         TunnelInterfaceAllowDns = true,
    ///         TunnelInterfaceAllowIcmp = true,
    ///         TunnelInterfaceAllowHttps = true,
    ///         TunnelInterfaceAllowOspf = false,
    ///         TunnelInterfaceAllowStun = false,
    ///         TunnelInterfaceAllowSnmp = false,
    ///         TunnelInterfaceAllowNetconf = false,
    ///         TunnelInterfaceAllowBfd = false,
    ///         TunnelInterfaceEncapsulations = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgs
    ///             {
    ///                 Encapsulation = "gre",
    ///                 Preference = 4294967,
    ///                 Weight = 250,
    ///             },
    ///         },
    ///         NatIpv4 = true,
    ///         NatType = "interface",
    ///         NatUdpTimeout = 1,
    ///         NatTcpTimeout = 60,
    ///         NewStaticNats = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgs
    ///             {
    ///                 Source_ip = "1.2.3.4",
    ///                 Translated_ip = "2.3.4.5",
    ///                 Direction = "inside",
    ///                 Source_vpn = 3,
    ///             },
    ///         },
    ///         NatIpv6 = true,
    ///         Nat64 = false,
    ///         Nat66 = true,
    ///         StaticNat66s = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66Args
    ///             {
    ///                 Source_prefix = "2001:0db8:85a3::/48",
    ///                 Translated_source_prefix = "abcd:1234:5678::/48",
    ///                 Source_vpn_id = 4,
    ///             },
    ///         },
    ///         QosAdaptive = false,
    ///         QosShapingRate = 16,
    ///         AclIpv4EgressFeatureId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         AclIpv6IngressFeatureId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         Arps = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportWanVpnInterfaceEthernetFeatureArpArgs
    ///             {
    ///                 Ip_address = "1.2.3.4",
    ///                 Mac_address = "00-B0-D0-63-C2-26",
    ///             },
    ///         },
    ///         IcmpRedirectDisable = true,
    ///         Duplex = "full",
    ///         MacAddress = "00-B0-D0-63-C2-26",
    ///         IpMtu = 1500,
    ///         InterfaceMtu = 1500,
    ///         TcpMss = 505,
    ///         Speed = "2500",
    ///         ArpTimeout = 1200,
    ///         Autonegotiate = false,
    ///         MediaType = "rj45",
    ///         TlocExtension = "tloc",
    ///         GreTunnelSourceIp = "1.2.3.4",
    ///         Xconnect = "example",
    ///         LoadInterval = 30,
    ///         Tracker = "example",
    ///         IpDirectedBroadcast = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "transport_wan_vpn_interface_ethernet_feature_id,feature_profile_id,transport_wan_vpn_feature_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature")]
    public partial class TransportWanVpnInterfaceEthernetFeature : global::Pulumi.CustomResource
    {
        [Output("aclIpv4EgressFeatureId")]
        public Output<string?> AclIpv4EgressFeatureId { get; private set; } = null!;

        [Output("aclIpv4IngressFeatureId")]
        public Output<string?> AclIpv4IngressFeatureId { get; private set; } = null!;

        [Output("aclIpv6EgressFeatureId")]
        public Output<string?> AclIpv6EgressFeatureId { get; private set; } = null!;

        [Output("aclIpv6IngressFeatureId")]
        public Output<string?> AclIpv6IngressFeatureId { get; private set; } = null!;

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Output("arpTimeout")]
        public Output<int?> ArpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("arpTimeoutVariable")]
        public Output<string?> ArpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        [Output("arps")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureArp>> Arps { get; private set; } = null!;

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `False`
        /// </summary>
        [Output("autoDetectBandwidth")]
        public Output<bool?> AutoDetectBandwidth { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("autoDetectBandwidthVariable")]
        public Output<string?> AutoDetectBandwidthVariable { get; private set; } = null!;

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Output("autonegotiate")]
        public Output<bool?> Autonegotiate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("autonegotiateVariable")]
        public Output<string?> AutonegotiateVariable { get; private set; } = null!;

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthDownstream")]
        public Output<int?> BandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthDownstreamVariable")]
        public Output<string?> BandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthUpstream")]
        public Output<int?> BandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthUpstreamVariable")]
        public Output<string?> BandwidthUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Block packets originating from IP address that is not from this source
        ///   - Default value: `False`
        /// </summary>
        [Output("blockNonSourceIp")]
        public Output<bool?> BlockNonSourceIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("blockNonSourceIpVariable")]
        public Output<string?> BlockNonSourceIpVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`, `Auto`
        /// </summary>
        [Output("duplex")]
        public Output<string?> Duplex { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("duplexVariable")]
        public Output<string?> DuplexVariable { get; private set; } = null!;

        /// <summary>
        /// Enable DHCPv6, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Output("enableDhcpv6")]
        public Output<bool?> EnableDhcpv6 { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// GRE tunnel source IP
        /// </summary>
        [Output("greTunnelSourceIp")]
        public Output<string?> GreTunnelSourceIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("greTunnelSourceIpVariable")]
        public Output<string?> GreTunnelSourceIpVariable { get; private set; } = null!;

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        ///   - Default value: `True`
        /// </summary>
        [Output("icmpRedirectDisable")]
        public Output<bool?> IcmpRedirectDisable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("icmpRedirectDisableVariable")]
        public Output<string?> IcmpRedirectDisableVariable { get; private set; } = null!;

        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `False`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Output("iperfServer")]
        public Output<string?> IperfServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("iperfServerVariable")]
        public Output<string?> IperfServerVariable { get; private set; } = null!;

        /// <summary>
        /// IP Address, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// IPv4 Configuration Type
        ///   - Choices: `Dynamic`, `Static`
        ///   - Default value: `Dynamic`
        /// </summary>
        [Output("ipv4ConfigurationType")]
        public Output<string?> Ipv4ConfigurationType { get; private set; } = null!;

        /// <summary>
        /// DHCP Distance, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Output("ipv4DhcpDistance")]
        public Output<int?> Ipv4DhcpDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Output("ipv4DhcpDistanceVariable")]
        public Output<string?> Ipv4DhcpDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpHelperVariable")]
        public Output<string?> Ipv4DhcpHelperVariable { get; private set; } = null!;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        [Output("ipv4DhcpHelpers")]
        public Output<ImmutableArray<string>> Ipv4DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// Secondary IpV4 Addresses, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress>> Ipv4SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Subnet Mask, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("ipv4SubnetMask")]
        public Output<string?> Ipv4SubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv4SubnetMaskVariable")]
        public Output<string?> Ipv4SubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Secondary, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv6Address")]
        public Output<string?> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv6AddressVariable")]
        public Output<string?> Ipv6AddressVariable { get; private set; } = null!;

        /// <summary>
        /// IPv6 Configuration Type
        ///   - Choices: `Dynamic`, `Static`, `None`
        ///   - Default value: `None`
        /// </summary>
        [Output("ipv6ConfigurationType")]
        public Output<string?> Ipv6ConfigurationType { get; private set; } = null!;

        /// <summary>
        /// secondary IPv6 addresses, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Output("ipv6DhcpSecondaryAddresses")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress>> Ipv6DhcpSecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Static secondary IPv6 addresses, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Output("ipv6SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress>> Ipv6SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Output("loadInterval")]
        public Output<int?> LoadInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("loadIntervalVariable")]
        public Output<string?> LoadIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// MAC Address
        /// </summary>
        [Output("macAddress")]
        public Output<string?> MacAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("macAddressVariable")]
        public Output<string?> MacAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `Rj45`, `Sfp`
        /// </summary>
        [Output("mediaType")]
        public Output<string?> MediaType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mediaTypeVariable")]
        public Output<string?> MediaTypeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// NAT64 on this interface, Attribute conditional on `NatIpv6` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("nat64")]
        public Output<bool?> Nat64 { get; private set; } = null!;

        /// <summary>
        /// NAT66 on this interface, Attribute conditional on `NatIpv6` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("nat66")]
        public Output<bool?> Nat66 { get; private set; } = null!;

        /// <summary>
        /// enable Network Address Translation on this interface
        ///   - Default value: `False`
        /// </summary>
        [Output("natIpv4")]
        public Output<bool?> NatIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natIpv4Variable")]
        public Output<string?> NatIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// enable Network Address Translation ipv6 on this interface
        ///   - Default value: `False`
        /// </summary>
        [Output("natIpv6")]
        public Output<bool?> NatIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natIpv6Variable")]
        public Output<string?> NatIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// NAT Inside Source Loopback Interface, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natLoopback")]
        public Output<string?> NatLoopback { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natLoopbackVariable")]
        public Output<string?> NatLoopbackVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Overload, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Default value: `True`
        /// </summary>
        [Output("natOverload")]
        public Output<bool?> NatOverload { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natOverloadVariable")]
        public Output<string?> NatOverloadVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Pool Prefix Length, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`32`
        /// </summary>
        [Output("natPrefixLength")]
        public Output<int?> NatPrefixLength { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natPrefixLengthVariable")]
        public Output<string?> NatPrefixLengthVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Pool Range End, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natRangeEnd")]
        public Output<string?> NatRangeEnd { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natRangeEndVariable")]
        public Output<string?> NatRangeEndVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Pool Range Start, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natRangeStart")]
        public Output<string?> NatRangeStart { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natRangeStartVariable")]
        public Output<string?> NatRangeStartVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT TCP session timeout, in minutes, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`8947`
        ///   - Default value: `60`
        /// </summary>
        [Output("natTcpTimeout")]
        public Output<int?> NatTcpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natTcpTimeoutVariable")]
        public Output<string?> NatTcpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// NAT Type, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Choices: `Interface`, `Pool`, `Loopback`
        ///   - Default value: `Interface`
        /// </summary>
        [Output("natType")]
        public Output<string?> NatType { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natTypeVariable")]
        public Output<string?> NatTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT UDP session timeout, in minutes, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`8947`
        ///   - Default value: `1`
        /// </summary>
        [Output("natUdpTimeout")]
        public Output<int?> NatUdpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("natUdpTimeoutVariable")]
        public Output<string?> NatUdpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// static NAT, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Output("newStaticNats")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNat>> NewStaticNats { get; private set; } = null!;

        /// <summary>
        /// Per-tunnel Qos, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("perTunnelQos")]
        public Output<bool?> PerTunnelQos { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("perTunnelQosVariable")]
        public Output<string?> PerTunnelQosVariable { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS
        ///   - Default value: `False`
        /// </summary>
        [Output("qosAdaptive")]
        public Output<bool?> QosAdaptive { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate Downstream
        ///   - Default value: `False`
        /// </summary>
        [Output("qosAdaptiveBandwidthDownstream")]
        public Output<bool?> QosAdaptiveBandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate Upstream
        ///   - Default value: `False`
        /// </summary>
        [Output("qosAdaptiveBandwidthUpstream")]
        public Output<bool?> QosAdaptiveBandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveDefaultDownstream")]
        public Output<int?> QosAdaptiveDefaultDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveDefaultDownstreamVariable")]
        public Output<string?> QosAdaptiveDefaultDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveDefaultUpstream")]
        public Output<int?> QosAdaptiveDefaultUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveDefaultUpstreamVariable")]
        public Output<string?> QosAdaptiveDefaultUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream max bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxDownstream")]
        public Output<int?> QosAdaptiveMaxDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxDownstreamVariable")]
        public Output<string?> QosAdaptiveMaxDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream max bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxUpstream")]
        public Output<int?> QosAdaptiveMaxUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxUpstreamVariable")]
        public Output<string?> QosAdaptiveMaxUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream min bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinDownstream")]
        public Output<int?> QosAdaptiveMinDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinDownstreamVariable")]
        public Output<string?> QosAdaptiveMinDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream min bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinUpstream")]
        public Output<int?> QosAdaptiveMinUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinUpstreamVariable")]
        public Output<string?> QosAdaptiveMinUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Adapt Period(Minutes)
        ///   - Range: `1`-`720`
        ///   - Default value: `15`
        /// </summary>
        [Output("qosAdaptivePeriod")]
        public Output<int?> QosAdaptivePeriod { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptivePeriodVariable")]
        public Output<string?> QosAdaptivePeriodVariable { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate (Kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosShapingRate")]
        public Output<int?> QosShapingRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosShapingRateVariable")]
        public Output<string?> QosShapingRateVariable { get; private set; } = null!;

        /// <summary>
        /// Service Provider Name
        /// </summary>
        [Output("serviceProvider")]
        public Output<string?> ServiceProvider { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("serviceProviderVariable")]
        public Output<string?> ServiceProviderVariable { get; private set; } = null!;

        /// <summary>
        /// - Default value: `True`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Output("speed")]
        public Output<string?> Speed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("speedVariable")]
        public Output<string?> SpeedVariable { get; private set; } = null!;

        /// <summary>
        /// static NAT66, Attribute conditional on `NatIpv6` being equal to `True`
        /// </summary>
        [Output("staticNat66s")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66>> StaticNat66s { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Output("tlocExtension")]
        public Output<string?> TlocExtension { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tlocExtensionVariable")]
        public Output<string?> TlocExtensionVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("tracker")]
        public Output<string?> Tracker { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Output("transportWanVpnFeatureId")]
        public Output<string> TransportWanVpnFeatureId { get; private set; } = null!;

        /// <summary>
        /// Tunnels Bandwidth Percent, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`100`
        ///   - Default value: `50`
        /// </summary>
        [Output("tunnelBandwidthPercent")]
        public Output<int?> TunnelBandwidthPercent { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelBandwidthPercentVariable")]
        public Output<string?> TunnelBandwidthPercentVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel Interface on/off
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterface")]
        public Output<bool?> TunnelInterface { get; private set; } = null!;

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowAll")]
        public Output<bool?> TunnelInterfaceAllowAll { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowAllVariable")]
        public Output<string?> TunnelInterfaceAllowAllVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny BFD
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowBfd")]
        public Output<bool?> TunnelInterfaceAllowBfd { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBfdVariable")]
        public Output<string?> TunnelInterfaceAllowBfdVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/deny BGP
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowBgp")]
        public Output<bool?> TunnelInterfaceAllowBgp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBgpVariable")]
        public Output<string?> TunnelInterfaceAllowBgpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DHCP
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfaceAllowDhcp")]
        public Output<bool?> TunnelInterfaceAllowDhcp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDhcpVariable")]
        public Output<string?> TunnelInterfaceAllowDhcpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DNS
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfaceAllowDns")]
        public Output<bool?> TunnelInterfaceAllowDns { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDnsVariable")]
        public Output<string?> TunnelInterfaceAllowDnsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny HTTPS
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfaceAllowHttps")]
        public Output<bool?> TunnelInterfaceAllowHttps { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowHttpsVariable")]
        public Output<string?> TunnelInterfaceAllowHttpsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny ICMP
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfaceAllowIcmp")]
        public Output<bool?> TunnelInterfaceAllowIcmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowIcmpVariable")]
        public Output<string?> TunnelInterfaceAllowIcmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NETCONF
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowNetconf")]
        public Output<bool?> TunnelInterfaceAllowNetconf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNetconfVariable")]
        public Output<string?> TunnelInterfaceAllowNetconfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NTP
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfaceAllowNtp")]
        public Output<bool?> TunnelInterfaceAllowNtp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNtpVariable")]
        public Output<string?> TunnelInterfaceAllowNtpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny OSPF
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowOspf")]
        public Output<bool?> TunnelInterfaceAllowOspf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowOspfVariable")]
        public Output<string?> TunnelInterfaceAllowOspfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SNMP
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowSnmp")]
        public Output<bool?> TunnelInterfaceAllowSnmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSnmpVariable")]
        public Output<string?> TunnelInterfaceAllowSnmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SSH
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfaceAllowSsh")]
        public Output<bool?> TunnelInterfaceAllowSsh { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSshVariable")]
        public Output<string?> TunnelInterfaceAllowSshVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny STUN
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceAllowStun")]
        public Output<bool?> TunnelInterfaceAllowStun { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowStunVariable")]
        public Output<string?> TunnelInterfaceAllowStunVariable { get; private set; } = null!;

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnel")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnel { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnelVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as border TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceBorder")]
        public Output<bool?> TunnelInterfaceBorder { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceBorderVariable")]
        public Output<string?> TunnelInterfaceBorderVariable { get; private set; } = null!;

        /// <summary>
        /// Set carrier for TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Default`, `Carrier1`, `Carrier2`, `Carrier3`, `Carrier4`, `Carrier5`, `Carrier6`, `Carrier7`, `Carrier8`
        ///   - Default value: `Default`
        /// </summary>
        [Output("tunnelInterfaceCarrier")]
        public Output<string?> TunnelInterfaceCarrier { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceCarrierVariable")]
        public Output<string?> TunnelInterfaceCarrierVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface), Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceClearDontFragment")]
        public Output<bool?> TunnelInterfaceClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceClearDontFragmentVariable")]
        public Output<string?> TunnelInterfaceClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// Set color for TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Default`, `Mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `Lte`, `3g`, `Red`, `Green`, `Blue`, `Gold`, `Silver`, `Bronze`, `Custom1`, `Custom2`, `Custom3`, `Private1`, `Private2`, `Private3`, `Private4`, `Private5`, `Private6`
        ///   - Default value: `Mpls`
        /// </summary>
        [Output("tunnelInterfaceColor")]
        public Output<string?> TunnelInterfaceColor { get; private set; } = null!;

        /// <summary>
        /// Restrict this TLOC behavior, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceColorRestrict")]
        public Output<bool?> TunnelInterfaceColorRestrict { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceColorRestrictVariable")]
        public Output<string?> TunnelInterfaceColorRestrictVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceColorVariable")]
        public Output<string?> TunnelInterfaceColorVariable { get; private set; } = null!;

        /// <summary>
        /// CTS SGT Propagation configuration, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceCtsSgtPropagation")]
        public Output<bool?> TunnelInterfaceCtsSgtPropagation { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceCtsSgtPropagationVariable")]
        public Output<string?> TunnelInterfaceCtsSgtPropagationVariable { get; private set; } = null!;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        [Output("tunnelInterfaceEncapsulations")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation>> TunnelInterfaceEncapsulations { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Output<string?> TunnelInterfaceExcludeControllerGroupListVariable { get; private set; } = null!;

        /// <summary>
        /// Exclude the following controller groups defined in this list., Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupLists")]
        public Output<ImmutableArray<int>> TunnelInterfaceExcludeControllerGroupLists { get; private set; } = null!;

        /// <summary>
        /// GRE tunnel destination IP, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceGreTunnelDestinationIp")]
        public Output<string?> TunnelInterfaceGreTunnelDestinationIp { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceGreTunnelDestinationIpVariable")]
        public Output<string?> TunnelInterfaceGreTunnelDestinationIpVariable { get; private set; } = null!;

        /// <summary>
        /// List of groups, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`4294967295`
        /// </summary>
        [Output("tunnelInterfaceGroups")]
        public Output<int?> TunnelInterfaceGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceGroupsVariable")]
        public Output<string?> TunnelInterfaceGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `100`-`600000`
        ///   - Default value: `1000`
        /// </summary>
        [Output("tunnelInterfaceHelloInterval")]
        public Output<int?> TunnelInterfaceHelloInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceHelloIntervalVariable")]
        public Output<string?> TunnelInterfaceHelloIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `12`-`6000`
        ///   - Default value: `12`
        /// </summary>
        [Output("tunnelInterfaceHelloTolerance")]
        public Output<int?> TunnelInterfaceHelloTolerance { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceHelloToleranceVariable")]
        public Output<string?> TunnelInterfaceHelloToleranceVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as last resort, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuit")]
        public Output<bool?> TunnelInterfaceLastResortCircuit { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuitVariable")]
        public Output<string?> TunnelInterfaceLastResortCircuitVariable { get; private set; } = null!;

        /// <summary>
        /// Set the interface as a low-bandwidth circuit, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLink")]
        public Output<bool?> TunnelInterfaceLowBandwidthLink { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLinkVariable")]
        public Output<string?> TunnelInterfaceLowBandwidthLinkVariable { get; private set; } = null!;

        /// <summary>
        /// Maximum Control Connections, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `0`-`100`
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnections")]
        public Output<int?> TunnelInterfaceMaxControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceMaxControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`60`
        ///   - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceNatRefreshInterval")]
        public Output<int?> TunnelInterfaceNatRefreshInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceNatRefreshIntervalVariable")]
        public Output<string?> TunnelInterfaceNatRefreshIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcast")]
        public Output<bool?> TunnelInterfaceNetworkBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcastVariable")]
        public Output<string?> TunnelInterfaceNetworkBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// Disallow port hopping on the tunnel interface, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `True`
        /// </summary>
        [Output("tunnelInterfacePortHop")]
        public Output<bool?> TunnelInterfacePortHop { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfacePortHopVariable")]
        public Output<string?> TunnelInterfacePortHopVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `500`-`1460`
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMss")]
        public Output<int?> TunnelInterfaceTunnelTcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMssVariable")]
        public Output<string?> TunnelInterfaceTunnelTcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Put this wan interface in STUN mode only, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServer")]
        public Output<bool?> TunnelInterfaceVbondAsStunServer { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServerVariable")]
        public Output<string?> TunnelInterfaceVbondAsStunServerVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt;, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `0`-`8`
        ///   - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreference")]
        public Output<int?> TunnelInterfaceVmanageConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Output<string?> TunnelInterfaceVmanageConnectionPreferenceVariable { get; private set; } = null!;

        /// <summary>
        /// Set tunnel QoS mode, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Hub`, `Spoke`
        /// </summary>
        [Output("tunnelQosMode")]
        public Output<string?> TunnelQosMode { get; private set; } = null!;

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Output("tunnelQosModeVariable")]
        public Output<string?> TunnelQosModeVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Output("xconnect")]
        public Output<string?> Xconnect { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("xconnectVariable")]
        public Output<string?> XconnectVariable { get; private set; } = null!;


        /// <summary>
        /// Create a TransportWanVpnInterfaceEthernetFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransportWanVpnInterfaceEthernetFeature(string name, TransportWanVpnInterfaceEthernetFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature", name, args ?? new TransportWanVpnInterfaceEthernetFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransportWanVpnInterfaceEthernetFeature(string name, Input<string> id, TransportWanVpnInterfaceEthernetFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransportWanVpnInterfaceEthernetFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransportWanVpnInterfaceEthernetFeature Get(string name, Input<string> id, TransportWanVpnInterfaceEthernetFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new TransportWanVpnInterfaceEthernetFeature(name, id, state, options);
        }
    }

    public sealed class TransportWanVpnInterfaceEthernetFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclIpv4EgressFeatureId")]
        public Input<string>? AclIpv4EgressFeatureId { get; set; }

        [Input("aclIpv4IngressFeatureId")]
        public Input<string>? AclIpv4IngressFeatureId { get; set; }

        [Input("aclIpv6EgressFeatureId")]
        public Input<string>? AclIpv6EgressFeatureId { get; set; }

        [Input("aclIpv6IngressFeatureId")]
        public Input<string>? AclIpv6IngressFeatureId { get; set; }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        [Input("arps")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureArpArgs>? _arps;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureArpArgs> Arps
        {
            get => _arps ?? (_arps = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureArpArgs>());
            set => _arps = value;
        }

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `False`
        /// </summary>
        [Input("autoDetectBandwidth")]
        public Input<bool>? AutoDetectBandwidth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autoDetectBandwidthVariable")]
        public Input<string>? AutoDetectBandwidthVariable { get; set; }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Block packets originating from IP address that is not from this source
        ///   - Default value: `False`
        /// </summary>
        [Input("blockNonSourceIp")]
        public Input<bool>? BlockNonSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("blockNonSourceIpVariable")]
        public Input<string>? BlockNonSourceIpVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`, `Auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("enableDhcpv6")]
        public Input<bool>? EnableDhcpv6 { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// GRE tunnel source IP
        /// </summary>
        [Input("greTunnelSourceIp")]
        public Input<string>? GreTunnelSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("greTunnelSourceIpVariable")]
        public Input<string>? GreTunnelSourceIpVariable { get; set; }

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        ///   - Default value: `True`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `False`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Input("iperfServer")]
        public Input<string>? IperfServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("iperfServerVariable")]
        public Input<string>? IperfServerVariable { get; set; }

        /// <summary>
        /// IP Address, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// IPv4 Configuration Type
        ///   - Choices: `Dynamic`, `Static`
        ///   - Default value: `Dynamic`
        /// </summary>
        [Input("ipv4ConfigurationType")]
        public Input<string>? Ipv4ConfigurationType { get; set; }

        /// <summary>
        /// DHCP Distance, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("ipv4DhcpDistance")]
        public Input<int>? Ipv4DhcpDistance { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("ipv4DhcpDistanceVariable")]
        public Input<string>? Ipv4DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Secondary IpV4 Addresses, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        /// <summary>
        /// Subnet Mask, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// IPv6 Address Secondary, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// IPv6 Configuration Type
        ///   - Choices: `Dynamic`, `Static`, `None`
        ///   - Default value: `None`
        /// </summary>
        [Input("ipv6ConfigurationType")]
        public Input<string>? Ipv6ConfigurationType { get; set; }

        [Input("ipv6DhcpSecondaryAddresses")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs>? _ipv6DhcpSecondaryAddresses;

        /// <summary>
        /// secondary IPv6 addresses, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs> Ipv6DhcpSecondaryAddresses
        {
            get => _ipv6DhcpSecondaryAddresses ?? (_ipv6DhcpSecondaryAddresses = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressArgs>());
            set => _ipv6DhcpSecondaryAddresses = value;
        }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Static secondary IPv6 addresses, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// MAC Address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `Rj45`, `Sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NAT64 on this interface, Attribute conditional on `NatIpv6` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("nat64")]
        public Input<bool>? Nat64 { get; set; }

        /// <summary>
        /// NAT66 on this interface, Attribute conditional on `NatIpv6` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("nat66")]
        public Input<bool>? Nat66 { get; set; }

        /// <summary>
        /// enable Network Address Translation on this interface
        ///   - Default value: `False`
        /// </summary>
        [Input("natIpv4")]
        public Input<bool>? NatIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natIpv4Variable")]
        public Input<string>? NatIpv4Variable { get; set; }

        /// <summary>
        /// enable Network Address Translation ipv6 on this interface
        ///   - Default value: `False`
        /// </summary>
        [Input("natIpv6")]
        public Input<bool>? NatIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natIpv6Variable")]
        public Input<string>? NatIpv6Variable { get; set; }

        /// <summary>
        /// NAT Inside Source Loopback Interface, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natLoopback")]
        public Input<string>? NatLoopback { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natLoopbackVariable")]
        public Input<string>? NatLoopbackVariable { get; set; }

        /// <summary>
        /// NAT Overload, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Default value: `True`
        /// </summary>
        [Input("natOverload")]
        public Input<bool>? NatOverload { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natOverloadVariable")]
        public Input<string>? NatOverloadVariable { get; set; }

        /// <summary>
        /// NAT Pool Prefix Length, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`32`
        /// </summary>
        [Input("natPrefixLength")]
        public Input<int>? NatPrefixLength { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natPrefixLengthVariable")]
        public Input<string>? NatPrefixLengthVariable { get; set; }

        /// <summary>
        /// NAT Pool Range End, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeEnd")]
        public Input<string>? NatRangeEnd { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeEndVariable")]
        public Input<string>? NatRangeEndVariable { get; set; }

        /// <summary>
        /// NAT Pool Range Start, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeStart")]
        public Input<string>? NatRangeStart { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeStartVariable")]
        public Input<string>? NatRangeStartVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`8947`
        ///   - Default value: `60`
        /// </summary>
        [Input("natTcpTimeout")]
        public Input<int>? NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natTcpTimeoutVariable")]
        public Input<string>? NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// NAT Type, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Choices: `Interface`, `Pool`, `Loopback`
        ///   - Default value: `Interface`
        /// </summary>
        [Input("natType")]
        public Input<string>? NatType { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natTypeVariable")]
        public Input<string>? NatTypeVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`8947`
        ///   - Default value: `1`
        /// </summary>
        [Input("natUdpTimeout")]
        public Input<int>? NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natUdpTimeoutVariable")]
        public Input<string>? NatUdpTimeoutVariable { get; set; }

        [Input("newStaticNats")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgs>? _newStaticNats;

        /// <summary>
        /// static NAT, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgs> NewStaticNats
        {
            get => _newStaticNats ?? (_newStaticNats = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatArgs>());
            set => _newStaticNats = value;
        }

        /// <summary>
        /// Per-tunnel Qos, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        /// <summary>
        /// Adaptive QoS
        ///   - Default value: `False`
        /// </summary>
        [Input("qosAdaptive")]
        public Input<bool>? QosAdaptive { get; set; }

        /// <summary>
        /// Shaping Rate Downstream
        ///   - Default value: `False`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<bool>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Shaping Rate Upstream
        ///   - Default value: `False`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<bool>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultDownstream")]
        public Input<int>? QosAdaptiveDefaultDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultDownstreamVariable")]
        public Input<string>? QosAdaptiveDefaultDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultUpstream")]
        public Input<int>? QosAdaptiveDefaultUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultUpstreamVariable")]
        public Input<string>? QosAdaptiveDefaultUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Adapt Period(Minutes)
        ///   - Range: `1`-`720`
        ///   - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Shaping Rate (Kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosShapingRate")]
        public Input<int>? QosShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosShapingRateVariable")]
        public Input<string>? QosShapingRateVariable { get; set; }

        /// <summary>
        /// Service Provider Name
        /// </summary>
        [Input("serviceProvider")]
        public Input<string>? ServiceProvider { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("serviceProviderVariable")]
        public Input<string>? ServiceProviderVariable { get; set; }

        /// <summary>
        /// - Default value: `True`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        [Input("staticNat66s")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66Args>? _staticNat66s;

        /// <summary>
        /// static NAT66, Attribute conditional on `NatIpv6` being equal to `True`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66Args> StaticNat66s
        {
            get => _staticNat66s ?? (_staticNat66s = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66Args>());
            set => _staticNat66s = value;
        }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("tracker")]
        public Input<string>? Tracker { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId", required: true)]
        public Input<string> TransportWanVpnFeatureId { get; set; } = null!;

        /// <summary>
        /// Tunnels Bandwidth Percent, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`100`
        ///   - Default value: `50`
        /// </summary>
        [Input("tunnelBandwidthPercent")]
        public Input<int>? TunnelBandwidthPercent { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelBandwidthPercentVariable")]
        public Input<string>? TunnelBandwidthPercentVariable { get; set; }

        /// <summary>
        /// Tunnel Interface on/off
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterface")]
        public Input<bool>? TunnelInterface { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/Deny BFD
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowBfd")]
        public Input<bool>? TunnelInterfaceAllowBfd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBfdVariable")]
        public Input<string>? TunnelInterfaceAllowBfdVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny HTTPS
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Default`, `Carrier1`, `Carrier2`, `Carrier3`, `Carrier4`, `Carrier5`, `Carrier6`, `Carrier7`, `Carrier8`
        ///   - Default value: `Default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface), Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Default`, `Mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `Lte`, `3g`, `Red`, `Green`, `Blue`, `Gold`, `Silver`, `Bronze`, `Custom1`, `Custom2`, `Custom3`, `Private1`, `Private2`, `Private3`, `Private4`, `Private5`, `Private6`
        ///   - Default value: `Mpls`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceColorRestrictVariable")]
        public Input<string>? TunnelInterfaceColorRestrictVariable { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        /// <summary>
        /// CTS SGT Propagation configuration, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceCtsSgtPropagation")]
        public Input<bool>? TunnelInterfaceCtsSgtPropagation { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceCtsSgtPropagationVariable")]
        public Input<string>? TunnelInterfaceCtsSgtPropagationVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list., Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// GRE tunnel destination IP, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIp")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIp { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIpVariable")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIpVariable { get; set; }

        /// <summary>
        /// List of groups, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`4294967295`
        /// </summary>
        [Input("tunnelInterfaceGroups")]
        public Input<int>? TunnelInterfaceGroups { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `100`-`600000`
        ///   - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `12`-`6000`
        ///   - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Maximum Control Connections, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`60`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt;, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `0`-`8`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Hub`, `Spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Input("xconnect")]
        public Input<string>? Xconnect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("xconnectVariable")]
        public Input<string>? XconnectVariable { get; set; }

        public TransportWanVpnInterfaceEthernetFeatureArgs()
        {
        }
        public static new TransportWanVpnInterfaceEthernetFeatureArgs Empty => new TransportWanVpnInterfaceEthernetFeatureArgs();
    }

    public sealed class TransportWanVpnInterfaceEthernetFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("aclIpv4EgressFeatureId")]
        public Input<string>? AclIpv4EgressFeatureId { get; set; }

        [Input("aclIpv4IngressFeatureId")]
        public Input<string>? AclIpv4IngressFeatureId { get; set; }

        [Input("aclIpv6EgressFeatureId")]
        public Input<string>? AclIpv6EgressFeatureId { get; set; }

        [Input("aclIpv6IngressFeatureId")]
        public Input<string>? AclIpv6IngressFeatureId { get; set; }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        [Input("arps")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureArpGetArgs>? _arps;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureArpGetArgs> Arps
        {
            get => _arps ?? (_arps = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureArpGetArgs>());
            set => _arps = value;
        }

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `False`
        /// </summary>
        [Input("autoDetectBandwidth")]
        public Input<bool>? AutoDetectBandwidth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autoDetectBandwidthVariable")]
        public Input<string>? AutoDetectBandwidthVariable { get; set; }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Block packets originating from IP address that is not from this source
        ///   - Default value: `False`
        /// </summary>
        [Input("blockNonSourceIp")]
        public Input<bool>? BlockNonSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("blockNonSourceIpVariable")]
        public Input<string>? BlockNonSourceIpVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`, `Auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("enableDhcpv6")]
        public Input<bool>? EnableDhcpv6 { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// GRE tunnel source IP
        /// </summary>
        [Input("greTunnelSourceIp")]
        public Input<string>? GreTunnelSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("greTunnelSourceIpVariable")]
        public Input<string>? GreTunnelSourceIpVariable { get; set; }

        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        ///   - Default value: `True`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `False`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Input("iperfServer")]
        public Input<string>? IperfServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("iperfServerVariable")]
        public Input<string>? IperfServerVariable { get; set; }

        /// <summary>
        /// IP Address, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// IPv4 Configuration Type
        ///   - Choices: `Dynamic`, `Static`
        ///   - Default value: `Dynamic`
        /// </summary>
        [Input("ipv4ConfigurationType")]
        public Input<string>? Ipv4ConfigurationType { get; set; }

        /// <summary>
        /// DHCP Distance, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("ipv4DhcpDistance")]
        public Input<int>? Ipv4DhcpDistance { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Dynamic`
        /// </summary>
        [Input("ipv4DhcpDistanceVariable")]
        public Input<string>? Ipv4DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Secondary IpV4 Addresses, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressGetArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        /// <summary>
        /// Subnet Mask, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("ipv4SubnetMask")]
        public Input<string>? Ipv4SubnetMask { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv4ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv4SubnetMaskVariable")]
        public Input<string>? Ipv4SubnetMaskVariable { get; set; }

        /// <summary>
        /// IPv6 Address Secondary, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// IPv6 Configuration Type
        ///   - Choices: `Dynamic`, `Static`, `None`
        ///   - Default value: `None`
        /// </summary>
        [Input("ipv6ConfigurationType")]
        public Input<string>? Ipv6ConfigurationType { get; set; }

        [Input("ipv6DhcpSecondaryAddresses")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressGetArgs>? _ipv6DhcpSecondaryAddresses;

        /// <summary>
        /// secondary IPv6 addresses, Attribute conditional on `Ipv6ConfigurationType` being equal to `Dynamic`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressGetArgs> Ipv6DhcpSecondaryAddresses
        {
            get => _ipv6DhcpSecondaryAddresses ?? (_ipv6DhcpSecondaryAddresses = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressGetArgs>());
            set => _ipv6DhcpSecondaryAddresses = value;
        }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressGetArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Static secondary IPv6 addresses, Attribute conditional on `Ipv6ConfigurationType` being equal to `Static`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressGetArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressGetArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// MAC Address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `Rj45`, `Sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// NAT64 on this interface, Attribute conditional on `NatIpv6` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("nat64")]
        public Input<bool>? Nat64 { get; set; }

        /// <summary>
        /// NAT66 on this interface, Attribute conditional on `NatIpv6` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("nat66")]
        public Input<bool>? Nat66 { get; set; }

        /// <summary>
        /// enable Network Address Translation on this interface
        ///   - Default value: `False`
        /// </summary>
        [Input("natIpv4")]
        public Input<bool>? NatIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natIpv4Variable")]
        public Input<string>? NatIpv4Variable { get; set; }

        /// <summary>
        /// enable Network Address Translation ipv6 on this interface
        ///   - Default value: `False`
        /// </summary>
        [Input("natIpv6")]
        public Input<bool>? NatIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natIpv6Variable")]
        public Input<string>? NatIpv6Variable { get; set; }

        /// <summary>
        /// NAT Inside Source Loopback Interface, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natLoopback")]
        public Input<string>? NatLoopback { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natLoopbackVariable")]
        public Input<string>? NatLoopbackVariable { get; set; }

        /// <summary>
        /// NAT Overload, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Default value: `True`
        /// </summary>
        [Input("natOverload")]
        public Input<bool>? NatOverload { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natOverloadVariable")]
        public Input<string>? NatOverloadVariable { get; set; }

        /// <summary>
        /// NAT Pool Prefix Length, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`32`
        /// </summary>
        [Input("natPrefixLength")]
        public Input<int>? NatPrefixLength { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natPrefixLengthVariable")]
        public Input<string>? NatPrefixLengthVariable { get; set; }

        /// <summary>
        /// NAT Pool Range End, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeEnd")]
        public Input<string>? NatRangeEnd { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeEndVariable")]
        public Input<string>? NatRangeEndVariable { get; set; }

        /// <summary>
        /// NAT Pool Range Start, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeStart")]
        public Input<string>? NatRangeStart { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natRangeStartVariable")]
        public Input<string>? NatRangeStartVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`8947`
        ///   - Default value: `60`
        /// </summary>
        [Input("natTcpTimeout")]
        public Input<int>? NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natTcpTimeoutVariable")]
        public Input<string>? NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// NAT Type, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Choices: `Interface`, `Pool`, `Loopback`
        ///   - Default value: `Interface`
        /// </summary>
        [Input("natType")]
        public Input<string>? NatType { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natTypeVariable")]
        public Input<string>? NatTypeVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes, Attribute conditional on `NatIpv4` being equal to `True`
        ///   - Range: `1`-`8947`
        ///   - Default value: `1`
        /// </summary>
        [Input("natUdpTimeout")]
        public Input<int>? NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        [Input("natUdpTimeoutVariable")]
        public Input<string>? NatUdpTimeoutVariable { get; set; }

        [Input("newStaticNats")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatGetArgs>? _newStaticNats;

        /// <summary>
        /// static NAT, Attribute conditional on `NatIpv4` being equal to `True`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatGetArgs> NewStaticNats
        {
            get => _newStaticNats ?? (_newStaticNats = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNatGetArgs>());
            set => _newStaticNats = value;
        }

        /// <summary>
        /// Per-tunnel Qos, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        /// <summary>
        /// Adaptive QoS
        ///   - Default value: `False`
        /// </summary>
        [Input("qosAdaptive")]
        public Input<bool>? QosAdaptive { get; set; }

        /// <summary>
        /// Shaping Rate Downstream
        ///   - Default value: `False`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<bool>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Shaping Rate Upstream
        ///   - Default value: `False`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<bool>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultDownstream")]
        public Input<int>? QosAdaptiveDefaultDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultDownstreamVariable")]
        public Input<string>? QosAdaptiveDefaultDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultUpstream")]
        public Input<int>? QosAdaptiveDefaultUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultUpstreamVariable")]
        public Input<string>? QosAdaptiveDefaultUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit (kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Adapt Period(Minutes)
        ///   - Range: `1`-`720`
        ///   - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Shaping Rate (Kbps)
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosShapingRate")]
        public Input<int>? QosShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosShapingRateVariable")]
        public Input<string>? QosShapingRateVariable { get; set; }

        /// <summary>
        /// Service Provider Name
        /// </summary>
        [Input("serviceProvider")]
        public Input<string>? ServiceProvider { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("serviceProviderVariable")]
        public Input<string>? ServiceProviderVariable { get; set; }

        /// <summary>
        /// - Default value: `True`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        [Input("staticNat66s")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66GetArgs>? _staticNat66s;

        /// <summary>
        /// static NAT66, Attribute conditional on `NatIpv6` being equal to `True`
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66GetArgs> StaticNat66s
        {
            get => _staticNat66s ?? (_staticNat66s = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66GetArgs>());
            set => _staticNat66s = value;
        }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("tracker")]
        public Input<string>? Tracker { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId")]
        public Input<string>? TransportWanVpnFeatureId { get; set; }

        /// <summary>
        /// Tunnels Bandwidth Percent, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`100`
        ///   - Default value: `50`
        /// </summary>
        [Input("tunnelBandwidthPercent")]
        public Input<int>? TunnelBandwidthPercent { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelBandwidthPercentVariable")]
        public Input<string>? TunnelBandwidthPercentVariable { get; set; }

        /// <summary>
        /// Tunnel Interface on/off
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterface")]
        public Input<bool>? TunnelInterface { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/Deny BFD
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowBfd")]
        public Input<bool>? TunnelInterfaceAllowBfd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBfdVariable")]
        public Input<string>? TunnelInterfaceAllowBfdVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny HTTPS
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Default`, `Carrier1`, `Carrier2`, `Carrier3`, `Carrier4`, `Carrier5`, `Carrier6`, `Carrier7`, `Carrier8`
        ///   - Default value: `Default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface), Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Default`, `Mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `Lte`, `3g`, `Red`, `Green`, `Blue`, `Gold`, `Silver`, `Bronze`, `Custom1`, `Custom2`, `Custom3`, `Private1`, `Private2`, `Private3`, `Private4`, `Private5`, `Private6`
        ///   - Default value: `Mpls`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceColorRestrictVariable")]
        public Input<string>? TunnelInterfaceColorRestrictVariable { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        /// <summary>
        /// CTS SGT Propagation configuration, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceCtsSgtPropagation")]
        public Input<bool>? TunnelInterfaceCtsSgtPropagation { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceCtsSgtPropagationVariable")]
        public Input<string>? TunnelInterfaceCtsSgtPropagationVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationGetArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationGetArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationGetArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list., Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// GRE tunnel destination IP, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIp")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIp { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIpVariable")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIpVariable { get; set; }

        /// <summary>
        /// List of groups, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`4294967295`
        /// </summary>
        [Input("tunnelInterfaceGroups")]
        public Input<int>? TunnelInterfaceGroups { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `100`-`600000`
        ///   - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `12`-`6000`
        ///   - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Maximum Control Connections, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `1`-`60`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `True`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Default value: `False`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt;, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Range: `0`-`8`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode, Attribute conditional on `TunnelInterface` being equal to `True`
        ///   - Choices: `Hub`, `Spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `TunnelInterface` being equal to `True`
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Input("xconnect")]
        public Input<string>? Xconnect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("xconnectVariable")]
        public Input<string>? XconnectVariable { get; set; }

        public TransportWanVpnInterfaceEthernetFeatureState()
        {
        }
        public static new TransportWanVpnInterfaceEthernetFeatureState Empty => new TransportWanVpnInterfaceEthernetFeatureState();
    }
}
