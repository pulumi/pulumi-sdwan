// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoVpnFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco VPN feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoVpnFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoVpnFeatureTemplateResult> InvokeAsync(GetCiscoVpnFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoVpnFeatureTemplateResult>("sdwan:index/getCiscoVpnFeatureTemplate:getCiscoVpnFeatureTemplate", args ?? new GetCiscoVpnFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco VPN feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoVpnFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoVpnFeatureTemplateResult> Invoke(GetCiscoVpnFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoVpnFeatureTemplateResult>("sdwan:index/getCiscoVpnFeatureTemplate:getCiscoVpnFeatureTemplate", args ?? new GetCiscoVpnFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoVpnFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoVpnFeatureTemplateArgs()
        {
        }
        public static new GetCiscoVpnFeatureTemplateArgs Empty => new GetCiscoVpnFeatureTemplateArgs();
    }

    public sealed class GetCiscoVpnFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoVpnFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoVpnFeatureTemplateInvokeArgs Empty => new GetCiscoVpnFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoVpnFeatureTemplateResult
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Static DNS mapping
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateDnsHostResult> DnsHosts;
        /// <summary>
        /// DNS
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateDnsIpv4ServerResult> DnsIpv4Servers;
        /// <summary>
        /// DNS
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateDnsIpv6ServerResult> DnsIpv6Servers;
        /// <summary>
        /// Optional packet fields for ECMP keying
        /// </summary>
        public readonly bool EnhanceEcmpKeying;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnhanceEcmpKeyingVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Configure routes pointing to a GRE tunnel
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticGreRouteResult> Ipv4StaticGreRoutes;
        /// <summary>
        /// Configure routes pointing to a IPSEC tunnel
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticIpsecRouteResult> Ipv4StaticIpsecRoutes;
        /// <summary>
        /// Configure IPv4 Static Routes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteResult> Ipv4StaticRoutes;
        /// <summary>
        /// Configure IPv4 Static Service Routes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticServiceRouteResult> Ipv4StaticServiceRoutes;
        /// <summary>
        /// Configure IPv6 Static Routes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv6StaticRouteResult> Ipv6StaticRoutes;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Set NAT64 v4 pool range
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateNat64PoolResult> Nat64Pools;
        /// <summary>
        /// Configure NAT Pool entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateNatPoolResult> NatPools;
        /// <summary>
        /// omp-admin-distance-ipv4
        /// </summary>
        public readonly int OmpAdminDistanceIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OmpAdminDistanceIpv4Variable;
        /// <summary>
        /// omp-admin-distance-ipv6
        /// </summary>
        public readonly int OmpAdminDistanceIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OmpAdminDistanceIpv6Variable;
        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteResult> OmpAdvertiseIpv4Routes;
        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteResult> OmpAdvertiseIpv6Routes;
        /// <summary>
        /// Org Name selected
        /// </summary>
        public readonly string OrganizationName;
        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplatePortForwardRuleResult> PortForwardRules;
        /// <summary>
        /// Enable route leaking to Global VPN from this Service VPN
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateRouteGlobalExportResult> RouteGlobalExports;
        /// <summary>
        /// Enable route leaking from Global VPN to this Service VPN
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateRouteGlobalImportResult> RouteGlobalImports;
        /// <summary>
        /// Enable route leak from Service VPN to current VPN
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateRouteVpnImportResult> RouteVpnImports;
        /// <summary>
        /// Configure services
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateServiceResult> Services;
        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateStaticNatRuleResult> StaticNatRules;
        /// <summary>
        /// Configure static NAT Subnet entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateStaticNatSubnetRuleResult> StaticNatSubnetRules;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Tenant VPN
        /// </summary>
        public readonly int TenantVpnId;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// List of VPN instances
        /// </summary>
        public readonly int VpnId;
        /// <summary>
        /// Name
        /// </summary>
        public readonly string VpnName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string VpnNameVariable;

        [OutputConstructor]
        private GetCiscoVpnFeatureTemplateResult(
            string description,

            ImmutableArray<string> deviceTypes,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateDnsHostResult> dnsHosts,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateDnsIpv4ServerResult> dnsIpv4Servers,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateDnsIpv6ServerResult> dnsIpv6Servers,

            bool enhanceEcmpKeying,

            string enhanceEcmpKeyingVariable,

            string id,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticGreRouteResult> ipv4StaticGreRoutes,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticIpsecRouteResult> ipv4StaticIpsecRoutes,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteResult> ipv4StaticRoutes,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv4StaticServiceRouteResult> ipv4StaticServiceRoutes,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateIpv6StaticRouteResult> ipv6StaticRoutes,

            string name,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateNat64PoolResult> nat64Pools,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateNatPoolResult> natPools,

            int ompAdminDistanceIpv4,

            string ompAdminDistanceIpv4Variable,

            int ompAdminDistanceIpv6,

            string ompAdminDistanceIpv6Variable,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteResult> ompAdvertiseIpv4Routes,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteResult> ompAdvertiseIpv6Routes,

            string organizationName,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplatePortForwardRuleResult> portForwardRules,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateRouteGlobalExportResult> routeGlobalExports,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateRouteGlobalImportResult> routeGlobalImports,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateRouteVpnImportResult> routeVpnImports,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateServiceResult> services,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateStaticNatRuleResult> staticNatRules,

            ImmutableArray<Outputs.GetCiscoVpnFeatureTemplateStaticNatSubnetRuleResult> staticNatSubnetRules,

            string templateType,

            int tenantVpnId,

            int version,

            int vpnId,

            string vpnName,

            string vpnNameVariable)
        {
            Description = description;
            DeviceTypes = deviceTypes;
            DnsHosts = dnsHosts;
            DnsIpv4Servers = dnsIpv4Servers;
            DnsIpv6Servers = dnsIpv6Servers;
            EnhanceEcmpKeying = enhanceEcmpKeying;
            EnhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            Id = id;
            Ipv4StaticGreRoutes = ipv4StaticGreRoutes;
            Ipv4StaticIpsecRoutes = ipv4StaticIpsecRoutes;
            Ipv4StaticRoutes = ipv4StaticRoutes;
            Ipv4StaticServiceRoutes = ipv4StaticServiceRoutes;
            Ipv6StaticRoutes = ipv6StaticRoutes;
            Name = name;
            Nat64Pools = nat64Pools;
            NatPools = natPools;
            OmpAdminDistanceIpv4 = ompAdminDistanceIpv4;
            OmpAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            OmpAdminDistanceIpv6 = ompAdminDistanceIpv6;
            OmpAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            OmpAdvertiseIpv4Routes = ompAdvertiseIpv4Routes;
            OmpAdvertiseIpv6Routes = ompAdvertiseIpv6Routes;
            OrganizationName = organizationName;
            PortForwardRules = portForwardRules;
            RouteGlobalExports = routeGlobalExports;
            RouteGlobalImports = routeGlobalImports;
            RouteVpnImports = routeVpnImports;
            Services = services;
            StaticNatRules = staticNatRules;
            StaticNatSubnetRules = staticNatSubnetRules;
            TemplateType = templateType;
            TenantVpnId = tenantVpnId;
            Version = version;
            VpnId = vpnId;
            VpnName = vpnName;
            VpnNameVariable = vpnNameVariable;
        }
    }
}
