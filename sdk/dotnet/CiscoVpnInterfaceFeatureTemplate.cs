// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco VPN Interface feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate")]
    public partial class CiscoVpnInterfaceFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Apply ACL
        /// </summary>
        [Output("accessLists")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateAccessList>> AccessLists { get; private set; } = null!;

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Output("address")]
        public Output<string?> Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("addressVariable")]
        public Output<string?> AddressVariable { get; private set; } = null!;

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Output("arpTimeout")]
        public Output<int?> ArpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("arpTimeoutVariable")]
        public Output<string?> ArpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `false`
        /// </summary>
        [Output("autoBandwidthDetect")]
        public Output<bool?> AutoBandwidthDetect { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("autoBandwidthDetectVariable")]
        public Output<string?> AutoBandwidthDetectVariable { get; private set; } = null!;

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Output("autonegotiate")]
        public Output<bool?> Autonegotiate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("autonegotiateVariable")]
        public Output<string?> AutonegotiateVariable { get; private set; } = null!;

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthDownstream")]
        public Output<int?> BandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthDownstreamVariable")]
        public Output<string?> BandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthUpstream")]
        public Output<int?> BandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthUpstreamVariable")]
        public Output<string?> BandwidthUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Block packets originating from IP address that is not from this source
        ///   - Default value: `false`
        /// </summary>
        [Output("blockNonSourceIp")]
        public Output<bool?> BlockNonSourceIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("blockNonSourceIpVariable")]
        public Output<string?> BlockNonSourceIpVariable { get; private set; } = null!;

        /// <summary>
        /// Enable core region
        ///   - Choices: `core`, `core-shared`
        ///   - Default value: `core`
        /// </summary>
        [Output("coreRegion")]
        public Output<string?> CoreRegion { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("coreRegionVariable")]
        public Output<string?> CoreRegionVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Enable DHCP
        ///   - Default value: `false`
        /// </summary>
        [Output("dhcp")]
        public Output<bool?> Dhcp { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for DHCP default route
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Output("dhcpDistance")]
        public Output<int?> DhcpDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dhcpDistanceVariable")]
        public Output<string?> DhcpDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dhcpVariable")]
        public Output<string?> DhcpVariable { get; private set; } = null!;

        /// <summary>
        /// Enable DHCPv6
        ///   - Default value: `false`
        /// </summary>
        [Output("dhcpv6")]
        public Output<bool?> Dhcpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dhcpv6Variable")]
        public Output<string?> Dhcpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Duplex mode
        ///   - Choices: `full`, `half`, `auto`
        /// </summary>
        [Output("duplex")]
        public Output<string?> Duplex { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("duplexVariable")]
        public Output<string?> DuplexVariable { get; private set; } = null!;

        /// <summary>
        /// Enable core region
        ///   - Default value: `false`
        /// </summary>
        [Output("enableCoreRegion")]
        public Output<bool?> EnableCoreRegion { get; private set; } = null!;

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        ///   - Default value: `false`
        /// </summary>
        [Output("enableSgt")]
        public Output<bool?> EnableSgt { get; private set; } = null!;

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Output("greTunnelSourceIp")]
        public Output<string?> GreTunnelSourceIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("greTunnelSourceIpVariable")]
        public Output<string?> GreTunnelSourceIpVariable { get; private set; } = null!;

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Output("greTunnelXconnect")]
        public Output<string?> GreTunnelXconnect { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("greTunnelXconnectVariable")]
        public Output<string?> GreTunnelXconnectVariable { get; private set; } = null!;

        /// <summary>
        /// Set this option to disable the icmp/icmpv6 redirect packets
        ///   - Default value: `true`
        /// </summary>
        [Output("icmpRedirectDisable")]
        public Output<bool?> IcmpRedirectDisable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("icmpRedirectDisableVariable")]
        public Output<string?> IcmpRedirectDisableVariable { get; private set; } = null!;

        /// <summary>
        /// Interface description
        /// </summary>
        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
        /// </summary>
        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `false`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Output("iperfServer")]
        public Output<string?> IperfServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("iperfServerVariable")]
        public Output<string?> IperfServerVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpHelperVariable")]
        public Output<string?> Ipv4DhcpHelperVariable { get; private set; } = null!;

        /// <summary>
        /// List of DHCP IPv4 helper addresses
        /// </summary>
        [Output("ipv4DhcpHelpers")]
        public Output<ImmutableArray<string>> Ipv4DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        [Output("ipv4SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress>> Ipv4SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        [Output("ipv4Vrrps")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateIpv4Vrrp>> Ipv4Vrrps { get; private set; } = null!;

        /// <summary>
        /// Apply IPv6 access list
        /// </summary>
        [Output("ipv6AccessLists")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessList>> Ipv6AccessLists { get; private set; } = null!;

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Output("ipv6Address")]
        public Output<string?> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6AddressVariable")]
        public Output<string?> Ipv6AddressVariable { get; private set; } = null!;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        [Output("ipv6DhcpHelpers")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper>> Ipv6DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// NAT64 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Output("ipv6Nat")]
        public Output<bool?> Ipv6Nat { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6NatVariable")]
        public Output<string?> Ipv6NatVariable { get; private set; } = null!;

        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        [Output("ipv6SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress>> Ipv6SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        [Output("ipv6Vrrps")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateIpv6Vrrp>> Ipv6Vrrps { get; private set; } = null!;

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Output("loadInterval")]
        public Output<int?> LoadInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("loadIntervalVariable")]
        public Output<string?> LoadIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set MAC-layer address
        /// </summary>
        [Output("macAddress")]
        public Output<string?> MacAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("macAddressVariable")]
        public Output<string?> MacAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `rj45`, `sfp`
        /// </summary>
        [Output("mediaType")]
        public Output<string?> MediaType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mediaTypeVariable")]
        public Output<string?> MediaTypeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network Address Translation on this interface
        ///   - Default value: `false`
        /// </summary>
        [Output("nat")]
        public Output<bool?> Nat { get; private set; } = null!;

        /// <summary>
        /// NAT64 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Output("nat64Interface")]
        public Output<bool?> Nat64Interface { get; private set; } = null!;

        /// <summary>
        /// NAT66 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Output("nat66Interface")]
        public Output<bool?> Nat66Interface { get; private set; } = null!;

        /// <summary>
        /// Configure NAT Inside Loopback Interface
        /// </summary>
        [Output("natInsideSourceLoopbackInterface")]
        public Output<string?> NatInsideSourceLoopbackInterface { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natInsideSourceLoopbackInterfaceVariable")]
        public Output<string?> NatInsideSourceLoopbackInterfaceVariable { get; private set; } = null!;

        /// <summary>
        /// Enable port translation(PAT)
        ///   - Default value: `true`
        /// </summary>
        [Output("natOverload")]
        public Output<bool?> NatOverload { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natOverloadVariable")]
        public Output<string?> NatOverloadVariable { get; private set; } = null!;

        /// <summary>
        /// Ending IP address of NAT Pool Prefix Length
        /// </summary>
        [Output("natPoolPrefixLength")]
        public Output<int?> NatPoolPrefixLength { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natPoolPrefixLengthVariable")]
        public Output<string?> NatPoolPrefixLengthVariable { get; private set; } = null!;

        /// <summary>
        /// Ending IP address of NAT pool range
        /// </summary>
        [Output("natPoolRangeEnd")]
        public Output<string?> NatPoolRangeEnd { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natPoolRangeEndVariable")]
        public Output<string?> NatPoolRangeEndVariable { get; private set; } = null!;

        /// <summary>
        /// Starting IP address of NAT pool range
        /// </summary>
        [Output("natPoolRangeStart")]
        public Output<string?> NatPoolRangeStart { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natPoolRangeStartVariable")]
        public Output<string?> NatPoolRangeStartVariable { get; private set; } = null!;

        /// <summary>
        /// NAT type
        ///   - Choices: `interface`, `pool`, `loopback`
        ///   - Default value: `interface`
        /// </summary>
        [Output("natType")]
        public Output<string?> NatType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natTypeVariable")]
        public Output<string?> NatTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Configure interface as Power-over-Ethernet source
        ///   - Default value: `false`
        /// </summary>
        [Output("poe")]
        public Output<bool?> Poe { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("poeVariable")]
        public Output<string?> PoeVariable { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable CTS SGT propagation on an interface.
        ///   - Default value: `true`
        /// </summary>
        [Output("propagateSgt")]
        public Output<bool?> PropagateSgt { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default downstream bandwidth
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveBandwidthDownstream")]
        public Output<int?> QosAdaptiveBandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveBandwidthDownstreamVariable")]
        public Output<string?> QosAdaptiveBandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default upstream bandwidth
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveBandwidthUpstream")]
        public Output<int?> QosAdaptiveBandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveBandwidthUpstreamVariable")]
        public Output<string?> QosAdaptiveBandwidthUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream max bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxDownstream")]
        public Output<int?> QosAdaptiveMaxDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxDownstreamVariable")]
        public Output<string?> QosAdaptiveMaxDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream max bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxUpstream")]
        public Output<int?> QosAdaptiveMaxUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxUpstreamVariable")]
        public Output<string?> QosAdaptiveMaxUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream min bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinDownstream")]
        public Output<int?> QosAdaptiveMinDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinDownstreamVariable")]
        public Output<string?> QosAdaptiveMinDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream min bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinUpstream")]
        public Output<int?> QosAdaptiveMinUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinUpstreamVariable")]
        public Output<string?> QosAdaptiveMinUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Periodic timer for adaptive QoS in minutes
        ///   - Range: `1`-`720`
        ///   - Default value: `15`
        /// </summary>
        [Output("qosAdaptivePeriod")]
        public Output<int?> QosAdaptivePeriod { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptivePeriodVariable")]
        public Output<string?> QosAdaptivePeriodVariable { get; private set; } = null!;

        /// <summary>
        /// Name of QoS map
        /// </summary>
        [Output("qosMap")]
        public Output<string?> QosMap { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosMapVariable")]
        public Output<string?> QosMapVariable { get; private set; } = null!;

        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        [Output("qosMapVpn")]
        public Output<string?> QosMapVpn { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosMapVpnVariable")]
        public Output<string?> QosMapVpnVariable { get; private set; } = null!;

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Output("rewriteRuleName")]
        public Output<string?> RewriteRuleName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("rewriteRuleNameVariable")]
        public Output<string?> RewriteRuleNameVariable { get; private set; } = null!;

        /// <summary>
        /// Enable secondary region
        ///   - Choices: `off`, `secondary-only`, `secondary-shared`
        ///   - Default value: `off`
        /// </summary>
        [Output("secondaryRegion")]
        public Output<string?> SecondaryRegion { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryRegionVariable")]
        public Output<string?> SecondaryRegionVariable { get; private set; } = null!;

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        ///   - Default value: `false`
        /// </summary>
        [Output("sgtEnforcement")]
        public Output<bool?> SgtEnforcement { get; private set; } = null!;

        /// <summary>
        /// SGT value between 2 and 65519.
        ///   - Range: `2`-`65519`
        /// </summary>
        [Output("sgtEnforcementSgt")]
        public Output<int?> SgtEnforcementSgt { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sgtEnforcementSgtVariable")]
        public Output<string?> SgtEnforcementSgtVariable { get; private set; } = null!;

        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Output("shapingRate")]
        public Output<int?> ShapingRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shapingRateVariable")]
        public Output<string?> ShapingRateVariable { get; private set; } = null!;

        /// <summary>
        /// Administrative state
        ///   - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Output("speed")]
        public Output<string?> Speed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("speedVariable")]
        public Output<string?> SpeedVariable { get; private set; } = null!;

        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        [Output("staticArps")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateStaticArp>> StaticArps { get; private set; } = null!;

        /// <summary>
        /// static NAT
        /// </summary>
        [Output("staticNat66Entries")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateStaticNat66Entry>> StaticNat66Entries { get; private set; } = null!;

        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        [Output("staticNatEntries")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntry>> StaticNatEntries { get; private set; } = null!;

        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        [Output("staticPortForwardEntries")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry>> StaticPortForwardEntries { get; private set; } = null!;

        /// <summary>
        /// SGT value between 2 and 65519.
        ///   - Range: `2`-`65519`
        /// </summary>
        [Output("staticSgt")]
        public Output<int?> StaticSgt { get; private set; } = null!;

        /// <summary>
        /// Indicates that the interface is trustworthy for CTS.
        ///   - Default value: `false`
        /// </summary>
        [Output("staticSgtTrusted")]
        public Output<bool?> StaticSgtTrusted { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("staticSgtVariable")]
        public Output<string?> StaticSgtVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMssAdjust")]
        public Output<int?> TcpMssAdjust { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssAdjustVariable")]
        public Output<string?> TcpMssAdjustVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        ///   - Range: `1`-`8947`
        ///   - Default value: `60`
        /// </summary>
        [Output("tcpTimeout")]
        public Output<int?> TcpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpTimeoutVariable")]
        public Output<string?> TcpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Output("tlocExtension")]
        public Output<string?> TlocExtension { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tlocExtensionVariable")]
        public Output<string?> TlocExtensionVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("trackers")]
        public Output<ImmutableArray<string>> Trackers { get; private set; } = null!;

        /// <summary>
        /// Tunnels Bandwidth Percent
        ///   - Range: `1`-`99`
        ///   - Default value: `50`
        /// </summary>
        [Output("tunnelBandwidth")]
        public Output<int?> TunnelBandwidth { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelBandwidthVariable")]
        public Output<string?> TunnelBandwidthVariable { get; private set; } = null!;

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowAll")]
        public Output<bool?> TunnelInterfaceAllowAll { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowAllVariable")]
        public Output<string?> TunnelInterfaceAllowAllVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/deny BGP
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowBgp")]
        public Output<bool?> TunnelInterfaceAllowBgp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBgpVariable")]
        public Output<string?> TunnelInterfaceAllowBgpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DHCP
        ///   - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDhcp")]
        public Output<bool?> TunnelInterfaceAllowDhcp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDhcpVariable")]
        public Output<string?> TunnelInterfaceAllowDhcpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DNS
        ///   - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDns")]
        public Output<bool?> TunnelInterfaceAllowDns { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDnsVariable")]
        public Output<string?> TunnelInterfaceAllowDnsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny Https
        ///   - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowHttps")]
        public Output<bool?> TunnelInterfaceAllowHttps { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowHttpsVariable")]
        public Output<string?> TunnelInterfaceAllowHttpsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny ICMP
        ///   - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowIcmp")]
        public Output<bool?> TunnelInterfaceAllowIcmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowIcmpVariable")]
        public Output<string?> TunnelInterfaceAllowIcmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NETCONF
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNetconf")]
        public Output<bool?> TunnelInterfaceAllowNetconf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNetconfVariable")]
        public Output<string?> TunnelInterfaceAllowNetconfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NTP
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNtp")]
        public Output<bool?> TunnelInterfaceAllowNtp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNtpVariable")]
        public Output<string?> TunnelInterfaceAllowNtpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny OSPF
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowOspf")]
        public Output<bool?> TunnelInterfaceAllowOspf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowOspfVariable")]
        public Output<string?> TunnelInterfaceAllowOspfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SNMP
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSnmp")]
        public Output<bool?> TunnelInterfaceAllowSnmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSnmpVariable")]
        public Output<string?> TunnelInterfaceAllowSnmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SSH
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSsh")]
        public Output<bool?> TunnelInterfaceAllowSsh { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSshVariable")]
        public Output<string?> TunnelInterfaceAllowSshVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny STUN
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowStun")]
        public Output<bool?> TunnelInterfaceAllowStun { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowStunVariable")]
        public Output<string?> TunnelInterfaceAllowStunVariable { get; private set; } = null!;

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnel")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnel { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnelVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as border TLOC
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceBorder")]
        public Output<bool?> TunnelInterfaceBorder { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBorderVariable")]
        public Output<string?> TunnelInterfaceBorderVariable { get; private set; } = null!;

        /// <summary>
        /// Set carrier for TLOC
        ///   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        ///   - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceCarrier")]
        public Output<string?> TunnelInterfaceCarrier { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceCarrierVariable")]
        public Output<string?> TunnelInterfaceCarrierVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceClearDontFragment")]
        public Output<bool?> TunnelInterfaceClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceClearDontFragmentVariable")]
        public Output<string?> TunnelInterfaceClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// Set color for TLOC
        ///   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        ///   - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceColor")]
        public Output<string?> TunnelInterfaceColor { get; private set; } = null!;

        /// <summary>
        /// Restrict this TLOC behavior
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceColorRestrict")]
        public Output<bool?> TunnelInterfaceColorRestrict { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceColorRestrictVariable")]
        public Output<string?> TunnelInterfaceColorRestrictVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceColorVariable")]
        public Output<string?> TunnelInterfaceColorVariable { get; private set; } = null!;

        /// <summary>
        /// Allow Control Connection
        ///   - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceControlConnections")]
        public Output<bool?> TunnelInterfaceControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        [Output("tunnelInterfaceEncapsulations")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation>> TunnelInterfaceEncapsulations { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Output<string?> TunnelInterfaceExcludeControllerGroupListVariable { get; private set; } = null!;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupLists")]
        public Output<ImmutableArray<int>> TunnelInterfaceExcludeControllerGroupLists { get; private set; } = null!;

        /// <summary>
        /// Extend the TLOC to a remote node over GRE tunnel
        /// </summary>
        [Output("tunnelInterfaceGreTunnelDestinationIp")]
        public Output<string?> TunnelInterfaceGreTunnelDestinationIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceGreTunnelDestinationIpVariable")]
        public Output<string?> TunnelInterfaceGreTunnelDestinationIpVariable { get; private set; } = null!;

        /// <summary>
        /// List of groups
        /// </summary>
        [Output("tunnelInterfaceGroups")]
        public Output<ImmutableArray<int>> TunnelInterfaceGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceGroupsVariable")]
        public Output<string?> TunnelInterfaceGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds
        ///   - Range: `100`-`600000`
        ///   - Default value: `1000`
        /// </summary>
        [Output("tunnelInterfaceHelloInterval")]
        public Output<int?> TunnelInterfaceHelloInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloIntervalVariable")]
        public Output<string?> TunnelInterfaceHelloIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds
        ///   - Range: `12`-`6000`
        ///   - Default value: `12`
        /// </summary>
        [Output("tunnelInterfaceHelloTolerance")]
        public Output<int?> TunnelInterfaceHelloTolerance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloToleranceVariable")]
        public Output<string?> TunnelInterfaceHelloToleranceVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as last resort
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuit")]
        public Output<bool?> TunnelInterfaceLastResortCircuit { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuitVariable")]
        public Output<string?> TunnelInterfaceLastResortCircuitVariable { get; private set; } = null!;

        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLink")]
        public Output<bool?> TunnelInterfaceLowBandwidthLink { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLinkVariable")]
        public Output<string?> TunnelInterfaceLowBandwidthLinkVariable { get; private set; } = null!;

        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        ///   - Range: `0`-`100`
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnections")]
        public Output<int?> TunnelInterfaceMaxControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceMaxControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds
        ///   - Range: `1`-`60`
        ///   - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceNatRefreshInterval")]
        public Output<int?> TunnelInterfaceNatRefreshInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNatRefreshIntervalVariable")]
        public Output<string?> TunnelInterfaceNatRefreshIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcast")]
        public Output<bool?> TunnelInterfaceNetworkBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcastVariable")]
        public Output<string?> TunnelInterfaceNetworkBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// Disallow port hopping on the tunnel interface
        ///   - Default value: `true`
        /// </summary>
        [Output("tunnelInterfacePortHop")]
        public Output<bool?> TunnelInterfacePortHop { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfacePortHopVariable")]
        public Output<string?> TunnelInterfacePortHopVariable { get; private set; } = null!;

        /// <summary>
        /// CTS SGT Propagation configuration
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfacePropagateSgt")]
        public Output<bool?> TunnelInterfacePropagateSgt { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfacePropagateSgtVariable")]
        public Output<string?> TunnelInterfacePropagateSgtVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMss")]
        public Output<int?> TunnelInterfaceTunnelTcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMssVariable")]
        public Output<string?> TunnelInterfaceTunnelTcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Put this wan interface in STUN mode only
        ///   - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServer")]
        public Output<bool?> TunnelInterfaceVbondAsStunServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServerVariable")]
        public Output<string?> TunnelInterfaceVbondAsStunServerVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt;
        ///   - Range: `0`-`8`
        ///   - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreference")]
        public Output<int?> TunnelInterfaceVmanageConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Output<string?> TunnelInterfaceVmanageConnectionPreferenceVariable { get; private set; } = null!;

        /// <summary>
        /// Set tunnel QoS mode
        ///   - Choices: `hub`, `spoke`
        /// </summary>
        [Output("tunnelQosMode")]
        public Output<string?> TunnelQosMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelQosModeVariable")]
        public Output<string?> TunnelQosModeVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        ///   - Range: `1`-`8947`
        ///   - Default value: `1`
        /// </summary>
        [Output("udpTimeout")]
        public Output<int?> UdpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("udpTimeoutVariable")]
        public Output<string?> UdpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoVpnInterfaceFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoVpnInterfaceFeatureTemplate(string name, CiscoVpnInterfaceFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate", name, args ?? new CiscoVpnInterfaceFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoVpnInterfaceFeatureTemplate(string name, Input<string> id, CiscoVpnInterfaceFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoVpnInterfaceFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoVpnInterfaceFeatureTemplate Get(string name, Input<string> id, CiscoVpnInterfaceFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoVpnInterfaceFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoVpnInterfaceFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessLists")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateAccessListArgs>? _accessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateAccessListArgs> AccessLists
        {
            get => _accessLists ?? (_accessLists = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateAccessListArgs>());
            set => _accessLists = value;
        }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("addressVariable")]
        public Input<string>? AddressVariable { get; set; }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `false`
        /// </summary>
        [Input("autoBandwidthDetect")]
        public Input<bool>? AutoBandwidthDetect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autoBandwidthDetectVariable")]
        public Input<string>? AutoBandwidthDetectVariable { get; set; }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Block packets originating from IP address that is not from this source
        ///   - Default value: `false`
        /// </summary>
        [Input("blockNonSourceIp")]
        public Input<bool>? BlockNonSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("blockNonSourceIpVariable")]
        public Input<string>? BlockNonSourceIpVariable { get; set; }

        /// <summary>
        /// Enable core region
        ///   - Choices: `core`, `core-shared`
        ///   - Default value: `core`
        /// </summary>
        [Input("coreRegion")]
        public Input<string>? CoreRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("coreRegionVariable")]
        public Input<string>? CoreRegionVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable DHCP
        ///   - Default value: `false`
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// Set administrative distance for DHCP default route
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("dhcpDistance")]
        public Input<int>? DhcpDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dhcpDistanceVariable")]
        public Input<string>? DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dhcpVariable")]
        public Input<string>? DhcpVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6
        ///   - Default value: `false`
        /// </summary>
        [Input("dhcpv6")]
        public Input<bool>? Dhcpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dhcpv6Variable")]
        public Input<string>? Dhcpv6Variable { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `full`, `half`, `auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable core region
        ///   - Default value: `false`
        /// </summary>
        [Input("enableCoreRegion")]
        public Input<bool>? EnableCoreRegion { get; set; }

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        ///   - Default value: `false`
        /// </summary>
        [Input("enableSgt")]
        public Input<bool>? EnableSgt { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Input("greTunnelSourceIp")]
        public Input<string>? GreTunnelSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("greTunnelSourceIpVariable")]
        public Input<string>? GreTunnelSourceIpVariable { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Input("greTunnelXconnect")]
        public Input<string>? GreTunnelXconnect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("greTunnelXconnectVariable")]
        public Input<string>? GreTunnelXconnectVariable { get; set; }

        /// <summary>
        /// Set this option to disable the icmp/icmpv6 redirect packets
        ///   - Default value: `true`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        /// <summary>
        /// Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Input("iperfServer")]
        public Input<string>? IperfServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("iperfServerVariable")]
        public Input<string>? IperfServerVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        [Input("ipv4Vrrps")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs>? _ipv4Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs> Ipv4Vrrps
        {
            get => _ipv4Vrrps ?? (_ipv4Vrrps = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs>());
            set => _ipv4Vrrps = value;
        }

        [Input("ipv6AccessLists")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs>? _ipv6AccessLists;

        /// <summary>
        /// Apply IPv6 access list
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs> Ipv6AccessLists
        {
            get => _ipv6AccessLists ?? (_ipv6AccessLists = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs>());
            set => _ipv6AccessLists = value;
        }

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        [Input("ipv6DhcpHelpers")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs>? _ipv6DhcpHelpers;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs> Ipv6DhcpHelpers
        {
            get => _ipv6DhcpHelpers ?? (_ipv6DhcpHelpers = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs>());
            set => _ipv6DhcpHelpers = value;
        }

        /// <summary>
        /// NAT64 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("ipv6Nat")]
        public Input<bool>? Ipv6Nat { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6NatVariable")]
        public Input<string>? Ipv6NatVariable { get; set; }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        [Input("ipv6Vrrps")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs>? _ipv6Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs> Ipv6Vrrps
        {
            get => _ipv6Vrrps ?? (_ipv6Vrrps = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs>());
            set => _ipv6Vrrps = value;
        }

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// Set MAC-layer address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `rj45`, `sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address Translation on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("nat")]
        public Input<bool>? Nat { get; set; }

        /// <summary>
        /// NAT64 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("nat64Interface")]
        public Input<bool>? Nat64Interface { get; set; }

        /// <summary>
        /// NAT66 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("nat66Interface")]
        public Input<bool>? Nat66Interface { get; set; }

        /// <summary>
        /// Configure NAT Inside Loopback Interface
        /// </summary>
        [Input("natInsideSourceLoopbackInterface")]
        public Input<string>? NatInsideSourceLoopbackInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natInsideSourceLoopbackInterfaceVariable")]
        public Input<string>? NatInsideSourceLoopbackInterfaceVariable { get; set; }

        /// <summary>
        /// Enable port translation(PAT)
        ///   - Default value: `true`
        /// </summary>
        [Input("natOverload")]
        public Input<bool>? NatOverload { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natOverloadVariable")]
        public Input<string>? NatOverloadVariable { get; set; }

        /// <summary>
        /// Ending IP address of NAT Pool Prefix Length
        /// </summary>
        [Input("natPoolPrefixLength")]
        public Input<int>? NatPoolPrefixLength { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natPoolPrefixLengthVariable")]
        public Input<string>? NatPoolPrefixLengthVariable { get; set; }

        /// <summary>
        /// Ending IP address of NAT pool range
        /// </summary>
        [Input("natPoolRangeEnd")]
        public Input<string>? NatPoolRangeEnd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natPoolRangeEndVariable")]
        public Input<string>? NatPoolRangeEndVariable { get; set; }

        /// <summary>
        /// Starting IP address of NAT pool range
        /// </summary>
        [Input("natPoolRangeStart")]
        public Input<string>? NatPoolRangeStart { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natPoolRangeStartVariable")]
        public Input<string>? NatPoolRangeStartVariable { get; set; }

        /// <summary>
        /// NAT type
        ///   - Choices: `interface`, `pool`, `loopback`
        ///   - Default value: `interface`
        /// </summary>
        [Input("natType")]
        public Input<string>? NatType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natTypeVariable")]
        public Input<string>? NatTypeVariable { get; set; }

        /// <summary>
        /// Configure interface as Power-over-Ethernet source
        ///   - Default value: `false`
        /// </summary>
        [Input("poe")]
        public Input<bool>? Poe { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("poeVariable")]
        public Input<string>? PoeVariable { get; set; }

        /// <summary>
        /// Enable/Disable CTS SGT propagation on an interface.
        ///   - Default value: `true`
        /// </summary>
        [Input("propagateSgt")]
        public Input<bool>? PropagateSgt { get; set; }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<int>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<int>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Periodic timer for adaptive QoS in minutes
        ///   - Range: `1`-`720`
        ///   - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Name of QoS map
        /// </summary>
        [Input("qosMap")]
        public Input<string>? QosMap { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVariable")]
        public Input<string>? QosMapVariable { get; set; }

        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        [Input("qosMapVpn")]
        public Input<string>? QosMapVpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVpnVariable")]
        public Input<string>? QosMapVpnVariable { get; set; }

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Input("rewriteRuleName")]
        public Input<string>? RewriteRuleName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rewriteRuleNameVariable")]
        public Input<string>? RewriteRuleNameVariable { get; set; }

        /// <summary>
        /// Enable secondary region
        ///   - Choices: `off`, `secondary-only`, `secondary-shared`
        ///   - Default value: `off`
        /// </summary>
        [Input("secondaryRegion")]
        public Input<string>? SecondaryRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryRegionVariable")]
        public Input<string>? SecondaryRegionVariable { get; set; }

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        ///   - Default value: `false`
        /// </summary>
        [Input("sgtEnforcement")]
        public Input<bool>? SgtEnforcement { get; set; }

        /// <summary>
        /// SGT value between 2 and 65519.
        ///   - Range: `2`-`65519`
        /// </summary>
        [Input("sgtEnforcementSgt")]
        public Input<int>? SgtEnforcementSgt { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sgtEnforcementSgtVariable")]
        public Input<string>? SgtEnforcementSgtVariable { get; set; }

        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("shapingRate")]
        public Input<int>? ShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shapingRateVariable")]
        public Input<string>? ShapingRateVariable { get; set; }

        /// <summary>
        /// Administrative state
        ///   - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        [Input("staticArps")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticArpArgs>? _staticArps;

        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticArpArgs> StaticArps
        {
            get => _staticArps ?? (_staticArps = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticArpArgs>());
            set => _staticArps = value;
        }

        [Input("staticNat66Entries")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs>? _staticNat66Entries;

        /// <summary>
        /// static NAT
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs> StaticNat66Entries
        {
            get => _staticNat66Entries ?? (_staticNat66Entries = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs>());
            set => _staticNat66Entries = value;
        }

        [Input("staticNatEntries")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs>? _staticNatEntries;

        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs> StaticNatEntries
        {
            get => _staticNatEntries ?? (_staticNatEntries = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs>());
            set => _staticNatEntries = value;
        }

        [Input("staticPortForwardEntries")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs>? _staticPortForwardEntries;

        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs> StaticPortForwardEntries
        {
            get => _staticPortForwardEntries ?? (_staticPortForwardEntries = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs>());
            set => _staticPortForwardEntries = value;
        }

        /// <summary>
        /// SGT value between 2 and 65519.
        ///   - Range: `2`-`65519`
        /// </summary>
        [Input("staticSgt")]
        public Input<int>? StaticSgt { get; set; }

        /// <summary>
        /// Indicates that the interface is trustworthy for CTS.
        ///   - Default value: `false`
        /// </summary>
        [Input("staticSgtTrusted")]
        public Input<bool>? StaticSgtTrusted { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("staticSgtVariable")]
        public Input<string>? StaticSgtVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        ///   - Range: `1`-`8947`
        ///   - Default value: `60`
        /// </summary>
        [Input("tcpTimeout")]
        public Input<int>? TcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpTimeoutVariable")]
        public Input<string>? TcpTimeoutVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Tunnels Bandwidth Percent
        ///   - Range: `1`-`99`
        ///   - Default value: `50`
        /// </summary>
        [Input("tunnelBandwidth")]
        public Input<int>? TunnelBandwidth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelBandwidthVariable")]
        public Input<string>? TunnelBandwidthVariable { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny Https
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC
        ///   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        ///   - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC
        ///   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        ///   - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorRestrictVariable")]
        public Input<string>? TunnelInterfaceColorRestrictVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        /// <summary>
        /// Allow Control Connection
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceControlConnections")]
        public Input<bool>? TunnelInterfaceControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceControlConnectionsVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// Extend the TLOC to a remote node over GRE tunnel
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIp")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIpVariable")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIpVariable { get; set; }

        [Input("tunnelInterfaceGroups")]
        private InputList<int>? _tunnelInterfaceGroups;

        /// <summary>
        /// List of groups
        /// </summary>
        public InputList<int> TunnelInterfaceGroups
        {
            get => _tunnelInterfaceGroups ?? (_tunnelInterfaceGroups = new InputList<int>());
            set => _tunnelInterfaceGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds
        ///   - Range: `100`-`600000`
        ///   - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds
        ///   - Range: `12`-`6000`
        ///   - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        ///   - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds
        ///   - Range: `1`-`60`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// CTS SGT Propagation configuration
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfacePropagateSgt")]
        public Input<bool>? TunnelInterfacePropagateSgt { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePropagateSgtVariable")]
        public Input<string>? TunnelInterfacePropagateSgtVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt;
        ///   - Range: `0`-`8`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode
        ///   - Choices: `hub`, `spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        ///   - Range: `1`-`8947`
        ///   - Default value: `1`
        /// </summary>
        [Input("udpTimeout")]
        public Input<int>? UdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("udpTimeoutVariable")]
        public Input<string>? UdpTimeoutVariable { get; set; }

        public CiscoVpnInterfaceFeatureTemplateArgs()
        {
        }
        public static new CiscoVpnInterfaceFeatureTemplateArgs Empty => new CiscoVpnInterfaceFeatureTemplateArgs();
    }

    public sealed class CiscoVpnInterfaceFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("accessLists")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateAccessListGetArgs>? _accessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateAccessListGetArgs> AccessLists
        {
            get => _accessLists ?? (_accessLists = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateAccessListGetArgs>());
            set => _accessLists = value;
        }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("address")]
        public Input<string>? Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("addressVariable")]
        public Input<string>? AddressVariable { get; set; }

        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2147483`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        /// <summary>
        /// Interface auto detect bandwidth
        ///   - Default value: `false`
        /// </summary>
        [Input("autoBandwidthDetect")]
        public Input<bool>? AutoBandwidthDetect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autoBandwidthDetectVariable")]
        public Input<string>? AutoBandwidthDetectVariable { get; set; }

        /// <summary>
        /// Link autonegotiation
        /// </summary>
        [Input("autonegotiate")]
        public Input<bool>? Autonegotiate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("autonegotiateVariable")]
        public Input<string>? AutonegotiateVariable { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        ///   - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Block packets originating from IP address that is not from this source
        ///   - Default value: `false`
        /// </summary>
        [Input("blockNonSourceIp")]
        public Input<bool>? BlockNonSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("blockNonSourceIpVariable")]
        public Input<string>? BlockNonSourceIpVariable { get; set; }

        /// <summary>
        /// Enable core region
        ///   - Choices: `core`, `core-shared`
        ///   - Default value: `core`
        /// </summary>
        [Input("coreRegion")]
        public Input<string>? CoreRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("coreRegionVariable")]
        public Input<string>? CoreRegionVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable DHCP
        ///   - Default value: `false`
        /// </summary>
        [Input("dhcp")]
        public Input<bool>? Dhcp { get; set; }

        /// <summary>
        /// Set administrative distance for DHCP default route
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("dhcpDistance")]
        public Input<int>? DhcpDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dhcpDistanceVariable")]
        public Input<string>? DhcpDistanceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dhcpVariable")]
        public Input<string>? DhcpVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6
        ///   - Default value: `false`
        /// </summary>
        [Input("dhcpv6")]
        public Input<bool>? Dhcpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dhcpv6Variable")]
        public Input<string>? Dhcpv6Variable { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `full`, `half`, `auto`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Enable core region
        ///   - Default value: `false`
        /// </summary>
        [Input("enableCoreRegion")]
        public Input<bool>? EnableCoreRegion { get; set; }

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        ///   - Default value: `false`
        /// </summary>
        [Input("enableSgt")]
        public Input<bool>? EnableSgt { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Input("greTunnelSourceIp")]
        public Input<string>? GreTunnelSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("greTunnelSourceIpVariable")]
        public Input<string>? GreTunnelSourceIpVariable { get; set; }

        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        [Input("greTunnelXconnect")]
        public Input<string>? GreTunnelXconnect { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("greTunnelXconnectVariable")]
        public Input<string>? GreTunnelXconnectVariable { get; set; }

        /// <summary>
        /// Set this option to disable the icmp/icmpv6 redirect packets
        ///   - Default value: `true`
        /// </summary>
        [Input("icmpRedirectDisable")]
        public Input<bool>? IcmpRedirectDisable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("icmpRedirectDisableVariable")]
        public Input<string>? IcmpRedirectDisableVariable { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        /// <summary>
        /// Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        [Input("iperfServer")]
        public Input<string>? IperfServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("iperfServerVariable")]
        public Input<string>? IperfServerVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressGetArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressGetArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressGetArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        [Input("ipv4Vrrps")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpGetArgs>? _ipv4Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpGetArgs> Ipv4Vrrps
        {
            get => _ipv4Vrrps ?? (_ipv4Vrrps = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpGetArgs>());
            set => _ipv4Vrrps = value;
        }

        [Input("ipv6AccessLists")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListGetArgs>? _ipv6AccessLists;

        /// <summary>
        /// Apply IPv6 access list
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListGetArgs> Ipv6AccessLists
        {
            get => _ipv6AccessLists ?? (_ipv6AccessLists = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListGetArgs>());
            set => _ipv6AccessLists = value;
        }

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        [Input("ipv6DhcpHelpers")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperGetArgs>? _ipv6DhcpHelpers;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperGetArgs> Ipv6DhcpHelpers
        {
            get => _ipv6DhcpHelpers ?? (_ipv6DhcpHelpers = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperGetArgs>());
            set => _ipv6DhcpHelpers = value;
        }

        /// <summary>
        /// NAT64 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("ipv6Nat")]
        public Input<bool>? Ipv6Nat { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6NatVariable")]
        public Input<string>? Ipv6NatVariable { get; set; }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressGetArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressGetArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressGetArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        [Input("ipv6Vrrps")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpGetArgs>? _ipv6Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpGetArgs> Ipv6Vrrps
        {
            get => _ipv6Vrrps ?? (_ipv6Vrrps = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpGetArgs>());
            set => _ipv6Vrrps = value;
        }

        /// <summary>
        /// Interval for interface load calculation
        ///   - Range: `30`-`600`
        ///   - Default value: `30`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("loadIntervalVariable")]
        public Input<string>? LoadIntervalVariable { get; set; }

        /// <summary>
        /// Set MAC-layer address
        /// </summary>
        [Input("macAddress")]
        public Input<string>? MacAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("macAddressVariable")]
        public Input<string>? MacAddressVariable { get; set; }

        /// <summary>
        /// Media type
        ///   - Choices: `auto-select`, `rj45`, `sfp`
        /// </summary>
        [Input("mediaType")]
        public Input<string>? MediaType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mediaTypeVariable")]
        public Input<string>? MediaTypeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address Translation on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("nat")]
        public Input<bool>? Nat { get; set; }

        /// <summary>
        /// NAT64 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("nat64Interface")]
        public Input<bool>? Nat64Interface { get; set; }

        /// <summary>
        /// NAT66 on this interface
        ///   - Default value: `false`
        /// </summary>
        [Input("nat66Interface")]
        public Input<bool>? Nat66Interface { get; set; }

        /// <summary>
        /// Configure NAT Inside Loopback Interface
        /// </summary>
        [Input("natInsideSourceLoopbackInterface")]
        public Input<string>? NatInsideSourceLoopbackInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natInsideSourceLoopbackInterfaceVariable")]
        public Input<string>? NatInsideSourceLoopbackInterfaceVariable { get; set; }

        /// <summary>
        /// Enable port translation(PAT)
        ///   - Default value: `true`
        /// </summary>
        [Input("natOverload")]
        public Input<bool>? NatOverload { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natOverloadVariable")]
        public Input<string>? NatOverloadVariable { get; set; }

        /// <summary>
        /// Ending IP address of NAT Pool Prefix Length
        /// </summary>
        [Input("natPoolPrefixLength")]
        public Input<int>? NatPoolPrefixLength { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natPoolPrefixLengthVariable")]
        public Input<string>? NatPoolPrefixLengthVariable { get; set; }

        /// <summary>
        /// Ending IP address of NAT pool range
        /// </summary>
        [Input("natPoolRangeEnd")]
        public Input<string>? NatPoolRangeEnd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natPoolRangeEndVariable")]
        public Input<string>? NatPoolRangeEndVariable { get; set; }

        /// <summary>
        /// Starting IP address of NAT pool range
        /// </summary>
        [Input("natPoolRangeStart")]
        public Input<string>? NatPoolRangeStart { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natPoolRangeStartVariable")]
        public Input<string>? NatPoolRangeStartVariable { get; set; }

        /// <summary>
        /// NAT type
        ///   - Choices: `interface`, `pool`, `loopback`
        ///   - Default value: `interface`
        /// </summary>
        [Input("natType")]
        public Input<string>? NatType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natTypeVariable")]
        public Input<string>? NatTypeVariable { get; set; }

        /// <summary>
        /// Configure interface as Power-over-Ethernet source
        ///   - Default value: `false`
        /// </summary>
        [Input("poe")]
        public Input<bool>? Poe { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("poeVariable")]
        public Input<string>? PoeVariable { get; set; }

        /// <summary>
        /// Enable/Disable CTS SGT propagation on an interface.
        ///   - Default value: `true`
        /// </summary>
        [Input("propagateSgt")]
        public Input<bool>? PropagateSgt { get; set; }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<int>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<int>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Periodic timer for adaptive QoS in minutes
        ///   - Range: `1`-`720`
        ///   - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Name of QoS map
        /// </summary>
        [Input("qosMap")]
        public Input<string>? QosMap { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVariable")]
        public Input<string>? QosMapVariable { get; set; }

        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        [Input("qosMapVpn")]
        public Input<string>? QosMapVpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVpnVariable")]
        public Input<string>? QosMapVpnVariable { get; set; }

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Input("rewriteRuleName")]
        public Input<string>? RewriteRuleName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rewriteRuleNameVariable")]
        public Input<string>? RewriteRuleNameVariable { get; set; }

        /// <summary>
        /// Enable secondary region
        ///   - Choices: `off`, `secondary-only`, `secondary-shared`
        ///   - Default value: `off`
        /// </summary>
        [Input("secondaryRegion")]
        public Input<string>? SecondaryRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryRegionVariable")]
        public Input<string>? SecondaryRegionVariable { get; set; }

        /// <summary>
        /// Enables the interface for CTS SGT authorization and forwarding.
        ///   - Default value: `false`
        /// </summary>
        [Input("sgtEnforcement")]
        public Input<bool>? SgtEnforcement { get; set; }

        /// <summary>
        /// SGT value between 2 and 65519.
        ///   - Range: `2`-`65519`
        /// </summary>
        [Input("sgtEnforcementSgt")]
        public Input<int>? SgtEnforcementSgt { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sgtEnforcementSgtVariable")]
        public Input<string>? SgtEnforcementSgtVariable { get; set; }

        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        ///   - Range: `8`-`100000000`
        /// </summary>
        [Input("shapingRate")]
        public Input<int>? ShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shapingRateVariable")]
        public Input<string>? ShapingRateVariable { get; set; }

        /// <summary>
        /// Administrative state
        ///   - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        [Input("staticArps")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticArpGetArgs>? _staticArps;

        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticArpGetArgs> StaticArps
        {
            get => _staticArps ?? (_staticArps = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticArpGetArgs>());
            set => _staticArps = value;
        }

        [Input("staticNat66Entries")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryGetArgs>? _staticNat66Entries;

        /// <summary>
        /// static NAT
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryGetArgs> StaticNat66Entries
        {
            get => _staticNat66Entries ?? (_staticNat66Entries = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryGetArgs>());
            set => _staticNat66Entries = value;
        }

        [Input("staticNatEntries")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryGetArgs>? _staticNatEntries;

        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryGetArgs> StaticNatEntries
        {
            get => _staticNatEntries ?? (_staticNatEntries = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryGetArgs>());
            set => _staticNatEntries = value;
        }

        [Input("staticPortForwardEntries")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryGetArgs>? _staticPortForwardEntries;

        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryGetArgs> StaticPortForwardEntries
        {
            get => _staticPortForwardEntries ?? (_staticPortForwardEntries = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryGetArgs>());
            set => _staticPortForwardEntries = value;
        }

        /// <summary>
        /// SGT value between 2 and 65519.
        ///   - Range: `2`-`65519`
        /// </summary>
        [Input("staticSgt")]
        public Input<int>? StaticSgt { get; set; }

        /// <summary>
        /// Indicates that the interface is trustworthy for CTS.
        ///   - Default value: `false`
        /// </summary>
        [Input("staticSgtTrusted")]
        public Input<bool>? StaticSgtTrusted { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("staticSgtVariable")]
        public Input<string>? StaticSgtVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        ///   - Range: `1`-`8947`
        ///   - Default value: `60`
        /// </summary>
        [Input("tcpTimeout")]
        public Input<int>? TcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpTimeoutVariable")]
        public Input<string>? TcpTimeoutVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Tunnels Bandwidth Percent
        ///   - Range: `1`-`99`
        ///   - Default value: `50`
        /// </summary>
        [Input("tunnelBandwidth")]
        public Input<int>? TunnelBandwidth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelBandwidthVariable")]
        public Input<string>? TunnelBandwidthVariable { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny Https
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC
        ///   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
        ///   - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC
        ///   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
        ///   - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorRestrictVariable")]
        public Input<string>? TunnelInterfaceColorRestrictVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        /// <summary>
        /// Allow Control Connection
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceControlConnections")]
        public Input<bool>? TunnelInterfaceControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceControlConnectionsVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationGetArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationGetArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationGetArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// Extend the TLOC to a remote node over GRE tunnel
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIp")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGreTunnelDestinationIpVariable")]
        public Input<string>? TunnelInterfaceGreTunnelDestinationIpVariable { get; set; }

        [Input("tunnelInterfaceGroups")]
        private InputList<int>? _tunnelInterfaceGroups;

        /// <summary>
        /// List of groups
        /// </summary>
        public InputList<int> TunnelInterfaceGroups
        {
            get => _tunnelInterfaceGroups ?? (_tunnelInterfaceGroups = new InputList<int>());
            set => _tunnelInterfaceGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds
        ///   - Range: `100`-`600000`
        ///   - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds
        ///   - Range: `12`-`6000`
        ///   - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        ///   - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds
        ///   - Range: `1`-`60`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface
        ///   - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// CTS SGT Propagation configuration
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfacePropagateSgt")]
        public Input<bool>? TunnelInterfacePropagateSgt { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePropagateSgtVariable")]
        public Input<string>? TunnelInterfacePropagateSgtVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        ///   - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only
        ///   - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt;
        ///   - Range: `0`-`8`
        ///   - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode
        ///   - Choices: `hub`, `spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        ///   - Range: `1`-`8947`
        ///   - Default value: `1`
        /// </summary>
        [Input("udpTimeout")]
        public Input<int>? UdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("udpTimeoutVariable")]
        public Input<string>? UdpTimeoutVariable { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoVpnInterfaceFeatureTemplateState()
        {
        }
        public static new CiscoVpnInterfaceFeatureTemplateState Empty => new CiscoVpnInterfaceFeatureTemplateState();
    }
}
