// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetServiceMulticastFeature
    {
        /// <summary>
        /// This data source can read the Service Multicast Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceMulticastFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceMulticastFeatureResult> InvokeAsync(GetServiceMulticastFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceMulticastFeatureResult>("sdwan:index/getServiceMulticastFeature:getServiceMulticastFeature", args ?? new GetServiceMulticastFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service Multicast Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceMulticastFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceMulticastFeatureResult> Invoke(GetServiceMulticastFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceMulticastFeatureResult>("sdwan:index/getServiceMulticastFeature:getServiceMulticastFeature", args ?? new GetServiceMulticastFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service Multicast Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceMulticastFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceMulticastFeatureResult> Invoke(GetServiceMulticastFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceMulticastFeatureResult>("sdwan:index/getServiceMulticastFeature:getServiceMulticastFeature", args ?? new GetServiceMulticastFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceMulticastFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetServiceMulticastFeatureArgs()
        {
        }
        public static new GetServiceMulticastFeatureArgs Empty => new GetServiceMulticastFeatureArgs();
    }

    public sealed class GetServiceMulticastFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetServiceMulticastFeatureInvokeArgs()
        {
        }
        public static new GetServiceMulticastFeatureInvokeArgs Empty => new GetServiceMulticastFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceMulticastFeatureResult
    {
        /// <summary>
        /// Enable or disable RP Announce
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeatureAutoRpAnnounceResult> AutoRpAnnounces;
        /// <summary>
        /// Enable or disable RP Discovery
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeatureAutoRpDiscoveryResult> AutoRpDiscoveries;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enable or disable auto-RP
        /// </summary>
        public readonly bool EnableAutoRp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnableAutoRpVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set IGMP interface parameters
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeatureIgmpInterfaceResult> IgmpInterfaces;
        /// <summary>
        /// Replicator is local to this device
        /// </summary>
        public readonly bool LocalReplicator;
        /// <summary>
        /// Set number of joins per group the router supports
        /// </summary>
        public readonly int LocalReplicatorThreshold;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LocalReplicatorThresholdVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LocalReplicatorVariable;
        /// <summary>
        /// Set MSDP refresh timer
        /// </summary>
        public readonly int MsdpConnectionRetryInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MsdpConnectionRetryIntervalVariable;
        /// <summary>
        /// multicast MSDP peer
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeatureMsdpGroupResult> MsdpGroups;
        /// <summary>
        /// Set MSDP originator ID
        /// </summary>
        public readonly string MsdpOriginatorId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MsdpOriginatorIdVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// bsr candidate Attributes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeaturePimBsrCandidateResult> PimBsrCandidates;
        /// <summary>
        /// Set RP Discovery Scope
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeaturePimBsrRpCandidateResult> PimBsrRpCandidates;
        /// <summary>
        /// Set PIM interface parameters
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeaturePimInterfaceResult> PimInterfaces;
        /// <summary>
        /// Set Access List for PIM SSM
        /// </summary>
        public readonly string PimSourceSpecificMulticastAccessList;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PimSourceSpecificMulticastAccessListVariable;
        /// <summary>
        /// turn SSM on/off
        /// </summary>
        public readonly bool PimSourceSpecificMulticastEnable;
        /// <summary>
        /// Set when PIM router joins the SPT (kbps)
        /// </summary>
        public readonly string PimSptThreshold;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PimSptThresholdVariable;
        /// <summary>
        /// Shortest Path Tree (SPT) Only Mode
        /// </summary>
        public readonly bool SptOnly;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SptOnlyVariable;
        /// <summary>
        /// Set Static RP Address(es)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceMulticastFeatureStaticRpAddressResult> StaticRpAddresses;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetServiceMulticastFeatureResult(
            ImmutableArray<Outputs.GetServiceMulticastFeatureAutoRpAnnounceResult> autoRpAnnounces,

            ImmutableArray<Outputs.GetServiceMulticastFeatureAutoRpDiscoveryResult> autoRpDiscoveries,

            string description,

            bool enableAutoRp,

            string enableAutoRpVariable,

            string featureProfileId,

            string id,

            ImmutableArray<Outputs.GetServiceMulticastFeatureIgmpInterfaceResult> igmpInterfaces,

            bool localReplicator,

            int localReplicatorThreshold,

            string localReplicatorThresholdVariable,

            string localReplicatorVariable,

            int msdpConnectionRetryInterval,

            string msdpConnectionRetryIntervalVariable,

            ImmutableArray<Outputs.GetServiceMulticastFeatureMsdpGroupResult> msdpGroups,

            string msdpOriginatorId,

            string msdpOriginatorIdVariable,

            string name,

            ImmutableArray<Outputs.GetServiceMulticastFeaturePimBsrCandidateResult> pimBsrCandidates,

            ImmutableArray<Outputs.GetServiceMulticastFeaturePimBsrRpCandidateResult> pimBsrRpCandidates,

            ImmutableArray<Outputs.GetServiceMulticastFeaturePimInterfaceResult> pimInterfaces,

            string pimSourceSpecificMulticastAccessList,

            string pimSourceSpecificMulticastAccessListVariable,

            bool pimSourceSpecificMulticastEnable,

            string pimSptThreshold,

            string pimSptThresholdVariable,

            bool sptOnly,

            string sptOnlyVariable,

            ImmutableArray<Outputs.GetServiceMulticastFeatureStaticRpAddressResult> staticRpAddresses,

            int version)
        {
            AutoRpAnnounces = autoRpAnnounces;
            AutoRpDiscoveries = autoRpDiscoveries;
            Description = description;
            EnableAutoRp = enableAutoRp;
            EnableAutoRpVariable = enableAutoRpVariable;
            FeatureProfileId = featureProfileId;
            Id = id;
            IgmpInterfaces = igmpInterfaces;
            LocalReplicator = localReplicator;
            LocalReplicatorThreshold = localReplicatorThreshold;
            LocalReplicatorThresholdVariable = localReplicatorThresholdVariable;
            LocalReplicatorVariable = localReplicatorVariable;
            MsdpConnectionRetryInterval = msdpConnectionRetryInterval;
            MsdpConnectionRetryIntervalVariable = msdpConnectionRetryIntervalVariable;
            MsdpGroups = msdpGroups;
            MsdpOriginatorId = msdpOriginatorId;
            MsdpOriginatorIdVariable = msdpOriginatorIdVariable;
            Name = name;
            PimBsrCandidates = pimBsrCandidates;
            PimBsrRpCandidates = pimBsrRpCandidates;
            PimInterfaces = pimInterfaces;
            PimSourceSpecificMulticastAccessList = pimSourceSpecificMulticastAccessList;
            PimSourceSpecificMulticastAccessListVariable = pimSourceSpecificMulticastAccessListVariable;
            PimSourceSpecificMulticastEnable = pimSourceSpecificMulticastEnable;
            PimSptThreshold = pimSptThreshold;
            PimSptThresholdVariable = pimSptThresholdVariable;
            SptOnly = sptOnly;
            SptOnlyVariable = sptOnlyVariable;
            StaticRpAddresses = staticRpAddresses;
            Version = version;
        }
    }
}
