// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetServiceDhcpServerFeature
    {
        /// <summary>
        /// This data source can read the Service DHCP Server Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceDhcpServerFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceDhcpServerFeatureResult> InvokeAsync(GetServiceDhcpServerFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceDhcpServerFeatureResult>("sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature", args ?? new GetServiceDhcpServerFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service DHCP Server Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceDhcpServerFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceDhcpServerFeatureResult> Invoke(GetServiceDhcpServerFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceDhcpServerFeatureResult>("sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature", args ?? new GetServiceDhcpServerFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service DHCP Server Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceDhcpServerFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceDhcpServerFeatureResult> Invoke(GetServiceDhcpServerFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceDhcpServerFeatureResult>("sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature", args ?? new GetServiceDhcpServerFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceDhcpServerFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetServiceDhcpServerFeatureArgs()
        {
        }
        public static new GetServiceDhcpServerFeatureArgs Empty => new GetServiceDhcpServerFeatureArgs();
    }

    public sealed class GetServiceDhcpServerFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetServiceDhcpServerFeatureInvokeArgs()
        {
        }
        public static new GetServiceDhcpServerFeatureInvokeArgs Empty => new GetServiceDhcpServerFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceDhcpServerFeatureResult
    {
        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        public readonly string DefaultGateway;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DefaultGatewayVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DnsServersVariable;
        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DomainNameVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ExcludeVariable;
        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        public readonly ImmutableArray<string> Excludes;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set MTU on interface to DHCP client
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid
        /// </summary>
        public readonly int LeaseTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LeaseTimeVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network Address
        /// </summary>
        public readonly string NetworkAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NetworkAddressVariable;
        /// <summary>
        /// Configure Options Code
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceDhcpServerFeatureOptionCodeResult> OptionCodes;
        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceDhcpServerFeatureStaticLeaseResult> StaticLeases;
        /// <summary>
        /// Subnet Mask
        /// </summary>
        public readonly string SubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SubnetMaskVariable;
        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        public readonly ImmutableArray<string> TftpServers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TftpServersVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetServiceDhcpServerFeatureResult(
            string defaultGateway,

            string defaultGatewayVariable,

            string description,

            ImmutableArray<string> dnsServers,

            string dnsServersVariable,

            string domainName,

            string domainNameVariable,

            string excludeVariable,

            ImmutableArray<string> excludes,

            string featureProfileId,

            string id,

            int interfaceMtu,

            string interfaceMtuVariable,

            int leaseTime,

            string leaseTimeVariable,

            string name,

            string networkAddress,

            string networkAddressVariable,

            ImmutableArray<Outputs.GetServiceDhcpServerFeatureOptionCodeResult> optionCodes,

            ImmutableArray<Outputs.GetServiceDhcpServerFeatureStaticLeaseResult> staticLeases,

            string subnetMask,

            string subnetMaskVariable,

            ImmutableArray<string> tftpServers,

            string tftpServersVariable,

            int version)
        {
            DefaultGateway = defaultGateway;
            DefaultGatewayVariable = defaultGatewayVariable;
            Description = description;
            DnsServers = dnsServers;
            DnsServersVariable = dnsServersVariable;
            DomainName = domainName;
            DomainNameVariable = domainNameVariable;
            ExcludeVariable = excludeVariable;
            Excludes = excludes;
            FeatureProfileId = featureProfileId;
            Id = id;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            LeaseTime = leaseTime;
            LeaseTimeVariable = leaseTimeVariable;
            Name = name;
            NetworkAddress = networkAddress;
            NetworkAddressVariable = networkAddressVariable;
            OptionCodes = optionCodes;
            StaticLeases = staticLeases;
            SubnetMask = subnetMask;
            SubnetMaskVariable = subnetMaskVariable;
            TftpServers = tftpServers;
            TftpServersVariable = tftpServersVariable;
            Version = version;
        }
    }
}
