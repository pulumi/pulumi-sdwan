// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetGpsFeatureTemplate
    {
        /// <summary>
        /// This data source can read the gps feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetGpsFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGpsFeatureTemplateResult> InvokeAsync(GetGpsFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGpsFeatureTemplateResult>("sdwan:index/getGpsFeatureTemplate:getGpsFeatureTemplate", args ?? new GetGpsFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the gps feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetGpsFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGpsFeatureTemplateResult> Invoke(GetGpsFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGpsFeatureTemplateResult>("sdwan:index/getGpsFeatureTemplate:getGpsFeatureTemplate", args ?? new GetGpsFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the gps feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetGpsFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGpsFeatureTemplateResult> Invoke(GetGpsFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetGpsFeatureTemplateResult>("sdwan:index/getGpsFeatureTemplate:getGpsFeatureTemplate", args ?? new GetGpsFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGpsFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetGpsFeatureTemplateArgs()
        {
        }
        public static new GetGpsFeatureTemplateArgs Empty => new GetGpsFeatureTemplateArgs();
    }

    public sealed class GetGpsFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetGpsFeatureTemplateInvokeArgs()
        {
        }
        public static new GetGpsFeatureTemplateInvokeArgs Empty => new GetGpsFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetGpsFeatureTemplateResult
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Destination address
        /// </summary>
        public readonly string DestinationAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DestinationAddressVariable;
        /// <summary>
        /// Destination port
        /// </summary>
        public readonly int DestinationPort;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DestinationPortVariable;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Enable/disable GPS
        /// </summary>
        public readonly bool Enable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnableVariable;
        /// <summary>
        /// Select GPS mode
        /// </summary>
        public readonly string GpsMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GpsModeVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Enable/disable NMEA data
        /// </summary>
        public readonly bool Nmea;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NmeaVariable;
        /// <summary>
        /// Source address
        /// </summary>
        public readonly string SourceAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SourceAddressVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetGpsFeatureTemplateResult(
            string description,

            string destinationAddress,

            string destinationAddressVariable,

            int destinationPort,

            string destinationPortVariable,

            ImmutableArray<string> deviceTypes,

            bool enable,

            string enableVariable,

            string gpsMode,

            string gpsModeVariable,

            string id,

            string name,

            bool nmea,

            string nmeaVariable,

            string sourceAddress,

            string sourceAddressVariable,

            string templateType,

            int version)
        {
            Description = description;
            DestinationAddress = destinationAddress;
            DestinationAddressVariable = destinationAddressVariable;
            DestinationPort = destinationPort;
            DestinationPortVariable = destinationPortVariable;
            DeviceTypes = deviceTypes;
            Enable = enable;
            EnableVariable = enableVariable;
            GpsMode = gpsMode;
            GpsModeVariable = gpsModeVariable;
            Id = id;
            Name = name;
            Nmea = nmea;
            NmeaVariable = nmeaVariable;
            SourceAddress = sourceAddress;
            SourceAddressVariable = sourceAddressVariable;
            TemplateType = templateType;
            Version = version;
        }
    }
}
