// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service Routing BGP Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.ServiceRoutingBgpFeature("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         AsNumber = 429,
    ///         RouterId = "1.2.3.4",
    ///         PropagateAsPath = false,
    ///         PropagateCommunity = false,
    ///         ExternalRoutesDistance = 20,
    ///         InternalRoutesDistance = 200,
    ///         LocalRoutesDistance = 20,
    ///         KeepaliveTime = 60,
    ///         HoldTime = 180,
    ///         AlwaysCompareMed = false,
    ///         DeterministicMed = false,
    ///         MissingMedAsWorst = false,
    ///         CompareRouterId = false,
    ///         MultipathRelax = false,
    ///         Ipv4Neighbors = new[]
    ///         {
    ///             new Sdwan.Inputs.ServiceRoutingBgpFeatureIpv4NeighborArgs
    ///             {
    ///                 Address = "1.2.3.4",
    ///                 Description = "neighbor1",
    ///                 Shutdown = false,
    ///                 Remote_as = 200,
    ///                 Local_as = 200,
    ///                 Keepalive_time = 40,
    ///                 Hold_time = 200,
    ///                 Update_source_interface = "GigabitEthernet0",
    ///                 Next_hop_self = false,
    ///                 Send_community = true,
    ///                 Send_extended_community = true,
    ///                 Ebgp_multihop = 1,
    ///                 Password = "myPassword",
    ///                 Send_label = true,
    ///                 As_override = false,
    ///                 Allowas_in_number = 1,
    ///                 Address_families = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "familyType", "ipv4-unicast" },
    ///                         { "policyType", "restart" },
    ///                         { "restartMaxNumberOfPrefixes", 2000 },
    ///                         { "restartThreshold", 75 },
    ///                         { "restartInterval", 30 },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv6Neighbors = new[]
    ///         {
    ///             new Sdwan.Inputs.ServiceRoutingBgpFeatureIpv6NeighborArgs
    ///             {
    ///                 Address = "2001::1",
    ///                 Description = "neighbor2",
    ///                 Shutdown = false,
    ///                 Remote_as = 200,
    ///                 Local_as = 200,
    ///                 Keepalive_time = 180,
    ///                 Hold_time = 60,
    ///                 Update_source_interface = "Loopback1",
    ///                 Next_hop_self = true,
    ///                 Send_community = true,
    ///                 Send_extended_community = true,
    ///                 Ebgp_multihop = 3,
    ///                 Password = "myPassword",
    ///                 As_override = true,
    ///                 Allowas_in_number = 3,
    ///                 Address_families = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "familyType", "ipv6-unicast" },
    ///                         { "maxNumberOfPrefixes", 2000 },
    ///                         { "threshold", 75 },
    ///                         { "policyType", "restart" },
    ///                         { "restartInterval", 30 },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv4AggregateAddresses = new[]
    ///         {
    ///             new Sdwan.Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressArgs
    ///             {
    ///                 Network_address = "10.10.0.0",
    ///                 Subnet_mask = "255.255.0.0",
    ///                 As_set_path = false,
    ///                 Summary_only = false,
    ///             },
    ///         },
    ///         Ipv4Networks = new[]
    ///         {
    ///             new Sdwan.Inputs.ServiceRoutingBgpFeatureIpv4NetworkArgs
    ///             {
    ///                 Network_address = "10.10.0.0",
    ///                 Subnet_mask = "255.255.0.0",
    ///             },
    ///         },
    ///         Ipv4EibgpMaximumPaths = 1,
    ///         Ipv4Originate = false,
    ///         Ipv4TableMapFilter = false,
    ///         Ipv6AggregateAddresses = new[]
    ///         {
    ///             new Sdwan.Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressArgs
    ///             {
    ///                 Aggregate_prefix = "3001::1/128",
    ///                 As_set_path = false,
    ///                 Summary_only = false,
    ///             },
    ///         },
    ///         Ipv6Networks = new[]
    ///         {
    ///             new Sdwan.Inputs.ServiceRoutingBgpFeatureIpv6NetworkArgs
    ///             {
    ///                 Network_prefix = "2001:0DB8:0000:000b::/64",
    ///             },
    ///         },
    ///         Ipv6EibgpMaximumPaths = 2,
    ///         Ipv6Originate = true,
    ///         Ipv6TableMapFilter = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "service_routing_bgp_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceRoutingBgpFeature:ServiceRoutingBgpFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceRoutingBgpFeature:ServiceRoutingBgpFeature")]
    public partial class ServiceRoutingBgpFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("alwaysCompareMed")]
        public Output<bool?> AlwaysCompareMed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("alwaysCompareMedVariable")]
        public Output<string?> AlwaysCompareMedVariable { get; private set; } = null!;

        /// <summary>
        /// Set autonomous system number &lt;1..4294967295&gt; or &lt;XX.YY&gt;
        /// </summary>
        [Output("asNumber")]
        public Output<int?> AsNumber { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("asNumberVariable")]
        public Output<string?> AsNumberVariable { get; private set; } = null!;

        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("compareRouterId")]
        public Output<bool?> CompareRouterId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("compareRouterIdVariable")]
        public Output<string?> CompareRouterIdVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("deterministicMed")]
        public Output<bool?> DeterministicMed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("deterministicMedVariable")]
        public Output<string?> DeterministicMedVariable { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for external BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Output("externalRoutesDistance")]
        public Output<int?> ExternalRoutesDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("externalRoutesDistanceVariable")]
        public Output<string?> ExternalRoutesDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Interval (seconds) not receiving a keepalive message declares a BGP peer down
        ///   - Range: `0`-`65535`
        ///   - Default value: `180`
        /// </summary>
        [Output("holdTime")]
        public Output<int?> HoldTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("holdTimeVariable")]
        public Output<string?> HoldTimeVariable { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for internal BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `200`
        /// </summary>
        [Output("internalRoutesDistance")]
        public Output<int?> InternalRoutesDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("internalRoutesDistanceVariable")]
        public Output<string?> InternalRoutesDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// Aggregate prefixes in specific range
        /// </summary>
        [Output("ipv4AggregateAddresses")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv4AggregateAddress>> Ipv4AggregateAddresses { get; private set; } = null!;

        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        ///   - Range: `1`-`32`
        /// </summary>
        [Output("ipv4EibgpMaximumPaths")]
        public Output<int?> Ipv4EibgpMaximumPaths { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4EibgpMaximumPathsVariable")]
        public Output<string?> Ipv4EibgpMaximumPathsVariable { get; private set; } = null!;

        /// <summary>
        /// Set BGP IPv4 neighbors
        /// </summary>
        [Output("ipv4Neighbors")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv4Neighbor>> Ipv4Neighbors { get; private set; } = null!;

        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        [Output("ipv4Networks")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv4Network>> Ipv4Networks { get; private set; } = null!;

        /// <summary>
        /// BGP Default Information Originate
        ///   - Default value: `False`
        /// </summary>
        [Output("ipv4Originate")]
        public Output<bool?> Ipv4Originate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4OriginateVariable")]
        public Output<string?> Ipv4OriginateVariable { get; private set; } = null!;

        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        [Output("ipv4Redistributes")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv4Redistribute>> Ipv4Redistributes { get; private set; } = null!;

        /// <summary>
        /// Table map filtered or not
        ///   - Default value: `False`
        /// </summary>
        [Output("ipv4TableMapFilter")]
        public Output<bool?> Ipv4TableMapFilter { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4TableMapFilterVariable")]
        public Output<string?> Ipv4TableMapFilterVariable { get; private set; } = null!;

        [Output("ipv4TableMapRoutePolicyId")]
        public Output<string?> Ipv4TableMapRoutePolicyId { get; private set; } = null!;

        /// <summary>
        /// IPv6 Aggregate prefixes in specific range
        /// </summary>
        [Output("ipv6AggregateAddresses")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv6AggregateAddress>> Ipv6AggregateAddresses { get; private set; } = null!;

        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        ///   - Range: `1`-`32`
        /// </summary>
        [Output("ipv6EibgpMaximumPaths")]
        public Output<int?> Ipv6EibgpMaximumPaths { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6EibgpMaximumPathsVariable")]
        public Output<string?> Ipv6EibgpMaximumPathsVariable { get; private set; } = null!;

        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        [Output("ipv6Neighbors")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv6Neighbor>> Ipv6Neighbors { get; private set; } = null!;

        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        [Output("ipv6Networks")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv6Network>> Ipv6Networks { get; private set; } = null!;

        /// <summary>
        /// BGP Default Information Originate
        ///   - Default value: `False`
        /// </summary>
        [Output("ipv6Originate")]
        public Output<bool?> Ipv6Originate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6OriginateVariable")]
        public Output<string?> Ipv6OriginateVariable { get; private set; } = null!;

        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        [Output("ipv6Redistributes")]
        public Output<ImmutableArray<Outputs.ServiceRoutingBgpFeatureIpv6Redistribute>> Ipv6Redistributes { get; private set; } = null!;

        /// <summary>
        /// Table map filtered or not
        ///   - Default value: `False`
        /// </summary>
        [Output("ipv6TableMapFilter")]
        public Output<bool?> Ipv6TableMapFilter { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6TableMapFilterVariable")]
        public Output<string?> Ipv6TableMapFilterVariable { get; private set; } = null!;

        [Output("ipv6TableMapRoutePolicyId")]
        public Output<string?> Ipv6TableMapRoutePolicyId { get; private set; } = null!;

        /// <summary>
        /// Interval (seconds) of keepalive messages sent to its BGP peer
        ///   - Range: `0`-`65535`
        ///   - Default value: `60`
        /// </summary>
        [Output("keepaliveTime")]
        public Output<int?> KeepaliveTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("keepaliveTimeVariable")]
        public Output<string?> KeepaliveTimeVariable { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for local BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Output("localRoutesDistance")]
        public Output<int?> LocalRoutesDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("localRoutesDistanceVariable")]
        public Output<string?> LocalRoutesDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("missingMedAsWorst")]
        public Output<bool?> MissingMedAsWorst { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("missingMedAsWorstVariable")]
        public Output<string?> MissingMedAsWorstVariable { get; private set; } = null!;

        /// <summary>
        /// Ignore AS for multipath selection
        ///   - Default value: `False`
        /// </summary>
        [Output("multipathRelax")]
        public Output<bool?> MultipathRelax { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("multipathRelaxVariable")]
        public Output<string?> MultipathRelaxVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Propagate AS Path
        ///   - Default value: `False`
        /// </summary>
        [Output("propagateAsPath")]
        public Output<bool?> PropagateAsPath { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("propagateAsPathVariable")]
        public Output<string?> PropagateAsPathVariable { get; private set; } = null!;

        /// <summary>
        /// Propagate Community
        ///   - Default value: `False`
        /// </summary>
        [Output("propagateCommunity")]
        public Output<bool?> PropagateCommunity { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("propagateCommunityVariable")]
        public Output<string?> PropagateCommunityVariable { get; private set; } = null!;

        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        [Output("routerId")]
        public Output<string?> RouterId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("routerIdVariable")]
        public Output<string?> RouterIdVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceRoutingBgpFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceRoutingBgpFeature(string name, ServiceRoutingBgpFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceRoutingBgpFeature:ServiceRoutingBgpFeature", name, args ?? new ServiceRoutingBgpFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceRoutingBgpFeature(string name, Input<string> id, ServiceRoutingBgpFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceRoutingBgpFeature:ServiceRoutingBgpFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceRoutingBgpFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceRoutingBgpFeature Get(string name, Input<string> id, ServiceRoutingBgpFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceRoutingBgpFeature(name, id, state, options);
        }
    }

    public sealed class ServiceRoutingBgpFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("alwaysCompareMed")]
        public Input<bool>? AlwaysCompareMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("alwaysCompareMedVariable")]
        public Input<string>? AlwaysCompareMedVariable { get; set; }

        /// <summary>
        /// Set autonomous system number &lt;1..4294967295&gt; or &lt;XX.YY&gt;
        /// </summary>
        [Input("asNumber")]
        public Input<int>? AsNumber { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("asNumberVariable")]
        public Input<string>? AsNumberVariable { get; set; }

        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("compareRouterId")]
        public Input<bool>? CompareRouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("compareRouterIdVariable")]
        public Input<string>? CompareRouterIdVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("deterministicMed")]
        public Input<bool>? DeterministicMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deterministicMedVariable")]
        public Input<string>? DeterministicMedVariable { get; set; }

        /// <summary>
        /// Set administrative distance for external BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("externalRoutesDistance")]
        public Input<int>? ExternalRoutesDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("externalRoutesDistanceVariable")]
        public Input<string>? ExternalRoutesDistanceVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Interval (seconds) not receiving a keepalive message declares a BGP peer down
        ///   - Range: `0`-`65535`
        ///   - Default value: `180`
        /// </summary>
        [Input("holdTime")]
        public Input<int>? HoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("holdTimeVariable")]
        public Input<string>? HoldTimeVariable { get; set; }

        /// <summary>
        /// Set administrative distance for internal BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `200`
        /// </summary>
        [Input("internalRoutesDistance")]
        public Input<int>? InternalRoutesDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("internalRoutesDistanceVariable")]
        public Input<string>? InternalRoutesDistanceVariable { get; set; }

        [Input("ipv4AggregateAddresses")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressArgs>? _ipv4AggregateAddresses;

        /// <summary>
        /// Aggregate prefixes in specific range
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressArgs> Ipv4AggregateAddresses
        {
            get => _ipv4AggregateAddresses ?? (_ipv4AggregateAddresses = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressArgs>());
            set => _ipv4AggregateAddresses = value;
        }

        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        ///   - Range: `1`-`32`
        /// </summary>
        [Input("ipv4EibgpMaximumPaths")]
        public Input<int>? Ipv4EibgpMaximumPaths { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4EibgpMaximumPathsVariable")]
        public Input<string>? Ipv4EibgpMaximumPathsVariable { get; set; }

        [Input("ipv4Neighbors")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4NeighborArgs>? _ipv4Neighbors;

        /// <summary>
        /// Set BGP IPv4 neighbors
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4NeighborArgs> Ipv4Neighbors
        {
            get => _ipv4Neighbors ?? (_ipv4Neighbors = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4NeighborArgs>());
            set => _ipv4Neighbors = value;
        }

        [Input("ipv4Networks")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4NetworkArgs>? _ipv4Networks;

        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4NetworkArgs> Ipv4Networks
        {
            get => _ipv4Networks ?? (_ipv4Networks = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4NetworkArgs>());
            set => _ipv4Networks = value;
        }

        /// <summary>
        /// BGP Default Information Originate
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv4Originate")]
        public Input<bool>? Ipv4Originate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4OriginateVariable")]
        public Input<string>? Ipv4OriginateVariable { get; set; }

        [Input("ipv4Redistributes")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4RedistributeArgs>? _ipv4Redistributes;

        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4RedistributeArgs> Ipv4Redistributes
        {
            get => _ipv4Redistributes ?? (_ipv4Redistributes = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4RedistributeArgs>());
            set => _ipv4Redistributes = value;
        }

        /// <summary>
        /// Table map filtered or not
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv4TableMapFilter")]
        public Input<bool>? Ipv4TableMapFilter { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4TableMapFilterVariable")]
        public Input<string>? Ipv4TableMapFilterVariable { get; set; }

        [Input("ipv4TableMapRoutePolicyId")]
        public Input<string>? Ipv4TableMapRoutePolicyId { get; set; }

        [Input("ipv6AggregateAddresses")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressArgs>? _ipv6AggregateAddresses;

        /// <summary>
        /// IPv6 Aggregate prefixes in specific range
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressArgs> Ipv6AggregateAddresses
        {
            get => _ipv6AggregateAddresses ?? (_ipv6AggregateAddresses = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressArgs>());
            set => _ipv6AggregateAddresses = value;
        }

        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        ///   - Range: `1`-`32`
        /// </summary>
        [Input("ipv6EibgpMaximumPaths")]
        public Input<int>? Ipv6EibgpMaximumPaths { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6EibgpMaximumPathsVariable")]
        public Input<string>? Ipv6EibgpMaximumPathsVariable { get; set; }

        [Input("ipv6Neighbors")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6NeighborArgs>? _ipv6Neighbors;

        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6NeighborArgs> Ipv6Neighbors
        {
            get => _ipv6Neighbors ?? (_ipv6Neighbors = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6NeighborArgs>());
            set => _ipv6Neighbors = value;
        }

        [Input("ipv6Networks")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6NetworkArgs>? _ipv6Networks;

        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6NetworkArgs> Ipv6Networks
        {
            get => _ipv6Networks ?? (_ipv6Networks = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6NetworkArgs>());
            set => _ipv6Networks = value;
        }

        /// <summary>
        /// BGP Default Information Originate
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv6Originate")]
        public Input<bool>? Ipv6Originate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6OriginateVariable")]
        public Input<string>? Ipv6OriginateVariable { get; set; }

        [Input("ipv6Redistributes")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6RedistributeArgs>? _ipv6Redistributes;

        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6RedistributeArgs> Ipv6Redistributes
        {
            get => _ipv6Redistributes ?? (_ipv6Redistributes = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6RedistributeArgs>());
            set => _ipv6Redistributes = value;
        }

        /// <summary>
        /// Table map filtered or not
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv6TableMapFilter")]
        public Input<bool>? Ipv6TableMapFilter { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6TableMapFilterVariable")]
        public Input<string>? Ipv6TableMapFilterVariable { get; set; }

        [Input("ipv6TableMapRoutePolicyId")]
        public Input<string>? Ipv6TableMapRoutePolicyId { get; set; }

        /// <summary>
        /// Interval (seconds) of keepalive messages sent to its BGP peer
        ///   - Range: `0`-`65535`
        ///   - Default value: `60`
        /// </summary>
        [Input("keepaliveTime")]
        public Input<int>? KeepaliveTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("keepaliveTimeVariable")]
        public Input<string>? KeepaliveTimeVariable { get; set; }

        /// <summary>
        /// Set administrative distance for local BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("localRoutesDistance")]
        public Input<int>? LocalRoutesDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("localRoutesDistanceVariable")]
        public Input<string>? LocalRoutesDistanceVariable { get; set; }

        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("missingMedAsWorst")]
        public Input<bool>? MissingMedAsWorst { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("missingMedAsWorstVariable")]
        public Input<string>? MissingMedAsWorstVariable { get; set; }

        /// <summary>
        /// Ignore AS for multipath selection
        ///   - Default value: `False`
        /// </summary>
        [Input("multipathRelax")]
        public Input<bool>? MultipathRelax { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("multipathRelaxVariable")]
        public Input<string>? MultipathRelaxVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Propagate AS Path
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateAsPath")]
        public Input<bool>? PropagateAsPath { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateAsPathVariable")]
        public Input<string>? PropagateAsPathVariable { get; set; }

        /// <summary>
        /// Propagate Community
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateCommunity")]
        public Input<bool>? PropagateCommunity { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateCommunityVariable")]
        public Input<string>? PropagateCommunityVariable { get; set; }

        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("routerIdVariable")]
        public Input<string>? RouterIdVariable { get; set; }

        public ServiceRoutingBgpFeatureArgs()
        {
        }
        public static new ServiceRoutingBgpFeatureArgs Empty => new ServiceRoutingBgpFeatureArgs();
    }

    public sealed class ServiceRoutingBgpFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("alwaysCompareMed")]
        public Input<bool>? AlwaysCompareMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("alwaysCompareMedVariable")]
        public Input<string>? AlwaysCompareMedVariable { get; set; }

        /// <summary>
        /// Set autonomous system number &lt;1..4294967295&gt; or &lt;XX.YY&gt;
        /// </summary>
        [Input("asNumber")]
        public Input<int>? AsNumber { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("asNumberVariable")]
        public Input<string>? AsNumberVariable { get; set; }

        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("compareRouterId")]
        public Input<bool>? CompareRouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("compareRouterIdVariable")]
        public Input<string>? CompareRouterIdVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("deterministicMed")]
        public Input<bool>? DeterministicMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deterministicMedVariable")]
        public Input<string>? DeterministicMedVariable { get; set; }

        /// <summary>
        /// Set administrative distance for external BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("externalRoutesDistance")]
        public Input<int>? ExternalRoutesDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("externalRoutesDistanceVariable")]
        public Input<string>? ExternalRoutesDistanceVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Interval (seconds) not receiving a keepalive message declares a BGP peer down
        ///   - Range: `0`-`65535`
        ///   - Default value: `180`
        /// </summary>
        [Input("holdTime")]
        public Input<int>? HoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("holdTimeVariable")]
        public Input<string>? HoldTimeVariable { get; set; }

        /// <summary>
        /// Set administrative distance for internal BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `200`
        /// </summary>
        [Input("internalRoutesDistance")]
        public Input<int>? InternalRoutesDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("internalRoutesDistanceVariable")]
        public Input<string>? InternalRoutesDistanceVariable { get; set; }

        [Input("ipv4AggregateAddresses")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressGetArgs>? _ipv4AggregateAddresses;

        /// <summary>
        /// Aggregate prefixes in specific range
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressGetArgs> Ipv4AggregateAddresses
        {
            get => _ipv4AggregateAddresses ?? (_ipv4AggregateAddresses = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4AggregateAddressGetArgs>());
            set => _ipv4AggregateAddresses = value;
        }

        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        ///   - Range: `1`-`32`
        /// </summary>
        [Input("ipv4EibgpMaximumPaths")]
        public Input<int>? Ipv4EibgpMaximumPaths { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4EibgpMaximumPathsVariable")]
        public Input<string>? Ipv4EibgpMaximumPathsVariable { get; set; }

        [Input("ipv4Neighbors")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4NeighborGetArgs>? _ipv4Neighbors;

        /// <summary>
        /// Set BGP IPv4 neighbors
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4NeighborGetArgs> Ipv4Neighbors
        {
            get => _ipv4Neighbors ?? (_ipv4Neighbors = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4NeighborGetArgs>());
            set => _ipv4Neighbors = value;
        }

        [Input("ipv4Networks")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4NetworkGetArgs>? _ipv4Networks;

        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4NetworkGetArgs> Ipv4Networks
        {
            get => _ipv4Networks ?? (_ipv4Networks = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4NetworkGetArgs>());
            set => _ipv4Networks = value;
        }

        /// <summary>
        /// BGP Default Information Originate
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv4Originate")]
        public Input<bool>? Ipv4Originate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4OriginateVariable")]
        public Input<string>? Ipv4OriginateVariable { get; set; }

        [Input("ipv4Redistributes")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv4RedistributeGetArgs>? _ipv4Redistributes;

        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv4RedistributeGetArgs> Ipv4Redistributes
        {
            get => _ipv4Redistributes ?? (_ipv4Redistributes = new InputList<Inputs.ServiceRoutingBgpFeatureIpv4RedistributeGetArgs>());
            set => _ipv4Redistributes = value;
        }

        /// <summary>
        /// Table map filtered or not
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv4TableMapFilter")]
        public Input<bool>? Ipv4TableMapFilter { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4TableMapFilterVariable")]
        public Input<string>? Ipv4TableMapFilterVariable { get; set; }

        [Input("ipv4TableMapRoutePolicyId")]
        public Input<string>? Ipv4TableMapRoutePolicyId { get; set; }

        [Input("ipv6AggregateAddresses")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressGetArgs>? _ipv6AggregateAddresses;

        /// <summary>
        /// IPv6 Aggregate prefixes in specific range
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressGetArgs> Ipv6AggregateAddresses
        {
            get => _ipv6AggregateAddresses ?? (_ipv6AggregateAddresses = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6AggregateAddressGetArgs>());
            set => _ipv6AggregateAddresses = value;
        }

        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        ///   - Range: `1`-`32`
        /// </summary>
        [Input("ipv6EibgpMaximumPaths")]
        public Input<int>? Ipv6EibgpMaximumPaths { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6EibgpMaximumPathsVariable")]
        public Input<string>? Ipv6EibgpMaximumPathsVariable { get; set; }

        [Input("ipv6Neighbors")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6NeighborGetArgs>? _ipv6Neighbors;

        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6NeighborGetArgs> Ipv6Neighbors
        {
            get => _ipv6Neighbors ?? (_ipv6Neighbors = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6NeighborGetArgs>());
            set => _ipv6Neighbors = value;
        }

        [Input("ipv6Networks")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6NetworkGetArgs>? _ipv6Networks;

        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6NetworkGetArgs> Ipv6Networks
        {
            get => _ipv6Networks ?? (_ipv6Networks = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6NetworkGetArgs>());
            set => _ipv6Networks = value;
        }

        /// <summary>
        /// BGP Default Information Originate
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv6Originate")]
        public Input<bool>? Ipv6Originate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6OriginateVariable")]
        public Input<string>? Ipv6OriginateVariable { get; set; }

        [Input("ipv6Redistributes")]
        private InputList<Inputs.ServiceRoutingBgpFeatureIpv6RedistributeGetArgs>? _ipv6Redistributes;

        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        public InputList<Inputs.ServiceRoutingBgpFeatureIpv6RedistributeGetArgs> Ipv6Redistributes
        {
            get => _ipv6Redistributes ?? (_ipv6Redistributes = new InputList<Inputs.ServiceRoutingBgpFeatureIpv6RedistributeGetArgs>());
            set => _ipv6Redistributes = value;
        }

        /// <summary>
        /// Table map filtered or not
        ///   - Default value: `False`
        /// </summary>
        [Input("ipv6TableMapFilter")]
        public Input<bool>? Ipv6TableMapFilter { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6TableMapFilterVariable")]
        public Input<string>? Ipv6TableMapFilterVariable { get; set; }

        [Input("ipv6TableMapRoutePolicyId")]
        public Input<string>? Ipv6TableMapRoutePolicyId { get; set; }

        /// <summary>
        /// Interval (seconds) of keepalive messages sent to its BGP peer
        ///   - Range: `0`-`65535`
        ///   - Default value: `60`
        /// </summary>
        [Input("keepaliveTime")]
        public Input<int>? KeepaliveTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("keepaliveTimeVariable")]
        public Input<string>? KeepaliveTimeVariable { get; set; }

        /// <summary>
        /// Set administrative distance for local BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("localRoutesDistance")]
        public Input<int>? LocalRoutesDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("localRoutesDistanceVariable")]
        public Input<string>? LocalRoutesDistanceVariable { get; set; }

        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("missingMedAsWorst")]
        public Input<bool>? MissingMedAsWorst { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("missingMedAsWorstVariable")]
        public Input<string>? MissingMedAsWorstVariable { get; set; }

        /// <summary>
        /// Ignore AS for multipath selection
        ///   - Default value: `False`
        /// </summary>
        [Input("multipathRelax")]
        public Input<bool>? MultipathRelax { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("multipathRelaxVariable")]
        public Input<string>? MultipathRelaxVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Propagate AS Path
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateAsPath")]
        public Input<bool>? PropagateAsPath { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateAsPathVariable")]
        public Input<string>? PropagateAsPathVariable { get; set; }

        /// <summary>
        /// Propagate Community
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateCommunity")]
        public Input<bool>? PropagateCommunity { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateCommunityVariable")]
        public Input<string>? PropagateCommunityVariable { get; set; }

        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("routerIdVariable")]
        public Input<string>? RouterIdVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ServiceRoutingBgpFeatureState()
        {
        }
        public static new ServiceRoutingBgpFeatureState Empty => new ServiceRoutingBgpFeatureState();
    }
}
