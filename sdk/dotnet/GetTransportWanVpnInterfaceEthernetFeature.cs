// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportWanVpnInterfaceEthernetFeature
    {
        /// <summary>
        /// This data source can read the Transport WAN VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportWanVpnInterfaceEthernetFeatureResult> InvokeAsync(GetTransportWanVpnInterfaceEthernetFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportWanVpnInterfaceEthernetFeatureResult>("sdwan:index/getTransportWanVpnInterfaceEthernetFeature:getTransportWanVpnInterfaceEthernetFeature", args ?? new GetTransportWanVpnInterfaceEthernetFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport WAN VPN Interface Ethernet Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnInterfaceEthernetFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportWanVpnInterfaceEthernetFeatureResult> Invoke(GetTransportWanVpnInterfaceEthernetFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportWanVpnInterfaceEthernetFeatureResult>("sdwan:index/getTransportWanVpnInterfaceEthernetFeature:getTransportWanVpnInterfaceEthernetFeature", args ?? new GetTransportWanVpnInterfaceEthernetFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportWanVpnInterfaceEthernetFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId", required: true)]
        public string TransportWanVpnFeatureId { get; set; } = null!;

        public GetTransportWanVpnInterfaceEthernetFeatureArgs()
        {
        }
        public static new GetTransportWanVpnInterfaceEthernetFeatureArgs Empty => new GetTransportWanVpnInterfaceEthernetFeatureArgs();
    }

    public sealed class GetTransportWanVpnInterfaceEthernetFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId", required: true)]
        public Input<string> TransportWanVpnFeatureId { get; set; } = null!;

        public GetTransportWanVpnInterfaceEthernetFeatureInvokeArgs()
        {
        }
        public static new GetTransportWanVpnInterfaceEthernetFeatureInvokeArgs Empty => new GetTransportWanVpnInterfaceEthernetFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportWanVpnInterfaceEthernetFeatureResult
    {
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, \n\n seconds
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpTimeoutVariable;
        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureArpResult> Arps;
        /// <summary>
        /// Interface auto detect bandwidth
        /// </summary>
        public readonly bool AutoDetectBandwidth;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutoDetectBandwidthVariable;
        /// <summary>
        /// Link autonegotiation
        /// </summary>
        public readonly bool Autonegotiate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutonegotiateVariable;
        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthDownstreamVariable;
        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthUpstreamVariable;
        /// <summary>
        /// Block packets originating from IP address that is not from this source
        /// </summary>
        public readonly bool BlockNonSourceIp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BlockNonSourceIpVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Duplex mode
        /// </summary>
        public readonly string Duplex;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DuplexVariable;
        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        public readonly bool EnableDhcpv6;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// GRE tunnel source IP
        /// </summary>
        public readonly string GreTunnelSourceIp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GreTunnelSourceIpVariable;
        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        /// </summary>
        public readonly bool IcmpRedirectDisable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IcmpRedirectDisableVariable;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// Iperf server for auto bandwidth detect
        /// </summary>
        public readonly string IperfServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IperfServerVariable;
        /// <summary>
        /// IP Address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        /// <summary>
        /// IPv4 Configuration Type
        /// </summary>
        public readonly string Ipv4ConfigurationType;
        /// <summary>
        /// DHCP Distance
        /// </summary>
        public readonly int Ipv4DhcpDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpDistanceVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpHelperVariable;
        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public readonly ImmutableArray<string> Ipv4DhcpHelpers;
        /// <summary>
        /// Secondary IpV4 Addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult> Ipv4SecondaryAddresses;
        /// <summary>
        /// Subnet Mask
        /// </summary>
        public readonly string Ipv4SubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4SubnetMaskVariable;
        /// <summary>
        /// IPv6 Address Secondary
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// IPv6 Configuration Type
        /// </summary>
        public readonly string Ipv6ConfigurationType;
        /// <summary>
        /// secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult> Ipv6DhcpSecondaryAddresses;
        /// <summary>
        /// Static secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult> Ipv6SecondaryAddresses;
        /// <summary>
        /// Interval for interface load calculation
        /// </summary>
        public readonly int LoadInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LoadIntervalVariable;
        /// <summary>
        /// MAC Address
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MacAddressVariable;
        /// <summary>
        /// Media type
        /// </summary>
        public readonly string MediaType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MediaTypeVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NAT64 on this interface
        /// </summary>
        public readonly bool Nat64;
        /// <summary>
        /// NAT66 on this interface
        /// </summary>
        public readonly bool Nat66;
        /// <summary>
        /// enable Network Address Translation on this interface
        /// </summary>
        public readonly bool NatIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatIpv4Variable;
        /// <summary>
        /// enable Network Address Translation ipv6 on this interface
        /// </summary>
        public readonly bool NatIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatIpv6Variable;
        /// <summary>
        /// NAT Inside Source Loopback Interface
        /// </summary>
        public readonly string NatLoopback;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatLoopbackVariable;
        /// <summary>
        /// NAT Overload
        /// </summary>
        public readonly bool NatOverload;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatOverloadVariable;
        /// <summary>
        /// NAT Pool Prefix Length
        /// </summary>
        public readonly int NatPrefixLength;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatPrefixLengthVariable;
        /// <summary>
        /// NAT Pool Range End
        /// </summary>
        public readonly string NatRangeEnd;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatRangeEndVariable;
        /// <summary>
        /// NAT Pool Range Start
        /// </summary>
        public readonly string NatRangeStart;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatRangeStartVariable;
        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        /// </summary>
        public readonly int NatTcpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatTcpTimeoutVariable;
        /// <summary>
        /// NAT Type
        /// </summary>
        public readonly string NatType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatTypeVariable;
        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        /// </summary>
        public readonly int NatUdpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatUdpTimeoutVariable;
        /// <summary>
        /// static NAT
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureNewStaticNatResult> NewStaticNats;
        /// <summary>
        /// Per-tunnel Qos
        /// </summary>
        public readonly bool PerTunnelQos;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosVariable;
        /// <summary>
        /// Adaptive QoS
        /// </summary>
        public readonly bool QosAdaptive;
        /// <summary>
        /// Shaping Rate Downstream
        /// </summary>
        public readonly bool QosAdaptiveBandwidthDownstream;
        /// <summary>
        /// Shaping Rate Upstream
        /// </summary>
        public readonly bool QosAdaptiveBandwidthUpstream;
        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps)
        /// </summary>
        public readonly int QosAdaptiveDefaultDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveDefaultDownstreamVariable;
        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps)
        /// </summary>
        public readonly int QosAdaptiveDefaultUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveDefaultUpstreamVariable;
        /// <summary>
        /// Downstream max bandwidth limit (kbps)
        /// </summary>
        public readonly int QosAdaptiveMaxDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMaxDownstreamVariable;
        /// <summary>
        /// Upstream max bandwidth limit (kbps)
        /// </summary>
        public readonly int QosAdaptiveMaxUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMaxUpstreamVariable;
        /// <summary>
        /// Downstream min bandwidth limit (kbps)
        /// </summary>
        public readonly int QosAdaptiveMinDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMinDownstreamVariable;
        /// <summary>
        /// Upstream min bandwidth limit (kbps)
        /// </summary>
        public readonly int QosAdaptiveMinUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMinUpstreamVariable;
        /// <summary>
        /// Adapt Period(Minutes)
        /// </summary>
        public readonly int QosAdaptivePeriod;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptivePeriodVariable;
        /// <summary>
        /// Shaping Rate (Kbps)
        /// </summary>
        public readonly int QosShapingRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosShapingRateVariable;
        /// <summary>
        /// Service Provider Name
        /// </summary>
        public readonly string ServiceProvider;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ServiceProviderVariable;
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Set interface speed
        /// </summary>
        public readonly string Speed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpeedVariable;
        /// <summary>
        /// static NAT66
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureStaticNat66Result> StaticNat66s;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        public readonly string TlocExtension;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TlocExtensionVariable;
        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public readonly string Tracker;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TrackerVariable;
        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        public readonly string TransportWanVpnFeatureId;
        /// <summary>
        /// Tunnels Bandwidth Percent
        /// </summary>
        public readonly int TunnelBandwidthPercent;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelBandwidthPercentVariable;
        /// <summary>
        /// Tunnel Interface on/off
        /// </summary>
        public readonly bool TunnelInterface;
        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        /// </summary>
        public readonly bool TunnelInterfaceAllowAll;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowAllVariable;
        /// <summary>
        /// Allow/Deny BFD
        /// </summary>
        public readonly bool TunnelInterfaceAllowBfd;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBfdVariable;
        /// <summary>
        /// Allow/deny BGP
        /// </summary>
        public readonly bool TunnelInterfaceAllowBgp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBgpVariable;
        /// <summary>
        /// Allow/Deny DHCP
        /// </summary>
        public readonly bool TunnelInterfaceAllowDhcp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDhcpVariable;
        /// <summary>
        /// Allow/Deny DNS
        /// </summary>
        public readonly bool TunnelInterfaceAllowDns;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDnsVariable;
        /// <summary>
        /// Allow/Deny HTTPS
        /// </summary>
        public readonly bool TunnelInterfaceAllowHttps;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowHttpsVariable;
        /// <summary>
        /// Allow/Deny ICMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowIcmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowIcmpVariable;
        /// <summary>
        /// Allow/Deny NETCONF
        /// </summary>
        public readonly bool TunnelInterfaceAllowNetconf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNetconfVariable;
        /// <summary>
        /// Allow/Deny NTP
        /// </summary>
        public readonly bool TunnelInterfaceAllowNtp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNtpVariable;
        /// <summary>
        /// Allow/Deny OSPF
        /// </summary>
        public readonly bool TunnelInterfaceAllowOspf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowOspfVariable;
        /// <summary>
        /// Allow/Deny SNMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowSnmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSnmpVariable;
        /// <summary>
        /// Allow/Deny SSH
        /// </summary>
        public readonly bool TunnelInterfaceAllowSsh;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSshVariable;
        /// <summary>
        /// Allow/Deny STUN
        /// </summary>
        public readonly bool TunnelInterfaceAllowStun;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowStunVariable;
        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnel;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnelVariable;
        /// <summary>
        /// Set TLOC as border TLOC
        /// </summary>
        public readonly bool TunnelInterfaceBorder;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBorderVariable;
        /// <summary>
        /// Set carrier for TLOC
        /// </summary>
        public readonly string TunnelInterfaceCarrier;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceCarrierVariable;
        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        /// </summary>
        public readonly bool TunnelInterfaceClearDontFragment;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceClearDontFragmentVariable;
        /// <summary>
        /// Set color for TLOC
        /// </summary>
        public readonly string TunnelInterfaceColor;
        /// <summary>
        /// Restrict this TLOC behavior
        /// </summary>
        public readonly bool TunnelInterfaceColorRestrict;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorRestrictVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorVariable;
        /// <summary>
        /// CTS SGT Propagation configuration
        /// </summary>
        public readonly bool TunnelInterfaceCtsSgtPropagation;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceCtsSgtPropagationVariable;
        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationResult> TunnelInterfaceEncapsulations;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceExcludeControllerGroupListVariable;
        /// <summary>
        /// Exclude the following controller groups defined in this list.
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceExcludeControllerGroupLists;
        /// <summary>
        /// GRE tunnel destination IP
        /// </summary>
        public readonly string TunnelInterfaceGreTunnelDestinationIp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGreTunnelDestinationIpVariable;
        /// <summary>
        /// List of groups
        /// </summary>
        public readonly int TunnelInterfaceGroups;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGroupsVariable;
        /// <summary>
        /// Set time period of control hello packets \n\n milli seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloIntervalVariable;
        /// <summary>
        /// Set tolerance of control hello packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloTolerance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloToleranceVariable;
        /// <summary>
        /// Set TLOC as last resort
        /// </summary>
        public readonly bool TunnelInterfaceLastResortCircuit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLastResortCircuitVariable;
        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        /// </summary>
        public readonly bool TunnelInterfaceLowBandwidthLink;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLowBandwidthLinkVariable;
        /// <summary>
        /// Maximum Control Connections
        /// </summary>
        public readonly int TunnelInterfaceMaxControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceMaxControlConnectionsVariable;
        /// <summary>
        /// Set time period of nat refresh packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceNatRefreshInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNatRefreshIntervalVariable;
        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts
        /// </summary>
        public readonly bool TunnelInterfaceNetworkBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNetworkBroadcastVariable;
        /// <summary>
        /// Disallow port hopping on the tunnel interface
        /// </summary>
        public readonly bool TunnelInterfacePortHop;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfacePortHopVariable;
        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TunnelInterfaceTunnelTcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceTunnelTcpMssVariable;
        /// <summary>
        /// Put this wan interface in STUN mode only
        /// </summary>
        public readonly bool TunnelInterfaceVbondAsStunServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVbondAsStunServerVariable;
        /// <summary>
        /// Set interface preference for control connection to vManage \n\n
        /// </summary>
        public readonly int TunnelInterfaceVmanageConnectionPreference;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVmanageConnectionPreferenceVariable;
        /// <summary>
        /// Set tunnel QoS mode
        /// </summary>
        public readonly string TunnelQosMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelQosModeVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Extend remote TLOC over a GRE tunnel to a local WAN interface
        /// </summary>
        public readonly string Xconnect;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string XconnectVariable;

        [OutputConstructor]
        private GetTransportWanVpnInterfaceEthernetFeatureResult(
            int arpTimeout,

            string arpTimeoutVariable,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureArpResult> arps,

            bool autoDetectBandwidth,

            string autoDetectBandwidthVariable,

            bool autonegotiate,

            string autonegotiateVariable,

            int bandwidthDownstream,

            string bandwidthDownstreamVariable,

            int bandwidthUpstream,

            string bandwidthUpstreamVariable,

            bool blockNonSourceIp,

            string blockNonSourceIpVariable,

            string description,

            string duplex,

            string duplexVariable,

            bool enableDhcpv6,

            string featureProfileId,

            string greTunnelSourceIp,

            string greTunnelSourceIpVariable,

            bool icmpRedirectDisable,

            string icmpRedirectDisableVariable,

            string id,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            int interfaceMtu,

            string interfaceMtuVariable,

            string interfaceName,

            string interfaceNameVariable,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            string iperfServer,

            string iperfServerVariable,

            string ipv4Address,

            string ipv4AddressVariable,

            string ipv4ConfigurationType,

            int ipv4DhcpDistance,

            string ipv4DhcpDistanceVariable,

            string ipv4DhcpHelperVariable,

            ImmutableArray<string> ipv4DhcpHelpers,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddressResult> ipv4SecondaryAddresses,

            string ipv4SubnetMask,

            string ipv4SubnetMaskVariable,

            string ipv6Address,

            string ipv6AddressVariable,

            string ipv6ConfigurationType,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddressResult> ipv6DhcpSecondaryAddresses,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddressResult> ipv6SecondaryAddresses,

            int loadInterval,

            string loadIntervalVariable,

            string macAddress,

            string macAddressVariable,

            string mediaType,

            string mediaTypeVariable,

            string name,

            bool nat64,

            bool nat66,

            bool natIpv4,

            string natIpv4Variable,

            bool natIpv6,

            string natIpv6Variable,

            string natLoopback,

            string natLoopbackVariable,

            bool natOverload,

            string natOverloadVariable,

            int natPrefixLength,

            string natPrefixLengthVariable,

            string natRangeEnd,

            string natRangeEndVariable,

            string natRangeStart,

            string natRangeStartVariable,

            int natTcpTimeout,

            string natTcpTimeoutVariable,

            string natType,

            string natTypeVariable,

            int natUdpTimeout,

            string natUdpTimeoutVariable,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureNewStaticNatResult> newStaticNats,

            bool perTunnelQos,

            string perTunnelQosVariable,

            bool qosAdaptive,

            bool qosAdaptiveBandwidthDownstream,

            bool qosAdaptiveBandwidthUpstream,

            int qosAdaptiveDefaultDownstream,

            string qosAdaptiveDefaultDownstreamVariable,

            int qosAdaptiveDefaultUpstream,

            string qosAdaptiveDefaultUpstreamVariable,

            int qosAdaptiveMaxDownstream,

            string qosAdaptiveMaxDownstreamVariable,

            int qosAdaptiveMaxUpstream,

            string qosAdaptiveMaxUpstreamVariable,

            int qosAdaptiveMinDownstream,

            string qosAdaptiveMinDownstreamVariable,

            int qosAdaptiveMinUpstream,

            string qosAdaptiveMinUpstreamVariable,

            int qosAdaptivePeriod,

            string qosAdaptivePeriodVariable,

            int qosShapingRate,

            string qosShapingRateVariable,

            string serviceProvider,

            string serviceProviderVariable,

            bool shutdown,

            string shutdownVariable,

            string speed,

            string speedVariable,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureStaticNat66Result> staticNat66s,

            int tcpMss,

            string tcpMssVariable,

            string tlocExtension,

            string tlocExtensionVariable,

            string tracker,

            string trackerVariable,

            string transportWanVpnFeatureId,

            int tunnelBandwidthPercent,

            string tunnelBandwidthPercentVariable,

            bool tunnelInterface,

            bool tunnelInterfaceAllowAll,

            string tunnelInterfaceAllowAllVariable,

            bool tunnelInterfaceAllowBfd,

            string tunnelInterfaceAllowBfdVariable,

            bool tunnelInterfaceAllowBgp,

            string tunnelInterfaceAllowBgpVariable,

            bool tunnelInterfaceAllowDhcp,

            string tunnelInterfaceAllowDhcpVariable,

            bool tunnelInterfaceAllowDns,

            string tunnelInterfaceAllowDnsVariable,

            bool tunnelInterfaceAllowHttps,

            string tunnelInterfaceAllowHttpsVariable,

            bool tunnelInterfaceAllowIcmp,

            string tunnelInterfaceAllowIcmpVariable,

            bool tunnelInterfaceAllowNetconf,

            string tunnelInterfaceAllowNetconfVariable,

            bool tunnelInterfaceAllowNtp,

            string tunnelInterfaceAllowNtpVariable,

            bool tunnelInterfaceAllowOspf,

            string tunnelInterfaceAllowOspfVariable,

            bool tunnelInterfaceAllowSnmp,

            string tunnelInterfaceAllowSnmpVariable,

            bool tunnelInterfaceAllowSsh,

            string tunnelInterfaceAllowSshVariable,

            bool tunnelInterfaceAllowStun,

            string tunnelInterfaceAllowStunVariable,

            string tunnelInterfaceBindLoopbackTunnel,

            string tunnelInterfaceBindLoopbackTunnelVariable,

            bool tunnelInterfaceBorder,

            string tunnelInterfaceBorderVariable,

            string tunnelInterfaceCarrier,

            string tunnelInterfaceCarrierVariable,

            bool tunnelInterfaceClearDontFragment,

            string tunnelInterfaceClearDontFragmentVariable,

            string tunnelInterfaceColor,

            bool tunnelInterfaceColorRestrict,

            string tunnelInterfaceColorRestrictVariable,

            string tunnelInterfaceColorVariable,

            bool tunnelInterfaceCtsSgtPropagation,

            string tunnelInterfaceCtsSgtPropagationVariable,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulationResult> tunnelInterfaceEncapsulations,

            string tunnelInterfaceExcludeControllerGroupListVariable,

            ImmutableArray<int> tunnelInterfaceExcludeControllerGroupLists,

            string tunnelInterfaceGreTunnelDestinationIp,

            string tunnelInterfaceGreTunnelDestinationIpVariable,

            int tunnelInterfaceGroups,

            string tunnelInterfaceGroupsVariable,

            int tunnelInterfaceHelloInterval,

            string tunnelInterfaceHelloIntervalVariable,

            int tunnelInterfaceHelloTolerance,

            string tunnelInterfaceHelloToleranceVariable,

            bool tunnelInterfaceLastResortCircuit,

            string tunnelInterfaceLastResortCircuitVariable,

            bool tunnelInterfaceLowBandwidthLink,

            string tunnelInterfaceLowBandwidthLinkVariable,

            int tunnelInterfaceMaxControlConnections,

            string tunnelInterfaceMaxControlConnectionsVariable,

            int tunnelInterfaceNatRefreshInterval,

            string tunnelInterfaceNatRefreshIntervalVariable,

            bool tunnelInterfaceNetworkBroadcast,

            string tunnelInterfaceNetworkBroadcastVariable,

            bool tunnelInterfacePortHop,

            string tunnelInterfacePortHopVariable,

            int tunnelInterfaceTunnelTcpMss,

            string tunnelInterfaceTunnelTcpMssVariable,

            bool tunnelInterfaceVbondAsStunServer,

            string tunnelInterfaceVbondAsStunServerVariable,

            int tunnelInterfaceVmanageConnectionPreference,

            string tunnelInterfaceVmanageConnectionPreferenceVariable,

            string tunnelQosMode,

            string tunnelQosModeVariable,

            int version,

            string xconnect,

            string xconnectVariable)
        {
            ArpTimeout = arpTimeout;
            ArpTimeoutVariable = arpTimeoutVariable;
            Arps = arps;
            AutoDetectBandwidth = autoDetectBandwidth;
            AutoDetectBandwidthVariable = autoDetectBandwidthVariable;
            Autonegotiate = autonegotiate;
            AutonegotiateVariable = autonegotiateVariable;
            BandwidthDownstream = bandwidthDownstream;
            BandwidthDownstreamVariable = bandwidthDownstreamVariable;
            BandwidthUpstream = bandwidthUpstream;
            BandwidthUpstreamVariable = bandwidthUpstreamVariable;
            BlockNonSourceIp = blockNonSourceIp;
            BlockNonSourceIpVariable = blockNonSourceIpVariable;
            Description = description;
            Duplex = duplex;
            DuplexVariable = duplexVariable;
            EnableDhcpv6 = enableDhcpv6;
            FeatureProfileId = featureProfileId;
            GreTunnelSourceIp = greTunnelSourceIp;
            GreTunnelSourceIpVariable = greTunnelSourceIpVariable;
            IcmpRedirectDisable = icmpRedirectDisable;
            IcmpRedirectDisableVariable = icmpRedirectDisableVariable;
            Id = id;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            IperfServer = iperfServer;
            IperfServerVariable = iperfServerVariable;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv4ConfigurationType = ipv4ConfigurationType;
            Ipv4DhcpDistance = ipv4DhcpDistance;
            Ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            Ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            Ipv4DhcpHelpers = ipv4DhcpHelpers;
            Ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            Ipv4SubnetMask = ipv4SubnetMask;
            Ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Ipv6ConfigurationType = ipv6ConfigurationType;
            Ipv6DhcpSecondaryAddresses = ipv6DhcpSecondaryAddresses;
            Ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            LoadInterval = loadInterval;
            LoadIntervalVariable = loadIntervalVariable;
            MacAddress = macAddress;
            MacAddressVariable = macAddressVariable;
            MediaType = mediaType;
            MediaTypeVariable = mediaTypeVariable;
            Name = name;
            Nat64 = nat64;
            Nat66 = nat66;
            NatIpv4 = natIpv4;
            NatIpv4Variable = natIpv4Variable;
            NatIpv6 = natIpv6;
            NatIpv6Variable = natIpv6Variable;
            NatLoopback = natLoopback;
            NatLoopbackVariable = natLoopbackVariable;
            NatOverload = natOverload;
            NatOverloadVariable = natOverloadVariable;
            NatPrefixLength = natPrefixLength;
            NatPrefixLengthVariable = natPrefixLengthVariable;
            NatRangeEnd = natRangeEnd;
            NatRangeEndVariable = natRangeEndVariable;
            NatRangeStart = natRangeStart;
            NatRangeStartVariable = natRangeStartVariable;
            NatTcpTimeout = natTcpTimeout;
            NatTcpTimeoutVariable = natTcpTimeoutVariable;
            NatType = natType;
            NatTypeVariable = natTypeVariable;
            NatUdpTimeout = natUdpTimeout;
            NatUdpTimeoutVariable = natUdpTimeoutVariable;
            NewStaticNats = newStaticNats;
            PerTunnelQos = perTunnelQos;
            PerTunnelQosVariable = perTunnelQosVariable;
            QosAdaptive = qosAdaptive;
            QosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            QosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            QosAdaptiveDefaultDownstream = qosAdaptiveDefaultDownstream;
            QosAdaptiveDefaultDownstreamVariable = qosAdaptiveDefaultDownstreamVariable;
            QosAdaptiveDefaultUpstream = qosAdaptiveDefaultUpstream;
            QosAdaptiveDefaultUpstreamVariable = qosAdaptiveDefaultUpstreamVariable;
            QosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            QosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            QosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            QosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            QosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            QosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            QosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            QosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            QosAdaptivePeriod = qosAdaptivePeriod;
            QosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            QosShapingRate = qosShapingRate;
            QosShapingRateVariable = qosShapingRateVariable;
            ServiceProvider = serviceProvider;
            ServiceProviderVariable = serviceProviderVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            Speed = speed;
            SpeedVariable = speedVariable;
            StaticNat66s = staticNat66s;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            TlocExtension = tlocExtension;
            TlocExtensionVariable = tlocExtensionVariable;
            Tracker = tracker;
            TrackerVariable = trackerVariable;
            TransportWanVpnFeatureId = transportWanVpnFeatureId;
            TunnelBandwidthPercent = tunnelBandwidthPercent;
            TunnelBandwidthPercentVariable = tunnelBandwidthPercentVariable;
            TunnelInterface = tunnelInterface;
            TunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            TunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            TunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            TunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            TunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            TunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            TunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            TunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            TunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            TunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            TunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            TunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            TunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            TunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            TunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            TunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            TunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            TunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            TunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            TunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            TunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            TunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            TunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            TunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            TunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            TunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            TunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            TunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            TunnelInterfaceBorder = tunnelInterfaceBorder;
            TunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            TunnelInterfaceCarrier = tunnelInterfaceCarrier;
            TunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            TunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            TunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            TunnelInterfaceColor = tunnelInterfaceColor;
            TunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            TunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            TunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            TunnelInterfaceCtsSgtPropagation = tunnelInterfaceCtsSgtPropagation;
            TunnelInterfaceCtsSgtPropagationVariable = tunnelInterfaceCtsSgtPropagationVariable;
            TunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            TunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            TunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            TunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            TunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            TunnelInterfaceGroups = tunnelInterfaceGroups;
            TunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            TunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            TunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            TunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            TunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            TunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            TunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            TunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            TunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            TunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            TunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            TunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            TunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            TunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            TunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            TunnelInterfacePortHop = tunnelInterfacePortHop;
            TunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            TunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            TunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            TunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            TunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            TunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            TunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            TunnelQosMode = tunnelQosMode;
            TunnelQosModeVariable = tunnelQosModeVariable;
            Version = version;
            Xconnect = xconnect;
            XconnectVariable = xconnectVariable;
        }
    }
}
