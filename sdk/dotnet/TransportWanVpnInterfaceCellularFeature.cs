// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Transport WAN VPN Interface Cellular Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature")]
    public partial class TransportWanVpnInterfaceCellularFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure ARP entries
        /// </summary>
        [Output("arps")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceCellularFeatureArp>> Arps { get; private set; } = null!;

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthDownstream")]
        public Output<int?> BandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthDownstreamVariable")]
        public Output<string?> BandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthUpstream")]
        public Output<int?> BandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthUpstreamVariable")]
        public Output<string?> BandwidthUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes - Range: `1500`-`9216` -
        /// Default value: `1500`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
        /// &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpHelperVariable")]
        public Output<string?> Ipv4DhcpHelperVariable { get; private set; } = null!;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        [Output("ipv4DhcpHelpers")]
        public Output<ImmutableArray<string>> Ipv4DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Output("natIpv4")]
        public Output<bool?> NatIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natIpv4Variable")]
        public Output<string?> NatIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Output("natTcpTimeout")]
        public Output<int?> NatTcpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natTcpTimeoutVariable")]
        public Output<string?> NatTcpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Output("natUdpTimeout")]
        public Output<int?> NatUdpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natUdpTimeoutVariable")]
        public Output<string?> NatUdpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Output("perTunnelQos")]
        public Output<bool?> PerTunnelQos { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("perTunnelQosVariable")]
        public Output<string?> PerTunnelQosVariable { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS - Default value: `false`
        /// </summary>
        [Output("qosAdaptive")]
        public Output<bool?> QosAdaptive { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate Downstream - Default value: `false`
        /// </summary>
        [Output("qosAdaptiveBandwidthDownstream")]
        public Output<bool?> QosAdaptiveBandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate Upstream - Default value: `false`
        /// </summary>
        [Output("qosAdaptiveBandwidthUpstream")]
        public Output<bool?> QosAdaptiveBandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveDefaultDownstream")]
        public Output<int?> QosAdaptiveDefaultDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveDefaultDownstreamVariable")]
        public Output<string?> QosAdaptiveDefaultDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveDefaultUpstream")]
        public Output<int?> QosAdaptiveDefaultUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveDefaultUpstreamVariable")]
        public Output<string?> QosAdaptiveDefaultUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream max bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxDownstream")]
        public Output<int?> QosAdaptiveMaxDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxDownstreamVariable")]
        public Output<string?> QosAdaptiveMaxDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream max bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxUpstream")]
        public Output<int?> QosAdaptiveMaxUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxUpstreamVariable")]
        public Output<string?> QosAdaptiveMaxUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream min bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinDownstream")]
        public Output<int?> QosAdaptiveMinDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinDownstreamVariable")]
        public Output<string?> QosAdaptiveMinDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream min bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinUpstream")]
        public Output<int?> QosAdaptiveMinUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinUpstreamVariable")]
        public Output<string?> QosAdaptiveMinUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Adapt Period(Minutes) - Range: `1`-`720` - Default value: `15`
        /// </summary>
        [Output("qosAdaptivePeriod")]
        public Output<int?> QosAdaptivePeriod { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptivePeriodVariable")]
        public Output<string?> QosAdaptivePeriodVariable { get; private set; } = null!;

        /// <summary>
        /// Shaping Rate (Kbps) - Range: `8`-`100000000`
        /// </summary>
        [Output("qosShapingRate")]
        public Output<int?> QosShapingRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosShapingRateVariable")]
        public Output<string?> QosShapingRateVariable { get; private set; } = null!;

        /// <summary>
        /// Service Provider Name
        /// </summary>
        [Output("serviceProvider")]
        public Output<string?> ServiceProvider { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("serviceProviderVariable")]
        public Output<string?> ServiceProviderVariable { get; private set; } = null!;

        /// <summary>
        /// - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Output("tlocExtension")]
        public Output<string?> TlocExtension { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tlocExtensionVariable")]
        public Output<string?> TlocExtensionVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("tracker")]
        public Output<string?> Tracker { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Output("transportWanVpnFeatureId")]
        public Output<string?> TransportWanVpnFeatureId { get; private set; } = null!;

        /// <summary>
        /// Tunnels Bandwidth Percent - Range: `1`-`100` - Default value: `50`
        /// </summary>
        [Output("tunnelBandwidthPercent")]
        public Output<int?> TunnelBandwidthPercent { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelBandwidthPercentVariable")]
        public Output<string?> TunnelBandwidthPercentVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel Interface on/off - Default value: `false`
        /// </summary>
        [Output("tunnelInterface")]
        public Output<bool?> TunnelInterface { get; private set; } = null!;

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowAll")]
        public Output<bool?> TunnelInterfaceAllowAll { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowAllVariable")]
        public Output<string?> TunnelInterfaceAllowAllVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny BFD - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowBfd")]
        public Output<bool?> TunnelInterfaceAllowBfd { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBfdVariable")]
        public Output<string?> TunnelInterfaceAllowBfdVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowBgp")]
        public Output<bool?> TunnelInterfaceAllowBgp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBgpVariable")]
        public Output<string?> TunnelInterfaceAllowBgpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDhcp")]
        public Output<bool?> TunnelInterfaceAllowDhcp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDhcpVariable")]
        public Output<string?> TunnelInterfaceAllowDhcpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDns")]
        public Output<bool?> TunnelInterfaceAllowDns { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDnsVariable")]
        public Output<string?> TunnelInterfaceAllowDnsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny HTTPS - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowHttps")]
        public Output<bool?> TunnelInterfaceAllowHttps { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowHttpsVariable")]
        public Output<string?> TunnelInterfaceAllowHttpsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowIcmp")]
        public Output<bool?> TunnelInterfaceAllowIcmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowIcmpVariable")]
        public Output<string?> TunnelInterfaceAllowIcmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNetconf")]
        public Output<bool?> TunnelInterfaceAllowNetconf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNetconfVariable")]
        public Output<string?> TunnelInterfaceAllowNetconfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NTP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowNtp")]
        public Output<bool?> TunnelInterfaceAllowNtp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNtpVariable")]
        public Output<string?> TunnelInterfaceAllowNtpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowOspf")]
        public Output<bool?> TunnelInterfaceAllowOspf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowOspfVariable")]
        public Output<string?> TunnelInterfaceAllowOspfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSnmp")]
        public Output<bool?> TunnelInterfaceAllowSnmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSnmpVariable")]
        public Output<string?> TunnelInterfaceAllowSnmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SSH - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowSsh")]
        public Output<bool?> TunnelInterfaceAllowSsh { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSshVariable")]
        public Output<string?> TunnelInterfaceAllowSshVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowStun")]
        public Output<bool?> TunnelInterfaceAllowStun { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowStunVariable")]
        public Output<string?> TunnelInterfaceAllowStunVariable { get; private set; } = null!;

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnel")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnel { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnelVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceBorder")]
        public Output<bool?> TunnelInterfaceBorder { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBorderVariable")]
        public Output<string?> TunnelInterfaceBorderVariable { get; private set; } = null!;

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceCarrier")]
        public Output<string?> TunnelInterfaceCarrier { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceCarrierVariable")]
        public Output<string?> TunnelInterfaceCarrierVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceClearDontFragment")]
        public Output<bool?> TunnelInterfaceClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceClearDontFragmentVariable")]
        public Output<string?> TunnelInterfaceClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro ethernet`, `biz internet`, `public internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `mpls`
        /// </summary>
        [Output("tunnelInterfaceColor")]
        public Output<string?> TunnelInterfaceColor { get; private set; } = null!;

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceColorRestrict")]
        public Output<bool?> TunnelInterfaceColorRestrict { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceColorRestrictVariable")]
        public Output<string?> TunnelInterfaceColorRestrictVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceColorVariable")]
        public Output<string?> TunnelInterfaceColorVariable { get; private set; } = null!;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        [Output("tunnelInterfaceEncapsulations")]
        public Output<ImmutableArray<Outputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation>> TunnelInterfaceEncapsulations { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Output<string?> TunnelInterfaceExcludeControllerGroupListVariable { get; private set; } = null!;

        /// <summary>
        /// Exclude the following controller groups defined in this list.
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupLists")]
        public Output<ImmutableArray<int>> TunnelInterfaceExcludeControllerGroupLists { get; private set; } = null!;

        /// <summary>
        /// List of groups - Range: `1`-`4294967295`
        /// </summary>
        [Output("tunnelInterfaceGroups")]
        public Output<int?> TunnelInterfaceGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceGroupsVariable")]
        public Output<string?> TunnelInterfaceGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Output("tunnelInterfaceHelloInterval")]
        public Output<int?> TunnelInterfaceHelloInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloIntervalVariable")]
        public Output<string?> TunnelInterfaceHelloIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Output("tunnelInterfaceHelloTolerance")]
        public Output<int?> TunnelInterfaceHelloTolerance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloToleranceVariable")]
        public Output<string?> TunnelInterfaceHelloToleranceVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuit")]
        public Output<bool?> TunnelInterfaceLastResortCircuit { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuitVariable")]
        public Output<string?> TunnelInterfaceLastResortCircuitVariable { get; private set; } = null!;

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLink")]
        public Output<bool?> TunnelInterfaceLowBandwidthLink { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLinkVariable")]
        public Output<string?> TunnelInterfaceLowBandwidthLinkVariable { get; private set; } = null!;

        /// <summary>
        /// Maximum Control Connections - Range: `0`-`100`
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnections")]
        public Output<int?> TunnelInterfaceMaxControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceMaxControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceNatRefreshInterval")]
        public Output<int?> TunnelInterfaceNatRefreshInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNatRefreshIntervalVariable")]
        public Output<string?> TunnelInterfaceNatRefreshIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcast")]
        public Output<bool?> TunnelInterfaceNetworkBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcastVariable")]
        public Output<string?> TunnelInterfaceNetworkBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Output("tunnelInterfacePortHop")]
        public Output<bool?> TunnelInterfacePortHop { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfacePortHopVariable")]
        public Output<string?> TunnelInterfacePortHopVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMss")]
        public Output<int?> TunnelInterfaceTunnelTcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMssVariable")]
        public Output<string?> TunnelInterfaceTunnelTcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServer")]
        public Output<bool?> TunnelInterfaceVbondAsStunServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServerVariable")]
        public Output<string?> TunnelInterfaceVbondAsStunServerVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreference")]
        public Output<int?> TunnelInterfaceVmanageConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Output<string?> TunnelInterfaceVmanageConnectionPreferenceVariable { get; private set; } = null!;

        /// <summary>
        /// Set tunnel QoS mode - Choices: `hub`, `spoke`
        /// </summary>
        [Output("tunnelQosMode")]
        public Output<string?> TunnelQosMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelQosModeVariable")]
        public Output<string?> TunnelQosModeVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TransportWanVpnInterfaceCellularFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransportWanVpnInterfaceCellularFeature(string name, TransportWanVpnInterfaceCellularFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature", name, args ?? new TransportWanVpnInterfaceCellularFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransportWanVpnInterfaceCellularFeature(string name, Input<string> id, TransportWanVpnInterfaceCellularFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransportWanVpnInterfaceCellularFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransportWanVpnInterfaceCellularFeature Get(string name, Input<string> id, TransportWanVpnInterfaceCellularFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new TransportWanVpnInterfaceCellularFeature(name, id, state, options);
        }
    }

    public sealed class TransportWanVpnInterfaceCellularFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("arps")]
        private InputList<Inputs.TransportWanVpnInterfaceCellularFeatureArpArgs>? _arps;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceCellularFeatureArpArgs> Arps
        {
            get => _arps ?? (_arps = new InputList<Inputs.TransportWanVpnInterfaceCellularFeatureArpArgs>());
            set => _arps = value;
        }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes - Range: `1500`-`9216` -
        /// Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
        /// &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Input("natIpv4")]
        public Input<bool>? NatIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natIpv4Variable")]
        public Input<string>? NatIpv4Variable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Input("natTcpTimeout")]
        public Input<int>? NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natTcpTimeoutVariable")]
        public Input<string>? NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Input("natUdpTimeout")]
        public Input<int>? NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natUdpTimeoutVariable")]
        public Input<string>? NatUdpTimeoutVariable { get; set; }

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        /// <summary>
        /// Adaptive QoS - Default value: `false`
        /// </summary>
        [Input("qosAdaptive")]
        public Input<bool>? QosAdaptive { get; set; }

        /// <summary>
        /// Shaping Rate Downstream - Default value: `false`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<bool>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Shaping Rate Upstream - Default value: `false`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<bool>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultDownstream")]
        public Input<int>? QosAdaptiveDefaultDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultDownstreamVariable")]
        public Input<string>? QosAdaptiveDefaultDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultUpstream")]
        public Input<int>? QosAdaptiveDefaultUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultUpstreamVariable")]
        public Input<string>? QosAdaptiveDefaultUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Adapt Period(Minutes) - Range: `1`-`720` - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Shaping Rate (Kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosShapingRate")]
        public Input<int>? QosShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosShapingRateVariable")]
        public Input<string>? QosShapingRateVariable { get; set; }

        /// <summary>
        /// Service Provider Name
        /// </summary>
        [Input("serviceProvider")]
        public Input<string>? ServiceProvider { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("serviceProviderVariable")]
        public Input<string>? ServiceProviderVariable { get; set; }

        /// <summary>
        /// - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("tracker")]
        public Input<string>? Tracker { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId")]
        public Input<string>? TransportWanVpnFeatureId { get; set; }

        /// <summary>
        /// Tunnels Bandwidth Percent - Range: `1`-`100` - Default value: `50`
        /// </summary>
        [Input("tunnelBandwidthPercent")]
        public Input<int>? TunnelBandwidthPercent { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelBandwidthPercentVariable")]
        public Input<string>? TunnelBandwidthPercentVariable { get; set; }

        /// <summary>
        /// Tunnel Interface on/off - Default value: `false`
        /// </summary>
        [Input("tunnelInterface")]
        public Input<bool>? TunnelInterface { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/Deny BFD - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBfd")]
        public Input<bool>? TunnelInterfaceAllowBfd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBfdVariable")]
        public Input<string>? TunnelInterfaceAllowBfdVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny HTTPS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro ethernet`, `biz internet`, `public internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `mpls`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorRestrictVariable")]
        public Input<string>? TunnelInterfaceColorRestrictVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list.
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// List of groups - Range: `1`-`4294967295`
        /// </summary>
        [Input("tunnelInterfaceGroups")]
        public Input<int>? TunnelInterfaceGroups { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Maximum Control Connections - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode - Choices: `hub`, `spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        public TransportWanVpnInterfaceCellularFeatureArgs()
        {
        }
        public static new TransportWanVpnInterfaceCellularFeatureArgs Empty => new TransportWanVpnInterfaceCellularFeatureArgs();
    }

    public sealed class TransportWanVpnInterfaceCellularFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("arps")]
        private InputList<Inputs.TransportWanVpnInterfaceCellularFeatureArpGetArgs>? _arps;

        /// <summary>
        /// Configure ARP entries
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceCellularFeatureArpGetArgs> Arps
        {
            get => _arps ?? (_arps = new InputList<Inputs.TransportWanVpnInterfaceCellularFeatureArpGetArgs>());
            set => _arps = value;
        }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes - Range: `1500`-`9216` -
        /// Default value: `1500`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
        /// &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP IPv4 helper addresses (min 1, max 8)
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Input("natIpv4")]
        public Input<bool>? NatIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natIpv4Variable")]
        public Input<string>? NatIpv4Variable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Input("natTcpTimeout")]
        public Input<int>? NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natTcpTimeoutVariable")]
        public Input<string>? NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Input("natUdpTimeout")]
        public Input<int>? NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natUdpTimeoutVariable")]
        public Input<string>? NatUdpTimeoutVariable { get; set; }

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        /// <summary>
        /// Adaptive QoS - Default value: `false`
        /// </summary>
        [Input("qosAdaptive")]
        public Input<bool>? QosAdaptive { get; set; }

        /// <summary>
        /// Shaping Rate Downstream - Default value: `false`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<bool>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Shaping Rate Upstream - Default value: `false`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<bool>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultDownstream")]
        public Input<int>? QosAdaptiveDefaultDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultDownstreamVariable")]
        public Input<string>? QosAdaptiveDefaultDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveDefaultUpstream")]
        public Input<int>? QosAdaptiveDefaultUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveDefaultUpstreamVariable")]
        public Input<string>? QosAdaptiveDefaultUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit (kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Adapt Period(Minutes) - Range: `1`-`720` - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Shaping Rate (Kbps) - Range: `8`-`100000000`
        /// </summary>
        [Input("qosShapingRate")]
        public Input<int>? QosShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosShapingRateVariable")]
        public Input<string>? QosShapingRateVariable { get; set; }

        /// <summary>
        /// Service Provider Name
        /// </summary>
        [Input("serviceProvider")]
        public Input<string>? ServiceProvider { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("serviceProviderVariable")]
        public Input<string>? ServiceProviderVariable { get; set; }

        /// <summary>
        /// - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Input("tracker")]
        public Input<string>? Tracker { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId")]
        public Input<string>? TransportWanVpnFeatureId { get; set; }

        /// <summary>
        /// Tunnels Bandwidth Percent - Range: `1`-`100` - Default value: `50`
        /// </summary>
        [Input("tunnelBandwidthPercent")]
        public Input<int>? TunnelBandwidthPercent { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelBandwidthPercentVariable")]
        public Input<string>? TunnelBandwidthPercentVariable { get; set; }

        /// <summary>
        /// Tunnel Interface on/off - Default value: `false`
        /// </summary>
        [Input("tunnelInterface")]
        public Input<bool>? TunnelInterface { get; set; }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/Deny BFD - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBfd")]
        public Input<bool>? TunnelInterfaceAllowBfd { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBfdVariable")]
        public Input<string>? TunnelInterfaceAllowBfdVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny HTTPS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro ethernet`, `biz internet`, `public internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `mpls`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorRestrictVariable")]
        public Input<string>? TunnelInterfaceColorRestrictVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationGetArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationGetArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulationGetArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list.
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        /// <summary>
        /// List of groups - Range: `1`-`4294967295`
        /// </summary>
        [Input("tunnelInterfaceGroups")]
        public Input<int>? TunnelInterfaceGroups { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Maximum Control Connections - Range: `0`-`100`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode - Choices: `hub`, `spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TransportWanVpnInterfaceCellularFeatureState()
        {
        }
        public static new TransportWanVpnInterfaceCellularFeatureState Empty => new TransportWanVpnInterfaceCellularFeatureState();
    }
}
