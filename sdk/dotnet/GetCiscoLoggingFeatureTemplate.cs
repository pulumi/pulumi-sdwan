// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoLoggingFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco Logging feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoLoggingFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoLoggingFeatureTemplateResult> InvokeAsync(GetCiscoLoggingFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoLoggingFeatureTemplateResult>("sdwan:index/getCiscoLoggingFeatureTemplate:getCiscoLoggingFeatureTemplate", args ?? new GetCiscoLoggingFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco Logging feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoLoggingFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoLoggingFeatureTemplateResult> Invoke(GetCiscoLoggingFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoLoggingFeatureTemplateResult>("sdwan:index/getCiscoLoggingFeatureTemplate:getCiscoLoggingFeatureTemplate", args ?? new GetCiscoLoggingFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco Logging feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoLoggingFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoLoggingFeatureTemplateResult> Invoke(GetCiscoLoggingFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoLoggingFeatureTemplateResult>("sdwan:index/getCiscoLoggingFeatureTemplate:getCiscoLoggingFeatureTemplate", args ?? new GetCiscoLoggingFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoLoggingFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoLoggingFeatureTemplateArgs()
        {
        }
        public static new GetCiscoLoggingFeatureTemplateArgs Empty => new GetCiscoLoggingFeatureTemplateArgs();
    }

    public sealed class GetCiscoLoggingFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoLoggingFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoLoggingFeatureTemplateInvokeArgs Empty => new GetCiscoLoggingFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoLoggingFeatureTemplateResult
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Enable logging to local disk
        /// </summary>
        public readonly bool DiskLogging;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DiskLoggingVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoLoggingFeatureTemplateIpv4ServerResult> Ipv4Servers;
        /// <summary>
        /// Enable logging to remote IPv6 server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoLoggingFeatureTemplateIpv6ServerResult> Ipv6Servers;
        /// <summary>
        /// Set number of syslog files to create before discarding oldest files
        /// </summary>
        public readonly int LogRotations;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LogRotationsVariable;
        /// <summary>
        /// Set maximum size of file before it is rotated
        /// </summary>
        public readonly int MaxSize;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MaxSizeVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoLoggingFeatureTemplateTlsProfileResult> TlsProfiles;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCiscoLoggingFeatureTemplateResult(
            string description,

            ImmutableArray<string> deviceTypes,

            bool diskLogging,

            string diskLoggingVariable,

            string id,

            ImmutableArray<Outputs.GetCiscoLoggingFeatureTemplateIpv4ServerResult> ipv4Servers,

            ImmutableArray<Outputs.GetCiscoLoggingFeatureTemplateIpv6ServerResult> ipv6Servers,

            int logRotations,

            string logRotationsVariable,

            int maxSize,

            string maxSizeVariable,

            string name,

            string templateType,

            ImmutableArray<Outputs.GetCiscoLoggingFeatureTemplateTlsProfileResult> tlsProfiles,

            int version)
        {
            Description = description;
            DeviceTypes = deviceTypes;
            DiskLogging = diskLogging;
            DiskLoggingVariable = diskLoggingVariable;
            Id = id;
            Ipv4Servers = ipv4Servers;
            Ipv6Servers = ipv6Servers;
            LogRotations = logRotations;
            LogRotationsVariable = logRotationsVariable;
            MaxSize = maxSize;
            MaxSizeVariable = maxSizeVariable;
            Name = name;
            TemplateType = templateType;
            TlsProfiles = tlsProfiles;
            Version = version;
        }
    }
}
