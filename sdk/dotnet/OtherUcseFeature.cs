// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Other UCSE Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/otherUcseFeature:OtherUcseFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/otherUcseFeature:OtherUcseFeature")]
    public partial class OtherUcseFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Dedicated - Default value: `true`
        /// </summary>
        [Output("accessPortDedicated")]
        public Output<bool?> AccessPortDedicated { get; private set; } = null!;

        /// <summary>
        /// - Choices: `ge2`, `te2`
        /// </summary>
        [Output("accessPortSharedFailoverType")]
        public Output<string> AccessPortSharedFailoverType { get; private set; } = null!;

        /// <summary>
        /// - Choices: `ge1`, `ge2`, `ge3`, `te2`, `te3`, `console`, `failover`
        /// </summary>
        [Output("accessPortSharedType")]
        public Output<string> AccessPortSharedType { get; private set; } = null!;

        /// <summary>
        /// Assign priority - Range: `0`-`7`
        /// </summary>
        [Output("assignPriority")]
        public Output<int?> AssignPriority { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("assignPriorityVariable")]
        public Output<string?> AssignPriorityVariable { get; private set; } = null!;

        /// <summary>
        /// Bay - Range: `0`-`2`
        /// </summary>
        [Output("bay")]
        public Output<int> Bay { get; private set; } = null!;

        /// <summary>
        /// Assign default gateway
        /// </summary>
        [Output("defaultGateway")]
        public Output<string> DefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("defaultGatewayVariable")]
        public Output<string?> DefaultGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt; when present
        /// </summary>
        [Output("interfaces")]
        public Output<ImmutableArray<Outputs.OtherUcseFeatureInterface>> Interfaces { get; private set; } = null!;

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Output("ipv4Address")]
        public Output<string> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Slot - Range: `0`-`3`
        /// </summary>
        [Output("slot")]
        public Output<int> Slot { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Assign Vlan Id - Range: `2`-`4095`
        /// </summary>
        [Output("vlanId")]
        public Output<int?> VlanId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("vlanIdVariable")]
        public Output<string?> VlanIdVariable { get; private set; } = null!;


        /// <summary>
        /// Create a OtherUcseFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OtherUcseFeature(string name, OtherUcseFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/otherUcseFeature:OtherUcseFeature", name, args ?? new OtherUcseFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OtherUcseFeature(string name, Input<string> id, OtherUcseFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/otherUcseFeature:OtherUcseFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OtherUcseFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OtherUcseFeature Get(string name, Input<string> id, OtherUcseFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new OtherUcseFeature(name, id, state, options);
        }
    }

    public sealed class OtherUcseFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dedicated - Default value: `true`
        /// </summary>
        [Input("accessPortDedicated")]
        public Input<bool>? AccessPortDedicated { get; set; }

        /// <summary>
        /// - Choices: `ge2`, `te2`
        /// </summary>
        [Input("accessPortSharedFailoverType", required: true)]
        public Input<string> AccessPortSharedFailoverType { get; set; } = null!;

        /// <summary>
        /// - Choices: `ge1`, `ge2`, `ge3`, `te2`, `te3`, `console`, `failover`
        /// </summary>
        [Input("accessPortSharedType", required: true)]
        public Input<string> AccessPortSharedType { get; set; } = null!;

        /// <summary>
        /// Assign priority - Range: `0`-`7`
        /// </summary>
        [Input("assignPriority")]
        public Input<int>? AssignPriority { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("assignPriorityVariable")]
        public Input<string>? AssignPriorityVariable { get; set; }

        /// <summary>
        /// Bay - Range: `0`-`2`
        /// </summary>
        [Input("bay", required: true)]
        public Input<int> Bay { get; set; } = null!;

        /// <summary>
        /// Assign default gateway
        /// </summary>
        [Input("defaultGateway", required: true)]
        public Input<string> DefaultGateway { get; set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("defaultGatewayVariable")]
        public Input<string>? DefaultGatewayVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("interfaces")]
        private InputList<Inputs.OtherUcseFeatureInterfaceArgs>? _interfaces;

        /// <summary>
        /// Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt; when present
        /// </summary>
        public InputList<Inputs.OtherUcseFeatureInterfaceArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.OtherUcseFeatureInterfaceArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipv4Address", required: true)]
        public Input<string> Ipv4Address { get; set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Slot - Range: `0`-`3`
        /// </summary>
        [Input("slot", required: true)]
        public Input<int> Slot { get; set; } = null!;

        /// <summary>
        /// Assign Vlan Id - Range: `2`-`4095`
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vlanIdVariable")]
        public Input<string>? VlanIdVariable { get; set; }

        public OtherUcseFeatureArgs()
        {
        }
        public static new OtherUcseFeatureArgs Empty => new OtherUcseFeatureArgs();
    }

    public sealed class OtherUcseFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Dedicated - Default value: `true`
        /// </summary>
        [Input("accessPortDedicated")]
        public Input<bool>? AccessPortDedicated { get; set; }

        /// <summary>
        /// - Choices: `ge2`, `te2`
        /// </summary>
        [Input("accessPortSharedFailoverType")]
        public Input<string>? AccessPortSharedFailoverType { get; set; }

        /// <summary>
        /// - Choices: `ge1`, `ge2`, `ge3`, `te2`, `te3`, `console`, `failover`
        /// </summary>
        [Input("accessPortSharedType")]
        public Input<string>? AccessPortSharedType { get; set; }

        /// <summary>
        /// Assign priority - Range: `0`-`7`
        /// </summary>
        [Input("assignPriority")]
        public Input<int>? AssignPriority { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("assignPriorityVariable")]
        public Input<string>? AssignPriorityVariable { get; set; }

        /// <summary>
        /// Bay - Range: `0`-`2`
        /// </summary>
        [Input("bay")]
        public Input<int>? Bay { get; set; }

        /// <summary>
        /// Assign default gateway
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("defaultGatewayVariable")]
        public Input<string>? DefaultGatewayVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("interfaces")]
        private InputList<Inputs.OtherUcseFeatureInterfaceGetArgs>? _interfaces;

        /// <summary>
        /// Interface name: GigabitEthernet0/&lt;&gt;/&lt;&gt; when present
        /// </summary>
        public InputList<Inputs.OtherUcseFeatureInterfaceGetArgs> Interfaces
        {
            get => _interfaces ?? (_interfaces = new InputList<Inputs.OtherUcseFeatureInterfaceGetArgs>());
            set => _interfaces = value;
        }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Slot - Range: `0`-`3`
        /// </summary>
        [Input("slot")]
        public Input<int>? Slot { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Assign Vlan Id - Range: `2`-`4095`
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vlanIdVariable")]
        public Input<string>? VlanIdVariable { get; set; }

        public OtherUcseFeatureState()
        {
        }
        public static new OtherUcseFeatureState Empty => new OtherUcseFeatureState();
    }
}
