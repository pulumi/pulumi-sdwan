// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetServiceLanVpnInterfaceSviFeature
    {
        /// <summary>
        /// This data source can read the Service LAN VPN Interface SVI Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnInterfaceSviFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         ServiceLanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceLanVpnInterfaceSviFeatureResult> InvokeAsync(GetServiceLanVpnInterfaceSviFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceLanVpnInterfaceSviFeatureResult>("sdwan:index/getServiceLanVpnInterfaceSviFeature:getServiceLanVpnInterfaceSviFeature", args ?? new GetServiceLanVpnInterfaceSviFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service LAN VPN Interface SVI Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnInterfaceSviFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         ServiceLanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceLanVpnInterfaceSviFeatureResult> Invoke(GetServiceLanVpnInterfaceSviFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceLanVpnInterfaceSviFeatureResult>("sdwan:index/getServiceLanVpnInterfaceSviFeature:getServiceLanVpnInterfaceSviFeature", args ?? new GetServiceLanVpnInterfaceSviFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceLanVpnInterfaceSviFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId", required: true)]
        public string ServiceLanVpnFeatureId { get; set; } = null!;

        public GetServiceLanVpnInterfaceSviFeatureArgs()
        {
        }
        public static new GetServiceLanVpnInterfaceSviFeatureArgs Empty => new GetServiceLanVpnInterfaceSviFeatureArgs();
    }

    public sealed class GetServiceLanVpnInterfaceSviFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        [Input("serviceLanVpnFeatureId", required: true)]
        public Input<string> ServiceLanVpnFeatureId { get; set; } = null!;

        public GetServiceLanVpnInterfaceSviFeatureInvokeArgs()
        {
        }
        public static new GetServiceLanVpnInterfaceSviFeatureInvokeArgs Empty => new GetServiceLanVpnInterfaceSviFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceLanVpnInterfaceSviFeatureResult
    {
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, \n\n seconds
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpTimeoutVariable;
        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureArpResult> Arps;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        public readonly bool EnableDhcpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnableDhcpv6Variable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// ICMP/ICMPv6 Redirect Disable
        /// </summary>
        public readonly bool IcmpRedirectDisable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IcmpRedirectDisableVariable;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Interface description
        /// </summary>
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// Interface MTU \n\n in bytes
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        /// <summary>
        /// Interface name: VLAN 1 - VLAN 4094 when present
        /// </summary>
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// IP MTU \n\n, in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// IP Address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        /// <summary>
        /// List of DHCP helper addresses
        /// </summary>
        public readonly ImmutableArray<string> Ipv4DhcpHelpers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpHelpersVariable;
        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressResult> Ipv4SecondaryAddresses;
        /// <summary>
        /// Subnet Mask
        /// </summary>
        public readonly string Ipv4SubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4SubnetMaskVariable;
        /// <summary>
        /// Enable ipv4 VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpResult> Ipv4Vrrps;
        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperResult> Ipv6DhcpHelpers;
        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressResult> Ipv6SecondaryAddresses;
        /// <summary>
        /// Enable ipv6 VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpResult> Ipv6Vrrps;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Service LAN VPN Feature ID
        /// </summary>
        public readonly string ServiceLanVpnFeatureId;
        /// <summary>
        /// Administrative state
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetServiceLanVpnInterfaceSviFeatureResult(
            int arpTimeout,

            string arpTimeoutVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureArpResult> arps,

            string description,

            bool enableDhcpv6,

            string enableDhcpv6Variable,

            string featureProfileId,

            bool icmpRedirectDisable,

            string icmpRedirectDisableVariable,

            string id,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            int interfaceMtu,

            string interfaceMtuVariable,

            string interfaceName,

            string interfaceNameVariable,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            string ipv4Address,

            string ipv4AddressVariable,

            ImmutableArray<string> ipv4DhcpHelpers,

            string ipv4DhcpHelpersVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddressResult> ipv4SecondaryAddresses,

            string ipv4SubnetMask,

            string ipv4SubnetMaskVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpResult> ipv4Vrrps,

            string ipv6Address,

            string ipv6AddressVariable,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelperResult> ipv6DhcpHelpers,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddressResult> ipv6SecondaryAddresses,

            ImmutableArray<Outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpResult> ipv6Vrrps,

            string name,

            string serviceLanVpnFeatureId,

            bool shutdown,

            string shutdownVariable,

            int tcpMss,

            string tcpMssVariable,

            int version)
        {
            ArpTimeout = arpTimeout;
            ArpTimeoutVariable = arpTimeoutVariable;
            Arps = arps;
            Description = description;
            EnableDhcpv6 = enableDhcpv6;
            EnableDhcpv6Variable = enableDhcpv6Variable;
            FeatureProfileId = featureProfileId;
            IcmpRedirectDisable = icmpRedirectDisable;
            IcmpRedirectDisableVariable = icmpRedirectDisableVariable;
            Id = id;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv4DhcpHelpers = ipv4DhcpHelpers;
            Ipv4DhcpHelpersVariable = ipv4DhcpHelpersVariable;
            Ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            Ipv4SubnetMask = ipv4SubnetMask;
            Ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            Ipv4Vrrps = ipv4Vrrps;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Ipv6DhcpHelpers = ipv6DhcpHelpers;
            Ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            Ipv6Vrrps = ipv6Vrrps;
            Name = name;
            ServiceLanVpnFeatureId = serviceLanVpnFeatureId;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            Version = version;
        }
    }
}
