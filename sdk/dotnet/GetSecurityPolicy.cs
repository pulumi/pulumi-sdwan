// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetSecurityPolicy
    {
        /// <summary>
        /// This data source can read the Security Policy .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSecurityPolicy.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSecurityPolicyResult> InvokeAsync(GetSecurityPolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSecurityPolicyResult>("sdwan:index/getSecurityPolicy:getSecurityPolicy", args ?? new GetSecurityPolicyArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Security Policy .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSecurityPolicy.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityPolicyResult> Invoke(GetSecurityPolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityPolicyResult>("sdwan:index/getSecurityPolicy:getSecurityPolicy", args ?? new GetSecurityPolicyInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Security Policy .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSecurityPolicy.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSecurityPolicyResult> Invoke(GetSecurityPolicyInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSecurityPolicyResult>("sdwan:index/getSecurityPolicy:getSecurityPolicy", args ?? new GetSecurityPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityPolicyArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSecurityPolicyArgs()
        {
        }
        public static new GetSecurityPolicyArgs Empty => new GetSecurityPolicyArgs();
    }

    public sealed class GetSecurityPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSecurityPolicyInvokeArgs()
        {
        }
        public static new GetSecurityPolicyInvokeArgs Empty => new GetSecurityPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetSecurityPolicyResult
    {
        /// <summary>
        /// Audit trail
        /// </summary>
        public readonly string AuditTrail;
        /// <summary>
        /// List of policy definitions
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSecurityPolicyDefinitionResult> Definitions;
        /// <summary>
        /// The description of the security policy
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Bypass firewall policy and allow all Internet traffic to/from VPN 0
        /// </summary>
        public readonly string DirectInternetApplications;
        /// <summary>
        /// Failure mode
        /// </summary>
        public readonly string FailureMode;
        /// <summary>
        /// High Speed Logging Server IP
        /// </summary>
        public readonly string HighSpeedLoggingServerIp;
        /// <summary>
        /// High Speed Logging Port
        /// </summary>
        public readonly string HighSpeedLoggingServerPort;
        /// <summary>
        /// High Speed Logging Source Interface
        /// </summary>
        public readonly string HighSpeedLoggingServerSourceInterface;
        /// <summary>
        /// High Speed Logging VPN
        /// </summary>
        public readonly string HighSpeedLoggingVpn;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ICMP Unreachable Allow
        /// </summary>
        public readonly bool ImcpUnreachableAllow;
        public readonly ImmutableArray<Outputs.GetSecurityPolicyLoggingResult> Loggings;
        /// <summary>
        /// Match Statistics per-filter
        /// </summary>
        public readonly string MatchStatisticsPerFilter;
        /// <summary>
        /// Max Incomplete ICMP Limit
        /// </summary>
        public readonly int MaxIncompleteIcmpLimit;
        /// <summary>
        /// Max Incomplete TCP Limit
        /// </summary>
        public readonly int MaxIncompleteTcpLimit;
        /// <summary>
        /// Max Incomplete UDP Limit
        /// </summary>
        public readonly int MaxIncompleteUdpLimit;
        /// <summary>
        /// The policy mode
        /// </summary>
        public readonly string Mode;
        /// <summary>
        /// The name of the security policy
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Session Reclassify Allow
        /// </summary>
        public readonly bool SessionReclassifyAllow;
        /// <summary>
        /// TCP SYN Flood Limit, value from 1 to 4294967295
        /// </summary>
        public readonly string TcpSynFloodLimit;
        /// <summary>
        /// Unified Logging
        /// </summary>
        public readonly bool UnifiedLogging;
        /// <summary>
        /// The use case of the security policy
        /// </summary>
        public readonly string UseCase;
        /// <summary>
        /// The version of the object
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetSecurityPolicyResult(
            string auditTrail,

            ImmutableArray<Outputs.GetSecurityPolicyDefinitionResult> definitions,

            string description,

            string directInternetApplications,

            string failureMode,

            string highSpeedLoggingServerIp,

            string highSpeedLoggingServerPort,

            string highSpeedLoggingServerSourceInterface,

            string highSpeedLoggingVpn,

            string id,

            bool imcpUnreachableAllow,

            ImmutableArray<Outputs.GetSecurityPolicyLoggingResult> loggings,

            string matchStatisticsPerFilter,

            int maxIncompleteIcmpLimit,

            int maxIncompleteTcpLimit,

            int maxIncompleteUdpLimit,

            string mode,

            string name,

            bool sessionReclassifyAllow,

            string tcpSynFloodLimit,

            bool unifiedLogging,

            string useCase,

            int version)
        {
            AuditTrail = auditTrail;
            Definitions = definitions;
            Description = description;
            DirectInternetApplications = directInternetApplications;
            FailureMode = failureMode;
            HighSpeedLoggingServerIp = highSpeedLoggingServerIp;
            HighSpeedLoggingServerPort = highSpeedLoggingServerPort;
            HighSpeedLoggingServerSourceInterface = highSpeedLoggingServerSourceInterface;
            HighSpeedLoggingVpn = highSpeedLoggingVpn;
            Id = id;
            ImcpUnreachableAllow = imcpUnreachableAllow;
            Loggings = loggings;
            MatchStatisticsPerFilter = matchStatisticsPerFilter;
            MaxIncompleteIcmpLimit = maxIncompleteIcmpLimit;
            MaxIncompleteTcpLimit = maxIncompleteTcpLimit;
            MaxIncompleteUdpLimit = maxIncompleteUdpLimit;
            Mode = mode;
            Name = name;
            SessionReclassifyAllow = sessionReclassifyAllow;
            TcpSynFloodLimit = tcpSynFloodLimit;
            UnifiedLogging = unifiedLogging;
            UseCase = useCase;
            Version = version;
        }
    }
}
