// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service LAN VPN Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// Expected import identifier with the format: "service_lan_vpn_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceLanVpnFeature:ServiceLanVpnFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceLanVpnFeature:ServiceLanVpnFeature")]
    public partial class ServiceLanVpnFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        [Output("advertiseOmpIpv4s")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureAdvertiseOmpIpv4>> AdvertiseOmpIpv4s { get; private set; } = null!;

        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        [Output("advertiseOmpIpv6s")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureAdvertiseOmpIpv6>> AdvertiseOmpIpv6s { get; private set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Output("configDescription")]
        public Output<string?> ConfigDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("configDescriptionVariable")]
        public Output<string?> ConfigDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable SDWAN Remote Access - Default value: `false`
        /// </summary>
        [Output("enableSdwanRemoteAccess")]
        public Output<bool?> EnableSdwanRemoteAccess { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        [Output("greRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureGreRoute>> GreRoutes { get; private set; } = null!;

        [Output("hostMappings")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureHostMapping>> HostMappings { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        [Output("ipsecRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpsecRoute>> IpsecRoutes { get; private set; } = null!;

        [Output("ipv4ExportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpv4ExportRouteTarget>> Ipv4ExportRouteTargets { get; private set; } = null!;

        [Output("ipv4ImportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpv4ImportRouteTarget>> Ipv4ImportRouteTargets { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        [Output("ipv4StaticRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpv4StaticRoute>> Ipv4StaticRoutes { get; private set; } = null!;

        [Output("ipv6ExportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpv6ExportRouteTarget>> Ipv6ExportRouteTargets { get; private set; } = null!;

        [Output("ipv6ImportRouteTargets")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpv6ImportRouteTarget>> Ipv6ImportRouteTargets { get; private set; } = null!;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        [Output("ipv6StaticRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureIpv6StaticRoute>> Ipv6StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        [Output("nat64V4Pools")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureNat64V4Pool>> Nat64V4Pools { get; private set; } = null!;

        /// <summary>
        /// NAT Pool
        /// </summary>
        [Output("natPools")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureNatPool>> NatPools { get; private set; } = null!;

        /// <summary>
        /// NAT Port Forward
        /// </summary>
        [Output("natPortForwards")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureNatPortForward>> NatPortForwards { get; private set; } = null!;

        /// <summary>
        /// OMP Admin Distance IPv4 - Range: `1`-`255`
        /// </summary>
        [Output("ompAdminDistanceIpv4")]
        public Output<int?> OmpAdminDistanceIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ompAdminDistanceIpv4Variable")]
        public Output<string?> OmpAdminDistanceIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// OMP Admin Distance IPv6 - Range: `1`-`255`
        /// </summary>
        [Output("ompAdminDistanceIpv6")]
        public Output<int?> OmpAdminDistanceIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ompAdminDistanceIpv6Variable")]
        public Output<string?> OmpAdminDistanceIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Output("primaryDnsAddressIpv4")]
        public Output<string?> PrimaryDnsAddressIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primaryDnsAddressIpv4Variable")]
        public Output<string?> PrimaryDnsAddressIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Output("primaryDnsAddressIpv6")]
        public Output<string?> PrimaryDnsAddressIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primaryDnsAddressIpv6Variable")]
        public Output<string?> PrimaryDnsAddressIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        [Output("routeLeakFromGlobalVpns")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpn>> RouteLeakFromGlobalVpns { get; private set; } = null!;

        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        [Output("routeLeakFromOtherServices")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureRouteLeakFromOtherService>> RouteLeakFromOtherServices { get; private set; } = null!;

        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        [Output("routeLeakToGlobalVpns")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureRouteLeakToGlobalVpn>> RouteLeakToGlobalVpns { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Output("secondaryDnsAddressIpv4")]
        public Output<string?> SecondaryDnsAddressIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryDnsAddressIpv4Variable")]
        public Output<string?> SecondaryDnsAddressIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Output("secondaryDnsAddressIpv6")]
        public Output<string?> SecondaryDnsAddressIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryDnsAddressIpv6Variable")]
        public Output<string?> SecondaryDnsAddressIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Service
        /// </summary>
        [Output("serviceRoutes")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureServiceRoute>> ServiceRoutes { get; private set; } = null!;

        /// <summary>
        /// Service
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureService>> Services { get; private set; } = null!;

        /// <summary>
        /// Static NAT Rules
        /// </summary>
        [Output("staticNats")]
        public Output<ImmutableArray<Outputs.ServiceLanVpnFeatureStaticNat>> StaticNats { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// VPN - Range: `1`-`65527` - Default value: `0`
        /// </summary>
        [Output("vpn")]
        public Output<int?> Vpn { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("vpnVariable")]
        public Output<string?> VpnVariable { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceLanVpnFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceLanVpnFeature(string name, ServiceLanVpnFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnFeature:ServiceLanVpnFeature", name, args ?? new ServiceLanVpnFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceLanVpnFeature(string name, Input<string> id, ServiceLanVpnFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceLanVpnFeature:ServiceLanVpnFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceLanVpnFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceLanVpnFeature Get(string name, Input<string> id, ServiceLanVpnFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceLanVpnFeature(name, id, state, options);
        }
    }

    public sealed class ServiceLanVpnFeatureArgs : global::Pulumi.ResourceArgs
    {
        [Input("advertiseOmpIpv4s")]
        private InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv4Args>? _advertiseOmpIpv4s;

        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv4Args> AdvertiseOmpIpv4s
        {
            get => _advertiseOmpIpv4s ?? (_advertiseOmpIpv4s = new InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv4Args>());
            set => _advertiseOmpIpv4s = value;
        }

        [Input("advertiseOmpIpv6s")]
        private InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv6Args>? _advertiseOmpIpv6s;

        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv6Args> AdvertiseOmpIpv6s
        {
            get => _advertiseOmpIpv6s ?? (_advertiseOmpIpv6s = new InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv6Args>());
            set => _advertiseOmpIpv6s = value;
        }

        /// <summary>
        /// Name
        /// </summary>
        [Input("configDescription")]
        public Input<string>? ConfigDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("configDescriptionVariable")]
        public Input<string>? ConfigDescriptionVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable SDWAN Remote Access - Default value: `false`
        /// </summary>
        [Input("enableSdwanRemoteAccess")]
        public Input<bool>? EnableSdwanRemoteAccess { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("greRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureGreRouteArgs>? _greRoutes;

        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureGreRouteArgs> GreRoutes
        {
            get => _greRoutes ?? (_greRoutes = new InputList<Inputs.ServiceLanVpnFeatureGreRouteArgs>());
            set => _greRoutes = value;
        }

        [Input("hostMappings")]
        private InputList<Inputs.ServiceLanVpnFeatureHostMappingArgs>? _hostMappings;
        public InputList<Inputs.ServiceLanVpnFeatureHostMappingArgs> HostMappings
        {
            get => _hostMappings ?? (_hostMappings = new InputList<Inputs.ServiceLanVpnFeatureHostMappingArgs>());
            set => _hostMappings = value;
        }

        [Input("ipsecRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureIpsecRouteArgs>? _ipsecRoutes;

        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureIpsecRouteArgs> IpsecRoutes
        {
            get => _ipsecRoutes ?? (_ipsecRoutes = new InputList<Inputs.ServiceLanVpnFeatureIpsecRouteArgs>());
            set => _ipsecRoutes = value;
        }

        [Input("ipv4ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv4ExportRouteTargetArgs>? _ipv4ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv4ExportRouteTargetArgs> Ipv4ExportRouteTargets
        {
            get => _ipv4ExportRouteTargets ?? (_ipv4ExportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv4ExportRouteTargetArgs>());
            set => _ipv4ExportRouteTargets = value;
        }

        [Input("ipv4ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv4ImportRouteTargetArgs>? _ipv4ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv4ImportRouteTargetArgs> Ipv4ImportRouteTargets
        {
            get => _ipv4ImportRouteTargets ?? (_ipv4ImportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv4ImportRouteTargetArgs>());
            set => _ipv4ImportRouteTargets = value;
        }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv4StaticRouteArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureIpv4StaticRouteArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.ServiceLanVpnFeatureIpv4StaticRouteArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv6ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv6ExportRouteTargetArgs>? _ipv6ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv6ExportRouteTargetArgs> Ipv6ExportRouteTargets
        {
            get => _ipv6ExportRouteTargets ?? (_ipv6ExportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv6ExportRouteTargetArgs>());
            set => _ipv6ExportRouteTargets = value;
        }

        [Input("ipv6ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv6ImportRouteTargetArgs>? _ipv6ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv6ImportRouteTargetArgs> Ipv6ImportRouteTargets
        {
            get => _ipv6ImportRouteTargets ?? (_ipv6ImportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv6ImportRouteTargetArgs>());
            set => _ipv6ImportRouteTargets = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv6StaticRouteArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureIpv6StaticRouteArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.ServiceLanVpnFeatureIpv6StaticRouteArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat64V4Pools")]
        private InputList<Inputs.ServiceLanVpnFeatureNat64V4PoolArgs>? _nat64V4Pools;

        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureNat64V4PoolArgs> Nat64V4Pools
        {
            get => _nat64V4Pools ?? (_nat64V4Pools = new InputList<Inputs.ServiceLanVpnFeatureNat64V4PoolArgs>());
            set => _nat64V4Pools = value;
        }

        [Input("natPools")]
        private InputList<Inputs.ServiceLanVpnFeatureNatPoolArgs>? _natPools;

        /// <summary>
        /// NAT Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureNatPoolArgs> NatPools
        {
            get => _natPools ?? (_natPools = new InputList<Inputs.ServiceLanVpnFeatureNatPoolArgs>());
            set => _natPools = value;
        }

        [Input("natPortForwards")]
        private InputList<Inputs.ServiceLanVpnFeatureNatPortForwardArgs>? _natPortForwards;

        /// <summary>
        /// NAT Port Forward
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureNatPortForwardArgs> NatPortForwards
        {
            get => _natPortForwards ?? (_natPortForwards = new InputList<Inputs.ServiceLanVpnFeatureNatPortForwardArgs>());
            set => _natPortForwards = value;
        }

        /// <summary>
        /// OMP Admin Distance IPv4 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv4")]
        public Input<int>? OmpAdminDistanceIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv4Variable")]
        public Input<string>? OmpAdminDistanceIpv4Variable { get; set; }

        /// <summary>
        /// OMP Admin Distance IPv6 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv6")]
        public Input<int>? OmpAdminDistanceIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv6Variable")]
        public Input<string>? OmpAdminDistanceIpv6Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Input("primaryDnsAddressIpv4")]
        public Input<string>? PrimaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv4Variable")]
        public Input<string>? PrimaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Input("primaryDnsAddressIpv6")]
        public Input<string>? PrimaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv6Variable")]
        public Input<string>? PrimaryDnsAddressIpv6Variable { get; set; }

        [Input("routeLeakFromGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgs>? _routeLeakFromGlobalVpns;

        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgs> RouteLeakFromGlobalVpns
        {
            get => _routeLeakFromGlobalVpns ?? (_routeLeakFromGlobalVpns = new InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnArgs>());
            set => _routeLeakFromGlobalVpns = value;
        }

        [Input("routeLeakFromOtherServices")]
        private InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceArgs>? _routeLeakFromOtherServices;

        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceArgs> RouteLeakFromOtherServices
        {
            get => _routeLeakFromOtherServices ?? (_routeLeakFromOtherServices = new InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceArgs>());
            set => _routeLeakFromOtherServices = value;
        }

        [Input("routeLeakToGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnArgs>? _routeLeakToGlobalVpns;

        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnArgs> RouteLeakToGlobalVpns
        {
            get => _routeLeakToGlobalVpns ?? (_routeLeakToGlobalVpns = new InputList<Inputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnArgs>());
            set => _routeLeakToGlobalVpns = value;
        }

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Input("secondaryDnsAddressIpv4")]
        public Input<string>? SecondaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv4Variable")]
        public Input<string>? SecondaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Input("secondaryDnsAddressIpv6")]
        public Input<string>? SecondaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv6Variable")]
        public Input<string>? SecondaryDnsAddressIpv6Variable { get; set; }

        [Input("serviceRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureServiceRouteArgs>? _serviceRoutes;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureServiceRouteArgs> ServiceRoutes
        {
            get => _serviceRoutes ?? (_serviceRoutes = new InputList<Inputs.ServiceLanVpnFeatureServiceRouteArgs>());
            set => _serviceRoutes = value;
        }

        [Input("services")]
        private InputList<Inputs.ServiceLanVpnFeatureServiceArgs>? _services;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ServiceLanVpnFeatureServiceArgs>());
            set => _services = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.ServiceLanVpnFeatureStaticNatArgs>? _staticNats;

        /// <summary>
        /// Static NAT Rules
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureStaticNatArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.ServiceLanVpnFeatureStaticNatArgs>());
            set => _staticNats = value;
        }

        /// <summary>
        /// VPN - Range: `1`-`65527` - Default value: `0`
        /// </summary>
        [Input("vpn")]
        public Input<int>? Vpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnVariable")]
        public Input<string>? VpnVariable { get; set; }

        public ServiceLanVpnFeatureArgs()
        {
        }
        public static new ServiceLanVpnFeatureArgs Empty => new ServiceLanVpnFeatureArgs();
    }

    public sealed class ServiceLanVpnFeatureState : global::Pulumi.ResourceArgs
    {
        [Input("advertiseOmpIpv4s")]
        private InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv4GetArgs>? _advertiseOmpIpv4s;

        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv4GetArgs> AdvertiseOmpIpv4s
        {
            get => _advertiseOmpIpv4s ?? (_advertiseOmpIpv4s = new InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv4GetArgs>());
            set => _advertiseOmpIpv4s = value;
        }

        [Input("advertiseOmpIpv6s")]
        private InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv6GetArgs>? _advertiseOmpIpv6s;

        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv6GetArgs> AdvertiseOmpIpv6s
        {
            get => _advertiseOmpIpv6s ?? (_advertiseOmpIpv6s = new InputList<Inputs.ServiceLanVpnFeatureAdvertiseOmpIpv6GetArgs>());
            set => _advertiseOmpIpv6s = value;
        }

        /// <summary>
        /// Name
        /// </summary>
        [Input("configDescription")]
        public Input<string>? ConfigDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("configDescriptionVariable")]
        public Input<string>? ConfigDescriptionVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable SDWAN Remote Access - Default value: `false`
        /// </summary>
        [Input("enableSdwanRemoteAccess")]
        public Input<bool>? EnableSdwanRemoteAccess { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("greRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureGreRouteGetArgs>? _greRoutes;

        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureGreRouteGetArgs> GreRoutes
        {
            get => _greRoutes ?? (_greRoutes = new InputList<Inputs.ServiceLanVpnFeatureGreRouteGetArgs>());
            set => _greRoutes = value;
        }

        [Input("hostMappings")]
        private InputList<Inputs.ServiceLanVpnFeatureHostMappingGetArgs>? _hostMappings;
        public InputList<Inputs.ServiceLanVpnFeatureHostMappingGetArgs> HostMappings
        {
            get => _hostMappings ?? (_hostMappings = new InputList<Inputs.ServiceLanVpnFeatureHostMappingGetArgs>());
            set => _hostMappings = value;
        }

        [Input("ipsecRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureIpsecRouteGetArgs>? _ipsecRoutes;

        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureIpsecRouteGetArgs> IpsecRoutes
        {
            get => _ipsecRoutes ?? (_ipsecRoutes = new InputList<Inputs.ServiceLanVpnFeatureIpsecRouteGetArgs>());
            set => _ipsecRoutes = value;
        }

        [Input("ipv4ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv4ExportRouteTargetGetArgs>? _ipv4ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv4ExportRouteTargetGetArgs> Ipv4ExportRouteTargets
        {
            get => _ipv4ExportRouteTargets ?? (_ipv4ExportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv4ExportRouteTargetGetArgs>());
            set => _ipv4ExportRouteTargets = value;
        }

        [Input("ipv4ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv4ImportRouteTargetGetArgs>? _ipv4ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv4ImportRouteTargetGetArgs> Ipv4ImportRouteTargets
        {
            get => _ipv4ImportRouteTargets ?? (_ipv4ImportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv4ImportRouteTargetGetArgs>());
            set => _ipv4ImportRouteTargets = value;
        }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv4StaticRouteGetArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureIpv4StaticRouteGetArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.ServiceLanVpnFeatureIpv4StaticRouteGetArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv6ExportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv6ExportRouteTargetGetArgs>? _ipv6ExportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv6ExportRouteTargetGetArgs> Ipv6ExportRouteTargets
        {
            get => _ipv6ExportRouteTargets ?? (_ipv6ExportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv6ExportRouteTargetGetArgs>());
            set => _ipv6ExportRouteTargets = value;
        }

        [Input("ipv6ImportRouteTargets")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv6ImportRouteTargetGetArgs>? _ipv6ImportRouteTargets;
        public InputList<Inputs.ServiceLanVpnFeatureIpv6ImportRouteTargetGetArgs> Ipv6ImportRouteTargets
        {
            get => _ipv6ImportRouteTargets ?? (_ipv6ImportRouteTargets = new InputList<Inputs.ServiceLanVpnFeatureIpv6ImportRouteTargetGetArgs>());
            set => _ipv6ImportRouteTargets = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureIpv6StaticRouteGetArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureIpv6StaticRouteGetArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.ServiceLanVpnFeatureIpv6StaticRouteGetArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat64V4Pools")]
        private InputList<Inputs.ServiceLanVpnFeatureNat64V4PoolGetArgs>? _nat64V4Pools;

        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureNat64V4PoolGetArgs> Nat64V4Pools
        {
            get => _nat64V4Pools ?? (_nat64V4Pools = new InputList<Inputs.ServiceLanVpnFeatureNat64V4PoolGetArgs>());
            set => _nat64V4Pools = value;
        }

        [Input("natPools")]
        private InputList<Inputs.ServiceLanVpnFeatureNatPoolGetArgs>? _natPools;

        /// <summary>
        /// NAT Pool
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureNatPoolGetArgs> NatPools
        {
            get => _natPools ?? (_natPools = new InputList<Inputs.ServiceLanVpnFeatureNatPoolGetArgs>());
            set => _natPools = value;
        }

        [Input("natPortForwards")]
        private InputList<Inputs.ServiceLanVpnFeatureNatPortForwardGetArgs>? _natPortForwards;

        /// <summary>
        /// NAT Port Forward
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureNatPortForwardGetArgs> NatPortForwards
        {
            get => _natPortForwards ?? (_natPortForwards = new InputList<Inputs.ServiceLanVpnFeatureNatPortForwardGetArgs>());
            set => _natPortForwards = value;
        }

        /// <summary>
        /// OMP Admin Distance IPv4 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv4")]
        public Input<int>? OmpAdminDistanceIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv4Variable")]
        public Input<string>? OmpAdminDistanceIpv4Variable { get; set; }

        /// <summary>
        /// OMP Admin Distance IPv6 - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv6")]
        public Input<int>? OmpAdminDistanceIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv6Variable")]
        public Input<string>? OmpAdminDistanceIpv6Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Input("primaryDnsAddressIpv4")]
        public Input<string>? PrimaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv4Variable")]
        public Input<string>? PrimaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Input("primaryDnsAddressIpv6")]
        public Input<string>? PrimaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv6Variable")]
        public Input<string>? PrimaryDnsAddressIpv6Variable { get; set; }

        [Input("routeLeakFromGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnGetArgs>? _routeLeakFromGlobalVpns;

        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnGetArgs> RouteLeakFromGlobalVpns
        {
            get => _routeLeakFromGlobalVpns ?? (_routeLeakFromGlobalVpns = new InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnGetArgs>());
            set => _routeLeakFromGlobalVpns = value;
        }

        [Input("routeLeakFromOtherServices")]
        private InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceGetArgs>? _routeLeakFromOtherServices;

        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceGetArgs> RouteLeakFromOtherServices
        {
            get => _routeLeakFromOtherServices ?? (_routeLeakFromOtherServices = new InputList<Inputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceGetArgs>());
            set => _routeLeakFromOtherServices = value;
        }

        [Input("routeLeakToGlobalVpns")]
        private InputList<Inputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnGetArgs>? _routeLeakToGlobalVpns;

        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnGetArgs> RouteLeakToGlobalVpns
        {
            get => _routeLeakToGlobalVpns ?? (_routeLeakToGlobalVpns = new InputList<Inputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnGetArgs>());
            set => _routeLeakToGlobalVpns = value;
        }

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Input("secondaryDnsAddressIpv4")]
        public Input<string>? SecondaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv4Variable")]
        public Input<string>? SecondaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Input("secondaryDnsAddressIpv6")]
        public Input<string>? SecondaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv6Variable")]
        public Input<string>? SecondaryDnsAddressIpv6Variable { get; set; }

        [Input("serviceRoutes")]
        private InputList<Inputs.ServiceLanVpnFeatureServiceRouteGetArgs>? _serviceRoutes;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureServiceRouteGetArgs> ServiceRoutes
        {
            get => _serviceRoutes ?? (_serviceRoutes = new InputList<Inputs.ServiceLanVpnFeatureServiceRouteGetArgs>());
            set => _serviceRoutes = value;
        }

        [Input("services")]
        private InputList<Inputs.ServiceLanVpnFeatureServiceGetArgs>? _services;

        /// <summary>
        /// Service
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.ServiceLanVpnFeatureServiceGetArgs>());
            set => _services = value;
        }

        [Input("staticNats")]
        private InputList<Inputs.ServiceLanVpnFeatureStaticNatGetArgs>? _staticNats;

        /// <summary>
        /// Static NAT Rules
        /// </summary>
        public InputList<Inputs.ServiceLanVpnFeatureStaticNatGetArgs> StaticNats
        {
            get => _staticNats ?? (_staticNats = new InputList<Inputs.ServiceLanVpnFeatureStaticNatGetArgs>());
            set => _staticNats = value;
        }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// VPN - Range: `1`-`65527` - Default value: `0`
        /// </summary>
        [Input("vpn")]
        public Input<int>? Vpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnVariable")]
        public Input<string>? VpnVariable { get; set; }

        public ServiceLanVpnFeatureState()
        {
        }
        public static new ServiceLanVpnFeatureState Empty => new ServiceLanVpnFeatureState();
    }
}
