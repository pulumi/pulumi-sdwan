// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a DNS Security Policy Definition .
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.DnsSecurityPolicyDefinition("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "Example",
    ///         DomainListId = "84f10c9d-def7-45a3-8c64-6df26163c861",
    ///         LocalDomainBypassEnabled = false,
    ///         MatchAllVpn = true,
    ///         Dnscrypt = true,
    ///         UmbrellaDnsDefault = true,
    ///         CiscoSigCredentialsFeatureTemplateId = "22e8bd63-df16-4487-bf49-745064b941ee",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition")]
    public partial class DnsSecurityPolicyDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Credentials feature template ID
        /// </summary>
        [Output("ciscoSigCredentialsFeatureTemplateId")]
        public Output<string> CiscoSigCredentialsFeatureTemplateId { get; private set; } = null!;

        /// <summary>
        /// Credentials feature template version
        /// </summary>
        [Output("ciscoSigCredentialsFeatureTemplateVersion")]
        public Output<int?> CiscoSigCredentialsFeatureTemplateVersion { get; private set; } = null!;

        /// <summary>
        /// Only relevant when `umbrella_dns_default` is `false`
        /// </summary>
        [Output("customDnsServerIp")]
        public Output<string?> CustomDnsServerIp { get; private set; } = null!;

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Should DNSCrypt be enabled
        /// </summary>
        [Output("dnscrypt")]
        public Output<bool?> Dnscrypt { get; private set; } = null!;

        /// <summary>
        /// Local domain bypass list ID
        /// </summary>
        [Output("domainListId")]
        public Output<string?> DomainListId { get; private set; } = null!;

        /// <summary>
        /// Local domain bypass list version
        /// </summary>
        [Output("domainListVersion")]
        public Output<int?> DomainListVersion { get; private set; } = null!;

        /// <summary>
        /// Should the local domain bypass list be enabled
        /// </summary>
        [Output("localDomainBypassEnabled")]
        public Output<bool?> LocalDomainBypassEnabled { get; private set; } = null!;

        /// <summary>
        /// Should use match all VPN
        /// </summary>
        [Output("matchAllVpn")]
        public Output<bool> MatchAllVpn { get; private set; } = null!;

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Only relevant when `match_all_vpn` is `false`
        /// </summary>
        [Output("targetVpns")]
        public Output<ImmutableArray<Outputs.DnsSecurityPolicyDefinitionTargetVpn>> TargetVpns { get; private set; } = null!;

        /// <summary>
        /// Should use umbrella as DNS Server
        /// </summary>
        [Output("umbrellaDnsDefault")]
        public Output<bool> UmbrellaDnsDefault { get; private set; } = null!;

        /// <summary>
        /// The version of the object
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a DnsSecurityPolicyDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsSecurityPolicyDefinition(string name, DnsSecurityPolicyDefinitionArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition", name, args ?? new DnsSecurityPolicyDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsSecurityPolicyDefinition(string name, Input<string> id, DnsSecurityPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsSecurityPolicyDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsSecurityPolicyDefinition Get(string name, Input<string> id, DnsSecurityPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsSecurityPolicyDefinition(name, id, state, options);
        }
    }

    public sealed class DnsSecurityPolicyDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Credentials feature template ID
        /// </summary>
        [Input("ciscoSigCredentialsFeatureTemplateId", required: true)]
        public Input<string> CiscoSigCredentialsFeatureTemplateId { get; set; } = null!;

        /// <summary>
        /// Credentials feature template version
        /// </summary>
        [Input("ciscoSigCredentialsFeatureTemplateVersion")]
        public Input<int>? CiscoSigCredentialsFeatureTemplateVersion { get; set; }

        /// <summary>
        /// Only relevant when `umbrella_dns_default` is `false`
        /// </summary>
        [Input("customDnsServerIp")]
        public Input<string>? CustomDnsServerIp { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Should DNSCrypt be enabled
        /// </summary>
        [Input("dnscrypt")]
        public Input<bool>? Dnscrypt { get; set; }

        /// <summary>
        /// Local domain bypass list ID
        /// </summary>
        [Input("domainListId")]
        public Input<string>? DomainListId { get; set; }

        /// <summary>
        /// Local domain bypass list version
        /// </summary>
        [Input("domainListVersion")]
        public Input<int>? DomainListVersion { get; set; }

        /// <summary>
        /// Should the local domain bypass list be enabled
        /// </summary>
        [Input("localDomainBypassEnabled")]
        public Input<bool>? LocalDomainBypassEnabled { get; set; }

        /// <summary>
        /// Should use match all VPN
        /// </summary>
        [Input("matchAllVpn", required: true)]
        public Input<bool> MatchAllVpn { get; set; } = null!;

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<Inputs.DnsSecurityPolicyDefinitionTargetVpnArgs>? _targetVpns;

        /// <summary>
        /// Only relevant when `match_all_vpn` is `false`
        /// </summary>
        public InputList<Inputs.DnsSecurityPolicyDefinitionTargetVpnArgs> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<Inputs.DnsSecurityPolicyDefinitionTargetVpnArgs>());
            set => _targetVpns = value;
        }

        /// <summary>
        /// Should use umbrella as DNS Server
        /// </summary>
        [Input("umbrellaDnsDefault", required: true)]
        public Input<bool> UmbrellaDnsDefault { get; set; } = null!;

        public DnsSecurityPolicyDefinitionArgs()
        {
        }
        public static new DnsSecurityPolicyDefinitionArgs Empty => new DnsSecurityPolicyDefinitionArgs();
    }

    public sealed class DnsSecurityPolicyDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Credentials feature template ID
        /// </summary>
        [Input("ciscoSigCredentialsFeatureTemplateId")]
        public Input<string>? CiscoSigCredentialsFeatureTemplateId { get; set; }

        /// <summary>
        /// Credentials feature template version
        /// </summary>
        [Input("ciscoSigCredentialsFeatureTemplateVersion")]
        public Input<int>? CiscoSigCredentialsFeatureTemplateVersion { get; set; }

        /// <summary>
        /// Only relevant when `umbrella_dns_default` is `false`
        /// </summary>
        [Input("customDnsServerIp")]
        public Input<string>? CustomDnsServerIp { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should DNSCrypt be enabled
        /// </summary>
        [Input("dnscrypt")]
        public Input<bool>? Dnscrypt { get; set; }

        /// <summary>
        /// Local domain bypass list ID
        /// </summary>
        [Input("domainListId")]
        public Input<string>? DomainListId { get; set; }

        /// <summary>
        /// Local domain bypass list version
        /// </summary>
        [Input("domainListVersion")]
        public Input<int>? DomainListVersion { get; set; }

        /// <summary>
        /// Should the local domain bypass list be enabled
        /// </summary>
        [Input("localDomainBypassEnabled")]
        public Input<bool>? LocalDomainBypassEnabled { get; set; }

        /// <summary>
        /// Should use match all VPN
        /// </summary>
        [Input("matchAllVpn")]
        public Input<bool>? MatchAllVpn { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<Inputs.DnsSecurityPolicyDefinitionTargetVpnGetArgs>? _targetVpns;

        /// <summary>
        /// Only relevant when `match_all_vpn` is `false`
        /// </summary>
        public InputList<Inputs.DnsSecurityPolicyDefinitionTargetVpnGetArgs> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<Inputs.DnsSecurityPolicyDefinitionTargetVpnGetArgs>());
            set => _targetVpns = value;
        }

        /// <summary>
        /// Should use umbrella as DNS Server
        /// </summary>
        [Input("umbrellaDnsDefault")]
        public Input<bool>? UmbrellaDnsDefault { get; set; }

        /// <summary>
        /// The version of the object
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public DnsSecurityPolicyDefinitionState()
        {
        }
        public static new DnsSecurityPolicyDefinitionState Empty => new DnsSecurityPolicyDefinitionState();
    }
}
