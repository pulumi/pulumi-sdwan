// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Advanced Malware Protection Policy Definition .
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.AdvancedMalwareProtectionPolicyDefinition("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My description",
    ///         Mode = "security",
    ///         MatchAllVpn = false,
    ///         TargetVpns = new[]
    ///         {
    ///             "1",
    ///         },
    ///         AlertLogLevel = "critical",
    ///         AmpCloudRegion = "apjc",
    ///         AmpCloudRegionEstServer = "apjc",
    ///         FileAnalysis = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition")]
    public partial class AdvancedMalwareProtectionPolicyDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// File reputation alerts Log level - Choices: `critical`, `warning`, `info`
        /// </summary>
        [Output("alertLogLevel")]
        public Output<string?> AlertLogLevel { get; private set; } = null!;

        /// <summary>
        /// AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
        /// </summary>
        [Output("ampCloudRegion")]
        public Output<string?> AmpCloudRegion { get; private set; } = null!;

        /// <summary>
        /// AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
        /// </summary>
        [Output("ampCloudRegionEstServer")]
        public Output<string?> AmpCloudRegionEstServer { get; private set; } = null!;

        /// <summary>
        /// The description of the policy definition
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Should file analysis be enabled
        /// </summary>
        [Output("fileAnalysis")]
        public Output<bool?> FileAnalysis { get; private set; } = null!;

        /// <summary>
        /// File analysis alerts Log level - Choices: `critical`, `warning`, `info`
        /// </summary>
        [Output("fileAnalysisAlertLogLevel")]
        public Output<string?> FileAnalysisAlertLogLevel { get; private set; } = null!;

        /// <summary>
        /// TG Cloud Region - Choices: `nam`, `eu`
        /// </summary>
        [Output("fileAnalysisCloudRegion")]
        public Output<string?> FileAnalysisCloudRegion { get; private set; } = null!;

        /// <summary>
        /// List of file type
        /// </summary>
        [Output("fileAnalysisFileTypes")]
        public Output<ImmutableArray<string>> FileAnalysisFileTypes { get; private set; } = null!;

        /// <summary>
        /// Should match all VPNs
        /// </summary>
        [Output("matchAllVpn")]
        public Output<bool?> MatchAllVpn { get; private set; } = null!;

        /// <summary>
        /// The policy mode - Choices: `security`, `unified` - Default value: `security`
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the policy definition
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of VPN IDs
        /// </summary>
        [Output("targetVpns")]
        public Output<ImmutableArray<string>> TargetVpns { get; private set; } = null!;

        /// <summary>
        /// The version of the object
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a AdvancedMalwareProtectionPolicyDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdvancedMalwareProtectionPolicyDefinition(string name, AdvancedMalwareProtectionPolicyDefinitionArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition", name, args ?? new AdvancedMalwareProtectionPolicyDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdvancedMalwareProtectionPolicyDefinition(string name, Input<string> id, AdvancedMalwareProtectionPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdvancedMalwareProtectionPolicyDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdvancedMalwareProtectionPolicyDefinition Get(string name, Input<string> id, AdvancedMalwareProtectionPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new AdvancedMalwareProtectionPolicyDefinition(name, id, state, options);
        }
    }

    public sealed class AdvancedMalwareProtectionPolicyDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// File reputation alerts Log level - Choices: `critical`, `warning`, `info`
        /// </summary>
        [Input("alertLogLevel")]
        public Input<string>? AlertLogLevel { get; set; }

        /// <summary>
        /// AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
        /// </summary>
        [Input("ampCloudRegion")]
        public Input<string>? AmpCloudRegion { get; set; }

        /// <summary>
        /// AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
        /// </summary>
        [Input("ampCloudRegionEstServer")]
        public Input<string>? AmpCloudRegionEstServer { get; set; }

        /// <summary>
        /// The description of the policy definition
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Should file analysis be enabled
        /// </summary>
        [Input("fileAnalysis")]
        public Input<bool>? FileAnalysis { get; set; }

        /// <summary>
        /// File analysis alerts Log level - Choices: `critical`, `warning`, `info`
        /// </summary>
        [Input("fileAnalysisAlertLogLevel")]
        public Input<string>? FileAnalysisAlertLogLevel { get; set; }

        /// <summary>
        /// TG Cloud Region - Choices: `nam`, `eu`
        /// </summary>
        [Input("fileAnalysisCloudRegion")]
        public Input<string>? FileAnalysisCloudRegion { get; set; }

        [Input("fileAnalysisFileTypes")]
        private InputList<string>? _fileAnalysisFileTypes;

        /// <summary>
        /// List of file type
        /// </summary>
        public InputList<string> FileAnalysisFileTypes
        {
            get => _fileAnalysisFileTypes ?? (_fileAnalysisFileTypes = new InputList<string>());
            set => _fileAnalysisFileTypes = value;
        }

        /// <summary>
        /// Should match all VPNs
        /// </summary>
        [Input("matchAllVpn")]
        public Input<bool>? MatchAllVpn { get; set; }

        /// <summary>
        /// The policy mode - Choices: `security`, `unified` - Default value: `security`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<string>? _targetVpns;

        /// <summary>
        /// List of VPN IDs
        /// </summary>
        public InputList<string> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<string>());
            set => _targetVpns = value;
        }

        public AdvancedMalwareProtectionPolicyDefinitionArgs()
        {
        }
        public static new AdvancedMalwareProtectionPolicyDefinitionArgs Empty => new AdvancedMalwareProtectionPolicyDefinitionArgs();
    }

    public sealed class AdvancedMalwareProtectionPolicyDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// File reputation alerts Log level - Choices: `critical`, `warning`, `info`
        /// </summary>
        [Input("alertLogLevel")]
        public Input<string>? AlertLogLevel { get; set; }

        /// <summary>
        /// AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
        /// </summary>
        [Input("ampCloudRegion")]
        public Input<string>? AmpCloudRegion { get; set; }

        /// <summary>
        /// AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
        /// </summary>
        [Input("ampCloudRegionEstServer")]
        public Input<string>? AmpCloudRegionEstServer { get; set; }

        /// <summary>
        /// The description of the policy definition
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Should file analysis be enabled
        /// </summary>
        [Input("fileAnalysis")]
        public Input<bool>? FileAnalysis { get; set; }

        /// <summary>
        /// File analysis alerts Log level - Choices: `critical`, `warning`, `info`
        /// </summary>
        [Input("fileAnalysisAlertLogLevel")]
        public Input<string>? FileAnalysisAlertLogLevel { get; set; }

        /// <summary>
        /// TG Cloud Region - Choices: `nam`, `eu`
        /// </summary>
        [Input("fileAnalysisCloudRegion")]
        public Input<string>? FileAnalysisCloudRegion { get; set; }

        [Input("fileAnalysisFileTypes")]
        private InputList<string>? _fileAnalysisFileTypes;

        /// <summary>
        /// List of file type
        /// </summary>
        public InputList<string> FileAnalysisFileTypes
        {
            get => _fileAnalysisFileTypes ?? (_fileAnalysisFileTypes = new InputList<string>());
            set => _fileAnalysisFileTypes = value;
        }

        /// <summary>
        /// Should match all VPNs
        /// </summary>
        [Input("matchAllVpn")]
        public Input<bool>? MatchAllVpn { get; set; }

        /// <summary>
        /// The policy mode - Choices: `security`, `unified` - Default value: `security`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<string>? _targetVpns;

        /// <summary>
        /// List of VPN IDs
        /// </summary>
        public InputList<string> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<string>());
            set => _targetVpns = value;
        }

        /// <summary>
        /// The version of the object
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public AdvancedMalwareProtectionPolicyDefinitionState()
        {
        }
        public static new AdvancedMalwareProtectionPolicyDefinitionState Empty => new AdvancedMalwareProtectionPolicyDefinitionState();
    }
}
