// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCedgeAaaFeatureTemplate
    {
        /// <summary>
        /// This data source can read the cEdge AAA feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCedgeAaaFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCedgeAaaFeatureTemplateResult> InvokeAsync(GetCedgeAaaFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCedgeAaaFeatureTemplateResult>("sdwan:index/getCedgeAaaFeatureTemplate:getCedgeAaaFeatureTemplate", args ?? new GetCedgeAaaFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the cEdge AAA feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCedgeAaaFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCedgeAaaFeatureTemplateResult> Invoke(GetCedgeAaaFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCedgeAaaFeatureTemplateResult>("sdwan:index/getCedgeAaaFeatureTemplate:getCedgeAaaFeatureTemplate", args ?? new GetCedgeAaaFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the cEdge AAA feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCedgeAaaFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCedgeAaaFeatureTemplateResult> Invoke(GetCedgeAaaFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCedgeAaaFeatureTemplateResult>("sdwan:index/getCedgeAaaFeatureTemplate:getCedgeAaaFeatureTemplate", args ?? new GetCedgeAaaFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCedgeAaaFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCedgeAaaFeatureTemplateArgs()
        {
        }
        public static new GetCedgeAaaFeatureTemplateArgs Empty => new GetCedgeAaaFeatureTemplateArgs();
    }

    public sealed class GetCedgeAaaFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCedgeAaaFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCedgeAaaFeatureTemplateInvokeArgs Empty => new GetCedgeAaaFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCedgeAaaFeatureTemplateResult
    {
        /// <summary>
        /// Configure the accounting rules
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateAccountingRuleResult> AccountingRules;
        /// <summary>
        /// For configuration mode commands.
        /// </summary>
        public readonly bool AuthorizationConfigCommands;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AuthorizationConfigCommandsVariable;
        /// <summary>
        /// For enabling console authorization
        /// </summary>
        public readonly bool AuthorizationConsole;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AuthorizationConsoleVariable;
        /// <summary>
        /// Configure the Authorization Rules
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateAuthorizationRuleResult> AuthorizationRules;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Accounting configurations parameters
        /// </summary>
        public readonly bool Dot1xAccounting;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Dot1xAccountingVariable;
        /// <summary>
        /// Authentication configurations parameters
        /// </summary>
        public readonly bool Dot1xAuthentication;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Dot1xAuthenticationVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Specify a RADIUS client
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateRadiusClientResult> RadiusClients;
        /// <summary>
        /// Authentication Type
        /// </summary>
        public readonly string RadiusDynamicAuthorAuthenticationType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RadiusDynamicAuthorAuthenticationTypeVariable;
        /// <summary>
        /// Domain Stripping
        /// </summary>
        public readonly string RadiusDynamicAuthorDomainStripping;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RadiusDynamicAuthorDomainStrippingVariable;
        /// <summary>
        /// Specify Radius Dynamic Author Port
        /// </summary>
        public readonly int RadiusDynamicAuthorPort;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RadiusDynamicAuthorPortVariable;
        /// <summary>
        /// Specify a radius dynamic author server-key
        /// </summary>
        public readonly string RadiusDynamicAuthorServerKey;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RadiusDynamicAuthorServerKeyVariable;
        /// <summary>
        /// Configure the Radius serverGroup
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateRadiusServerGroupResult> RadiusServerGroups;
        /// <summary>
        /// CTS Authorization List
        /// </summary>
        public readonly string RadiusTrustsecCtsAuthorizationList;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RadiusTrustsecCtsAuthorizationListVariable;
        /// <summary>
        /// RADIUS trustsec group
        /// </summary>
        public readonly string RadiusTrustsecGroup;
        /// <summary>
        /// ServerGroups priority order
        /// </summary>
        public readonly string ServerGroupsPriorityOrder;
        /// <summary>
        /// Configure the TACACS serverGroup
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateTacacsServerGroupResult> TacacsServerGroups;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Create local login account
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateUserResult> Users;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCedgeAaaFeatureTemplateResult(
            ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateAccountingRuleResult> accountingRules,

            bool authorizationConfigCommands,

            string authorizationConfigCommandsVariable,

            bool authorizationConsole,

            string authorizationConsoleVariable,

            ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateAuthorizationRuleResult> authorizationRules,

            string description,

            ImmutableArray<string> deviceTypes,

            bool dot1xAccounting,

            string dot1xAccountingVariable,

            bool dot1xAuthentication,

            string dot1xAuthenticationVariable,

            string id,

            string name,

            ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateRadiusClientResult> radiusClients,

            string radiusDynamicAuthorAuthenticationType,

            string radiusDynamicAuthorAuthenticationTypeVariable,

            string radiusDynamicAuthorDomainStripping,

            string radiusDynamicAuthorDomainStrippingVariable,

            int radiusDynamicAuthorPort,

            string radiusDynamicAuthorPortVariable,

            string radiusDynamicAuthorServerKey,

            string radiusDynamicAuthorServerKeyVariable,

            ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateRadiusServerGroupResult> radiusServerGroups,

            string radiusTrustsecCtsAuthorizationList,

            string radiusTrustsecCtsAuthorizationListVariable,

            string radiusTrustsecGroup,

            string serverGroupsPriorityOrder,

            ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateTacacsServerGroupResult> tacacsServerGroups,

            string templateType,

            ImmutableArray<Outputs.GetCedgeAaaFeatureTemplateUserResult> users,

            int version)
        {
            AccountingRules = accountingRules;
            AuthorizationConfigCommands = authorizationConfigCommands;
            AuthorizationConfigCommandsVariable = authorizationConfigCommandsVariable;
            AuthorizationConsole = authorizationConsole;
            AuthorizationConsoleVariable = authorizationConsoleVariable;
            AuthorizationRules = authorizationRules;
            Description = description;
            DeviceTypes = deviceTypes;
            Dot1xAccounting = dot1xAccounting;
            Dot1xAccountingVariable = dot1xAccountingVariable;
            Dot1xAuthentication = dot1xAuthentication;
            Dot1xAuthenticationVariable = dot1xAuthenticationVariable;
            Id = id;
            Name = name;
            RadiusClients = radiusClients;
            RadiusDynamicAuthorAuthenticationType = radiusDynamicAuthorAuthenticationType;
            RadiusDynamicAuthorAuthenticationTypeVariable = radiusDynamicAuthorAuthenticationTypeVariable;
            RadiusDynamicAuthorDomainStripping = radiusDynamicAuthorDomainStripping;
            RadiusDynamicAuthorDomainStrippingVariable = radiusDynamicAuthorDomainStrippingVariable;
            RadiusDynamicAuthorPort = radiusDynamicAuthorPort;
            RadiusDynamicAuthorPortVariable = radiusDynamicAuthorPortVariable;
            RadiusDynamicAuthorServerKey = radiusDynamicAuthorServerKey;
            RadiusDynamicAuthorServerKeyVariable = radiusDynamicAuthorServerKeyVariable;
            RadiusServerGroups = radiusServerGroups;
            RadiusTrustsecCtsAuthorizationList = radiusTrustsecCtsAuthorizationList;
            RadiusTrustsecCtsAuthorizationListVariable = radiusTrustsecCtsAuthorizationListVariable;
            RadiusTrustsecGroup = radiusTrustsecGroup;
            ServerGroupsPriorityOrder = serverGroupsPriorityOrder;
            TacacsServerGroups = tacacsServerGroups;
            TemplateType = templateType;
            Users = users;
            Version = version;
        }
    }
}
