// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoDhcpServerFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco DHCP Server feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoDhcpServerFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoDhcpServerFeatureTemplateResult> InvokeAsync(GetCiscoDhcpServerFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoDhcpServerFeatureTemplateResult>("sdwan:index/getCiscoDhcpServerFeatureTemplate:getCiscoDhcpServerFeatureTemplate", args ?? new GetCiscoDhcpServerFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco DHCP Server feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoDhcpServerFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoDhcpServerFeatureTemplateResult> Invoke(GetCiscoDhcpServerFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoDhcpServerFeatureTemplateResult>("sdwan:index/getCiscoDhcpServerFeatureTemplate:getCiscoDhcpServerFeatureTemplate", args ?? new GetCiscoDhcpServerFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoDhcpServerFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoDhcpServerFeatureTemplateArgs()
        {
        }
        public static new GetCiscoDhcpServerFeatureTemplateArgs Empty => new GetCiscoDhcpServerFeatureTemplateArgs();
    }

    public sealed class GetCiscoDhcpServerFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoDhcpServerFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoDhcpServerFeatureTemplateInvokeArgs Empty => new GetCiscoDhcpServerFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoDhcpServerFeatureTemplateResult
    {
        /// <summary>
        /// Configure IPv4 prefix range of the DHCP address pool
        /// </summary>
        public readonly string AddressPool;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AddressPoolVariable;
        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        public readonly string DefaultGateway;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DefaultGatewayVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DnsServersVariable;
        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DomainNameVariable;
        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        public readonly ImmutableArray<string> ExcludeAddresses;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ExcludeAddressesVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set MTU on interface to DHCP client
        /// </summary>
        public readonly int InterfaceMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceMtuVariable;
        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid
        /// </summary>
        public readonly int LeaseTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LeaseTimeVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Configure Options Code
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoDhcpServerFeatureTemplateOptionResult> Options;
        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoDhcpServerFeatureTemplateStaticLeaseResult> StaticLeases;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        public readonly ImmutableArray<string> TftpServers;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TftpServersVariable;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCiscoDhcpServerFeatureTemplateResult(
            string addressPool,

            string addressPoolVariable,

            string defaultGateway,

            string defaultGatewayVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            ImmutableArray<string> dnsServers,

            string dnsServersVariable,

            string domainName,

            string domainNameVariable,

            ImmutableArray<string> excludeAddresses,

            string excludeAddressesVariable,

            string id,

            int interfaceMtu,

            string interfaceMtuVariable,

            int leaseTime,

            string leaseTimeVariable,

            string name,

            ImmutableArray<Outputs.GetCiscoDhcpServerFeatureTemplateOptionResult> options,

            ImmutableArray<Outputs.GetCiscoDhcpServerFeatureTemplateStaticLeaseResult> staticLeases,

            string templateType,

            ImmutableArray<string> tftpServers,

            string tftpServersVariable,

            int version)
        {
            AddressPool = addressPool;
            AddressPoolVariable = addressPoolVariable;
            DefaultGateway = defaultGateway;
            DefaultGatewayVariable = defaultGatewayVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            DnsServers = dnsServers;
            DnsServersVariable = dnsServersVariable;
            DomainName = domainName;
            DomainNameVariable = domainNameVariable;
            ExcludeAddresses = excludeAddresses;
            ExcludeAddressesVariable = excludeAddressesVariable;
            Id = id;
            InterfaceMtu = interfaceMtu;
            InterfaceMtuVariable = interfaceMtuVariable;
            LeaseTime = leaseTime;
            LeaseTimeVariable = leaseTimeVariable;
            Name = name;
            Options = options;
            StaticLeases = staticLeases;
            TemplateType = templateType;
            TftpServers = tftpServers;
            TftpServersVariable = tftpServersVariable;
            Version = version;
        }
    }
}
