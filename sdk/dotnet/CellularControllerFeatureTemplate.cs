// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cellular Controller feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate")]
    public partial class CellularControllerFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cellular interface name
        /// </summary>
        [Output("cellularInterfaceId")]
        public Output<string?> CellularInterfaceId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("cellularInterfaceIdVariable")]
        public Output<string?> CellularInterfaceIdVariable { get; private set; } = null!;

        /// <summary>
        /// Data Profile List
        /// </summary>
        [Output("dataProfiles")]
        public Output<ImmutableArray<Outputs.CellularControllerFeatureTemplateDataProfile>> DataProfiles { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Enable/Disable Firmware Auto Sim - Default value: `true`
        /// </summary>
        [Output("firmwareAutoSim")]
        public Output<bool?> FirmwareAutoSim { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("firmwareAutoSimVariable")]
        public Output<string?> FirmwareAutoSimVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set primary SIM slot - Range: `0`-`255`
        /// </summary>
        [Output("primarySimSlot")]
        public Output<int?> PrimarySimSlot { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primarySimSlotVariable")]
        public Output<string?> PrimarySimSlotVariable { get; private set; } = null!;

        /// <summary>
        /// Set SIM failover retries - Range: `0`-`65535`
        /// </summary>
        [Output("simFailoverRetries")]
        public Output<int?> SimFailoverRetries { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("simFailoverRetriesVariable")]
        public Output<string?> SimFailoverRetriesVariable { get; private set; } = null!;

        /// <summary>
        /// Set SIM failover timeout in minutes - Range: `3`-`7`
        /// </summary>
        [Output("simFailoverTimeout")]
        public Output<int?> SimFailoverTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("simFailoverTimeoutVariable")]
        public Output<string?> SimFailoverTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CellularControllerFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CellularControllerFeatureTemplate(string name, CellularControllerFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate", name, args ?? new CellularControllerFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CellularControllerFeatureTemplate(string name, Input<string> id, CellularControllerFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CellularControllerFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CellularControllerFeatureTemplate Get(string name, Input<string> id, CellularControllerFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CellularControllerFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CellularControllerFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cellular interface name
        /// </summary>
        [Input("cellularInterfaceId")]
        public Input<string>? CellularInterfaceId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("cellularInterfaceIdVariable")]
        public Input<string>? CellularInterfaceIdVariable { get; set; }

        [Input("dataProfiles")]
        private InputList<Inputs.CellularControllerFeatureTemplateDataProfileArgs>? _dataProfiles;

        /// <summary>
        /// Data Profile List
        /// </summary>
        public InputList<Inputs.CellularControllerFeatureTemplateDataProfileArgs> DataProfiles
        {
            get => _dataProfiles ?? (_dataProfiles = new InputList<Inputs.CellularControllerFeatureTemplateDataProfileArgs>());
            set => _dataProfiles = value;
        }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable/Disable Firmware Auto Sim - Default value: `true`
        /// </summary>
        [Input("firmwareAutoSim")]
        public Input<bool>? FirmwareAutoSim { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("firmwareAutoSimVariable")]
        public Input<string>? FirmwareAutoSimVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set primary SIM slot - Range: `0`-`255`
        /// </summary>
        [Input("primarySimSlot")]
        public Input<int>? PrimarySimSlot { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primarySimSlotVariable")]
        public Input<string>? PrimarySimSlotVariable { get; set; }

        /// <summary>
        /// Set SIM failover retries - Range: `0`-`65535`
        /// </summary>
        [Input("simFailoverRetries")]
        public Input<int>? SimFailoverRetries { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("simFailoverRetriesVariable")]
        public Input<string>? SimFailoverRetriesVariable { get; set; }

        /// <summary>
        /// Set SIM failover timeout in minutes - Range: `3`-`7`
        /// </summary>
        [Input("simFailoverTimeout")]
        public Input<int>? SimFailoverTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("simFailoverTimeoutVariable")]
        public Input<string>? SimFailoverTimeoutVariable { get; set; }

        public CellularControllerFeatureTemplateArgs()
        {
        }
        public static new CellularControllerFeatureTemplateArgs Empty => new CellularControllerFeatureTemplateArgs();
    }

    public sealed class CellularControllerFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cellular interface name
        /// </summary>
        [Input("cellularInterfaceId")]
        public Input<string>? CellularInterfaceId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("cellularInterfaceIdVariable")]
        public Input<string>? CellularInterfaceIdVariable { get; set; }

        [Input("dataProfiles")]
        private InputList<Inputs.CellularControllerFeatureTemplateDataProfileGetArgs>? _dataProfiles;

        /// <summary>
        /// Data Profile List
        /// </summary>
        public InputList<Inputs.CellularControllerFeatureTemplateDataProfileGetArgs> DataProfiles
        {
            get => _dataProfiles ?? (_dataProfiles = new InputList<Inputs.CellularControllerFeatureTemplateDataProfileGetArgs>());
            set => _dataProfiles = value;
        }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable/Disable Firmware Auto Sim - Default value: `true`
        /// </summary>
        [Input("firmwareAutoSim")]
        public Input<bool>? FirmwareAutoSim { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("firmwareAutoSimVariable")]
        public Input<string>? FirmwareAutoSimVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set primary SIM slot - Range: `0`-`255`
        /// </summary>
        [Input("primarySimSlot")]
        public Input<int>? PrimarySimSlot { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primarySimSlotVariable")]
        public Input<string>? PrimarySimSlotVariable { get; set; }

        /// <summary>
        /// Set SIM failover retries - Range: `0`-`65535`
        /// </summary>
        [Input("simFailoverRetries")]
        public Input<int>? SimFailoverRetries { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("simFailoverRetriesVariable")]
        public Input<string>? SimFailoverRetriesVariable { get; set; }

        /// <summary>
        /// Set SIM failover timeout in minutes - Range: `3`-`7`
        /// </summary>
        [Input("simFailoverTimeout")]
        public Input<int>? SimFailoverTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("simFailoverTimeoutVariable")]
        public Input<string>? SimFailoverTimeoutVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CellularControllerFeatureTemplateState()
        {
        }
        public static new CellularControllerFeatureTemplateState Empty => new CellularControllerFeatureTemplateState();
    }
}
