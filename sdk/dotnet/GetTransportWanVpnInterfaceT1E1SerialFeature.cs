// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportWanVpnInterfaceT1E1SerialFeature
    {
        /// <summary>
        /// This data source can read the Transport WAN VPN Interface T1 E1 Serial Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnInterfaceT1E1SerialFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportWanVpnInterfaceT1E1SerialFeatureResult> InvokeAsync(GetTransportWanVpnInterfaceT1E1SerialFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportWanVpnInterfaceT1E1SerialFeatureResult>("sdwan:index/getTransportWanVpnInterfaceT1E1SerialFeature:getTransportWanVpnInterfaceT1E1SerialFeature", args ?? new GetTransportWanVpnInterfaceT1E1SerialFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport WAN VPN Interface T1 E1 Serial Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnInterfaceT1E1SerialFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportWanVpnInterfaceT1E1SerialFeatureResult> Invoke(GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportWanVpnInterfaceT1E1SerialFeatureResult>("sdwan:index/getTransportWanVpnInterfaceT1E1SerialFeature:getTransportWanVpnInterfaceT1E1SerialFeature", args ?? new GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport WAN VPN Interface T1 E1 Serial Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnInterfaceT1E1SerialFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///         TransportWanVpnFeatureId = "140331f6-5418-4755-a059-13c77eb96037",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportWanVpnInterfaceT1E1SerialFeatureResult> Invoke(GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportWanVpnInterfaceT1E1SerialFeatureResult>("sdwan:index/getTransportWanVpnInterfaceT1E1SerialFeature:getTransportWanVpnInterfaceT1E1SerialFeature", args ?? new GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportWanVpnInterfaceT1E1SerialFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId", required: true)]
        public string TransportWanVpnFeatureId { get; set; } = null!;

        public GetTransportWanVpnInterfaceT1E1SerialFeatureArgs()
        {
        }
        public static new GetTransportWanVpnInterfaceT1E1SerialFeatureArgs Empty => new GetTransportWanVpnInterfaceT1E1SerialFeatureArgs();
    }

    public sealed class GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        [Input("transportWanVpnFeatureId", required: true)]
        public Input<string> TransportWanVpnFeatureId { get; set; } = null!;

        public GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs()
        {
        }
        public static new GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs Empty => new GetTransportWanVpnInterfaceT1E1SerialFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportWanVpnInterfaceT1E1SerialFeatureResult
    {
        public readonly string AclIpv4EgressFeatureId;
        public readonly string AclIpv4IngressFeatureId;
        public readonly string AclIpv6EgressFeatureId;
        public readonly string AclIpv6IngressFeatureId;
        /// <summary>
        /// Interface bandwidth capacity, in kbps
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthDownstreamVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthVariable;
        /// <summary>
        /// Set preference for interface Clock speed
        /// </summary>
        public readonly string ClockRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ClockRateVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Configure Encapsulation for interface
        /// </summary>
        public readonly string Encapsulation;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EncapsulationVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
        /// </summary>
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// Set ip mtu
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        public readonly string Ipv4SubnetMask;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4SubnetMaskVariable;
        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// Interface MTU \n\n, in bytes
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MtuVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Per-tunnel Qos
        /// </summary>
        public readonly bool PerTunnelQos;
        /// <summary>
        /// Per-tunnel QoS Aggregator
        /// </summary>
        public readonly bool PerTunnelQosAggregator;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosAggregatorVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosVariable;
        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        /// </summary>
        public readonly int QosShapingRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosShapingRateVariable;
        /// <summary>
        /// Administrative state
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        public readonly string TlocExtension;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TlocExtensionVariable;
        /// <summary>
        /// Transport WAN VPN Feature ID
        /// </summary>
        public readonly string TransportWanVpnFeatureId;
        /// <summary>
        /// Tunnel Interface
        /// </summary>
        public readonly bool TunnelInterface;
        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        /// </summary>
        public readonly bool TunnelInterfaceAllowAll;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowAllVariable;
        /// <summary>
        /// Allow/Deny BFD
        /// </summary>
        public readonly bool TunnelInterfaceAllowBfd;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBfdVariable;
        /// <summary>
        /// Allow/deny BGP
        /// </summary>
        public readonly bool TunnelInterfaceAllowBgp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBgpVariable;
        /// <summary>
        /// Allow/Deny DHCP
        /// </summary>
        public readonly bool TunnelInterfaceAllowDhcp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDhcpVariable;
        /// <summary>
        /// Allow/Deny DNS
        /// </summary>
        public readonly bool TunnelInterfaceAllowDns;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDnsVariable;
        /// <summary>
        /// Allow/Deny Https
        /// </summary>
        public readonly bool TunnelInterfaceAllowHttps;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowHttpsVariable;
        /// <summary>
        /// Allow/Deny ICMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowIcmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowIcmpVariable;
        /// <summary>
        /// Allow/Deny NETCONF
        /// </summary>
        public readonly bool TunnelInterfaceAllowNetconf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNetconfVariable;
        /// <summary>
        /// Allow/Deny NTP
        /// </summary>
        public readonly bool TunnelInterfaceAllowNtp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNtpVariable;
        /// <summary>
        /// Allow/Deny OSPF
        /// </summary>
        public readonly bool TunnelInterfaceAllowOspf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowOspfVariable;
        /// <summary>
        /// Allow/Deny SNMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowSnmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSnmpVariable;
        /// <summary>
        /// Allow/Deny SSH
        /// </summary>
        public readonly bool TunnelInterfaceAllowSsh;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSshVariable;
        /// <summary>
        /// Allow/Deny STUN
        /// </summary>
        public readonly bool TunnelInterfaceAllowStun;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowStunVariable;
        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnel;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnelVariable;
        /// <summary>
        /// Set TLOC as border TLOC
        /// </summary>
        public readonly bool TunnelInterfaceBorder;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBorderVariable;
        /// <summary>
        /// Set carrier for TLOC
        /// </summary>
        public readonly string TunnelInterfaceCarrier;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceCarrierVariable;
        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        /// </summary>
        public readonly bool TunnelInterfaceClearDontFragment;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceClearDontFragmentVariable;
        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        /// </summary>
        public readonly bool TunnelInterfaceClearNetworkBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceClearNetworkBroadcastVariable;
        /// <summary>
        /// Set color for TLOC
        /// </summary>
        public readonly string TunnelInterfaceColor;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorVariable;
        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationResult> TunnelInterfaceEncapsulations;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceExcludeControllerGroupListVariable;
        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceExcludeControllerGroupLists;
        /// <summary>
        /// List of groups
        /// </summary>
        public readonly int TunnelInterfaceGroups;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGroupsVariable;
        /// <summary>
        /// Set time period of control hello packets \n\n milli seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloIntervalVariable;
        /// <summary>
        /// Set tolerance of control hello packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloTolerance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloToleranceVariable;
        /// <summary>
        /// Set TLOC as last resort
        /// </summary>
        public readonly bool TunnelInterfaceLastResortCircuit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLastResortCircuitVariable;
        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        /// </summary>
        public readonly bool TunnelInterfaceLowBandwidthLink;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLowBandwidthLinkVariable;
        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        /// </summary>
        public readonly int TunnelInterfaceMaxControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceMaxControlConnectionsVariable;
        /// <summary>
        /// Set time period of nat refresh packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceNatRefreshInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNatRefreshIntervalVariable;
        /// <summary>
        /// Disallow port hopping on the tunnel interface
        /// </summary>
        public readonly bool TunnelInterfacePortHop;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfacePortHopVariable;
        /// <summary>
        /// Restrict this TLOC behavior
        /// </summary>
        public readonly bool TunnelInterfaceRestrict;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceRestrictVariable;
        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TunnelInterfaceTunnelTcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceTunnelTcpMssVariable;
        /// <summary>
        /// Put this wan interface in STUN mode only
        /// </summary>
        public readonly bool TunnelInterfaceVbondAsStunServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVbondAsStunServerVariable;
        /// <summary>
        /// Set interface preference for control connection to vManage \n\n
        /// </summary>
        public readonly int TunnelInterfaceVmanageConnectionPreference;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVmanageConnectionPreferenceVariable;
        /// <summary>
        /// Set tunnel QoS mode
        /// </summary>
        public readonly string TunnelQosMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelQosModeVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetTransportWanVpnInterfaceT1E1SerialFeatureResult(
            string aclIpv4EgressFeatureId,

            string aclIpv4IngressFeatureId,

            string aclIpv6EgressFeatureId,

            string aclIpv6IngressFeatureId,

            int bandwidth,

            int bandwidthDownstream,

            string bandwidthDownstreamVariable,

            string bandwidthVariable,

            string clockRate,

            string clockRateVariable,

            string description,

            string encapsulation,

            string encapsulationVariable,

            string featureProfileId,

            string id,

            string interfaceName,

            string interfaceNameVariable,

            int ipMtu,

            string ipMtuVariable,

            string ipv4Address,

            string ipv4AddressVariable,

            string ipv4SubnetMask,

            string ipv4SubnetMaskVariable,

            string ipv6Address,

            string ipv6AddressVariable,

            int mtu,

            string mtuVariable,

            string name,

            bool perTunnelQos,

            bool perTunnelQosAggregator,

            string perTunnelQosAggregatorVariable,

            string perTunnelQosVariable,

            int qosShapingRate,

            string qosShapingRateVariable,

            bool shutdown,

            string shutdownVariable,

            int tcpMss,

            string tcpMssVariable,

            string tlocExtension,

            string tlocExtensionVariable,

            string transportWanVpnFeatureId,

            bool tunnelInterface,

            bool tunnelInterfaceAllowAll,

            string tunnelInterfaceAllowAllVariable,

            bool tunnelInterfaceAllowBfd,

            string tunnelInterfaceAllowBfdVariable,

            bool tunnelInterfaceAllowBgp,

            string tunnelInterfaceAllowBgpVariable,

            bool tunnelInterfaceAllowDhcp,

            string tunnelInterfaceAllowDhcpVariable,

            bool tunnelInterfaceAllowDns,

            string tunnelInterfaceAllowDnsVariable,

            bool tunnelInterfaceAllowHttps,

            string tunnelInterfaceAllowHttpsVariable,

            bool tunnelInterfaceAllowIcmp,

            string tunnelInterfaceAllowIcmpVariable,

            bool tunnelInterfaceAllowNetconf,

            string tunnelInterfaceAllowNetconfVariable,

            bool tunnelInterfaceAllowNtp,

            string tunnelInterfaceAllowNtpVariable,

            bool tunnelInterfaceAllowOspf,

            string tunnelInterfaceAllowOspfVariable,

            bool tunnelInterfaceAllowSnmp,

            string tunnelInterfaceAllowSnmpVariable,

            bool tunnelInterfaceAllowSsh,

            string tunnelInterfaceAllowSshVariable,

            bool tunnelInterfaceAllowStun,

            string tunnelInterfaceAllowStunVariable,

            string tunnelInterfaceBindLoopbackTunnel,

            string tunnelInterfaceBindLoopbackTunnelVariable,

            bool tunnelInterfaceBorder,

            string tunnelInterfaceBorderVariable,

            string tunnelInterfaceCarrier,

            string tunnelInterfaceCarrierVariable,

            bool tunnelInterfaceClearDontFragment,

            string tunnelInterfaceClearDontFragmentVariable,

            bool tunnelInterfaceClearNetworkBroadcast,

            string tunnelInterfaceClearNetworkBroadcastVariable,

            string tunnelInterfaceColor,

            string tunnelInterfaceColorVariable,

            ImmutableArray<Outputs.GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationResult> tunnelInterfaceEncapsulations,

            string tunnelInterfaceExcludeControllerGroupListVariable,

            ImmutableArray<int> tunnelInterfaceExcludeControllerGroupLists,

            int tunnelInterfaceGroups,

            string tunnelInterfaceGroupsVariable,

            int tunnelInterfaceHelloInterval,

            string tunnelInterfaceHelloIntervalVariable,

            int tunnelInterfaceHelloTolerance,

            string tunnelInterfaceHelloToleranceVariable,

            bool tunnelInterfaceLastResortCircuit,

            string tunnelInterfaceLastResortCircuitVariable,

            bool tunnelInterfaceLowBandwidthLink,

            string tunnelInterfaceLowBandwidthLinkVariable,

            int tunnelInterfaceMaxControlConnections,

            string tunnelInterfaceMaxControlConnectionsVariable,

            int tunnelInterfaceNatRefreshInterval,

            string tunnelInterfaceNatRefreshIntervalVariable,

            bool tunnelInterfacePortHop,

            string tunnelInterfacePortHopVariable,

            bool tunnelInterfaceRestrict,

            string tunnelInterfaceRestrictVariable,

            int tunnelInterfaceTunnelTcpMss,

            string tunnelInterfaceTunnelTcpMssVariable,

            bool tunnelInterfaceVbondAsStunServer,

            string tunnelInterfaceVbondAsStunServerVariable,

            int tunnelInterfaceVmanageConnectionPreference,

            string tunnelInterfaceVmanageConnectionPreferenceVariable,

            string tunnelQosMode,

            string tunnelQosModeVariable,

            int version)
        {
            AclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            AclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            AclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            AclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            Bandwidth = bandwidth;
            BandwidthDownstream = bandwidthDownstream;
            BandwidthDownstreamVariable = bandwidthDownstreamVariable;
            BandwidthVariable = bandwidthVariable;
            ClockRate = clockRate;
            ClockRateVariable = clockRateVariable;
            Description = description;
            Encapsulation = encapsulation;
            EncapsulationVariable = encapsulationVariable;
            FeatureProfileId = featureProfileId;
            Id = id;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv4SubnetMask = ipv4SubnetMask;
            Ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Mtu = mtu;
            MtuVariable = mtuVariable;
            Name = name;
            PerTunnelQos = perTunnelQos;
            PerTunnelQosAggregator = perTunnelQosAggregator;
            PerTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            PerTunnelQosVariable = perTunnelQosVariable;
            QosShapingRate = qosShapingRate;
            QosShapingRateVariable = qosShapingRateVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            TlocExtension = tlocExtension;
            TlocExtensionVariable = tlocExtensionVariable;
            TransportWanVpnFeatureId = transportWanVpnFeatureId;
            TunnelInterface = tunnelInterface;
            TunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            TunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            TunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            TunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            TunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            TunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            TunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            TunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            TunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            TunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            TunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            TunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            TunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            TunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            TunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            TunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            TunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            TunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            TunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            TunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            TunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            TunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            TunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            TunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            TunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            TunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            TunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            TunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            TunnelInterfaceBorder = tunnelInterfaceBorder;
            TunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            TunnelInterfaceCarrier = tunnelInterfaceCarrier;
            TunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            TunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            TunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            TunnelInterfaceClearNetworkBroadcast = tunnelInterfaceClearNetworkBroadcast;
            TunnelInterfaceClearNetworkBroadcastVariable = tunnelInterfaceClearNetworkBroadcastVariable;
            TunnelInterfaceColor = tunnelInterfaceColor;
            TunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            TunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            TunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            TunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            TunnelInterfaceGroups = tunnelInterfaceGroups;
            TunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            TunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            TunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            TunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            TunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            TunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            TunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            TunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            TunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            TunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            TunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            TunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            TunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            TunnelInterfacePortHop = tunnelInterfacePortHop;
            TunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            TunnelInterfaceRestrict = tunnelInterfaceRestrict;
            TunnelInterfaceRestrictVariable = tunnelInterfaceRestrictVariable;
            TunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            TunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            TunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            TunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            TunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            TunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            TunnelQosMode = tunnelQosMode;
            TunnelQosModeVariable = tunnelQosModeVariable;
            Version = version;
        }
    }
}
