// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a TLS SSL Decryption Policy Definition .
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition")]
    public partial class TlsSslDecryptionPolicyDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Certificate Lifetime(in Days)
        /// </summary>
        [Output("certificateLifetimeInDays")]
        public Output<int?> CertificateLifetimeInDays { get; private set; } = null!;

        /// <summary>
        /// Certificate revocation status - Choices: `ocsp`, `none`
        /// </summary>
        [Output("certificateRevocationStatus")]
        public Output<string?> CertificateRevocationStatus { get; private set; } = null!;

        /// <summary>
        /// Default action (applies when `mode` set to `security`) - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        /// </summary>
        [Output("defaultAction")]
        public Output<string?> DefaultAction { get; private set; } = null!;

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// EC Key Type - Choices: `P256`, `P384`, `P521`
        /// </summary>
        [Output("ecKeyType")]
        public Output<string?> EcKeyType { get; private set; } = null!;

        /// <summary>
        /// Expired certificate action - Choices: `drop`, `decrypt`
        /// </summary>
        [Output("expiredCertificate")]
        public Output<string?> ExpiredCertificate { get; private set; } = null!;

        /// <summary>
        /// Failure mode - Choices: `open`, `close`
        /// </summary>
        [Output("failureMode")]
        public Output<string?> FailureMode { get; private set; } = null!;

        /// <summary>
        /// Minimal TLS Version - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
        /// </summary>
        [Output("minimalTlsVersion")]
        public Output<string?> MinimalTlsVersion { get; private set; } = null!;

        /// <summary>
        /// The policy mode - Choices: `security`, `unified`
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of network rules (applies when `mode` set to `security`)
        /// </summary>
        [Output("networkRules")]
        public Output<ImmutableArray<Outputs.TlsSslDecryptionPolicyDefinitionNetworkRule>> NetworkRules { get; private set; } = null!;

        /// <summary>
        /// RSA key pair modules - Choices: `1024`, `2048`, `4096`
        /// </summary>
        [Output("rsaKeyPairModulus")]
        public Output<string?> RsaKeyPairModulus { get; private set; } = null!;

        /// <summary>
        /// SSL decryption enabled
        /// </summary>
        [Output("sslDecryptionEnabled")]
        public Output<string?> SslDecryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// Unknown revocation status action - Choices: `drop`, `decrypt`
        /// </summary>
        [Output("unknownRevocationStatus")]
        public Output<string?> UnknownRevocationStatus { get; private set; } = null!;

        /// <summary>
        /// Unsupported cipher suites action - Choices: `drop`, `no-decrypt`
        /// </summary>
        [Output("unsupportedCipherSuites")]
        public Output<string?> UnsupportedCipherSuites { get; private set; } = null!;

        /// <summary>
        /// Unsupported protocol versions action - Choices: `drop`, `no-decrypt`
        /// </summary>
        [Output("unsupportedProtocolVersions")]
        public Output<string?> UnsupportedProtocolVersions { get; private set; } = null!;

        /// <summary>
        /// Untrusted certificate action - Choices: `drop`, `decrypt`
        /// </summary>
        [Output("untrustedCertificate")]
        public Output<string?> UntrustedCertificate { get; private set; } = null!;

        /// <summary>
        /// List of url rules (applies when `mode` set to `security`)
        /// </summary>
        [Output("urlRules")]
        public Output<ImmutableArray<Outputs.TlsSslDecryptionPolicyDefinitionUrlRule>> UrlRules { get; private set; } = null!;

        /// <summary>
        /// Use default CA certificate bundle
        /// </summary>
        [Output("useDefaultCaCertBundle")]
        public Output<bool?> UseDefaultCaCertBundle { get; private set; } = null!;

        /// <summary>
        /// The version of the object
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TlsSslDecryptionPolicyDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsSslDecryptionPolicyDefinition(string name, TlsSslDecryptionPolicyDefinitionArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition", name, args ?? new TlsSslDecryptionPolicyDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsSslDecryptionPolicyDefinition(string name, Input<string> id, TlsSslDecryptionPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsSslDecryptionPolicyDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsSslDecryptionPolicyDefinition Get(string name, Input<string> id, TlsSslDecryptionPolicyDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsSslDecryptionPolicyDefinition(name, id, state, options);
        }
    }

    public sealed class TlsSslDecryptionPolicyDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate Lifetime(in Days)
        /// </summary>
        [Input("certificateLifetimeInDays")]
        public Input<int>? CertificateLifetimeInDays { get; set; }

        /// <summary>
        /// Certificate revocation status - Choices: `ocsp`, `none`
        /// </summary>
        [Input("certificateRevocationStatus")]
        public Input<string>? CertificateRevocationStatus { get; set; }

        /// <summary>
        /// Default action (applies when `mode` set to `security`) - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        /// </summary>
        [Input("defaultAction")]
        public Input<string>? DefaultAction { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// EC Key Type - Choices: `P256`, `P384`, `P521`
        /// </summary>
        [Input("ecKeyType")]
        public Input<string>? EcKeyType { get; set; }

        /// <summary>
        /// Expired certificate action - Choices: `drop`, `decrypt`
        /// </summary>
        [Input("expiredCertificate")]
        public Input<string>? ExpiredCertificate { get; set; }

        /// <summary>
        /// Failure mode - Choices: `open`, `close`
        /// </summary>
        [Input("failureMode")]
        public Input<string>? FailureMode { get; set; }

        /// <summary>
        /// Minimal TLS Version - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
        /// </summary>
        [Input("minimalTlsVersion")]
        public Input<string>? MinimalTlsVersion { get; set; }

        /// <summary>
        /// The policy mode - Choices: `security`, `unified`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkRules")]
        private InputList<Inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleArgs>? _networkRules;

        /// <summary>
        /// List of network rules (applies when `mode` set to `security`)
        /// </summary>
        public InputList<Inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleArgs> NetworkRules
        {
            get => _networkRules ?? (_networkRules = new InputList<Inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleArgs>());
            set => _networkRules = value;
        }

        /// <summary>
        /// RSA key pair modules - Choices: `1024`, `2048`, `4096`
        /// </summary>
        [Input("rsaKeyPairModulus")]
        public Input<string>? RsaKeyPairModulus { get; set; }

        /// <summary>
        /// SSL decryption enabled
        /// </summary>
        [Input("sslDecryptionEnabled")]
        public Input<string>? SslDecryptionEnabled { get; set; }

        /// <summary>
        /// Unknown revocation status action - Choices: `drop`, `decrypt`
        /// </summary>
        [Input("unknownRevocationStatus")]
        public Input<string>? UnknownRevocationStatus { get; set; }

        /// <summary>
        /// Unsupported cipher suites action - Choices: `drop`, `no-decrypt`
        /// </summary>
        [Input("unsupportedCipherSuites")]
        public Input<string>? UnsupportedCipherSuites { get; set; }

        /// <summary>
        /// Unsupported protocol versions action - Choices: `drop`, `no-decrypt`
        /// </summary>
        [Input("unsupportedProtocolVersions")]
        public Input<string>? UnsupportedProtocolVersions { get; set; }

        /// <summary>
        /// Untrusted certificate action - Choices: `drop`, `decrypt`
        /// </summary>
        [Input("untrustedCertificate")]
        public Input<string>? UntrustedCertificate { get; set; }

        [Input("urlRules")]
        private InputList<Inputs.TlsSslDecryptionPolicyDefinitionUrlRuleArgs>? _urlRules;

        /// <summary>
        /// List of url rules (applies when `mode` set to `security`)
        /// </summary>
        public InputList<Inputs.TlsSslDecryptionPolicyDefinitionUrlRuleArgs> UrlRules
        {
            get => _urlRules ?? (_urlRules = new InputList<Inputs.TlsSslDecryptionPolicyDefinitionUrlRuleArgs>());
            set => _urlRules = value;
        }

        /// <summary>
        /// Use default CA certificate bundle
        /// </summary>
        [Input("useDefaultCaCertBundle")]
        public Input<bool>? UseDefaultCaCertBundle { get; set; }

        public TlsSslDecryptionPolicyDefinitionArgs()
        {
        }
        public static new TlsSslDecryptionPolicyDefinitionArgs Empty => new TlsSslDecryptionPolicyDefinitionArgs();
    }

    public sealed class TlsSslDecryptionPolicyDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Certificate Lifetime(in Days)
        /// </summary>
        [Input("certificateLifetimeInDays")]
        public Input<int>? CertificateLifetimeInDays { get; set; }

        /// <summary>
        /// Certificate revocation status - Choices: `ocsp`, `none`
        /// </summary>
        [Input("certificateRevocationStatus")]
        public Input<string>? CertificateRevocationStatus { get; set; }

        /// <summary>
        /// Default action (applies when `mode` set to `security`) - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
        /// </summary>
        [Input("defaultAction")]
        public Input<string>? DefaultAction { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// EC Key Type - Choices: `P256`, `P384`, `P521`
        /// </summary>
        [Input("ecKeyType")]
        public Input<string>? EcKeyType { get; set; }

        /// <summary>
        /// Expired certificate action - Choices: `drop`, `decrypt`
        /// </summary>
        [Input("expiredCertificate")]
        public Input<string>? ExpiredCertificate { get; set; }

        /// <summary>
        /// Failure mode - Choices: `open`, `close`
        /// </summary>
        [Input("failureMode")]
        public Input<string>? FailureMode { get; set; }

        /// <summary>
        /// Minimal TLS Version - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
        /// </summary>
        [Input("minimalTlsVersion")]
        public Input<string>? MinimalTlsVersion { get; set; }

        /// <summary>
        /// The policy mode - Choices: `security`, `unified`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkRules")]
        private InputList<Inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleGetArgs>? _networkRules;

        /// <summary>
        /// List of network rules (applies when `mode` set to `security`)
        /// </summary>
        public InputList<Inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleGetArgs> NetworkRules
        {
            get => _networkRules ?? (_networkRules = new InputList<Inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleGetArgs>());
            set => _networkRules = value;
        }

        /// <summary>
        /// RSA key pair modules - Choices: `1024`, `2048`, `4096`
        /// </summary>
        [Input("rsaKeyPairModulus")]
        public Input<string>? RsaKeyPairModulus { get; set; }

        /// <summary>
        /// SSL decryption enabled
        /// </summary>
        [Input("sslDecryptionEnabled")]
        public Input<string>? SslDecryptionEnabled { get; set; }

        /// <summary>
        /// Unknown revocation status action - Choices: `drop`, `decrypt`
        /// </summary>
        [Input("unknownRevocationStatus")]
        public Input<string>? UnknownRevocationStatus { get; set; }

        /// <summary>
        /// Unsupported cipher suites action - Choices: `drop`, `no-decrypt`
        /// </summary>
        [Input("unsupportedCipherSuites")]
        public Input<string>? UnsupportedCipherSuites { get; set; }

        /// <summary>
        /// Unsupported protocol versions action - Choices: `drop`, `no-decrypt`
        /// </summary>
        [Input("unsupportedProtocolVersions")]
        public Input<string>? UnsupportedProtocolVersions { get; set; }

        /// <summary>
        /// Untrusted certificate action - Choices: `drop`, `decrypt`
        /// </summary>
        [Input("untrustedCertificate")]
        public Input<string>? UntrustedCertificate { get; set; }

        [Input("urlRules")]
        private InputList<Inputs.TlsSslDecryptionPolicyDefinitionUrlRuleGetArgs>? _urlRules;

        /// <summary>
        /// List of url rules (applies when `mode` set to `security`)
        /// </summary>
        public InputList<Inputs.TlsSslDecryptionPolicyDefinitionUrlRuleGetArgs> UrlRules
        {
            get => _urlRules ?? (_urlRules = new InputList<Inputs.TlsSslDecryptionPolicyDefinitionUrlRuleGetArgs>());
            set => _urlRules = value;
        }

        /// <summary>
        /// Use default CA certificate bundle
        /// </summary>
        [Input("useDefaultCaCertBundle")]
        public Input<bool>? UseDefaultCaCertBundle { get; set; }

        /// <summary>
        /// The version of the object
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TlsSslDecryptionPolicyDefinitionState()
        {
        }
        public static new TlsSslDecryptionPolicyDefinitionState Empty => new TlsSslDecryptionPolicyDefinitionState();
    }
}
