// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a System Security Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "system_security_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/systemSecurityFeature:SystemSecurityFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/systemSecurityFeature:SystemSecurityFeature")]
    public partial class SystemSecurityFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
        /// `512`
        /// </summary>
        [Output("antiReplayWindow")]
        public Output<string?> AntiReplayWindow { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("antiReplayWindowVariable")]
        public Output<string?> AntiReplayWindowVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
        /// </summary>
        [Output("extendedAntiReplayWindow")]
        public Output<int?> ExtendedAntiReplayWindow { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("extendedAntiReplayWindowVariable")]
        public Output<string?> ExtendedAntiReplayWindowVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("integrityTypeVariable")]
        public Output<string?> IntegrityTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        [Output("integrityTypes")]
        public Output<ImmutableArray<string>> IntegrityTypes { get; private set; } = null!;

        /// <summary>
        /// Enable or disable IPsec pairwise-keying - Default value: `false`
        /// </summary>
        [Output("ipsecPairwiseKeying")]
        public Output<bool?> IpsecPairwiseKeying { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecPairwiseKeyingVariable")]
        public Output<string?> IpsecPairwiseKeyingVariable { get; private set; } = null!;

        /// <summary>
        /// Configure a Keychain
        /// </summary>
        [Output("keychains")]
        public Output<ImmutableArray<Outputs.SystemSecurityFeatureKeychain>> Keychains { get; private set; } = null!;

        /// <summary>
        /// Configure a Key
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<Outputs.SystemSecurityFeatureKey>> Keys { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
        /// </summary>
        [Output("rekey")]
        public Output<int?> Rekey { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("rekeyVariable")]
        public Output<string?> RekeyVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SystemSecurityFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemSecurityFeature(string name, SystemSecurityFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/systemSecurityFeature:SystemSecurityFeature", name, args ?? new SystemSecurityFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemSecurityFeature(string name, Input<string> id, SystemSecurityFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/systemSecurityFeature:SystemSecurityFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemSecurityFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemSecurityFeature Get(string name, Input<string> id, SystemSecurityFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemSecurityFeature(name, id, state, options);
        }
    }

    public sealed class SystemSecurityFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
        /// `512`
        /// </summary>
        [Input("antiReplayWindow")]
        public Input<string>? AntiReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("antiReplayWindowVariable")]
        public Input<string>? AntiReplayWindowVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
        /// </summary>
        [Input("extendedAntiReplayWindow")]
        public Input<int>? ExtendedAntiReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("extendedAntiReplayWindowVariable")]
        public Input<string>? ExtendedAntiReplayWindowVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("integrityTypeVariable")]
        public Input<string>? IntegrityTypeVariable { get; set; }

        [Input("integrityTypes")]
        private InputList<string>? _integrityTypes;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        public InputList<string> IntegrityTypes
        {
            get => _integrityTypes ?? (_integrityTypes = new InputList<string>());
            set => _integrityTypes = value;
        }

        /// <summary>
        /// Enable or disable IPsec pairwise-keying - Default value: `false`
        /// </summary>
        [Input("ipsecPairwiseKeying")]
        public Input<bool>? IpsecPairwiseKeying { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecPairwiseKeyingVariable")]
        public Input<string>? IpsecPairwiseKeyingVariable { get; set; }

        [Input("keychains")]
        private InputList<Inputs.SystemSecurityFeatureKeychainArgs>? _keychains;

        /// <summary>
        /// Configure a Keychain
        /// </summary>
        public InputList<Inputs.SystemSecurityFeatureKeychainArgs> Keychains
        {
            get => _keychains ?? (_keychains = new InputList<Inputs.SystemSecurityFeatureKeychainArgs>());
            set => _keychains = value;
        }

        [Input("keys")]
        private InputList<Inputs.SystemSecurityFeatureKeyArgs>? _keys;

        /// <summary>
        /// Configure a Key
        /// </summary>
        public InputList<Inputs.SystemSecurityFeatureKeyArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.SystemSecurityFeatureKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
        /// </summary>
        [Input("rekey")]
        public Input<int>? Rekey { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rekeyVariable")]
        public Input<string>? RekeyVariable { get; set; }

        public SystemSecurityFeatureArgs()
        {
        }
        public static new SystemSecurityFeatureArgs Empty => new SystemSecurityFeatureArgs();
    }

    public sealed class SystemSecurityFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
        /// `512`
        /// </summary>
        [Input("antiReplayWindow")]
        public Input<string>? AntiReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("antiReplayWindowVariable")]
        public Input<string>? AntiReplayWindowVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
        /// </summary>
        [Input("extendedAntiReplayWindow")]
        public Input<int>? ExtendedAntiReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("extendedAntiReplayWindowVariable")]
        public Input<string>? ExtendedAntiReplayWindowVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("integrityTypeVariable")]
        public Input<string>? IntegrityTypeVariable { get; set; }

        [Input("integrityTypes")]
        private InputList<string>? _integrityTypes;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        public InputList<string> IntegrityTypes
        {
            get => _integrityTypes ?? (_integrityTypes = new InputList<string>());
            set => _integrityTypes = value;
        }

        /// <summary>
        /// Enable or disable IPsec pairwise-keying - Default value: `false`
        /// </summary>
        [Input("ipsecPairwiseKeying")]
        public Input<bool>? IpsecPairwiseKeying { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecPairwiseKeyingVariable")]
        public Input<string>? IpsecPairwiseKeyingVariable { get; set; }

        [Input("keychains")]
        private InputList<Inputs.SystemSecurityFeatureKeychainGetArgs>? _keychains;

        /// <summary>
        /// Configure a Keychain
        /// </summary>
        public InputList<Inputs.SystemSecurityFeatureKeychainGetArgs> Keychains
        {
            get => _keychains ?? (_keychains = new InputList<Inputs.SystemSecurityFeatureKeychainGetArgs>());
            set => _keychains = value;
        }

        [Input("keys")]
        private InputList<Inputs.SystemSecurityFeatureKeyGetArgs>? _keys;

        /// <summary>
        /// Configure a Key
        /// </summary>
        public InputList<Inputs.SystemSecurityFeatureKeyGetArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.SystemSecurityFeatureKeyGetArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
        /// </summary>
        [Input("rekey")]
        public Input<int>? Rekey { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rekeyVariable")]
        public Input<string>? RekeyVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public SystemSecurityFeatureState()
        {
        }
        public static new SystemSecurityFeatureState Empty => new SystemSecurityFeatureState();
    }
}
