// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco DHCP Server feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.CiscoDhcpServerFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         AddressPool = "10.1.1.0/24",
    ///         ExcludeAddresses = new[]
    ///         {
    ///             "10.1.1.1-10.1.1.5",
    ///             "10.1.1.254",
    ///         },
    ///         LeaseTime = 600,
    ///         InterfaceMtu = 1500,
    ///         DomainName = "cisco.com",
    ///         DefaultGateway = "10.1.1.254",
    ///         DnsServers = new[]
    ///         {
    ///             "1.2.3.4",
    ///         },
    ///         TftpServers = new[]
    ///         {
    ///             "1.2.3.4",
    ///         },
    ///         StaticLeases = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseArgs
    ///             {
    ///                 Mac_address = "11:11:11:11:11:11",
    ///                 Ip_address = "10.1.1.10",
    ///                 Hostname = "HOST1",
    ///             },
    ///         },
    ///         Options = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoDhcpServerFeatureTemplateOptionArgs
    ///             {
    ///                 Option_code = 10,
    ///                 Ascii = "abc",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate")]
    public partial class CiscoDhcpServerFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure IPv4 prefix range of the DHCP address pool
        /// </summary>
        [Output("addressPool")]
        public Output<string?> AddressPool { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("addressPoolVariable")]
        public Output<string?> AddressPoolVariable { get; private set; } = null!;

        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        [Output("defaultGateway")]
        public Output<string?> DefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("defaultGatewayVariable")]
        public Output<string?> DefaultGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("dnsServersVariable")]
        public Output<string?> DnsServersVariable { get; private set; } = null!;

        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        [Output("domainName")]
        public Output<string?> DomainName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("domainNameVariable")]
        public Output<string?> DomainNameVariable { get; private set; } = null!;

        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        [Output("excludeAddresses")]
        public Output<ImmutableArray<string>> ExcludeAddresses { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("excludeAddressesVariable")]
        public Output<string?> ExcludeAddressesVariable { get; private set; } = null!;

        /// <summary>
        /// Set MTU on interface to DHCP client
        ///   - Range: `68`-`65535`
        /// </summary>
        [Output("interfaceMtu")]
        public Output<int?> InterfaceMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceMtuVariable")]
        public Output<string?> InterfaceMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid
        ///   - Range: `60`-`31536000`
        ///   - Default value: `86400`
        /// </summary>
        [Output("leaseTime")]
        public Output<int?> LeaseTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("leaseTimeVariable")]
        public Output<string?> LeaseTimeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configure Options Code
        /// </summary>
        [Output("options")]
        public Output<ImmutableArray<Outputs.CiscoDhcpServerFeatureTemplateOption>> Options { get; private set; } = null!;

        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        [Output("staticLeases")]
        public Output<ImmutableArray<Outputs.CiscoDhcpServerFeatureTemplateStaticLease>> StaticLeases { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        [Output("tftpServers")]
        public Output<ImmutableArray<string>> TftpServers { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tftpServersVariable")]
        public Output<string?> TftpServersVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoDhcpServerFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoDhcpServerFeatureTemplate(string name, CiscoDhcpServerFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate", name, args ?? new CiscoDhcpServerFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoDhcpServerFeatureTemplate(string name, Input<string> id, CiscoDhcpServerFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoDhcpServerFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoDhcpServerFeatureTemplate Get(string name, Input<string> id, CiscoDhcpServerFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoDhcpServerFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoDhcpServerFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure IPv4 prefix range of the DHCP address pool
        /// </summary>
        [Input("addressPool")]
        public Input<string>? AddressPool { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("addressPoolVariable")]
        public Input<string>? AddressPoolVariable { get; set; }

        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("defaultGatewayVariable")]
        public Input<string>? DefaultGatewayVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dnsServersVariable")]
        public Input<string>? DnsServersVariable { get; set; }

        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("domainNameVariable")]
        public Input<string>? DomainNameVariable { get; set; }

        [Input("excludeAddresses")]
        private InputList<string>? _excludeAddresses;

        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        public InputList<string> ExcludeAddresses
        {
            get => _excludeAddresses ?? (_excludeAddresses = new InputList<string>());
            set => _excludeAddresses = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("excludeAddressesVariable")]
        public Input<string>? ExcludeAddressesVariable { get; set; }

        /// <summary>
        /// Set MTU on interface to DHCP client
        ///   - Range: `68`-`65535`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid
        ///   - Range: `60`-`31536000`
        ///   - Default value: `86400`
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("leaseTimeVariable")]
        public Input<string>? LeaseTimeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        private InputList<Inputs.CiscoDhcpServerFeatureTemplateOptionArgs>? _options;

        /// <summary>
        /// Configure Options Code
        /// </summary>
        public InputList<Inputs.CiscoDhcpServerFeatureTemplateOptionArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.CiscoDhcpServerFeatureTemplateOptionArgs>());
            set => _options = value;
        }

        [Input("staticLeases")]
        private InputList<Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseArgs>? _staticLeases;

        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        public InputList<Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseArgs> StaticLeases
        {
            get => _staticLeases ?? (_staticLeases = new InputList<Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseArgs>());
            set => _staticLeases = value;
        }

        [Input("tftpServers")]
        private InputList<string>? _tftpServers;

        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        public InputList<string> TftpServers
        {
            get => _tftpServers ?? (_tftpServers = new InputList<string>());
            set => _tftpServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tftpServersVariable")]
        public Input<string>? TftpServersVariable { get; set; }

        public CiscoDhcpServerFeatureTemplateArgs()
        {
        }
        public static new CiscoDhcpServerFeatureTemplateArgs Empty => new CiscoDhcpServerFeatureTemplateArgs();
    }

    public sealed class CiscoDhcpServerFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure IPv4 prefix range of the DHCP address pool
        /// </summary>
        [Input("addressPool")]
        public Input<string>? AddressPool { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("addressPoolVariable")]
        public Input<string>? AddressPoolVariable { get; set; }

        /// <summary>
        /// Set IP address of default gateway
        /// </summary>
        [Input("defaultGateway")]
        public Input<string>? DefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("defaultGatewayVariable")]
        public Input<string>? DefaultGatewayVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// Configure one or more DNS server IP addresses
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dnsServersVariable")]
        public Input<string>? DnsServersVariable { get; set; }

        /// <summary>
        /// Set domain name client uses to resolve hostnames
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("domainNameVariable")]
        public Input<string>? DomainNameVariable { get; set; }

        [Input("excludeAddresses")]
        private InputList<string>? _excludeAddresses;

        /// <summary>
        /// Configure IPv4 address to exclude from DHCP address pool
        /// </summary>
        public InputList<string> ExcludeAddresses
        {
            get => _excludeAddresses ?? (_excludeAddresses = new InputList<string>());
            set => _excludeAddresses = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("excludeAddressesVariable")]
        public Input<string>? ExcludeAddressesVariable { get; set; }

        /// <summary>
        /// Set MTU on interface to DHCP client
        ///   - Range: `68`-`65535`
        /// </summary>
        [Input("interfaceMtu")]
        public Input<int>? InterfaceMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceMtuVariable")]
        public Input<string>? InterfaceMtuVariable { get; set; }

        /// <summary>
        /// Configure how long a DHCP-assigned IP address is valid
        ///   - Range: `60`-`31536000`
        ///   - Default value: `86400`
        /// </summary>
        [Input("leaseTime")]
        public Input<int>? LeaseTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("leaseTimeVariable")]
        public Input<string>? LeaseTimeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("options")]
        private InputList<Inputs.CiscoDhcpServerFeatureTemplateOptionGetArgs>? _options;

        /// <summary>
        /// Configure Options Code
        /// </summary>
        public InputList<Inputs.CiscoDhcpServerFeatureTemplateOptionGetArgs> Options
        {
            get => _options ?? (_options = new InputList<Inputs.CiscoDhcpServerFeatureTemplateOptionGetArgs>());
            set => _options = value;
        }

        [Input("staticLeases")]
        private InputList<Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseGetArgs>? _staticLeases;

        /// <summary>
        /// Configure static IP addresses
        /// </summary>
        public InputList<Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseGetArgs> StaticLeases
        {
            get => _staticLeases ?? (_staticLeases = new InputList<Inputs.CiscoDhcpServerFeatureTemplateStaticLeaseGetArgs>());
            set => _staticLeases = value;
        }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        [Input("tftpServers")]
        private InputList<string>? _tftpServers;

        /// <summary>
        /// Configure TFTP server IP addresses
        /// </summary>
        public InputList<string> TftpServers
        {
            get => _tftpServers ?? (_tftpServers = new InputList<string>());
            set => _tftpServers = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tftpServersVariable")]
        public Input<string>? TftpServersVariable { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoDhcpServerFeatureTemplateState()
        {
        }
        public static new CiscoDhcpServerFeatureTemplateState Empty => new CiscoDhcpServerFeatureTemplateState();
    }
}
