// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetVpnInterfaceDslPppoeFeatureTemplate
    {
        /// <summary>
        /// This data source can read the VPN Interface DSL PPPoE feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceDslPppoeFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpnInterfaceDslPppoeFeatureTemplateResult> InvokeAsync(GetVpnInterfaceDslPppoeFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnInterfaceDslPppoeFeatureTemplateResult>("sdwan:index/getVpnInterfaceDslPppoeFeatureTemplate:getVpnInterfaceDslPppoeFeatureTemplate", args ?? new GetVpnInterfaceDslPppoeFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VPN Interface DSL PPPoE feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceDslPppoeFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnInterfaceDslPppoeFeatureTemplateResult> Invoke(GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnInterfaceDslPppoeFeatureTemplateResult>("sdwan:index/getVpnInterfaceDslPppoeFeatureTemplate:getVpnInterfaceDslPppoeFeatureTemplate", args ?? new GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VPN Interface DSL PPPoE feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceDslPppoeFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnInterfaceDslPppoeFeatureTemplateResult> Invoke(GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnInterfaceDslPppoeFeatureTemplateResult>("sdwan:index/getVpnInterfaceDslPppoeFeatureTemplate:getVpnInterfaceDslPppoeFeatureTemplate", args ?? new GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnInterfaceDslPppoeFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVpnInterfaceDslPppoeFeatureTemplateArgs()
        {
        }
        public static new GetVpnInterfaceDslPppoeFeatureTemplateArgs Empty => new GetVpnInterfaceDslPppoeFeatureTemplateArgs();
    }

    public sealed class GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs()
        {
        }
        public static new GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs Empty => new GetVpnInterfaceDslPppoeFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnInterfaceDslPppoeFeatureTemplateResult
    {
        /// <summary>
        /// Apply ACL
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateAccessListResult> AccessLists;
        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthDownstreamVariable;
        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthUpstreamVariable;
        /// <summary>
        /// CHAP Hostname
        /// </summary>
        public readonly string ChapHostname;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ChapHostnameVariable;
        /// <summary>
        /// Specify ppp chap authentication Password
        /// </summary>
        public readonly string ChapPppAuthPassword;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ChapPppAuthPasswordVariable;
        /// <summary>
        /// Enable core region
        /// </summary>
        public readonly string CoreRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CoreRegionVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Enable core region
        /// </summary>
        public readonly bool EnableCoreRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnableCoreRegionVariable;
        /// <summary>
        /// Interface description
        /// </summary>
        public readonly string EthernetDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EthernetDescriptionVariable;
        /// <summary>
        /// Dialer IP Negotiated
        /// </summary>
        public readonly bool EthernetDialerAddressNegotiated;
        /// <summary>
        /// Dialer pool number
        /// </summary>
        public readonly int EthernetDialerPoolNumber;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EthernetDialerPoolNumberVariable;
        /// <summary>
        /// Ethernet Interface/Sub Interface Name including sub interface number
        /// </summary>
        public readonly string EthernetInterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EthernetInterfaceNameVariable;
        /// <summary>
        /// Maximum MRU to be negotiated during PPP LCP negotiation
        /// </summary>
        public readonly int EthernetPppMaximumPayload;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EthernetPppMaximumPayloadVariable;
        /// <summary>
        /// Dialer IP Unnumbered Loopback interface name
        /// </summary>
        public readonly string EthernetUnnumberedLoopbackInterface;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EthernetUnnumberedLoopbackInterfaceVariable;
        /// <summary>
        /// Encapsulation VLAN id
        /// </summary>
        public readonly int EthernetVlanId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EthernetVlanIdVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// Interface MTU \n\n, in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Network Address Translation on this interface
        /// </summary>
        public readonly bool Nat;
        /// <summary>
        /// Block inbound ICMP error messages
        /// </summary>
        public readonly bool NatBlockIcmpError;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatBlockIcmpErrorVariable;
        /// <summary>
        /// Set port-forwarding rules for NAT on this interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateNatPortForwardResult> NatPortForwards;
        /// <summary>
        /// Set NAT refresh mode
        /// </summary>
        public readonly string NatRefreshMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatRefreshModeVariable;
        /// <summary>
        /// Respond to ping requests to NAT interface ip address from the public side
        /// </summary>
        public readonly bool NatResponseToPing;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatResponseToPingVariable;
        /// <summary>
        /// Set NAT TCP session timeout, in minutes
        /// </summary>
        public readonly int NatTcpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatTcpTimeoutVariable;
        /// <summary>
        /// Set NAT UDP session timeout, in minutes
        /// </summary>
        public readonly int NatUdpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string NatUdpTimeoutVariable;
        /// <summary>
        /// PAP outbound Password
        /// </summary>
        public readonly bool PapPassword;
        /// <summary>
        /// Specify ppp pap authentication Password
        /// </summary>
        public readonly string PapPppAuthPassword;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PapPppAuthPasswordVariable;
        /// <summary>
        /// PAP outbound Sent Username
        /// </summary>
        public readonly string PapUsername;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PapUsernameVariable;
        /// <summary>
        /// Per-tunnel Qos
        /// </summary>
        public readonly bool PerTunnelQos;
        /// <summary>
        /// Per-tunnel QoS Aggregator
        /// </summary>
        public readonly bool PerTunnelQosAggregator;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosAggregatorVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosVariable;
        /// <summary>
        /// Enable policer
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplatePolicerResult> Policers;
        /// <summary>
        /// PPP Link Authentication Protocol
        /// </summary>
        public readonly string PppAuthenticationProtocol;
        /// <summary>
        /// PPP Authentication Protocol PAP
        /// </summary>
        public readonly bool PppAuthenticationProtocolPap;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PppAuthenticationProtocolVariable;
        /// <summary>
        /// Authenticate remote on incoming call only
        /// </summary>
        public readonly string PppAuthenticationType;
        /// <summary>
        /// Adaptive QoS default downstream bandwidth
        /// </summary>
        public readonly int QosAdaptiveBandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveBandwidthDownstreamVariable;
        /// <summary>
        /// Adaptive QoS default upstream bandwidth
        /// </summary>
        public readonly int QosAdaptiveBandwidthUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveBandwidthUpstreamVariable;
        /// <summary>
        /// Downstream max bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMaxDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMaxDownstreamVariable;
        /// <summary>
        /// Upstream max bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMaxUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMaxUpstreamVariable;
        /// <summary>
        /// Downstream min bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMinDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMinDownstreamVariable;
        /// <summary>
        /// Upstream min bandwidth limit
        /// </summary>
        public readonly int QosAdaptiveMinUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptiveMinUpstreamVariable;
        /// <summary>
        /// Periodic timer for adaptive QoS in minutes
        /// </summary>
        public readonly int QosAdaptivePeriod;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosAdaptivePeriodVariable;
        /// <summary>
        /// Name of QoS map
        /// </summary>
        public readonly string QosMap;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosMapVariable;
        /// <summary>
        /// Enable secondary region
        /// </summary>
        public readonly string SecondaryRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryRegionVariable;
        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        /// </summary>
        public readonly int ShapingRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShapingRateVariable;
        /// <summary>
        /// Administrative state
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        public readonly string TlocExtension;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TlocExtensionVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TrackerVariable;
        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public readonly ImmutableArray<string> Trackers;
        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        /// </summary>
        public readonly bool TunnelInterfaceAllowAll;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowAllVariable;
        /// <summary>
        /// Allow/deny BGP
        /// </summary>
        public readonly bool TunnelInterfaceAllowBgp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBgpVariable;
        /// <summary>
        /// Allow/Deny DHCP
        /// </summary>
        public readonly bool TunnelInterfaceAllowDhcp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDhcpVariable;
        /// <summary>
        /// Allow/Deny DNS
        /// </summary>
        public readonly bool TunnelInterfaceAllowDns;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDnsVariable;
        /// <summary>
        /// Allow/Deny Https
        /// </summary>
        public readonly bool TunnelInterfaceAllowHttps;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowHttpsVariable;
        /// <summary>
        /// Allow/Deny ICMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowIcmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowIcmpVariable;
        /// <summary>
        /// Allow/Deny NETCONF
        /// </summary>
        public readonly bool TunnelInterfaceAllowNetconf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNetconfVariable;
        /// <summary>
        /// Allow/Deny NTP
        /// </summary>
        public readonly bool TunnelInterfaceAllowNtp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNtpVariable;
        /// <summary>
        /// Allow/Deny OSPF
        /// </summary>
        public readonly bool TunnelInterfaceAllowOspf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowOspfVariable;
        /// <summary>
        /// Allow/Deny SNMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowSnmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSnmpVariable;
        /// <summary>
        /// Allow/Deny SSH
        /// </summary>
        public readonly bool TunnelInterfaceAllowSsh;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSshVariable;
        /// <summary>
        /// Allow/Deny STUN
        /// </summary>
        public readonly bool TunnelInterfaceAllowStun;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowStunVariable;
        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnel;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnelVariable;
        /// <summary>
        /// Set TLOC as border TLOC
        /// </summary>
        public readonly bool TunnelInterfaceBorder;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBorderVariable;
        /// <summary>
        /// Set carrier for TLOC
        /// </summary>
        public readonly string TunnelInterfaceCarrier;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceCarrierVariable;
        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        /// </summary>
        public readonly bool TunnelInterfaceClearDontFragment;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceClearDontFragmentVariable;
        /// <summary>
        /// Set color for TLOC
        /// </summary>
        public readonly string TunnelInterfaceColor;
        /// <summary>
        /// Restrict this TLOC behavior
        /// </summary>
        public readonly bool TunnelInterfaceColorRestrict;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorVariable;
        /// <summary>
        /// Allow Control Connection
        /// </summary>
        public readonly bool TunnelInterfaceControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceControlConnectionsVariable;
        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationResult> TunnelInterfaceEncapsulations;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceExcludeControllerGroupListVariable;
        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceExcludeControllerGroupLists;
        /// <summary>
        /// List of groups
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceGroups;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGroupsVariable;
        /// <summary>
        /// Set time period of control hello packets \n\n milli seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloIntervalVariable;
        /// <summary>
        /// Set tolerance of control hello packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloTolerance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloToleranceVariable;
        /// <summary>
        /// Set TLOC as last resort
        /// </summary>
        public readonly bool TunnelInterfaceLastResortCircuit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLastResortCircuitVariable;
        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        /// </summary>
        public readonly bool TunnelInterfaceLowBandwidthLink;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLowBandwidthLinkVariable;
        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        /// </summary>
        public readonly int TunnelInterfaceMaxControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceMaxControlConnectionsVariable;
        /// <summary>
        /// Set time period of nat refresh packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceNatRefreshInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNatRefreshIntervalVariable;
        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        /// </summary>
        public readonly bool TunnelInterfaceNetworkBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNetworkBroadcastVariable;
        /// <summary>
        /// Disallow port hopping on the tunnel interface
        /// </summary>
        public readonly bool TunnelInterfacePortHop;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfacePortHopVariable;
        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TunnelInterfaceTunnelTcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceTunnelTcpMssVariable;
        /// <summary>
        /// Put this wan interface in STUN mode only
        /// </summary>
        public readonly bool TunnelInterfaceVbondAsStunServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVbondAsStunServerVariable;
        /// <summary>
        /// Set interface preference for control connection to vManage \n\n
        /// </summary>
        public readonly int TunnelInterfaceVmanageConnectionPreference;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVmanageConnectionPreferenceVariable;
        /// <summary>
        /// Set tunnel QoS mode
        /// </summary>
        public readonly string TunnelQosMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelQosModeVariable;
        /// <summary>
        /// vdsl
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateVdslConfigurationResult> VdslConfigurations;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        public readonly string VpnQosMap;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string VpnQosMapVariable;
        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        public readonly string WriteRule;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string WriteRuleVariable;

        [OutputConstructor]
        private GetVpnInterfaceDslPppoeFeatureTemplateResult(
            ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateAccessListResult> accessLists,

            int bandwidthDownstream,

            string bandwidthDownstreamVariable,

            int bandwidthUpstream,

            string bandwidthUpstreamVariable,

            string chapHostname,

            string chapHostnameVariable,

            string chapPppAuthPassword,

            string chapPppAuthPasswordVariable,

            string coreRegion,

            string coreRegionVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            bool enableCoreRegion,

            string enableCoreRegionVariable,

            string ethernetDescription,

            string ethernetDescriptionVariable,

            bool ethernetDialerAddressNegotiated,

            int ethernetDialerPoolNumber,

            string ethernetDialerPoolNumberVariable,

            string ethernetInterfaceName,

            string ethernetInterfaceNameVariable,

            int ethernetPppMaximumPayload,

            string ethernetPppMaximumPayloadVariable,

            string ethernetUnnumberedLoopbackInterface,

            string ethernetUnnumberedLoopbackInterfaceVariable,

            int ethernetVlanId,

            string ethernetVlanIdVariable,

            string id,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            string name,

            bool nat,

            bool natBlockIcmpError,

            string natBlockIcmpErrorVariable,

            ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateNatPortForwardResult> natPortForwards,

            string natRefreshMode,

            string natRefreshModeVariable,

            bool natResponseToPing,

            string natResponseToPingVariable,

            int natTcpTimeout,

            string natTcpTimeoutVariable,

            int natUdpTimeout,

            string natUdpTimeoutVariable,

            bool papPassword,

            string papPppAuthPassword,

            string papPppAuthPasswordVariable,

            string papUsername,

            string papUsernameVariable,

            bool perTunnelQos,

            bool perTunnelQosAggregator,

            string perTunnelQosAggregatorVariable,

            string perTunnelQosVariable,

            ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplatePolicerResult> policers,

            string pppAuthenticationProtocol,

            bool pppAuthenticationProtocolPap,

            string pppAuthenticationProtocolVariable,

            string pppAuthenticationType,

            int qosAdaptiveBandwidthDownstream,

            string qosAdaptiveBandwidthDownstreamVariable,

            int qosAdaptiveBandwidthUpstream,

            string qosAdaptiveBandwidthUpstreamVariable,

            int qosAdaptiveMaxDownstream,

            string qosAdaptiveMaxDownstreamVariable,

            int qosAdaptiveMaxUpstream,

            string qosAdaptiveMaxUpstreamVariable,

            int qosAdaptiveMinDownstream,

            string qosAdaptiveMinDownstreamVariable,

            int qosAdaptiveMinUpstream,

            string qosAdaptiveMinUpstreamVariable,

            int qosAdaptivePeriod,

            string qosAdaptivePeriodVariable,

            string qosMap,

            string qosMapVariable,

            string secondaryRegion,

            string secondaryRegionVariable,

            int shapingRate,

            string shapingRateVariable,

            bool shutdown,

            string shutdownVariable,

            int tcpMss,

            string tcpMssVariable,

            string templateType,

            string tlocExtension,

            string tlocExtensionVariable,

            string trackerVariable,

            ImmutableArray<string> trackers,

            bool tunnelInterfaceAllowAll,

            string tunnelInterfaceAllowAllVariable,

            bool tunnelInterfaceAllowBgp,

            string tunnelInterfaceAllowBgpVariable,

            bool tunnelInterfaceAllowDhcp,

            string tunnelInterfaceAllowDhcpVariable,

            bool tunnelInterfaceAllowDns,

            string tunnelInterfaceAllowDnsVariable,

            bool tunnelInterfaceAllowHttps,

            string tunnelInterfaceAllowHttpsVariable,

            bool tunnelInterfaceAllowIcmp,

            string tunnelInterfaceAllowIcmpVariable,

            bool tunnelInterfaceAllowNetconf,

            string tunnelInterfaceAllowNetconfVariable,

            bool tunnelInterfaceAllowNtp,

            string tunnelInterfaceAllowNtpVariable,

            bool tunnelInterfaceAllowOspf,

            string tunnelInterfaceAllowOspfVariable,

            bool tunnelInterfaceAllowSnmp,

            string tunnelInterfaceAllowSnmpVariable,

            bool tunnelInterfaceAllowSsh,

            string tunnelInterfaceAllowSshVariable,

            bool tunnelInterfaceAllowStun,

            string tunnelInterfaceAllowStunVariable,

            string tunnelInterfaceBindLoopbackTunnel,

            string tunnelInterfaceBindLoopbackTunnelVariable,

            bool tunnelInterfaceBorder,

            string tunnelInterfaceBorderVariable,

            string tunnelInterfaceCarrier,

            string tunnelInterfaceCarrierVariable,

            bool tunnelInterfaceClearDontFragment,

            string tunnelInterfaceClearDontFragmentVariable,

            string tunnelInterfaceColor,

            bool tunnelInterfaceColorRestrict,

            string tunnelInterfaceColorVariable,

            bool tunnelInterfaceControlConnections,

            string tunnelInterfaceControlConnectionsVariable,

            ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationResult> tunnelInterfaceEncapsulations,

            string tunnelInterfaceExcludeControllerGroupListVariable,

            ImmutableArray<int> tunnelInterfaceExcludeControllerGroupLists,

            ImmutableArray<int> tunnelInterfaceGroups,

            string tunnelInterfaceGroupsVariable,

            int tunnelInterfaceHelloInterval,

            string tunnelInterfaceHelloIntervalVariable,

            int tunnelInterfaceHelloTolerance,

            string tunnelInterfaceHelloToleranceVariable,

            bool tunnelInterfaceLastResortCircuit,

            string tunnelInterfaceLastResortCircuitVariable,

            bool tunnelInterfaceLowBandwidthLink,

            string tunnelInterfaceLowBandwidthLinkVariable,

            int tunnelInterfaceMaxControlConnections,

            string tunnelInterfaceMaxControlConnectionsVariable,

            int tunnelInterfaceNatRefreshInterval,

            string tunnelInterfaceNatRefreshIntervalVariable,

            bool tunnelInterfaceNetworkBroadcast,

            string tunnelInterfaceNetworkBroadcastVariable,

            bool tunnelInterfacePortHop,

            string tunnelInterfacePortHopVariable,

            int tunnelInterfaceTunnelTcpMss,

            string tunnelInterfaceTunnelTcpMssVariable,

            bool tunnelInterfaceVbondAsStunServer,

            string tunnelInterfaceVbondAsStunServerVariable,

            int tunnelInterfaceVmanageConnectionPreference,

            string tunnelInterfaceVmanageConnectionPreferenceVariable,

            string tunnelQosMode,

            string tunnelQosModeVariable,

            ImmutableArray<Outputs.GetVpnInterfaceDslPppoeFeatureTemplateVdslConfigurationResult> vdslConfigurations,

            int version,

            string vpnQosMap,

            string vpnQosMapVariable,

            string writeRule,

            string writeRuleVariable)
        {
            AccessLists = accessLists;
            BandwidthDownstream = bandwidthDownstream;
            BandwidthDownstreamVariable = bandwidthDownstreamVariable;
            BandwidthUpstream = bandwidthUpstream;
            BandwidthUpstreamVariable = bandwidthUpstreamVariable;
            ChapHostname = chapHostname;
            ChapHostnameVariable = chapHostnameVariable;
            ChapPppAuthPassword = chapPppAuthPassword;
            ChapPppAuthPasswordVariable = chapPppAuthPasswordVariable;
            CoreRegion = coreRegion;
            CoreRegionVariable = coreRegionVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            EnableCoreRegion = enableCoreRegion;
            EnableCoreRegionVariable = enableCoreRegionVariable;
            EthernetDescription = ethernetDescription;
            EthernetDescriptionVariable = ethernetDescriptionVariable;
            EthernetDialerAddressNegotiated = ethernetDialerAddressNegotiated;
            EthernetDialerPoolNumber = ethernetDialerPoolNumber;
            EthernetDialerPoolNumberVariable = ethernetDialerPoolNumberVariable;
            EthernetInterfaceName = ethernetInterfaceName;
            EthernetInterfaceNameVariable = ethernetInterfaceNameVariable;
            EthernetPppMaximumPayload = ethernetPppMaximumPayload;
            EthernetPppMaximumPayloadVariable = ethernetPppMaximumPayloadVariable;
            EthernetUnnumberedLoopbackInterface = ethernetUnnumberedLoopbackInterface;
            EthernetUnnumberedLoopbackInterfaceVariable = ethernetUnnumberedLoopbackInterfaceVariable;
            EthernetVlanId = ethernetVlanId;
            EthernetVlanIdVariable = ethernetVlanIdVariable;
            Id = id;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Name = name;
            Nat = nat;
            NatBlockIcmpError = natBlockIcmpError;
            NatBlockIcmpErrorVariable = natBlockIcmpErrorVariable;
            NatPortForwards = natPortForwards;
            NatRefreshMode = natRefreshMode;
            NatRefreshModeVariable = natRefreshModeVariable;
            NatResponseToPing = natResponseToPing;
            NatResponseToPingVariable = natResponseToPingVariable;
            NatTcpTimeout = natTcpTimeout;
            NatTcpTimeoutVariable = natTcpTimeoutVariable;
            NatUdpTimeout = natUdpTimeout;
            NatUdpTimeoutVariable = natUdpTimeoutVariable;
            PapPassword = papPassword;
            PapPppAuthPassword = papPppAuthPassword;
            PapPppAuthPasswordVariable = papPppAuthPasswordVariable;
            PapUsername = papUsername;
            PapUsernameVariable = papUsernameVariable;
            PerTunnelQos = perTunnelQos;
            PerTunnelQosAggregator = perTunnelQosAggregator;
            PerTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            PerTunnelQosVariable = perTunnelQosVariable;
            Policers = policers;
            PppAuthenticationProtocol = pppAuthenticationProtocol;
            PppAuthenticationProtocolPap = pppAuthenticationProtocolPap;
            PppAuthenticationProtocolVariable = pppAuthenticationProtocolVariable;
            PppAuthenticationType = pppAuthenticationType;
            QosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            QosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            QosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            QosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            QosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            QosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            QosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            QosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            QosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            QosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            QosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            QosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            QosAdaptivePeriod = qosAdaptivePeriod;
            QosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            QosMap = qosMap;
            QosMapVariable = qosMapVariable;
            SecondaryRegion = secondaryRegion;
            SecondaryRegionVariable = secondaryRegionVariable;
            ShapingRate = shapingRate;
            ShapingRateVariable = shapingRateVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            TemplateType = templateType;
            TlocExtension = tlocExtension;
            TlocExtensionVariable = tlocExtensionVariable;
            TrackerVariable = trackerVariable;
            Trackers = trackers;
            TunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            TunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            TunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            TunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            TunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            TunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            TunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            TunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            TunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            TunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            TunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            TunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            TunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            TunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            TunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            TunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            TunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            TunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            TunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            TunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            TunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            TunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            TunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            TunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            TunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            TunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            TunnelInterfaceBorder = tunnelInterfaceBorder;
            TunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            TunnelInterfaceCarrier = tunnelInterfaceCarrier;
            TunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            TunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            TunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            TunnelInterfaceColor = tunnelInterfaceColor;
            TunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            TunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            TunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            TunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            TunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            TunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            TunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            TunnelInterfaceGroups = tunnelInterfaceGroups;
            TunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            TunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            TunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            TunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            TunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            TunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            TunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            TunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            TunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            TunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            TunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            TunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            TunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            TunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            TunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            TunnelInterfacePortHop = tunnelInterfacePortHop;
            TunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            TunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            TunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            TunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            TunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            TunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            TunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            TunnelQosMode = tunnelQosMode;
            TunnelQosModeVariable = tunnelQosModeVariable;
            VdslConfigurations = vdslConfigurations;
            Version = version;
            VpnQosMap = vpnQosMap;
            VpnQosMapVariable = vpnQosMapVariable;
            WriteRule = writeRule;
            WriteRuleVariable = writeRuleVariable;
        }
    }
}
