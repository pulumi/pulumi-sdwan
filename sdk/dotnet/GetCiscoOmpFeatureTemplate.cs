// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoOmpFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco OMP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoOmpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoOmpFeatureTemplateResult> InvokeAsync(GetCiscoOmpFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoOmpFeatureTemplateResult>("sdwan:index/getCiscoOmpFeatureTemplate:getCiscoOmpFeatureTemplate", args ?? new GetCiscoOmpFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco OMP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoOmpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoOmpFeatureTemplateResult> Invoke(GetCiscoOmpFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoOmpFeatureTemplateResult>("sdwan:index/getCiscoOmpFeatureTemplate:getCiscoOmpFeatureTemplate", args ?? new GetCiscoOmpFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoOmpFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoOmpFeatureTemplateArgs()
        {
        }
        public static new GetCiscoOmpFeatureTemplateArgs Empty => new GetCiscoOmpFeatureTemplateArgs();
    }

    public sealed class GetCiscoOmpFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoOmpFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoOmpFeatureTemplateInvokeArgs Empty => new GetCiscoOmpFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoOmpFeatureTemplateResult
    {
        /// <summary>
        /// Advertise locally learned routes to OMP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoOmpFeatureTemplateAdvertiseIpv4RouteResult> AdvertiseIpv4Routes;
        /// <summary>
        /// Advertise locally learned routes to OMP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoOmpFeatureTemplateAdvertiseIpv6RouteResult> AdvertiseIpv6Routes;
        /// <summary>
        /// Set the time between OMP Update packets
        /// </summary>
        public readonly int AdvertisementInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AdvertisementIntervalVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Set maximum number of OMP paths to install in vEdge route table
        /// </summary>
        public readonly int EcmpLimit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EcmpLimitVariable;
        /// <summary>
        /// End of RIB timer \n\n seconds
        /// </summary>
        public readonly int EorTimer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EorTimerVariable;
        /// <summary>
        /// Enable or disable OMP graceful restart
        /// </summary>
        public readonly bool GracefulRestart;
        /// <summary>
        /// Set the OMP graceful restart timer
        /// </summary>
        public readonly int GracefulRestartTimer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GracefulRestartTimerVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string GracefulRestartVariable;
        /// <summary>
        /// Set how long to wait before closing OMP peer connection
        /// </summary>
        public readonly int Holdtime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string HoldtimeVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Ignore Region-Path Length During Best-Path Algorithm
        /// </summary>
        public readonly bool IgnoreRegionPathLength;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IgnoreRegionPathLengthVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// omp-admin-distance-ipv4
        /// </summary>
        public readonly int OmpAdminDistanceIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OmpAdminDistanceIpv4Variable;
        /// <summary>
        /// omp-admin-distance-ipv6
        /// </summary>
        public readonly int OmpAdminDistanceIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OmpAdminDistanceIpv6Variable;
        /// <summary>
        /// Set Overlay AS number \n\n or \n\n
        /// </summary>
        public readonly int OverlayAs;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OverlayAsVariable;
        /// <summary>
        /// Set number of TLOC routes advertised between vSmart and vEdge
        /// </summary>
        public readonly int SendPathLimit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SendPathLimitVariable;
        /// <summary>
        /// Enable or disable OMP
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Transport gateway path computation
        /// </summary>
        public readonly string TransportGateway;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TransportGatewayVariable;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetCiscoOmpFeatureTemplateResult(
            ImmutableArray<Outputs.GetCiscoOmpFeatureTemplateAdvertiseIpv4RouteResult> advertiseIpv4Routes,

            ImmutableArray<Outputs.GetCiscoOmpFeatureTemplateAdvertiseIpv6RouteResult> advertiseIpv6Routes,

            int advertisementInterval,

            string advertisementIntervalVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            int ecmpLimit,

            string ecmpLimitVariable,

            int eorTimer,

            string eorTimerVariable,

            bool gracefulRestart,

            int gracefulRestartTimer,

            string gracefulRestartTimerVariable,

            string gracefulRestartVariable,

            int holdtime,

            string holdtimeVariable,

            string id,

            bool ignoreRegionPathLength,

            string ignoreRegionPathLengthVariable,

            string name,

            int ompAdminDistanceIpv4,

            string ompAdminDistanceIpv4Variable,

            int ompAdminDistanceIpv6,

            string ompAdminDistanceIpv6Variable,

            int overlayAs,

            string overlayAsVariable,

            int sendPathLimit,

            string sendPathLimitVariable,

            bool shutdown,

            string shutdownVariable,

            string templateType,

            string transportGateway,

            string transportGatewayVariable,

            int version)
        {
            AdvertiseIpv4Routes = advertiseIpv4Routes;
            AdvertiseIpv6Routes = advertiseIpv6Routes;
            AdvertisementInterval = advertisementInterval;
            AdvertisementIntervalVariable = advertisementIntervalVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            EcmpLimit = ecmpLimit;
            EcmpLimitVariable = ecmpLimitVariable;
            EorTimer = eorTimer;
            EorTimerVariable = eorTimerVariable;
            GracefulRestart = gracefulRestart;
            GracefulRestartTimer = gracefulRestartTimer;
            GracefulRestartTimerVariable = gracefulRestartTimerVariable;
            GracefulRestartVariable = gracefulRestartVariable;
            Holdtime = holdtime;
            HoldtimeVariable = holdtimeVariable;
            Id = id;
            IgnoreRegionPathLength = ignoreRegionPathLength;
            IgnoreRegionPathLengthVariable = ignoreRegionPathLengthVariable;
            Name = name;
            OmpAdminDistanceIpv4 = ompAdminDistanceIpv4;
            OmpAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            OmpAdminDistanceIpv6 = ompAdminDistanceIpv6;
            OmpAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            OverlayAs = overlayAs;
            OverlayAsVariable = overlayAsVariable;
            SendPathLimit = sendPathLimit;
            SendPathLimitVariable = sendPathLimitVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TemplateType = templateType;
            TransportGateway = transportGateway;
            TransportGatewayVariable = transportGatewayVariable;
            Version = version;
        }
    }
}
