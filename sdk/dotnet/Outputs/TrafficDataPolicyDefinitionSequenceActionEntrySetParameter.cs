// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class TrafficDataPolicyDefinitionSequenceActionEntrySetParameter
    {
        /// <summary>
        /// DSCP, Attribute conditional on `Type` being equal to `Dscp`
        ///   - Range: `0`-`63`
        /// </summary>
        public readonly int? Dscp;
        /// <summary>
        /// Forwarding class, Attribute conditional on `Type` being equal to `forwardingClass`
        /// </summary>
        public readonly string? ForwardingClass;
        /// <summary>
        /// Local TLOC list color. Space separated list of colors., Attribute conditional on `Type` being equal to `localTlocList`
        /// </summary>
        public readonly string? LocalTlocListColor;
        /// <summary>
        /// Local TLOC list encapsulation., Attribute conditional on `Type` being equal to `localTlocList`
        ///   - Choices: `Ipsec`, `Gre`, `ipsec gre`
        /// </summary>
        public readonly string? LocalTlocListEncap;
        /// <summary>
        /// Local TLOC list restrict, Attribute conditional on `Type` being equal to `localTlocList`
        /// </summary>
        public readonly bool? LocalTlocListRestrict;
        /// <summary>
        /// Next hop IP, Attribute conditional on `Type` being equal to `nextHop`
        /// </summary>
        public readonly string? NextHop;
        /// <summary>
        /// Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `Type` being equal to `nextHopLoose`
        /// </summary>
        public readonly bool? NextHopLoose;
        /// <summary>
        /// Policer list ID, Attribute conditional on `Type` being equal to `Policer`
        /// </summary>
        public readonly string? PolicerListId;
        /// <summary>
        /// Policer list version
        /// </summary>
        public readonly int? PolicerListVersion;
        /// <summary>
        /// Preferred color group list ID, Attribute conditional on `Type` being equal to `preferredColorGroup`
        /// </summary>
        public readonly string? PreferredColorGroupListId;
        /// <summary>
        /// Preferred color group list version
        /// </summary>
        public readonly int? PreferredColorGroupListVersion;
        /// <summary>
        /// Service TLOC color, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly string? ServiceTlocColor;
        /// <summary>
        /// Service TLOC encapsulation, Attribute conditional on `Type` being equal to `Service`
        ///   - Choices: `Ipsec`, `Gre`, `ipsec gre`
        /// </summary>
        public readonly string? ServiceTlocEncapsulation;
        /// <summary>
        /// Service TLOC IP address, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly string? ServiceTlocIp;
        /// <summary>
        /// Service TLOC list ID, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly string? ServiceTlocListId;
        /// <summary>
        /// Service TLOC list version
        /// </summary>
        public readonly int? ServiceTlocListVersion;
        /// <summary>
        /// Service TLOC Local, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly bool? ServiceTlocLocal;
        /// <summary>
        /// Service TLOC Restrict, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly bool? ServiceTlocRestrict;
        /// <summary>
        /// Service type, Attribute conditional on `Type` being equal to `Service`
        ///   - Choices: `FW`, `IDP`, `IDS`, `Netsvc1`, `Netsvc2`, `Netsvc3`, `Netsvc4`, `Netsvc5`
        /// </summary>
        public readonly string? ServiceType;
        /// <summary>
        /// Service VPN ID, Attribute conditional on `Type` being equal to `Service`
        ///   - Range: `0`-`65536`
        /// </summary>
        public readonly int? ServiceVpnId;
        /// <summary>
        /// TLOC color, Attribute conditional on `Type` being equal to `Tloc`
        /// </summary>
        public readonly string? TlocColor;
        /// <summary>
        /// TLOC encapsulation, Attribute conditional on `Type` being equal to `Tloc`
        ///   - Choices: `Ipsec`, `Gre`, `ipsec gre`
        /// </summary>
        public readonly string? TlocEncapsulation;
        /// <summary>
        /// TLOC IP address, Attribute conditional on `Type` being equal to `Tloc`
        /// </summary>
        public readonly string? TlocIp;
        /// <summary>
        /// TLOC list ID, Attribute conditional on `Type` being equal to `tlocList`
        /// </summary>
        public readonly string? TlocListId;
        /// <summary>
        /// TLOC list version
        /// </summary>
        public readonly int? TlocListVersion;
        /// <summary>
        /// Type of set parameter
        ///   - Choices: `Dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `Policer`, `preferredColorGroup`, `tlocList`, `Tloc`, `Service`, `Vpn`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// DSCP, Attribute conditional on `Type` being equal to `Vpn`
        ///   - Range: `0`-`65530`
        /// </summary>
        public readonly int? VpnId;

        [OutputConstructor]
        private TrafficDataPolicyDefinitionSequenceActionEntrySetParameter(
            int? dscp,

            string? forwardingClass,

            string? localTlocListColor,

            string? localTlocListEncap,

            bool? localTlocListRestrict,

            string? nextHop,

            bool? nextHopLoose,

            string? policerListId,

            int? policerListVersion,

            string? preferredColorGroupListId,

            int? preferredColorGroupListVersion,

            string? serviceTlocColor,

            string? serviceTlocEncapsulation,

            string? serviceTlocIp,

            string? serviceTlocListId,

            int? serviceTlocListVersion,

            bool? serviceTlocLocal,

            bool? serviceTlocRestrict,

            string? serviceType,

            int? serviceVpnId,

            string? tlocColor,

            string? tlocEncapsulation,

            string? tlocIp,

            string? tlocListId,

            int? tlocListVersion,

            string type,

            int? vpnId)
        {
            Dscp = dscp;
            ForwardingClass = forwardingClass;
            LocalTlocListColor = localTlocListColor;
            LocalTlocListEncap = localTlocListEncap;
            LocalTlocListRestrict = localTlocListRestrict;
            NextHop = nextHop;
            NextHopLoose = nextHopLoose;
            PolicerListId = policerListId;
            PolicerListVersion = policerListVersion;
            PreferredColorGroupListId = preferredColorGroupListId;
            PreferredColorGroupListVersion = preferredColorGroupListVersion;
            ServiceTlocColor = serviceTlocColor;
            ServiceTlocEncapsulation = serviceTlocEncapsulation;
            ServiceTlocIp = serviceTlocIp;
            ServiceTlocListId = serviceTlocListId;
            ServiceTlocListVersion = serviceTlocListVersion;
            ServiceTlocLocal = serviceTlocLocal;
            ServiceTlocRestrict = serviceTlocRestrict;
            ServiceType = serviceType;
            ServiceVpnId = serviceVpnId;
            TlocColor = tlocColor;
            TlocEncapsulation = tlocEncapsulation;
            TlocIp = tlocIp;
            TlocListId = tlocListId;
            TlocListVersion = tlocListVersion;
            Type = type;
            VpnId = vpnId;
        }
    }
}
