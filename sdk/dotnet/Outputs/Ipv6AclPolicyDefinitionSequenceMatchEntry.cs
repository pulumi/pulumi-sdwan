// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class Ipv6AclPolicyDefinitionSequenceMatchEntry
    {
        /// <summary>
        /// Class map ID, Attribute conditional on `Type` being equal to `Class`
        /// </summary>
        public readonly string? ClassMapId;
        /// <summary>
        /// Class map version
        /// </summary>
        public readonly int? ClassMapVersion;
        /// <summary>
        /// Destination dataIPv6 prefix list ID, Attribute conditional on `Type` being equal to `destinationDataIpv6PrefixList`
        /// </summary>
        public readonly string? DestinationDataIpv6PrefixListId;
        /// <summary>
        /// Destination data prefix list version
        /// </summary>
        public readonly int? DestinationDataIpv6PrefixListVersion;
        /// <summary>
        /// Destination IPv6 prefix, Attribute conditional on `Type` being equal to `destinationIpv6`
        /// </summary>
        public readonly string? DestinationIp;
        /// <summary>
        /// Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `Type` being equal to `destinationPort`
        /// </summary>
        public readonly string? DestinationPorts;
        /// <summary>
        /// Next header, Attribute conditional on `Type` being equal to `nextHeader`
        ///   - Range: `0`-`255`
        /// </summary>
        public readonly int? NextHeader;
        /// <summary>
        /// Packet length, Attribute conditional on `Type` being equal to `packetLength`
        ///   - Range: `0`-`65535`
        /// </summary>
        public readonly int? PacketLength;
        /// <summary>
        /// PLP - priority, Attribute conditional on `Type` being equal to `Plp`
        ///   - Choices: `High`, `Low`
        /// </summary>
        public readonly string? Priority;
        /// <summary>
        /// Source data IPv6 prefix list ID, Attribute conditional on `Type` being equal to `sourceDataIpv6PrefixList`
        /// </summary>
        public readonly string? SourceDataIpv6PrefixListId;
        /// <summary>
        /// Source data IPv6 prefix list version
        /// </summary>
        public readonly int? SourceDataIpv6PrefixListVersion;
        /// <summary>
        /// Source IPv6 prefix, Attribute conditional on `Type` being equal to `sourceIpv6`
        /// </summary>
        public readonly string? SourceIp;
        /// <summary>
        /// Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `Type` being equal to `sourcePort`
        /// </summary>
        public readonly string? SourcePorts;
        /// <summary>
        /// TCP parameters, Attribute conditional on `Type` being equal to `Tcp`
        ///   - Choices: `Syn`
        /// </summary>
        public readonly string? Tcp;
        /// <summary>
        /// Traffic class, Attribute conditional on `Type` being equal to `trafficClass`
        ///   - Range: `0`-`63`
        /// </summary>
        public readonly int? TrafficClass;
        /// <summary>
        /// Type of match entry
        ///   - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `Class`, `packetLength`, `Plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `Tcp`, `trafficClass`
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private Ipv6AclPolicyDefinitionSequenceMatchEntry(
            string? classMapId,

            int? classMapVersion,

            string? destinationDataIpv6PrefixListId,

            int? destinationDataIpv6PrefixListVersion,

            string? destinationIp,

            string? destinationPorts,

            int? nextHeader,

            int? packetLength,

            string? priority,

            string? sourceDataIpv6PrefixListId,

            int? sourceDataIpv6PrefixListVersion,

            string? sourceIp,

            string? sourcePorts,

            string? tcp,

            int? trafficClass,

            string type)
        {
            ClassMapId = classMapId;
            ClassMapVersion = classMapVersion;
            DestinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            DestinationDataIpv6PrefixListVersion = destinationDataIpv6PrefixListVersion;
            DestinationIp = destinationIp;
            DestinationPorts = destinationPorts;
            NextHeader = nextHeader;
            PacketLength = packetLength;
            Priority = priority;
            SourceDataIpv6PrefixListId = sourceDataIpv6PrefixListId;
            SourceDataIpv6PrefixListVersion = sourceDataIpv6PrefixListVersion;
            SourceIp = sourceIp;
            SourcePorts = sourcePorts;
            Tcp = tcp;
            TrafficClass = trafficClass;
            Type = type;
        }
    }
}
