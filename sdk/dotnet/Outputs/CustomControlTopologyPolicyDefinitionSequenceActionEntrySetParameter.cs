// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter
    {
        /// <summary>
        /// Community value, e.g. `1000:10000` or `Internet` or `local-AS`, Attribute conditional on `Type` being equal to `Community`
        /// </summary>
        public readonly string? Community;
        /// <summary>
        /// Community additive, Attribute conditional on `Type` being equal to `communityAdditive`
        /// </summary>
        public readonly bool? CommunityAdditive;
        /// <summary>
        /// OMP tag, Attribute conditional on `Type` being equal to `ompTag`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? OmpTag;
        /// <summary>
        /// Preference, Attribute conditional on `Type` being equal to `Preference`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? Preference;
        /// <summary>
        /// Service TLOC color, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly string? ServiceTlocColor;
        /// <summary>
        /// Service TLOC encapsulation, Attribute conditional on `Type` being equal to `Service`
        ///   - Choices: `Ipsec`, `Gre`
        /// </summary>
        public readonly string? ServiceTlocEncapsulation;
        /// <summary>
        /// Service TLOC IP address, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly string? ServiceTlocIp;
        /// <summary>
        /// Service TLOC list ID, Attribute conditional on `Type` being equal to `Service`
        /// </summary>
        public readonly string? ServiceTlocListId;
        /// <summary>
        /// Service TLOC list version
        /// </summary>
        public readonly int? ServiceTlocListVersion;
        /// <summary>
        /// Service type, Attribute conditional on `Type` being equal to `Service`
        ///   - Choices: `FW`, `IDP`, `IDS`, `Netsvc1`, `Netsvc2`, `Netsvc3`, `Netsvc4`, `Netsvc5`
        /// </summary>
        public readonly string? ServiceType;
        /// <summary>
        /// Service VPN ID, Attribute conditional on `Type` being equal to `Service`
        ///   - Range: `0`-`65536`
        /// </summary>
        public readonly int? ServiceVpnId;
        /// <summary>
        /// TLOC action, Attribute conditional on `Type` being equal to `tlocAction`
        ///   - Choices: `Strict`, `Primary`, `Backup`, `Ecmp`
        /// </summary>
        public readonly string? TlocAction;
        /// <summary>
        /// TLOC color, Attribute conditional on `Type` being equal to `Tloc`
        /// </summary>
        public readonly string? TlocColor;
        /// <summary>
        /// TLOC encapsulation, Attribute conditional on `Type` being equal to `Tloc`
        ///   - Choices: `Ipsec`, `Gre`
        /// </summary>
        public readonly string? TlocEncapsulation;
        /// <summary>
        /// TLOC IP address, Attribute conditional on `Type` being equal to `Tloc`
        /// </summary>
        public readonly string? TlocIp;
        /// <summary>
        /// TLOC list ID, Attribute conditional on `Type` being equal to `tlocList`
        /// </summary>
        public readonly string? TlocListId;
        /// <summary>
        /// TLOC list version
        /// </summary>
        public readonly int? TlocListVersion;
        /// <summary>
        /// Type of set parameter
        ///   - Choices: `tlocList`, `Tloc`, `tlocAction`, `Preference`, `ompTag`, `Community`, `communityAdditive`, `Service`
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter(
            string? community,

            bool? communityAdditive,

            int? ompTag,

            int? preference,

            string? serviceTlocColor,

            string? serviceTlocEncapsulation,

            string? serviceTlocIp,

            string? serviceTlocListId,

            int? serviceTlocListVersion,

            string? serviceType,

            int? serviceVpnId,

            string? tlocAction,

            string? tlocColor,

            string? tlocEncapsulation,

            string? tlocIp,

            string? tlocListId,

            int? tlocListVersion,

            string type)
        {
            Community = community;
            CommunityAdditive = communityAdditive;
            OmpTag = ompTag;
            Preference = preference;
            ServiceTlocColor = serviceTlocColor;
            ServiceTlocEncapsulation = serviceTlocEncapsulation;
            ServiceTlocIp = serviceTlocIp;
            ServiceTlocListId = serviceTlocListId;
            ServiceTlocListVersion = serviceTlocListVersion;
            ServiceType = serviceType;
            ServiceVpnId = serviceVpnId;
            TlocAction = tlocAction;
            TlocColor = tlocColor;
            TlocEncapsulation = tlocEncapsulation;
            TlocIp = tlocIp;
            TlocListId = tlocListId;
            TlocListVersion = tlocListVersion;
            Type = type;
        }
    }
}
