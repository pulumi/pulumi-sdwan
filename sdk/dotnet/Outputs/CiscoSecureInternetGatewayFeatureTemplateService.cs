// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class CiscoSecureInternetGatewayFeatureTemplateService
    {
        /// <summary>
        /// Interface Pair for active and backup
        /// </summary>
        public readonly ImmutableArray<Outputs.CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> InterfacePairs;
        /// <summary>
        /// Indicates if list item is considered optional.
        /// </summary>
        public readonly bool? Optional;
        /// <summary>
        /// Service Type
        ///   - Choices: `sig`
        ///   - Default value: `sig`
        /// </summary>
        public readonly string? ServiceType;
        /// <summary>
        /// Umbrella Primary Datacenter
        ///   - Default value: `Auto`
        /// </summary>
        public readonly string? UmbrellaPrimaryDataCenter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? UmbrellaPrimaryDataCenterVariable;
        /// <summary>
        /// Umbrella Secondary Datacenter
        ///   - Default value: `Auto`
        /// </summary>
        public readonly string? UmbrellaSecondaryDataCenter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? UmbrellaSecondaryDataCenterVariable;
        /// <summary>
        /// For first-time Acceptable User Policy behavior, block Internet access
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerAupBlockInternetUntilAccepted;
        /// <summary>
        /// Enable Acceptable User Policy
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerAupEnabled;
        /// <summary>
        /// For first-time Acceptable User Policy behavior, force SSL inspection
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerAupForceSslInspection;
        /// <summary>
        /// Custom Acceptable User Policy frequency in days
        ///   - Default value: `0`
        /// </summary>
        public readonly int? ZscalerAupTimeout;
        /// <summary>
        /// Enforce Authentication
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerAuthenticationRequired;
        /// <summary>
        /// Enable Caution
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerCautionEnabled;
        /// <summary>
        /// Firewall enabled
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerFirewallEnabled;
        /// <summary>
        /// Enable IPS Control
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerIpsControlEnabled;
        /// <summary>
        /// Zscaler location name (optional)
        ///   - Default value: `Auto`
        /// </summary>
        public readonly string? ZscalerLocationName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? ZscalerLocationNameVariable;
        /// <summary>
        /// Custom Primary Datacenter
        ///   - Default value: `Auto`
        /// </summary>
        public readonly string? ZscalerPrimaryDataCenter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? ZscalerPrimaryDataCenterVariable;
        /// <summary>
        /// Custom Secondary Datacenter
        ///   - Default value: `Auto`
        /// </summary>
        public readonly string? ZscalerSecondaryDataCenter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? ZscalerSecondaryDataCenterVariable;
        /// <summary>
        /// Display time unit
        ///   - Choices: `MINUTE`, `HOUR`, `DAY`
        ///   - Default value: `MINUTE`
        /// </summary>
        public readonly string? ZscalerSurrogateDisplayTimeUnit;
        /// <summary>
        /// Idle time to disassociation
        ///   - Default value: `0`
        /// </summary>
        public readonly int? ZscalerSurrogateIdleTime;
        /// <summary>
        /// Enable Surrogate IP
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerSurrogateIp;
        /// <summary>
        /// Enforce Surrogate IP for known browsers
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerSurrogateIpEnforceForKnownBrowsers;
        /// <summary>
        /// Refresh time for re-validation of surrogacy in minutes
        ///   - Default value: `0`
        /// </summary>
        public readonly int? ZscalerSurrogateRefreshTime;
        /// <summary>
        /// Refresh Time unit
        ///   - Choices: `MINUTE`, `HOUR`, `DAY`
        ///   - Default value: `MINUTE`
        /// </summary>
        public readonly string? ZscalerSurrogateRefreshTimeUnit;
        /// <summary>
        /// XFF forwarding enabled
        ///   - Default value: `false`
        /// </summary>
        public readonly bool? ZscalerXffForward;

        [OutputConstructor]
        private CiscoSecureInternetGatewayFeatureTemplateService(
            ImmutableArray<Outputs.CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs,

            bool? optional,

            string? serviceType,

            string? umbrellaPrimaryDataCenter,

            string? umbrellaPrimaryDataCenterVariable,

            string? umbrellaSecondaryDataCenter,

            string? umbrellaSecondaryDataCenterVariable,

            bool? zscalerAupBlockInternetUntilAccepted,

            bool? zscalerAupEnabled,

            bool? zscalerAupForceSslInspection,

            int? zscalerAupTimeout,

            bool? zscalerAuthenticationRequired,

            bool? zscalerCautionEnabled,

            bool? zscalerFirewallEnabled,

            bool? zscalerIpsControlEnabled,

            string? zscalerLocationName,

            string? zscalerLocationNameVariable,

            string? zscalerPrimaryDataCenter,

            string? zscalerPrimaryDataCenterVariable,

            string? zscalerSecondaryDataCenter,

            string? zscalerSecondaryDataCenterVariable,

            string? zscalerSurrogateDisplayTimeUnit,

            int? zscalerSurrogateIdleTime,

            bool? zscalerSurrogateIp,

            bool? zscalerSurrogateIpEnforceForKnownBrowsers,

            int? zscalerSurrogateRefreshTime,

            string? zscalerSurrogateRefreshTimeUnit,

            bool? zscalerXffForward)
        {
            InterfacePairs = interfacePairs;
            Optional = optional;
            ServiceType = serviceType;
            UmbrellaPrimaryDataCenter = umbrellaPrimaryDataCenter;
            UmbrellaPrimaryDataCenterVariable = umbrellaPrimaryDataCenterVariable;
            UmbrellaSecondaryDataCenter = umbrellaSecondaryDataCenter;
            UmbrellaSecondaryDataCenterVariable = umbrellaSecondaryDataCenterVariable;
            ZscalerAupBlockInternetUntilAccepted = zscalerAupBlockInternetUntilAccepted;
            ZscalerAupEnabled = zscalerAupEnabled;
            ZscalerAupForceSslInspection = zscalerAupForceSslInspection;
            ZscalerAupTimeout = zscalerAupTimeout;
            ZscalerAuthenticationRequired = zscalerAuthenticationRequired;
            ZscalerCautionEnabled = zscalerCautionEnabled;
            ZscalerFirewallEnabled = zscalerFirewallEnabled;
            ZscalerIpsControlEnabled = zscalerIpsControlEnabled;
            ZscalerLocationName = zscalerLocationName;
            ZscalerLocationNameVariable = zscalerLocationNameVariable;
            ZscalerPrimaryDataCenter = zscalerPrimaryDataCenter;
            ZscalerPrimaryDataCenterVariable = zscalerPrimaryDataCenterVariable;
            ZscalerSecondaryDataCenter = zscalerSecondaryDataCenter;
            ZscalerSecondaryDataCenterVariable = zscalerSecondaryDataCenterVariable;
            ZscalerSurrogateDisplayTimeUnit = zscalerSurrogateDisplayTimeUnit;
            ZscalerSurrogateIdleTime = zscalerSurrogateIdleTime;
            ZscalerSurrogateIp = zscalerSurrogateIp;
            ZscalerSurrogateIpEnforceForKnownBrowsers = zscalerSurrogateIpEnforceForKnownBrowsers;
            ZscalerSurrogateRefreshTime = zscalerSurrogateRefreshTime;
            ZscalerSurrogateRefreshTimeUnit = zscalerSurrogateRefreshTimeUnit;
            ZscalerXffForward = zscalerXffForward;
        }
    }
}
