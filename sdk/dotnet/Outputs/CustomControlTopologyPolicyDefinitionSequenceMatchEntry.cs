// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class CustomControlTopologyPolicyDefinitionSequenceMatchEntry
    {
        /// <summary>
        /// Carrier, Attribute conditional on `Type` being equal to `Carrier`
        ///   - Choices: `Default`, `Carrier1`, `Carrier2`, `Carrier3`, `Carrier4`, `Carrier5`, `Carrier6`, `Carrier7`, `Carrier8`
        /// </summary>
        public readonly string? Carrier;
        /// <summary>
        /// Color list ID, Attribute conditional on `Type` being equal to `colorList`
        /// </summary>
        public readonly string? ColorListId;
        /// <summary>
        /// Color list version
        /// </summary>
        public readonly int? ColorListVersion;
        /// <summary>
        /// Community list ID, Attribute conditional on `Type` being equal to `Community`
        /// </summary>
        public readonly string? CommunityListId;
        /// <summary>
        /// Community list version
        /// </summary>
        public readonly int? CommunityListVersion;
        /// <summary>
        /// Domain ID, Attribute conditional on `Type` being equal to `domainId`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? DomainId;
        /// <summary>
        /// Expanded community list ID, Attribute conditional on `Type` being equal to `expandedCommunity`
        /// </summary>
        public readonly string? ExpandedCommunityListId;
        /// <summary>
        /// Expanded community list version
        /// </summary>
        public readonly int? ExpandedCommunityListVersion;
        /// <summary>
        /// Group ID, Attribute conditional on `Type` being equal to `groupId`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? GroupId;
        /// <summary>
        /// OMP tag, Attribute conditional on `Type` being equal to `ompTag`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? OmpTag;
        /// <summary>
        /// Origin, Attribute conditional on `Type` being equal to `Origin`
        ///   - Choices: `Igp`, `Egp`, `Incomplete`, `Aggregrate`, `Bgp`, `bgp-external`, `bgp-internal`, `Connected`, `Eigrp`, `Ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `Rip`, `Static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `Lisp`, `nat-dia`, `Natpool`, `Isis`, `isis-level1`, `isis-level2`
        /// </summary>
        public readonly string? Origin;
        /// <summary>
        /// Originator IP, Attribute conditional on `Type` being equal to `Originator`
        /// </summary>
        public readonly string? Originator;
        /// <summary>
        /// Path type, Attribute conditional on `Type` being equal to `pathType`
        ///   - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
        /// </summary>
        public readonly string? PathType;
        /// <summary>
        /// Preference, Attribute conditional on `Type` being equal to `Preference`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? Preference;
        /// <summary>
        /// Prefix list ID, Attribute conditional on `Type` being equal to `prefixList`
        /// </summary>
        public readonly string? PrefixListId;
        /// <summary>
        /// Prefix list version
        /// </summary>
        public readonly int? PrefixListVersion;
        /// <summary>
        /// Site ID, Attribute conditional on `Type` being equal to `siteId`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        public readonly int? SiteId;
        /// <summary>
        /// Site list ID, Attribute conditional on `Type` being equal to `siteList`
        /// </summary>
        public readonly string? SiteListId;
        /// <summary>
        /// Site list version
        /// </summary>
        public readonly int? SiteListVersion;
        /// <summary>
        /// TLOC color, Attribute conditional on `Type` being equal to `Tloc`
        /// </summary>
        public readonly string? TlocColor;
        /// <summary>
        /// TLOC encapsulation, Attribute conditional on `Type` being equal to `Tloc`
        ///   - Choices: `Ipsec`, `Gre`
        /// </summary>
        public readonly string? TlocEncapsulation;
        /// <summary>
        /// TLOC IP address, Attribute conditional on `Type` being equal to `Tloc`
        /// </summary>
        public readonly string? TlocIp;
        /// <summary>
        /// TLOC list ID, Attribute conditional on `Type` being equal to `tlocList`
        /// </summary>
        public readonly string? TlocListId;
        /// <summary>
        /// TLOC list version
        /// </summary>
        public readonly int? TlocListVersion;
        /// <summary>
        /// Type of match entry
        ///   - Choices: `colorList`, `Community`, `expandedCommunity`, `ompTag`, `Origin`, `Originator`, `Preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `Vpn`, `Tloc`, `siteId`, `Carrier`, `domainId`, `groupId`
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// VPN ID, Attribute conditional on `Type` being equal to `Vpn`
        ///   - Range: `0`-`65536`
        /// </summary>
        public readonly int? VpnId;
        /// <summary>
        /// VPN list ID, Attribute conditional on `Type` being equal to `vpnList`
        /// </summary>
        public readonly string? VpnListId;
        /// <summary>
        /// VPN list version
        /// </summary>
        public readonly int? VpnListVersion;

        [OutputConstructor]
        private CustomControlTopologyPolicyDefinitionSequenceMatchEntry(
            string? carrier,

            string? colorListId,

            int? colorListVersion,

            string? communityListId,

            int? communityListVersion,

            int? domainId,

            string? expandedCommunityListId,

            int? expandedCommunityListVersion,

            int? groupId,

            int? ompTag,

            string? origin,

            string? originator,

            string? pathType,

            int? preference,

            string? prefixListId,

            int? prefixListVersion,

            int? siteId,

            string? siteListId,

            int? siteListVersion,

            string? tlocColor,

            string? tlocEncapsulation,

            string? tlocIp,

            string? tlocListId,

            int? tlocListVersion,

            string type,

            int? vpnId,

            string? vpnListId,

            int? vpnListVersion)
        {
            Carrier = carrier;
            ColorListId = colorListId;
            ColorListVersion = colorListVersion;
            CommunityListId = communityListId;
            CommunityListVersion = communityListVersion;
            DomainId = domainId;
            ExpandedCommunityListId = expandedCommunityListId;
            ExpandedCommunityListVersion = expandedCommunityListVersion;
            GroupId = groupId;
            OmpTag = ompTag;
            Origin = origin;
            Originator = originator;
            PathType = pathType;
            Preference = preference;
            PrefixListId = prefixListId;
            PrefixListVersion = prefixListVersion;
            SiteId = siteId;
            SiteListId = siteListId;
            SiteListVersion = siteListVersion;
            TlocColor = tlocColor;
            TlocEncapsulation = tlocEncapsulation;
            TlocIp = tlocIp;
            TlocListId = tlocListId;
            TlocListVersion = tlocListVersion;
            Type = type;
            VpnId = vpnId;
            VpnListId = vpnListId;
            VpnListVersion = vpnListVersion;
        }
    }
}
