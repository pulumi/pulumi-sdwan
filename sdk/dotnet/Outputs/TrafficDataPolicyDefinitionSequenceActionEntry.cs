// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class TrafficDataPolicyDefinitionSequenceActionEntry
    {
        /// <summary>
        /// Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
        /// </summary>
        public readonly bool? Cflowd;
        /// <summary>
        /// Counter name, Attribute conditional on `type` being equal to `count`
        /// </summary>
        public readonly string? Counter;
        /// <summary>
        /// Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
        /// </summary>
        public readonly bool? DreOptimization;
        /// <summary>
        /// Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
        /// </summary>
        public readonly bool? FallbackToRouting;
        /// <summary>
        /// Enable logging, Attribute conditional on `type` being equal to `log`
        /// </summary>
        public readonly bool? Log;
        /// <summary>
        /// Loss correction, Attribute conditional on `type` being equal to `lossProtect`
        ///   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        /// </summary>
        public readonly string? LossCorrection;
        /// <summary>
        /// Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
        ///   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        /// </summary>
        public readonly string? LossCorrectionFec;
        /// <summary>
        /// Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
        /// </summary>
        public readonly string? LossCorrectionFecThreshold;
        /// <summary>
        /// Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
        ///   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
        /// </summary>
        public readonly string? LossCorrectionPacketDuplication;
        /// <summary>
        /// List of NAT parameters, Attribute conditional on `type` being equal to `nat`
        /// </summary>
        public readonly ImmutableArray<Outputs.TrafficDataPolicyDefinitionSequenceActionEntryNatParameter> NatParameters;
        /// <summary>
        /// NAT pool, Attribute conditional on `type` being equal to `nat`
        ///   - Choices: `pool`
        /// </summary>
        public readonly string? NatPool;
        /// <summary>
        /// NAT pool ID, Attribute conditional on `type` being equal to `nat`
        ///   - Range: `1`-`31`
        /// </summary>
        public readonly int? NatPoolId;
        /// <summary>
        /// Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
        ///   - Choices: `dnsType`, `ipAddress`
        /// </summary>
        public readonly string? RedirectDns;
        /// <summary>
        /// Redirect DNS IP address, Attribute conditional on `redirect_dns` being equal to `ipAddress`
        /// </summary>
        public readonly string? RedirectDnsAddress;
        /// <summary>
        /// Redirect DNS type, Attribute conditional on `redirect_dns` being equal to `dnsType`
        ///   - Choices: `host`, `umbrella`
        /// </summary>
        public readonly string? RedirectDnsType;
        /// <summary>
        /// Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
        /// </summary>
        public readonly bool? SecureInternetGateway;
        /// <summary>
        /// Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
        /// </summary>
        public readonly string? ServiceNodeGroup;
        /// <summary>
        /// List of set parameters, Attribute conditional on `type` being equal to `set`
        /// </summary>
        public readonly ImmutableArray<Outputs.TrafficDataPolicyDefinitionSequenceActionEntrySetParameter> SetParameters;
        /// <summary>
        /// Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
        /// </summary>
        public readonly bool? TcpOptimization;
        /// <summary>
        /// Type of action entry
        ///   - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private TrafficDataPolicyDefinitionSequenceActionEntry(
            bool? cflowd,

            string? counter,

            bool? dreOptimization,

            bool? fallbackToRouting,

            bool? log,

            string? lossCorrection,

            string? lossCorrectionFec,

            string? lossCorrectionFecThreshold,

            string? lossCorrectionPacketDuplication,

            ImmutableArray<Outputs.TrafficDataPolicyDefinitionSequenceActionEntryNatParameter> natParameters,

            string? natPool,

            int? natPoolId,

            string? redirectDns,

            string? redirectDnsAddress,

            string? redirectDnsType,

            bool? secureInternetGateway,

            string? serviceNodeGroup,

            ImmutableArray<Outputs.TrafficDataPolicyDefinitionSequenceActionEntrySetParameter> setParameters,

            bool? tcpOptimization,

            string type)
        {
            Cflowd = cflowd;
            Counter = counter;
            DreOptimization = dreOptimization;
            FallbackToRouting = fallbackToRouting;
            Log = log;
            LossCorrection = lossCorrection;
            LossCorrectionFec = lossCorrectionFec;
            LossCorrectionFecThreshold = lossCorrectionFecThreshold;
            LossCorrectionPacketDuplication = lossCorrectionPacketDuplication;
            NatParameters = natParameters;
            NatPool = natPool;
            NatPoolId = natPoolId;
            RedirectDns = redirectDns;
            RedirectDnsAddress = redirectDnsAddress;
            RedirectDnsType = redirectDnsType;
            SecureInternetGateway = secureInternetGateway;
            ServiceNodeGroup = serviceNodeGroup;
            SetParameters = setParameters;
            TcpOptimization = tcpOptimization;
            Type = type;
        }
    }
}
