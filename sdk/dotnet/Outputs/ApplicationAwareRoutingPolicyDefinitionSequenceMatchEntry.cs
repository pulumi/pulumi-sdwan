// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry
    {
        /// <summary>
        /// Application list ID
        /// </summary>
        public readonly string? ApplicationListId;
        /// <summary>
        /// Application list version
        /// </summary>
        public readonly int? ApplicationListVersion;
        /// <summary>
        /// Destination Data Prefix list ID
        /// </summary>
        public readonly string? DestinationDataPrefixListId;
        /// <summary>
        /// Destination Data Prefix list version
        /// </summary>
        public readonly int? DestinationDataPrefixListVersion;
        /// <summary>
        /// Destination IP
        /// </summary>
        public readonly string? DestinationIp;
        /// <summary>
        /// Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
        /// </summary>
        public readonly string? DestinationPort;
        /// <summary>
        /// Destination region
        ///   - Choices: `primary-region`, `secondary-region`, `other-region`
        /// </summary>
        public readonly string? DestinationRegion;
        /// <summary>
        /// DNS request or response
        ///   - Choices: `request`, `response`
        /// </summary>
        public readonly string? Dns;
        /// <summary>
        /// DNS Application list ID
        /// </summary>
        public readonly string? DnsApplicationListId;
        /// <summary>
        /// DNS Application list version
        /// </summary>
        public readonly int? DnsApplicationListVersion;
        /// <summary>
        /// DSCP value
        ///   - Range: `0`-`63`
        /// </summary>
        public readonly int? Dscp;
        /// <summary>
        /// PLP
        ///   - Choices: `low`, `high`
        /// </summary>
        public readonly string? Plp;
        /// <summary>
        /// IP Protocol, 0-255 (Single value or multiple values separated by spaces)
        /// </summary>
        public readonly string? Protocol;
        /// <summary>
        /// Source Data Prefix list ID
        /// </summary>
        public readonly string? SourceDataPrefixListId;
        /// <summary>
        /// Source Data Prefix list version
        /// </summary>
        public readonly int? SourceDataPrefixListVersion;
        /// <summary>
        /// Source IP
        /// </summary>
        public readonly string? SourceIp;
        /// <summary>
        /// Source port, 0-65535 (Single value, range or multiple values separated by spaces)
        /// </summary>
        public readonly string? SourcePort;
        /// <summary>
        /// Traffic to
        ///   - Choices: `access`, `core`, `service`
        /// </summary>
        public readonly string? TrafficTo;
        /// <summary>
        /// Type of match entry
        ///   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry(
            string? applicationListId,

            int? applicationListVersion,

            string? destinationDataPrefixListId,

            int? destinationDataPrefixListVersion,

            string? destinationIp,

            string? destinationPort,

            string? destinationRegion,

            string? dns,

            string? dnsApplicationListId,

            int? dnsApplicationListVersion,

            int? dscp,

            string? plp,

            string? protocol,

            string? sourceDataPrefixListId,

            int? sourceDataPrefixListVersion,

            string? sourceIp,

            string? sourcePort,

            string? trafficTo,

            string type)
        {
            ApplicationListId = applicationListId;
            ApplicationListVersion = applicationListVersion;
            DestinationDataPrefixListId = destinationDataPrefixListId;
            DestinationDataPrefixListVersion = destinationDataPrefixListVersion;
            DestinationIp = destinationIp;
            DestinationPort = destinationPort;
            DestinationRegion = destinationRegion;
            Dns = dns;
            DnsApplicationListId = dnsApplicationListId;
            DnsApplicationListVersion = dnsApplicationListVersion;
            Dscp = dscp;
            Plp = plp;
            Protocol = protocol;
            SourceDataPrefixListId = sourceDataPrefixListId;
            SourceDataPrefixListVersion = sourceDataPrefixListVersion;
            SourceIp = sourceIp;
            SourcePort = sourcePort;
            TrafficTo = trafficTo;
            Type = type;
        }
    }
}
