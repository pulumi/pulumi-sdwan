// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Outputs
{

    [OutputType]
    public sealed class TransportT1E1ControllerFeatureEntry
    {
        /// <summary>
        /// Cable Config
        ///   - Choices: `short`, `long`
        /// </summary>
        public readonly string? CableLength;
        /// <summary>
        /// Channel Group List
        /// </summary>
        public readonly ImmutableArray<Outputs.TransportT1E1ControllerFeatureEntryChannelGroup> ChannelGroups;
        /// <summary>
        /// Clock Source
        ///   - Choices: `line`, `internal`, `loop-timed`, `network`
        /// </summary>
        public readonly string? ClockSource;
        /// <summary>
        /// Description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? DescriptionVariable;
        /// <summary>
        /// Card Type
        ///   - Choices: `E1`
        /// </summary>
        public readonly string? E1Description;
        /// <summary>
        /// Framing
        ///   - Choices: `crc4`, `no-crc4`
        /// </summary>
        public readonly string? E1Framing;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? E1FramingVariable;
        /// <summary>
        /// LineCode
        ///   - Choices: `ami`, `hdb3`
        /// </summary>
        public readonly string? E1Linecode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? E1LinecodeVariable;
        /// <summary>
        /// length, Attribute conditional on `cable_length` being equal to `long`
        ///   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        /// </summary>
        public readonly string? LengthLong;
        /// <summary>
        /// Variable name, Attribute conditional on `cable_length` being equal to `long`
        /// </summary>
        public readonly string? LengthLongVariable;
        /// <summary>
        /// length, Attribute conditional on `cable_length` being equal to `short`
        ///   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        /// </summary>
        public readonly string? LengthShort;
        /// <summary>
        /// Variable name, Attribute conditional on `cable_length` being equal to `short`
        /// </summary>
        public readonly string? LengthShortVariable;
        /// <summary>
        /// Line Mode
        ///   - Choices: `secondary`, `primary`
        /// </summary>
        public readonly string? LineMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? LineModeVariable;
        /// <summary>
        /// Card Type
        ///   - Choices: `T1`
        /// </summary>
        public readonly string? T1Description;
        /// <summary>
        /// Framing
        ///   - Choices: `esf`, `sf`
        /// </summary>
        public readonly string? T1Framing;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? T1FramingVariable;
        /// <summary>
        /// LineCode
        ///   - Choices: `ami`, `b8zs`
        /// </summary>
        public readonly string? T1Linecode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string? T1LinecodeVariable;

        [OutputConstructor]
        private TransportT1E1ControllerFeatureEntry(
            string? cableLength,

            ImmutableArray<Outputs.TransportT1E1ControllerFeatureEntryChannelGroup> channelGroups,

            string? clockSource,

            string? description,

            string? descriptionVariable,

            string? e1Description,

            string? e1Framing,

            string? e1FramingVariable,

            string? e1Linecode,

            string? e1LinecodeVariable,

            string? lengthLong,

            string? lengthLongVariable,

            string? lengthShort,

            string? lengthShortVariable,

            string? lineMode,

            string? lineModeVariable,

            string? t1Description,

            string? t1Framing,

            string? t1FramingVariable,

            string? t1Linecode,

            string? t1LinecodeVariable)
        {
            CableLength = cableLength;
            ChannelGroups = channelGroups;
            ClockSource = clockSource;
            Description = description;
            DescriptionVariable = descriptionVariable;
            E1Description = e1Description;
            E1Framing = e1Framing;
            E1FramingVariable = e1FramingVariable;
            E1Linecode = e1Linecode;
            E1LinecodeVariable = e1LinecodeVariable;
            LengthLong = lengthLong;
            LengthLongVariable = lengthLongVariable;
            LengthShort = lengthShort;
            LengthShortVariable = lengthShortVariable;
            LineMode = lineMode;
            LineModeVariable = lineModeVariable;
            T1Description = t1Description;
            T1Framing = t1Framing;
            T1FramingVariable = t1FramingVariable;
            T1Linecode = t1Linecode;
            T1LinecodeVariable = t1LinecodeVariable;
        }
    }
}
