// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetVpnInterfaceMultilinkFeatureTemplate
    {
        /// <summary>
        /// This data source can read the VPN Interface Multilink feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceMultilinkFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpnInterfaceMultilinkFeatureTemplateResult> InvokeAsync(GetVpnInterfaceMultilinkFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnInterfaceMultilinkFeatureTemplateResult>("sdwan:index/getVpnInterfaceMultilinkFeatureTemplate:getVpnInterfaceMultilinkFeatureTemplate", args ?? new GetVpnInterfaceMultilinkFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VPN Interface Multilink feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceMultilinkFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnInterfaceMultilinkFeatureTemplateResult> Invoke(GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnInterfaceMultilinkFeatureTemplateResult>("sdwan:index/getVpnInterfaceMultilinkFeatureTemplate:getVpnInterfaceMultilinkFeatureTemplate", args ?? new GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VPN Interface Multilink feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceMultilinkFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnInterfaceMultilinkFeatureTemplateResult> Invoke(GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnInterfaceMultilinkFeatureTemplateResult>("sdwan:index/getVpnInterfaceMultilinkFeatureTemplate:getVpnInterfaceMultilinkFeatureTemplate", args ?? new GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnInterfaceMultilinkFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVpnInterfaceMultilinkFeatureTemplateArgs()
        {
        }
        public static new GetVpnInterfaceMultilinkFeatureTemplateArgs Empty => new GetVpnInterfaceMultilinkFeatureTemplateArgs();
    }

    public sealed class GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs()
        {
        }
        public static new GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs Empty => new GetVpnInterfaceMultilinkFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnInterfaceMultilinkFeatureTemplateResult
    {
        /// <summary>
        /// Apply ACL
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateAccessListResult> AccessLists;
        /// <summary>
        /// Link autonegotiation
        /// </summary>
        public readonly bool Autonegotiate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AutonegotiateVariable;
        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthDownstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthDownstreamVariable;
        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps
        /// </summary>
        public readonly int BandwidthUpstream;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string BandwidthUpstreamVariable;
        /// <summary>
        /// CHAP Hostname
        /// </summary>
        public readonly string ChapHostname;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ChapHostnameVariable;
        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        public readonly string ChapPppAuthPassword;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ChapPppAuthPasswordVariable;
        /// <summary>
        /// Clear don't fragment bit
        /// </summary>
        public readonly bool ClearDontFragmentBit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ClearDontFragmentBitVariable;
        /// <summary>
        /// Enable core region
        /// </summary>
        public readonly string CoreRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CoreRegionVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Suppresss multilink fragmentation
        /// </summary>
        public readonly bool DisableFragmentation;
        /// <summary>
        /// Enable core region
        /// </summary>
        public readonly bool EnableCoreRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnableCoreRegionVariable;
        /// <summary>
        /// Maximum delay for each fragment
        /// </summary>
        public readonly int FragmentMaxDelay;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string FragmentMaxDelayVariable;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Interface description
        /// </summary>
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// Interface Name
        /// </summary>
        public readonly string InterfaceName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceNameVariable;
        /// <summary>
        /// Allow interleaving of packets with fragments
        /// </summary>
        public readonly bool InterleavingFragment;
        /// <summary>
        /// Interface MTU \n\n, in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        /// <summary>
        /// Apply IPv6 access list
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateIpv6AccessListResult> Ipv6AccessLists;
        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// MultiLink Group Number
        /// </summary>
        public readonly int MultilinkGroupNumber;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MultilinkGroupNumberVariable;
        /// <summary>
        /// Controller tx-ex List
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceResult> MultilinkInterfaces;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Nim Interface List
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceListResult> NimInterfaceLists;
        /// <summary>
        /// PAP outbound Password
        /// </summary>
        public readonly bool PapPassword;
        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        public readonly string PapPppAuthPassword;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PapPppAuthPasswordVariable;
        /// <summary>
        /// PAP outbound Sent Username
        /// </summary>
        public readonly string PapUsername;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PapUsernameVariable;
        /// <summary>
        /// Per-tunnel Qos
        /// </summary>
        public readonly bool PerTunnelQos;
        /// <summary>
        /// Per-tunnel QoS Aggregator
        /// </summary>
        public readonly bool PerTunnelQosAggregator;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosAggregatorVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PerTunnelQosVariable;
        /// <summary>
        /// Path MTU Discovery
        /// </summary>
        public readonly bool PmtuDiscovery;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PmtuDiscoveryVariable;
        /// <summary>
        /// PPP Link Authentication Protocol
        /// </summary>
        public readonly string PppAuthenticationProtocol;
        /// <summary>
        /// PPP Authentication Protocol PAP
        /// </summary>
        public readonly bool PppAuthenticationProtocolPap;
        /// <summary>
        /// Authenticate remote on incoming call only
        /// </summary>
        public readonly string PppAuthenticationType;
        /// <summary>
        /// Name of QoS map
        /// </summary>
        public readonly string QosMap;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosMapVariable;
        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        public readonly string QosMapVpn;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string QosMapVpnVariable;
        /// <summary>
        /// Enable secondary region
        /// </summary>
        public readonly string SecondaryRegion;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryRegionVariable;
        /// <summary>
        /// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
        /// </summary>
        public readonly int ShapingRate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShapingRateVariable;
        /// <summary>
        /// Administrative state
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Static ingress QoS for the port
        /// </summary>
        public readonly int StaticIngressQos;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string StaticIngressQosVariable;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        public readonly string TlocExtension;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TlocExtensionVariable;
        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set
        /// </summary>
        public readonly bool TunnelInterfaceAllowAll;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowAllVariable;
        /// <summary>
        /// Allow/deny BGP
        /// </summary>
        public readonly bool TunnelInterfaceAllowBgp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowBgpVariable;
        /// <summary>
        /// Allow/Deny DHCP
        /// </summary>
        public readonly bool TunnelInterfaceAllowDhcp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDhcpVariable;
        /// <summary>
        /// Allow/Deny DNS
        /// </summary>
        public readonly bool TunnelInterfaceAllowDns;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowDnsVariable;
        /// <summary>
        /// Allow/Deny Https
        /// </summary>
        public readonly bool TunnelInterfaceAllowHttps;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowHttpsVariable;
        /// <summary>
        /// Allow/Deny ICMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowIcmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowIcmpVariable;
        /// <summary>
        /// Allow/Deny NETCONF
        /// </summary>
        public readonly bool TunnelInterfaceAllowNetconf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNetconfVariable;
        /// <summary>
        /// Allow/Deny NTP
        /// </summary>
        public readonly bool TunnelInterfaceAllowNtp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowNtpVariable;
        /// <summary>
        /// Allow/Deny OSPF
        /// </summary>
        public readonly bool TunnelInterfaceAllowOspf;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowOspfVariable;
        /// <summary>
        /// Allow/Deny SNMP
        /// </summary>
        public readonly bool TunnelInterfaceAllowSnmp;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSnmpVariable;
        /// <summary>
        /// Allow/Deny SSH
        /// </summary>
        public readonly bool TunnelInterfaceAllowSsh;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowSshVariable;
        /// <summary>
        /// Allow/Deny STUN
        /// </summary>
        public readonly bool TunnelInterfaceAllowStun;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceAllowStunVariable;
        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnel;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBindLoopbackTunnelVariable;
        /// <summary>
        /// Set TLOC as border TLOC
        /// </summary>
        public readonly bool TunnelInterfaceBorder;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceBorderVariable;
        /// <summary>
        /// Set carrier for TLOC
        /// </summary>
        public readonly string TunnelInterfaceCarrier;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceCarrierVariable;
        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
        /// </summary>
        public readonly bool TunnelInterfaceClearDontFragment;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceClearDontFragmentVariable;
        /// <summary>
        /// Set color for TLOC
        /// </summary>
        public readonly string TunnelInterfaceColor;
        /// <summary>
        /// Restrict this TLOC behavior
        /// </summary>
        public readonly bool TunnelInterfaceColorRestrict;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceColorVariable;
        /// <summary>
        /// Allow Control Connection
        /// </summary>
        public readonly bool TunnelInterfaceControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceControlConnectionsVariable;
        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationResult> TunnelInterfaceEncapsulations;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceExcludeControllerGroupListVariable;
        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceExcludeControllerGroupLists;
        /// <summary>
        /// List of groups
        /// </summary>
        public readonly ImmutableArray<int> TunnelInterfaceGroups;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceGroupsVariable;
        /// <summary>
        /// Set time period of control hello packets \n\n milli seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloIntervalVariable;
        /// <summary>
        /// Set tolerance of control hello packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceHelloTolerance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceHelloToleranceVariable;
        /// <summary>
        /// Set TLOC as last resort
        /// </summary>
        public readonly bool TunnelInterfaceLastResortCircuit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLastResortCircuitVariable;
        /// <summary>
        /// Set the interface as a low-bandwidth circuit
        /// </summary>
        public readonly bool TunnelInterfaceLowBandwidthLink;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceLowBandwidthLinkVariable;
        /// <summary>
        /// Set the maximum number of control connections for this TLOC
        /// </summary>
        public readonly int TunnelInterfaceMaxControlConnections;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceMaxControlConnectionsVariable;
        /// <summary>
        /// Set time period of nat refresh packets \n\n seconds
        /// </summary>
        public readonly int TunnelInterfaceNatRefreshInterval;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNatRefreshIntervalVariable;
        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts)
        /// </summary>
        public readonly bool TunnelInterfaceNetworkBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceNetworkBroadcastVariable;
        /// <summary>
        /// Disallow port hopping on the tunnel interface
        /// </summary>
        public readonly bool TunnelInterfacePortHop;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfacePortHopVariable;
        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TunnelInterfaceTunnelTcpMss;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceTunnelTcpMssVariable;
        /// <summary>
        /// Put this wan interface in STUN mode only
        /// </summary>
        public readonly bool TunnelInterfaceVbondAsStunServer;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVbondAsStunServerVariable;
        /// <summary>
        /// Set interface preference for control connection to vManage \n\n
        /// </summary>
        public readonly int TunnelInterfaceVmanageConnectionPreference;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelInterfaceVmanageConnectionPreferenceVariable;
        /// <summary>
        /// Set tunnel QoS mode
        /// </summary>
        public readonly string TunnelQosMode;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TunnelQosModeVariable;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        public readonly string WriteRule;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string WriteRuleVariable;

        [OutputConstructor]
        private GetVpnInterfaceMultilinkFeatureTemplateResult(
            ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateAccessListResult> accessLists,

            bool autonegotiate,

            string autonegotiateVariable,

            int bandwidthDownstream,

            string bandwidthDownstreamVariable,

            int bandwidthUpstream,

            string bandwidthUpstreamVariable,

            string chapHostname,

            string chapHostnameVariable,

            string chapPppAuthPassword,

            string chapPppAuthPasswordVariable,

            bool clearDontFragmentBit,

            string clearDontFragmentBitVariable,

            string coreRegion,

            string coreRegionVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            bool disableFragmentation,

            bool enableCoreRegion,

            string enableCoreRegionVariable,

            int fragmentMaxDelay,

            string fragmentMaxDelayVariable,

            string id,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            string interfaceName,

            string interfaceNameVariable,

            bool interleavingFragment,

            int ipMtu,

            string ipMtuVariable,

            string ipv4Address,

            string ipv4AddressVariable,

            ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateIpv6AccessListResult> ipv6AccessLists,

            string ipv6Address,

            string ipv6AddressVariable,

            int multilinkGroupNumber,

            string multilinkGroupNumberVariable,

            ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceResult> multilinkInterfaces,

            string name,

            ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceListResult> nimInterfaceLists,

            bool papPassword,

            string papPppAuthPassword,

            string papPppAuthPasswordVariable,

            string papUsername,

            string papUsernameVariable,

            bool perTunnelQos,

            bool perTunnelQosAggregator,

            string perTunnelQosAggregatorVariable,

            string perTunnelQosVariable,

            bool pmtuDiscovery,

            string pmtuDiscoveryVariable,

            string pppAuthenticationProtocol,

            bool pppAuthenticationProtocolPap,

            string pppAuthenticationType,

            string qosMap,

            string qosMapVariable,

            string qosMapVpn,

            string qosMapVpnVariable,

            string secondaryRegion,

            string secondaryRegionVariable,

            int shapingRate,

            string shapingRateVariable,

            bool shutdown,

            string shutdownVariable,

            int staticIngressQos,

            string staticIngressQosVariable,

            int tcpMss,

            string tcpMssVariable,

            string templateType,

            string tlocExtension,

            string tlocExtensionVariable,

            bool tunnelInterfaceAllowAll,

            string tunnelInterfaceAllowAllVariable,

            bool tunnelInterfaceAllowBgp,

            string tunnelInterfaceAllowBgpVariable,

            bool tunnelInterfaceAllowDhcp,

            string tunnelInterfaceAllowDhcpVariable,

            bool tunnelInterfaceAllowDns,

            string tunnelInterfaceAllowDnsVariable,

            bool tunnelInterfaceAllowHttps,

            string tunnelInterfaceAllowHttpsVariable,

            bool tunnelInterfaceAllowIcmp,

            string tunnelInterfaceAllowIcmpVariable,

            bool tunnelInterfaceAllowNetconf,

            string tunnelInterfaceAllowNetconfVariable,

            bool tunnelInterfaceAllowNtp,

            string tunnelInterfaceAllowNtpVariable,

            bool tunnelInterfaceAllowOspf,

            string tunnelInterfaceAllowOspfVariable,

            bool tunnelInterfaceAllowSnmp,

            string tunnelInterfaceAllowSnmpVariable,

            bool tunnelInterfaceAllowSsh,

            string tunnelInterfaceAllowSshVariable,

            bool tunnelInterfaceAllowStun,

            string tunnelInterfaceAllowStunVariable,

            string tunnelInterfaceBindLoopbackTunnel,

            string tunnelInterfaceBindLoopbackTunnelVariable,

            bool tunnelInterfaceBorder,

            string tunnelInterfaceBorderVariable,

            string tunnelInterfaceCarrier,

            string tunnelInterfaceCarrierVariable,

            bool tunnelInterfaceClearDontFragment,

            string tunnelInterfaceClearDontFragmentVariable,

            string tunnelInterfaceColor,

            bool tunnelInterfaceColorRestrict,

            string tunnelInterfaceColorVariable,

            bool tunnelInterfaceControlConnections,

            string tunnelInterfaceControlConnectionsVariable,

            ImmutableArray<Outputs.GetVpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulationResult> tunnelInterfaceEncapsulations,

            string tunnelInterfaceExcludeControllerGroupListVariable,

            ImmutableArray<int> tunnelInterfaceExcludeControllerGroupLists,

            ImmutableArray<int> tunnelInterfaceGroups,

            string tunnelInterfaceGroupsVariable,

            int tunnelInterfaceHelloInterval,

            string tunnelInterfaceHelloIntervalVariable,

            int tunnelInterfaceHelloTolerance,

            string tunnelInterfaceHelloToleranceVariable,

            bool tunnelInterfaceLastResortCircuit,

            string tunnelInterfaceLastResortCircuitVariable,

            bool tunnelInterfaceLowBandwidthLink,

            string tunnelInterfaceLowBandwidthLinkVariable,

            int tunnelInterfaceMaxControlConnections,

            string tunnelInterfaceMaxControlConnectionsVariable,

            int tunnelInterfaceNatRefreshInterval,

            string tunnelInterfaceNatRefreshIntervalVariable,

            bool tunnelInterfaceNetworkBroadcast,

            string tunnelInterfaceNetworkBroadcastVariable,

            bool tunnelInterfacePortHop,

            string tunnelInterfacePortHopVariable,

            int tunnelInterfaceTunnelTcpMss,

            string tunnelInterfaceTunnelTcpMssVariable,

            bool tunnelInterfaceVbondAsStunServer,

            string tunnelInterfaceVbondAsStunServerVariable,

            int tunnelInterfaceVmanageConnectionPreference,

            string tunnelInterfaceVmanageConnectionPreferenceVariable,

            string tunnelQosMode,

            string tunnelQosModeVariable,

            int version,

            string writeRule,

            string writeRuleVariable)
        {
            AccessLists = accessLists;
            Autonegotiate = autonegotiate;
            AutonegotiateVariable = autonegotiateVariable;
            BandwidthDownstream = bandwidthDownstream;
            BandwidthDownstreamVariable = bandwidthDownstreamVariable;
            BandwidthUpstream = bandwidthUpstream;
            BandwidthUpstreamVariable = bandwidthUpstreamVariable;
            ChapHostname = chapHostname;
            ChapHostnameVariable = chapHostnameVariable;
            ChapPppAuthPassword = chapPppAuthPassword;
            ChapPppAuthPasswordVariable = chapPppAuthPasswordVariable;
            ClearDontFragmentBit = clearDontFragmentBit;
            ClearDontFragmentBitVariable = clearDontFragmentBitVariable;
            CoreRegion = coreRegion;
            CoreRegionVariable = coreRegionVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            DisableFragmentation = disableFragmentation;
            EnableCoreRegion = enableCoreRegion;
            EnableCoreRegionVariable = enableCoreRegionVariable;
            FragmentMaxDelay = fragmentMaxDelay;
            FragmentMaxDelayVariable = fragmentMaxDelayVariable;
            Id = id;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            InterfaceName = interfaceName;
            InterfaceNameVariable = interfaceNameVariable;
            InterleavingFragment = interleavingFragment;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv6AccessLists = ipv6AccessLists;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            MultilinkGroupNumber = multilinkGroupNumber;
            MultilinkGroupNumberVariable = multilinkGroupNumberVariable;
            MultilinkInterfaces = multilinkInterfaces;
            Name = name;
            NimInterfaceLists = nimInterfaceLists;
            PapPassword = papPassword;
            PapPppAuthPassword = papPppAuthPassword;
            PapPppAuthPasswordVariable = papPppAuthPasswordVariable;
            PapUsername = papUsername;
            PapUsernameVariable = papUsernameVariable;
            PerTunnelQos = perTunnelQos;
            PerTunnelQosAggregator = perTunnelQosAggregator;
            PerTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            PerTunnelQosVariable = perTunnelQosVariable;
            PmtuDiscovery = pmtuDiscovery;
            PmtuDiscoveryVariable = pmtuDiscoveryVariable;
            PppAuthenticationProtocol = pppAuthenticationProtocol;
            PppAuthenticationProtocolPap = pppAuthenticationProtocolPap;
            PppAuthenticationType = pppAuthenticationType;
            QosMap = qosMap;
            QosMapVariable = qosMapVariable;
            QosMapVpn = qosMapVpn;
            QosMapVpnVariable = qosMapVpnVariable;
            SecondaryRegion = secondaryRegion;
            SecondaryRegionVariable = secondaryRegionVariable;
            ShapingRate = shapingRate;
            ShapingRateVariable = shapingRateVariable;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            StaticIngressQos = staticIngressQos;
            StaticIngressQosVariable = staticIngressQosVariable;
            TcpMss = tcpMss;
            TcpMssVariable = tcpMssVariable;
            TemplateType = templateType;
            TlocExtension = tlocExtension;
            TlocExtensionVariable = tlocExtensionVariable;
            TunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            TunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            TunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            TunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            TunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            TunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            TunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            TunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            TunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            TunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            TunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            TunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            TunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            TunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            TunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            TunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            TunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            TunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            TunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            TunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            TunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            TunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            TunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            TunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            TunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            TunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            TunnelInterfaceBorder = tunnelInterfaceBorder;
            TunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            TunnelInterfaceCarrier = tunnelInterfaceCarrier;
            TunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            TunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            TunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            TunnelInterfaceColor = tunnelInterfaceColor;
            TunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            TunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            TunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            TunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            TunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            TunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            TunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            TunnelInterfaceGroups = tunnelInterfaceGroups;
            TunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            TunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            TunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            TunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            TunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            TunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            TunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            TunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            TunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            TunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            TunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            TunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            TunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            TunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            TunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            TunnelInterfacePortHop = tunnelInterfacePortHop;
            TunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            TunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            TunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            TunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            TunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            TunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            TunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            TunnelQosMode = tunnelQosMode;
            TunnelQosModeVariable = tunnelQosModeVariable;
            Version = version;
            WriteRule = writeRule;
            WriteRuleVariable = writeRuleVariable;
        }
    }
}
