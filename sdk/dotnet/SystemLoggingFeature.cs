// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a System Logging Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "system_logging_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/systemLoggingFeature:SystemLoggingFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/systemLoggingFeature:SystemLoggingFeature")]
    public partial class SystemLoggingFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Enable logging to local disk
        ///   - Default value: `True`
        /// </summary>
        [Output("diskEnable")]
        public Output<bool?> DiskEnable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("diskEnableVariable")]
        public Output<string?> DiskEnableVariable { get; private set; } = null!;

        /// <summary>
        /// Set number of syslog files to create before discarding oldest files
        ///   - Range: `1`-`10`
        ///   - Default value: `10`
        /// </summary>
        [Output("diskFileRotate")]
        public Output<int?> DiskFileRotate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("diskFileRotateVariable")]
        public Output<string?> DiskFileRotateVariable { get; private set; } = null!;

        /// <summary>
        /// Set maximum size of file before it is rotated
        ///   - Range: `1`-`20`
        ///   - Default value: `10`
        /// </summary>
        [Output("diskFileSize")]
        public Output<int?> DiskFileSize { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("diskFileSizeVariable")]
        public Output<string?> DiskFileSizeVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        [Output("ipv4Servers")]
        public Output<ImmutableArray<Outputs.SystemLoggingFeatureIpv4Server>> Ipv4Servers { get; private set; } = null!;

        /// <summary>
        /// Enable logging to remote ipv6 server
        /// </summary>
        [Output("ipv6Servers")]
        public Output<ImmutableArray<Outputs.SystemLoggingFeatureIpv6Server>> Ipv6Servers { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        [Output("tlsProfiles")]
        public Output<ImmutableArray<Outputs.SystemLoggingFeatureTlsProfile>> TlsProfiles { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SystemLoggingFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemLoggingFeature(string name, SystemLoggingFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/systemLoggingFeature:SystemLoggingFeature", name, args ?? new SystemLoggingFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemLoggingFeature(string name, Input<string> id, SystemLoggingFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/systemLoggingFeature:SystemLoggingFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemLoggingFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemLoggingFeature Get(string name, Input<string> id, SystemLoggingFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemLoggingFeature(name, id, state, options);
        }
    }

    public sealed class SystemLoggingFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable logging to local disk
        ///   - Default value: `True`
        /// </summary>
        [Input("diskEnable")]
        public Input<bool>? DiskEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskEnableVariable")]
        public Input<string>? DiskEnableVariable { get; set; }

        /// <summary>
        /// Set number of syslog files to create before discarding oldest files
        ///   - Range: `1`-`10`
        ///   - Default value: `10`
        /// </summary>
        [Input("diskFileRotate")]
        public Input<int>? DiskFileRotate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskFileRotateVariable")]
        public Input<string>? DiskFileRotateVariable { get; set; }

        /// <summary>
        /// Set maximum size of file before it is rotated
        ///   - Range: `1`-`20`
        ///   - Default value: `10`
        /// </summary>
        [Input("diskFileSize")]
        public Input<int>? DiskFileSize { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskFileSizeVariable")]
        public Input<string>? DiskFileSizeVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("ipv4Servers")]
        private InputList<Inputs.SystemLoggingFeatureIpv4ServerArgs>? _ipv4Servers;

        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        public InputList<Inputs.SystemLoggingFeatureIpv4ServerArgs> Ipv4Servers
        {
            get => _ipv4Servers ?? (_ipv4Servers = new InputList<Inputs.SystemLoggingFeatureIpv4ServerArgs>());
            set => _ipv4Servers = value;
        }

        [Input("ipv6Servers")]
        private InputList<Inputs.SystemLoggingFeatureIpv6ServerArgs>? _ipv6Servers;

        /// <summary>
        /// Enable logging to remote ipv6 server
        /// </summary>
        public InputList<Inputs.SystemLoggingFeatureIpv6ServerArgs> Ipv6Servers
        {
            get => _ipv6Servers ?? (_ipv6Servers = new InputList<Inputs.SystemLoggingFeatureIpv6ServerArgs>());
            set => _ipv6Servers = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tlsProfiles")]
        private InputList<Inputs.SystemLoggingFeatureTlsProfileArgs>? _tlsProfiles;

        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        public InputList<Inputs.SystemLoggingFeatureTlsProfileArgs> TlsProfiles
        {
            get => _tlsProfiles ?? (_tlsProfiles = new InputList<Inputs.SystemLoggingFeatureTlsProfileArgs>());
            set => _tlsProfiles = value;
        }

        public SystemLoggingFeatureArgs()
        {
        }
        public static new SystemLoggingFeatureArgs Empty => new SystemLoggingFeatureArgs();
    }

    public sealed class SystemLoggingFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable logging to local disk
        ///   - Default value: `True`
        /// </summary>
        [Input("diskEnable")]
        public Input<bool>? DiskEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskEnableVariable")]
        public Input<string>? DiskEnableVariable { get; set; }

        /// <summary>
        /// Set number of syslog files to create before discarding oldest files
        ///   - Range: `1`-`10`
        ///   - Default value: `10`
        /// </summary>
        [Input("diskFileRotate")]
        public Input<int>? DiskFileRotate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskFileRotateVariable")]
        public Input<string>? DiskFileRotateVariable { get; set; }

        /// <summary>
        /// Set maximum size of file before it is rotated
        ///   - Range: `1`-`20`
        ///   - Default value: `10`
        /// </summary>
        [Input("diskFileSize")]
        public Input<int>? DiskFileSize { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("diskFileSizeVariable")]
        public Input<string>? DiskFileSizeVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("ipv4Servers")]
        private InputList<Inputs.SystemLoggingFeatureIpv4ServerGetArgs>? _ipv4Servers;

        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        public InputList<Inputs.SystemLoggingFeatureIpv4ServerGetArgs> Ipv4Servers
        {
            get => _ipv4Servers ?? (_ipv4Servers = new InputList<Inputs.SystemLoggingFeatureIpv4ServerGetArgs>());
            set => _ipv4Servers = value;
        }

        [Input("ipv6Servers")]
        private InputList<Inputs.SystemLoggingFeatureIpv6ServerGetArgs>? _ipv6Servers;

        /// <summary>
        /// Enable logging to remote ipv6 server
        /// </summary>
        public InputList<Inputs.SystemLoggingFeatureIpv6ServerGetArgs> Ipv6Servers
        {
            get => _ipv6Servers ?? (_ipv6Servers = new InputList<Inputs.SystemLoggingFeatureIpv6ServerGetArgs>());
            set => _ipv6Servers = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tlsProfiles")]
        private InputList<Inputs.SystemLoggingFeatureTlsProfileGetArgs>? _tlsProfiles;

        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        public InputList<Inputs.SystemLoggingFeatureTlsProfileGetArgs> TlsProfiles
        {
            get => _tlsProfiles ?? (_tlsProfiles = new InputList<Inputs.SystemLoggingFeatureTlsProfileGetArgs>());
            set => _tlsProfiles = value;
        }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public SystemLoggingFeatureState()
        {
        }
        public static new SystemLoggingFeatureState Empty => new SystemLoggingFeatureState();
    }
}
