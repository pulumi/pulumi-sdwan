// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a VPN Interface DSL PPPoA feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/vpnInterfaceDslPppoaFeatureTemplate:VpnInterfaceDslPppoaFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/vpnInterfaceDslPppoaFeatureTemplate:VpnInterfaceDslPppoaFeatureTemplate")]
    public partial class VpnInterfaceDslPppoaFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Apply ACL
        /// </summary>
        [Output("accessLists")]
        public Output<ImmutableArray<Outputs.VpnInterfaceDslPppoaFeatureTemplateAccessList>> AccessLists { get; private set; } = null!;

        /// <summary>
        /// Interface description
        /// </summary>
        [Output("atmDescription")]
        public Output<string?> AtmDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("atmDescriptionVariable")]
        public Output<string?> AtmDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// ATM Sub interface Name
        /// </summary>
        [Output("atmSubInterfaceName")]
        public Output<string?> AtmSubInterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("atmSubInterfaceNameVariable")]
        public Output<string?> AtmSubInterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthDownstream")]
        public Output<int?> BandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthDownstreamVariable")]
        public Output<string?> BandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Output("bandwidthUpstream")]
        public Output<int?> BandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("bandwidthUpstreamVariable")]
        public Output<string?> BandwidthUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// CHAP Hostname
        /// </summary>
        [Output("chapHostname")]
        public Output<string?> ChapHostname { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("chapHostnameVariable")]
        public Output<string?> ChapHostnameVariable { get; private set; } = null!;

        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        [Output("chapPppAuthPassword")]
        public Output<string?> ChapPppAuthPassword { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("chapPppAuthPasswordVariable")]
        public Output<string?> ChapPppAuthPasswordVariable { get; private set; } = null!;

        /// <summary>
        /// Enable core region - Choices: `core`, `core-shared` - Default value: `core`
        /// </summary>
        [Output("coreRegion")]
        public Output<string?> CoreRegion { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("coreRegionVariable")]
        public Output<string?> CoreRegionVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Enable core region - Default value: `false`
        /// </summary>
        [Output("enableCoreRegion")]
        public Output<bool?> EnableCoreRegion { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enableCoreRegionVariable")]
        public Output<string?> EnableCoreRegionVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU &lt;576..2000&gt;, in bytes - Range: `576`-`2000` - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Output("nat")]
        public Output<bool?> Nat { get; private set; } = null!;

        /// <summary>
        /// Block inbound ICMP error messages - Default value: `true`
        /// </summary>
        [Output("natBlockIcmpError")]
        public Output<bool?> NatBlockIcmpError { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natBlockIcmpErrorVariable")]
        public Output<string?> NatBlockIcmpErrorVariable { get; private set; } = null!;

        /// <summary>
        /// Set port-forwarding rules for NAT on this interface
        /// </summary>
        [Output("natPortForwards")]
        public Output<ImmutableArray<Outputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForward>> NatPortForwards { get; private set; } = null!;

        /// <summary>
        /// Set NAT refresh mode - Choices: `outbound`, `bi-directional` - Default value: `outbound`
        /// </summary>
        [Output("natRefreshMode")]
        public Output<string?> NatRefreshMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natRefreshModeVariable")]
        public Output<string?> NatRefreshModeVariable { get; private set; } = null!;

        /// <summary>
        /// Respond to ping requests to NAT interface ip address from the public side - Default value: `false`
        /// </summary>
        [Output("natResponseToPing")]
        public Output<bool?> NatResponseToPing { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natResponseToPingVariable")]
        public Output<string?> NatResponseToPingVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Output("natTcpTimeout")]
        public Output<int?> NatTcpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natTcpTimeoutVariable")]
        public Output<string?> NatTcpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Output("natUdpTimeout")]
        public Output<int?> NatUdpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("natUdpTimeoutVariable")]
        public Output<string?> NatUdpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// PAP outbound Password
        /// </summary>
        [Output("papPassword")]
        public Output<bool?> PapPassword { get; private set; } = null!;

        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        [Output("papPppAuthPassword")]
        public Output<string?> PapPppAuthPassword { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("papPppAuthPasswordVariable")]
        public Output<string?> PapPppAuthPasswordVariable { get; private set; } = null!;

        /// <summary>
        /// PAP outbound Sent Username
        /// </summary>
        [Output("papUsername")]
        public Output<string?> PapUsername { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("papUsernameVariable")]
        public Output<string?> PapUsernameVariable { get; private set; } = null!;

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Output("perTunnelQos")]
        public Output<bool?> PerTunnelQos { get; private set; } = null!;

        /// <summary>
        /// Per-tunnel QoS Aggregator - Default value: `false`
        /// </summary>
        [Output("perTunnelQosAggregator")]
        public Output<bool?> PerTunnelQosAggregator { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("perTunnelQosAggregatorVariable")]
        public Output<string?> PerTunnelQosAggregatorVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("perTunnelQosVariable")]
        public Output<string?> PerTunnelQosVariable { get; private set; } = null!;

        /// <summary>
        /// Enable policer
        /// </summary>
        [Output("policers")]
        public Output<ImmutableArray<Outputs.VpnInterfaceDslPppoaFeatureTemplatePolicer>> Policers { get; private set; } = null!;

        /// <summary>
        /// PPP Link Authentication Protocol - Choices: `chap`, `pap`
        /// </summary>
        [Output("pppAuthenticationProtocol")]
        public Output<string?> PppAuthenticationProtocol { get; private set; } = null!;

        /// <summary>
        /// PPP Authentication Protocol PAP - Default value: `false`
        /// </summary>
        [Output("pppAuthenticationProtocolPap")]
        public Output<bool?> PppAuthenticationProtocolPap { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("pppAuthenticationProtocolVariable")]
        public Output<string?> PppAuthenticationProtocolVariable { get; private set; } = null!;

        /// <summary>
        /// Authenticate remote on incoming call only - Choices: `callin`, `false` - Default value: `callin`
        /// </summary>
        [Output("pppAuthenticationType")]
        public Output<string?> PppAuthenticationType { get; private set; } = null!;

        /// <summary>
        /// pvc
        /// </summary>
        [Output("pvcs")]
        public Output<ImmutableArray<Outputs.VpnInterfaceDslPppoaFeatureTemplatePvc>> Pvcs { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default downstream bandwidth - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveBandwidthDownstream")]
        public Output<int?> QosAdaptiveBandwidthDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveBandwidthDownstreamVariable")]
        public Output<string?> QosAdaptiveBandwidthDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Adaptive QoS default upstream bandwidth - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveBandwidthUpstream")]
        public Output<int?> QosAdaptiveBandwidthUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveBandwidthUpstreamVariable")]
        public Output<string?> QosAdaptiveBandwidthUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream max bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxDownstream")]
        public Output<int?> QosAdaptiveMaxDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxDownstreamVariable")]
        public Output<string?> QosAdaptiveMaxDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream max bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMaxUpstream")]
        public Output<int?> QosAdaptiveMaxUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMaxUpstreamVariable")]
        public Output<string?> QosAdaptiveMaxUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Downstream min bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinDownstream")]
        public Output<int?> QosAdaptiveMinDownstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinDownstreamVariable")]
        public Output<string?> QosAdaptiveMinDownstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Upstream min bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Output("qosAdaptiveMinUpstream")]
        public Output<int?> QosAdaptiveMinUpstream { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptiveMinUpstreamVariable")]
        public Output<string?> QosAdaptiveMinUpstreamVariable { get; private set; } = null!;

        /// <summary>
        /// Periodic timer for adaptive QoS in minutes - Range: `1`-`720` - Default value: `15`
        /// </summary>
        [Output("qosAdaptivePeriod")]
        public Output<int?> QosAdaptivePeriod { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosAdaptivePeriodVariable")]
        public Output<string?> QosAdaptivePeriodVariable { get; private set; } = null!;

        /// <summary>
        /// Name of QoS map
        /// </summary>
        [Output("qosMap")]
        public Output<string?> QosMap { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosMapVariable")]
        public Output<string?> QosMapVariable { get; private set; } = null!;

        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        [Output("qosMapVpn")]
        public Output<string?> QosMapVpn { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("qosMapVpnVariable")]
        public Output<string?> QosMapVpnVariable { get; private set; } = null!;

        /// <summary>
        /// Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
        /// </summary>
        [Output("secondaryRegion")]
        public Output<string?> SecondaryRegion { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryRegionVariable")]
        public Output<string?> SecondaryRegionVariable { get; private set; } = null!;

        /// <summary>
        /// 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
        /// </summary>
        [Output("shapingRate")]
        public Output<int?> ShapingRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shapingRateVariable")]
        public Output<string?> ShapingRateVariable { get; private set; } = null!;

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
        /// </summary>
        [Output("tcpMss")]
        public Output<int?> TcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssVariable")]
        public Output<string?> TcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Output("tlocExtension")]
        public Output<string?> TlocExtension { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tlocExtensionVariable")]
        public Output<string?> TlocExtensionVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("trackers")]
        public Output<ImmutableArray<string>> Trackers { get; private set; } = null!;

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowAll")]
        public Output<bool?> TunnelInterfaceAllowAll { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowAllVariable")]
        public Output<string?> TunnelInterfaceAllowAllVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowBgp")]
        public Output<bool?> TunnelInterfaceAllowBgp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowBgpVariable")]
        public Output<string?> TunnelInterfaceAllowBgpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDhcp")]
        public Output<bool?> TunnelInterfaceAllowDhcp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDhcpVariable")]
        public Output<string?> TunnelInterfaceAllowDhcpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowDns")]
        public Output<bool?> TunnelInterfaceAllowDns { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowDnsVariable")]
        public Output<string?> TunnelInterfaceAllowDnsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny Https - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowHttps")]
        public Output<bool?> TunnelInterfaceAllowHttps { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowHttpsVariable")]
        public Output<string?> TunnelInterfaceAllowHttpsVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceAllowIcmp")]
        public Output<bool?> TunnelInterfaceAllowIcmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowIcmpVariable")]
        public Output<string?> TunnelInterfaceAllowIcmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNetconf")]
        public Output<bool?> TunnelInterfaceAllowNetconf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNetconfVariable")]
        public Output<string?> TunnelInterfaceAllowNetconfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny NTP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowNtp")]
        public Output<bool?> TunnelInterfaceAllowNtp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowNtpVariable")]
        public Output<string?> TunnelInterfaceAllowNtpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowOspf")]
        public Output<bool?> TunnelInterfaceAllowOspf { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowOspfVariable")]
        public Output<string?> TunnelInterfaceAllowOspfVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSnmp")]
        public Output<bool?> TunnelInterfaceAllowSnmp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSnmpVariable")]
        public Output<string?> TunnelInterfaceAllowSnmpVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny SSH - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowSsh")]
        public Output<bool?> TunnelInterfaceAllowSsh { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowSshVariable")]
        public Output<string?> TunnelInterfaceAllowSshVariable { get; private set; } = null!;

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceAllowStun")]
        public Output<bool?> TunnelInterfaceAllowStun { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceAllowStunVariable")]
        public Output<string?> TunnelInterfaceAllowStunVariable { get; private set; } = null!;

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnel")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnel { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Output<string?> TunnelInterfaceBindLoopbackTunnelVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceBorder")]
        public Output<bool?> TunnelInterfaceBorder { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceBorderVariable")]
        public Output<string?> TunnelInterfaceBorderVariable { get; private set; } = null!;

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceCarrier")]
        public Output<string?> TunnelInterfaceCarrier { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceCarrierVariable")]
        public Output<string?> TunnelInterfaceCarrierVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceClearDontFragment")]
        public Output<bool?> TunnelInterfaceClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceClearDontFragmentVariable")]
        public Output<string?> TunnelInterfaceClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `default`
        /// </summary>
        [Output("tunnelInterfaceColor")]
        public Output<string?> TunnelInterfaceColor { get; private set; } = null!;

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceColorRestrict")]
        public Output<bool?> TunnelInterfaceColorRestrict { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceColorVariable")]
        public Output<string?> TunnelInterfaceColorVariable { get; private set; } = null!;

        /// <summary>
        /// Allow Control Connection - Default value: `true`
        /// </summary>
        [Output("tunnelInterfaceControlConnections")]
        public Output<bool?> TunnelInterfaceControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        [Output("tunnelInterfaceEncapsulations")]
        public Output<ImmutableArray<Outputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation>> TunnelInterfaceEncapsulations { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Output<string?> TunnelInterfaceExcludeControllerGroupListVariable { get; private set; } = null!;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        [Output("tunnelInterfaceExcludeControllerGroupLists")]
        public Output<ImmutableArray<int>> TunnelInterfaceExcludeControllerGroupLists { get; private set; } = null!;

        /// <summary>
        /// List of groups
        /// </summary>
        [Output("tunnelInterfaceGroups")]
        public Output<ImmutableArray<int>> TunnelInterfaceGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceGroupsVariable")]
        public Output<string?> TunnelInterfaceGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Output("tunnelInterfaceHelloInterval")]
        public Output<int?> TunnelInterfaceHelloInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloIntervalVariable")]
        public Output<string?> TunnelInterfaceHelloIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Output("tunnelInterfaceHelloTolerance")]
        public Output<int?> TunnelInterfaceHelloTolerance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceHelloToleranceVariable")]
        public Output<string?> TunnelInterfaceHelloToleranceVariable { get; private set; } = null!;

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuit")]
        public Output<bool?> TunnelInterfaceLastResortCircuit { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLastResortCircuitVariable")]
        public Output<string?> TunnelInterfaceLastResortCircuitVariable { get; private set; } = null!;

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLink")]
        public Output<bool?> TunnelInterfaceLowBandwidthLink { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceLowBandwidthLinkVariable")]
        public Output<string?> TunnelInterfaceLowBandwidthLinkVariable { get; private set; } = null!;

        /// <summary>
        /// Set the maximum number of control connections for this TLOC - Range: `0`-`8`
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnections")]
        public Output<int?> TunnelInterfaceMaxControlConnections { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceMaxControlConnectionsVariable")]
        public Output<string?> TunnelInterfaceMaxControlConnectionsVariable { get; private set; } = null!;

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceNatRefreshInterval")]
        public Output<int?> TunnelInterfaceNatRefreshInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNatRefreshIntervalVariable")]
        public Output<string?> TunnelInterfaceNatRefreshIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcast")]
        public Output<bool?> TunnelInterfaceNetworkBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceNetworkBroadcastVariable")]
        public Output<string?> TunnelInterfaceNetworkBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Output("tunnelInterfacePortHop")]
        public Output<bool?> TunnelInterfacePortHop { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfacePortHopVariable")]
        public Output<string?> TunnelInterfacePortHopVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMss")]
        public Output<int?> TunnelInterfaceTunnelTcpMss { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceTunnelTcpMssVariable")]
        public Output<string?> TunnelInterfaceTunnelTcpMssVariable { get; private set; } = null!;

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServer")]
        public Output<bool?> TunnelInterfaceVbondAsStunServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVbondAsStunServerVariable")]
        public Output<string?> TunnelInterfaceVbondAsStunServerVariable { get; private set; } = null!;

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreference")]
        public Output<int?> TunnelInterfaceVmanageConnectionPreference { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Output<string?> TunnelInterfaceVmanageConnectionPreferenceVariable { get; private set; } = null!;

        /// <summary>
        /// Set tunnel QoS mode - Choices: `spoke`
        /// </summary>
        [Output("tunnelQosMode")]
        public Output<string?> TunnelQosMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelQosModeVariable")]
        public Output<string?> TunnelQosModeVariable { get; private set; } = null!;

        /// <summary>
        /// vdsl
        /// </summary>
        [Output("vdslConfigurations")]
        public Output<ImmutableArray<Outputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration>> VdslConfigurations { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Output("writeRule")]
        public Output<string?> WriteRule { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("writeRuleVariable")]
        public Output<string?> WriteRuleVariable { get; private set; } = null!;


        /// <summary>
        /// Create a VpnInterfaceDslPppoaFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnInterfaceDslPppoaFeatureTemplate(string name, VpnInterfaceDslPppoaFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/vpnInterfaceDslPppoaFeatureTemplate:VpnInterfaceDslPppoaFeatureTemplate", name, args ?? new VpnInterfaceDslPppoaFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnInterfaceDslPppoaFeatureTemplate(string name, Input<string> id, VpnInterfaceDslPppoaFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/vpnInterfaceDslPppoaFeatureTemplate:VpnInterfaceDslPppoaFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnInterfaceDslPppoaFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnInterfaceDslPppoaFeatureTemplate Get(string name, Input<string> id, VpnInterfaceDslPppoaFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnInterfaceDslPppoaFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class VpnInterfaceDslPppoaFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessLists")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateAccessListArgs>? _accessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateAccessListArgs> AccessLists
        {
            get => _accessLists ?? (_accessLists = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateAccessListArgs>());
            set => _accessLists = value;
        }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("atmDescription")]
        public Input<string>? AtmDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("atmDescriptionVariable")]
        public Input<string>? AtmDescriptionVariable { get; set; }

        /// <summary>
        /// ATM Sub interface Name
        /// </summary>
        [Input("atmSubInterfaceName")]
        public Input<string>? AtmSubInterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("atmSubInterfaceNameVariable")]
        public Input<string>? AtmSubInterfaceNameVariable { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// CHAP Hostname
        /// </summary>
        [Input("chapHostname")]
        public Input<string>? ChapHostname { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("chapHostnameVariable")]
        public Input<string>? ChapHostnameVariable { get; set; }

        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        [Input("chapPppAuthPassword")]
        public Input<string>? ChapPppAuthPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("chapPppAuthPasswordVariable")]
        public Input<string>? ChapPppAuthPasswordVariable { get; set; }

        /// <summary>
        /// Enable core region - Choices: `core`, `core-shared` - Default value: `core`
        /// </summary>
        [Input("coreRegion")]
        public Input<string>? CoreRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("coreRegionVariable")]
        public Input<string>? CoreRegionVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable core region - Default value: `false`
        /// </summary>
        [Input("enableCoreRegion")]
        public Input<bool>? EnableCoreRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableCoreRegionVariable")]
        public Input<string>? EnableCoreRegionVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;576..2000&gt;, in bytes - Range: `576`-`2000` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Input("nat")]
        public Input<bool>? Nat { get; set; }

        /// <summary>
        /// Block inbound ICMP error messages - Default value: `true`
        /// </summary>
        [Input("natBlockIcmpError")]
        public Input<bool>? NatBlockIcmpError { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natBlockIcmpErrorVariable")]
        public Input<string>? NatBlockIcmpErrorVariable { get; set; }

        [Input("natPortForwards")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgs>? _natPortForwards;

        /// <summary>
        /// Set port-forwarding rules for NAT on this interface
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgs> NatPortForwards
        {
            get => _natPortForwards ?? (_natPortForwards = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForwardArgs>());
            set => _natPortForwards = value;
        }

        /// <summary>
        /// Set NAT refresh mode - Choices: `outbound`, `bi-directional` - Default value: `outbound`
        /// </summary>
        [Input("natRefreshMode")]
        public Input<string>? NatRefreshMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natRefreshModeVariable")]
        public Input<string>? NatRefreshModeVariable { get; set; }

        /// <summary>
        /// Respond to ping requests to NAT interface ip address from the public side - Default value: `false`
        /// </summary>
        [Input("natResponseToPing")]
        public Input<bool>? NatResponseToPing { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natResponseToPingVariable")]
        public Input<string>? NatResponseToPingVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Input("natTcpTimeout")]
        public Input<int>? NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natTcpTimeoutVariable")]
        public Input<string>? NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Input("natUdpTimeout")]
        public Input<int>? NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natUdpTimeoutVariable")]
        public Input<string>? NatUdpTimeoutVariable { get; set; }

        /// <summary>
        /// PAP outbound Password
        /// </summary>
        [Input("papPassword")]
        public Input<bool>? PapPassword { get; set; }

        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        [Input("papPppAuthPassword")]
        public Input<string>? PapPppAuthPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("papPppAuthPasswordVariable")]
        public Input<string>? PapPppAuthPasswordVariable { get; set; }

        /// <summary>
        /// PAP outbound Sent Username
        /// </summary>
        [Input("papUsername")]
        public Input<string>? PapUsername { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("papUsernameVariable")]
        public Input<string>? PapUsernameVariable { get; set; }

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Per-tunnel QoS Aggregator - Default value: `false`
        /// </summary>
        [Input("perTunnelQosAggregator")]
        public Input<bool>? PerTunnelQosAggregator { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosAggregatorVariable")]
        public Input<string>? PerTunnelQosAggregatorVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        [Input("policers")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePolicerArgs>? _policers;

        /// <summary>
        /// Enable policer
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePolicerArgs> Policers
        {
            get => _policers ?? (_policers = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePolicerArgs>());
            set => _policers = value;
        }

        /// <summary>
        /// PPP Link Authentication Protocol - Choices: `chap`, `pap`
        /// </summary>
        [Input("pppAuthenticationProtocol")]
        public Input<string>? PppAuthenticationProtocol { get; set; }

        /// <summary>
        /// PPP Authentication Protocol PAP - Default value: `false`
        /// </summary>
        [Input("pppAuthenticationProtocolPap")]
        public Input<bool>? PppAuthenticationProtocolPap { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pppAuthenticationProtocolVariable")]
        public Input<string>? PppAuthenticationProtocolVariable { get; set; }

        /// <summary>
        /// Authenticate remote on incoming call only - Choices: `callin`, `false` - Default value: `callin`
        /// </summary>
        [Input("pppAuthenticationType")]
        public Input<string>? PppAuthenticationType { get; set; }

        [Input("pvcs")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePvcArgs>? _pvcs;

        /// <summary>
        /// pvc
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePvcArgs> Pvcs
        {
            get => _pvcs ?? (_pvcs = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePvcArgs>());
            set => _pvcs = value;
        }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<int>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<int>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Periodic timer for adaptive QoS in minutes - Range: `1`-`720` - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Name of QoS map
        /// </summary>
        [Input("qosMap")]
        public Input<string>? QosMap { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVariable")]
        public Input<string>? QosMapVariable { get; set; }

        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        [Input("qosMapVpn")]
        public Input<string>? QosMapVpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVpnVariable")]
        public Input<string>? QosMapVpnVariable { get; set; }

        /// <summary>
        /// Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
        /// </summary>
        [Input("secondaryRegion")]
        public Input<string>? SecondaryRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryRegionVariable")]
        public Input<string>? SecondaryRegionVariable { get; set; }

        /// <summary>
        /// 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
        /// </summary>
        [Input("shapingRate")]
        public Input<int>? ShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shapingRateVariable")]
        public Input<string>? ShapingRateVariable { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny Https - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        /// <summary>
        /// Allow Control Connection - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceControlConnections")]
        public Input<bool>? TunnelInterfaceControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceControlConnectionsVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        [Input("tunnelInterfaceGroups")]
        private InputList<int>? _tunnelInterfaceGroups;

        /// <summary>
        /// List of groups
        /// </summary>
        public InputList<int> TunnelInterfaceGroups
        {
            get => _tunnelInterfaceGroups ?? (_tunnelInterfaceGroups = new InputList<int>());
            set => _tunnelInterfaceGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Set the maximum number of control connections for this TLOC - Range: `0`-`8`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode - Choices: `spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        [Input("vdslConfigurations")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgs>? _vdslConfigurations;

        /// <summary>
        /// vdsl
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgs> VdslConfigurations
        {
            get => _vdslConfigurations ?? (_vdslConfigurations = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationArgs>());
            set => _vdslConfigurations = value;
        }

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Input("writeRule")]
        public Input<string>? WriteRule { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("writeRuleVariable")]
        public Input<string>? WriteRuleVariable { get; set; }

        public VpnInterfaceDslPppoaFeatureTemplateArgs()
        {
        }
        public static new VpnInterfaceDslPppoaFeatureTemplateArgs Empty => new VpnInterfaceDslPppoaFeatureTemplateArgs();
    }

    public sealed class VpnInterfaceDslPppoaFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("accessLists")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateAccessListGetArgs>? _accessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateAccessListGetArgs> AccessLists
        {
            get => _accessLists ?? (_accessLists = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateAccessListGetArgs>());
            set => _accessLists = value;
        }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("atmDescription")]
        public Input<string>? AtmDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("atmDescriptionVariable")]
        public Input<string>? AtmDescriptionVariable { get; set; }

        /// <summary>
        /// ATM Sub interface Name
        /// </summary>
        [Input("atmSubInterfaceName")]
        public Input<string>? AtmSubInterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("atmSubInterfaceNameVariable")]
        public Input<string>? AtmSubInterfaceNameVariable { get; set; }

        /// <summary>
        /// Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthDownstream")]
        public Input<int>? BandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthDownstreamVariable")]
        public Input<string>? BandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
        /// </summary>
        [Input("bandwidthUpstream")]
        public Input<int>? BandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("bandwidthUpstreamVariable")]
        public Input<string>? BandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// CHAP Hostname
        /// </summary>
        [Input("chapHostname")]
        public Input<string>? ChapHostname { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("chapHostnameVariable")]
        public Input<string>? ChapHostnameVariable { get; set; }

        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        [Input("chapPppAuthPassword")]
        public Input<string>? ChapPppAuthPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("chapPppAuthPasswordVariable")]
        public Input<string>? ChapPppAuthPasswordVariable { get; set; }

        /// <summary>
        /// Enable core region - Choices: `core`, `core-shared` - Default value: `core`
        /// </summary>
        [Input("coreRegion")]
        public Input<string>? CoreRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("coreRegionVariable")]
        public Input<string>? CoreRegionVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable core region - Default value: `false`
        /// </summary>
        [Input("enableCoreRegion")]
        public Input<bool>? EnableCoreRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableCoreRegionVariable")]
        public Input<string>? EnableCoreRegionVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;576..2000&gt;, in bytes - Range: `576`-`2000` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Network Address Translation on this interface - Default value: `false`
        /// </summary>
        [Input("nat")]
        public Input<bool>? Nat { get; set; }

        /// <summary>
        /// Block inbound ICMP error messages - Default value: `true`
        /// </summary>
        [Input("natBlockIcmpError")]
        public Input<bool>? NatBlockIcmpError { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natBlockIcmpErrorVariable")]
        public Input<string>? NatBlockIcmpErrorVariable { get; set; }

        [Input("natPortForwards")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForwardGetArgs>? _natPortForwards;

        /// <summary>
        /// Set port-forwarding rules for NAT on this interface
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForwardGetArgs> NatPortForwards
        {
            get => _natPortForwards ?? (_natPortForwards = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateNatPortForwardGetArgs>());
            set => _natPortForwards = value;
        }

        /// <summary>
        /// Set NAT refresh mode - Choices: `outbound`, `bi-directional` - Default value: `outbound`
        /// </summary>
        [Input("natRefreshMode")]
        public Input<string>? NatRefreshMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natRefreshModeVariable")]
        public Input<string>? NatRefreshModeVariable { get; set; }

        /// <summary>
        /// Respond to ping requests to NAT interface ip address from the public side - Default value: `false`
        /// </summary>
        [Input("natResponseToPing")]
        public Input<bool>? NatResponseToPing { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natResponseToPingVariable")]
        public Input<string>? NatResponseToPingVariable { get; set; }

        /// <summary>
        /// Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
        /// </summary>
        [Input("natTcpTimeout")]
        public Input<int>? NatTcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natTcpTimeoutVariable")]
        public Input<string>? NatTcpTimeoutVariable { get; set; }

        /// <summary>
        /// Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
        /// </summary>
        [Input("natUdpTimeout")]
        public Input<int>? NatUdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("natUdpTimeoutVariable")]
        public Input<string>? NatUdpTimeoutVariable { get; set; }

        /// <summary>
        /// PAP outbound Password
        /// </summary>
        [Input("papPassword")]
        public Input<bool>? PapPassword { get; set; }

        /// <summary>
        /// Specify ppp authentication Password
        /// </summary>
        [Input("papPppAuthPassword")]
        public Input<string>? PapPppAuthPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("papPppAuthPasswordVariable")]
        public Input<string>? PapPppAuthPasswordVariable { get; set; }

        /// <summary>
        /// PAP outbound Sent Username
        /// </summary>
        [Input("papUsername")]
        public Input<string>? PapUsername { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("papUsernameVariable")]
        public Input<string>? PapUsernameVariable { get; set; }

        /// <summary>
        /// Per-tunnel Qos - Default value: `false`
        /// </summary>
        [Input("perTunnelQos")]
        public Input<bool>? PerTunnelQos { get; set; }

        /// <summary>
        /// Per-tunnel QoS Aggregator - Default value: `false`
        /// </summary>
        [Input("perTunnelQosAggregator")]
        public Input<bool>? PerTunnelQosAggregator { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosAggregatorVariable")]
        public Input<string>? PerTunnelQosAggregatorVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("perTunnelQosVariable")]
        public Input<string>? PerTunnelQosVariable { get; set; }

        [Input("policers")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePolicerGetArgs>? _policers;

        /// <summary>
        /// Enable policer
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePolicerGetArgs> Policers
        {
            get => _policers ?? (_policers = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePolicerGetArgs>());
            set => _policers = value;
        }

        /// <summary>
        /// PPP Link Authentication Protocol - Choices: `chap`, `pap`
        /// </summary>
        [Input("pppAuthenticationProtocol")]
        public Input<string>? PppAuthenticationProtocol { get; set; }

        /// <summary>
        /// PPP Authentication Protocol PAP - Default value: `false`
        /// </summary>
        [Input("pppAuthenticationProtocolPap")]
        public Input<bool>? PppAuthenticationProtocolPap { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pppAuthenticationProtocolVariable")]
        public Input<string>? PppAuthenticationProtocolVariable { get; set; }

        /// <summary>
        /// Authenticate remote on incoming call only - Choices: `callin`, `false` - Default value: `callin`
        /// </summary>
        [Input("pppAuthenticationType")]
        public Input<string>? PppAuthenticationType { get; set; }

        [Input("pvcs")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePvcGetArgs>? _pvcs;

        /// <summary>
        /// pvc
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePvcGetArgs> Pvcs
        {
            get => _pvcs ?? (_pvcs = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplatePvcGetArgs>());
            set => _pvcs = value;
        }

        /// <summary>
        /// Adaptive QoS default downstream bandwidth - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstream")]
        public Input<int>? QosAdaptiveBandwidthDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthDownstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthDownstreamVariable { get; set; }

        /// <summary>
        /// Adaptive QoS default upstream bandwidth - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstream")]
        public Input<int>? QosAdaptiveBandwidthUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveBandwidthUpstreamVariable")]
        public Input<string>? QosAdaptiveBandwidthUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream max bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxDownstream")]
        public Input<int>? QosAdaptiveMaxDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxDownstreamVariable")]
        public Input<string>? QosAdaptiveMaxDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream max bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMaxUpstream")]
        public Input<int>? QosAdaptiveMaxUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMaxUpstreamVariable")]
        public Input<string>? QosAdaptiveMaxUpstreamVariable { get; set; }

        /// <summary>
        /// Downstream min bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinDownstream")]
        public Input<int>? QosAdaptiveMinDownstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinDownstreamVariable")]
        public Input<string>? QosAdaptiveMinDownstreamVariable { get; set; }

        /// <summary>
        /// Upstream min bandwidth limit - Range: `8`-`100000000`
        /// </summary>
        [Input("qosAdaptiveMinUpstream")]
        public Input<int>? QosAdaptiveMinUpstream { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptiveMinUpstreamVariable")]
        public Input<string>? QosAdaptiveMinUpstreamVariable { get; set; }

        /// <summary>
        /// Periodic timer for adaptive QoS in minutes - Range: `1`-`720` - Default value: `15`
        /// </summary>
        [Input("qosAdaptivePeriod")]
        public Input<int>? QosAdaptivePeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosAdaptivePeriodVariable")]
        public Input<string>? QosAdaptivePeriodVariable { get; set; }

        /// <summary>
        /// Name of QoS map
        /// </summary>
        [Input("qosMap")]
        public Input<string>? QosMap { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVariable")]
        public Input<string>? QosMapVariable { get; set; }

        /// <summary>
        /// Name of VPN QoS map
        /// </summary>
        [Input("qosMapVpn")]
        public Input<string>? QosMapVpn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("qosMapVpnVariable")]
        public Input<string>? QosMapVpnVariable { get; set; }

        /// <summary>
        /// Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
        /// </summary>
        [Input("secondaryRegion")]
        public Input<string>? SecondaryRegion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryRegionVariable")]
        public Input<string>? SecondaryRegionVariable { get; set; }

        /// <summary>
        /// 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
        /// </summary>
        [Input("shapingRate")]
        public Input<int>? ShapingRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shapingRateVariable")]
        public Input<string>? ShapingRateVariable { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
        /// </summary>
        [Input("tcpMss")]
        public Input<int>? TcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssVariable")]
        public Input<string>? TcpMssVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Extends a local TLOC to a remote node only for vpn 0
        /// </summary>
        [Input("tlocExtension")]
        public Input<string>? TlocExtension { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tlocExtensionVariable")]
        public Input<string>? TlocExtensionVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowAll")]
        public Input<bool>? TunnelInterfaceAllowAll { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowAllVariable")]
        public Input<string>? TunnelInterfaceAllowAllVariable { get; set; }

        /// <summary>
        /// Allow/deny BGP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowBgp")]
        public Input<bool>? TunnelInterfaceAllowBgp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowBgpVariable")]
        public Input<string>? TunnelInterfaceAllowBgpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DHCP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDhcp")]
        public Input<bool>? TunnelInterfaceAllowDhcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDhcpVariable")]
        public Input<string>? TunnelInterfaceAllowDhcpVariable { get; set; }

        /// <summary>
        /// Allow/Deny DNS - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowDns")]
        public Input<bool>? TunnelInterfaceAllowDns { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowDnsVariable")]
        public Input<string>? TunnelInterfaceAllowDnsVariable { get; set; }

        /// <summary>
        /// Allow/Deny Https - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowHttps")]
        public Input<bool>? TunnelInterfaceAllowHttps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowHttpsVariable")]
        public Input<string>? TunnelInterfaceAllowHttpsVariable { get; set; }

        /// <summary>
        /// Allow/Deny ICMP - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceAllowIcmp")]
        public Input<bool>? TunnelInterfaceAllowIcmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowIcmpVariable")]
        public Input<string>? TunnelInterfaceAllowIcmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny NETCONF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNetconf")]
        public Input<bool>? TunnelInterfaceAllowNetconf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNetconfVariable")]
        public Input<string>? TunnelInterfaceAllowNetconfVariable { get; set; }

        /// <summary>
        /// Allow/Deny NTP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowNtp")]
        public Input<bool>? TunnelInterfaceAllowNtp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowNtpVariable")]
        public Input<string>? TunnelInterfaceAllowNtpVariable { get; set; }

        /// <summary>
        /// Allow/Deny OSPF - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowOspf")]
        public Input<bool>? TunnelInterfaceAllowOspf { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowOspfVariable")]
        public Input<string>? TunnelInterfaceAllowOspfVariable { get; set; }

        /// <summary>
        /// Allow/Deny SNMP - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSnmp")]
        public Input<bool>? TunnelInterfaceAllowSnmp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSnmpVariable")]
        public Input<string>? TunnelInterfaceAllowSnmpVariable { get; set; }

        /// <summary>
        /// Allow/Deny SSH - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowSsh")]
        public Input<bool>? TunnelInterfaceAllowSsh { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowSshVariable")]
        public Input<string>? TunnelInterfaceAllowSshVariable { get; set; }

        /// <summary>
        /// Allow/Deny STUN - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceAllowStun")]
        public Input<bool>? TunnelInterfaceAllowStun { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceAllowStunVariable")]
        public Input<string>? TunnelInterfaceAllowStunVariable { get; set; }

        /// <summary>
        /// Bind loopback tunnel interface to a physical interface
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnel")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnel { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBindLoopbackTunnelVariable")]
        public Input<string>? TunnelInterfaceBindLoopbackTunnelVariable { get; set; }

        /// <summary>
        /// Set TLOC as border TLOC - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceBorder")]
        public Input<bool>? TunnelInterfaceBorder { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceBorderVariable")]
        public Input<string>? TunnelInterfaceBorderVariable { get; set; }

        /// <summary>
        /// Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
        /// `carrier7`, `carrier8` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceCarrier")]
        public Input<string>? TunnelInterfaceCarrier { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceCarrierVariable")]
        public Input<string>? TunnelInterfaceCarrierVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceClearDontFragment")]
        public Input<bool>? TunnelInterfaceClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceClearDontFragmentVariable")]
        public Input<string>? TunnelInterfaceClearDontFragmentVariable { get; set; }

        /// <summary>
        /// Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
        /// `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
        /// `private4`, `private5`, `private6` - Default value: `default`
        /// </summary>
        [Input("tunnelInterfaceColor")]
        public Input<string>? TunnelInterfaceColor { get; set; }

        /// <summary>
        /// Restrict this TLOC behavior - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceColorRestrict")]
        public Input<bool>? TunnelInterfaceColorRestrict { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceColorVariable")]
        public Input<string>? TunnelInterfaceColorVariable { get; set; }

        /// <summary>
        /// Allow Control Connection - Default value: `true`
        /// </summary>
        [Input("tunnelInterfaceControlConnections")]
        public Input<bool>? TunnelInterfaceControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceControlConnectionsVariable { get; set; }

        [Input("tunnelInterfaceEncapsulations")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationGetArgs>? _tunnelInterfaceEncapsulations;

        /// <summary>
        /// Encapsulation for TLOC
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationGetArgs> TunnelInterfaceEncapsulations
        {
            get => _tunnelInterfaceEncapsulations ?? (_tunnelInterfaceEncapsulations = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulationGetArgs>());
            set => _tunnelInterfaceEncapsulations = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceExcludeControllerGroupListVariable")]
        public Input<string>? TunnelInterfaceExcludeControllerGroupListVariable { get; set; }

        [Input("tunnelInterfaceExcludeControllerGroupLists")]
        private InputList<int>? _tunnelInterfaceExcludeControllerGroupLists;

        /// <summary>
        /// Exclude the following controller groups defined in this list
        /// </summary>
        public InputList<int> TunnelInterfaceExcludeControllerGroupLists
        {
            get => _tunnelInterfaceExcludeControllerGroupLists ?? (_tunnelInterfaceExcludeControllerGroupLists = new InputList<int>());
            set => _tunnelInterfaceExcludeControllerGroupLists = value;
        }

        [Input("tunnelInterfaceGroups")]
        private InputList<int>? _tunnelInterfaceGroups;

        /// <summary>
        /// List of groups
        /// </summary>
        public InputList<int> TunnelInterfaceGroups
        {
            get => _tunnelInterfaceGroups ?? (_tunnelInterfaceGroups = new InputList<int>());
            set => _tunnelInterfaceGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceGroupsVariable")]
        public Input<string>? TunnelInterfaceGroupsVariable { get; set; }

        /// <summary>
        /// Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
        /// </summary>
        [Input("tunnelInterfaceHelloInterval")]
        public Input<int>? TunnelInterfaceHelloInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloIntervalVariable")]
        public Input<string>? TunnelInterfaceHelloIntervalVariable { get; set; }

        /// <summary>
        /// Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
        /// </summary>
        [Input("tunnelInterfaceHelloTolerance")]
        public Input<int>? TunnelInterfaceHelloTolerance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceHelloToleranceVariable")]
        public Input<string>? TunnelInterfaceHelloToleranceVariable { get; set; }

        /// <summary>
        /// Set TLOC as last resort - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuit")]
        public Input<bool>? TunnelInterfaceLastResortCircuit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLastResortCircuitVariable")]
        public Input<string>? TunnelInterfaceLastResortCircuitVariable { get; set; }

        /// <summary>
        /// Set the interface as a low-bandwidth circuit - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLink")]
        public Input<bool>? TunnelInterfaceLowBandwidthLink { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceLowBandwidthLinkVariable")]
        public Input<string>? TunnelInterfaceLowBandwidthLinkVariable { get; set; }

        /// <summary>
        /// Set the maximum number of control connections for this TLOC - Range: `0`-`8`
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnections")]
        public Input<int>? TunnelInterfaceMaxControlConnections { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceMaxControlConnectionsVariable")]
        public Input<string>? TunnelInterfaceMaxControlConnectionsVariable { get; set; }

        /// <summary>
        /// Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceNatRefreshInterval")]
        public Input<int>? TunnelInterfaceNatRefreshInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNatRefreshIntervalVariable")]
        public Input<string>? TunnelInterfaceNatRefreshIntervalVariable { get; set; }

        /// <summary>
        /// Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcast")]
        public Input<bool>? TunnelInterfaceNetworkBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceNetworkBroadcastVariable")]
        public Input<string>? TunnelInterfaceNetworkBroadcastVariable { get; set; }

        /// <summary>
        /// Disallow port hopping on the tunnel interface - Default value: `true`
        /// </summary>
        [Input("tunnelInterfacePortHop")]
        public Input<bool>? TunnelInterfacePortHop { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfacePortHopVariable")]
        public Input<string>? TunnelInterfacePortHopVariable { get; set; }

        /// <summary>
        /// Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMss")]
        public Input<int>? TunnelInterfaceTunnelTcpMss { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceTunnelTcpMssVariable")]
        public Input<string>? TunnelInterfaceTunnelTcpMssVariable { get; set; }

        /// <summary>
        /// Put this wan interface in STUN mode only - Default value: `false`
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServer")]
        public Input<bool>? TunnelInterfaceVbondAsStunServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVbondAsStunServerVariable")]
        public Input<string>? TunnelInterfaceVbondAsStunServerVariable { get; set; }

        /// <summary>
        /// Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreference")]
        public Input<int>? TunnelInterfaceVmanageConnectionPreference { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelInterfaceVmanageConnectionPreferenceVariable")]
        public Input<string>? TunnelInterfaceVmanageConnectionPreferenceVariable { get; set; }

        /// <summary>
        /// Set tunnel QoS mode - Choices: `spoke`
        /// </summary>
        [Input("tunnelQosMode")]
        public Input<string>? TunnelQosMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelQosModeVariable")]
        public Input<string>? TunnelQosModeVariable { get; set; }

        [Input("vdslConfigurations")]
        private InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationGetArgs>? _vdslConfigurations;

        /// <summary>
        /// vdsl
        /// </summary>
        public InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationGetArgs> VdslConfigurations
        {
            get => _vdslConfigurations ?? (_vdslConfigurations = new InputList<Inputs.VpnInterfaceDslPppoaFeatureTemplateVdslConfigurationGetArgs>());
            set => _vdslConfigurations = value;
        }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Input("writeRule")]
        public Input<string>? WriteRule { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("writeRuleVariable")]
        public Input<string>? WriteRuleVariable { get; set; }

        public VpnInterfaceDslPppoaFeatureTemplateState()
        {
        }
        public static new VpnInterfaceDslPppoaFeatureTemplateState Empty => new VpnInterfaceDslPppoaFeatureTemplateState();
    }
}
