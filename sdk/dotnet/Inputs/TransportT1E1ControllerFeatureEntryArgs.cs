// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Inputs
{

    public sealed class TransportT1E1ControllerFeatureEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cable Config
        ///   - Choices: `Short`, `Long`
        /// </summary>
        [Input("cableLength")]
        public Input<string>? CableLength { get; set; }

        [Input("channelGroups")]
        private InputList<Inputs.TransportT1E1ControllerFeatureEntryChannelGroupArgs>? _channelGroups;

        /// <summary>
        /// Channel Group List
        /// </summary>
        public InputList<Inputs.TransportT1E1ControllerFeatureEntryChannelGroupArgs> ChannelGroups
        {
            get => _channelGroups ?? (_channelGroups = new InputList<Inputs.TransportT1E1ControllerFeatureEntryChannelGroupArgs>());
            set => _channelGroups = value;
        }

        /// <summary>
        /// Clock Source
        ///   - Choices: `Line`, `Internal`, `loop-timed`, `Network`
        /// </summary>
        [Input("clockSource")]
        public Input<string>? ClockSource { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("descriptionVariable")]
        public Input<string>? DescriptionVariable { get; set; }

        /// <summary>
        /// Card Type
        ///   - Choices: `E1`
        /// </summary>
        [Input("e1Description")]
        public Input<string>? E1Description { get; set; }

        /// <summary>
        /// Framing
        ///   - Choices: `Crc4`, `no-crc4`
        /// </summary>
        [Input("e1Framing")]
        public Input<string>? E1Framing { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("e1FramingVariable")]
        public Input<string>? E1FramingVariable { get; set; }

        /// <summary>
        /// LineCode
        ///   - Choices: `Ami`, `Hdb3`
        /// </summary>
        [Input("e1Linecode")]
        public Input<string>? E1Linecode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("e1LinecodeVariable")]
        public Input<string>? E1LinecodeVariable { get; set; }

        /// <summary>
        /// length, Attribute conditional on `CableLength` being equal to `Long`
        ///   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
        /// </summary>
        [Input("lengthLong")]
        public Input<string>? LengthLong { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `CableLength` being equal to `Long`
        /// </summary>
        [Input("lengthLongVariable")]
        public Input<string>? LengthLongVariable { get; set; }

        /// <summary>
        /// length, Attribute conditional on `CableLength` being equal to `Short`
        ///   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
        /// </summary>
        [Input("lengthShort")]
        public Input<string>? LengthShort { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `CableLength` being equal to `Short`
        /// </summary>
        [Input("lengthShortVariable")]
        public Input<string>? LengthShortVariable { get; set; }

        /// <summary>
        /// Line Mode
        ///   - Choices: `Secondary`, `Primary`
        /// </summary>
        [Input("lineMode")]
        public Input<string>? LineMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("lineModeVariable")]
        public Input<string>? LineModeVariable { get; set; }

        /// <summary>
        /// Card Type
        ///   - Choices: `T1`
        /// </summary>
        [Input("t1Description")]
        public Input<string>? T1Description { get; set; }

        /// <summary>
        /// Framing
        ///   - Choices: `Esf`, `Sf`
        /// </summary>
        [Input("t1Framing")]
        public Input<string>? T1Framing { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("t1FramingVariable")]
        public Input<string>? T1FramingVariable { get; set; }

        /// <summary>
        /// LineCode
        ///   - Choices: `Ami`, `B8zs`
        /// </summary>
        [Input("t1Linecode")]
        public Input<string>? T1Linecode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("t1LinecodeVariable")]
        public Input<string>? T1LinecodeVariable { get; set; }

        public TransportT1E1ControllerFeatureEntryArgs()
        {
        }
        public static new TransportT1E1ControllerFeatureEntryArgs Empty => new TransportT1E1ControllerFeatureEntryArgs();
    }
}
