// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Inputs
{

    public sealed class TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DSCP, Attribute conditional on `type` being equal to `dscp`
        ///   - Range: `0`-`63`
        /// </summary>
        [Input("dscp")]
        public Input<int>? Dscp { get; set; }

        /// <summary>
        /// Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
        /// </summary>
        [Input("forwardingClass")]
        public Input<string>? ForwardingClass { get; set; }

        /// <summary>
        /// Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
        /// </summary>
        [Input("localTlocListColor")]
        public Input<string>? LocalTlocListColor { get; set; }

        /// <summary>
        /// Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
        ///   - Choices: `ipsec`, `gre`, `ipsec gre`
        /// </summary>
        [Input("localTlocListEncap")]
        public Input<string>? LocalTlocListEncap { get; set; }

        /// <summary>
        /// Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
        /// </summary>
        [Input("localTlocListRestrict")]
        public Input<bool>? LocalTlocListRestrict { get; set; }

        /// <summary>
        /// Next hop IP, Attribute conditional on `type` being equal to `nextHop`
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
        /// </summary>
        [Input("nextHopLoose")]
        public Input<bool>? NextHopLoose { get; set; }

        /// <summary>
        /// Policer list ID, Attribute conditional on `type` being equal to `policer`
        /// </summary>
        [Input("policerListId")]
        public Input<string>? PolicerListId { get; set; }

        /// <summary>
        /// Policer list version
        /// </summary>
        [Input("policerListVersion")]
        public Input<int>? PolicerListVersion { get; set; }

        /// <summary>
        /// Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
        /// </summary>
        [Input("preferredColorGroupList")]
        public Input<string>? PreferredColorGroupList { get; set; }

        /// <summary>
        /// Preferred color group list version
        /// </summary>
        [Input("preferredColorGroupListVersion")]
        public Input<int>? PreferredColorGroupListVersion { get; set; }

        /// <summary>
        /// Service TLOC color, Attribute conditional on `type` being equal to `service`
        /// </summary>
        [Input("serviceTlocColor")]
        public Input<string>? ServiceTlocColor { get; set; }

        /// <summary>
        /// Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
        ///   - Choices: `ipsec`, `gre`, `ipsec gre`
        /// </summary>
        [Input("serviceTlocEncapsulation")]
        public Input<string>? ServiceTlocEncapsulation { get; set; }

        /// <summary>
        /// Service TLOC IP address, Attribute conditional on `type` being equal to `service`
        /// </summary>
        [Input("serviceTlocIp")]
        public Input<string>? ServiceTlocIp { get; set; }

        /// <summary>
        /// Service TLOC list ID, Attribute conditional on `type` being equal to `service`
        /// </summary>
        [Input("serviceTlocListId")]
        public Input<string>? ServiceTlocListId { get; set; }

        /// <summary>
        /// Service TLOC list version
        /// </summary>
        [Input("serviceTlocListVersion")]
        public Input<int>? ServiceTlocListVersion { get; set; }

        /// <summary>
        /// Service TLOC Local, Attribute conditional on `type` being equal to `service`
        /// </summary>
        [Input("serviceTlocLocal")]
        public Input<bool>? ServiceTlocLocal { get; set; }

        /// <summary>
        /// Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
        /// </summary>
        [Input("serviceTlocRestrict")]
        public Input<bool>? ServiceTlocRestrict { get; set; }

        /// <summary>
        /// Service type, Attribute conditional on `type` being equal to `service`
        ///   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
        /// </summary>
        [Input("serviceType")]
        public Input<string>? ServiceType { get; set; }

        /// <summary>
        /// Service VPN ID, Attribute conditional on `type` being equal to `service`
        ///   - Range: `0`-`65536`
        /// </summary>
        [Input("serviceVpnId")]
        public Input<int>? ServiceVpnId { get; set; }

        /// <summary>
        /// TLOC color, Attribute conditional on `type` being equal to `tloc`
        /// </summary>
        [Input("tlocColor")]
        public Input<string>? TlocColor { get; set; }

        /// <summary>
        /// TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
        ///   - Choices: `ipsec`, `gre`, `ipsec gre`
        /// </summary>
        [Input("tlocEncapsulation")]
        public Input<string>? TlocEncapsulation { get; set; }

        /// <summary>
        /// TLOC IP address, Attribute conditional on `type` being equal to `tloc`
        /// </summary>
        [Input("tlocIp")]
        public Input<string>? TlocIp { get; set; }

        /// <summary>
        /// TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
        /// </summary>
        [Input("tlocListId")]
        public Input<string>? TlocListId { get; set; }

        /// <summary>
        /// TLOC list version
        /// </summary>
        [Input("tlocListVersion")]
        public Input<int>? TlocListVersion { get; set; }

        /// <summary>
        /// Type of set parameter
        ///   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// DSCP, Attribute conditional on `type` being equal to `vpn`
        ///   - Range: `0`-`65530`
        /// </summary>
        [Input("vpnId")]
        public Input<int>? VpnId { get; set; }

        public TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs()
        {
        }
        public static new TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs Empty => new TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs();
    }
}
