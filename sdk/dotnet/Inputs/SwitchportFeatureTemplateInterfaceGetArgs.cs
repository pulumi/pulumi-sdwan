// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Inputs
{

    public sealed class SwitchportFeatureTemplateInterfaceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xAuthenticationOrderVariable")]
        public Input<string>? Dot1xAuthenticationOrderVariable { get; set; }

        [Input("dot1xAuthenticationOrders")]
        private InputList<string>? _dot1xAuthenticationOrders;

        /// <summary>
        /// Specify authentication methods in the order of preference
        /// </summary>
        public InputList<string> Dot1xAuthenticationOrders
        {
            get => _dot1xAuthenticationOrders ?? (_dot1xAuthenticationOrders = new InputList<string>());
            set => _dot1xAuthenticationOrders = value;
        }

        /// <summary>
        /// Set uni or bi directional authorization mode
        ///   - Choices: `Both`, `In`
        ///   - Default value: `Both`
        /// </summary>
        [Input("dot1xControlDirection")]
        public Input<string>? Dot1xControlDirection { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xControlDirectionVariable")]
        public Input<string>? Dot1xControlDirectionVariable { get; set; }

        /// <summary>
        /// Set Critical VLAN
        ///   - Range: `1`-`4094`
        /// </summary>
        [Input("dot1xCriticalVlan")]
        public Input<int>? Dot1xCriticalVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xCriticalVlanVariable")]
        public Input<string>? Dot1xCriticalVlanVariable { get; set; }

        /// <summary>
        /// Set 802.1x on off
        ///   - Default value: `True`
        /// </summary>
        [Input("dot1xEnable")]
        public Input<bool>? Dot1xEnable { get; set; }

        /// <summary>
        /// Enable Critical Voice VLAN
        ///   - Default value: `False`
        /// </summary>
        [Input("dot1xEnableCriticialVoiceVlan")]
        public Input<bool>? Dot1xEnableCriticialVoiceVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xEnableCriticialVoiceVlanVariable")]
        public Input<string>? Dot1xEnableCriticialVoiceVlanVariable { get; set; }

        /// <summary>
        /// Enable Periodic Reauthentication
        ///   - Default value: `False`
        /// </summary>
        [Input("dot1xEnablePeriodicReauth")]
        public Input<bool>? Dot1xEnablePeriodicReauth { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xEnablePeriodicReauthVariable")]
        public Input<string>? Dot1xEnablePeriodicReauthVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xEnableVariable")]
        public Input<string>? Dot1xEnableVariable { get; set; }

        /// <summary>
        /// Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
        ///   - Range: `1`-`4094`
        /// </summary>
        [Input("dot1xGuestVlan")]
        public Input<int>? Dot1xGuestVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xGuestVlanVariable")]
        public Input<string>? Dot1xGuestVlanVariable { get; set; }

        /// <summary>
        /// Set host mode
        ///   - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
        ///   - Default value: `single-host`
        /// </summary>
        [Input("dot1xHostMode")]
        public Input<string>? Dot1xHostMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xHostModeVariable")]
        public Input<string>? Dot1xHostModeVariable { get; set; }

        /// <summary>
        /// MAC Authentication Bypass
        ///   - Default value: `False`
        /// </summary>
        [Input("dot1xMacAuthenticationBypass")]
        public Input<bool>? Dot1xMacAuthenticationBypass { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xMacAuthenticationBypassVariable")]
        public Input<string>? Dot1xMacAuthenticationBypassVariable { get; set; }

        /// <summary>
        /// Set 802.1x Interface Pae Type
        ///   - Default value: `True`
        /// </summary>
        [Input("dot1xPaeEnable")]
        public Input<bool>? Dot1xPaeEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xPaeEnableVariable")]
        public Input<string>? Dot1xPaeEnableVariable { get; set; }

        /// <summary>
        /// Periodic Reauthentication Inactivity Timeout (in seconds)
        ///   - Range: `1`-`1440`
        ///   - Default value: `60`
        /// </summary>
        [Input("dot1xPeriodicReauthInactivityTimeout")]
        public Input<int>? Dot1xPeriodicReauthInactivityTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xPeriodicReauthInactivityTimeoutVariable")]
        public Input<string>? Dot1xPeriodicReauthInactivityTimeoutVariable { get; set; }

        /// <summary>
        /// Periodic Reauthentication Interval (in seconds)
        ///   - Range: `0`-`1440`
        ///   - Default value: `0`
        /// </summary>
        [Input("dot1xPeriodicReauthInterval")]
        public Input<int>? Dot1xPeriodicReauthInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xPeriodicReauthIntervalVariable")]
        public Input<string>? Dot1xPeriodicReauthIntervalVariable { get; set; }

        /// <summary>
        /// Set Port-Control Mode
        ///   - Choices: `Auto`, `force-unauthorized`, `force-authorized`
        ///   - Default value: `Auto`
        /// </summary>
        [Input("dot1xPortControl")]
        public Input<string>? Dot1xPortControl { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xPortControlVariable")]
        public Input<string>? Dot1xPortControlVariable { get; set; }

        /// <summary>
        /// Set Restricted VLAN ID
        ///   - Range: `1`-`4094`
        /// </summary>
        [Input("dot1xRestrictedVlan")]
        public Input<int>? Dot1xRestrictedVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("dot1xRestrictedVlanVariable")]
        public Input<string>? Dot1xRestrictedVlanVariable { get; set; }

        /// <summary>
        /// Duplex mode
        ///   - Choices: `Full`, `Half`
        /// </summary>
        [Input("duplex")]
        public Input<string>? Duplex { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("duplexVariable")]
        public Input<string>? DuplexVariable { get; set; }

        /// <summary>
        /// Set Interface name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nameVariable")]
        public Input<string>? NameVariable { get; set; }

        /// <summary>
        /// Indicates if list item is considered optional.
        /// </summary>
        [Input("optional")]
        public Input<bool>? Optional { get; set; }

        /// <summary>
        /// Administrative state
        ///   - Default value: `True`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// Set interface speed
        ///   - Choices: `10`, `100`, `1000`, `2500`, `10000`
        /// </summary>
        [Input("speed")]
        public Input<string>? Speed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speedVariable")]
        public Input<string>? SpeedVariable { get; set; }

        /// <summary>
        /// Set VLAN identifier associated with bridging domain
        ///   - Range: `1`-`4094`
        /// </summary>
        [Input("switchportAccessVlan")]
        public Input<int>? SwitchportAccessVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("switchportAccessVlanVariable")]
        public Input<string>? SwitchportAccessVlanVariable { get; set; }

        /// <summary>
        /// Set type of switch port: access/trunk
        ///   - Choices: `Access`, `Trunk`
        /// </summary>
        [Input("switchportMode")]
        public Input<string>? SwitchportMode { get; set; }

        /// <summary>
        /// Configure VLAN IDs used with the trunk
        /// </summary>
        [Input("switchportTrunkAllowedVlans")]
        public Input<string>? SwitchportTrunkAllowedVlans { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("switchportTrunkAllowedVlansVariable")]
        public Input<string>? SwitchportTrunkAllowedVlansVariable { get; set; }

        /// <summary>
        /// Configure VLAN ID used for native VLAN
        ///   - Range: `1`-`4094`
        /// </summary>
        [Input("switchportTrunkNativeVlan")]
        public Input<int>? SwitchportTrunkNativeVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("switchportTrunkNativeVlanVariable")]
        public Input<string>? SwitchportTrunkNativeVlanVariable { get; set; }

        /// <summary>
        /// Configure Voice Vlan
        ///   - Range: `1`-`4094`
        /// </summary>
        [Input("voiceVlan")]
        public Input<int>? VoiceVlan { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("voiceVlanVariable")]
        public Input<string>? VoiceVlanVariable { get; set; }

        public SwitchportFeatureTemplateInterfaceGetArgs()
        {
        }
        public static new SwitchportFeatureTemplateInterfaceGetArgs Empty => new SwitchportFeatureTemplateInterfaceGetArgs();
    }
}
