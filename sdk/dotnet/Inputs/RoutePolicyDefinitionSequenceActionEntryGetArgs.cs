// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Inputs
{

    public sealed class RoutePolicyDefinitionSequenceActionEntryGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Aggregator, Attribute conditional on `Type` being equal to `Aggregator`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        [Input("aggregator")]
        public Input<int>? Aggregator { get; set; }

        /// <summary>
        /// IP address, Attribute conditional on `Type` being equal to `Aggregator`
        /// </summary>
        [Input("aggregatorIpAddress")]
        public Input<string>? AggregatorIpAddress { get; set; }

        /// <summary>
        /// Space separated list of ASN to exclude, Attribute conditional on `Type` being equal to `asPath`
        /// </summary>
        [Input("asPathExclude")]
        public Input<string>? AsPathExclude { get; set; }

        /// <summary>
        /// Space separated list of ASN to prepend, Attribute conditional on `Type` being equal to `asPath`
        /// </summary>
        [Input("asPathPrepend")]
        public Input<string>? AsPathPrepend { get; set; }

        /// <summary>
        /// Atomic aggregate, Attribute conditional on `Type` being equal to `atomicAggregate`
        /// </summary>
        [Input("atomicAggregate")]
        public Input<bool>? AtomicAggregate { get; set; }

        /// <summary>
        /// Community value, e.g. `1000:10000` or `Internet` or `local-AS`, Attribute conditional on `Type` being equal to `Community`
        /// </summary>
        [Input("community")]
        public Input<string>? Community { get; set; }

        /// <summary>
        /// Community additive, Attribute conditional on `Type` being equal to `communityAdditive`
        /// </summary>
        [Input("communityAdditive")]
        public Input<bool>? CommunityAdditive { get; set; }

        /// <summary>
        /// Community variable, Attribute conditional on `Type` being equal to `Community`
        /// </summary>
        [Input("communityVariable")]
        public Input<string>? CommunityVariable { get; set; }

        /// <summary>
        /// Local preference, Attribute conditional on `Type` being equal to `localPreference`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        [Input("localPreference")]
        public Input<int>? LocalPreference { get; set; }

        /// <summary>
        /// Metric, Attribute conditional on `Type` being equal to `Metric`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        [Input("metric")]
        public Input<int>? Metric { get; set; }

        /// <summary>
        /// Metric type, Attribute conditional on `Type` being equal to `metricType`
        ///   - Choices: `Type1`, `Type2`
        /// </summary>
        [Input("metricType")]
        public Input<string>? MetricType { get; set; }

        /// <summary>
        /// Next hop IP, Attribute conditional on `Type` being equal to `nextHop`
        /// </summary>
        [Input("nextHop")]
        public Input<string>? NextHop { get; set; }

        /// <summary>
        /// OMP tag, Attribute conditional on `Type` being equal to `ompTag`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        [Input("ompTag")]
        public Input<int>? OmpTag { get; set; }

        /// <summary>
        /// Origin, Attribute conditional on `Type` being equal to `Origin`
        ///   - Choices: `Igp`, `Egp`, `Incomplete`
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// Originator IP, Attribute conditional on `Type` being equal to `Originator`
        /// </summary>
        [Input("originator")]
        public Input<string>? Originator { get; set; }

        /// <summary>
        /// OSPF tag, Attribute conditional on `Type` being equal to `ospfTag`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        [Input("ospfTag")]
        public Input<int>? OspfTag { get; set; }

        /// <summary>
        /// Type of action entry
        ///   - Choices: `Aggregator`, `asPath`, `atomicAggregate`, `Community`, `communityAdditive`, `localPreference`, `Metric`, `Weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `Origin`, `Originator`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Weight, Attribute conditional on `Type` being equal to `Weight`
        ///   - Range: `0`-`4294967295`
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public RoutePolicyDefinitionSequenceActionEntryGetArgs()
        {
        }
        public static new RoutePolicyDefinitionSequenceActionEntryGetArgs Empty => new RoutePolicyDefinitionSequenceActionEntryGetArgs();
    }
}
