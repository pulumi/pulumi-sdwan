// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan.Inputs
{

    public sealed class TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `disable-peer`
        ///   - Range: `1`-`4294967295`
        /// </summary>
        [Input("disablePeerMaxNumberOfPrefixes")]
        public Input<int>? DisablePeerMaxNumberOfPrefixes { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        /// </summary>
        [Input("disablePeerMaxNumberOfPrefixesVariable")]
        public Input<string>? DisablePeerMaxNumberOfPrefixesVariable { get; set; }

        /// <summary>
        /// Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `disable-peer`
        ///   - Range: `1`-`100`
        ///   - Default value: `75`
        /// </summary>
        [Input("disablePeerThreshold")]
        public Input<int>? DisablePeerThreshold { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `disable-peer`
        /// </summary>
        [Input("disablePeerThresholdVariable")]
        public Input<string>? DisablePeerThresholdVariable { get; set; }

        /// <summary>
        /// Set IPv4 unicast address family
        ///   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
        /// </summary>
        [Input("familyType")]
        public Input<string>? FamilyType { get; set; }

        [Input("inRoutePolicyId")]
        public Input<string>? InRoutePolicyId { get; set; }

        [Input("outRoutePolicyId")]
        public Input<string>? OutRoutePolicyId { get; set; }

        /// <summary>
        /// Neighbor received maximum prefix policy is disabled.
        ///   - Choices: `restart`, `off`, `warning-only`, `disable-peer`
        /// </summary>
        [Input("policyType")]
        public Input<string>? PolicyType { get; set; }

        /// <summary>
        /// Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded, Attribute conditional on `policy_type` being equal to `restart`
        ///   - Range: `1`-`65535`
        /// </summary>
        [Input("restartInterval")]
        public Input<int>? RestartInterval { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `restart`
        /// </summary>
        [Input("restartIntervalVariable")]
        public Input<string>? RestartIntervalVariable { get; set; }

        /// <summary>
        /// Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `restart`
        ///   - Range: `1`-`4294967295`
        /// </summary>
        [Input("restartMaxNumberOfPrefixes")]
        public Input<int>? RestartMaxNumberOfPrefixes { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `restart`
        /// </summary>
        [Input("restartMaxNumberOfPrefixesVariable")]
        public Input<string>? RestartMaxNumberOfPrefixesVariable { get; set; }

        /// <summary>
        /// Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `restart`
        ///   - Range: `1`-`100`
        ///   - Default value: `75`
        /// </summary>
        [Input("restartThreshold")]
        public Input<int>? RestartThreshold { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `restart`
        /// </summary>
        [Input("restartThresholdVariable")]
        public Input<string>? RestartThresholdVariable { get; set; }

        /// <summary>
        /// Set maximum number of prefixes accepted from BGP peer, Attribute conditional on `policy_type` being equal to `warning-only`
        ///   - Range: `1`-`4294967295`
        /// </summary>
        [Input("warningMessageMaxNumberOfPrefixes")]
        public Input<int>? WarningMessageMaxNumberOfPrefixes { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        /// </summary>
        [Input("warningMessageMaxNumberOfPrefixesVariable")]
        public Input<string>? WarningMessageMaxNumberOfPrefixesVariable { get; set; }

        /// <summary>
        /// Set threshold(1 to 100) at which to generate a warning message, Attribute conditional on `policy_type` being equal to `warning-only`
        ///   - Range: `1`-`100`
        ///   - Default value: `75`
        /// </summary>
        [Input("warningMessageThreshold")]
        public Input<int>? WarningMessageThreshold { get; set; }

        /// <summary>
        /// Variable name, Attribute conditional on `policy_type` being equal to `warning-only`
        /// </summary>
        [Input("warningMessageThresholdVariable")]
        public Input<string>? WarningMessageThresholdVariable { get; set; }

        public TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs()
        {
        }
        public static new TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs Empty => new TransportRoutingBgpFeatureIpv4NeighborAddressFamilyArgs();
    }
}
