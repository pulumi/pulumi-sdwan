// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a VPN Interface SVI feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/vpnInterfaceSviFeatureTemplate:VpnInterfaceSviFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/vpnInterfaceSviFeatureTemplate:VpnInterfaceSviFeatureTemplate")]
    public partial class VpnInterfaceSviFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2678400`
        ///   - Default value: `1200`
        /// </summary>
        [Output("arpTimeout")]
        public Output<int?> ArpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("arpTimeoutVariable")]
        public Output<string?> ArpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Interface name: VLAN 1 - VLAN 4094 when present
        /// </summary>
        [Output("ifName")]
        public Output<string?> IfName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ifNameVariable")]
        public Output<string?> IfNameVariable { get; private set; } = null!;

        /// <summary>
        /// Interface description
        /// </summary>
        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `false`
        /// </summary>
        [Output("ipDirectedBroadcast")]
        public Output<bool?> IpDirectedBroadcast { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipDirectedBroadcastVariable")]
        public Output<string?> IpDirectedBroadcastVariable { get; private set; } = null!;

        /// <summary>
        /// IP MTU &lt;576..Interface MTU&gt;, in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// Apply ACL
        /// </summary>
        [Output("ipv4AccessLists")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv4AccessList>> Ipv4AccessLists { get; private set; } = null!;

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4AddressVariable")]
        public Output<string?> Ipv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv4DhcpHelperVariable")]
        public Output<string?> Ipv4DhcpHelperVariable { get; private set; } = null!;

        /// <summary>
        /// List of DHCP helper addresses
        /// </summary>
        [Output("ipv4DhcpHelpers")]
        public Output<ImmutableArray<string>> Ipv4DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        [Output("ipv4SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress>> Ipv4SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        [Output("ipv4Vrrps")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv4Vrrp>> Ipv4Vrrps { get; private set; } = null!;

        /// <summary>
        /// Apply ACL
        /// </summary>
        [Output("ipv6AccessLists")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv6AccessList>> Ipv6AccessLists { get; private set; } = null!;

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Output("ipv6Address")]
        public Output<string?> Ipv6Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6AddressVariable")]
        public Output<string?> Ipv6AddressVariable { get; private set; } = null!;

        /// <summary>
        /// Enable DHCPv6
        ///   - Default value: `false`
        /// </summary>
        [Output("ipv6DhcpClient")]
        public Output<bool?> Ipv6DhcpClient { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6DhcpClientVariable")]
        public Output<string?> Ipv6DhcpClientVariable { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for DHCP default route
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Output("ipv6DhcpDistance")]
        public Output<int?> Ipv6DhcpDistance { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6DhcpDistanceVariable")]
        public Output<string?> Ipv6DhcpDistanceVariable { get; private set; } = null!;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        [Output("ipv6DhcpHelpers")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelper>> Ipv6DhcpHelpers { get; private set; } = null!;

        /// <summary>
        /// Enable DHCPv6 rapid commit
        ///   - Default value: `false`
        /// </summary>
        [Output("ipv6DhcpRapidCommit")]
        public Output<bool?> Ipv6DhcpRapidCommit { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipv6DhcpRapidCommitVariable")]
        public Output<string?> Ipv6DhcpRapidCommitVariable { get; private set; } = null!;

        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        [Output("ipv6SecondaryAddresses")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress>> Ipv6SecondaryAddresses { get; private set; } = null!;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        [Output("ipv6Vrrps")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateIpv6Vrrp>> Ipv6Vrrps { get; private set; } = null!;

        /// <summary>
        /// Interface MTU &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mtuVariable")]
        public Output<string?> MtuVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable policer
        /// </summary>
        [Output("policers")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplatePolicer>> Policers { get; private set; } = null!;

        /// <summary>
        /// Administrative state
        ///   - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        [Output("staticArpEntries")]
        public Output<ImmutableArray<Outputs.VpnInterfaceSviFeatureTemplateStaticArpEntry>> StaticArpEntries { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `552`-`1960`
        /// </summary>
        [Output("tcpMssAdjust")]
        public Output<int?> TcpMssAdjust { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssAdjustVariable")]
        public Output<string?> TcpMssAdjustVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a VpnInterfaceSviFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpnInterfaceSviFeatureTemplate(string name, VpnInterfaceSviFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/vpnInterfaceSviFeatureTemplate:VpnInterfaceSviFeatureTemplate", name, args ?? new VpnInterfaceSviFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpnInterfaceSviFeatureTemplate(string name, Input<string> id, VpnInterfaceSviFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/vpnInterfaceSviFeatureTemplate:VpnInterfaceSviFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpnInterfaceSviFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpnInterfaceSviFeatureTemplate Get(string name, Input<string> id, VpnInterfaceSviFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new VpnInterfaceSviFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class VpnInterfaceSviFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2678400`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Interface name: VLAN 1 - VLAN 4094 when present
        /// </summary>
        [Input("ifName")]
        public Input<string>? IfName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ifNameVariable")]
        public Input<string>? IfNameVariable { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU &lt;576..Interface MTU&gt;, in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        [Input("ipv4AccessLists")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4AccessListArgs>? _ipv4AccessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4AccessListArgs> Ipv4AccessLists
        {
            get => _ipv4AccessLists ?? (_ipv4AccessLists = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4AccessListArgs>());
            set => _ipv4AccessLists = value;
        }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP helper addresses
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        [Input("ipv4Vrrps")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4VrrpArgs>? _ipv4Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4VrrpArgs> Ipv4Vrrps
        {
            get => _ipv4Vrrps ?? (_ipv4Vrrps = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4VrrpArgs>());
            set => _ipv4Vrrps = value;
        }

        [Input("ipv6AccessLists")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6AccessListArgs>? _ipv6AccessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6AccessListArgs> Ipv6AccessLists
        {
            get => _ipv6AccessLists ?? (_ipv6AccessLists = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6AccessListArgs>());
            set => _ipv6AccessLists = value;
        }

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6
        ///   - Default value: `false`
        /// </summary>
        [Input("ipv6DhcpClient")]
        public Input<bool>? Ipv6DhcpClient { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6DhcpClientVariable")]
        public Input<string>? Ipv6DhcpClientVariable { get; set; }

        /// <summary>
        /// Set administrative distance for DHCP default route
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("ipv6DhcpDistance")]
        public Input<int>? Ipv6DhcpDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6DhcpDistanceVariable")]
        public Input<string>? Ipv6DhcpDistanceVariable { get; set; }

        [Input("ipv6DhcpHelpers")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgs>? _ipv6DhcpHelpers;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgs> Ipv6DhcpHelpers
        {
            get => _ipv6DhcpHelpers ?? (_ipv6DhcpHelpers = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelperArgs>());
            set => _ipv6DhcpHelpers = value;
        }

        /// <summary>
        /// Enable DHCPv6 rapid commit
        ///   - Default value: `false`
        /// </summary>
        [Input("ipv6DhcpRapidCommit")]
        public Input<bool>? Ipv6DhcpRapidCommit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6DhcpRapidCommitVariable")]
        public Input<string>? Ipv6DhcpRapidCommitVariable { get; set; }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        [Input("ipv6Vrrps")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6VrrpArgs>? _ipv6Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6VrrpArgs> Ipv6Vrrps
        {
            get => _ipv6Vrrps ?? (_ipv6Vrrps = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6VrrpArgs>());
            set => _ipv6Vrrps = value;
        }

        /// <summary>
        /// Interface MTU &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mtuVariable")]
        public Input<string>? MtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policers")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplatePolicerArgs>? _policers;

        /// <summary>
        /// Enable policer
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplatePolicerArgs> Policers
        {
            get => _policers ?? (_policers = new InputList<Inputs.VpnInterfaceSviFeatureTemplatePolicerArgs>());
            set => _policers = value;
        }

        /// <summary>
        /// Administrative state
        ///   - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        [Input("staticArpEntries")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateStaticArpEntryArgs>? _staticArpEntries;

        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateStaticArpEntryArgs> StaticArpEntries
        {
            get => _staticArpEntries ?? (_staticArpEntries = new InputList<Inputs.VpnInterfaceSviFeatureTemplateStaticArpEntryArgs>());
            set => _staticArpEntries = value;
        }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `552`-`1960`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        public VpnInterfaceSviFeatureTemplateArgs()
        {
        }
        public static new VpnInterfaceSviFeatureTemplateArgs Empty => new VpnInterfaceSviFeatureTemplateArgs();
    }

    public sealed class VpnInterfaceSviFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
        ///   - Range: `0`-`2678400`
        ///   - Default value: `1200`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpTimeoutVariable")]
        public Input<string>? ArpTimeoutVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Interface name: VLAN 1 - VLAN 4094 when present
        /// </summary>
        [Input("ifName")]
        public Input<string>? IfName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ifNameVariable")]
        public Input<string>? IfNameVariable { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// IP Directed-Broadcast
        ///   - Default value: `false`
        /// </summary>
        [Input("ipDirectedBroadcast")]
        public Input<bool>? IpDirectedBroadcast { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipDirectedBroadcastVariable")]
        public Input<string>? IpDirectedBroadcastVariable { get; set; }

        /// <summary>
        /// IP MTU &lt;576..Interface MTU&gt;, in bytes
        ///   - Range: `576`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        [Input("ipv4AccessLists")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4AccessListGetArgs>? _ipv4AccessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4AccessListGetArgs> Ipv4AccessLists
        {
            get => _ipv4AccessLists ?? (_ipv4AccessLists = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4AccessListGetArgs>());
            set => _ipv4AccessLists = value;
        }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4AddressVariable")]
        public Input<string>? Ipv4AddressVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv4DhcpHelperVariable")]
        public Input<string>? Ipv4DhcpHelperVariable { get; set; }

        [Input("ipv4DhcpHelpers")]
        private InputList<string>? _ipv4DhcpHelpers;

        /// <summary>
        /// List of DHCP helper addresses
        /// </summary>
        public InputList<string> Ipv4DhcpHelpers
        {
            get => _ipv4DhcpHelpers ?? (_ipv4DhcpHelpers = new InputList<string>());
            set => _ipv4DhcpHelpers = value;
        }

        [Input("ipv4SecondaryAddresses")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressGetArgs>? _ipv4SecondaryAddresses;

        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressGetArgs> Ipv4SecondaryAddresses
        {
            get => _ipv4SecondaryAddresses ?? (_ipv4SecondaryAddresses = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4SecondaryAddressGetArgs>());
            set => _ipv4SecondaryAddresses = value;
        }

        [Input("ipv4Vrrps")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4VrrpGetArgs>? _ipv4Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4VrrpGetArgs> Ipv4Vrrps
        {
            get => _ipv4Vrrps ?? (_ipv4Vrrps = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv4VrrpGetArgs>());
            set => _ipv4Vrrps = value;
        }

        [Input("ipv6AccessLists")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6AccessListGetArgs>? _ipv6AccessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6AccessListGetArgs> Ipv6AccessLists
        {
            get => _ipv6AccessLists ?? (_ipv6AccessLists = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6AccessListGetArgs>());
            set => _ipv6AccessLists = value;
        }

        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        [Input("ipv6Address")]
        public Input<string>? Ipv6Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6AddressVariable")]
        public Input<string>? Ipv6AddressVariable { get; set; }

        /// <summary>
        /// Enable DHCPv6
        ///   - Default value: `false`
        /// </summary>
        [Input("ipv6DhcpClient")]
        public Input<bool>? Ipv6DhcpClient { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6DhcpClientVariable")]
        public Input<string>? Ipv6DhcpClientVariable { get; set; }

        /// <summary>
        /// Set administrative distance for DHCP default route
        ///   - Range: `1`-`65536`
        ///   - Default value: `1`
        /// </summary>
        [Input("ipv6DhcpDistance")]
        public Input<int>? Ipv6DhcpDistance { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6DhcpDistanceVariable")]
        public Input<string>? Ipv6DhcpDistanceVariable { get; set; }

        [Input("ipv6DhcpHelpers")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelperGetArgs>? _ipv6DhcpHelpers;

        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelperGetArgs> Ipv6DhcpHelpers
        {
            get => _ipv6DhcpHelpers ?? (_ipv6DhcpHelpers = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6DhcpHelperGetArgs>());
            set => _ipv6DhcpHelpers = value;
        }

        /// <summary>
        /// Enable DHCPv6 rapid commit
        ///   - Default value: `false`
        /// </summary>
        [Input("ipv6DhcpRapidCommit")]
        public Input<bool>? Ipv6DhcpRapidCommit { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipv6DhcpRapidCommitVariable")]
        public Input<string>? Ipv6DhcpRapidCommitVariable { get; set; }

        [Input("ipv6SecondaryAddresses")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressGetArgs>? _ipv6SecondaryAddresses;

        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressGetArgs> Ipv6SecondaryAddresses
        {
            get => _ipv6SecondaryAddresses ?? (_ipv6SecondaryAddresses = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6SecondaryAddressGetArgs>());
            set => _ipv6SecondaryAddresses = value;
        }

        [Input("ipv6Vrrps")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6VrrpGetArgs>? _ipv6Vrrps;

        /// <summary>
        /// Enable VRRP
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6VrrpGetArgs> Ipv6Vrrps
        {
            get => _ipv6Vrrps ?? (_ipv6Vrrps = new InputList<Inputs.VpnInterfaceSviFeatureTemplateIpv6VrrpGetArgs>());
            set => _ipv6Vrrps = value;
        }

        /// <summary>
        /// Interface MTU &lt;1500..9216&gt; in bytes
        ///   - Range: `1500`-`9216`
        ///   - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mtuVariable")]
        public Input<string>? MtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policers")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplatePolicerGetArgs>? _policers;

        /// <summary>
        /// Enable policer
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplatePolicerGetArgs> Policers
        {
            get => _policers ?? (_policers = new InputList<Inputs.VpnInterfaceSviFeatureTemplatePolicerGetArgs>());
            set => _policers = value;
        }

        /// <summary>
        /// Administrative state
        ///   - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        [Input("staticArpEntries")]
        private InputList<Inputs.VpnInterfaceSviFeatureTemplateStaticArpEntryGetArgs>? _staticArpEntries;

        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public InputList<Inputs.VpnInterfaceSviFeatureTemplateStaticArpEntryGetArgs> StaticArpEntries
        {
            get => _staticArpEntries ?? (_staticArpEntries = new InputList<Inputs.VpnInterfaceSviFeatureTemplateStaticArpEntryGetArgs>());
            set => _staticArpEntries = value;
        }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        ///   - Range: `552`-`1960`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public VpnInterfaceSviFeatureTemplateState()
        {
        }
        public static new VpnInterfaceSviFeatureTemplateState Empty => new VpnInterfaceSviFeatureTemplateState();
    }
}
