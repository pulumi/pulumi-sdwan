// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetVpnInterfaceSviFeatureTemplate
    {
        /// <summary>
        /// This data source can read the VPN Interface SVI feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceSviFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpnInterfaceSviFeatureTemplateResult> InvokeAsync(GetVpnInterfaceSviFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpnInterfaceSviFeatureTemplateResult>("sdwan:index/getVpnInterfaceSviFeatureTemplate:getVpnInterfaceSviFeatureTemplate", args ?? new GetVpnInterfaceSviFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VPN Interface SVI feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceSviFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnInterfaceSviFeatureTemplateResult> Invoke(GetVpnInterfaceSviFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnInterfaceSviFeatureTemplateResult>("sdwan:index/getVpnInterfaceSviFeatureTemplate:getVpnInterfaceSviFeatureTemplate", args ?? new GetVpnInterfaceSviFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VPN Interface SVI feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetVpnInterfaceSviFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpnInterfaceSviFeatureTemplateResult> Invoke(GetVpnInterfaceSviFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpnInterfaceSviFeatureTemplateResult>("sdwan:index/getVpnInterfaceSviFeatureTemplate:getVpnInterfaceSviFeatureTemplate", args ?? new GetVpnInterfaceSviFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpnInterfaceSviFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetVpnInterfaceSviFeatureTemplateArgs()
        {
        }
        public static new GetVpnInterfaceSviFeatureTemplateArgs Empty => new GetVpnInterfaceSviFeatureTemplateArgs();
    }

    public sealed class GetVpnInterfaceSviFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetVpnInterfaceSviFeatureTemplateInvokeArgs()
        {
        }
        public static new GetVpnInterfaceSviFeatureTemplateInvokeArgs Empty => new GetVpnInterfaceSviFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpnInterfaceSviFeatureTemplateResult
    {
        /// <summary>
        /// Timeout value for dynamically learned ARP entries, \n\n seconds
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ArpTimeoutVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Interface name: VLAN 1 - VLAN 4094 when present
        /// </summary>
        public readonly string IfName;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IfNameVariable;
        /// <summary>
        /// Interface description
        /// </summary>
        public readonly string InterfaceDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InterfaceDescriptionVariable;
        /// <summary>
        /// IP Directed-Broadcast
        /// </summary>
        public readonly bool IpDirectedBroadcast;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpDirectedBroadcastVariable;
        /// <summary>
        /// IP MTU \n\n, in bytes
        /// </summary>
        public readonly int IpMtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string IpMtuVariable;
        /// <summary>
        /// Apply ACL
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv4AccessListResult> Ipv4AccessLists;
        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        public readonly string Ipv4Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4AddressVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4DhcpHelperVariable;
        /// <summary>
        /// List of DHCP helper addresses
        /// </summary>
        public readonly ImmutableArray<string> Ipv4DhcpHelpers;
        /// <summary>
        /// Assign secondary IP addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddressResult> Ipv4SecondaryAddresses;
        /// <summary>
        /// Enable VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpResult> Ipv4Vrrps;
        /// <summary>
        /// Apply ACL
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6AccessListResult> Ipv6AccessLists;
        /// <summary>
        /// Assign IPv6 address
        /// </summary>
        public readonly string Ipv6Address;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6AddressVariable;
        /// <summary>
        /// Enable DHCPv6
        /// </summary>
        public readonly bool Ipv6DhcpClient;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6DhcpClientVariable;
        /// <summary>
        /// Set administrative distance for DHCP default route
        /// </summary>
        public readonly int Ipv6DhcpDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6DhcpDistanceVariable;
        /// <summary>
        /// DHCPv6 Helper
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelperResult> Ipv6DhcpHelpers;
        /// <summary>
        /// Enable DHCPv6 rapid commit
        /// </summary>
        public readonly bool Ipv6DhcpRapidCommit;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6DhcpRapidCommitVariable;
        /// <summary>
        /// Assign secondary IPv6 addresses
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddressResult> Ipv6SecondaryAddresses;
        /// <summary>
        /// Enable VRRP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpResult> Ipv6Vrrps;
        /// <summary>
        /// Interface MTU \n\n in bytes
        /// </summary>
        public readonly int Mtu;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MtuVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Enable policer
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplatePolicerResult> Policers;
        /// <summary>
        /// Administrative state
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Configure static ARP entries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateStaticArpEntryResult> StaticArpEntries;
        /// <summary>
        /// TCP MSS on SYN packets, in bytes
        /// </summary>
        public readonly int TcpMssAdjust;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string TcpMssAdjustVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetVpnInterfaceSviFeatureTemplateResult(
            int arpTimeout,

            string arpTimeoutVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            string id,

            string ifName,

            string ifNameVariable,

            string interfaceDescription,

            string interfaceDescriptionVariable,

            bool ipDirectedBroadcast,

            string ipDirectedBroadcastVariable,

            int ipMtu,

            string ipMtuVariable,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv4AccessListResult> ipv4AccessLists,

            string ipv4Address,

            string ipv4AddressVariable,

            string ipv4DhcpHelperVariable,

            ImmutableArray<string> ipv4DhcpHelpers,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddressResult> ipv4SecondaryAddresses,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpResult> ipv4Vrrps,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6AccessListResult> ipv6AccessLists,

            string ipv6Address,

            string ipv6AddressVariable,

            bool ipv6DhcpClient,

            string ipv6DhcpClientVariable,

            int ipv6DhcpDistance,

            string ipv6DhcpDistanceVariable,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelperResult> ipv6DhcpHelpers,

            bool ipv6DhcpRapidCommit,

            string ipv6DhcpRapidCommitVariable,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddressResult> ipv6SecondaryAddresses,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpResult> ipv6Vrrps,

            int mtu,

            string mtuVariable,

            string name,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplatePolicerResult> policers,

            bool shutdown,

            string shutdownVariable,

            ImmutableArray<Outputs.GetVpnInterfaceSviFeatureTemplateStaticArpEntryResult> staticArpEntries,

            int tcpMssAdjust,

            string tcpMssAdjustVariable,

            string templateType,

            int version)
        {
            ArpTimeout = arpTimeout;
            ArpTimeoutVariable = arpTimeoutVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            Id = id;
            IfName = ifName;
            IfNameVariable = ifNameVariable;
            InterfaceDescription = interfaceDescription;
            InterfaceDescriptionVariable = interfaceDescriptionVariable;
            IpDirectedBroadcast = ipDirectedBroadcast;
            IpDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            IpMtu = ipMtu;
            IpMtuVariable = ipMtuVariable;
            Ipv4AccessLists = ipv4AccessLists;
            Ipv4Address = ipv4Address;
            Ipv4AddressVariable = ipv4AddressVariable;
            Ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            Ipv4DhcpHelpers = ipv4DhcpHelpers;
            Ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            Ipv4Vrrps = ipv4Vrrps;
            Ipv6AccessLists = ipv6AccessLists;
            Ipv6Address = ipv6Address;
            Ipv6AddressVariable = ipv6AddressVariable;
            Ipv6DhcpClient = ipv6DhcpClient;
            Ipv6DhcpClientVariable = ipv6DhcpClientVariable;
            Ipv6DhcpDistance = ipv6DhcpDistance;
            Ipv6DhcpDistanceVariable = ipv6DhcpDistanceVariable;
            Ipv6DhcpHelpers = ipv6DhcpHelpers;
            Ipv6DhcpRapidCommit = ipv6DhcpRapidCommit;
            Ipv6DhcpRapidCommitVariable = ipv6DhcpRapidCommitVariable;
            Ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            Ipv6Vrrps = ipv6Vrrps;
            Mtu = mtu;
            MtuVariable = mtuVariable;
            Name = name;
            Policers = policers;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            StaticArpEntries = staticArpEntries;
            TcpMssAdjust = tcpMssAdjust;
            TcpMssAdjustVariable = tcpMssAdjustVariable;
            TemplateType = templateType;
            Version = version;
        }
    }
}
