// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco VPN feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.CiscoVpnFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         VpnId = 1,
    ///         VpnName = "VPN1",
    ///         TenantVpnId = 1,
    ///         OrganizationName = "org1",
    ///         OmpAdminDistanceIpv4 = 10,
    ///         OmpAdminDistanceIpv6 = 10,
    ///         EnhanceEcmpKeying = true,
    ///         DnsIpv4Servers = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerArgs
    ///             {
    ///                 Address = "9.9.9.9",
    ///                 Role = "primary",
    ///             },
    ///         },
    ///         DnsIpv6Servers = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerArgs
    ///             {
    ///                 Address = "2001::9",
    ///                 Role = "primary",
    ///             },
    ///         },
    ///         DnsHosts = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateDnsHostArgs
    ///             {
    ///                 Hostname = "abc1",
    ///                 Ip = new[]
    ///                 {
    ///                     "7.7.7.7",
    ///                 },
    ///             },
    ///         },
    ///         Services = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateServiceArgs
    ///             {
    ///                 Service_types = "FW",
    ///                 Address = new[]
    ///                 {
    ///                     "8.8.8.8",
    ///                 },
    ///                 Interface = "e1",
    ///                 Track_enable = true,
    ///             },
    ///         },
    ///         Ipv4StaticServiceRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs
    ///             {
    ///                 Prefix = "2.2.2.0/24",
    ///                 Vpn_id = 2,
    ///                 Service = "sig",
    ///             },
    ///         },
    ///         Ipv4StaticRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteArgs
    ///             {
    ///                 Prefix = "3.3.3.0/24",
    ///                 Null0 = false,
    ///                 Distance = 10,
    ///                 Vpn_id = 5,
    ///                 Dhcp = false,
    ///                 Next_hops = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "address", "11.1.1.1" },
    ///                         { "distance", 20 },
    ///                     },
    ///                 },
    ///                 Track_next_hops = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "address", "12.1.1.1" },
    ///                         { "distance", 20 },
    ///                         { "tracker", "tracker1" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv6StaticRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteArgs
    ///             {
    ///                 Prefix = "2001::/48",
    ///                 Null0 = false,
    ///                 Vpn_id = 5,
    ///                 Nat = "NAT64",
    ///                 Next_hops = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "address", "2001::11" },
    ///                         { "distance", 20 },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv4StaticGreRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs
    ///             {
    ///                 Prefix = "3.3.3.0/24",
    ///                 Vpn_id = 2,
    ///                 Interfaces = new[]
    ///                 {
    ///                     "e1",
    ///                 },
    ///             },
    ///         },
    ///         Ipv4StaticIpsecRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs
    ///             {
    ///                 Prefix = "4.4.4.0/24",
    ///                 Vpn_id = 2,
    ///                 Interfaces = new[]
    ///                 {
    ///                     "e1",
    ///                 },
    ///             },
    ///         },
    ///         OmpAdvertiseIpv4Routes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs
    ///             {
    ///                 Protocol = "bgp",
    ///                 Route_policy = "rp1",
    ///                 Protocol_sub_type = new[]
    ///                 {
    ///                     "external",
    ///                 },
    ///                 Prefixes = new[]
    ///                 {
    ///                     new Sdwan.Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefixArgs
    ///                     {
    ///                         PrefixEntry = "1.1.1.0/24",
    ///                         AggregateOnly = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         OmpAdvertiseIpv6Routes = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs
    ///             {
    ///                 Protocol = "bgp",
    ///                 Route_policy = "rp1",
    ///                 Protocol_sub_type = new[]
    ///                 {
    ///                     "external",
    ///                 },
    ///                 Prefixes = new[]
    ///                 {
    ///                     new Sdwan.Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefixArgs
    ///                     {
    ///                         PrefixEntry = "2001:2::/48",
    ///                         AggregateOnly = true,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Nat64Pools = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateNat64PoolArgs
    ///             {
    ///                 Name = "POOL1",
    ///                 Start_address = "100.1.1.1",
    ///                 End_address = "100.1.2.255",
    ///                 Overload = true,
    ///                 Leak_from_global = true,
    ///                 Leak_from_global_protocol = "rip",
    ///                 Leak_to_global = true,
    ///             },
    ///         },
    ///         NatPools = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateNatPoolArgs
    ///             {
    ///                 Name = 1,
    ///                 Prefix_length = 24,
    ///                 Range_start = "101.1.1.1",
    ///                 Range_end = "101.1.2.255",
    ///                 Overload = true,
    ///                 Direction = "inside",
    ///                 Tracker_id = 10,
    ///             },
    ///         },
    ///         StaticNatRules = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateStaticNatRuleArgs
    ///             {
    ///                 Pool_name = 1,
    ///                 Source_ip = "10.1.1.1",
    ///                 Translate_ip = "105.1.1.1",
    ///                 Static_nat_direction = "inside",
    ///                 Tracker_id = 10,
    ///             },
    ///         },
    ///         StaticNatSubnetRules = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs
    ///             {
    ///                 Source_ip_subnet = "10.2.1.0",
    ///                 Translate_ip_subnet = "105.2.1.0",
    ///                 Prefix_length = 24,
    ///                 Static_nat_direction = "inside",
    ///                 Tracker_id = 10,
    ///             },
    ///         },
    ///         PortForwardRules = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplatePortForwardRuleArgs
    ///             {
    ///                 Pool_name = 1,
    ///                 Source_port = 5000,
    ///                 Translate_port = 6000,
    ///                 Source_ip = "10.3.1.1",
    ///                 Translate_ip = "120.3.1.1",
    ///                 Protocol = "tcp",
    ///             },
    ///         },
    ///         RouteGlobalImports = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateRouteGlobalImportArgs
    ///             {
    ///                 Protocol = "ospf",
    ///                 Protocol_sub_type = new[]
    ///                 {
    ///                     "external",
    ///                 },
    ///                 Route_policy = "policy1",
    ///                 Redistributes = new[]
    ///                 {
    ///                     new Sdwan.Inputs.CiscoVpnFeatureTemplateRouteGlobalImportRedistributeArgs
    ///                     {
    ///                         Protocol = "bgp",
    ///                         RoutePolicy = "policy1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         RouteVpnImports = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateRouteVpnImportArgs
    ///             {
    ///                 Source_vpn_id = 5,
    ///                 Protocol = "ospf",
    ///                 Protocol_sub_type = new[]
    ///                 {
    ///                     "external",
    ///                 },
    ///                 Route_policy = "policy1",
    ///                 Redistributes = new[]
    ///                 {
    ///                     new Sdwan.Inputs.CiscoVpnFeatureTemplateRouteVpnImportRedistributeArgs
    ///                     {
    ///                         Protocol = "bgp",
    ///                         RoutePolicy = "policy1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         RouteGlobalExports = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoVpnFeatureTemplateRouteGlobalExportArgs
    ///             {
    ///                 Protocol = "ospf",
    ///                 Protocol_sub_type = new[]
    ///                 {
    ///                     "external",
    ///                 },
    ///                 Route_policy = "policy1",
    ///                 Redistributes = new[]
    ///                 {
    ///                     new Sdwan.Inputs.CiscoVpnFeatureTemplateRouteGlobalExportRedistributeArgs
    ///                     {
    ///                         Protocol = "bgp",
    ///                         RoutePolicy = "policy1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate")]
    public partial class CiscoVpnFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Static DNS mapping
        /// </summary>
        [Output("dnsHosts")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateDnsHost>> DnsHosts { get; private set; } = null!;

        /// <summary>
        /// DNS
        /// </summary>
        [Output("dnsIpv4Servers")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateDnsIpv4Server>> DnsIpv4Servers { get; private set; } = null!;

        /// <summary>
        /// DNS
        /// </summary>
        [Output("dnsIpv6Servers")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateDnsIpv6Server>> DnsIpv6Servers { get; private set; } = null!;

        /// <summary>
        /// Optional packet fields for ECMP keying
        ///   - Default value: `False`
        /// </summary>
        [Output("enhanceEcmpKeying")]
        public Output<bool?> EnhanceEcmpKeying { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enhanceEcmpKeyingVariable")]
        public Output<string?> EnhanceEcmpKeyingVariable { get; private set; } = null!;

        /// <summary>
        /// Configure routes pointing to a GRE tunnel
        /// </summary>
        [Output("ipv4StaticGreRoutes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateIpv4StaticGreRoute>> Ipv4StaticGreRoutes { get; private set; } = null!;

        /// <summary>
        /// Configure routes pointing to a IPSEC tunnel
        /// </summary>
        [Output("ipv4StaticIpsecRoutes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRoute>> Ipv4StaticIpsecRoutes { get; private set; } = null!;

        /// <summary>
        /// Configure IPv4 Static Routes
        /// </summary>
        [Output("ipv4StaticRoutes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateIpv4StaticRoute>> Ipv4StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// Configure IPv4 Static Service Routes
        /// </summary>
        [Output("ipv4StaticServiceRoutes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateIpv4StaticServiceRoute>> Ipv4StaticServiceRoutes { get; private set; } = null!;

        /// <summary>
        /// Configure IPv6 Static Routes
        /// </summary>
        [Output("ipv6StaticRoutes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateIpv6StaticRoute>> Ipv6StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set NAT64 v4 pool range
        /// </summary>
        [Output("nat64Pools")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateNat64Pool>> Nat64Pools { get; private set; } = null!;

        /// <summary>
        /// Configure NAT Pool entries
        /// </summary>
        [Output("natPools")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateNatPool>> NatPools { get; private set; } = null!;

        /// <summary>
        /// omp-admin-distance-ipv4
        ///   - Range: `1`-`255`
        /// </summary>
        [Output("ompAdminDistanceIpv4")]
        public Output<int?> OmpAdminDistanceIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ompAdminDistanceIpv4Variable")]
        public Output<string?> OmpAdminDistanceIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// omp-admin-distance-ipv6
        ///   - Range: `1`-`255`
        /// </summary>
        [Output("ompAdminDistanceIpv6")]
        public Output<int?> OmpAdminDistanceIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ompAdminDistanceIpv6Variable")]
        public Output<string?> OmpAdminDistanceIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        [Output("ompAdvertiseIpv4Routes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route>> OmpAdvertiseIpv4Routes { get; private set; } = null!;

        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        [Output("ompAdvertiseIpv6Routes")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route>> OmpAdvertiseIpv6Routes { get; private set; } = null!;

        /// <summary>
        /// Org Name selected
        /// </summary>
        [Output("organizationName")]
        public Output<string?> OrganizationName { get; private set; } = null!;

        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        [Output("portForwardRules")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplatePortForwardRule>> PortForwardRules { get; private set; } = null!;

        /// <summary>
        /// Enable route leaking to Global VPN from this Service VPN
        /// </summary>
        [Output("routeGlobalExports")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateRouteGlobalExport>> RouteGlobalExports { get; private set; } = null!;

        /// <summary>
        /// Enable route leaking from Global VPN to this Service VPN
        /// </summary>
        [Output("routeGlobalImports")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateRouteGlobalImport>> RouteGlobalImports { get; private set; } = null!;

        /// <summary>
        /// Enable route leak from Service VPN to current VPN
        /// </summary>
        [Output("routeVpnImports")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateRouteVpnImport>> RouteVpnImports { get; private set; } = null!;

        /// <summary>
        /// Configure services
        /// </summary>
        [Output("services")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateService>> Services { get; private set; } = null!;

        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        [Output("staticNatRules")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateStaticNatRule>> StaticNatRules { get; private set; } = null!;

        /// <summary>
        /// Configure static NAT Subnet entries
        /// </summary>
        [Output("staticNatSubnetRules")]
        public Output<ImmutableArray<Outputs.CiscoVpnFeatureTemplateStaticNatSubnetRule>> StaticNatSubnetRules { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Tenant VPN
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Output("tenantVpnId")]
        public Output<int?> TenantVpnId { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// List of VPN instances
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Output("vpnId")]
        public Output<int?> VpnId { get; private set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Output("vpnName")]
        public Output<string?> VpnName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("vpnNameVariable")]
        public Output<string?> VpnNameVariable { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoVpnFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoVpnFeatureTemplate(string name, CiscoVpnFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate", name, args ?? new CiscoVpnFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoVpnFeatureTemplate(string name, Input<string> id, CiscoVpnFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoVpnFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoVpnFeatureTemplate Get(string name, Input<string> id, CiscoVpnFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoVpnFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoVpnFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("dnsHosts")]
        private InputList<Inputs.CiscoVpnFeatureTemplateDnsHostArgs>? _dnsHosts;

        /// <summary>
        /// Static DNS mapping
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateDnsHostArgs> DnsHosts
        {
            get => _dnsHosts ?? (_dnsHosts = new InputList<Inputs.CiscoVpnFeatureTemplateDnsHostArgs>());
            set => _dnsHosts = value;
        }

        [Input("dnsIpv4Servers")]
        private InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerArgs>? _dnsIpv4Servers;

        /// <summary>
        /// DNS
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerArgs> DnsIpv4Servers
        {
            get => _dnsIpv4Servers ?? (_dnsIpv4Servers = new InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerArgs>());
            set => _dnsIpv4Servers = value;
        }

        [Input("dnsIpv6Servers")]
        private InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerArgs>? _dnsIpv6Servers;

        /// <summary>
        /// DNS
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerArgs> DnsIpv6Servers
        {
            get => _dnsIpv6Servers ?? (_dnsIpv6Servers = new InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerArgs>());
            set => _dnsIpv6Servers = value;
        }

        /// <summary>
        /// Optional packet fields for ECMP keying
        ///   - Default value: `False`
        /// </summary>
        [Input("enhanceEcmpKeying")]
        public Input<bool>? EnhanceEcmpKeying { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enhanceEcmpKeyingVariable")]
        public Input<string>? EnhanceEcmpKeyingVariable { get; set; }

        [Input("ipv4StaticGreRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs>? _ipv4StaticGreRoutes;

        /// <summary>
        /// Configure routes pointing to a GRE tunnel
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs> Ipv4StaticGreRoutes
        {
            get => _ipv4StaticGreRoutes ?? (_ipv4StaticGreRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs>());
            set => _ipv4StaticGreRoutes = value;
        }

        [Input("ipv4StaticIpsecRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs>? _ipv4StaticIpsecRoutes;

        /// <summary>
        /// Configure routes pointing to a IPSEC tunnel
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs> Ipv4StaticIpsecRoutes
        {
            get => _ipv4StaticIpsecRoutes ?? (_ipv4StaticIpsecRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs>());
            set => _ipv4StaticIpsecRoutes = value;
        }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// Configure IPv4 Static Routes
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv4StaticServiceRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs>? _ipv4StaticServiceRoutes;

        /// <summary>
        /// Configure IPv4 Static Service Routes
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs> Ipv4StaticServiceRoutes
        {
            get => _ipv4StaticServiceRoutes ?? (_ipv4StaticServiceRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs>());
            set => _ipv4StaticServiceRoutes = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// Configure IPv6 Static Routes
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat64Pools")]
        private InputList<Inputs.CiscoVpnFeatureTemplateNat64PoolArgs>? _nat64Pools;

        /// <summary>
        /// Set NAT64 v4 pool range
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateNat64PoolArgs> Nat64Pools
        {
            get => _nat64Pools ?? (_nat64Pools = new InputList<Inputs.CiscoVpnFeatureTemplateNat64PoolArgs>());
            set => _nat64Pools = value;
        }

        [Input("natPools")]
        private InputList<Inputs.CiscoVpnFeatureTemplateNatPoolArgs>? _natPools;

        /// <summary>
        /// Configure NAT Pool entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateNatPoolArgs> NatPools
        {
            get => _natPools ?? (_natPools = new InputList<Inputs.CiscoVpnFeatureTemplateNatPoolArgs>());
            set => _natPools = value;
        }

        /// <summary>
        /// omp-admin-distance-ipv4
        ///   - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv4")]
        public Input<int>? OmpAdminDistanceIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv4Variable")]
        public Input<string>? OmpAdminDistanceIpv4Variable { get; set; }

        /// <summary>
        /// omp-admin-distance-ipv6
        ///   - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv6")]
        public Input<int>? OmpAdminDistanceIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv6Variable")]
        public Input<string>? OmpAdminDistanceIpv6Variable { get; set; }

        [Input("ompAdvertiseIpv4Routes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs>? _ompAdvertiseIpv4Routes;

        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs> OmpAdvertiseIpv4Routes
        {
            get => _ompAdvertiseIpv4Routes ?? (_ompAdvertiseIpv4Routes = new InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs>());
            set => _ompAdvertiseIpv4Routes = value;
        }

        [Input("ompAdvertiseIpv6Routes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs>? _ompAdvertiseIpv6Routes;

        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs> OmpAdvertiseIpv6Routes
        {
            get => _ompAdvertiseIpv6Routes ?? (_ompAdvertiseIpv6Routes = new InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs>());
            set => _ompAdvertiseIpv6Routes = value;
        }

        /// <summary>
        /// Org Name selected
        /// </summary>
        [Input("organizationName")]
        public Input<string>? OrganizationName { get; set; }

        [Input("portForwardRules")]
        private InputList<Inputs.CiscoVpnFeatureTemplatePortForwardRuleArgs>? _portForwardRules;

        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplatePortForwardRuleArgs> PortForwardRules
        {
            get => _portForwardRules ?? (_portForwardRules = new InputList<Inputs.CiscoVpnFeatureTemplatePortForwardRuleArgs>());
            set => _portForwardRules = value;
        }

        [Input("routeGlobalExports")]
        private InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalExportArgs>? _routeGlobalExports;

        /// <summary>
        /// Enable route leaking to Global VPN from this Service VPN
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalExportArgs> RouteGlobalExports
        {
            get => _routeGlobalExports ?? (_routeGlobalExports = new InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalExportArgs>());
            set => _routeGlobalExports = value;
        }

        [Input("routeGlobalImports")]
        private InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalImportArgs>? _routeGlobalImports;

        /// <summary>
        /// Enable route leaking from Global VPN to this Service VPN
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalImportArgs> RouteGlobalImports
        {
            get => _routeGlobalImports ?? (_routeGlobalImports = new InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalImportArgs>());
            set => _routeGlobalImports = value;
        }

        [Input("routeVpnImports")]
        private InputList<Inputs.CiscoVpnFeatureTemplateRouteVpnImportArgs>? _routeVpnImports;

        /// <summary>
        /// Enable route leak from Service VPN to current VPN
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateRouteVpnImportArgs> RouteVpnImports
        {
            get => _routeVpnImports ?? (_routeVpnImports = new InputList<Inputs.CiscoVpnFeatureTemplateRouteVpnImportArgs>());
            set => _routeVpnImports = value;
        }

        [Input("services")]
        private InputList<Inputs.CiscoVpnFeatureTemplateServiceArgs>? _services;

        /// <summary>
        /// Configure services
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateServiceArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.CiscoVpnFeatureTemplateServiceArgs>());
            set => _services = value;
        }

        [Input("staticNatRules")]
        private InputList<Inputs.CiscoVpnFeatureTemplateStaticNatRuleArgs>? _staticNatRules;

        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateStaticNatRuleArgs> StaticNatRules
        {
            get => _staticNatRules ?? (_staticNatRules = new InputList<Inputs.CiscoVpnFeatureTemplateStaticNatRuleArgs>());
            set => _staticNatRules = value;
        }

        [Input("staticNatSubnetRules")]
        private InputList<Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs>? _staticNatSubnetRules;

        /// <summary>
        /// Configure static NAT Subnet entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs> StaticNatSubnetRules
        {
            get => _staticNatSubnetRules ?? (_staticNatSubnetRules = new InputList<Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs>());
            set => _staticNatSubnetRules = value;
        }

        /// <summary>
        /// Tenant VPN
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Input("tenantVpnId")]
        public Input<int>? TenantVpnId { get; set; }

        /// <summary>
        /// List of VPN instances
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Input("vpnId")]
        public Input<int>? VpnId { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("vpnName")]
        public Input<string>? VpnName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnNameVariable")]
        public Input<string>? VpnNameVariable { get; set; }

        public CiscoVpnFeatureTemplateArgs()
        {
        }
        public static new CiscoVpnFeatureTemplateArgs Empty => new CiscoVpnFeatureTemplateArgs();
    }

    public sealed class CiscoVpnFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("dnsHosts")]
        private InputList<Inputs.CiscoVpnFeatureTemplateDnsHostGetArgs>? _dnsHosts;

        /// <summary>
        /// Static DNS mapping
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateDnsHostGetArgs> DnsHosts
        {
            get => _dnsHosts ?? (_dnsHosts = new InputList<Inputs.CiscoVpnFeatureTemplateDnsHostGetArgs>());
            set => _dnsHosts = value;
        }

        [Input("dnsIpv4Servers")]
        private InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerGetArgs>? _dnsIpv4Servers;

        /// <summary>
        /// DNS
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerGetArgs> DnsIpv4Servers
        {
            get => _dnsIpv4Servers ?? (_dnsIpv4Servers = new InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv4ServerGetArgs>());
            set => _dnsIpv4Servers = value;
        }

        [Input("dnsIpv6Servers")]
        private InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerGetArgs>? _dnsIpv6Servers;

        /// <summary>
        /// DNS
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerGetArgs> DnsIpv6Servers
        {
            get => _dnsIpv6Servers ?? (_dnsIpv6Servers = new InputList<Inputs.CiscoVpnFeatureTemplateDnsIpv6ServerGetArgs>());
            set => _dnsIpv6Servers = value;
        }

        /// <summary>
        /// Optional packet fields for ECMP keying
        ///   - Default value: `False`
        /// </summary>
        [Input("enhanceEcmpKeying")]
        public Input<bool>? EnhanceEcmpKeying { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enhanceEcmpKeyingVariable")]
        public Input<string>? EnhanceEcmpKeyingVariable { get; set; }

        [Input("ipv4StaticGreRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteGetArgs>? _ipv4StaticGreRoutes;

        /// <summary>
        /// Configure routes pointing to a GRE tunnel
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteGetArgs> Ipv4StaticGreRoutes
        {
            get => _ipv4StaticGreRoutes ?? (_ipv4StaticGreRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteGetArgs>());
            set => _ipv4StaticGreRoutes = value;
        }

        [Input("ipv4StaticIpsecRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteGetArgs>? _ipv4StaticIpsecRoutes;

        /// <summary>
        /// Configure routes pointing to a IPSEC tunnel
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteGetArgs> Ipv4StaticIpsecRoutes
        {
            get => _ipv4StaticIpsecRoutes ?? (_ipv4StaticIpsecRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteGetArgs>());
            set => _ipv4StaticIpsecRoutes = value;
        }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteGetArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// Configure IPv4 Static Routes
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteGetArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticRouteGetArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv4StaticServiceRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteGetArgs>? _ipv4StaticServiceRoutes;

        /// <summary>
        /// Configure IPv4 Static Service Routes
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteGetArgs> Ipv4StaticServiceRoutes
        {
            get => _ipv4StaticServiceRoutes ?? (_ipv4StaticServiceRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteGetArgs>());
            set => _ipv4StaticServiceRoutes = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteGetArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// Configure IPv6 Static Routes
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteGetArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.CiscoVpnFeatureTemplateIpv6StaticRouteGetArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nat64Pools")]
        private InputList<Inputs.CiscoVpnFeatureTemplateNat64PoolGetArgs>? _nat64Pools;

        /// <summary>
        /// Set NAT64 v4 pool range
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateNat64PoolGetArgs> Nat64Pools
        {
            get => _nat64Pools ?? (_nat64Pools = new InputList<Inputs.CiscoVpnFeatureTemplateNat64PoolGetArgs>());
            set => _nat64Pools = value;
        }

        [Input("natPools")]
        private InputList<Inputs.CiscoVpnFeatureTemplateNatPoolGetArgs>? _natPools;

        /// <summary>
        /// Configure NAT Pool entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateNatPoolGetArgs> NatPools
        {
            get => _natPools ?? (_natPools = new InputList<Inputs.CiscoVpnFeatureTemplateNatPoolGetArgs>());
            set => _natPools = value;
        }

        /// <summary>
        /// omp-admin-distance-ipv4
        ///   - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv4")]
        public Input<int>? OmpAdminDistanceIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv4Variable")]
        public Input<string>? OmpAdminDistanceIpv4Variable { get; set; }

        /// <summary>
        /// omp-admin-distance-ipv6
        ///   - Range: `1`-`255`
        /// </summary>
        [Input("ompAdminDistanceIpv6")]
        public Input<int>? OmpAdminDistanceIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ompAdminDistanceIpv6Variable")]
        public Input<string>? OmpAdminDistanceIpv6Variable { get; set; }

        [Input("ompAdvertiseIpv4Routes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteGetArgs>? _ompAdvertiseIpv4Routes;

        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteGetArgs> OmpAdvertiseIpv4Routes
        {
            get => _ompAdvertiseIpv4Routes ?? (_ompAdvertiseIpv4Routes = new InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteGetArgs>());
            set => _ompAdvertiseIpv4Routes = value;
        }

        [Input("ompAdvertiseIpv6Routes")]
        private InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteGetArgs>? _ompAdvertiseIpv6Routes;

        /// <summary>
        /// Advertise routes to OMP
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteGetArgs> OmpAdvertiseIpv6Routes
        {
            get => _ompAdvertiseIpv6Routes ?? (_ompAdvertiseIpv6Routes = new InputList<Inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteGetArgs>());
            set => _ompAdvertiseIpv6Routes = value;
        }

        /// <summary>
        /// Org Name selected
        /// </summary>
        [Input("organizationName")]
        public Input<string>? OrganizationName { get; set; }

        [Input("portForwardRules")]
        private InputList<Inputs.CiscoVpnFeatureTemplatePortForwardRuleGetArgs>? _portForwardRules;

        /// <summary>
        /// Configure Port Forward entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplatePortForwardRuleGetArgs> PortForwardRules
        {
            get => _portForwardRules ?? (_portForwardRules = new InputList<Inputs.CiscoVpnFeatureTemplatePortForwardRuleGetArgs>());
            set => _portForwardRules = value;
        }

        [Input("routeGlobalExports")]
        private InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalExportGetArgs>? _routeGlobalExports;

        /// <summary>
        /// Enable route leaking to Global VPN from this Service VPN
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalExportGetArgs> RouteGlobalExports
        {
            get => _routeGlobalExports ?? (_routeGlobalExports = new InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalExportGetArgs>());
            set => _routeGlobalExports = value;
        }

        [Input("routeGlobalImports")]
        private InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalImportGetArgs>? _routeGlobalImports;

        /// <summary>
        /// Enable route leaking from Global VPN to this Service VPN
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalImportGetArgs> RouteGlobalImports
        {
            get => _routeGlobalImports ?? (_routeGlobalImports = new InputList<Inputs.CiscoVpnFeatureTemplateRouteGlobalImportGetArgs>());
            set => _routeGlobalImports = value;
        }

        [Input("routeVpnImports")]
        private InputList<Inputs.CiscoVpnFeatureTemplateRouteVpnImportGetArgs>? _routeVpnImports;

        /// <summary>
        /// Enable route leak from Service VPN to current VPN
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateRouteVpnImportGetArgs> RouteVpnImports
        {
            get => _routeVpnImports ?? (_routeVpnImports = new InputList<Inputs.CiscoVpnFeatureTemplateRouteVpnImportGetArgs>());
            set => _routeVpnImports = value;
        }

        [Input("services")]
        private InputList<Inputs.CiscoVpnFeatureTemplateServiceGetArgs>? _services;

        /// <summary>
        /// Configure services
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateServiceGetArgs> Services
        {
            get => _services ?? (_services = new InputList<Inputs.CiscoVpnFeatureTemplateServiceGetArgs>());
            set => _services = value;
        }

        [Input("staticNatRules")]
        private InputList<Inputs.CiscoVpnFeatureTemplateStaticNatRuleGetArgs>? _staticNatRules;

        /// <summary>
        /// Configure static NAT entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateStaticNatRuleGetArgs> StaticNatRules
        {
            get => _staticNatRules ?? (_staticNatRules = new InputList<Inputs.CiscoVpnFeatureTemplateStaticNatRuleGetArgs>());
            set => _staticNatRules = value;
        }

        [Input("staticNatSubnetRules")]
        private InputList<Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleGetArgs>? _staticNatSubnetRules;

        /// <summary>
        /// Configure static NAT Subnet entries
        /// </summary>
        public InputList<Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleGetArgs> StaticNatSubnetRules
        {
            get => _staticNatSubnetRules ?? (_staticNatSubnetRules = new InputList<Inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleGetArgs>());
            set => _staticNatSubnetRules = value;
        }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Tenant VPN
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Input("tenantVpnId")]
        public Input<int>? TenantVpnId { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// List of VPN instances
        ///   - Range: `0`-`65527`
        ///   - Default value: `0`
        /// </summary>
        [Input("vpnId")]
        public Input<int>? VpnId { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("vpnName")]
        public Input<string>? VpnName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnNameVariable")]
        public Input<string>? VpnNameVariable { get; set; }

        public CiscoVpnFeatureTemplateState()
        {
        }
        public static new CiscoVpnFeatureTemplateState Empty => new CiscoVpnFeatureTemplateState();
    }
}
