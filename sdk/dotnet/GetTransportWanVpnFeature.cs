// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportWanVpnFeature
    {
        /// <summary>
        /// This data source can read the Transport WAN VPN Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportWanVpnFeatureResult> InvokeAsync(GetTransportWanVpnFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportWanVpnFeatureResult>("sdwan:index/getTransportWanVpnFeature:getTransportWanVpnFeature", args ?? new GetTransportWanVpnFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport WAN VPN Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportWanVpnFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportWanVpnFeatureResult> Invoke(GetTransportWanVpnFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportWanVpnFeatureResult>("sdwan:index/getTransportWanVpnFeature:getTransportWanVpnFeature", args ?? new GetTransportWanVpnFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportWanVpnFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTransportWanVpnFeatureArgs()
        {
        }
        public static new GetTransportWanVpnFeatureArgs Empty => new GetTransportWanVpnFeatureArgs();
    }

    public sealed class GetTransportWanVpnFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTransportWanVpnFeatureInvokeArgs()
        {
        }
        public static new GetTransportWanVpnFeatureInvokeArgs Empty => new GetTransportWanVpnFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportWanVpnFeatureResult
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enhance ECMP Keying
        /// </summary>
        public readonly bool EnhanceEcmpKeying;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string EnhanceEcmpKeyingVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnFeatureIpv4StaticRouteResult> Ipv4StaticRoutes;
        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnFeatureIpv6StaticRouteResult> Ipv6StaticRoutes;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnFeatureNat64V4PoolResult> Nat64V4Pools;
        public readonly ImmutableArray<Outputs.GetTransportWanVpnFeatureNewHostMappingResult> NewHostMappings;
        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        public readonly string PrimaryDnsAddressIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PrimaryDnsAddressIpv4Variable;
        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        public readonly string PrimaryDnsAddressIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PrimaryDnsAddressIpv6Variable;
        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        public readonly string SecondaryDnsAddressIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryDnsAddressIpv4Variable;
        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        public readonly string SecondaryDnsAddressIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryDnsAddressIpv6Variable;
        /// <summary>
        /// Service
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportWanVpnFeatureServiceResult> Services;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// VPN
        /// </summary>
        public readonly int Vpn;

        [OutputConstructor]
        private GetTransportWanVpnFeatureResult(
            string description,

            bool enhanceEcmpKeying,

            string enhanceEcmpKeyingVariable,

            string featureProfileId,

            string id,

            ImmutableArray<Outputs.GetTransportWanVpnFeatureIpv4StaticRouteResult> ipv4StaticRoutes,

            ImmutableArray<Outputs.GetTransportWanVpnFeatureIpv6StaticRouteResult> ipv6StaticRoutes,

            string name,

            ImmutableArray<Outputs.GetTransportWanVpnFeatureNat64V4PoolResult> nat64V4Pools,

            ImmutableArray<Outputs.GetTransportWanVpnFeatureNewHostMappingResult> newHostMappings,

            string primaryDnsAddressIpv4,

            string primaryDnsAddressIpv4Variable,

            string primaryDnsAddressIpv6,

            string primaryDnsAddressIpv6Variable,

            string secondaryDnsAddressIpv4,

            string secondaryDnsAddressIpv4Variable,

            string secondaryDnsAddressIpv6,

            string secondaryDnsAddressIpv6Variable,

            ImmutableArray<Outputs.GetTransportWanVpnFeatureServiceResult> services,

            int version,

            int vpn)
        {
            Description = description;
            EnhanceEcmpKeying = enhanceEcmpKeying;
            EnhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            FeatureProfileId = featureProfileId;
            Id = id;
            Ipv4StaticRoutes = ipv4StaticRoutes;
            Ipv6StaticRoutes = ipv6StaticRoutes;
            Name = name;
            Nat64V4Pools = nat64V4Pools;
            NewHostMappings = newHostMappings;
            PrimaryDnsAddressIpv4 = primaryDnsAddressIpv4;
            PrimaryDnsAddressIpv4Variable = primaryDnsAddressIpv4Variable;
            PrimaryDnsAddressIpv6 = primaryDnsAddressIpv6;
            PrimaryDnsAddressIpv6Variable = primaryDnsAddressIpv6Variable;
            SecondaryDnsAddressIpv4 = secondaryDnsAddressIpv4;
            SecondaryDnsAddressIpv4Variable = secondaryDnsAddressIpv4Variable;
            SecondaryDnsAddressIpv6 = secondaryDnsAddressIpv6;
            SecondaryDnsAddressIpv6Variable = secondaryDnsAddressIpv6Variable;
            Services = services;
            Version = version;
            Vpn = vpn;
        }
    }
}
