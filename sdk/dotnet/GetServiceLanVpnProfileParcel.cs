// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetServiceLanVpnProfileParcel
    {
        /// <summary>
        /// This data source can read the Service LAN VPN profile parcel.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnProfileParcel.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServiceLanVpnProfileParcelResult> InvokeAsync(GetServiceLanVpnProfileParcelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceLanVpnProfileParcelResult>("sdwan:index/getServiceLanVpnProfileParcel:getServiceLanVpnProfileParcel", args ?? new GetServiceLanVpnProfileParcelArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service LAN VPN profile parcel.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetServiceLanVpnProfileParcel.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServiceLanVpnProfileParcelResult> Invoke(GetServiceLanVpnProfileParcelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceLanVpnProfileParcelResult>("sdwan:index/getServiceLanVpnProfileParcel:getServiceLanVpnProfileParcel", args ?? new GetServiceLanVpnProfileParcelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceLanVpnProfileParcelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the profile parcel
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetServiceLanVpnProfileParcelArgs()
        {
        }
        public static new GetServiceLanVpnProfileParcelArgs Empty => new GetServiceLanVpnProfileParcelArgs();
    }

    public sealed class GetServiceLanVpnProfileParcelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the profile parcel
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetServiceLanVpnProfileParcelInvokeArgs()
        {
        }
        public static new GetServiceLanVpnProfileParcelInvokeArgs Empty => new GetServiceLanVpnProfileParcelInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceLanVpnProfileParcelResult
    {
        /// <summary>
        /// OMP Advertise IPv4
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv4Result> AdvertiseOmpIpv4s;
        /// <summary>
        /// OMP Advertise IPv6
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv6Result> AdvertiseOmpIpv6s;
        /// <summary>
        /// Name
        /// </summary>
        public readonly string ConfigDescription;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ConfigDescriptionVariable;
        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enable SDWAN Remote Access
        /// </summary>
        public readonly bool EnableSdwanRemoteAccess;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// IPv4 Static GRE Route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelGreRouteResult> GreRoutes;
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelHostMappingResult> HostMappings;
        /// <summary>
        /// The id of the profile parcel
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IPv4 Static IPSEC Route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpsecRouteResult> IpsecRoutes;
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv4ExportRouteTargetResult> Ipv4ExportRouteTargets;
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv4ImportRouteTargetResult> Ipv4ImportRouteTargets;
        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv4StaticRouteResult> Ipv4StaticRoutes;
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv6ExportRouteTargetResult> Ipv6ExportRouteTargets;
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv6ImportRouteTargetResult> Ipv6ImportRouteTargets;
        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv6StaticRouteResult> Ipv6StaticRoutes;
        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// NAT64 V4 Pool
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelNat64V4PoolResult> Nat64V4Pools;
        /// <summary>
        /// NAT Pool
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelNatPoolResult> NatPools;
        /// <summary>
        /// NAT Port Forward
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelNatPortForwardResult> NatPortForwards;
        /// <summary>
        /// OMP Admin Distance IPv4
        /// </summary>
        public readonly int OmpAdminDistanceIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OmpAdminDistanceIpv4Variable;
        /// <summary>
        /// OMP Admin Distance IPv6
        /// </summary>
        public readonly int OmpAdminDistanceIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string OmpAdminDistanceIpv6Variable;
        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        public readonly string PrimaryDnsAddressIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PrimaryDnsAddressIpv4Variable;
        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        public readonly string PrimaryDnsAddressIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PrimaryDnsAddressIpv6Variable;
        /// <summary>
        /// Enable route leaking from Global to Service VPN
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpnResult> RouteLeakFromGlobalVpns;
        /// <summary>
        /// Enable route leak from another Service VPN to current Service VPN
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelRouteLeakFromOtherServiceResult> RouteLeakFromOtherServices;
        /// <summary>
        /// Enable route leaking from Service to Global VPN
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelRouteLeakToGlobalVpnResult> RouteLeakToGlobalVpns;
        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        public readonly string SecondaryDnsAddressIpv4;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryDnsAddressIpv4Variable;
        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        public readonly string SecondaryDnsAddressIpv6;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SecondaryDnsAddressIpv6Variable;
        /// <summary>
        /// Service
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelServiceRouteResult> ServiceRoutes;
        /// <summary>
        /// Service
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelServiceResult> Services;
        /// <summary>
        /// Static NAT Rules
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceLanVpnProfileParcelStaticNatResult> StaticNats;
        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// VPN
        /// </summary>
        public readonly int Vpn;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string VpnVariable;

        [OutputConstructor]
        private GetServiceLanVpnProfileParcelResult(
            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv4Result> advertiseOmpIpv4s,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv6Result> advertiseOmpIpv6s,

            string configDescription,

            string configDescriptionVariable,

            string description,

            bool enableSdwanRemoteAccess,

            string featureProfileId,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelGreRouteResult> greRoutes,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelHostMappingResult> hostMappings,

            string id,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpsecRouteResult> ipsecRoutes,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv4ExportRouteTargetResult> ipv4ExportRouteTargets,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv4ImportRouteTargetResult> ipv4ImportRouteTargets,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv4StaticRouteResult> ipv4StaticRoutes,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv6ExportRouteTargetResult> ipv6ExportRouteTargets,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv6ImportRouteTargetResult> ipv6ImportRouteTargets,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelIpv6StaticRouteResult> ipv6StaticRoutes,

            string name,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelNat64V4PoolResult> nat64V4Pools,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelNatPoolResult> natPools,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelNatPortForwardResult> natPortForwards,

            int ompAdminDistanceIpv4,

            string ompAdminDistanceIpv4Variable,

            int ompAdminDistanceIpv6,

            string ompAdminDistanceIpv6Variable,

            string primaryDnsAddressIpv4,

            string primaryDnsAddressIpv4Variable,

            string primaryDnsAddressIpv6,

            string primaryDnsAddressIpv6Variable,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpnResult> routeLeakFromGlobalVpns,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelRouteLeakFromOtherServiceResult> routeLeakFromOtherServices,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelRouteLeakToGlobalVpnResult> routeLeakToGlobalVpns,

            string secondaryDnsAddressIpv4,

            string secondaryDnsAddressIpv4Variable,

            string secondaryDnsAddressIpv6,

            string secondaryDnsAddressIpv6Variable,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelServiceRouteResult> serviceRoutes,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelServiceResult> services,

            ImmutableArray<Outputs.GetServiceLanVpnProfileParcelStaticNatResult> staticNats,

            int version,

            int vpn,

            string vpnVariable)
        {
            AdvertiseOmpIpv4s = advertiseOmpIpv4s;
            AdvertiseOmpIpv6s = advertiseOmpIpv6s;
            ConfigDescription = configDescription;
            ConfigDescriptionVariable = configDescriptionVariable;
            Description = description;
            EnableSdwanRemoteAccess = enableSdwanRemoteAccess;
            FeatureProfileId = featureProfileId;
            GreRoutes = greRoutes;
            HostMappings = hostMappings;
            Id = id;
            IpsecRoutes = ipsecRoutes;
            Ipv4ExportRouteTargets = ipv4ExportRouteTargets;
            Ipv4ImportRouteTargets = ipv4ImportRouteTargets;
            Ipv4StaticRoutes = ipv4StaticRoutes;
            Ipv6ExportRouteTargets = ipv6ExportRouteTargets;
            Ipv6ImportRouteTargets = ipv6ImportRouteTargets;
            Ipv6StaticRoutes = ipv6StaticRoutes;
            Name = name;
            Nat64V4Pools = nat64V4Pools;
            NatPools = natPools;
            NatPortForwards = natPortForwards;
            OmpAdminDistanceIpv4 = ompAdminDistanceIpv4;
            OmpAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            OmpAdminDistanceIpv6 = ompAdminDistanceIpv6;
            OmpAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            PrimaryDnsAddressIpv4 = primaryDnsAddressIpv4;
            PrimaryDnsAddressIpv4Variable = primaryDnsAddressIpv4Variable;
            PrimaryDnsAddressIpv6 = primaryDnsAddressIpv6;
            PrimaryDnsAddressIpv6Variable = primaryDnsAddressIpv6Variable;
            RouteLeakFromGlobalVpns = routeLeakFromGlobalVpns;
            RouteLeakFromOtherServices = routeLeakFromOtherServices;
            RouteLeakToGlobalVpns = routeLeakToGlobalVpns;
            SecondaryDnsAddressIpv4 = secondaryDnsAddressIpv4;
            SecondaryDnsAddressIpv4Variable = secondaryDnsAddressIpv4Variable;
            SecondaryDnsAddressIpv6 = secondaryDnsAddressIpv6;
            SecondaryDnsAddressIpv6Variable = secondaryDnsAddressIpv6Variable;
            ServiceRoutes = serviceRoutes;
            Services = services;
            StaticNats = staticNats;
            Version = version;
            Vpn = vpn;
            VpnVariable = vpnVariable;
        }
    }
}
