// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Transport Management VPN Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.TransportManagementVpnFeature("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         VpnDescription = "example",
    ///         PrimaryDnsAddressIpv4 = "1.2.3.4",
    ///         SecondaryDnsAddressIpv4 = "2.3.4.5",
    ///         PrimaryDnsAddressIpv6 = "2001:0:0:1::0",
    ///         SecondaryDnsAddressIpv6 = "2001:0:0:2::0",
    ///         NewHostMappings = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportManagementVpnFeatureNewHostMappingArgs
    ///             {
    ///                 Host_name = "example",
    ///                 List_of_ip_addresses = new[]
    ///                 {
    ///                     "1.2.3.4",
    ///                 },
    ///             },
    ///         },
    ///         Ipv4StaticRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportManagementVpnFeatureIpv4StaticRouteArgs
    ///             {
    ///                 Network_address = "1.2.3.4",
    ///                 Subnet_mask = "0.0.0.0",
    ///                 Gateway = "nextHop",
    ///                 Next_hops = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "address", "1.2.3.4" },
    ///                         { "administrativeDistance", 1 },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv6StaticRoutes = new[]
    ///         {
    ///             new Sdwan.Inputs.TransportManagementVpnFeatureIpv6StaticRouteArgs
    ///             {
    ///                 Prefix = "2002::/16",
    ///                 Gateway = "nextHop",
    ///                 Next_hops = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "address", "2001:0:0:1::1" },
    ///                         { "administrativeDistance", 1 },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "transport_management_vpn_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/transportManagementVpnFeature:TransportManagementVpnFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/transportManagementVpnFeature:TransportManagementVpnFeature")]
    public partial class TransportManagementVpnFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        [Output("ipv4StaticRoutes")]
        public Output<ImmutableArray<Outputs.TransportManagementVpnFeatureIpv4StaticRoute>> Ipv4StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        [Output("ipv6StaticRoutes")]
        public Output<ImmutableArray<Outputs.TransportManagementVpnFeatureIpv6StaticRoute>> Ipv6StaticRoutes { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("newHostMappings")]
        public Output<ImmutableArray<Outputs.TransportManagementVpnFeatureNewHostMapping>> NewHostMappings { get; private set; } = null!;

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Output("primaryDnsAddressIpv4")]
        public Output<string?> PrimaryDnsAddressIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primaryDnsAddressIpv4Variable")]
        public Output<string?> PrimaryDnsAddressIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Output("primaryDnsAddressIpv6")]
        public Output<string?> PrimaryDnsAddressIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("primaryDnsAddressIpv6Variable")]
        public Output<string?> PrimaryDnsAddressIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Output("secondaryDnsAddressIpv4")]
        public Output<string?> SecondaryDnsAddressIpv4 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryDnsAddressIpv4Variable")]
        public Output<string?> SecondaryDnsAddressIpv4Variable { get; private set; } = null!;

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Output("secondaryDnsAddressIpv6")]
        public Output<string?> SecondaryDnsAddressIpv6 { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("secondaryDnsAddressIpv6Variable")]
        public Output<string?> SecondaryDnsAddressIpv6Variable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Name
        /// </summary>
        [Output("vpnDescription")]
        public Output<string?> VpnDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("vpnDescriptionVariable")]
        public Output<string?> VpnDescriptionVariable { get; private set; } = null!;


        /// <summary>
        /// Create a TransportManagementVpnFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TransportManagementVpnFeature(string name, TransportManagementVpnFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/transportManagementVpnFeature:TransportManagementVpnFeature", name, args ?? new TransportManagementVpnFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TransportManagementVpnFeature(string name, Input<string> id, TransportManagementVpnFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/transportManagementVpnFeature:TransportManagementVpnFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TransportManagementVpnFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TransportManagementVpnFeature Get(string name, Input<string> id, TransportManagementVpnFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new TransportManagementVpnFeature(name, id, state, options);
        }
    }

    public sealed class TransportManagementVpnFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.TransportManagementVpnFeatureIpv4StaticRouteArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public InputList<Inputs.TransportManagementVpnFeatureIpv4StaticRouteArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.TransportManagementVpnFeatureIpv4StaticRouteArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.TransportManagementVpnFeatureIpv6StaticRouteArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public InputList<Inputs.TransportManagementVpnFeatureIpv6StaticRouteArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.TransportManagementVpnFeatureIpv6StaticRouteArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("newHostMappings")]
        private InputList<Inputs.TransportManagementVpnFeatureNewHostMappingArgs>? _newHostMappings;
        public InputList<Inputs.TransportManagementVpnFeatureNewHostMappingArgs> NewHostMappings
        {
            get => _newHostMappings ?? (_newHostMappings = new InputList<Inputs.TransportManagementVpnFeatureNewHostMappingArgs>());
            set => _newHostMappings = value;
        }

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Input("primaryDnsAddressIpv4")]
        public Input<string>? PrimaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv4Variable")]
        public Input<string>? PrimaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Input("primaryDnsAddressIpv6")]
        public Input<string>? PrimaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv6Variable")]
        public Input<string>? PrimaryDnsAddressIpv6Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Input("secondaryDnsAddressIpv4")]
        public Input<string>? SecondaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv4Variable")]
        public Input<string>? SecondaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Input("secondaryDnsAddressIpv6")]
        public Input<string>? SecondaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv6Variable")]
        public Input<string>? SecondaryDnsAddressIpv6Variable { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("vpnDescription")]
        public Input<string>? VpnDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnDescriptionVariable")]
        public Input<string>? VpnDescriptionVariable { get; set; }

        public TransportManagementVpnFeatureArgs()
        {
        }
        public static new TransportManagementVpnFeatureArgs Empty => new TransportManagementVpnFeatureArgs();
    }

    public sealed class TransportManagementVpnFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        [Input("ipv4StaticRoutes")]
        private InputList<Inputs.TransportManagementVpnFeatureIpv4StaticRouteGetArgs>? _ipv4StaticRoutes;

        /// <summary>
        /// IPv4 Static Route
        /// </summary>
        public InputList<Inputs.TransportManagementVpnFeatureIpv4StaticRouteGetArgs> Ipv4StaticRoutes
        {
            get => _ipv4StaticRoutes ?? (_ipv4StaticRoutes = new InputList<Inputs.TransportManagementVpnFeatureIpv4StaticRouteGetArgs>());
            set => _ipv4StaticRoutes = value;
        }

        [Input("ipv6StaticRoutes")]
        private InputList<Inputs.TransportManagementVpnFeatureIpv6StaticRouteGetArgs>? _ipv6StaticRoutes;

        /// <summary>
        /// IPv6 Static Route
        /// </summary>
        public InputList<Inputs.TransportManagementVpnFeatureIpv6StaticRouteGetArgs> Ipv6StaticRoutes
        {
            get => _ipv6StaticRoutes ?? (_ipv6StaticRoutes = new InputList<Inputs.TransportManagementVpnFeatureIpv6StaticRouteGetArgs>());
            set => _ipv6StaticRoutes = value;
        }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("newHostMappings")]
        private InputList<Inputs.TransportManagementVpnFeatureNewHostMappingGetArgs>? _newHostMappings;
        public InputList<Inputs.TransportManagementVpnFeatureNewHostMappingGetArgs> NewHostMappings
        {
            get => _newHostMappings ?? (_newHostMappings = new InputList<Inputs.TransportManagementVpnFeatureNewHostMappingGetArgs>());
            set => _newHostMappings = value;
        }

        /// <summary>
        /// Primary DNS Address (IPv4)
        /// </summary>
        [Input("primaryDnsAddressIpv4")]
        public Input<string>? PrimaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv4Variable")]
        public Input<string>? PrimaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Primary DNS Address (IPv6)
        /// </summary>
        [Input("primaryDnsAddressIpv6")]
        public Input<string>? PrimaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("primaryDnsAddressIpv6Variable")]
        public Input<string>? PrimaryDnsAddressIpv6Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv4)
        /// </summary>
        [Input("secondaryDnsAddressIpv4")]
        public Input<string>? SecondaryDnsAddressIpv4 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv4Variable")]
        public Input<string>? SecondaryDnsAddressIpv4Variable { get; set; }

        /// <summary>
        /// Secondary DNS Address (IPv6)
        /// </summary>
        [Input("secondaryDnsAddressIpv6")]
        public Input<string>? SecondaryDnsAddressIpv6 { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("secondaryDnsAddressIpv6Variable")]
        public Input<string>? SecondaryDnsAddressIpv6Variable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        [Input("vpnDescription")]
        public Input<string>? VpnDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vpnDescriptionVariable")]
        public Input<string>? VpnDescriptionVariable { get; set; }

        public TransportManagementVpnFeatureState()
        {
        }
        public static new TransportManagementVpnFeatureState Empty => new TransportManagementVpnFeatureState();
    }
}
