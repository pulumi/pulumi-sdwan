// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetSystemLoggingFeature
    {
        /// <summary>
        /// This data source can read the System Logging Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSystemLoggingFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSystemLoggingFeatureResult> InvokeAsync(GetSystemLoggingFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSystemLoggingFeatureResult>("sdwan:index/getSystemLoggingFeature:getSystemLoggingFeature", args ?? new GetSystemLoggingFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the System Logging Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSystemLoggingFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSystemLoggingFeatureResult> Invoke(GetSystemLoggingFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSystemLoggingFeatureResult>("sdwan:index/getSystemLoggingFeature:getSystemLoggingFeature", args ?? new GetSystemLoggingFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the System Logging Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSystemLoggingFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSystemLoggingFeatureResult> Invoke(GetSystemLoggingFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSystemLoggingFeatureResult>("sdwan:index/getSystemLoggingFeature:getSystemLoggingFeature", args ?? new GetSystemLoggingFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSystemLoggingFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSystemLoggingFeatureArgs()
        {
        }
        public static new GetSystemLoggingFeatureArgs Empty => new GetSystemLoggingFeatureArgs();
    }

    public sealed class GetSystemLoggingFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSystemLoggingFeatureInvokeArgs()
        {
        }
        public static new GetSystemLoggingFeatureInvokeArgs Empty => new GetSystemLoggingFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetSystemLoggingFeatureResult
    {
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Enable logging to local disk
        /// </summary>
        public readonly bool DiskEnable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DiskEnableVariable;
        /// <summary>
        /// Set number of syslog files to create before discarding oldest files
        /// </summary>
        public readonly int DiskFileRotate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DiskFileRotateVariable;
        /// <summary>
        /// Set maximum size of file before it is rotated
        /// </summary>
        public readonly int DiskFileSize;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DiskFileSizeVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable logging to remote server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemLoggingFeatureIpv4ServerResult> Ipv4Servers;
        /// <summary>
        /// Enable logging to remote ipv6 server
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemLoggingFeatureIpv6ServerResult> Ipv6Servers;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Configure a TLS profile
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemLoggingFeatureTlsProfileResult> TlsProfiles;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetSystemLoggingFeatureResult(
            string description,

            bool diskEnable,

            string diskEnableVariable,

            int diskFileRotate,

            string diskFileRotateVariable,

            int diskFileSize,

            string diskFileSizeVariable,

            string featureProfileId,

            string id,

            ImmutableArray<Outputs.GetSystemLoggingFeatureIpv4ServerResult> ipv4Servers,

            ImmutableArray<Outputs.GetSystemLoggingFeatureIpv6ServerResult> ipv6Servers,

            string name,

            ImmutableArray<Outputs.GetSystemLoggingFeatureTlsProfileResult> tlsProfiles,

            int version)
        {
            Description = description;
            DiskEnable = diskEnable;
            DiskEnableVariable = diskEnableVariable;
            DiskFileRotate = diskFileRotate;
            DiskFileRotateVariable = diskFileRotateVariable;
            DiskFileSize = diskFileSize;
            DiskFileSizeVariable = diskFileSizeVariable;
            FeatureProfileId = featureProfileId;
            Id = id;
            Ipv4Servers = ipv4Servers;
            Ipv6Servers = ipv6Servers;
            Name = name;
            TlsProfiles = tlsProfiles;
            Version = version;
        }
    }
}
