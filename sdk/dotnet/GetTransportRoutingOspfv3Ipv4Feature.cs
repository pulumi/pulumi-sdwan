// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportRoutingOspfv3Ipv4Feature
    {
        /// <summary>
        /// This data source can read the Transport Routing OSPFv3 IPv4 Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportRoutingOspfv3Ipv4Feature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportRoutingOspfv3Ipv4FeatureResult> InvokeAsync(GetTransportRoutingOspfv3Ipv4FeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportRoutingOspfv3Ipv4FeatureResult>("sdwan:index/getTransportRoutingOspfv3Ipv4Feature:getTransportRoutingOspfv3Ipv4Feature", args ?? new GetTransportRoutingOspfv3Ipv4FeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport Routing OSPFv3 IPv4 Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportRoutingOspfv3Ipv4Feature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportRoutingOspfv3Ipv4FeatureResult> Invoke(GetTransportRoutingOspfv3Ipv4FeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportRoutingOspfv3Ipv4FeatureResult>("sdwan:index/getTransportRoutingOspfv3Ipv4Feature:getTransportRoutingOspfv3Ipv4Feature", args ?? new GetTransportRoutingOspfv3Ipv4FeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportRoutingOspfv3Ipv4FeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTransportRoutingOspfv3Ipv4FeatureArgs()
        {
        }
        public static new GetTransportRoutingOspfv3Ipv4FeatureArgs Empty => new GetTransportRoutingOspfv3Ipv4FeatureArgs();
    }

    public sealed class GetTransportRoutingOspfv3Ipv4FeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTransportRoutingOspfv3Ipv4FeatureInvokeArgs()
        {
        }
        public static new GetTransportRoutingOspfv3Ipv4FeatureInvokeArgs Empty => new GetTransportRoutingOspfv3Ipv4FeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportRoutingOspfv3Ipv4FeatureResult
    {
        /// <summary>
        /// Configure OSPFv3 IPv4 area
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaResult> Areas;
        /// <summary>
        /// Distribute default external route into OSPF disabled
        /// </summary>
        public readonly bool DefaultInformationOriginate;
        /// <summary>
        /// Always advertise default route
        /// </summary>
        public readonly bool DefaultInformationOriginateAlways;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DefaultInformationOriginateAlwaysVariable;
        /// <summary>
        /// Set metric used to generate default route \n\n
        /// </summary>
        public readonly int DefaultInformationOriginateMetric;
        /// <summary>
        /// Set default route metric type
        /// </summary>
        public readonly string DefaultInformationOriginateMetricType;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DefaultInformationOriginateMetricTypeVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DefaultInformationOriginateMetricVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Distance
        /// </summary>
        public readonly int Distance;
        /// <summary>
        /// Set distance for external routes
        /// </summary>
        public readonly int DistanceExternal;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceExternalVariable;
        /// <summary>
        /// Set distance for inter-area routes
        /// </summary>
        public readonly int DistanceInterArea;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceInterAreaVariable;
        /// <summary>
        /// Set distance for intra-area routes
        /// </summary>
        public readonly int DistanceIntraArea;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceIntraAreaVariable;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DistanceVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// Table map filtered or not
        /// </summary>
        public readonly bool Filter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string FilterVariable;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Redistribute routes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingOspfv3Ipv4FeatureRedistributeResult> Redistributes;
        /// <summary>
        /// Set reference bandwidth method to assign OSPF cost
        /// </summary>
        public readonly int ReferenceBandwidth;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ReferenceBandwidthVariable;
        /// <summary>
        /// Calculate summary route cost based on RFC 1583
        /// </summary>
        public readonly bool Rfc1583Compatible;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Rfc1583CompatibleVariable;
        public readonly string RoutePolicyId;
        /// <summary>
        /// Set OSPF router ID to override system IP address
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RouterIdVariable;
        /// <summary>
        /// Not advertise maximum metric Router LSA policy by default
        /// </summary>
        public readonly string RouterLsaAction;
        /// <summary>
        /// Set how long to advertise maximum metric after router boot up
        /// </summary>
        public readonly int RouterLsaOnStartupTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RouterLsaOnStartupTimeVariable;
        /// <summary>
        /// Set delay from first change received until performing SPF calculation
        /// </summary>
        public readonly int SpfCalculationDelay;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpfCalculationDelayVariable;
        /// <summary>
        /// Set initial hold time between consecutive SPF calculations
        /// </summary>
        public readonly int SpfInitialHoldTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpfInitialHoldTimeVariable;
        /// <summary>
        /// Set maximum hold time between consecutive SPF calculations
        /// </summary>
        public readonly int SpfMaximumHoldTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string SpfMaximumHoldTimeVariable;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetTransportRoutingOspfv3Ipv4FeatureResult(
            ImmutableArray<Outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaResult> areas,

            bool defaultInformationOriginate,

            bool defaultInformationOriginateAlways,

            string defaultInformationOriginateAlwaysVariable,

            int defaultInformationOriginateMetric,

            string defaultInformationOriginateMetricType,

            string defaultInformationOriginateMetricTypeVariable,

            string defaultInformationOriginateMetricVariable,

            string description,

            int distance,

            int distanceExternal,

            string distanceExternalVariable,

            int distanceInterArea,

            string distanceInterAreaVariable,

            int distanceIntraArea,

            string distanceIntraAreaVariable,

            string distanceVariable,

            string featureProfileId,

            bool filter,

            string filterVariable,

            string id,

            string name,

            ImmutableArray<Outputs.GetTransportRoutingOspfv3Ipv4FeatureRedistributeResult> redistributes,

            int referenceBandwidth,

            string referenceBandwidthVariable,

            bool rfc1583Compatible,

            string rfc1583CompatibleVariable,

            string routePolicyId,

            string routerId,

            string routerIdVariable,

            string routerLsaAction,

            int routerLsaOnStartupTime,

            string routerLsaOnStartupTimeVariable,

            int spfCalculationDelay,

            string spfCalculationDelayVariable,

            int spfInitialHoldTime,

            string spfInitialHoldTimeVariable,

            int spfMaximumHoldTime,

            string spfMaximumHoldTimeVariable,

            int version)
        {
            Areas = areas;
            DefaultInformationOriginate = defaultInformationOriginate;
            DefaultInformationOriginateAlways = defaultInformationOriginateAlways;
            DefaultInformationOriginateAlwaysVariable = defaultInformationOriginateAlwaysVariable;
            DefaultInformationOriginateMetric = defaultInformationOriginateMetric;
            DefaultInformationOriginateMetricType = defaultInformationOriginateMetricType;
            DefaultInformationOriginateMetricTypeVariable = defaultInformationOriginateMetricTypeVariable;
            DefaultInformationOriginateMetricVariable = defaultInformationOriginateMetricVariable;
            Description = description;
            Distance = distance;
            DistanceExternal = distanceExternal;
            DistanceExternalVariable = distanceExternalVariable;
            DistanceInterArea = distanceInterArea;
            DistanceInterAreaVariable = distanceInterAreaVariable;
            DistanceIntraArea = distanceIntraArea;
            DistanceIntraAreaVariable = distanceIntraAreaVariable;
            DistanceVariable = distanceVariable;
            FeatureProfileId = featureProfileId;
            Filter = filter;
            FilterVariable = filterVariable;
            Id = id;
            Name = name;
            Redistributes = redistributes;
            ReferenceBandwidth = referenceBandwidth;
            ReferenceBandwidthVariable = referenceBandwidthVariable;
            Rfc1583Compatible = rfc1583Compatible;
            Rfc1583CompatibleVariable = rfc1583CompatibleVariable;
            RoutePolicyId = routePolicyId;
            RouterId = routerId;
            RouterIdVariable = routerIdVariable;
            RouterLsaAction = routerLsaAction;
            RouterLsaOnStartupTime = routerLsaOnStartupTime;
            RouterLsaOnStartupTimeVariable = routerLsaOnStartupTimeVariable;
            SpfCalculationDelay = spfCalculationDelay;
            SpfCalculationDelayVariable = spfCalculationDelayVariable;
            SpfInitialHoldTime = spfInitialHoldTime;
            SpfInitialHoldTimeVariable = spfInitialHoldTimeVariable;
            SpfMaximumHoldTime = spfMaximumHoldTime;
            SpfMaximumHoldTimeVariable = spfMaximumHoldTimeVariable;
            Version = version;
        }
    }
}
