// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco BGP feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.CiscoBgpFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         AsNumber = "65000",
    ///         Shutdown = true,
    ///         RouterId = "1.2.3.4",
    ///         PropagateAspath = true,
    ///         PropagateCommunity = true,
    ///         Ipv4RouteTargets = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetArgs
    ///             {
    ///                 Vpn_id = 1,
    ///                 Export = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "asnIp", "10:100" },
    ///                     },
    ///                 },
    ///                 Import = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "asnIp", "10:100" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv6RouteTargets = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetArgs
    ///             {
    ///                 Vpn_id = 1,
    ///                 Export = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "asnIp", "10:100" },
    ///                     },
    ///                 },
    ///                 Import = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "asnIp", "10:100" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         MplsInterfaces = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoBgpFeatureTemplateMplsInterfaceArgs
    ///             {
    ///                 Interface_name = "GigabitEthernet0",
    ///             },
    ///         },
    ///         DistanceExternal = 30,
    ///         DistanceInternal = 210,
    ///         DistanceLocal = 30,
    ///         Keepalive = 90,
    ///         Holdtime = 220,
    ///         AlwaysCompareMed = true,
    ///         DeterministicMed = true,
    ///         MissingMedWorst = true,
    ///         CompareRouterId = true,
    ///         MultipathRelax = true,
    ///         AddressFamilies = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoBgpFeatureTemplateAddressFamilyArgs
    ///             {
    ///                 Family_type = "ipv4-unicast",
    ///                 Ipv4_aggregate_addresses = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "prefix", "10.0.0.0/8" },
    ///                         { "asSetPath", true },
    ///                         { "summaryOnly", true },
    ///                     },
    ///                 },
    ///                 Ipv4_networks = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "prefix", "10.2.2.0/24" },
    ///                     },
    ///                 },
    ///                 Maximum_paths = 8,
    ///                 Default_information_originate = true,
    ///                 Table_map_policy = "MAP1",
    ///                 Table_map_filter = true,
    ///                 Redistribute_routes = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "protocol", "ospf" },
    ///                         { "routePolicy", "POLICY1" },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv4Neighbors = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoBgpFeatureTemplateIpv4NeighborArgs
    ///             {
    ///                 Address = "10.2.2.2",
    ///                 Description = "My neighbor",
    ///                 Shutdown = true,
    ///                 Remote_as = "65001",
    ///                 Keepalive = 30,
    ///                 Holdtime = 90,
    ///                 Source_interface = "GigabitEthernet1",
    ///                 Next_hop_self = true,
    ///                 Send_community = false,
    ///                 Send_ext_community = false,
    ///                 Ebgp_multihop = 10,
    ///                 Password = "cisco123",
    ///                 Send_label = true,
    ///                 Send_label_explicit = true,
    ///                 As_override = true,
    ///                 Allow_as_in = 5,
    ///                 Address_families = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "familyType", "ipv4-unicast" },
    ///                         { "maximumPrefixes", 10000 },
    ///                         { "maximumPrefixesThreshold", 80 },
    ///                         { "maximumPrefixesRestart", 180 },
    ///                         { "maximumPrefixesWarningOnly", true },
    ///                         { "routePolicies", new[]
    ///                         {
    ///                             
    ///                             {
    ///                                 { "direction", "in" },
    ///                                 { "policyName", "POLICY1" },
    ///                             },
    ///                         } },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         Ipv6Neighbors = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoBgpFeatureTemplateIpv6NeighborArgs
    ///             {
    ///                 Address = "2001:1::1",
    ///                 Description = "My neighbor",
    ///                 Shutdown = true,
    ///                 Remote_as = "65001",
    ///                 Keepalive = 30,
    ///                 Holdtime = 90,
    ///                 Source_interface = "GigabitEthernet1",
    ///                 Next_hop_self = true,
    ///                 Send_community = false,
    ///                 Send_ext_community = false,
    ///                 Ebgp_multihop = 10,
    ///                 Password = "cisco123",
    ///                 Send_label = true,
    ///                 Send_label_explicit = true,
    ///                 As_override = true,
    ///                 Allow_as_in = 5,
    ///                 Address_families = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "familyType", "ipv6-unicast" },
    ///                         { "maximumPrefixes", 10000 },
    ///                         { "maximumPrefixesThreshold", 80 },
    ///                         { "maximumPrefixesRestart", 180 },
    ///                         { "maximumPrefixesWarningOnly", true },
    ///                         { "routePolicies", new[]
    ///                         {
    ///                             
    ///                             {
    ///                                 { "direction", "in" },
    ///                                 { "policyName", "POLICY1" },
    ///                             },
    ///                         } },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoBgpFeatureTemplate:CiscoBgpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoBgpFeatureTemplate:CiscoBgpFeatureTemplate")]
    public partial class CiscoBgpFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set BGP address family
        /// </summary>
        [Output("addressFamilies")]
        public Output<ImmutableArray<Outputs.CiscoBgpFeatureTemplateAddressFamily>> AddressFamilies { get; private set; } = null!;

        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("alwaysCompareMed")]
        public Output<bool?> AlwaysCompareMed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("alwaysCompareMedVariable")]
        public Output<string?> AlwaysCompareMedVariable { get; private set; } = null!;

        /// <summary>
        /// Set autonomous system number &lt;1..4294967295&gt; or &lt;XX.YY&gt;
        /// </summary>
        [Output("asNumber")]
        public Output<string?> AsNumber { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("asNumberVariable")]
        public Output<string?> AsNumberVariable { get; private set; } = null!;

        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("compareRouterId")]
        public Output<bool?> CompareRouterId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("compareRouterIdVariable")]
        public Output<string?> CompareRouterIdVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("deterministicMed")]
        public Output<bool?> DeterministicMed { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("deterministicMedVariable")]
        public Output<string?> DeterministicMedVariable { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for external BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Output("distanceExternal")]
        public Output<int?> DistanceExternal { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("distanceExternalVariable")]
        public Output<string?> DistanceExternalVariable { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for internal BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `200`
        /// </summary>
        [Output("distanceInternal")]
        public Output<int?> DistanceInternal { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("distanceInternalVariable")]
        public Output<string?> DistanceInternalVariable { get; private set; } = null!;

        /// <summary>
        /// Set administrative distance for local BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Output("distanceLocal")]
        public Output<int?> DistanceLocal { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("distanceLocalVariable")]
        public Output<string?> DistanceLocalVariable { get; private set; } = null!;

        /// <summary>
        /// Set the interval when BGP considers a neighbor to be down
        ///   - Range: `0`-`65535`
        ///   - Default value: `180`
        /// </summary>
        [Output("holdtime")]
        public Output<int?> Holdtime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("holdtimeVariable")]
        public Output<string?> HoldtimeVariable { get; private set; } = null!;

        /// <summary>
        /// Set BGP neighbors
        /// </summary>
        [Output("ipv4Neighbors")]
        public Output<ImmutableArray<Outputs.CiscoBgpFeatureTemplateIpv4Neighbor>> Ipv4Neighbors { get; private set; } = null!;

        /// <summary>
        /// Router Target for IPV4
        /// </summary>
        [Output("ipv4RouteTargets")]
        public Output<ImmutableArray<Outputs.CiscoBgpFeatureTemplateIpv4RouteTarget>> Ipv4RouteTargets { get; private set; } = null!;

        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        [Output("ipv6Neighbors")]
        public Output<ImmutableArray<Outputs.CiscoBgpFeatureTemplateIpv6Neighbor>> Ipv6Neighbors { get; private set; } = null!;

        /// <summary>
        /// Router Target for IPV6
        /// </summary>
        [Output("ipv6RouteTargets")]
        public Output<ImmutableArray<Outputs.CiscoBgpFeatureTemplateIpv6RouteTarget>> Ipv6RouteTargets { get; private set; } = null!;

        /// <summary>
        /// Set how often keepalive messages are sent to BGP peer
        ///   - Range: `0`-`65535`
        ///   - Default value: `60`
        /// </summary>
        [Output("keepalive")]
        public Output<int?> Keepalive { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("keepaliveVariable")]
        public Output<string?> KeepaliveVariable { get; private set; } = null!;

        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Output("missingMedWorst")]
        public Output<bool?> MissingMedWorst { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("missingMedWorstVariable")]
        public Output<string?> MissingMedWorstVariable { get; private set; } = null!;

        /// <summary>
        /// MPLS BGP Interface
        /// </summary>
        [Output("mplsInterfaces")]
        public Output<ImmutableArray<Outputs.CiscoBgpFeatureTemplateMplsInterface>> MplsInterfaces { get; private set; } = null!;

        /// <summary>
        /// Ignore AS for multipath selection
        ///   - Default value: `False`
        /// </summary>
        [Output("multipathRelax")]
        public Output<bool?> MultipathRelax { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("multipathRelaxVariable")]
        public Output<string?> MultipathRelaxVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Propagate AS Path 
        ///   - Default value: `False`
        /// </summary>
        [Output("propagateAspath")]
        public Output<bool?> PropagateAspath { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("propagateAspathVariable")]
        public Output<string?> PropagateAspathVariable { get; private set; } = null!;

        /// <summary>
        /// Propagate Community
        ///   - Default value: `False`
        /// </summary>
        [Output("propagateCommunity")]
        public Output<bool?> PropagateCommunity { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("propagateCommunityVariable")]
        public Output<string?> PropagateCommunityVariable { get; private set; } = null!;

        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        [Output("routerId")]
        public Output<string?> RouterId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("routerIdVariable")]
        public Output<string?> RouterIdVariable { get; private set; } = null!;

        /// <summary>
        /// Enable or disable BGP
        ///   - Default value: `False`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoBgpFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoBgpFeatureTemplate(string name, CiscoBgpFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoBgpFeatureTemplate:CiscoBgpFeatureTemplate", name, args ?? new CiscoBgpFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoBgpFeatureTemplate(string name, Input<string> id, CiscoBgpFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoBgpFeatureTemplate:CiscoBgpFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoBgpFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoBgpFeatureTemplate Get(string name, Input<string> id, CiscoBgpFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoBgpFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoBgpFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("addressFamilies")]
        private InputList<Inputs.CiscoBgpFeatureTemplateAddressFamilyArgs>? _addressFamilies;

        /// <summary>
        /// Set BGP address family
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateAddressFamilyArgs> AddressFamilies
        {
            get => _addressFamilies ?? (_addressFamilies = new InputList<Inputs.CiscoBgpFeatureTemplateAddressFamilyArgs>());
            set => _addressFamilies = value;
        }

        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("alwaysCompareMed")]
        public Input<bool>? AlwaysCompareMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("alwaysCompareMedVariable")]
        public Input<string>? AlwaysCompareMedVariable { get; set; }

        /// <summary>
        /// Set autonomous system number &lt;1..4294967295&gt; or &lt;XX.YY&gt;
        /// </summary>
        [Input("asNumber")]
        public Input<string>? AsNumber { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("asNumberVariable")]
        public Input<string>? AsNumberVariable { get; set; }

        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("compareRouterId")]
        public Input<bool>? CompareRouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("compareRouterIdVariable")]
        public Input<string>? CompareRouterIdVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("deterministicMed")]
        public Input<bool>? DeterministicMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deterministicMedVariable")]
        public Input<string>? DeterministicMedVariable { get; set; }

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Set administrative distance for external BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("distanceExternal")]
        public Input<int>? DistanceExternal { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("distanceExternalVariable")]
        public Input<string>? DistanceExternalVariable { get; set; }

        /// <summary>
        /// Set administrative distance for internal BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `200`
        /// </summary>
        [Input("distanceInternal")]
        public Input<int>? DistanceInternal { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("distanceInternalVariable")]
        public Input<string>? DistanceInternalVariable { get; set; }

        /// <summary>
        /// Set administrative distance for local BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("distanceLocal")]
        public Input<int>? DistanceLocal { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("distanceLocalVariable")]
        public Input<string>? DistanceLocalVariable { get; set; }

        /// <summary>
        /// Set the interval when BGP considers a neighbor to be down
        ///   - Range: `0`-`65535`
        ///   - Default value: `180`
        /// </summary>
        [Input("holdtime")]
        public Input<int>? Holdtime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("holdtimeVariable")]
        public Input<string>? HoldtimeVariable { get; set; }

        [Input("ipv4Neighbors")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv4NeighborArgs>? _ipv4Neighbors;

        /// <summary>
        /// Set BGP neighbors
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv4NeighborArgs> Ipv4Neighbors
        {
            get => _ipv4Neighbors ?? (_ipv4Neighbors = new InputList<Inputs.CiscoBgpFeatureTemplateIpv4NeighborArgs>());
            set => _ipv4Neighbors = value;
        }

        [Input("ipv4RouteTargets")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetArgs>? _ipv4RouteTargets;

        /// <summary>
        /// Router Target for IPV4
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetArgs> Ipv4RouteTargets
        {
            get => _ipv4RouteTargets ?? (_ipv4RouteTargets = new InputList<Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetArgs>());
            set => _ipv4RouteTargets = value;
        }

        [Input("ipv6Neighbors")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv6NeighborArgs>? _ipv6Neighbors;

        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv6NeighborArgs> Ipv6Neighbors
        {
            get => _ipv6Neighbors ?? (_ipv6Neighbors = new InputList<Inputs.CiscoBgpFeatureTemplateIpv6NeighborArgs>());
            set => _ipv6Neighbors = value;
        }

        [Input("ipv6RouteTargets")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetArgs>? _ipv6RouteTargets;

        /// <summary>
        /// Router Target for IPV6
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetArgs> Ipv6RouteTargets
        {
            get => _ipv6RouteTargets ?? (_ipv6RouteTargets = new InputList<Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetArgs>());
            set => _ipv6RouteTargets = value;
        }

        /// <summary>
        /// Set how often keepalive messages are sent to BGP peer
        ///   - Range: `0`-`65535`
        ///   - Default value: `60`
        /// </summary>
        [Input("keepalive")]
        public Input<int>? Keepalive { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("keepaliveVariable")]
        public Input<string>? KeepaliveVariable { get; set; }

        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("missingMedWorst")]
        public Input<bool>? MissingMedWorst { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("missingMedWorstVariable")]
        public Input<string>? MissingMedWorstVariable { get; set; }

        [Input("mplsInterfaces")]
        private InputList<Inputs.CiscoBgpFeatureTemplateMplsInterfaceArgs>? _mplsInterfaces;

        /// <summary>
        /// MPLS BGP Interface
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateMplsInterfaceArgs> MplsInterfaces
        {
            get => _mplsInterfaces ?? (_mplsInterfaces = new InputList<Inputs.CiscoBgpFeatureTemplateMplsInterfaceArgs>());
            set => _mplsInterfaces = value;
        }

        /// <summary>
        /// Ignore AS for multipath selection
        ///   - Default value: `False`
        /// </summary>
        [Input("multipathRelax")]
        public Input<bool>? MultipathRelax { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("multipathRelaxVariable")]
        public Input<string>? MultipathRelaxVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Propagate AS Path 
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateAspath")]
        public Input<bool>? PropagateAspath { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateAspathVariable")]
        public Input<string>? PropagateAspathVariable { get; set; }

        /// <summary>
        /// Propagate Community
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateCommunity")]
        public Input<bool>? PropagateCommunity { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateCommunityVariable")]
        public Input<string>? PropagateCommunityVariable { get; set; }

        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("routerIdVariable")]
        public Input<string>? RouterIdVariable { get; set; }

        /// <summary>
        /// Enable or disable BGP
        ///   - Default value: `False`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        public CiscoBgpFeatureTemplateArgs()
        {
        }
        public static new CiscoBgpFeatureTemplateArgs Empty => new CiscoBgpFeatureTemplateArgs();
    }

    public sealed class CiscoBgpFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("addressFamilies")]
        private InputList<Inputs.CiscoBgpFeatureTemplateAddressFamilyGetArgs>? _addressFamilies;

        /// <summary>
        /// Set BGP address family
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateAddressFamilyGetArgs> AddressFamilies
        {
            get => _addressFamilies ?? (_addressFamilies = new InputList<Inputs.CiscoBgpFeatureTemplateAddressFamilyGetArgs>());
            set => _addressFamilies = value;
        }

        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("alwaysCompareMed")]
        public Input<bool>? AlwaysCompareMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("alwaysCompareMedVariable")]
        public Input<string>? AlwaysCompareMedVariable { get; set; }

        /// <summary>
        /// Set autonomous system number &lt;1..4294967295&gt; or &lt;XX.YY&gt;
        /// </summary>
        [Input("asNumber")]
        public Input<string>? AsNumber { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("asNumberVariable")]
        public Input<string>? AsNumberVariable { get; set; }

        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("compareRouterId")]
        public Input<bool>? CompareRouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("compareRouterIdVariable")]
        public Input<string>? CompareRouterIdVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("deterministicMed")]
        public Input<bool>? DeterministicMed { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deterministicMedVariable")]
        public Input<string>? DeterministicMedVariable { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Set administrative distance for external BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("distanceExternal")]
        public Input<int>? DistanceExternal { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("distanceExternalVariable")]
        public Input<string>? DistanceExternalVariable { get; set; }

        /// <summary>
        /// Set administrative distance for internal BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `200`
        /// </summary>
        [Input("distanceInternal")]
        public Input<int>? DistanceInternal { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("distanceInternalVariable")]
        public Input<string>? DistanceInternalVariable { get; set; }

        /// <summary>
        /// Set administrative distance for local BGP routes
        ///   - Range: `1`-`255`
        ///   - Default value: `20`
        /// </summary>
        [Input("distanceLocal")]
        public Input<int>? DistanceLocal { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("distanceLocalVariable")]
        public Input<string>? DistanceLocalVariable { get; set; }

        /// <summary>
        /// Set the interval when BGP considers a neighbor to be down
        ///   - Range: `0`-`65535`
        ///   - Default value: `180`
        /// </summary>
        [Input("holdtime")]
        public Input<int>? Holdtime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("holdtimeVariable")]
        public Input<string>? HoldtimeVariable { get; set; }

        [Input("ipv4Neighbors")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv4NeighborGetArgs>? _ipv4Neighbors;

        /// <summary>
        /// Set BGP neighbors
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv4NeighborGetArgs> Ipv4Neighbors
        {
            get => _ipv4Neighbors ?? (_ipv4Neighbors = new InputList<Inputs.CiscoBgpFeatureTemplateIpv4NeighborGetArgs>());
            set => _ipv4Neighbors = value;
        }

        [Input("ipv4RouteTargets")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetGetArgs>? _ipv4RouteTargets;

        /// <summary>
        /// Router Target for IPV4
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetGetArgs> Ipv4RouteTargets
        {
            get => _ipv4RouteTargets ?? (_ipv4RouteTargets = new InputList<Inputs.CiscoBgpFeatureTemplateIpv4RouteTargetGetArgs>());
            set => _ipv4RouteTargets = value;
        }

        [Input("ipv6Neighbors")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv6NeighborGetArgs>? _ipv6Neighbors;

        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv6NeighborGetArgs> Ipv6Neighbors
        {
            get => _ipv6Neighbors ?? (_ipv6Neighbors = new InputList<Inputs.CiscoBgpFeatureTemplateIpv6NeighborGetArgs>());
            set => _ipv6Neighbors = value;
        }

        [Input("ipv6RouteTargets")]
        private InputList<Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetGetArgs>? _ipv6RouteTargets;

        /// <summary>
        /// Router Target for IPV6
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetGetArgs> Ipv6RouteTargets
        {
            get => _ipv6RouteTargets ?? (_ipv6RouteTargets = new InputList<Inputs.CiscoBgpFeatureTemplateIpv6RouteTargetGetArgs>());
            set => _ipv6RouteTargets = value;
        }

        /// <summary>
        /// Set how often keepalive messages are sent to BGP peer
        ///   - Range: `0`-`65535`
        ///   - Default value: `60`
        /// </summary>
        [Input("keepalive")]
        public Input<int>? Keepalive { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("keepaliveVariable")]
        public Input<string>? KeepaliveVariable { get; set; }

        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        ///   - Default value: `False`
        /// </summary>
        [Input("missingMedWorst")]
        public Input<bool>? MissingMedWorst { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("missingMedWorstVariable")]
        public Input<string>? MissingMedWorstVariable { get; set; }

        [Input("mplsInterfaces")]
        private InputList<Inputs.CiscoBgpFeatureTemplateMplsInterfaceGetArgs>? _mplsInterfaces;

        /// <summary>
        /// MPLS BGP Interface
        /// </summary>
        public InputList<Inputs.CiscoBgpFeatureTemplateMplsInterfaceGetArgs> MplsInterfaces
        {
            get => _mplsInterfaces ?? (_mplsInterfaces = new InputList<Inputs.CiscoBgpFeatureTemplateMplsInterfaceGetArgs>());
            set => _mplsInterfaces = value;
        }

        /// <summary>
        /// Ignore AS for multipath selection
        ///   - Default value: `False`
        /// </summary>
        [Input("multipathRelax")]
        public Input<bool>? MultipathRelax { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("multipathRelaxVariable")]
        public Input<string>? MultipathRelaxVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Propagate AS Path 
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateAspath")]
        public Input<bool>? PropagateAspath { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateAspathVariable")]
        public Input<string>? PropagateAspathVariable { get; set; }

        /// <summary>
        /// Propagate Community
        ///   - Default value: `False`
        /// </summary>
        [Input("propagateCommunity")]
        public Input<bool>? PropagateCommunity { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("propagateCommunityVariable")]
        public Input<string>? PropagateCommunityVariable { get; set; }

        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        [Input("routerId")]
        public Input<string>? RouterId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("routerIdVariable")]
        public Input<string>? RouterIdVariable { get; set; }

        /// <summary>
        /// Enable or disable BGP
        ///   - Default value: `False`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoBgpFeatureTemplateState()
        {
        }
        public static new CiscoBgpFeatureTemplateState Empty => new CiscoBgpFeatureTemplateState();
    }
}
