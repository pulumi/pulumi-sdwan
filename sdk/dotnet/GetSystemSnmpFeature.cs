// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetSystemSnmpFeature
    {
        /// <summary>
        /// This data source can read the System SNMP Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSystemSnmpFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSystemSnmpFeatureResult> InvokeAsync(GetSystemSnmpFeatureArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSystemSnmpFeatureResult>("sdwan:index/getSystemSnmpFeature:getSystemSnmpFeature", args ?? new GetSystemSnmpFeatureArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the System SNMP Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSystemSnmpFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSystemSnmpFeatureResult> Invoke(GetSystemSnmpFeatureInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSystemSnmpFeatureResult>("sdwan:index/getSystemSnmpFeature:getSystemSnmpFeature", args ?? new GetSystemSnmpFeatureInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the System SNMP Feature.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetSystemSnmpFeature.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSystemSnmpFeatureResult> Invoke(GetSystemSnmpFeatureInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSystemSnmpFeatureResult>("sdwan:index/getSystemSnmpFeature:getSystemSnmpFeature", args ?? new GetSystemSnmpFeatureInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSystemSnmpFeatureArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSystemSnmpFeatureArgs()
        {
        }
        public static new GetSystemSnmpFeatureArgs Empty => new GetSystemSnmpFeatureArgs();
    }

    public sealed class GetSystemSnmpFeatureInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the Feature
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSystemSnmpFeatureInvokeArgs()
        {
        }
        public static new GetSystemSnmpFeatureInvokeArgs Empty => new GetSystemSnmpFeatureInvokeArgs();
    }


    [OutputType]
    public sealed class GetSystemSnmpFeatureResult
    {
        /// <summary>
        /// Configure SNMP community
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemSnmpFeatureCommunityResult> Communities;
        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        public readonly string ContactPerson;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ContactPersonVariable;
        /// <summary>
        /// The description of the Feature
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemSnmpFeatureGroupResult> Groups;
        /// <summary>
        /// The id of the Feature
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        public readonly string LocationOfDevice;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LocationOfDeviceVariable;
        /// <summary>
        /// The name of the Feature
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Enable or disable SNMP
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemSnmpFeatureTrapTargetServerResult> TrapTargetServers;
        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemSnmpFeatureUserResult> Users;
        /// <summary>
        /// The version of the Feature
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Configure a view record
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemSnmpFeatureViewResult> Views;

        [OutputConstructor]
        private GetSystemSnmpFeatureResult(
            ImmutableArray<Outputs.GetSystemSnmpFeatureCommunityResult> communities,

            string contactPerson,

            string contactPersonVariable,

            string description,

            string featureProfileId,

            ImmutableArray<Outputs.GetSystemSnmpFeatureGroupResult> groups,

            string id,

            string locationOfDevice,

            string locationOfDeviceVariable,

            string name,

            bool shutdown,

            string shutdownVariable,

            ImmutableArray<Outputs.GetSystemSnmpFeatureTrapTargetServerResult> trapTargetServers,

            ImmutableArray<Outputs.GetSystemSnmpFeatureUserResult> users,

            int version,

            ImmutableArray<Outputs.GetSystemSnmpFeatureViewResult> views)
        {
            Communities = communities;
            ContactPerson = contactPerson;
            ContactPersonVariable = contactPersonVariable;
            Description = description;
            FeatureProfileId = featureProfileId;
            Groups = groups;
            Id = id;
            LocationOfDevice = locationOfDevice;
            LocationOfDeviceVariable = locationOfDeviceVariable;
            Name = name;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TrapTargetServers = trapTargetServers;
            Users = users;
            Version = version;
            Views = views;
        }
    }
}
