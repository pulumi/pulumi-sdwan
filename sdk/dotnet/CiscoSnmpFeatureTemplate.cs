// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco SNMP feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate")]
    public partial class CiscoSnmpFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure SNMP community
        /// </summary>
        [Output("communities")]
        public Output<ImmutableArray<Outputs.CiscoSnmpFeatureTemplateCommunity>> Communities { get; private set; } = null!;

        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        [Output("contact")]
        public Output<string?> Contact { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("contactVariable")]
        public Output<string?> ContactVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.CiscoSnmpFeatureTemplateGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("locationVariable")]
        public Output<string?> LocationVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable or disable SNMP - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        [Output("trapTargets")]
        public Output<ImmutableArray<Outputs.CiscoSnmpFeatureTemplateTrapTarget>> TrapTargets { get; private set; } = null!;

        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<Outputs.CiscoSnmpFeatureTemplateUser>> Users { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Configure a view record
        /// </summary>
        [Output("views")]
        public Output<ImmutableArray<Outputs.CiscoSnmpFeatureTemplateView>> Views { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoSnmpFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoSnmpFeatureTemplate(string name, CiscoSnmpFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate", name, args ?? new CiscoSnmpFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoSnmpFeatureTemplate(string name, Input<string> id, CiscoSnmpFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoSnmpFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoSnmpFeatureTemplate Get(string name, Input<string> id, CiscoSnmpFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoSnmpFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoSnmpFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("communities")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateCommunityArgs>? _communities;

        /// <summary>
        /// Configure SNMP community
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateCommunityArgs> Communities
        {
            get => _communities ?? (_communities = new InputList<Inputs.CiscoSnmpFeatureTemplateCommunityArgs>());
            set => _communities = value;
        }

        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        [Input("contact")]
        public Input<string>? Contact { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("contactVariable")]
        public Input<string>? ContactVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("groups")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateGroupArgs>? _groups;

        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateGroupArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.CiscoSnmpFeatureTemplateGroupArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("locationVariable")]
        public Input<string>? LocationVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable SNMP - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        [Input("trapTargets")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateTrapTargetArgs>? _trapTargets;

        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateTrapTargetArgs> TrapTargets
        {
            get => _trapTargets ?? (_trapTargets = new InputList<Inputs.CiscoSnmpFeatureTemplateTrapTargetArgs>());
            set => _trapTargets = value;
        }

        [Input("users")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateUserArgs>? _users;

        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateUserArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.CiscoSnmpFeatureTemplateUserArgs>());
            set => _users = value;
        }

        [Input("views")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateViewArgs>? _views;

        /// <summary>
        /// Configure a view record
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateViewArgs> Views
        {
            get => _views ?? (_views = new InputList<Inputs.CiscoSnmpFeatureTemplateViewArgs>());
            set => _views = value;
        }

        public CiscoSnmpFeatureTemplateArgs()
        {
        }
        public static new CiscoSnmpFeatureTemplateArgs Empty => new CiscoSnmpFeatureTemplateArgs();
    }

    public sealed class CiscoSnmpFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("communities")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateCommunityGetArgs>? _communities;

        /// <summary>
        /// Configure SNMP community
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateCommunityGetArgs> Communities
        {
            get => _communities ?? (_communities = new InputList<Inputs.CiscoSnmpFeatureTemplateCommunityGetArgs>());
            set => _communities = value;
        }

        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        [Input("contact")]
        public Input<string>? Contact { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("contactVariable")]
        public Input<string>? ContactVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        [Input("groups")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateGroupGetArgs>? _groups;

        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.CiscoSnmpFeatureTemplateGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("locationVariable")]
        public Input<string>? LocationVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable SNMP - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        [Input("trapTargets")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateTrapTargetGetArgs>? _trapTargets;

        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateTrapTargetGetArgs> TrapTargets
        {
            get => _trapTargets ?? (_trapTargets = new InputList<Inputs.CiscoSnmpFeatureTemplateTrapTargetGetArgs>());
            set => _trapTargets = value;
        }

        [Input("users")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateUserGetArgs>? _users;

        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateUserGetArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.CiscoSnmpFeatureTemplateUserGetArgs>());
            set => _users = value;
        }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        [Input("views")]
        private InputList<Inputs.CiscoSnmpFeatureTemplateViewGetArgs>? _views;

        /// <summary>
        /// Configure a view record
        /// </summary>
        public InputList<Inputs.CiscoSnmpFeatureTemplateViewGetArgs> Views
        {
            get => _views ?? (_views = new InputList<Inputs.CiscoSnmpFeatureTemplateViewGetArgs>());
            set => _views = value;
        }

        public CiscoSnmpFeatureTemplateState()
        {
        }
        public static new CiscoSnmpFeatureTemplateState Empty => new CiscoSnmpFeatureTemplateState();
    }
}
