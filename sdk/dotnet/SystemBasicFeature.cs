// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a System Basic Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "system_basic_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/systemBasicFeature:SystemBasicFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/systemBasicFeature:SystemBasicFeature")]
    public partial class SystemBasicFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Collect admin-tech before reboot due to daemon failure - Default value: `true`
        /// </summary>
        [Output("adminTechOnFailure")]
        public Output<bool?> AdminTechOnFailure { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("adminTechOnFailureVariable")]
        public Output<string?> AdminTechOnFailureVariable { get; private set; } = null!;

        /// <summary>
        /// Affinity Group Number - Range: `1`-`63`
        /// </summary>
        [Output("affinityGroupNumber")]
        public Output<int?> AffinityGroupNumber { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("affinityGroupNumberVariable")]
        public Output<string?> AffinityGroupNumberVariable { get; private set; } = null!;

        /// <summary>
        /// Affinity Group Preference
        /// </summary>
        [Output("affinityGroupPreferences")]
        public Output<ImmutableArray<int>> AffinityGroupPreferences { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("affinityGroupPreferencesVariable")]
        public Output<string?> AffinityGroupPreferencesVariable { get; private set; } = null!;

        /// <summary>
        /// Affinity Group Number for VRFs
        /// </summary>
        [Output("affinityPerVrfs")]
        public Output<ImmutableArray<Outputs.SystemBasicFeatureAffinityPerVrf>> AffinityPerVrfs { get; private set; } = null!;

        /// <summary>
        /// Affinity Group Preference Auto - Default value: `false`
        /// </summary>
        [Output("affinityPreferenceAuto")]
        public Output<bool?> AffinityPreferenceAuto { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("affinityPreferenceAutoVariable")]
        public Output<string?> AffinityPreferenceAutoVariable { get; private set; } = null!;

        /// <summary>
        /// Set a text description of the device
        /// </summary>
        [Output("configDescription")]
        public Output<string?> ConfigDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("configDescriptionVariable")]
        public Output<string?> ConfigDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
        /// value: `9600`
        /// </summary>
        [Output("consoleBaudRate")]
        public Output<string?> ConsoleBaudRate { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("consoleBaudRateVariable")]
        public Output<string?> ConsoleBaudRateVariable { get; private set; } = null!;

        /// <summary>
        /// Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
        /// </summary>
        [Output("controlSessionPps")]
        public Output<int?> ControlSessionPps { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("controlSessionPpsVariable")]
        public Output<string?> ControlSessionPpsVariable { get; private set; } = null!;

        /// <summary>
        /// Configure a list of comma-separated controller groups
        /// </summary>
        [Output("controllerGroups")]
        public Output<ImmutableArray<int>> ControllerGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("controllerGroupsVariable")]
        public Output<string?> ControllerGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Device groups
        /// </summary>
        [Output("deviceGroups")]
        public Output<ImmutableArray<string>> DeviceGroups { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("deviceGroupsVariable")]
        public Output<string?> DeviceGroupsVariable { get; private set; } = null!;

        /// <summary>
        /// Enable SLA Dampening and Enhanced App Routing. - Choices: `disabled`, `aggressive`, `moderate`, `conservative` - Default
        /// value: `disabled`
        /// </summary>
        [Output("enhancedAppAwareRouting")]
        public Output<string?> EnhancedAppAwareRouting { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enhancedAppAwareRoutingVariable")]
        public Output<string?> EnhancedAppAwareRoutingVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Enable Geo fencing - Default value: `false`
        /// </summary>
        [Output("gpsGeoFencingEnable")]
        public Output<bool?> GpsGeoFencingEnable { get; private set; } = null!;

        /// <summary>
        /// Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
        /// </summary>
        [Output("gpsGeoFencingRange")]
        public Output<int?> GpsGeoFencingRange { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("gpsGeoFencingRangeVariable")]
        public Output<string?> GpsGeoFencingRangeVariable { get; private set; } = null!;

        /// <summary>
        /// Set the device physical latitude - Range: `-90`-`90`
        /// </summary>
        [Output("gpsLatitude")]
        public Output<double?> GpsLatitude { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("gpsLatitudeVariable")]
        public Output<string?> GpsLatitudeVariable { get; private set; } = null!;

        /// <summary>
        /// Set the device physical longitude - Range: `-180`-`180`
        /// </summary>
        [Output("gpsLongitude")]
        public Output<double?> GpsLongitude { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("gpsLongitudeVariable")]
        public Output<string?> GpsLongitudeVariable { get; private set; } = null!;

        /// <summary>
        /// Enable device’s geo fencing SMS - Default value: `false`
        /// </summary>
        [Output("gpsSmsEnable")]
        public Output<bool?> GpsSmsEnable { get; private set; } = null!;

        /// <summary>
        /// Set device’s geo fencing SMS phone number
        /// </summary>
        [Output("gpsSmsMobileNumbers")]
        public Output<ImmutableArray<Outputs.SystemBasicFeatureGpsSmsMobileNumber>> GpsSmsMobileNumbers { get; private set; } = null!;

        /// <summary>
        /// Idle CLI timeout in minutes - Range: `0`-`300`
        /// </summary>
        [Output("idleTimeout")]
        public Output<int?> IdleTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("idleTimeoutVariable")]
        public Output<string?> IdleTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Set the location of the device
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("locationVariable")]
        public Output<string?> LocationVariable { get; private set; } = null!;

        /// <summary>
        /// Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
        /// </summary>
        [Output("maxOmpSessions")]
        public Output<int?> MaxOmpSessions { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("maxOmpSessionsVariable")]
        public Output<string?> MaxOmpSessionsVariable { get; private set; } = null!;

        /// <summary>
        /// Device is multi-tenant - Default value: `false`
        /// </summary>
        [Output("multiTenant")]
        public Output<bool?> MultiTenant { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("multiTenantVariable")]
        public Output<string?> MultiTenantVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable or disable On-demand Tunnel - Default value: `false`
        /// </summary>
        [Output("onDemandEnable")]
        public Output<bool?> OnDemandEnable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("onDemandEnableVariable")]
        public Output<string?> OnDemandEnableVariable { get; private set; } = null!;

        /// <summary>
        /// Set the idle timeout for on-demand tunnels - Range: `1`-`65535` - Default value: `10`
        /// </summary>
        [Output("onDemandIdleTimeout")]
        public Output<int?> OnDemandIdleTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("onDemandIdleTimeoutVariable")]
        public Output<string?> OnDemandIdleTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
        /// </summary>
        [Output("overlayId")]
        public Output<int?> OverlayId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("overlayIdVariable")]
        public Output<string?> OverlayIdVariable { get; private set; } = null!;

        /// <summary>
        /// Enable port hopping - Default value: `true`
        /// </summary>
        [Output("portHopping")]
        public Output<bool?> PortHopping { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("portHoppingVariable")]
        public Output<string?> PortHoppingVariable { get; private set; } = null!;

        /// <summary>
        /// Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
        /// </summary>
        [Output("portOffset")]
        public Output<int?> PortOffset { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("portOffsetVariable")]
        public Output<string?> PortOffsetVariable { get; private set; } = null!;

        /// <summary>
        /// Site Type
        /// </summary>
        [Output("siteTypes")]
        public Output<ImmutableArray<string>> SiteTypes { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("siteTypesVariable")]
        public Output<string?> SiteTypesVariable { get; private set; } = null!;

        /// <summary>
        /// Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
        /// `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
        /// `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
        /// `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
        /// `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
        /// `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
        /// `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
        /// `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
        /// `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
        /// `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
        /// `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
        /// `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
        /// `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
        /// `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
        /// `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
        /// `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
        /// `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
        /// `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
        /// `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
        /// `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
        /// `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
        /// `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
        /// `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
        /// `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
        /// `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
        /// `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
        /// `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
        /// `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
        /// `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
        /// `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
        /// `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
        /// `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
        /// `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
        /// `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
        /// `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
        /// `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
        /// `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
        /// `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
        /// `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
        /// `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
        /// `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
        /// `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
        /// `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
        /// `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
        /// `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
        /// `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
        /// `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
        /// `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
        /// `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
        /// `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
        /// `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
        /// `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
        /// `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
        /// `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
        /// `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
        /// `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
        /// `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
        /// `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
        /// `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
        /// `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
        /// `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
        /// `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
        /// `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
        /// `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
        /// `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
        /// `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
        /// `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
        /// `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
        /// `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
        /// `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
        /// `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
        /// `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
        /// `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
        /// `Africa/Harare`, `UTC` - Default value: `UTC`
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("timezoneVariable")]
        public Output<string?> TimezoneVariable { get; private set; } = null!;

        /// <summary>
        /// Enable or disable default gateway tracking - Default value: `true`
        /// </summary>
        [Output("trackDefaultGateway")]
        public Output<bool?> TrackDefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackDefaultGatewayVariable")]
        public Output<string?> TrackDefaultGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
        /// </summary>
        [Output("trackInterfaceTag")]
        public Output<int?> TrackInterfaceTag { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackInterfaceTagVariable")]
        public Output<string?> TrackInterfaceTagVariable { get; private set; } = null!;

        /// <summary>
        /// Configure tracking of transport - Default value: `true`
        /// </summary>
        [Output("trackTransport")]
        public Output<bool?> TrackTransport { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackTransportVariable")]
        public Output<string?> TrackTransportVariable { get; private set; } = null!;

        /// <summary>
        /// Enable transport gateway - Default value: `false`
        /// </summary>
        [Output("transportGateway")]
        public Output<bool?> TransportGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("transportGatewayVariable")]
        public Output<string?> TransportGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a SystemBasicFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemBasicFeature(string name, SystemBasicFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/systemBasicFeature:SystemBasicFeature", name, args ?? new SystemBasicFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemBasicFeature(string name, Input<string> id, SystemBasicFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/systemBasicFeature:SystemBasicFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemBasicFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemBasicFeature Get(string name, Input<string> id, SystemBasicFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemBasicFeature(name, id, state, options);
        }
    }

    public sealed class SystemBasicFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Collect admin-tech before reboot due to daemon failure - Default value: `true`
        /// </summary>
        [Input("adminTechOnFailure")]
        public Input<bool>? AdminTechOnFailure { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("adminTechOnFailureVariable")]
        public Input<string>? AdminTechOnFailureVariable { get; set; }

        /// <summary>
        /// Affinity Group Number - Range: `1`-`63`
        /// </summary>
        [Input("affinityGroupNumber")]
        public Input<int>? AffinityGroupNumber { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("affinityGroupNumberVariable")]
        public Input<string>? AffinityGroupNumberVariable { get; set; }

        [Input("affinityGroupPreferences")]
        private InputList<int>? _affinityGroupPreferences;

        /// <summary>
        /// Affinity Group Preference
        /// </summary>
        public InputList<int> AffinityGroupPreferences
        {
            get => _affinityGroupPreferences ?? (_affinityGroupPreferences = new InputList<int>());
            set => _affinityGroupPreferences = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("affinityGroupPreferencesVariable")]
        public Input<string>? AffinityGroupPreferencesVariable { get; set; }

        [Input("affinityPerVrfs")]
        private InputList<Inputs.SystemBasicFeatureAffinityPerVrfArgs>? _affinityPerVrfs;

        /// <summary>
        /// Affinity Group Number for VRFs
        /// </summary>
        public InputList<Inputs.SystemBasicFeatureAffinityPerVrfArgs> AffinityPerVrfs
        {
            get => _affinityPerVrfs ?? (_affinityPerVrfs = new InputList<Inputs.SystemBasicFeatureAffinityPerVrfArgs>());
            set => _affinityPerVrfs = value;
        }

        /// <summary>
        /// Affinity Group Preference Auto - Default value: `false`
        /// </summary>
        [Input("affinityPreferenceAuto")]
        public Input<bool>? AffinityPreferenceAuto { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("affinityPreferenceAutoVariable")]
        public Input<string>? AffinityPreferenceAutoVariable { get; set; }

        /// <summary>
        /// Set a text description of the device
        /// </summary>
        [Input("configDescription")]
        public Input<string>? ConfigDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("configDescriptionVariable")]
        public Input<string>? ConfigDescriptionVariable { get; set; }

        /// <summary>
        /// Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
        /// value: `9600`
        /// </summary>
        [Input("consoleBaudRate")]
        public Input<string>? ConsoleBaudRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("consoleBaudRateVariable")]
        public Input<string>? ConsoleBaudRateVariable { get; set; }

        /// <summary>
        /// Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
        /// </summary>
        [Input("controlSessionPps")]
        public Input<int>? ControlSessionPps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controlSessionPpsVariable")]
        public Input<string>? ControlSessionPpsVariable { get; set; }

        [Input("controllerGroups")]
        private InputList<int>? _controllerGroups;

        /// <summary>
        /// Configure a list of comma-separated controller groups
        /// </summary>
        public InputList<int> ControllerGroups
        {
            get => _controllerGroups ?? (_controllerGroups = new InputList<int>());
            set => _controllerGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerGroupsVariable")]
        public Input<string>? ControllerGroupsVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceGroups")]
        private InputList<string>? _deviceGroups;

        /// <summary>
        /// Device groups
        /// </summary>
        public InputList<string> DeviceGroups
        {
            get => _deviceGroups ?? (_deviceGroups = new InputList<string>());
            set => _deviceGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deviceGroupsVariable")]
        public Input<string>? DeviceGroupsVariable { get; set; }

        /// <summary>
        /// Enable SLA Dampening and Enhanced App Routing. - Choices: `disabled`, `aggressive`, `moderate`, `conservative` - Default
        /// value: `disabled`
        /// </summary>
        [Input("enhancedAppAwareRouting")]
        public Input<string>? EnhancedAppAwareRouting { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enhancedAppAwareRoutingVariable")]
        public Input<string>? EnhancedAppAwareRoutingVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Enable Geo fencing - Default value: `false`
        /// </summary>
        [Input("gpsGeoFencingEnable")]
        public Input<bool>? GpsGeoFencingEnable { get; set; }

        /// <summary>
        /// Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
        /// </summary>
        [Input("gpsGeoFencingRange")]
        public Input<int>? GpsGeoFencingRange { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsGeoFencingRangeVariable")]
        public Input<string>? GpsGeoFencingRangeVariable { get; set; }

        /// <summary>
        /// Set the device physical latitude - Range: `-90`-`90`
        /// </summary>
        [Input("gpsLatitude")]
        public Input<double>? GpsLatitude { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsLatitudeVariable")]
        public Input<string>? GpsLatitudeVariable { get; set; }

        /// <summary>
        /// Set the device physical longitude - Range: `-180`-`180`
        /// </summary>
        [Input("gpsLongitude")]
        public Input<double>? GpsLongitude { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsLongitudeVariable")]
        public Input<string>? GpsLongitudeVariable { get; set; }

        /// <summary>
        /// Enable device’s geo fencing SMS - Default value: `false`
        /// </summary>
        [Input("gpsSmsEnable")]
        public Input<bool>? GpsSmsEnable { get; set; }

        [Input("gpsSmsMobileNumbers")]
        private InputList<Inputs.SystemBasicFeatureGpsSmsMobileNumberArgs>? _gpsSmsMobileNumbers;

        /// <summary>
        /// Set device’s geo fencing SMS phone number
        /// </summary>
        public InputList<Inputs.SystemBasicFeatureGpsSmsMobileNumberArgs> GpsSmsMobileNumbers
        {
            get => _gpsSmsMobileNumbers ?? (_gpsSmsMobileNumbers = new InputList<Inputs.SystemBasicFeatureGpsSmsMobileNumberArgs>());
            set => _gpsSmsMobileNumbers = value;
        }

        /// <summary>
        /// Idle CLI timeout in minutes - Range: `0`-`300`
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("idleTimeoutVariable")]
        public Input<string>? IdleTimeoutVariable { get; set; }

        /// <summary>
        /// Set the location of the device
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("locationVariable")]
        public Input<string>? LocationVariable { get; set; }

        /// <summary>
        /// Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
        /// </summary>
        [Input("maxOmpSessions")]
        public Input<int>? MaxOmpSessions { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("maxOmpSessionsVariable")]
        public Input<string>? MaxOmpSessionsVariable { get; set; }

        /// <summary>
        /// Device is multi-tenant - Default value: `false`
        /// </summary>
        [Input("multiTenant")]
        public Input<bool>? MultiTenant { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("multiTenantVariable")]
        public Input<string>? MultiTenantVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable On-demand Tunnel - Default value: `false`
        /// </summary>
        [Input("onDemandEnable")]
        public Input<bool>? OnDemandEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("onDemandEnableVariable")]
        public Input<string>? OnDemandEnableVariable { get; set; }

        /// <summary>
        /// Set the idle timeout for on-demand tunnels - Range: `1`-`65535` - Default value: `10`
        /// </summary>
        [Input("onDemandIdleTimeout")]
        public Input<int>? OnDemandIdleTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("onDemandIdleTimeoutVariable")]
        public Input<string>? OnDemandIdleTimeoutVariable { get; set; }

        /// <summary>
        /// Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
        /// </summary>
        [Input("overlayId")]
        public Input<int>? OverlayId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("overlayIdVariable")]
        public Input<string>? OverlayIdVariable { get; set; }

        /// <summary>
        /// Enable port hopping - Default value: `true`
        /// </summary>
        [Input("portHopping")]
        public Input<bool>? PortHopping { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("portHoppingVariable")]
        public Input<string>? PortHoppingVariable { get; set; }

        /// <summary>
        /// Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
        /// </summary>
        [Input("portOffset")]
        public Input<int>? PortOffset { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("portOffsetVariable")]
        public Input<string>? PortOffsetVariable { get; set; }

        [Input("siteTypes")]
        private InputList<string>? _siteTypes;

        /// <summary>
        /// Site Type
        /// </summary>
        public InputList<string> SiteTypes
        {
            get => _siteTypes ?? (_siteTypes = new InputList<string>());
            set => _siteTypes = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("siteTypesVariable")]
        public Input<string>? SiteTypesVariable { get; set; }

        /// <summary>
        /// Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
        /// `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
        /// `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
        /// `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
        /// `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
        /// `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
        /// `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
        /// `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
        /// `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
        /// `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
        /// `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
        /// `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
        /// `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
        /// `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
        /// `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
        /// `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
        /// `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
        /// `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
        /// `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
        /// `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
        /// `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
        /// `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
        /// `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
        /// `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
        /// `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
        /// `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
        /// `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
        /// `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
        /// `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
        /// `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
        /// `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
        /// `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
        /// `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
        /// `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
        /// `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
        /// `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
        /// `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
        /// `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
        /// `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
        /// `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
        /// `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
        /// `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
        /// `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
        /// `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
        /// `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
        /// `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
        /// `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
        /// `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
        /// `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
        /// `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
        /// `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
        /// `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
        /// `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
        /// `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
        /// `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
        /// `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
        /// `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
        /// `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
        /// `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
        /// `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
        /// `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
        /// `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
        /// `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
        /// `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
        /// `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
        /// `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
        /// `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
        /// `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
        /// `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
        /// `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
        /// `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
        /// `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
        /// `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
        /// `Africa/Harare`, `UTC` - Default value: `UTC`
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("timezoneVariable")]
        public Input<string>? TimezoneVariable { get; set; }

        /// <summary>
        /// Enable or disable default gateway tracking - Default value: `true`
        /// </summary>
        [Input("trackDefaultGateway")]
        public Input<bool>? TrackDefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackDefaultGatewayVariable")]
        public Input<string>? TrackDefaultGatewayVariable { get; set; }

        /// <summary>
        /// OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
        /// </summary>
        [Input("trackInterfaceTag")]
        public Input<int>? TrackInterfaceTag { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackInterfaceTagVariable")]
        public Input<string>? TrackInterfaceTagVariable { get; set; }

        /// <summary>
        /// Configure tracking of transport - Default value: `true`
        /// </summary>
        [Input("trackTransport")]
        public Input<bool>? TrackTransport { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackTransportVariable")]
        public Input<string>? TrackTransportVariable { get; set; }

        /// <summary>
        /// Enable transport gateway - Default value: `false`
        /// </summary>
        [Input("transportGateway")]
        public Input<bool>? TransportGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("transportGatewayVariable")]
        public Input<string>? TransportGatewayVariable { get; set; }

        public SystemBasicFeatureArgs()
        {
        }
        public static new SystemBasicFeatureArgs Empty => new SystemBasicFeatureArgs();
    }

    public sealed class SystemBasicFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Collect admin-tech before reboot due to daemon failure - Default value: `true`
        /// </summary>
        [Input("adminTechOnFailure")]
        public Input<bool>? AdminTechOnFailure { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("adminTechOnFailureVariable")]
        public Input<string>? AdminTechOnFailureVariable { get; set; }

        /// <summary>
        /// Affinity Group Number - Range: `1`-`63`
        /// </summary>
        [Input("affinityGroupNumber")]
        public Input<int>? AffinityGroupNumber { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("affinityGroupNumberVariable")]
        public Input<string>? AffinityGroupNumberVariable { get; set; }

        [Input("affinityGroupPreferences")]
        private InputList<int>? _affinityGroupPreferences;

        /// <summary>
        /// Affinity Group Preference
        /// </summary>
        public InputList<int> AffinityGroupPreferences
        {
            get => _affinityGroupPreferences ?? (_affinityGroupPreferences = new InputList<int>());
            set => _affinityGroupPreferences = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("affinityGroupPreferencesVariable")]
        public Input<string>? AffinityGroupPreferencesVariable { get; set; }

        [Input("affinityPerVrfs")]
        private InputList<Inputs.SystemBasicFeatureAffinityPerVrfGetArgs>? _affinityPerVrfs;

        /// <summary>
        /// Affinity Group Number for VRFs
        /// </summary>
        public InputList<Inputs.SystemBasicFeatureAffinityPerVrfGetArgs> AffinityPerVrfs
        {
            get => _affinityPerVrfs ?? (_affinityPerVrfs = new InputList<Inputs.SystemBasicFeatureAffinityPerVrfGetArgs>());
            set => _affinityPerVrfs = value;
        }

        /// <summary>
        /// Affinity Group Preference Auto - Default value: `false`
        /// </summary>
        [Input("affinityPreferenceAuto")]
        public Input<bool>? AffinityPreferenceAuto { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("affinityPreferenceAutoVariable")]
        public Input<string>? AffinityPreferenceAutoVariable { get; set; }

        /// <summary>
        /// Set a text description of the device
        /// </summary>
        [Input("configDescription")]
        public Input<string>? ConfigDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("configDescriptionVariable")]
        public Input<string>? ConfigDescriptionVariable { get; set; }

        /// <summary>
        /// Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
        /// value: `9600`
        /// </summary>
        [Input("consoleBaudRate")]
        public Input<string>? ConsoleBaudRate { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("consoleBaudRateVariable")]
        public Input<string>? ConsoleBaudRateVariable { get; set; }

        /// <summary>
        /// Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
        /// </summary>
        [Input("controlSessionPps")]
        public Input<int>? ControlSessionPps { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controlSessionPpsVariable")]
        public Input<string>? ControlSessionPpsVariable { get; set; }

        [Input("controllerGroups")]
        private InputList<int>? _controllerGroups;

        /// <summary>
        /// Configure a list of comma-separated controller groups
        /// </summary>
        public InputList<int> ControllerGroups
        {
            get => _controllerGroups ?? (_controllerGroups = new InputList<int>());
            set => _controllerGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("controllerGroupsVariable")]
        public Input<string>? ControllerGroupsVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceGroups")]
        private InputList<string>? _deviceGroups;

        /// <summary>
        /// Device groups
        /// </summary>
        public InputList<string> DeviceGroups
        {
            get => _deviceGroups ?? (_deviceGroups = new InputList<string>());
            set => _deviceGroups = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deviceGroupsVariable")]
        public Input<string>? DeviceGroupsVariable { get; set; }

        /// <summary>
        /// Enable SLA Dampening and Enhanced App Routing. - Choices: `disabled`, `aggressive`, `moderate`, `conservative` - Default
        /// value: `disabled`
        /// </summary>
        [Input("enhancedAppAwareRouting")]
        public Input<string>? EnhancedAppAwareRouting { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enhancedAppAwareRoutingVariable")]
        public Input<string>? EnhancedAppAwareRoutingVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Enable Geo fencing - Default value: `false`
        /// </summary>
        [Input("gpsGeoFencingEnable")]
        public Input<bool>? GpsGeoFencingEnable { get; set; }

        /// <summary>
        /// Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
        /// </summary>
        [Input("gpsGeoFencingRange")]
        public Input<int>? GpsGeoFencingRange { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsGeoFencingRangeVariable")]
        public Input<string>? GpsGeoFencingRangeVariable { get; set; }

        /// <summary>
        /// Set the device physical latitude - Range: `-90`-`90`
        /// </summary>
        [Input("gpsLatitude")]
        public Input<double>? GpsLatitude { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsLatitudeVariable")]
        public Input<string>? GpsLatitudeVariable { get; set; }

        /// <summary>
        /// Set the device physical longitude - Range: `-180`-`180`
        /// </summary>
        [Input("gpsLongitude")]
        public Input<double>? GpsLongitude { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsLongitudeVariable")]
        public Input<string>? GpsLongitudeVariable { get; set; }

        /// <summary>
        /// Enable device’s geo fencing SMS - Default value: `false`
        /// </summary>
        [Input("gpsSmsEnable")]
        public Input<bool>? GpsSmsEnable { get; set; }

        [Input("gpsSmsMobileNumbers")]
        private InputList<Inputs.SystemBasicFeatureGpsSmsMobileNumberGetArgs>? _gpsSmsMobileNumbers;

        /// <summary>
        /// Set device’s geo fencing SMS phone number
        /// </summary>
        public InputList<Inputs.SystemBasicFeatureGpsSmsMobileNumberGetArgs> GpsSmsMobileNumbers
        {
            get => _gpsSmsMobileNumbers ?? (_gpsSmsMobileNumbers = new InputList<Inputs.SystemBasicFeatureGpsSmsMobileNumberGetArgs>());
            set => _gpsSmsMobileNumbers = value;
        }

        /// <summary>
        /// Idle CLI timeout in minutes - Range: `0`-`300`
        /// </summary>
        [Input("idleTimeout")]
        public Input<int>? IdleTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("idleTimeoutVariable")]
        public Input<string>? IdleTimeoutVariable { get; set; }

        /// <summary>
        /// Set the location of the device
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("locationVariable")]
        public Input<string>? LocationVariable { get; set; }

        /// <summary>
        /// Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
        /// </summary>
        [Input("maxOmpSessions")]
        public Input<int>? MaxOmpSessions { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("maxOmpSessionsVariable")]
        public Input<string>? MaxOmpSessionsVariable { get; set; }

        /// <summary>
        /// Device is multi-tenant - Default value: `false`
        /// </summary>
        [Input("multiTenant")]
        public Input<bool>? MultiTenant { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("multiTenantVariable")]
        public Input<string>? MultiTenantVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable On-demand Tunnel - Default value: `false`
        /// </summary>
        [Input("onDemandEnable")]
        public Input<bool>? OnDemandEnable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("onDemandEnableVariable")]
        public Input<string>? OnDemandEnableVariable { get; set; }

        /// <summary>
        /// Set the idle timeout for on-demand tunnels - Range: `1`-`65535` - Default value: `10`
        /// </summary>
        [Input("onDemandIdleTimeout")]
        public Input<int>? OnDemandIdleTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("onDemandIdleTimeoutVariable")]
        public Input<string>? OnDemandIdleTimeoutVariable { get; set; }

        /// <summary>
        /// Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
        /// </summary>
        [Input("overlayId")]
        public Input<int>? OverlayId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("overlayIdVariable")]
        public Input<string>? OverlayIdVariable { get; set; }

        /// <summary>
        /// Enable port hopping - Default value: `true`
        /// </summary>
        [Input("portHopping")]
        public Input<bool>? PortHopping { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("portHoppingVariable")]
        public Input<string>? PortHoppingVariable { get; set; }

        /// <summary>
        /// Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
        /// </summary>
        [Input("portOffset")]
        public Input<int>? PortOffset { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("portOffsetVariable")]
        public Input<string>? PortOffsetVariable { get; set; }

        [Input("siteTypes")]
        private InputList<string>? _siteTypes;

        /// <summary>
        /// Site Type
        /// </summary>
        public InputList<string> SiteTypes
        {
            get => _siteTypes ?? (_siteTypes = new InputList<string>());
            set => _siteTypes = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("siteTypesVariable")]
        public Input<string>? SiteTypesVariable { get; set; }

        /// <summary>
        /// Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
        /// `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
        /// `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
        /// `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
        /// `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
        /// `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
        /// `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
        /// `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
        /// `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
        /// `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
        /// `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
        /// `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
        /// `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
        /// `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
        /// `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
        /// `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
        /// `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
        /// `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
        /// `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
        /// `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
        /// `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
        /// `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
        /// `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
        /// `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
        /// `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
        /// `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
        /// `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
        /// `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
        /// `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
        /// `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
        /// `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
        /// `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
        /// `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
        /// `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
        /// `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
        /// `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
        /// `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
        /// `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
        /// `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
        /// `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
        /// `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
        /// `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
        /// `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
        /// `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
        /// `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
        /// `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
        /// `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
        /// `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
        /// `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
        /// `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
        /// `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
        /// `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
        /// `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
        /// `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
        /// `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
        /// `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
        /// `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
        /// `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
        /// `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
        /// `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
        /// `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
        /// `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
        /// `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
        /// `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
        /// `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
        /// `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
        /// `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
        /// `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
        /// `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
        /// `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
        /// `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
        /// `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
        /// `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
        /// `Africa/Harare`, `UTC` - Default value: `UTC`
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("timezoneVariable")]
        public Input<string>? TimezoneVariable { get; set; }

        /// <summary>
        /// Enable or disable default gateway tracking - Default value: `true`
        /// </summary>
        [Input("trackDefaultGateway")]
        public Input<bool>? TrackDefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackDefaultGatewayVariable")]
        public Input<string>? TrackDefaultGatewayVariable { get; set; }

        /// <summary>
        /// OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
        /// </summary>
        [Input("trackInterfaceTag")]
        public Input<int>? TrackInterfaceTag { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackInterfaceTagVariable")]
        public Input<string>? TrackInterfaceTagVariable { get; set; }

        /// <summary>
        /// Configure tracking of transport - Default value: `true`
        /// </summary>
        [Input("trackTransport")]
        public Input<bool>? TrackTransport { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackTransportVariable")]
        public Input<string>? TrackTransportVariable { get; set; }

        /// <summary>
        /// Enable transport gateway - Default value: `false`
        /// </summary>
        [Input("transportGateway")]
        public Input<bool>? TransportGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("transportGatewayVariable")]
        public Input<string>? TransportGatewayVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public SystemBasicFeatureState()
        {
        }
        public static new SystemBasicFeatureState Empty => new SystemBasicFeatureState();
    }
}
