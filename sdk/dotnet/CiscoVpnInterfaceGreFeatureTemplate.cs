// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco VPN Interface GRE feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate")]
    public partial class CiscoVpnInterfaceGreFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Apply ACL
        /// </summary>
        [Output("accessLists")]
        public Output<ImmutableArray<Outputs.CiscoVpnInterfaceGreFeatureTemplateAccessList>> AccessLists { get; private set; } = null!;

        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
        /// </summary>
        [Output("application")]
        public Output<string?> Application { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("applicationVariable")]
        public Output<string?> ApplicationVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Output("clearDontFragment")]
        public Output<bool?> ClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("clearDontFragmentVariable")]
        public Output<string?> ClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Interface description
        /// </summary>
        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
        /// present
        /// </summary>
        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Output("ipAddress")]
        public Output<string?> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipAddressVariable")]
        public Output<string?> IpAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
        /// </summary>
        [Output("ipMtu")]
        public Output<int?> IpMtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipMtuVariable")]
        public Output<string?> IpMtuVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Output("rewriteRule")]
        public Output<string?> RewriteRule { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("rewriteRuleVariable")]
        public Output<string?> RewriteRuleVariable { get; private set; } = null!;

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMssAdjust")]
        public Output<int?> TcpMssAdjust { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssAdjustVariable")]
        public Output<string?> TcpMssAdjustVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("trackers")]
        public Output<ImmutableArray<string>> Trackers { get; private set; } = null!;

        /// <summary>
        /// Tunnel destination IP Address
        /// </summary>
        [Output("tunnelDestination")]
        public Output<string?> TunnelDestination { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelDestinationVariable")]
        public Output<string?> TunnelDestinationVariable { get; private set; } = null!;

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Output("tunnelRouteVia")]
        public Output<string?> TunnelRouteVia { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelRouteViaVariable")]
        public Output<string?> TunnelRouteViaVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel source IP Address
        /// </summary>
        [Output("tunnelSource")]
        public Output<string?> TunnelSource { get; private set; } = null!;

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Output("tunnelSourceInterface")]
        public Output<string?> TunnelSourceInterface { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceInterfaceVariable")]
        public Output<string?> TunnelSourceInterfaceVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceVariable")]
        public Output<string?> TunnelSourceVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoVpnInterfaceGreFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoVpnInterfaceGreFeatureTemplate(string name, CiscoVpnInterfaceGreFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate", name, args ?? new CiscoVpnInterfaceGreFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoVpnInterfaceGreFeatureTemplate(string name, Input<string> id, CiscoVpnInterfaceGreFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoVpnInterfaceGreFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoVpnInterfaceGreFeatureTemplate Get(string name, Input<string> id, CiscoVpnInterfaceGreFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoVpnInterfaceGreFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoVpnInterfaceGreFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessLists")]
        private InputList<Inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListArgs>? _accessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListArgs> AccessLists
        {
            get => _accessLists ?? (_accessLists = new InputList<Inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListArgs>());
            set => _accessLists = value;
        }

        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("applicationVariable")]
        public Input<string>? ApplicationVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("clearDontFragment")]
        public Input<bool>? ClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clearDontFragmentVariable")]
        public Input<string>? ClearDontFragmentVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
        /// present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipAddressVariable")]
        public Input<string>? IpAddressVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Input("rewriteRule")]
        public Input<string>? RewriteRule { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rewriteRuleVariable")]
        public Input<string>? RewriteRuleVariable { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Tunnel destination IP Address
        /// </summary>
        [Input("tunnelDestination")]
        public Input<string>? TunnelDestination { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationVariable")]
        public Input<string>? TunnelDestinationVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelRouteVia")]
        public Input<string>? TunnelRouteVia { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelRouteViaVariable")]
        public Input<string>? TunnelRouteViaVariable { get; set; }

        /// <summary>
        /// Tunnel source IP Address
        /// </summary>
        [Input("tunnelSource")]
        public Input<string>? TunnelSource { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelSourceInterface")]
        public Input<string>? TunnelSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceInterfaceVariable")]
        public Input<string>? TunnelSourceInterfaceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceVariable")]
        public Input<string>? TunnelSourceVariable { get; set; }

        public CiscoVpnInterfaceGreFeatureTemplateArgs()
        {
        }
        public static new CiscoVpnInterfaceGreFeatureTemplateArgs Empty => new CiscoVpnInterfaceGreFeatureTemplateArgs();
    }

    public sealed class CiscoVpnInterfaceGreFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("accessLists")]
        private InputList<Inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListGetArgs>? _accessLists;

        /// <summary>
        /// Apply ACL
        /// </summary>
        public InputList<Inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListGetArgs> AccessLists
        {
            get => _accessLists ?? (_accessLists = new InputList<Inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListGetArgs>());
            set => _accessLists = value;
        }

        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("applicationVariable")]
        public Input<string>? ApplicationVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("clearDontFragment")]
        public Input<bool>? ClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clearDontFragmentVariable")]
        public Input<string>? ClearDontFragmentVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
        /// present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipAddressVariable")]
        public Input<string>? IpAddressVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
        /// </summary>
        [Input("ipMtu")]
        public Input<int>? IpMtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipMtuVariable")]
        public Input<string>? IpMtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Name of rewrite rule
        /// </summary>
        [Input("rewriteRule")]
        public Input<string>? RewriteRule { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rewriteRuleVariable")]
        public Input<string>? RewriteRuleVariable { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Tunnel destination IP Address
        /// </summary>
        [Input("tunnelDestination")]
        public Input<string>? TunnelDestination { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationVariable")]
        public Input<string>? TunnelDestinationVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelRouteVia")]
        public Input<string>? TunnelRouteVia { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelRouteViaVariable")]
        public Input<string>? TunnelRouteViaVariable { get; set; }

        /// <summary>
        /// Tunnel source IP Address
        /// </summary>
        [Input("tunnelSource")]
        public Input<string>? TunnelSource { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelSourceInterface")]
        public Input<string>? TunnelSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceInterfaceVariable")]
        public Input<string>? TunnelSourceInterfaceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceVariable")]
        public Input<string>? TunnelSourceVariable { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoVpnInterfaceGreFeatureTemplateState()
        {
        }
        public static new CiscoVpnInterfaceGreFeatureTemplateState Empty => new CiscoVpnInterfaceGreFeatureTemplateState();
    }
}
