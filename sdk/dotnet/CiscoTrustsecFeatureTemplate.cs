// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco TrustSec feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.CiscoTrustsecFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         DeviceSgt = 100,
    ///         CredentialsId = "user1",
    ///         CredentialsPassword = "MyPassword",
    ///         EnableEnforcement = true,
    ///         EnableSxp = true,
    ///         SxpSourceIp = "1.2.3.4",
    ///         SxpDefaultPassword = "MyPassword",
    ///         SxpKeyChain = "keychain1",
    ///         SxpLogBindingChanges = false,
    ///         SxpReconciliationPeriod = 120,
    ///         SxpRetryPeriod = 120,
    ///         SpeakerHoldTime = 120,
    ///         MinimumListenerHoldTime = 90,
    ///         MaximumListenerHoldTime = 180,
    ///         SxpNodeIdType = "interface-name",
    ///         SxpNodeId = "VirtualPortGroup",
    ///         SxpConnections = new[]
    ///         {
    ///             new Sdwan.Inputs.CiscoTrustsecFeatureTemplateSxpConnectionArgs
    ///             {
    ///                 Peer_ip = "1.2.3.4",
    ///                 Source_ip = "2.3.4.5",
    ///                 Preshared_key = "default",
    ///                 Mode = "local",
    ///                 Mode_type = "listener",
    ///                 Minimum_hold_time = 100,
    ///                 Maximum_hold_time = 200,
    ///                 Vpn_id = 0,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate")]
    public partial class CiscoTrustsecFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
        /// </summary>
        [Output("credentialsId")]
        public Output<string?> CredentialsId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("credentialsIdVariable")]
        public Output<string?> CredentialsIdVariable { get; private set; } = null!;

        /// <summary>
        /// Set the password for the device
        /// </summary>
        [Output("credentialsPassword")]
        public Output<string?> CredentialsPassword { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("credentialsPasswordVariable")]
        public Output<string?> CredentialsPasswordVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Configure Local device security group &lt;2..65519&gt;
        ///   - Range: `2`-`65519`
        /// </summary>
        [Output("deviceSgt")]
        public Output<int?> DeviceSgt { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("deviceSgtVariable")]
        public Output<string?> DeviceSgtVariable { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Enable Role-based Access Control enforcement
        ///   - Default value: `False`
        /// </summary>
        [Output("enableEnforcement")]
        public Output<bool?> EnableEnforcement { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enableEnforcementVariable")]
        public Output<string?> EnableEnforcementVariable { get; private set; } = null!;

        /// <summary>
        /// Enable CTS SXP support
        ///   - Default value: `False`
        /// </summary>
        [Output("enableSxp")]
        public Output<bool?> EnableSxp { get; private set; } = null!;

        /// <summary>
        /// Configure Maximum allowed hold-time for listener in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `180`
        /// </summary>
        [Output("maximumListenerHoldTime")]
        public Output<int?> MaximumListenerHoldTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("maximumListenerHoldTimeVariable")]
        public Output<string?> MaximumListenerHoldTimeVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Minimum allowed hold-time for listener in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `90`
        /// </summary>
        [Output("minimumListenerHoldTime")]
        public Output<int?> MinimumListenerHoldTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("minimumListenerHoldTimeVariable")]
        public Output<string?> MinimumListenerHoldTimeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configure Speaker hold-time in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `120`
        /// </summary>
        [Output("speakerHoldTime")]
        public Output<int?> SpeakerHoldTime { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("speakerHoldTimeVariable")]
        public Output<string?> SpeakerHoldTimeVariable { get; private set; } = null!;

        /// <summary>
        /// Configure SXP Connections
        /// </summary>
        [Output("sxpConnections")]
        public Output<ImmutableArray<Outputs.CiscoTrustsecFeatureTemplateSxpConnection>> SxpConnections { get; private set; } = null!;

        /// <summary>
        /// Configure SXP default password
        /// </summary>
        [Output("sxpDefaultPassword")]
        public Output<string?> SxpDefaultPassword { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpDefaultPasswordVariable")]
        public Output<string?> SxpDefaultPasswordVariable { get; private set; } = null!;

        /// <summary>
        /// Configure SXP key-chain
        /// </summary>
        [Output("sxpKeyChain")]
        public Output<string?> SxpKeyChain { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpKeyChainVariable")]
        public Output<string?> SxpKeyChainVariable { get; private set; } = null!;

        /// <summary>
        /// Enables logging for IP-to-SGT binding changes
        ///   - Default value: `False`
        /// </summary>
        [Output("sxpLogBindingChanges")]
        public Output<bool?> SxpLogBindingChanges { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpLogBindingChangesVariable")]
        public Output<string?> SxpLogBindingChangesVariable { get; private set; } = null!;

        /// <summary>
        /// Configure SXP Node ID &lt;IP, 8 char string or interface name&gt;
        /// </summary>
        [Output("sxpNodeId")]
        public Output<string?> SxpNodeId { get; private set; } = null!;

        /// <summary>
        /// Define SXP Node ID type &lt;IP, 8 char string or interface name&gt;
        ///   - Choices: `Ip`, `interface-name`, `8-char-hex-string`
        ///   - Default value: `Ip`
        /// </summary>
        [Output("sxpNodeIdType")]
        public Output<string?> SxpNodeIdType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpNodeIdVariable")]
        public Output<string?> SxpNodeIdVariable { get; private set; } = null!;

        /// <summary>
        /// Configure the SXP reconciliation period in seconds &lt;0..64000&gt;
        ///   - Range: `0`-`64000`
        ///   - Default value: `120`
        /// </summary>
        [Output("sxpReconciliationPeriod")]
        public Output<int?> SxpReconciliationPeriod { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpReconciliationPeriodVariable")]
        public Output<string?> SxpReconciliationPeriodVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Retry period for SXP connection in seconds &lt;0..64000&gt;
        ///   - Range: `0`-`64000`
        ///   - Default value: `120`
        /// </summary>
        [Output("sxpRetryPeriod")]
        public Output<int?> SxpRetryPeriod { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpRetryPeriodVariable")]
        public Output<string?> SxpRetryPeriodVariable { get; private set; } = null!;

        /// <summary>
        /// SXP Source IP
        /// </summary>
        [Output("sxpSourceIp")]
        public Output<string?> SxpSourceIp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sxpSourceIpVariable")]
        public Output<string?> SxpSourceIpVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoTrustsecFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoTrustsecFeatureTemplate(string name, CiscoTrustsecFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate", name, args ?? new CiscoTrustsecFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoTrustsecFeatureTemplate(string name, Input<string> id, CiscoTrustsecFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoTrustsecFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoTrustsecFeatureTemplate Get(string name, Input<string> id, CiscoTrustsecFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoTrustsecFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoTrustsecFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
        /// </summary>
        [Input("credentialsId")]
        public Input<string>? CredentialsId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("credentialsIdVariable")]
        public Input<string>? CredentialsIdVariable { get; set; }

        /// <summary>
        /// Set the password for the device
        /// </summary>
        [Input("credentialsPassword")]
        public Input<string>? CredentialsPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("credentialsPasswordVariable")]
        public Input<string>? CredentialsPasswordVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Configure Local device security group &lt;2..65519&gt;
        ///   - Range: `2`-`65519`
        /// </summary>
        [Input("deviceSgt")]
        public Input<int>? DeviceSgt { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deviceSgtVariable")]
        public Input<string>? DeviceSgtVariable { get; set; }

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable Role-based Access Control enforcement
        ///   - Default value: `False`
        /// </summary>
        [Input("enableEnforcement")]
        public Input<bool>? EnableEnforcement { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableEnforcementVariable")]
        public Input<string>? EnableEnforcementVariable { get; set; }

        /// <summary>
        /// Enable CTS SXP support
        ///   - Default value: `False`
        /// </summary>
        [Input("enableSxp")]
        public Input<bool>? EnableSxp { get; set; }

        /// <summary>
        /// Configure Maximum allowed hold-time for listener in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `180`
        /// </summary>
        [Input("maximumListenerHoldTime")]
        public Input<int>? MaximumListenerHoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("maximumListenerHoldTimeVariable")]
        public Input<string>? MaximumListenerHoldTimeVariable { get; set; }

        /// <summary>
        /// Configure Minimum allowed hold-time for listener in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `90`
        /// </summary>
        [Input("minimumListenerHoldTime")]
        public Input<int>? MinimumListenerHoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("minimumListenerHoldTimeVariable")]
        public Input<string>? MinimumListenerHoldTimeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configure Speaker hold-time in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `120`
        /// </summary>
        [Input("speakerHoldTime")]
        public Input<int>? SpeakerHoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speakerHoldTimeVariable")]
        public Input<string>? SpeakerHoldTimeVariable { get; set; }

        [Input("sxpConnections")]
        private InputList<Inputs.CiscoTrustsecFeatureTemplateSxpConnectionArgs>? _sxpConnections;

        /// <summary>
        /// Configure SXP Connections
        /// </summary>
        public InputList<Inputs.CiscoTrustsecFeatureTemplateSxpConnectionArgs> SxpConnections
        {
            get => _sxpConnections ?? (_sxpConnections = new InputList<Inputs.CiscoTrustsecFeatureTemplateSxpConnectionArgs>());
            set => _sxpConnections = value;
        }

        /// <summary>
        /// Configure SXP default password
        /// </summary>
        [Input("sxpDefaultPassword")]
        public Input<string>? SxpDefaultPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpDefaultPasswordVariable")]
        public Input<string>? SxpDefaultPasswordVariable { get; set; }

        /// <summary>
        /// Configure SXP key-chain
        /// </summary>
        [Input("sxpKeyChain")]
        public Input<string>? SxpKeyChain { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpKeyChainVariable")]
        public Input<string>? SxpKeyChainVariable { get; set; }

        /// <summary>
        /// Enables logging for IP-to-SGT binding changes
        ///   - Default value: `False`
        /// </summary>
        [Input("sxpLogBindingChanges")]
        public Input<bool>? SxpLogBindingChanges { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpLogBindingChangesVariable")]
        public Input<string>? SxpLogBindingChangesVariable { get; set; }

        /// <summary>
        /// Configure SXP Node ID &lt;IP, 8 char string or interface name&gt;
        /// </summary>
        [Input("sxpNodeId")]
        public Input<string>? SxpNodeId { get; set; }

        /// <summary>
        /// Define SXP Node ID type &lt;IP, 8 char string or interface name&gt;
        ///   - Choices: `Ip`, `interface-name`, `8-char-hex-string`
        ///   - Default value: `Ip`
        /// </summary>
        [Input("sxpNodeIdType")]
        public Input<string>? SxpNodeIdType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpNodeIdVariable")]
        public Input<string>? SxpNodeIdVariable { get; set; }

        /// <summary>
        /// Configure the SXP reconciliation period in seconds &lt;0..64000&gt;
        ///   - Range: `0`-`64000`
        ///   - Default value: `120`
        /// </summary>
        [Input("sxpReconciliationPeriod")]
        public Input<int>? SxpReconciliationPeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpReconciliationPeriodVariable")]
        public Input<string>? SxpReconciliationPeriodVariable { get; set; }

        /// <summary>
        /// Configure Retry period for SXP connection in seconds &lt;0..64000&gt;
        ///   - Range: `0`-`64000`
        ///   - Default value: `120`
        /// </summary>
        [Input("sxpRetryPeriod")]
        public Input<int>? SxpRetryPeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpRetryPeriodVariable")]
        public Input<string>? SxpRetryPeriodVariable { get; set; }

        /// <summary>
        /// SXP Source IP
        /// </summary>
        [Input("sxpSourceIp")]
        public Input<string>? SxpSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpSourceIpVariable")]
        public Input<string>? SxpSourceIpVariable { get; set; }

        public CiscoTrustsecFeatureTemplateArgs()
        {
        }
        public static new CiscoTrustsecFeatureTemplateArgs Empty => new CiscoTrustsecFeatureTemplateArgs();
    }

    public sealed class CiscoTrustsecFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
        /// </summary>
        [Input("credentialsId")]
        public Input<string>? CredentialsId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("credentialsIdVariable")]
        public Input<string>? CredentialsIdVariable { get; set; }

        /// <summary>
        /// Set the password for the device
        /// </summary>
        [Input("credentialsPassword")]
        public Input<string>? CredentialsPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("credentialsPasswordVariable")]
        public Input<string>? CredentialsPasswordVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configure Local device security group &lt;2..65519&gt;
        ///   - Range: `2`-`65519`
        /// </summary>
        [Input("deviceSgt")]
        public Input<int>? DeviceSgt { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deviceSgtVariable")]
        public Input<string>? DeviceSgtVariable { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable Role-based Access Control enforcement
        ///   - Default value: `False`
        /// </summary>
        [Input("enableEnforcement")]
        public Input<bool>? EnableEnforcement { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableEnforcementVariable")]
        public Input<string>? EnableEnforcementVariable { get; set; }

        /// <summary>
        /// Enable CTS SXP support
        ///   - Default value: `False`
        /// </summary>
        [Input("enableSxp")]
        public Input<bool>? EnableSxp { get; set; }

        /// <summary>
        /// Configure Maximum allowed hold-time for listener in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `180`
        /// </summary>
        [Input("maximumListenerHoldTime")]
        public Input<int>? MaximumListenerHoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("maximumListenerHoldTimeVariable")]
        public Input<string>? MaximumListenerHoldTimeVariable { get; set; }

        /// <summary>
        /// Configure Minimum allowed hold-time for listener in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `90`
        /// </summary>
        [Input("minimumListenerHoldTime")]
        public Input<int>? MinimumListenerHoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("minimumListenerHoldTimeVariable")]
        public Input<string>? MinimumListenerHoldTimeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configure Speaker hold-time in seconds &lt;1..65534&gt;
        ///   - Range: `1`-`65534`
        ///   - Default value: `120`
        /// </summary>
        [Input("speakerHoldTime")]
        public Input<int>? SpeakerHoldTime { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("speakerHoldTimeVariable")]
        public Input<string>? SpeakerHoldTimeVariable { get; set; }

        [Input("sxpConnections")]
        private InputList<Inputs.CiscoTrustsecFeatureTemplateSxpConnectionGetArgs>? _sxpConnections;

        /// <summary>
        /// Configure SXP Connections
        /// </summary>
        public InputList<Inputs.CiscoTrustsecFeatureTemplateSxpConnectionGetArgs> SxpConnections
        {
            get => _sxpConnections ?? (_sxpConnections = new InputList<Inputs.CiscoTrustsecFeatureTemplateSxpConnectionGetArgs>());
            set => _sxpConnections = value;
        }

        /// <summary>
        /// Configure SXP default password
        /// </summary>
        [Input("sxpDefaultPassword")]
        public Input<string>? SxpDefaultPassword { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpDefaultPasswordVariable")]
        public Input<string>? SxpDefaultPasswordVariable { get; set; }

        /// <summary>
        /// Configure SXP key-chain
        /// </summary>
        [Input("sxpKeyChain")]
        public Input<string>? SxpKeyChain { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpKeyChainVariable")]
        public Input<string>? SxpKeyChainVariable { get; set; }

        /// <summary>
        /// Enables logging for IP-to-SGT binding changes
        ///   - Default value: `False`
        /// </summary>
        [Input("sxpLogBindingChanges")]
        public Input<bool>? SxpLogBindingChanges { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpLogBindingChangesVariable")]
        public Input<string>? SxpLogBindingChangesVariable { get; set; }

        /// <summary>
        /// Configure SXP Node ID &lt;IP, 8 char string or interface name&gt;
        /// </summary>
        [Input("sxpNodeId")]
        public Input<string>? SxpNodeId { get; set; }

        /// <summary>
        /// Define SXP Node ID type &lt;IP, 8 char string or interface name&gt;
        ///   - Choices: `Ip`, `interface-name`, `8-char-hex-string`
        ///   - Default value: `Ip`
        /// </summary>
        [Input("sxpNodeIdType")]
        public Input<string>? SxpNodeIdType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpNodeIdVariable")]
        public Input<string>? SxpNodeIdVariable { get; set; }

        /// <summary>
        /// Configure the SXP reconciliation period in seconds &lt;0..64000&gt;
        ///   - Range: `0`-`64000`
        ///   - Default value: `120`
        /// </summary>
        [Input("sxpReconciliationPeriod")]
        public Input<int>? SxpReconciliationPeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpReconciliationPeriodVariable")]
        public Input<string>? SxpReconciliationPeriodVariable { get; set; }

        /// <summary>
        /// Configure Retry period for SXP connection in seconds &lt;0..64000&gt;
        ///   - Range: `0`-`64000`
        ///   - Default value: `120`
        /// </summary>
        [Input("sxpRetryPeriod")]
        public Input<int>? SxpRetryPeriod { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpRetryPeriodVariable")]
        public Input<string>? SxpRetryPeriodVariable { get; set; }

        /// <summary>
        /// SXP Source IP
        /// </summary>
        [Input("sxpSourceIp")]
        public Input<string>? SxpSourceIp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sxpSourceIpVariable")]
        public Input<string>? SxpSourceIpVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoTrustsecFeatureTemplateState()
        {
        }
        public static new CiscoTrustsecFeatureTemplateState Empty => new CiscoTrustsecFeatureTemplateState();
    }
}
