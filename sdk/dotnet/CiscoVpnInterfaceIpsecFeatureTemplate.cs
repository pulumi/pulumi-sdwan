// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco VPN Interface IPSec feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.CiscoVpnInterfaceIpsecFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         InterfaceName = "ipsec1",
    ///         Shutdown = false,
    ///         InterfaceDescription = "My Description",
    ///         IpAddress = "1.1.1.1/24",
    ///         TunnelSource = "1.2.3.4",
    ///         TunnelSourceInterface = "e1",
    ///         TunnelDestination = "3.4.5.6",
    ///         Application = "sig",
    ///         TcpMssAdjust = 1400,
    ///         ClearDontFragment = true,
    ///         Mtu = 1500,
    ///         DeadPeerDetectionInterval = 100,
    ///         DeadPeerDetectionRetries = 4,
    ///         IkeVersion = 2,
    ///         IkeMode = "main",
    ///         IkeRekeyInterval = 20000,
    ///         IkeCiphersuite = "aes256-cbc-sha1",
    ///         IkeGroup = "20",
    ///         IkePreSharedKey = "cisco123",
    ///         IkePreSharedKeyLocalId = "1",
    ///         IkePreSharedKeyRemoteId = "2",
    ///         IpsecRekeyInterval = 7200,
    ///         IpsecReplayWindow = 128,
    ///         IpsecCiphersuite = "aes256-cbc-sha256",
    ///         IpsecPerfectForwardSecrecy = "group-20",
    ///         Trackers = new[]
    ///         {
    ///             "TRACKER1",
    ///         },
    ///         TunnelRouteVia = "g0/0",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate")]
    public partial class CiscoVpnInterfaceIpsecFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
        /// </summary>
        [Output("application")]
        public Output<string?> Application { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("applicationVariable")]
        public Output<string?> ApplicationVariable { get; private set; } = null!;

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Output("clearDontFragment")]
        public Output<bool?> ClearDontFragment { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("clearDontFragmentVariable")]
        public Output<string?> ClearDontFragmentVariable { get; private set; } = null!;

        /// <summary>
        /// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
        /// </summary>
        [Output("deadPeerDetectionInterval")]
        public Output<int?> DeadPeerDetectionInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("deadPeerDetectionIntervalVariable")]
        public Output<string?> DeadPeerDetectionIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
        /// </summary>
        [Output("deadPeerDetectionRetries")]
        public Output<int?> DeadPeerDetectionRetries { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("deadPeerDetectionRetriesVariable")]
        public Output<string?> DeadPeerDetectionRetriesVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
        /// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
        /// </summary>
        [Output("ikeCiphersuite")]
        public Output<string?> IkeCiphersuite { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeCiphersuiteVariable")]
        public Output<string?> IkeCiphersuiteVariable { get; private set; } = null!;

        /// <summary>
        /// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
        /// </summary>
        [Output("ikeGroup")]
        public Output<string?> IkeGroup { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeGroupVariable")]
        public Output<string?> IkeGroupVariable { get; private set; } = null!;

        /// <summary>
        /// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
        /// </summary>
        [Output("ikeMode")]
        public Output<string?> IkeMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeModeVariable")]
        public Output<string?> IkeModeVariable { get; private set; } = null!;

        /// <summary>
        /// Use preshared key to authenticate IKE peer
        /// </summary>
        [Output("ikePreSharedKey")]
        public Output<string?> IkePreSharedKey { get; private set; } = null!;

        /// <summary>
        /// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Output("ikePreSharedKeyLocalId")]
        public Output<string?> IkePreSharedKeyLocalId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikePreSharedKeyLocalIdVariable")]
        public Output<string?> IkePreSharedKeyLocalIdVariable { get; private set; } = null!;

        /// <summary>
        /// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Output("ikePreSharedKeyRemoteId")]
        public Output<string?> IkePreSharedKeyRemoteId { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikePreSharedKeyRemoteIdVariable")]
        public Output<string?> IkePreSharedKeyRemoteIdVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikePreSharedKeyVariable")]
        public Output<string?> IkePreSharedKeyVariable { get; private set; } = null!;

        /// <summary>
        /// IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
        /// </summary>
        [Output("ikeRekeyInterval")]
        public Output<int?> IkeRekeyInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ikeRekeyIntervalVariable")]
        public Output<string?> IkeRekeyIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
        /// </summary>
        [Output("ikeVersion")]
        public Output<int?> IkeVersion { get; private set; } = null!;

        /// <summary>
        /// Interface description
        /// </summary>
        [Output("interfaceDescription")]
        public Output<string?> InterfaceDescription { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceDescriptionVariable")]
        public Output<string?> InterfaceDescriptionVariable { get; private set; } = null!;

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Output("interfaceName")]
        public Output<string?> InterfaceName { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("interfaceNameVariable")]
        public Output<string?> InterfaceNameVariable { get; private set; } = null!;

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Output("ipAddress")]
        public Output<string?> IpAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipAddressVariable")]
        public Output<string?> IpAddressVariable { get; private set; } = null!;

        /// <summary>
        /// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
        /// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
        /// `aes256-gcm`
        /// </summary>
        [Output("ipsecCiphersuite")]
        public Output<string?> IpsecCiphersuite { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecCiphersuiteVariable")]
        public Output<string?> IpsecCiphersuiteVariable { get; private set; } = null!;

        /// <summary>
        /// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
        /// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
        /// </summary>
        [Output("ipsecPerfectForwardSecrecy")]
        public Output<string?> IpsecPerfectForwardSecrecy { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecPerfectForwardSecrecyVariable")]
        public Output<string?> IpsecPerfectForwardSecrecyVariable { get; private set; } = null!;

        /// <summary>
        /// IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
        /// </summary>
        [Output("ipsecRekeyInterval")]
        public Output<int?> IpsecRekeyInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecRekeyIntervalVariable")]
        public Output<string?> IpsecRekeyIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
        /// </summary>
        [Output("ipsecReplayWindow")]
        public Output<int?> IpsecReplayWindow { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipsecReplayWindowVariable")]
        public Output<string?> IpsecReplayWindowVariable { get; private set; } = null!;

        /// <summary>
        /// Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("mtuVariable")]
        public Output<string?> MtuVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("shutdownVariable")]
        public Output<string?> ShutdownVariable { get; private set; } = null!;

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Output("tcpMssAdjust")]
        public Output<int?> TcpMssAdjust { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpMssAdjustVariable")]
        public Output<string?> TcpMssAdjustVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trackerVariable")]
        public Output<string?> TrackerVariable { get; private set; } = null!;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        [Output("trackers")]
        public Output<ImmutableArray<string>> Trackers { get; private set; } = null!;

        /// <summary>
        /// Tunnel destination IP address
        /// </summary>
        [Output("tunnelDestination")]
        public Output<string?> TunnelDestination { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelDestinationVariable")]
        public Output<string?> TunnelDestinationVariable { get; private set; } = null!;

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Output("tunnelRouteVia")]
        public Output<string?> TunnelRouteVia { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelRouteViaVariable")]
        public Output<string?> TunnelRouteViaVariable { get; private set; } = null!;

        /// <summary>
        /// Tunnel source IP Address
        /// </summary>
        [Output("tunnelSource")]
        public Output<string?> TunnelSource { get; private set; } = null!;

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Output("tunnelSourceInterface")]
        public Output<string?> TunnelSourceInterface { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceInterfaceVariable")]
        public Output<string?> TunnelSourceInterfaceVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tunnelSourceVariable")]
        public Output<string?> TunnelSourceVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoVpnInterfaceIpsecFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoVpnInterfaceIpsecFeatureTemplate(string name, CiscoVpnInterfaceIpsecFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate", name, args ?? new CiscoVpnInterfaceIpsecFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoVpnInterfaceIpsecFeatureTemplate(string name, Input<string> id, CiscoVpnInterfaceIpsecFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoVpnInterfaceIpsecFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoVpnInterfaceIpsecFeatureTemplate Get(string name, Input<string> id, CiscoVpnInterfaceIpsecFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoVpnInterfaceIpsecFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoVpnInterfaceIpsecFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("applicationVariable")]
        public Input<string>? ApplicationVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("clearDontFragment")]
        public Input<bool>? ClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clearDontFragmentVariable")]
        public Input<string>? ClearDontFragmentVariable { get; set; }

        /// <summary>
        /// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
        /// </summary>
        [Input("deadPeerDetectionInterval")]
        public Input<int>? DeadPeerDetectionInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deadPeerDetectionIntervalVariable")]
        public Input<string>? DeadPeerDetectionIntervalVariable { get; set; }

        /// <summary>
        /// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
        /// </summary>
        [Input("deadPeerDetectionRetries")]
        public Input<int>? DeadPeerDetectionRetries { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deadPeerDetectionRetriesVariable")]
        public Input<string>? DeadPeerDetectionRetriesVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
        /// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
        /// </summary>
        [Input("ikeCiphersuite")]
        public Input<string>? IkeCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeCiphersuiteVariable")]
        public Input<string>? IkeCiphersuiteVariable { get; set; }

        /// <summary>
        /// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
        /// </summary>
        [Input("ikeGroup")]
        public Input<string>? IkeGroup { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeGroupVariable")]
        public Input<string>? IkeGroupVariable { get; set; }

        /// <summary>
        /// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
        /// </summary>
        [Input("ikeMode")]
        public Input<string>? IkeMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeModeVariable")]
        public Input<string>? IkeModeVariable { get; set; }

        /// <summary>
        /// Use preshared key to authenticate IKE peer
        /// </summary>
        [Input("ikePreSharedKey")]
        public Input<string>? IkePreSharedKey { get; set; }

        /// <summary>
        /// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikePreSharedKeyLocalId")]
        public Input<string>? IkePreSharedKeyLocalId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePreSharedKeyLocalIdVariable")]
        public Input<string>? IkePreSharedKeyLocalIdVariable { get; set; }

        /// <summary>
        /// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikePreSharedKeyRemoteId")]
        public Input<string>? IkePreSharedKeyRemoteId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePreSharedKeyRemoteIdVariable")]
        public Input<string>? IkePreSharedKeyRemoteIdVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePreSharedKeyVariable")]
        public Input<string>? IkePreSharedKeyVariable { get; set; }

        /// <summary>
        /// IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
        /// </summary>
        [Input("ikeRekeyInterval")]
        public Input<int>? IkeRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeRekeyIntervalVariable")]
        public Input<string>? IkeRekeyIntervalVariable { get; set; }

        /// <summary>
        /// IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
        /// </summary>
        [Input("ikeVersion")]
        public Input<int>? IkeVersion { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipAddressVariable")]
        public Input<string>? IpAddressVariable { get; set; }

        /// <summary>
        /// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
        /// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
        /// `aes256-gcm`
        /// </summary>
        [Input("ipsecCiphersuite")]
        public Input<string>? IpsecCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecCiphersuiteVariable")]
        public Input<string>? IpsecCiphersuiteVariable { get; set; }

        /// <summary>
        /// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
        /// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
        /// </summary>
        [Input("ipsecPerfectForwardSecrecy")]
        public Input<string>? IpsecPerfectForwardSecrecy { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecPerfectForwardSecrecyVariable")]
        public Input<string>? IpsecPerfectForwardSecrecyVariable { get; set; }

        /// <summary>
        /// IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
        /// </summary>
        [Input("ipsecRekeyInterval")]
        public Input<int>? IpsecRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecRekeyIntervalVariable")]
        public Input<string>? IpsecRekeyIntervalVariable { get; set; }

        /// <summary>
        /// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
        /// </summary>
        [Input("ipsecReplayWindow")]
        public Input<int>? IpsecReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecReplayWindowVariable")]
        public Input<string>? IpsecReplayWindowVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mtuVariable")]
        public Input<string>? MtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Tunnel destination IP address
        /// </summary>
        [Input("tunnelDestination")]
        public Input<string>? TunnelDestination { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationVariable")]
        public Input<string>? TunnelDestinationVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelRouteVia")]
        public Input<string>? TunnelRouteVia { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelRouteViaVariable")]
        public Input<string>? TunnelRouteViaVariable { get; set; }

        /// <summary>
        /// Tunnel source IP Address
        /// </summary>
        [Input("tunnelSource")]
        public Input<string>? TunnelSource { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelSourceInterface")]
        public Input<string>? TunnelSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceInterfaceVariable")]
        public Input<string>? TunnelSourceInterfaceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceVariable")]
        public Input<string>? TunnelSourceVariable { get; set; }

        public CiscoVpnInterfaceIpsecFeatureTemplateArgs()
        {
        }
        public static new CiscoVpnInterfaceIpsecFeatureTemplateArgs Empty => new CiscoVpnInterfaceIpsecFeatureTemplateArgs();
    }

    public sealed class CiscoVpnInterfaceIpsecFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("applicationVariable")]
        public Input<string>? ApplicationVariable { get; set; }

        /// <summary>
        /// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
        /// </summary>
        [Input("clearDontFragment")]
        public Input<bool>? ClearDontFragment { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("clearDontFragmentVariable")]
        public Input<string>? ClearDontFragmentVariable { get; set; }

        /// <summary>
        /// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
        /// </summary>
        [Input("deadPeerDetectionInterval")]
        public Input<int>? DeadPeerDetectionInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deadPeerDetectionIntervalVariable")]
        public Input<string>? DeadPeerDetectionIntervalVariable { get; set; }

        /// <summary>
        /// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
        /// </summary>
        [Input("deadPeerDetectionRetries")]
        public Input<int>? DeadPeerDetectionRetries { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("deadPeerDetectionRetriesVariable")]
        public Input<string>? DeadPeerDetectionRetriesVariable { get; set; }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
        /// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
        /// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
        /// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
        /// </summary>
        [Input("ikeCiphersuite")]
        public Input<string>? IkeCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeCiphersuiteVariable")]
        public Input<string>? IkeCiphersuiteVariable { get; set; }

        /// <summary>
        /// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
        /// </summary>
        [Input("ikeGroup")]
        public Input<string>? IkeGroup { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeGroupVariable")]
        public Input<string>? IkeGroupVariable { get; set; }

        /// <summary>
        /// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
        /// </summary>
        [Input("ikeMode")]
        public Input<string>? IkeMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeModeVariable")]
        public Input<string>? IkeModeVariable { get; set; }

        /// <summary>
        /// Use preshared key to authenticate IKE peer
        /// </summary>
        [Input("ikePreSharedKey")]
        public Input<string>? IkePreSharedKey { get; set; }

        /// <summary>
        /// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikePreSharedKeyLocalId")]
        public Input<string>? IkePreSharedKeyLocalId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePreSharedKeyLocalIdVariable")]
        public Input<string>? IkePreSharedKeyLocalIdVariable { get; set; }

        /// <summary>
        /// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
        /// </summary>
        [Input("ikePreSharedKeyRemoteId")]
        public Input<string>? IkePreSharedKeyRemoteId { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePreSharedKeyRemoteIdVariable")]
        public Input<string>? IkePreSharedKeyRemoteIdVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikePreSharedKeyVariable")]
        public Input<string>? IkePreSharedKeyVariable { get; set; }

        /// <summary>
        /// IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
        /// </summary>
        [Input("ikeRekeyInterval")]
        public Input<int>? IkeRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ikeRekeyIntervalVariable")]
        public Input<string>? IkeRekeyIntervalVariable { get; set; }

        /// <summary>
        /// IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
        /// </summary>
        [Input("ikeVersion")]
        public Input<int>? IkeVersion { get; set; }

        /// <summary>
        /// Interface description
        /// </summary>
        [Input("interfaceDescription")]
        public Input<string>? InterfaceDescription { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceDescriptionVariable")]
        public Input<string>? InterfaceDescriptionVariable { get; set; }

        /// <summary>
        /// Interface name: IPsec when present
        /// </summary>
        [Input("interfaceName")]
        public Input<string>? InterfaceName { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("interfaceNameVariable")]
        public Input<string>? InterfaceNameVariable { get; set; }

        /// <summary>
        /// Assign IPv4 address
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipAddressVariable")]
        public Input<string>? IpAddressVariable { get; set; }

        /// <summary>
        /// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
        /// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
        /// `aes256-gcm`
        /// </summary>
        [Input("ipsecCiphersuite")]
        public Input<string>? IpsecCiphersuite { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecCiphersuiteVariable")]
        public Input<string>? IpsecCiphersuiteVariable { get; set; }

        /// <summary>
        /// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
        /// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
        /// </summary>
        [Input("ipsecPerfectForwardSecrecy")]
        public Input<string>? IpsecPerfectForwardSecrecy { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecPerfectForwardSecrecyVariable")]
        public Input<string>? IpsecPerfectForwardSecrecyVariable { get; set; }

        /// <summary>
        /// IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
        /// </summary>
        [Input("ipsecRekeyInterval")]
        public Input<int>? IpsecRekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecRekeyIntervalVariable")]
        public Input<string>? IpsecRekeyIntervalVariable { get; set; }

        /// <summary>
        /// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
        /// </summary>
        [Input("ipsecReplayWindow")]
        public Input<int>? IpsecReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipsecReplayWindowVariable")]
        public Input<string>? IpsecReplayWindowVariable { get; set; }

        /// <summary>
        /// Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("mtuVariable")]
        public Input<string>? MtuVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Administrative state - Default value: `true`
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("shutdownVariable")]
        public Input<string>? ShutdownVariable { get; set; }

        /// <summary>
        /// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
        /// </summary>
        [Input("tcpMssAdjust")]
        public Input<int>? TcpMssAdjust { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpMssAdjustVariable")]
        public Input<string>? TcpMssAdjustVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trackerVariable")]
        public Input<string>? TrackerVariable { get; set; }

        [Input("trackers")]
        private InputList<string>? _trackers;

        /// <summary>
        /// Enable tracker for this interface
        /// </summary>
        public InputList<string> Trackers
        {
            get => _trackers ?? (_trackers = new InputList<string>());
            set => _trackers = value;
        }

        /// <summary>
        /// Tunnel destination IP address
        /// </summary>
        [Input("tunnelDestination")]
        public Input<string>? TunnelDestination { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelDestinationVariable")]
        public Input<string>? TunnelDestinationVariable { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelRouteVia")]
        public Input<string>? TunnelRouteVia { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelRouteViaVariable")]
        public Input<string>? TunnelRouteViaVariable { get; set; }

        /// <summary>
        /// Tunnel source IP Address
        /// </summary>
        [Input("tunnelSource")]
        public Input<string>? TunnelSource { get; set; }

        /// <summary>
        /// &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
        /// </summary>
        [Input("tunnelSourceInterface")]
        public Input<string>? TunnelSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceInterfaceVariable")]
        public Input<string>? TunnelSourceInterfaceVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tunnelSourceVariable")]
        public Input<string>? TunnelSourceVariable { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoVpnInterfaceIpsecFeatureTemplateState()
        {
        }
        public static new CiscoVpnInterfaceIpsecFeatureTemplateState Empty => new CiscoVpnInterfaceIpsecFeatureTemplateState();
    }
}
