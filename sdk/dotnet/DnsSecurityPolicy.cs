// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a DNS Security Policy.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.DnsSecurityPolicy("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         LocalDomainBypassListId = "0c4e096d-b06d-4052-93ed-70fe34fda6dc",
    ///         MatchAllVpn = true,
    ///         UmbrellaDefault = false,
    ///         DnsServerIp = "1.2.3.4",
    ///         LocalDomainBypassEnabled = true,
    ///         DnsCrypt = false,
    ///         ChildOrgId = "12334",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Expected import identifier with the format: "dns_security_policy_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy")]
    public partial class DnsSecurityPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
        /// </summary>
        [Output("childOrgId")]
        public Output<string> ChildOrgId { get; private set; } = null!;

        /// <summary>
        /// The description of the Policy
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
        /// </summary>
        [Output("dnsCrypt")]
        public Output<bool> DnsCrypt { get; private set; } = null!;

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `match_all_vpn` being equal to `true`
        /// </summary>
        [Output("dnsServerIp")]
        public Output<string> DnsServerIp { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        /// </summary>
        [Output("localDomainBypassEnabled")]
        public Output<bool> LocalDomainBypassEnabled { get; private set; } = null!;

        [Output("localDomainBypassListId")]
        public Output<string> LocalDomainBypassListId { get; private set; } = null!;

        /// <summary>
        /// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
        /// </summary>
        [Output("matchAllVpn")]
        public Output<bool> MatchAllVpn { get; private set; } = null!;

        /// <summary>
        /// The name of the Policy
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `match_all_vpn` being equal to `false`
        /// </summary>
        [Output("targetVpns")]
        public Output<ImmutableArray<Outputs.DnsSecurityPolicyTargetVpn>> TargetVpns { get; private set; } = null!;

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        /// </summary>
        [Output("umbrellaDefault")]
        public Output<bool> UmbrellaDefault { get; private set; } = null!;

        /// <summary>
        /// The version of the Policy
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a DnsSecurityPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsSecurityPolicy(string name, DnsSecurityPolicyArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy", name, args ?? new DnsSecurityPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsSecurityPolicy(string name, Input<string> id, DnsSecurityPolicyState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsSecurityPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsSecurityPolicy Get(string name, Input<string> id, DnsSecurityPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsSecurityPolicy(name, id, state, options);
        }
    }

    public sealed class DnsSecurityPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
        /// </summary>
        [Input("childOrgId", required: true)]
        public Input<string> ChildOrgId { get; set; } = null!;

        /// <summary>
        /// The description of the Policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
        /// </summary>
        [Input("dnsCrypt", required: true)]
        public Input<bool> DnsCrypt { get; set; } = null!;

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `match_all_vpn` being equal to `true`
        /// </summary>
        [Input("dnsServerIp", required: true)]
        public Input<string> DnsServerIp { get; set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        /// </summary>
        [Input("localDomainBypassEnabled", required: true)]
        public Input<bool> LocalDomainBypassEnabled { get; set; } = null!;

        [Input("localDomainBypassListId", required: true)]
        public Input<string> LocalDomainBypassListId { get; set; } = null!;

        /// <summary>
        /// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
        /// </summary>
        [Input("matchAllVpn", required: true)]
        public Input<bool> MatchAllVpn { get; set; } = null!;

        /// <summary>
        /// The name of the Policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<Inputs.DnsSecurityPolicyTargetVpnArgs>? _targetVpns;

        /// <summary>
        /// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `match_all_vpn` being equal to `false`
        /// </summary>
        public InputList<Inputs.DnsSecurityPolicyTargetVpnArgs> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<Inputs.DnsSecurityPolicyTargetVpnArgs>());
            set => _targetVpns = value;
        }

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        /// </summary>
        [Input("umbrellaDefault", required: true)]
        public Input<bool> UmbrellaDefault { get; set; } = null!;

        public DnsSecurityPolicyArgs()
        {
        }
        public static new DnsSecurityPolicyArgs Empty => new DnsSecurityPolicyArgs();
    }

    public sealed class DnsSecurityPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
        /// </summary>
        [Input("childOrgId")]
        public Input<string>? ChildOrgId { get; set; }

        /// <summary>
        /// The description of the Policy
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
        /// </summary>
        [Input("dnsCrypt")]
        public Input<bool>? DnsCrypt { get; set; }

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `match_all_vpn` being equal to `true`
        /// </summary>
        [Input("dnsServerIp")]
        public Input<string>? DnsServerIp { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        /// </summary>
        [Input("localDomainBypassEnabled")]
        public Input<bool>? LocalDomainBypassEnabled { get; set; }

        [Input("localDomainBypassListId")]
        public Input<string>? LocalDomainBypassListId { get; set; }

        /// <summary>
        /// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
        /// </summary>
        [Input("matchAllVpn")]
        public Input<bool>? MatchAllVpn { get; set; }

        /// <summary>
        /// The name of the Policy
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("targetVpns")]
        private InputList<Inputs.DnsSecurityPolicyTargetVpnGetArgs>? _targetVpns;

        /// <summary>
        /// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `match_all_vpn` being equal to `false`
        /// </summary>
        public InputList<Inputs.DnsSecurityPolicyTargetVpnGetArgs> TargetVpns
        {
            get => _targetVpns ?? (_targetVpns = new InputList<Inputs.DnsSecurityPolicyTargetVpnGetArgs>());
            set => _targetVpns = value;
        }

        /// <summary>
        /// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
        /// </summary>
        [Input("umbrellaDefault")]
        public Input<bool>? UmbrellaDefault { get; set; }

        /// <summary>
        /// The version of the Policy
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public DnsSecurityPolicyState()
        {
        }
        public static new DnsSecurityPolicyState Empty => new DnsSecurityPolicyState();
    }
}
