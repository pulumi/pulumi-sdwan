// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a TLS SSL Profile Policy Definition .
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.TlsSslProfilePolicyDefinition("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My description",
    ///         Mode = "security",
    ///         DecryptCategories = new[]
    ///         {
    ///             "alcohol-and-tobacco",
    ///         },
    ///         NeverDecryptCategories = new[]
    ///         {
    ///             "auctions",
    ///         },
    ///         SkipDecryptCategories = new[]
    ///         {
    ///             "cdns",
    ///         },
    ///         DecryptThreshold = "high-risk",
    ///         Reputation = false,
    ///         FailDecrypt = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition")]
    public partial class TlsSslProfilePolicyDefinition : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow URL list ID
        /// </summary>
        [Output("allowUrlListId")]
        public Output<string?> AllowUrlListId { get; private set; } = null!;

        /// <summary>
        /// Allow URL list version
        /// </summary>
        [Output("allowUrlListVersion")]
        public Output<int?> AllowUrlListVersion { get; private set; } = null!;

        /// <summary>
        /// Block URL list ID
        /// </summary>
        [Output("blockUrlListId")]
        public Output<string?> BlockUrlListId { get; private set; } = null!;

        /// <summary>
        /// Block URL list version
        /// </summary>
        [Output("blockUrlListVersion")]
        public Output<int?> BlockUrlListVersion { get; private set; } = null!;

        /// <summary>
        /// Categories that should be decrypted
        /// </summary>
        [Output("decryptCategories")]
        public Output<ImmutableArray<string>> DecryptCategories { get; private set; } = null!;

        /// <summary>
        /// Decrypt threshold
        ///   - Choices: `high-risk`, `Suspicious`, `moderate-risk`, `low-risk`, `Trustworthy`
        /// </summary>
        [Output("decryptThreshold")]
        public Output<string?> DecryptThreshold { get; private set; } = null!;

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Fail decrypt enabled
        /// </summary>
        [Output("failDecrypt")]
        public Output<bool?> FailDecrypt { get; private set; } = null!;

        /// <summary>
        /// The policy mode
        ///   - Choices: `Security`, `Unified`
        /// </summary>
        [Output("mode")]
        public Output<string?> Mode { get; private set; } = null!;

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Categories that should never be decrypted
        /// </summary>
        [Output("neverDecryptCategories")]
        public Output<ImmutableArray<string>> NeverDecryptCategories { get; private set; } = null!;

        /// <summary>
        /// Reputation enabled
        /// </summary>
        [Output("reputation")]
        public Output<bool?> Reputation { get; private set; } = null!;

        /// <summary>
        /// Categories that should skipped
        /// </summary>
        [Output("skipDecryptCategories")]
        public Output<ImmutableArray<string>> SkipDecryptCategories { get; private set; } = null!;

        /// <summary>
        /// The version of the object
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a TlsSslProfilePolicyDefinition resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsSslProfilePolicyDefinition(string name, TlsSslProfilePolicyDefinitionArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition", name, args ?? new TlsSslProfilePolicyDefinitionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsSslProfilePolicyDefinition(string name, Input<string> id, TlsSslProfilePolicyDefinitionState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsSslProfilePolicyDefinition resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsSslProfilePolicyDefinition Get(string name, Input<string> id, TlsSslProfilePolicyDefinitionState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsSslProfilePolicyDefinition(name, id, state, options);
        }
    }

    public sealed class TlsSslProfilePolicyDefinitionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow URL list ID
        /// </summary>
        [Input("allowUrlListId")]
        public Input<string>? AllowUrlListId { get; set; }

        /// <summary>
        /// Allow URL list version
        /// </summary>
        [Input("allowUrlListVersion")]
        public Input<int>? AllowUrlListVersion { get; set; }

        /// <summary>
        /// Block URL list ID
        /// </summary>
        [Input("blockUrlListId")]
        public Input<string>? BlockUrlListId { get; set; }

        /// <summary>
        /// Block URL list version
        /// </summary>
        [Input("blockUrlListVersion")]
        public Input<int>? BlockUrlListVersion { get; set; }

        [Input("decryptCategories")]
        private InputList<string>? _decryptCategories;

        /// <summary>
        /// Categories that should be decrypted
        /// </summary>
        public InputList<string> DecryptCategories
        {
            get => _decryptCategories ?? (_decryptCategories = new InputList<string>());
            set => _decryptCategories = value;
        }

        /// <summary>
        /// Decrypt threshold
        ///   - Choices: `high-risk`, `Suspicious`, `moderate-risk`, `low-risk`, `Trustworthy`
        /// </summary>
        [Input("decryptThreshold")]
        public Input<string>? DecryptThreshold { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Fail decrypt enabled
        /// </summary>
        [Input("failDecrypt")]
        public Input<bool>? FailDecrypt { get; set; }

        /// <summary>
        /// The policy mode
        ///   - Choices: `Security`, `Unified`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("neverDecryptCategories")]
        private InputList<string>? _neverDecryptCategories;

        /// <summary>
        /// Categories that should never be decrypted
        /// </summary>
        public InputList<string> NeverDecryptCategories
        {
            get => _neverDecryptCategories ?? (_neverDecryptCategories = new InputList<string>());
            set => _neverDecryptCategories = value;
        }

        /// <summary>
        /// Reputation enabled
        /// </summary>
        [Input("reputation")]
        public Input<bool>? Reputation { get; set; }

        [Input("skipDecryptCategories")]
        private InputList<string>? _skipDecryptCategories;

        /// <summary>
        /// Categories that should skipped
        /// </summary>
        public InputList<string> SkipDecryptCategories
        {
            get => _skipDecryptCategories ?? (_skipDecryptCategories = new InputList<string>());
            set => _skipDecryptCategories = value;
        }

        public TlsSslProfilePolicyDefinitionArgs()
        {
        }
        public static new TlsSslProfilePolicyDefinitionArgs Empty => new TlsSslProfilePolicyDefinitionArgs();
    }

    public sealed class TlsSslProfilePolicyDefinitionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow URL list ID
        /// </summary>
        [Input("allowUrlListId")]
        public Input<string>? AllowUrlListId { get; set; }

        /// <summary>
        /// Allow URL list version
        /// </summary>
        [Input("allowUrlListVersion")]
        public Input<int>? AllowUrlListVersion { get; set; }

        /// <summary>
        /// Block URL list ID
        /// </summary>
        [Input("blockUrlListId")]
        public Input<string>? BlockUrlListId { get; set; }

        /// <summary>
        /// Block URL list version
        /// </summary>
        [Input("blockUrlListVersion")]
        public Input<int>? BlockUrlListVersion { get; set; }

        [Input("decryptCategories")]
        private InputList<string>? _decryptCategories;

        /// <summary>
        /// Categories that should be decrypted
        /// </summary>
        public InputList<string> DecryptCategories
        {
            get => _decryptCategories ?? (_decryptCategories = new InputList<string>());
            set => _decryptCategories = value;
        }

        /// <summary>
        /// Decrypt threshold
        ///   - Choices: `high-risk`, `Suspicious`, `moderate-risk`, `low-risk`, `Trustworthy`
        /// </summary>
        [Input("decryptThreshold")]
        public Input<string>? DecryptThreshold { get; set; }

        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Fail decrypt enabled
        /// </summary>
        [Input("failDecrypt")]
        public Input<bool>? FailDecrypt { get; set; }

        /// <summary>
        /// The policy mode
        ///   - Choices: `Security`, `Unified`
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("neverDecryptCategories")]
        private InputList<string>? _neverDecryptCategories;

        /// <summary>
        /// Categories that should never be decrypted
        /// </summary>
        public InputList<string> NeverDecryptCategories
        {
            get => _neverDecryptCategories ?? (_neverDecryptCategories = new InputList<string>());
            set => _neverDecryptCategories = value;
        }

        /// <summary>
        /// Reputation enabled
        /// </summary>
        [Input("reputation")]
        public Input<bool>? Reputation { get; set; }

        [Input("skipDecryptCategories")]
        private InputList<string>? _skipDecryptCategories;

        /// <summary>
        /// Categories that should skipped
        /// </summary>
        public InputList<string> SkipDecryptCategories
        {
            get => _skipDecryptCategories ?? (_skipDecryptCategories = new InputList<string>());
            set => _skipDecryptCategories = value;
        }

        /// <summary>
        /// The version of the object
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public TlsSslProfilePolicyDefinitionState()
        {
        }
        public static new TlsSslProfilePolicyDefinitionState Empty => new TlsSslProfilePolicyDefinitionState();
    }
}
