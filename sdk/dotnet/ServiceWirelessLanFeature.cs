// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Service Wireless LAN Feature.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// Expected import identifier with the format: "service_wireless_lan_feature_id,feature_profile_id"
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature")]
    public partial class ServiceWirelessLanFeature : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Select country
        ///   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
        /// </summary>
        [Output("country")]
        public Output<string?> Country { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("countryVariable")]
        public Output<string?> CountryVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// 2.4GHz Enabled
        ///   - Default value: `True`
        /// </summary>
        [Output("enable24g")]
        public Output<bool?> Enable24g { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enable24gVariable")]
        public Output<string?> Enable24gVariable { get; private set; } = null!;

        /// <summary>
        /// 5GHz Enabled
        ///   - Default value: `True`
        /// </summary>
        [Output("enable5g")]
        public Output<bool?> Enable5g { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enable5gVariable")]
        public Output<string?> Enable5gVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Set mobile express default gateway
        /// </summary>
        [Output("meDefaultGateway")]
        public Output<string?> MeDefaultGateway { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("meDefaultGatewayVariable")]
        public Output<string?> MeDefaultGatewayVariable { get; private set; } = null!;

        /// <summary>
        /// ME management IP dynamic allocated by DHCP
        /// </summary>
        [Output("meDynamicIpEnabled")]
        public Output<bool> MeDynamicIpEnabled { get; private set; } = null!;

        /// <summary>
        /// Set mobile express controller address
        /// </summary>
        [Output("meIpv4Address")]
        public Output<string?> MeIpv4Address { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("meIpv4AddressVariable")]
        public Output<string?> MeIpv4AddressVariable { get; private set; } = null!;

        /// <summary>
        /// Set mobile express controller subnet mask
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Output("meSubnetMask")]
        public Output<string?> MeSubnetMask { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("meSubnetMaskVariable")]
        public Output<string?> MeSubnetMaskVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("passwordVariable")]
        public Output<string?> PasswordVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Wi-Fi SSID profile
        /// </summary>
        [Output("ssids")]
        public Output<ImmutableArray<Outputs.ServiceWirelessLanFeatureSsid>> Ssids { get; private set; } = null!;

        /// <summary>
        /// Set management username
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("usernameVariable")]
        public Output<string?> UsernameVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceWirelessLanFeature resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceWirelessLanFeature(string name, ServiceWirelessLanFeatureArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature", name, args ?? new ServiceWirelessLanFeatureArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceWirelessLanFeature(string name, Input<string> id, ServiceWirelessLanFeatureState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceWirelessLanFeature resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceWirelessLanFeature Get(string name, Input<string> id, ServiceWirelessLanFeatureState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceWirelessLanFeature(name, id, state, options);
        }
    }

    public sealed class ServiceWirelessLanFeatureArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select country
        ///   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("countryVariable")]
        public Input<string>? CountryVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 2.4GHz Enabled
        ///   - Default value: `True`
        /// </summary>
        [Input("enable24g")]
        public Input<bool>? Enable24g { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enable24gVariable")]
        public Input<string>? Enable24gVariable { get; set; }

        /// <summary>
        /// 5GHz Enabled
        ///   - Default value: `True`
        /// </summary>
        [Input("enable5g")]
        public Input<bool>? Enable5g { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enable5gVariable")]
        public Input<string>? Enable5gVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Set mobile express default gateway
        /// </summary>
        [Input("meDefaultGateway")]
        public Input<string>? MeDefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("meDefaultGatewayVariable")]
        public Input<string>? MeDefaultGatewayVariable { get; set; }

        /// <summary>
        /// ME management IP dynamic allocated by DHCP
        /// </summary>
        [Input("meDynamicIpEnabled", required: true)]
        public Input<bool> MeDynamicIpEnabled { get; set; } = null!;

        /// <summary>
        /// Set mobile express controller address
        /// </summary>
        [Input("meIpv4Address")]
        public Input<string>? MeIpv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("meIpv4AddressVariable")]
        public Input<string>? MeIpv4AddressVariable { get; set; }

        /// <summary>
        /// Set mobile express controller subnet mask
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("meSubnetMask")]
        public Input<string>? MeSubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("meSubnetMaskVariable")]
        public Input<string>? MeSubnetMaskVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("passwordVariable")]
        public Input<string>? PasswordVariable { get; set; }

        [Input("ssids", required: true)]
        private InputList<Inputs.ServiceWirelessLanFeatureSsidArgs>? _ssids;

        /// <summary>
        /// Configure Wi-Fi SSID profile
        /// </summary>
        public InputList<Inputs.ServiceWirelessLanFeatureSsidArgs> Ssids
        {
            get => _ssids ?? (_ssids = new InputList<Inputs.ServiceWirelessLanFeatureSsidArgs>());
            set => _ssids = value;
        }

        /// <summary>
        /// Set management username
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("usernameVariable")]
        public Input<string>? UsernameVariable { get; set; }

        public ServiceWirelessLanFeatureArgs()
        {
        }
        public static new ServiceWirelessLanFeatureArgs Empty => new ServiceWirelessLanFeatureArgs();
    }

    public sealed class ServiceWirelessLanFeatureState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Select country
        ///   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("countryVariable")]
        public Input<string>? CountryVariable { get; set; }

        /// <summary>
        /// The description of the Feature
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 2.4GHz Enabled
        ///   - Default value: `True`
        /// </summary>
        [Input("enable24g")]
        public Input<bool>? Enable24g { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enable24gVariable")]
        public Input<string>? Enable24gVariable { get; set; }

        /// <summary>
        /// 5GHz Enabled
        ///   - Default value: `True`
        /// </summary>
        [Input("enable5g")]
        public Input<bool>? Enable5g { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enable5gVariable")]
        public Input<string>? Enable5gVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Set mobile express default gateway
        /// </summary>
        [Input("meDefaultGateway")]
        public Input<string>? MeDefaultGateway { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("meDefaultGatewayVariable")]
        public Input<string>? MeDefaultGatewayVariable { get; set; }

        /// <summary>
        /// ME management IP dynamic allocated by DHCP
        /// </summary>
        [Input("meDynamicIpEnabled")]
        public Input<bool>? MeDynamicIpEnabled { get; set; }

        /// <summary>
        /// Set mobile express controller address
        /// </summary>
        [Input("meIpv4Address")]
        public Input<string>? MeIpv4Address { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("meIpv4AddressVariable")]
        public Input<string>? MeIpv4AddressVariable { get; set; }

        /// <summary>
        /// Set mobile express controller subnet mask
        ///   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
        /// </summary>
        [Input("meSubnetMask")]
        public Input<string>? MeSubnetMask { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("meSubnetMaskVariable")]
        public Input<string>? MeSubnetMaskVariable { get; set; }

        /// <summary>
        /// The name of the Feature
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("passwordVariable")]
        public Input<string>? PasswordVariable { get; set; }

        [Input("ssids")]
        private InputList<Inputs.ServiceWirelessLanFeatureSsidGetArgs>? _ssids;

        /// <summary>
        /// Configure Wi-Fi SSID profile
        /// </summary>
        public InputList<Inputs.ServiceWirelessLanFeatureSsidGetArgs> Ssids
        {
            get => _ssids ?? (_ssids = new InputList<Inputs.ServiceWirelessLanFeatureSsidGetArgs>());
            set => _ssids = value;
        }

        /// <summary>
        /// Set management username
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("usernameVariable")]
        public Input<string>? UsernameVariable { get; set; }

        /// <summary>
        /// The version of the Feature
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ServiceWirelessLanFeatureState()
        {
        }
        public static new ServiceWirelessLanFeatureState Empty => new ServiceWirelessLanFeatureState();
    }
}
