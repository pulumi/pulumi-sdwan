// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetDnsSecurityPolicyDefinition
    {
        /// <summary>
        /// This data source can read the DNS Security Policy Definition .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetDnsSecurityPolicyDefinition.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetDnsSecurityPolicyDefinitionResult> InvokeAsync(GetDnsSecurityPolicyDefinitionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDnsSecurityPolicyDefinitionResult>("sdwan:index/getDnsSecurityPolicyDefinition:getDnsSecurityPolicyDefinition", args ?? new GetDnsSecurityPolicyDefinitionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the DNS Security Policy Definition .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetDnsSecurityPolicyDefinition.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsSecurityPolicyDefinitionResult> Invoke(GetDnsSecurityPolicyDefinitionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsSecurityPolicyDefinitionResult>("sdwan:index/getDnsSecurityPolicyDefinition:getDnsSecurityPolicyDefinition", args ?? new GetDnsSecurityPolicyDefinitionInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the DNS Security Policy Definition .
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetDnsSecurityPolicyDefinition.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetDnsSecurityPolicyDefinitionResult> Invoke(GetDnsSecurityPolicyDefinitionInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDnsSecurityPolicyDefinitionResult>("sdwan:index/getDnsSecurityPolicyDefinition:getDnsSecurityPolicyDefinition", args ?? new GetDnsSecurityPolicyDefinitionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDnsSecurityPolicyDefinitionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDnsSecurityPolicyDefinitionArgs()
        {
        }
        public static new GetDnsSecurityPolicyDefinitionArgs Empty => new GetDnsSecurityPolicyDefinitionArgs();
    }

    public sealed class GetDnsSecurityPolicyDefinitionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the object
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDnsSecurityPolicyDefinitionInvokeArgs()
        {
        }
        public static new GetDnsSecurityPolicyDefinitionInvokeArgs Empty => new GetDnsSecurityPolicyDefinitionInvokeArgs();
    }


    [OutputType]
    public sealed class GetDnsSecurityPolicyDefinitionResult
    {
        /// <summary>
        /// Credentials feature template ID
        /// </summary>
        public readonly string CiscoSigCredentialsFeatureTemplateId;
        /// <summary>
        /// Credentials feature template version
        /// </summary>
        public readonly int CiscoSigCredentialsFeatureTemplateVersion;
        /// <summary>
        /// Only relevant when `umbrella_dns_default` is `false`
        /// </summary>
        public readonly string CustomDnsServerIp;
        /// <summary>
        /// The description of the policy definition.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Should DNSCrypt be enabled
        /// </summary>
        public readonly bool Dnscrypt;
        /// <summary>
        /// Local domain bypass list ID
        /// </summary>
        public readonly string DomainListId;
        /// <summary>
        /// Local domain bypass list version
        /// </summary>
        public readonly int DomainListVersion;
        /// <summary>
        /// The id of the object
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Should the local domain bypass list be enabled
        /// </summary>
        public readonly bool LocalDomainBypassEnabled;
        /// <summary>
        /// Should use match all VPN
        /// </summary>
        public readonly bool MatchAllVpn;
        /// <summary>
        /// The name of the policy definition.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Only relevant when `match_all_vpn` is `false`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDnsSecurityPolicyDefinitionTargetVpnResult> TargetVpns;
        /// <summary>
        /// Should use umbrella as DNS Server
        /// </summary>
        public readonly bool UmbrellaDnsDefault;
        /// <summary>
        /// The version of the object
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetDnsSecurityPolicyDefinitionResult(
            string ciscoSigCredentialsFeatureTemplateId,

            int ciscoSigCredentialsFeatureTemplateVersion,

            string customDnsServerIp,

            string description,

            bool dnscrypt,

            string domainListId,

            int domainListVersion,

            string id,

            bool localDomainBypassEnabled,

            bool matchAllVpn,

            string name,

            ImmutableArray<Outputs.GetDnsSecurityPolicyDefinitionTargetVpnResult> targetVpns,

            bool umbrellaDnsDefault,

            int version)
        {
            CiscoSigCredentialsFeatureTemplateId = ciscoSigCredentialsFeatureTemplateId;
            CiscoSigCredentialsFeatureTemplateVersion = ciscoSigCredentialsFeatureTemplateVersion;
            CustomDnsServerIp = customDnsServerIp;
            Description = description;
            Dnscrypt = dnscrypt;
            DomainListId = domainListId;
            DomainListVersion = domainListVersion;
            Id = id;
            LocalDomainBypassEnabled = localDomainBypassEnabled;
            MatchAllVpn = matchAllVpn;
            Name = name;
            TargetVpns = targetVpns;
            UmbrellaDnsDefault = umbrellaDnsDefault;
            Version = version;
        }
    }
}
