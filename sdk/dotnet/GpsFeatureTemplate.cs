// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a gps feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.GpsFeatureTemplate("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         DeviceTypes = new[]
    ///         {
    ///             "vedge-C8000V",
    ///         },
    ///         Enable = true,
    ///         GpsMode = "ms-based",
    ///         Nmea = true,
    ///         SourceAddress = "1.2.3.4",
    ///         DestinationAddress = "2.3.4.5",
    ///         DestinationPort = 1234,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate")]
    public partial class GpsFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Destination address
        /// </summary>
        [Output("destinationAddress")]
        public Output<string?> DestinationAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("destinationAddressVariable")]
        public Output<string?> DestinationAddressVariable { get; private set; } = null!;

        /// <summary>
        /// Destination port
        ///   - Range: `1`-`65535`
        /// </summary>
        [Output("destinationPort")]
        public Output<int?> DestinationPort { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("destinationPortVariable")]
        public Output<string?> DestinationPortVariable { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Enable/disable GPS
        ///   - Default value: `false`
        /// </summary>
        [Output("enable")]
        public Output<bool?> Enable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("enableVariable")]
        public Output<string?> EnableVariable { get; private set; } = null!;

        /// <summary>
        /// Select GPS mode
        ///   - Choices: `ms-based`, `standalone`
        ///   - Default value: `ms-based`
        /// </summary>
        [Output("gpsMode")]
        public Output<string?> GpsMode { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("gpsModeVariable")]
        public Output<string?> GpsModeVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable/disable NMEA data
        ///   - Default value: `false`
        /// </summary>
        [Output("nmea")]
        public Output<bool?> Nmea { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nmeaVariable")]
        public Output<string?> NmeaVariable { get; private set; } = null!;

        /// <summary>
        /// Source address
        /// </summary>
        [Output("sourceAddress")]
        public Output<string?> SourceAddress { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sourceAddressVariable")]
        public Output<string?> SourceAddressVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a GpsFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GpsFeatureTemplate(string name, GpsFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate", name, args ?? new GpsFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GpsFeatureTemplate(string name, Input<string> id, GpsFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GpsFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GpsFeatureTemplate Get(string name, Input<string> id, GpsFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new GpsFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class GpsFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Destination address
        /// </summary>
        [Input("destinationAddress")]
        public Input<string>? DestinationAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("destinationAddressVariable")]
        public Input<string>? DestinationAddressVariable { get; set; }

        /// <summary>
        /// Destination port
        ///   - Range: `1`-`65535`
        /// </summary>
        [Input("destinationPort")]
        public Input<int>? DestinationPort { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("destinationPortVariable")]
        public Input<string>? DestinationPortVariable { get; set; }

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable/disable GPS
        ///   - Default value: `false`
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableVariable")]
        public Input<string>? EnableVariable { get; set; }

        /// <summary>
        /// Select GPS mode
        ///   - Choices: `ms-based`, `standalone`
        ///   - Default value: `ms-based`
        /// </summary>
        [Input("gpsMode")]
        public Input<string>? GpsMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsModeVariable")]
        public Input<string>? GpsModeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable NMEA data
        ///   - Default value: `false`
        /// </summary>
        [Input("nmea")]
        public Input<bool>? Nmea { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaVariable")]
        public Input<string>? NmeaVariable { get; set; }

        /// <summary>
        /// Source address
        /// </summary>
        [Input("sourceAddress")]
        public Input<string>? SourceAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sourceAddressVariable")]
        public Input<string>? SourceAddressVariable { get; set; }

        public GpsFeatureTemplateArgs()
        {
        }
        public static new GpsFeatureTemplateArgs Empty => new GpsFeatureTemplateArgs();
    }

    public sealed class GpsFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Destination address
        /// </summary>
        [Input("destinationAddress")]
        public Input<string>? DestinationAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("destinationAddressVariable")]
        public Input<string>? DestinationAddressVariable { get; set; }

        /// <summary>
        /// Destination port
        ///   - Range: `1`-`65535`
        /// </summary>
        [Input("destinationPort")]
        public Input<int>? DestinationPort { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("destinationPortVariable")]
        public Input<string>? DestinationPortVariable { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Enable/disable GPS
        ///   - Default value: `false`
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("enableVariable")]
        public Input<string>? EnableVariable { get; set; }

        /// <summary>
        /// Select GPS mode
        ///   - Choices: `ms-based`, `standalone`
        ///   - Default value: `ms-based`
        /// </summary>
        [Input("gpsMode")]
        public Input<string>? GpsMode { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("gpsModeVariable")]
        public Input<string>? GpsModeVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable/disable NMEA data
        ///   - Default value: `false`
        /// </summary>
        [Input("nmea")]
        public Input<bool>? Nmea { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nmeaVariable")]
        public Input<string>? NmeaVariable { get; set; }

        /// <summary>
        /// Source address
        /// </summary>
        [Input("sourceAddress")]
        public Input<string>? SourceAddress { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sourceAddressVariable")]
        public Input<string>? SourceAddressVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public GpsFeatureTemplateState()
        {
        }
        public static new GpsFeatureTemplateState Empty => new GpsFeatureTemplateState();
    }
}
