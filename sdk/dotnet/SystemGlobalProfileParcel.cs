// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a System Global profile parcel.
    ///   - Minimum SD-WAN Manager version: `20.12.0`
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Sdwan = Pulumi.Sdwan;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Sdwan.SystemGlobalProfileParcel("example", new()
    ///     {
    ///         Name = "Example",
    ///         Description = "My Example",
    ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
    ///         HttpServer = false,
    ///         HttpsServer = false,
    ///         FtpPassive = false,
    ///         DomainLookup = false,
    ///         ArpProxy = false,
    ///         RshRcp = false,
    ///         LineVty = false,
    ///         Cdp = true,
    ///         Lldp = true,
    ///         SourceInterface = "GigabitEthernet0/0/1",
    ///         TcpKeepalivesIn = true,
    ///         TcpKeepalivesOut = true,
    ///         TcpSmallServers = false,
    ///         UdpSmallServers = false,
    ///         ConsoleLogging = true,
    ///         IpSourceRouting = false,
    ///         VtyLineLogging = false,
    ///         SnmpIfindexPersist = true,
    ///         IgnoreBootp = true,
    ///         Nat64UdpTimeout = 300,
    ///         Nat64TcpTimeout = 3600,
    ///         HttpAuthentication = "aaa",
    ///         SshVersion = "2",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/systemGlobalProfileParcel:SystemGlobalProfileParcel example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/systemGlobalProfileParcel:SystemGlobalProfileParcel")]
    public partial class SystemGlobalProfileParcel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set ARP Proxy - Default value: `false`
        /// </summary>
        [Output("arpProxy")]
        public Output<bool?> ArpProxy { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("arpProxyVariable")]
        public Output<string?> ArpProxyVariable { get; private set; } = null!;

        /// <summary>
        /// Configure CDP - Default value: `true`
        /// </summary>
        [Output("cdp")]
        public Output<bool?> Cdp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("cdpVariable")]
        public Output<string?> CdpVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Console Logging - Default value: `true`
        /// </summary>
        [Output("consoleLogging")]
        public Output<bool?> ConsoleLogging { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("consoleLoggingVariable")]
        public Output<string?> ConsoleLoggingVariable { get; private set; } = null!;

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Configure Domain-Lookup - Default value: `false`
        /// </summary>
        [Output("domainLookup")]
        public Output<bool?> DomainLookup { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("domainLookupVariable")]
        public Output<string?> DomainLookupVariable { get; private set; } = null!;

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Output("featureProfileId")]
        public Output<string> FeatureProfileId { get; private set; } = null!;

        /// <summary>
        /// Set Passive FTP - Default value: `false`
        /// </summary>
        [Output("ftpPassive")]
        public Output<bool?> FtpPassive { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ftpPassiveVariable")]
        public Output<string?> FtpPassiveVariable { get; private set; } = null!;

        /// <summary>
        /// Set preference for HTTP Authentication - Choices: `local`, `aaa`
        /// </summary>
        [Output("httpAuthentication")]
        public Output<string?> HttpAuthentication { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("httpAuthenticationVariable")]
        public Output<string?> HttpAuthenticationVariable { get; private set; } = null!;

        /// <summary>
        /// Set a HTTP Server - Default value: `false`
        /// </summary>
        [Output("httpServer")]
        public Output<bool?> HttpServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("httpServerVariable")]
        public Output<string?> HttpServerVariable { get; private set; } = null!;

        /// <summary>
        /// Set a HTTPS Server - Default value: `false`
        /// </summary>
        [Output("httpsServer")]
        public Output<bool?> HttpsServer { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("httpsServerVariable")]
        public Output<string?> HttpsServerVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Ignore BOOTP - Default value: `true`
        /// </summary>
        [Output("ignoreBootp")]
        public Output<bool?> IgnoreBootp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ignoreBootpVariable")]
        public Output<string?> IgnoreBootpVariable { get; private set; } = null!;

        /// <summary>
        /// Set Source Route - Default value: `false`
        /// </summary>
        [Output("ipSourceRouting")]
        public Output<bool?> IpSourceRouting { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("ipSourceRoutingVariable")]
        public Output<string?> IpSourceRoutingVariable { get; private set; } = null!;

        /// <summary>
        /// Configure Telnet (Outbound) - Default value: `false`
        /// </summary>
        [Output("lineVty")]
        public Output<bool?> LineVty { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("lineVtyVariable")]
        public Output<string?> LineVtyVariable { get; private set; } = null!;

        /// <summary>
        /// Configure LLDP - Default value: `true`
        /// </summary>
        [Output("lldp")]
        public Output<bool?> Lldp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("lldpVariable")]
        public Output<string?> LldpVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Set NAT64 TCP session timeout, in seconds - Range: `1`-`536870` - Default value: `3600`
        /// </summary>
        [Output("nat64TcpTimeout")]
        public Output<int?> Nat64TcpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nat64TcpTimeoutVariable")]
        public Output<string?> Nat64TcpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Set NAT64 UDP session timeout, in seconds - Range: `1`-`536870` - Default value: `300`
        /// </summary>
        [Output("nat64UdpTimeout")]
        public Output<int?> Nat64UdpTimeout { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("nat64UdpTimeoutVariable")]
        public Output<string?> Nat64UdpTimeoutVariable { get; private set; } = null!;

        /// <summary>
        /// Set RSH/RCP - Default value: `false`
        /// </summary>
        [Output("rshRcp")]
        public Output<bool?> RshRcp { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("rshRcpVariable")]
        public Output<string?> RshRcpVariable { get; private set; } = null!;

        /// <summary>
        /// Configure SNMP Ifindex Persist - Default value: `true`
        /// </summary>
        [Output("snmpIfindexPersist")]
        public Output<bool?> SnmpIfindexPersist { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("snmpIfindexPersistVariable")]
        public Output<string?> SnmpIfindexPersistVariable { get; private set; } = null!;

        /// <summary>
        /// Specify interface for source address in all HTTP(S) client connections
        /// </summary>
        [Output("sourceInterface")]
        public Output<string?> SourceInterface { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sourceInterfaceVariable")]
        public Output<string?> SourceInterfaceVariable { get; private set; } = null!;

        /// <summary>
        /// Set SSH version - Choices: `2`
        /// </summary>
        [Output("sshVersion")]
        public Output<string?> SshVersion { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("sshVersionVariable")]
        public Output<string?> SshVersionVariable { get; private set; } = null!;

        /// <summary>
        /// Configure tcp-keepalives-in - Default value: `true`
        /// </summary>
        [Output("tcpKeepalivesIn")]
        public Output<bool?> TcpKeepalivesIn { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpKeepalivesInVariable")]
        public Output<string?> TcpKeepalivesInVariable { get; private set; } = null!;

        /// <summary>
        /// Configure tcp-keepalives-out - Default value: `true`
        /// </summary>
        [Output("tcpKeepalivesOut")]
        public Output<bool?> TcpKeepalivesOut { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpKeepalivesOutVariable")]
        public Output<string?> TcpKeepalivesOutVariable { get; private set; } = null!;

        /// <summary>
        /// Configure tcp-small-servers - Default value: `false`
        /// </summary>
        [Output("tcpSmallServers")]
        public Output<bool?> TcpSmallServers { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("tcpSmallServersVariable")]
        public Output<string?> TcpSmallServersVariable { get; private set; } = null!;

        /// <summary>
        /// Configure udp-small-servers - Default value: `false`
        /// </summary>
        [Output("udpSmallServers")]
        public Output<bool?> UdpSmallServers { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("udpSmallServersVariable")]
        public Output<string?> UdpSmallServersVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;

        /// <summary>
        /// Configure VTY Line Logging - Default value: `false`
        /// </summary>
        [Output("vtyLineLogging")]
        public Output<bool?> VtyLineLogging { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("vtyLineLoggingVariable")]
        public Output<string?> VtyLineLoggingVariable { get; private set; } = null!;


        /// <summary>
        /// Create a SystemGlobalProfileParcel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SystemGlobalProfileParcel(string name, SystemGlobalProfileParcelArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/systemGlobalProfileParcel:SystemGlobalProfileParcel", name, args ?? new SystemGlobalProfileParcelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SystemGlobalProfileParcel(string name, Input<string> id, SystemGlobalProfileParcelState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/systemGlobalProfileParcel:SystemGlobalProfileParcel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SystemGlobalProfileParcel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SystemGlobalProfileParcel Get(string name, Input<string> id, SystemGlobalProfileParcelState? state = null, CustomResourceOptions? options = null)
        {
            return new SystemGlobalProfileParcel(name, id, state, options);
        }
    }

    public sealed class SystemGlobalProfileParcelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set ARP Proxy - Default value: `false`
        /// </summary>
        [Input("arpProxy")]
        public Input<bool>? ArpProxy { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpProxyVariable")]
        public Input<string>? ArpProxyVariable { get; set; }

        /// <summary>
        /// Configure CDP - Default value: `true`
        /// </summary>
        [Input("cdp")]
        public Input<bool>? Cdp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("cdpVariable")]
        public Input<string>? CdpVariable { get; set; }

        /// <summary>
        /// Configure Console Logging - Default value: `true`
        /// </summary>
        [Input("consoleLogging")]
        public Input<bool>? ConsoleLogging { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("consoleLoggingVariable")]
        public Input<string>? ConsoleLoggingVariable { get; set; }

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configure Domain-Lookup - Default value: `false`
        /// </summary>
        [Input("domainLookup")]
        public Input<bool>? DomainLookup { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("domainLookupVariable")]
        public Input<string>? DomainLookupVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// Set Passive FTP - Default value: `false`
        /// </summary>
        [Input("ftpPassive")]
        public Input<bool>? FtpPassive { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ftpPassiveVariable")]
        public Input<string>? FtpPassiveVariable { get; set; }

        /// <summary>
        /// Set preference for HTTP Authentication - Choices: `local`, `aaa`
        /// </summary>
        [Input("httpAuthentication")]
        public Input<string>? HttpAuthentication { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("httpAuthenticationVariable")]
        public Input<string>? HttpAuthenticationVariable { get; set; }

        /// <summary>
        /// Set a HTTP Server - Default value: `false`
        /// </summary>
        [Input("httpServer")]
        public Input<bool>? HttpServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("httpServerVariable")]
        public Input<string>? HttpServerVariable { get; set; }

        /// <summary>
        /// Set a HTTPS Server - Default value: `false`
        /// </summary>
        [Input("httpsServer")]
        public Input<bool>? HttpsServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("httpsServerVariable")]
        public Input<string>? HttpsServerVariable { get; set; }

        /// <summary>
        /// Configure Ignore BOOTP - Default value: `true`
        /// </summary>
        [Input("ignoreBootp")]
        public Input<bool>? IgnoreBootp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ignoreBootpVariable")]
        public Input<string>? IgnoreBootpVariable { get; set; }

        /// <summary>
        /// Set Source Route - Default value: `false`
        /// </summary>
        [Input("ipSourceRouting")]
        public Input<bool>? IpSourceRouting { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipSourceRoutingVariable")]
        public Input<string>? IpSourceRoutingVariable { get; set; }

        /// <summary>
        /// Configure Telnet (Outbound) - Default value: `false`
        /// </summary>
        [Input("lineVty")]
        public Input<bool>? LineVty { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("lineVtyVariable")]
        public Input<string>? LineVtyVariable { get; set; }

        /// <summary>
        /// Configure LLDP - Default value: `true`
        /// </summary>
        [Input("lldp")]
        public Input<bool>? Lldp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("lldpVariable")]
        public Input<string>? LldpVariable { get; set; }

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set NAT64 TCP session timeout, in seconds - Range: `1`-`536870` - Default value: `3600`
        /// </summary>
        [Input("nat64TcpTimeout")]
        public Input<int>? Nat64TcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nat64TcpTimeoutVariable")]
        public Input<string>? Nat64TcpTimeoutVariable { get; set; }

        /// <summary>
        /// Set NAT64 UDP session timeout, in seconds - Range: `1`-`536870` - Default value: `300`
        /// </summary>
        [Input("nat64UdpTimeout")]
        public Input<int>? Nat64UdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nat64UdpTimeoutVariable")]
        public Input<string>? Nat64UdpTimeoutVariable { get; set; }

        /// <summary>
        /// Set RSH/RCP - Default value: `false`
        /// </summary>
        [Input("rshRcp")]
        public Input<bool>? RshRcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rshRcpVariable")]
        public Input<string>? RshRcpVariable { get; set; }

        /// <summary>
        /// Configure SNMP Ifindex Persist - Default value: `true`
        /// </summary>
        [Input("snmpIfindexPersist")]
        public Input<bool>? SnmpIfindexPersist { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("snmpIfindexPersistVariable")]
        public Input<string>? SnmpIfindexPersistVariable { get; set; }

        /// <summary>
        /// Specify interface for source address in all HTTP(S) client connections
        /// </summary>
        [Input("sourceInterface")]
        public Input<string>? SourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sourceInterfaceVariable")]
        public Input<string>? SourceInterfaceVariable { get; set; }

        /// <summary>
        /// Set SSH version - Choices: `2`
        /// </summary>
        [Input("sshVersion")]
        public Input<string>? SshVersion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sshVersionVariable")]
        public Input<string>? SshVersionVariable { get; set; }

        /// <summary>
        /// Configure tcp-keepalives-in - Default value: `true`
        /// </summary>
        [Input("tcpKeepalivesIn")]
        public Input<bool>? TcpKeepalivesIn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpKeepalivesInVariable")]
        public Input<string>? TcpKeepalivesInVariable { get; set; }

        /// <summary>
        /// Configure tcp-keepalives-out - Default value: `true`
        /// </summary>
        [Input("tcpKeepalivesOut")]
        public Input<bool>? TcpKeepalivesOut { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpKeepalivesOutVariable")]
        public Input<string>? TcpKeepalivesOutVariable { get; set; }

        /// <summary>
        /// Configure tcp-small-servers - Default value: `false`
        /// </summary>
        [Input("tcpSmallServers")]
        public Input<bool>? TcpSmallServers { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpSmallServersVariable")]
        public Input<string>? TcpSmallServersVariable { get; set; }

        /// <summary>
        /// Configure udp-small-servers - Default value: `false`
        /// </summary>
        [Input("udpSmallServers")]
        public Input<bool>? UdpSmallServers { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("udpSmallServersVariable")]
        public Input<string>? UdpSmallServersVariable { get; set; }

        /// <summary>
        /// Configure VTY Line Logging - Default value: `false`
        /// </summary>
        [Input("vtyLineLogging")]
        public Input<bool>? VtyLineLogging { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vtyLineLoggingVariable")]
        public Input<string>? VtyLineLoggingVariable { get; set; }

        public SystemGlobalProfileParcelArgs()
        {
        }
        public static new SystemGlobalProfileParcelArgs Empty => new SystemGlobalProfileParcelArgs();
    }

    public sealed class SystemGlobalProfileParcelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set ARP Proxy - Default value: `false`
        /// </summary>
        [Input("arpProxy")]
        public Input<bool>? ArpProxy { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("arpProxyVariable")]
        public Input<string>? ArpProxyVariable { get; set; }

        /// <summary>
        /// Configure CDP - Default value: `true`
        /// </summary>
        [Input("cdp")]
        public Input<bool>? Cdp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("cdpVariable")]
        public Input<string>? CdpVariable { get; set; }

        /// <summary>
        /// Configure Console Logging - Default value: `true`
        /// </summary>
        [Input("consoleLogging")]
        public Input<bool>? ConsoleLogging { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("consoleLoggingVariable")]
        public Input<string>? ConsoleLoggingVariable { get; set; }

        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Configure Domain-Lookup - Default value: `false`
        /// </summary>
        [Input("domainLookup")]
        public Input<bool>? DomainLookup { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("domainLookupVariable")]
        public Input<string>? DomainLookupVariable { get; set; }

        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId")]
        public Input<string>? FeatureProfileId { get; set; }

        /// <summary>
        /// Set Passive FTP - Default value: `false`
        /// </summary>
        [Input("ftpPassive")]
        public Input<bool>? FtpPassive { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ftpPassiveVariable")]
        public Input<string>? FtpPassiveVariable { get; set; }

        /// <summary>
        /// Set preference for HTTP Authentication - Choices: `local`, `aaa`
        /// </summary>
        [Input("httpAuthentication")]
        public Input<string>? HttpAuthentication { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("httpAuthenticationVariable")]
        public Input<string>? HttpAuthenticationVariable { get; set; }

        /// <summary>
        /// Set a HTTP Server - Default value: `false`
        /// </summary>
        [Input("httpServer")]
        public Input<bool>? HttpServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("httpServerVariable")]
        public Input<string>? HttpServerVariable { get; set; }

        /// <summary>
        /// Set a HTTPS Server - Default value: `false`
        /// </summary>
        [Input("httpsServer")]
        public Input<bool>? HttpsServer { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("httpsServerVariable")]
        public Input<string>? HttpsServerVariable { get; set; }

        /// <summary>
        /// Configure Ignore BOOTP - Default value: `true`
        /// </summary>
        [Input("ignoreBootp")]
        public Input<bool>? IgnoreBootp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ignoreBootpVariable")]
        public Input<string>? IgnoreBootpVariable { get; set; }

        /// <summary>
        /// Set Source Route - Default value: `false`
        /// </summary>
        [Input("ipSourceRouting")]
        public Input<bool>? IpSourceRouting { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("ipSourceRoutingVariable")]
        public Input<string>? IpSourceRoutingVariable { get; set; }

        /// <summary>
        /// Configure Telnet (Outbound) - Default value: `false`
        /// </summary>
        [Input("lineVty")]
        public Input<bool>? LineVty { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("lineVtyVariable")]
        public Input<string>? LineVtyVariable { get; set; }

        /// <summary>
        /// Configure LLDP - Default value: `true`
        /// </summary>
        [Input("lldp")]
        public Input<bool>? Lldp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("lldpVariable")]
        public Input<string>? LldpVariable { get; set; }

        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Set NAT64 TCP session timeout, in seconds - Range: `1`-`536870` - Default value: `3600`
        /// </summary>
        [Input("nat64TcpTimeout")]
        public Input<int>? Nat64TcpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nat64TcpTimeoutVariable")]
        public Input<string>? Nat64TcpTimeoutVariable { get; set; }

        /// <summary>
        /// Set NAT64 UDP session timeout, in seconds - Range: `1`-`536870` - Default value: `300`
        /// </summary>
        [Input("nat64UdpTimeout")]
        public Input<int>? Nat64UdpTimeout { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("nat64UdpTimeoutVariable")]
        public Input<string>? Nat64UdpTimeoutVariable { get; set; }

        /// <summary>
        /// Set RSH/RCP - Default value: `false`
        /// </summary>
        [Input("rshRcp")]
        public Input<bool>? RshRcp { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rshRcpVariable")]
        public Input<string>? RshRcpVariable { get; set; }

        /// <summary>
        /// Configure SNMP Ifindex Persist - Default value: `true`
        /// </summary>
        [Input("snmpIfindexPersist")]
        public Input<bool>? SnmpIfindexPersist { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("snmpIfindexPersistVariable")]
        public Input<string>? SnmpIfindexPersistVariable { get; set; }

        /// <summary>
        /// Specify interface for source address in all HTTP(S) client connections
        /// </summary>
        [Input("sourceInterface")]
        public Input<string>? SourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sourceInterfaceVariable")]
        public Input<string>? SourceInterfaceVariable { get; set; }

        /// <summary>
        /// Set SSH version - Choices: `2`
        /// </summary>
        [Input("sshVersion")]
        public Input<string>? SshVersion { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("sshVersionVariable")]
        public Input<string>? SshVersionVariable { get; set; }

        /// <summary>
        /// Configure tcp-keepalives-in - Default value: `true`
        /// </summary>
        [Input("tcpKeepalivesIn")]
        public Input<bool>? TcpKeepalivesIn { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpKeepalivesInVariable")]
        public Input<string>? TcpKeepalivesInVariable { get; set; }

        /// <summary>
        /// Configure tcp-keepalives-out - Default value: `true`
        /// </summary>
        [Input("tcpKeepalivesOut")]
        public Input<bool>? TcpKeepalivesOut { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpKeepalivesOutVariable")]
        public Input<string>? TcpKeepalivesOutVariable { get; set; }

        /// <summary>
        /// Configure tcp-small-servers - Default value: `false`
        /// </summary>
        [Input("tcpSmallServers")]
        public Input<bool>? TcpSmallServers { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("tcpSmallServersVariable")]
        public Input<string>? TcpSmallServersVariable { get; set; }

        /// <summary>
        /// Configure udp-small-servers - Default value: `false`
        /// </summary>
        [Input("udpSmallServers")]
        public Input<bool>? UdpSmallServers { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("udpSmallServersVariable")]
        public Input<string>? UdpSmallServersVariable { get; set; }

        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        /// <summary>
        /// Configure VTY Line Logging - Default value: `false`
        /// </summary>
        [Input("vtyLineLogging")]
        public Input<bool>? VtyLineLogging { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("vtyLineLoggingVariable")]
        public Input<string>? VtyLineLoggingVariable { get; set; }

        public SystemGlobalProfileParcelState()
        {
        }
        public static new SystemGlobalProfileParcelState Empty => new SystemGlobalProfileParcelState();
    }
}
