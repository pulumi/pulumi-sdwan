// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco NTP feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate")]
    public partial class CiscoNtpFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set MD5 authentication key
        /// </summary>
        [Output("authenticationKeys")]
        public Output<ImmutableArray<Outputs.CiscoNtpFeatureTemplateAuthenticationKey>> AuthenticationKeys { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Configure device as NTP master
        ///   - Default value: `false`
        /// </summary>
        [Output("master")]
        public Output<bool?> Master { get; private set; } = null!;

        /// <summary>
        /// Set interface for NTP Master
        /// </summary>
        [Output("masterSourceInterface")]
        public Output<string?> MasterSourceInterface { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("masterSourceInterfaceVariable")]
        public Output<string?> MasterSourceInterfaceVariable { get; private set; } = null!;

        /// <summary>
        /// Master Stratum &lt;1..15&gt;
        ///   - Range: `1`-`15`
        /// </summary>
        [Output("masterStratum")]
        public Output<int?> MasterStratum { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("masterStratumVariable")]
        public Output<string?> MasterStratumVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("masterVariable")]
        public Output<string?> MasterVariable { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configure NTP servers
        /// </summary>
        [Output("servers")]
        public Output<ImmutableArray<Outputs.CiscoNtpFeatureTemplateServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// Designate authentication key as trustworthy
        /// </summary>
        [Output("trustedKeys")]
        public Output<ImmutableArray<int>> TrustedKeys { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("trustedKeysVariable")]
        public Output<string?> TrustedKeysVariable { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoNtpFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoNtpFeatureTemplate(string name, CiscoNtpFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate", name, args ?? new CiscoNtpFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoNtpFeatureTemplate(string name, Input<string> id, CiscoNtpFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoNtpFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoNtpFeatureTemplate Get(string name, Input<string> id, CiscoNtpFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoNtpFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoNtpFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        [Input("authenticationKeys")]
        private InputList<Inputs.CiscoNtpFeatureTemplateAuthenticationKeyArgs>? _authenticationKeys;

        /// <summary>
        /// Set MD5 authentication key
        /// </summary>
        public InputList<Inputs.CiscoNtpFeatureTemplateAuthenticationKeyArgs> AuthenticationKeys
        {
            get => _authenticationKeys ?? (_authenticationKeys = new InputList<Inputs.CiscoNtpFeatureTemplateAuthenticationKeyArgs>());
            set => _authenticationKeys = value;
        }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Configure device as NTP master
        ///   - Default value: `false`
        /// </summary>
        [Input("master")]
        public Input<bool>? Master { get; set; }

        /// <summary>
        /// Set interface for NTP Master
        /// </summary>
        [Input("masterSourceInterface")]
        public Input<string>? MasterSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("masterSourceInterfaceVariable")]
        public Input<string>? MasterSourceInterfaceVariable { get; set; }

        /// <summary>
        /// Master Stratum &lt;1..15&gt;
        ///   - Range: `1`-`15`
        /// </summary>
        [Input("masterStratum")]
        public Input<int>? MasterStratum { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("masterStratumVariable")]
        public Input<string>? MasterStratumVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("masterVariable")]
        public Input<string>? MasterVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("servers")]
        private InputList<Inputs.CiscoNtpFeatureTemplateServerArgs>? _servers;

        /// <summary>
        /// Configure NTP servers
        /// </summary>
        public InputList<Inputs.CiscoNtpFeatureTemplateServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.CiscoNtpFeatureTemplateServerArgs>());
            set => _servers = value;
        }

        [Input("trustedKeys")]
        private InputList<int>? _trustedKeys;

        /// <summary>
        /// Designate authentication key as trustworthy
        /// </summary>
        public InputList<int> TrustedKeys
        {
            get => _trustedKeys ?? (_trustedKeys = new InputList<int>());
            set => _trustedKeys = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trustedKeysVariable")]
        public Input<string>? TrustedKeysVariable { get; set; }

        public CiscoNtpFeatureTemplateArgs()
        {
        }
        public static new CiscoNtpFeatureTemplateArgs Empty => new CiscoNtpFeatureTemplateArgs();
    }

    public sealed class CiscoNtpFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        [Input("authenticationKeys")]
        private InputList<Inputs.CiscoNtpFeatureTemplateAuthenticationKeyGetArgs>? _authenticationKeys;

        /// <summary>
        /// Set MD5 authentication key
        /// </summary>
        public InputList<Inputs.CiscoNtpFeatureTemplateAuthenticationKeyGetArgs> AuthenticationKeys
        {
            get => _authenticationKeys ?? (_authenticationKeys = new InputList<Inputs.CiscoNtpFeatureTemplateAuthenticationKeyGetArgs>());
            set => _authenticationKeys = value;
        }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Configure device as NTP master
        ///   - Default value: `false`
        /// </summary>
        [Input("master")]
        public Input<bool>? Master { get; set; }

        /// <summary>
        /// Set interface for NTP Master
        /// </summary>
        [Input("masterSourceInterface")]
        public Input<string>? MasterSourceInterface { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("masterSourceInterfaceVariable")]
        public Input<string>? MasterSourceInterfaceVariable { get; set; }

        /// <summary>
        /// Master Stratum &lt;1..15&gt;
        ///   - Range: `1`-`15`
        /// </summary>
        [Input("masterStratum")]
        public Input<int>? MasterStratum { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("masterStratumVariable")]
        public Input<string>? MasterStratumVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("masterVariable")]
        public Input<string>? MasterVariable { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("servers")]
        private InputList<Inputs.CiscoNtpFeatureTemplateServerGetArgs>? _servers;

        /// <summary>
        /// Configure NTP servers
        /// </summary>
        public InputList<Inputs.CiscoNtpFeatureTemplateServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.CiscoNtpFeatureTemplateServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        [Input("trustedKeys")]
        private InputList<int>? _trustedKeys;

        /// <summary>
        /// Designate authentication key as trustworthy
        /// </summary>
        public InputList<int> TrustedKeys
        {
            get => _trustedKeys ?? (_trustedKeys = new InputList<int>());
            set => _trustedKeys = value;
        }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("trustedKeysVariable")]
        public Input<string>? TrustedKeysVariable { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoNtpFeatureTemplateState()
        {
        }
        public static new CiscoNtpFeatureTemplateState Empty => new CiscoNtpFeatureTemplateState();
    }
}
