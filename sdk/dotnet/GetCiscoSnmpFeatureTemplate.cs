// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetCiscoSnmpFeatureTemplate
    {
        /// <summary>
        /// This data source can read the Cisco SNMP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoSnmpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCiscoSnmpFeatureTemplateResult> InvokeAsync(GetCiscoSnmpFeatureTemplateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCiscoSnmpFeatureTemplateResult>("sdwan:index/getCiscoSnmpFeatureTemplate:getCiscoSnmpFeatureTemplate", args ?? new GetCiscoSnmpFeatureTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco SNMP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoSnmpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoSnmpFeatureTemplateResult> Invoke(GetCiscoSnmpFeatureTemplateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoSnmpFeatureTemplateResult>("sdwan:index/getCiscoSnmpFeatureTemplate:getCiscoSnmpFeatureTemplate", args ?? new GetCiscoSnmpFeatureTemplateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Cisco SNMP feature template.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetCiscoSnmpFeatureTemplate.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCiscoSnmpFeatureTemplateResult> Invoke(GetCiscoSnmpFeatureTemplateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCiscoSnmpFeatureTemplateResult>("sdwan:index/getCiscoSnmpFeatureTemplate:getCiscoSnmpFeatureTemplate", args ?? new GetCiscoSnmpFeatureTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCiscoSnmpFeatureTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCiscoSnmpFeatureTemplateArgs()
        {
        }
        public static new GetCiscoSnmpFeatureTemplateArgs Empty => new GetCiscoSnmpFeatureTemplateArgs();
    }

    public sealed class GetCiscoSnmpFeatureTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the feature template
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetCiscoSnmpFeatureTemplateInvokeArgs()
        {
        }
        public static new GetCiscoSnmpFeatureTemplateInvokeArgs Empty => new GetCiscoSnmpFeatureTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCiscoSnmpFeatureTemplateResult
    {
        /// <summary>
        /// Configure SNMP community
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateCommunityResult> Communities;
        /// <summary>
        /// Set the contact for this managed node
        /// </summary>
        public readonly string Contact;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ContactVariable;
        /// <summary>
        /// The description of the feature template
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// List of supported device types
        /// </summary>
        public readonly ImmutableArray<string> DeviceTypes;
        /// <summary>
        /// Configure an SNMP group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateGroupResult> Groups;
        /// <summary>
        /// The id of the feature template
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set the physical location of this managed node
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LocationVariable;
        /// <summary>
        /// The name of the feature template
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Enable or disable SNMP
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ShutdownVariable;
        /// <summary>
        /// The template type
        /// </summary>
        public readonly string TemplateType;
        /// <summary>
        /// Configure SNMP server to receive SNMP traps
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateTrapTargetResult> TrapTargets;
        /// <summary>
        /// Configure an SNMP user
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateUserResult> Users;
        /// <summary>
        /// The version of the feature template
        /// </summary>
        public readonly int Version;
        /// <summary>
        /// Configure a view record
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateViewResult> Views;

        [OutputConstructor]
        private GetCiscoSnmpFeatureTemplateResult(
            ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateCommunityResult> communities,

            string contact,

            string contactVariable,

            string description,

            ImmutableArray<string> deviceTypes,

            ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateGroupResult> groups,

            string id,

            string location,

            string locationVariable,

            string name,

            bool shutdown,

            string shutdownVariable,

            string templateType,

            ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateTrapTargetResult> trapTargets,

            ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateUserResult> users,

            int version,

            ImmutableArray<Outputs.GetCiscoSnmpFeatureTemplateViewResult> views)
        {
            Communities = communities;
            Contact = contact;
            ContactVariable = contactVariable;
            Description = description;
            DeviceTypes = deviceTypes;
            Groups = groups;
            Id = id;
            Location = location;
            LocationVariable = locationVariable;
            Name = name;
            Shutdown = shutdown;
            ShutdownVariable = shutdownVariable;
            TemplateType = templateType;
            TrapTargets = trapTargets;
            Users = users;
            Version = version;
            Views = views;
        }
    }
}
