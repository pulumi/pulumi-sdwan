// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    public static class GetTransportRoutingBgpProfileParcel
    {
        /// <summary>
        /// This data source can read the Transport Routing BGP profile parcel.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportRoutingBgpProfileParcel.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTransportRoutingBgpProfileParcelResult> InvokeAsync(GetTransportRoutingBgpProfileParcelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransportRoutingBgpProfileParcelResult>("sdwan:index/getTransportRoutingBgpProfileParcel:getTransportRoutingBgpProfileParcel", args ?? new GetTransportRoutingBgpProfileParcelArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Transport Routing BGP profile parcel.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Sdwan = Pulumi.Sdwan;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Sdwan.GetTransportRoutingBgpProfileParcel.Invoke(new()
        ///     {
        ///         Id = "f6b2c44c-693c-4763-b010-895aa3d236bd",
        ///         FeatureProfileId = "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTransportRoutingBgpProfileParcelResult> Invoke(GetTransportRoutingBgpProfileParcelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransportRoutingBgpProfileParcelResult>("sdwan:index/getTransportRoutingBgpProfileParcel:getTransportRoutingBgpProfileParcel", args ?? new GetTransportRoutingBgpProfileParcelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransportRoutingBgpProfileParcelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public string FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the profile parcel
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTransportRoutingBgpProfileParcelArgs()
        {
        }
        public static new GetTransportRoutingBgpProfileParcelArgs Empty => new GetTransportRoutingBgpProfileParcelArgs();
    }

    public sealed class GetTransportRoutingBgpProfileParcelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        [Input("featureProfileId", required: true)]
        public Input<string> FeatureProfileId { get; set; } = null!;

        /// <summary>
        /// The id of the profile parcel
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTransportRoutingBgpProfileParcelInvokeArgs()
        {
        }
        public static new GetTransportRoutingBgpProfileParcelInvokeArgs Empty => new GetTransportRoutingBgpProfileParcelInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransportRoutingBgpProfileParcelResult
    {
        /// <summary>
        /// Compare MEDs from all ASs when selecting active BGP paths
        /// </summary>
        public readonly bool AlwaysCompareMed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AlwaysCompareMedVariable;
        /// <summary>
        /// Set autonomous system number \n\n or \n\n
        /// </summary>
        public readonly int AsNumber;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string AsNumberVariable;
        /// <summary>
        /// Compare router IDs when selecting active BGP paths
        /// </summary>
        public readonly bool CompareRouterId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string CompareRouterIdVariable;
        /// <summary>
        /// The description of the profile parcel
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Compare MEDs from all routes from same AS when selecting active BGP paths
        /// </summary>
        public readonly bool DeterministicMed;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string DeterministicMedVariable;
        /// <summary>
        /// Set administrative distance for external BGP routes
        /// </summary>
        public readonly int ExternalRoutesDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string ExternalRoutesDistanceVariable;
        /// <summary>
        /// Feature Profile ID
        /// </summary>
        public readonly string FeatureProfileId;
        /// <summary>
        /// Interval (seconds) not receiving a keepalive message declares a BGP peer down
        /// </summary>
        public readonly int HoldTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string HoldTimeVariable;
        /// <summary>
        /// The id of the profile parcel
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set administrative distance for internal BGP routes
        /// </summary>
        public readonly int InternalRoutesDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string InternalRoutesDistanceVariable;
        /// <summary>
        /// Aggregate prefixes in specific range
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4AggregateAddressResult> Ipv4AggregateAddresses;
        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        /// </summary>
        public readonly int Ipv4EibgpMaximumPaths;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4EibgpMaximumPathsVariable;
        /// <summary>
        /// Set BGP IPv4 neighbors
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4NeighborResult> Ipv4Neighbors;
        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4NetworkResult> Ipv4Networks;
        /// <summary>
        /// BGP Default Information Originate
        /// </summary>
        public readonly bool Ipv4Originate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4OriginateVariable;
        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4RedistributeResult> Ipv4Redistributes;
        /// <summary>
        /// Table map filtered or not
        /// </summary>
        public readonly bool Ipv4TableMapFilter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv4TableMapFilterVariable;
        public readonly string Ipv4TableMapRoutePolicyId;
        /// <summary>
        /// IPv6 Aggregate prefixes in specific range
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6AggregateAddressResult> Ipv6AggregateAddresses;
        /// <summary>
        /// Set maximum number of parallel IBGP paths for multipath load sharing
        /// </summary>
        public readonly int Ipv6EibgpMaximumPaths;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6EibgpMaximumPathsVariable;
        /// <summary>
        /// Set BGP IPv6 neighbors
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6NeighborResult> Ipv6Neighbors;
        /// <summary>
        /// Configure the networks for BGP to advertise
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6NetworkResult> Ipv6Networks;
        /// <summary>
        /// BGP Default Information Originate
        /// </summary>
        public readonly bool Ipv6Originate;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6OriginateVariable;
        /// <summary>
        /// Redistribute routes into BGP
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6RedistributeResult> Ipv6Redistributes;
        /// <summary>
        /// Table map filtered or not
        /// </summary>
        public readonly bool Ipv6TableMapFilter;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string Ipv6TableMapFilterVariable;
        public readonly string Ipv6TableMapRoutePolicyId;
        /// <summary>
        /// Interval (seconds) of keepalive messages sent to its BGP peer
        /// </summary>
        public readonly int KeepaliveTime;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string KeepaliveTimeVariable;
        /// <summary>
        /// Set administrative distance for local BGP routes
        /// </summary>
        public readonly int LocalRoutesDistance;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string LocalRoutesDistanceVariable;
        /// <summary>
        /// If path has no MED, consider it to be worst path when selecting active BGP paths
        /// </summary>
        public readonly bool MissingMedAsWorst;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MissingMedAsWorstVariable;
        /// <summary>
        /// MPLS BGP Interface
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelMplsInterfaceResult> MplsInterfaces;
        /// <summary>
        /// Ignore AS for multipath selection
        /// </summary>
        public readonly bool MultipathRelax;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string MultipathRelaxVariable;
        /// <summary>
        /// The name of the profile parcel
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Propagate AS Path
        /// </summary>
        public readonly bool PropagateAsPath;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PropagateAsPathVariable;
        /// <summary>
        /// Propagate Community
        /// </summary>
        public readonly bool PropagateCommunity;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string PropagateCommunityVariable;
        /// <summary>
        /// Configure BGP router identifier
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// Variable name
        /// </summary>
        public readonly string RouterIdVariable;
        /// <summary>
        /// The version of the profile parcel
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetTransportRoutingBgpProfileParcelResult(
            bool alwaysCompareMed,

            string alwaysCompareMedVariable,

            int asNumber,

            string asNumberVariable,

            bool compareRouterId,

            string compareRouterIdVariable,

            string description,

            bool deterministicMed,

            string deterministicMedVariable,

            int externalRoutesDistance,

            string externalRoutesDistanceVariable,

            string featureProfileId,

            int holdTime,

            string holdTimeVariable,

            string id,

            int internalRoutesDistance,

            string internalRoutesDistanceVariable,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4AggregateAddressResult> ipv4AggregateAddresses,

            int ipv4EibgpMaximumPaths,

            string ipv4EibgpMaximumPathsVariable,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4NeighborResult> ipv4Neighbors,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4NetworkResult> ipv4Networks,

            bool ipv4Originate,

            string ipv4OriginateVariable,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv4RedistributeResult> ipv4Redistributes,

            bool ipv4TableMapFilter,

            string ipv4TableMapFilterVariable,

            string ipv4TableMapRoutePolicyId,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6AggregateAddressResult> ipv6AggregateAddresses,

            int ipv6EibgpMaximumPaths,

            string ipv6EibgpMaximumPathsVariable,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6NeighborResult> ipv6Neighbors,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6NetworkResult> ipv6Networks,

            bool ipv6Originate,

            string ipv6OriginateVariable,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelIpv6RedistributeResult> ipv6Redistributes,

            bool ipv6TableMapFilter,

            string ipv6TableMapFilterVariable,

            string ipv6TableMapRoutePolicyId,

            int keepaliveTime,

            string keepaliveTimeVariable,

            int localRoutesDistance,

            string localRoutesDistanceVariable,

            bool missingMedAsWorst,

            string missingMedAsWorstVariable,

            ImmutableArray<Outputs.GetTransportRoutingBgpProfileParcelMplsInterfaceResult> mplsInterfaces,

            bool multipathRelax,

            string multipathRelaxVariable,

            string name,

            bool propagateAsPath,

            string propagateAsPathVariable,

            bool propagateCommunity,

            string propagateCommunityVariable,

            string routerId,

            string routerIdVariable,

            int version)
        {
            AlwaysCompareMed = alwaysCompareMed;
            AlwaysCompareMedVariable = alwaysCompareMedVariable;
            AsNumber = asNumber;
            AsNumberVariable = asNumberVariable;
            CompareRouterId = compareRouterId;
            CompareRouterIdVariable = compareRouterIdVariable;
            Description = description;
            DeterministicMed = deterministicMed;
            DeterministicMedVariable = deterministicMedVariable;
            ExternalRoutesDistance = externalRoutesDistance;
            ExternalRoutesDistanceVariable = externalRoutesDistanceVariable;
            FeatureProfileId = featureProfileId;
            HoldTime = holdTime;
            HoldTimeVariable = holdTimeVariable;
            Id = id;
            InternalRoutesDistance = internalRoutesDistance;
            InternalRoutesDistanceVariable = internalRoutesDistanceVariable;
            Ipv4AggregateAddresses = ipv4AggregateAddresses;
            Ipv4EibgpMaximumPaths = ipv4EibgpMaximumPaths;
            Ipv4EibgpMaximumPathsVariable = ipv4EibgpMaximumPathsVariable;
            Ipv4Neighbors = ipv4Neighbors;
            Ipv4Networks = ipv4Networks;
            Ipv4Originate = ipv4Originate;
            Ipv4OriginateVariable = ipv4OriginateVariable;
            Ipv4Redistributes = ipv4Redistributes;
            Ipv4TableMapFilter = ipv4TableMapFilter;
            Ipv4TableMapFilterVariable = ipv4TableMapFilterVariable;
            Ipv4TableMapRoutePolicyId = ipv4TableMapRoutePolicyId;
            Ipv6AggregateAddresses = ipv6AggregateAddresses;
            Ipv6EibgpMaximumPaths = ipv6EibgpMaximumPaths;
            Ipv6EibgpMaximumPathsVariable = ipv6EibgpMaximumPathsVariable;
            Ipv6Neighbors = ipv6Neighbors;
            Ipv6Networks = ipv6Networks;
            Ipv6Originate = ipv6Originate;
            Ipv6OriginateVariable = ipv6OriginateVariable;
            Ipv6Redistributes = ipv6Redistributes;
            Ipv6TableMapFilter = ipv6TableMapFilter;
            Ipv6TableMapFilterVariable = ipv6TableMapFilterVariable;
            Ipv6TableMapRoutePolicyId = ipv6TableMapRoutePolicyId;
            KeepaliveTime = keepaliveTime;
            KeepaliveTimeVariable = keepaliveTimeVariable;
            LocalRoutesDistance = localRoutesDistance;
            LocalRoutesDistanceVariable = localRoutesDistanceVariable;
            MissingMedAsWorst = missingMedAsWorst;
            MissingMedAsWorstVariable = missingMedAsWorstVariable;
            MplsInterfaces = mplsInterfaces;
            MultipathRelax = multipathRelax;
            MultipathRelaxVariable = multipathRelaxVariable;
            Name = name;
            PropagateAsPath = propagateAsPath;
            PropagateAsPathVariable = propagateAsPathVariable;
            PropagateCommunity = propagateCommunity;
            PropagateCommunityVariable = propagateCommunityVariable;
            RouterId = routerId;
            RouterIdVariable = routerIdVariable;
            Version = version;
        }
    }
}
