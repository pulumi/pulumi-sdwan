// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Sdwan
{
    /// <summary>
    /// This resource can manage a Cisco Security feature template.
    ///   - Minimum SD-WAN Manager version: `15.0.0`
    /// 
    /// ## Import
    /// 
    /// The `pulumi import` command can be used, for example:
    /// 
    /// ```sh
    /// $ pulumi import sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
    /// ```
    /// </summary>
    [SdwanResourceType("sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate")]
    public partial class CiscoSecurityFeatureTemplate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Variable name
        /// </summary>
        [Output("authenticationTypeVariable")]
        public Output<string?> AuthenticationTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        [Output("authenticationTypes")]
        public Output<ImmutableArray<string>> AuthenticationTypes { get; private set; } = null!;

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        [Output("deviceTypes")]
        public Output<ImmutableArray<string>> DeviceTypes { get; private set; } = null!;

        /// <summary>
        /// Extended Anti-Replay Window
        ///   - Range: `10`-`2048`
        ///   - Default value: `256`
        /// </summary>
        [Output("extendedArWindow")]
        public Output<int?> ExtendedArWindow { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("extendedArWindowVariable")]
        public Output<string?> ExtendedArWindowVariable { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("integrityTypeVariable")]
        public Output<string?> IntegrityTypeVariable { get; private set; } = null!;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        [Output("integrityTypes")]
        public Output<ImmutableArray<string>> IntegrityTypes { get; private set; } = null!;

        /// <summary>
        /// Configure a Keychain
        /// </summary>
        [Output("keychains")]
        public Output<ImmutableArray<Outputs.CiscoSecurityFeatureTemplateKeychain>> Keychains { get; private set; } = null!;

        /// <summary>
        /// Configure a Key
        /// </summary>
        [Output("keys")]
        public Output<ImmutableArray<Outputs.CiscoSecurityFeatureTemplateKey>> Keys { get; private set; } = null!;

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Enable or disable IPsec pairwise-keying
        ///   - Default value: `false`
        /// </summary>
        [Output("pairwiseKeying")]
        public Output<bool?> PairwiseKeying { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("pairwiseKeyingVariable")]
        public Output<string?> PairwiseKeyingVariable { get; private set; } = null!;

        /// <summary>
        /// Set how often to change the AES key for DTLS connections
        ///   - Range: `10`-`1209600`
        ///   - Default value: `86400`
        /// </summary>
        [Output("rekeyInterval")]
        public Output<int?> RekeyInterval { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("rekeyIntervalVariable")]
        public Output<string?> RekeyIntervalVariable { get; private set; } = null!;

        /// <summary>
        /// Set the sliding replay window size
        ///   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
        ///   - Default value: `512`
        /// </summary>
        [Output("replayWindow")]
        public Output<string?> ReplayWindow { get; private set; } = null!;

        /// <summary>
        /// Variable name
        /// </summary>
        [Output("replayWindowVariable")]
        public Output<string?> ReplayWindowVariable { get; private set; } = null!;

        /// <summary>
        /// The template type
        /// </summary>
        [Output("templateType")]
        public Output<string> TemplateType { get; private set; } = null!;

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Output("version")]
        public Output<int> Version { get; private set; } = null!;


        /// <summary>
        /// Create a CiscoSecurityFeatureTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CiscoSecurityFeatureTemplate(string name, CiscoSecurityFeatureTemplateArgs args, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate", name, args ?? new CiscoSecurityFeatureTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CiscoSecurityFeatureTemplate(string name, Input<string> id, CiscoSecurityFeatureTemplateState? state = null, CustomResourceOptions? options = null)
            : base("sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CiscoSecurityFeatureTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CiscoSecurityFeatureTemplate Get(string name, Input<string> id, CiscoSecurityFeatureTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new CiscoSecurityFeatureTemplate(name, id, state, options);
        }
    }

    public sealed class CiscoSecurityFeatureTemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Variable name
        /// </summary>
        [Input("authenticationTypeVariable")]
        public Input<string>? AuthenticationTypeVariable { get; set; }

        [Input("authenticationTypes")]
        private InputList<string>? _authenticationTypes;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        public InputList<string> AuthenticationTypes
        {
            get => _authenticationTypes ?? (_authenticationTypes = new InputList<string>());
            set => _authenticationTypes = value;
        }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        [Input("deviceTypes", required: true)]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Extended Anti-Replay Window
        ///   - Range: `10`-`2048`
        ///   - Default value: `256`
        /// </summary>
        [Input("extendedArWindow")]
        public Input<int>? ExtendedArWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("extendedArWindowVariable")]
        public Input<string>? ExtendedArWindowVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("integrityTypeVariable")]
        public Input<string>? IntegrityTypeVariable { get; set; }

        [Input("integrityTypes")]
        private InputList<string>? _integrityTypes;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        public InputList<string> IntegrityTypes
        {
            get => _integrityTypes ?? (_integrityTypes = new InputList<string>());
            set => _integrityTypes = value;
        }

        [Input("keychains")]
        private InputList<Inputs.CiscoSecurityFeatureTemplateKeychainArgs>? _keychains;

        /// <summary>
        /// Configure a Keychain
        /// </summary>
        public InputList<Inputs.CiscoSecurityFeatureTemplateKeychainArgs> Keychains
        {
            get => _keychains ?? (_keychains = new InputList<Inputs.CiscoSecurityFeatureTemplateKeychainArgs>());
            set => _keychains = value;
        }

        [Input("keys")]
        private InputList<Inputs.CiscoSecurityFeatureTemplateKeyArgs>? _keys;

        /// <summary>
        /// Configure a Key
        /// </summary>
        public InputList<Inputs.CiscoSecurityFeatureTemplateKeyArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.CiscoSecurityFeatureTemplateKeyArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable IPsec pairwise-keying
        ///   - Default value: `false`
        /// </summary>
        [Input("pairwiseKeying")]
        public Input<bool>? PairwiseKeying { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pairwiseKeyingVariable")]
        public Input<string>? PairwiseKeyingVariable { get; set; }

        /// <summary>
        /// Set how often to change the AES key for DTLS connections
        ///   - Range: `10`-`1209600`
        ///   - Default value: `86400`
        /// </summary>
        [Input("rekeyInterval")]
        public Input<int>? RekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rekeyIntervalVariable")]
        public Input<string>? RekeyIntervalVariable { get; set; }

        /// <summary>
        /// Set the sliding replay window size
        ///   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
        ///   - Default value: `512`
        /// </summary>
        [Input("replayWindow")]
        public Input<string>? ReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("replayWindowVariable")]
        public Input<string>? ReplayWindowVariable { get; set; }

        public CiscoSecurityFeatureTemplateArgs()
        {
        }
        public static new CiscoSecurityFeatureTemplateArgs Empty => new CiscoSecurityFeatureTemplateArgs();
    }

    public sealed class CiscoSecurityFeatureTemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Variable name
        /// </summary>
        [Input("authenticationTypeVariable")]
        public Input<string>? AuthenticationTypeVariable { get; set; }

        [Input("authenticationTypes")]
        private InputList<string>? _authenticationTypes;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        public InputList<string> AuthenticationTypes
        {
            get => _authenticationTypes ?? (_authenticationTypes = new InputList<string>());
            set => _authenticationTypes = value;
        }

        /// <summary>
        /// The description of the feature template
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("deviceTypes")]
        private InputList<string>? _deviceTypes;

        /// <summary>
        /// List of supported device types
        ///   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
        /// </summary>
        public InputList<string> DeviceTypes
        {
            get => _deviceTypes ?? (_deviceTypes = new InputList<string>());
            set => _deviceTypes = value;
        }

        /// <summary>
        /// Extended Anti-Replay Window
        ///   - Range: `10`-`2048`
        ///   - Default value: `256`
        /// </summary>
        [Input("extendedArWindow")]
        public Input<int>? ExtendedArWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("extendedArWindowVariable")]
        public Input<string>? ExtendedArWindowVariable { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("integrityTypeVariable")]
        public Input<string>? IntegrityTypeVariable { get; set; }

        [Input("integrityTypes")]
        private InputList<string>? _integrityTypes;

        /// <summary>
        /// Set the authentication type for DTLS connections
        /// </summary>
        public InputList<string> IntegrityTypes
        {
            get => _integrityTypes ?? (_integrityTypes = new InputList<string>());
            set => _integrityTypes = value;
        }

        [Input("keychains")]
        private InputList<Inputs.CiscoSecurityFeatureTemplateKeychainGetArgs>? _keychains;

        /// <summary>
        /// Configure a Keychain
        /// </summary>
        public InputList<Inputs.CiscoSecurityFeatureTemplateKeychainGetArgs> Keychains
        {
            get => _keychains ?? (_keychains = new InputList<Inputs.CiscoSecurityFeatureTemplateKeychainGetArgs>());
            set => _keychains = value;
        }

        [Input("keys")]
        private InputList<Inputs.CiscoSecurityFeatureTemplateKeyGetArgs>? _keys;

        /// <summary>
        /// Configure a Key
        /// </summary>
        public InputList<Inputs.CiscoSecurityFeatureTemplateKeyGetArgs> Keys
        {
            get => _keys ?? (_keys = new InputList<Inputs.CiscoSecurityFeatureTemplateKeyGetArgs>());
            set => _keys = value;
        }

        /// <summary>
        /// The name of the feature template
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Enable or disable IPsec pairwise-keying
        ///   - Default value: `false`
        /// </summary>
        [Input("pairwiseKeying")]
        public Input<bool>? PairwiseKeying { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("pairwiseKeyingVariable")]
        public Input<string>? PairwiseKeyingVariable { get; set; }

        /// <summary>
        /// Set how often to change the AES key for DTLS connections
        ///   - Range: `10`-`1209600`
        ///   - Default value: `86400`
        /// </summary>
        [Input("rekeyInterval")]
        public Input<int>? RekeyInterval { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("rekeyIntervalVariable")]
        public Input<string>? RekeyIntervalVariable { get; set; }

        /// <summary>
        /// Set the sliding replay window size
        ///   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
        ///   - Default value: `512`
        /// </summary>
        [Input("replayWindow")]
        public Input<string>? ReplayWindow { get; set; }

        /// <summary>
        /// Variable name
        /// </summary>
        [Input("replayWindowVariable")]
        public Input<string>? ReplayWindowVariable { get; set; }

        /// <summary>
        /// The template type
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// The version of the feature template
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public CiscoSecurityFeatureTemplateState()
        {
        }
        public static new CiscoSecurityFeatureTemplateState Empty => new CiscoSecurityFeatureTemplateState();
    }
}
