// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco SNMP feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CiscoSnmpFeatureTemplate("example", {
 *     name: "Example",
 *     description: "My Example",
 *     deviceTypes: ["vedge-C8000V"],
 *     shutdown: false,
 *     contact: "Max",
 *     location: "Building 1",
 *     views: [{
 *         name: "VIEW1",
 *         object_identifiers: [{
 *             id: "1.2.3",
 *             exclude: true,
 *         }],
 *     }],
 *     communities: [{
 *         name: "community1",
 *         view: "VIEW1",
 *         authorization: "read-only",
 *     }],
 *     groups: [{
 *         name: "GROUP1",
 *         security_level: "auth-priv",
 *         view: "VIEW1",
 *     }],
 *     users: [{
 *         name: "user1",
 *         authentication_protocol: "sha",
 *         authentication_password: "password123",
 *         privacy_protocol: "aes-cfb-128",
 *         privacy_password: "password123",
 *         group: "GROUP1",
 *     }],
 *     trapTargets: [{
 *         vpn_id: 1,
 *         ip: "1.1.1.1",
 *         udp_port: 12345,
 *         community_name: "community1",
 *         user: "user1",
 *         source_interface: "e1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoSnmpFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoSnmpFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoSnmpFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoSnmpFeatureTemplate {
        return new CiscoSnmpFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoSnmpFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoSnmpFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoSnmpFeatureTemplate.__pulumiType;
    }

    /**
     * Configure SNMP community
     */
    declare public readonly communities: pulumi.Output<outputs.CiscoSnmpFeatureTemplateCommunity[] | undefined>;
    /**
     * Set the contact for this managed node
     */
    declare public readonly contact: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly contactVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Configure an SNMP group
     */
    declare public readonly groups: pulumi.Output<outputs.CiscoSnmpFeatureTemplateGroup[] | undefined>;
    /**
     * Set the physical location of this managed node
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly locationVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Enable or disable SNMP
     *   - Default value: `true`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Configure SNMP server to receive SNMP traps
     */
    declare public readonly trapTargets: pulumi.Output<outputs.CiscoSnmpFeatureTemplateTrapTarget[] | undefined>;
    /**
     * Configure an SNMP user
     */
    declare public readonly users: pulumi.Output<outputs.CiscoSnmpFeatureTemplateUser[] | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * Configure a view record
     */
    declare public readonly views: pulumi.Output<outputs.CiscoSnmpFeatureTemplateView[] | undefined>;

    /**
     * Create a CiscoSnmpFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoSnmpFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoSnmpFeatureTemplateArgs | CiscoSnmpFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoSnmpFeatureTemplateState | undefined;
            resourceInputs["communities"] = state?.communities;
            resourceInputs["contact"] = state?.contact;
            resourceInputs["contactVariable"] = state?.contactVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["location"] = state?.location;
            resourceInputs["locationVariable"] = state?.locationVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["trapTargets"] = state?.trapTargets;
            resourceInputs["users"] = state?.users;
            resourceInputs["version"] = state?.version;
            resourceInputs["views"] = state?.views;
        } else {
            const args = argsOrState as CiscoSnmpFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["communities"] = args?.communities;
            resourceInputs["contact"] = args?.contact;
            resourceInputs["contactVariable"] = args?.contactVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["location"] = args?.location;
            resourceInputs["locationVariable"] = args?.locationVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["trapTargets"] = args?.trapTargets;
            resourceInputs["users"] = args?.users;
            resourceInputs["views"] = args?.views;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoSnmpFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoSnmpFeatureTemplate resources.
 */
export interface CiscoSnmpFeatureTemplateState {
    /**
     * Configure SNMP community
     */
    communities?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateCommunity>[]>;
    /**
     * Set the contact for this managed node
     */
    contact?: pulumi.Input<string>;
    /**
     * Variable name
     */
    contactVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure an SNMP group
     */
    groups?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateGroup>[]>;
    /**
     * Set the physical location of this managed node
     */
    location?: pulumi.Input<string>;
    /**
     * Variable name
     */
    locationVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable SNMP
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Configure SNMP server to receive SNMP traps
     */
    trapTargets?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateTrapTarget>[]>;
    /**
     * Configure an SNMP user
     */
    users?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateUser>[]>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
    /**
     * Configure a view record
     */
    views?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateView>[]>;
}

/**
 * The set of arguments for constructing a CiscoSnmpFeatureTemplate resource.
 */
export interface CiscoSnmpFeatureTemplateArgs {
    /**
     * Configure SNMP community
     */
    communities?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateCommunity>[]>;
    /**
     * Set the contact for this managed node
     */
    contact?: pulumi.Input<string>;
    /**
     * Variable name
     */
    contactVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure an SNMP group
     */
    groups?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateGroup>[]>;
    /**
     * Set the physical location of this managed node
     */
    location?: pulumi.Input<string>;
    /**
     * Variable name
     */
    locationVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable SNMP
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Configure SNMP server to receive SNMP traps
     */
    trapTargets?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateTrapTarget>[]>;
    /**
     * Configure an SNMP user
     */
    users?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateUser>[]>;
    /**
     * Configure a view record
     */
    views?: pulumi.Input<pulumi.Input<inputs.CiscoSnmpFeatureTemplateView>[]>;
}
