// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a VPN Interface Cellular feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/vpnInterfaceCellularFeatureTemplate:VpnInterfaceCellularFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class VpnInterfaceCellularFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing VpnInterfaceCellularFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpnInterfaceCellularFeatureTemplateState, opts?: pulumi.CustomResourceOptions): VpnInterfaceCellularFeatureTemplate {
        return new VpnInterfaceCellularFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/vpnInterfaceCellularFeatureTemplate:VpnInterfaceCellularFeatureTemplate';

    /**
     * Returns true if the given object is an instance of VpnInterfaceCellularFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpnInterfaceCellularFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnInterfaceCellularFeatureTemplate.__pulumiType;
    }

    /**
     * Link autonegotiation
     *   - Default value: `true`
     */
    declare public readonly autonegotiate: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly autonegotiateVariable: pulumi.Output<string | undefined>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Cellular Interface Name <0-1>
     */
    declare public readonly cellularInterfaceName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly cellularInterfaceNameVariable: pulumi.Output<string | undefined>;
    /**
     * Clear don't fragment bit
     *   - Default value: `false`
     */
    declare public readonly clearDontFragmentBit: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly clearDontFragmentBitVariable: pulumi.Output<string | undefined>;
    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     */
    declare public readonly coreRegion: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly coreRegionVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Enable core region
     *   - Default value: `false`
     */
    declare public readonly enableCoreRegion: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly enableCoreRegionVariable: pulumi.Output<string | undefined>;
    /**
     * Interface description
     */
    declare public readonly interfaceDescription: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceDescriptionVariable: pulumi.Output<string | undefined>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    declare public readonly ipDirectedBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipDirectedBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * Interface MTU <68...1500>, in bytes
     *   - Range: `68`-`1500`
     *   - Default value: `1428`
     */
    declare public readonly ipMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipMtuVariable: pulumi.Output<string | undefined>;
    /**
     * Apply ACL
     */
    declare public readonly ipv4AccessLists: pulumi.Output<outputs.VpnInterfaceCellularFeatureTemplateIpv4AccessList[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv4DhcpHelperVariable: pulumi.Output<string | undefined>;
    /**
     * List of DHCP server addresses
     */
    declare public readonly ipv4DhcpHelpers: pulumi.Output<string[] | undefined>;
    /**
     * Apply IPv6 access list
     */
    declare public readonly ipv6AccessLists: pulumi.Output<outputs.VpnInterfaceCellularFeatureTemplateIpv6AccessList[] | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    declare public readonly nat: pulumi.Output<boolean | undefined>;
    /**
     * Block inbound ICMP error messages
     *   - Default value: `true`
     */
    declare public readonly natBlockIcmpError: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly natBlockIcmpErrorVariable: pulumi.Output<string | undefined>;
    /**
     * Set port-forwarding rules for NAT on this interface
     */
    declare public readonly natPortForwards: pulumi.Output<outputs.VpnInterfaceCellularFeatureTemplateNatPortForward[] | undefined>;
    /**
     * Set NAT refresh mode
     *   - Choices: `outbound`, `bi-directional`
     *   - Default value: `outbound`
     */
    declare public readonly natRefreshMode: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly natRefreshModeVariable: pulumi.Output<string | undefined>;
    /**
     * Respond to ping requests to NAT interface ip address from the public side
     *   - Default value: `false`
     */
    declare public readonly natResponseToPing: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly natResponseToPingVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    declare public readonly natTcpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly natTcpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    declare public readonly natUdpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly natUdpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    declare public readonly perTunnelQos: pulumi.Output<boolean | undefined>;
    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     */
    declare public readonly perTunnelQosAggregator: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly perTunnelQosAggregatorVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly perTunnelQosVariable: pulumi.Output<string | undefined>;
    /**
     * Path MTU Discovery
     *   - Default value: `false`
     */
    declare public readonly pmtuDiscovery: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly pmtuDiscoveryVariable: pulumi.Output<string | undefined>;
    /**
     * Enable policer
     */
    declare public readonly policers: pulumi.Output<outputs.VpnInterfaceCellularFeatureTemplatePolicer[] | undefined>;
    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveBandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveBandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveBandwidthUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveBandwidthUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    declare public readonly qosAdaptivePeriod: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptivePeriodVariable: pulumi.Output<string | undefined>;
    /**
     * Name of QoS map
     */
    declare public readonly qosMap: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosMapVariable: pulumi.Output<string | undefined>;
    /**
     * Name of VPN QoS map
     */
    declare public readonly qosMapVpn: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosMapVpnVariable: pulumi.Output<string | undefined>;
    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     */
    declare public readonly secondaryRegion: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly secondaryRegionVariable: pulumi.Output<string | undefined>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    declare public readonly shapingRate: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly shapingRateVariable: pulumi.Output<string | undefined>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * Configure static ARP entries
     */
    declare public readonly staticArps: pulumi.Output<outputs.VpnInterfaceCellularFeatureTemplateStaticArp[] | undefined>;
    /**
     * Static ingress QoS for the port
     *   - Range: `0`-`7`
     */
    declare public readonly staticIngressQos: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly staticIngressQosVariable: pulumi.Output<string | undefined>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `552`-`1960`
     */
    declare public readonly tcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    declare public readonly tlocExtension: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tlocExtensionVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly trackerVariable: pulumi.Output<string | undefined>;
    /**
     * Enable tracker for this interface
     */
    declare public readonly trackers: pulumi.Output<string[] | undefined>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowAll: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowAllVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBgp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBgpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDhcp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDhcpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDns: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDnsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowHttps: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowHttpsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowIcmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowIcmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNetconf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNetconfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNtp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNtpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowOspf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowOspfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSnmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSnmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSsh: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSshVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowStun: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowStunVariable: pulumi.Output<string | undefined>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnel: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnelVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceBorder: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBorderVariable: pulumi.Output<string | undefined>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceCarrier: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceCarrierVariable: pulumi.Output<string | undefined>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceClearDontFragment: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceClearDontFragmentVariable: pulumi.Output<string | undefined>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceColor: pulumi.Output<string | undefined>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceColorRestrict: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorRestrictVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorVariable: pulumi.Output<string | undefined>;
    /**
     * Allow Control Connection
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceControlConnections: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Encapsulation for TLOC
     */
    declare public readonly tunnelInterfaceEncapsulations: pulumi.Output<outputs.VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupListVariable: pulumi.Output<string | undefined>;
    /**
     * Exclude the following controller groups defined in this list
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupLists: pulumi.Output<number[] | undefined>;
    /**
     * List of groups
     */
    declare public readonly tunnelInterfaceGroups: pulumi.Output<number[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceGroupsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    declare public readonly tunnelInterfaceHelloInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    declare public readonly tunnelInterfaceHelloTolerance: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloToleranceVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLastResortCircuit: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLastResortCircuitVariable: pulumi.Output<string | undefined>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLowBandwidthLink: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLowBandwidthLinkVariable: pulumi.Output<string | undefined>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`8`
     */
    declare public readonly tunnelInterfaceMaxControlConnections: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceMaxControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceNatRefreshInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNatRefreshIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceNetworkBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNetworkBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfacePortHop: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfacePortHopVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tunnelInterfaceTunnelTcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceTunnelTcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceVbondAsStunServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVbondAsStunServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreference: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreferenceVariable: pulumi.Output<string | undefined>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    declare public readonly tunnelQosMode: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelQosModeVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * Name of rewrite rule
     */
    declare public readonly writeRule: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly writeRuleVariable: pulumi.Output<string | undefined>;

    /**
     * Create a VpnInterfaceCellularFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpnInterfaceCellularFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpnInterfaceCellularFeatureTemplateArgs | VpnInterfaceCellularFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpnInterfaceCellularFeatureTemplateState | undefined;
            resourceInputs["autonegotiate"] = state?.autonegotiate;
            resourceInputs["autonegotiateVariable"] = state?.autonegotiateVariable;
            resourceInputs["bandwidthDownstream"] = state?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = state?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = state?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = state?.bandwidthUpstreamVariable;
            resourceInputs["cellularInterfaceName"] = state?.cellularInterfaceName;
            resourceInputs["cellularInterfaceNameVariable"] = state?.cellularInterfaceNameVariable;
            resourceInputs["clearDontFragmentBit"] = state?.clearDontFragmentBit;
            resourceInputs["clearDontFragmentBitVariable"] = state?.clearDontFragmentBitVariable;
            resourceInputs["coreRegion"] = state?.coreRegion;
            resourceInputs["coreRegionVariable"] = state?.coreRegionVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["enableCoreRegion"] = state?.enableCoreRegion;
            resourceInputs["enableCoreRegionVariable"] = state?.enableCoreRegionVariable;
            resourceInputs["interfaceDescription"] = state?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = state?.interfaceDescriptionVariable;
            resourceInputs["ipDirectedBroadcast"] = state?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = state?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = state?.ipMtu;
            resourceInputs["ipMtuVariable"] = state?.ipMtuVariable;
            resourceInputs["ipv4AccessLists"] = state?.ipv4AccessLists;
            resourceInputs["ipv4DhcpHelperVariable"] = state?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = state?.ipv4DhcpHelpers;
            resourceInputs["ipv6AccessLists"] = state?.ipv6AccessLists;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat"] = state?.nat;
            resourceInputs["natBlockIcmpError"] = state?.natBlockIcmpError;
            resourceInputs["natBlockIcmpErrorVariable"] = state?.natBlockIcmpErrorVariable;
            resourceInputs["natPortForwards"] = state?.natPortForwards;
            resourceInputs["natRefreshMode"] = state?.natRefreshMode;
            resourceInputs["natRefreshModeVariable"] = state?.natRefreshModeVariable;
            resourceInputs["natResponseToPing"] = state?.natResponseToPing;
            resourceInputs["natResponseToPingVariable"] = state?.natResponseToPingVariable;
            resourceInputs["natTcpTimeout"] = state?.natTcpTimeout;
            resourceInputs["natTcpTimeoutVariable"] = state?.natTcpTimeoutVariable;
            resourceInputs["natUdpTimeout"] = state?.natUdpTimeout;
            resourceInputs["natUdpTimeoutVariable"] = state?.natUdpTimeoutVariable;
            resourceInputs["perTunnelQos"] = state?.perTunnelQos;
            resourceInputs["perTunnelQosAggregator"] = state?.perTunnelQosAggregator;
            resourceInputs["perTunnelQosAggregatorVariable"] = state?.perTunnelQosAggregatorVariable;
            resourceInputs["perTunnelQosVariable"] = state?.perTunnelQosVariable;
            resourceInputs["pmtuDiscovery"] = state?.pmtuDiscovery;
            resourceInputs["pmtuDiscoveryVariable"] = state?.pmtuDiscoveryVariable;
            resourceInputs["policers"] = state?.policers;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = state?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthDownstreamVariable"] = state?.qosAdaptiveBandwidthDownstreamVariable;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = state?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveBandwidthUpstreamVariable"] = state?.qosAdaptiveBandwidthUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = state?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = state?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = state?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = state?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = state?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = state?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = state?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = state?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = state?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = state?.qosAdaptivePeriodVariable;
            resourceInputs["qosMap"] = state?.qosMap;
            resourceInputs["qosMapVariable"] = state?.qosMapVariable;
            resourceInputs["qosMapVpn"] = state?.qosMapVpn;
            resourceInputs["qosMapVpnVariable"] = state?.qosMapVpnVariable;
            resourceInputs["secondaryRegion"] = state?.secondaryRegion;
            resourceInputs["secondaryRegionVariable"] = state?.secondaryRegionVariable;
            resourceInputs["shapingRate"] = state?.shapingRate;
            resourceInputs["shapingRateVariable"] = state?.shapingRateVariable;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["staticArps"] = state?.staticArps;
            resourceInputs["staticIngressQos"] = state?.staticIngressQos;
            resourceInputs["staticIngressQosVariable"] = state?.staticIngressQosVariable;
            resourceInputs["tcpMss"] = state?.tcpMss;
            resourceInputs["tcpMssVariable"] = state?.tcpMssVariable;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["tlocExtension"] = state?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = state?.tlocExtensionVariable;
            resourceInputs["trackerVariable"] = state?.trackerVariable;
            resourceInputs["trackers"] = state?.trackers;
            resourceInputs["tunnelInterfaceAllowAll"] = state?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = state?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = state?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = state?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = state?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = state?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = state?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = state?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = state?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = state?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = state?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = state?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = state?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = state?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = state?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = state?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = state?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = state?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = state?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = state?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = state?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = state?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = state?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = state?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = state?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = state?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = state?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = state?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = state?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = state?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = state?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = state?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = state?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = state?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = state?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = state?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceControlConnections"] = state?.tunnelInterfaceControlConnections;
            resourceInputs["tunnelInterfaceControlConnectionsVariable"] = state?.tunnelInterfaceControlConnectionsVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = state?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = state?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = state?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGroups"] = state?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = state?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = state?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = state?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = state?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = state?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = state?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = state?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = state?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = state?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = state?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = state?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = state?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = state?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = state?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = state?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = state?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = state?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = state?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = state?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = state?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = state?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = state?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = state?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = state?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = state?.tunnelQosModeVariable;
            resourceInputs["version"] = state?.version;
            resourceInputs["writeRule"] = state?.writeRule;
            resourceInputs["writeRuleVariable"] = state?.writeRuleVariable;
        } else {
            const args = argsOrState as VpnInterfaceCellularFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["autonegotiate"] = args?.autonegotiate;
            resourceInputs["autonegotiateVariable"] = args?.autonegotiateVariable;
            resourceInputs["bandwidthDownstream"] = args?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = args?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = args?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = args?.bandwidthUpstreamVariable;
            resourceInputs["cellularInterfaceName"] = args?.cellularInterfaceName;
            resourceInputs["cellularInterfaceNameVariable"] = args?.cellularInterfaceNameVariable;
            resourceInputs["clearDontFragmentBit"] = args?.clearDontFragmentBit;
            resourceInputs["clearDontFragmentBitVariable"] = args?.clearDontFragmentBitVariable;
            resourceInputs["coreRegion"] = args?.coreRegion;
            resourceInputs["coreRegionVariable"] = args?.coreRegionVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["enableCoreRegion"] = args?.enableCoreRegion;
            resourceInputs["enableCoreRegionVariable"] = args?.enableCoreRegionVariable;
            resourceInputs["interfaceDescription"] = args?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = args?.interfaceDescriptionVariable;
            resourceInputs["ipDirectedBroadcast"] = args?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = args?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = args?.ipMtu;
            resourceInputs["ipMtuVariable"] = args?.ipMtuVariable;
            resourceInputs["ipv4AccessLists"] = args?.ipv4AccessLists;
            resourceInputs["ipv4DhcpHelperVariable"] = args?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = args?.ipv4DhcpHelpers;
            resourceInputs["ipv6AccessLists"] = args?.ipv6AccessLists;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat"] = args?.nat;
            resourceInputs["natBlockIcmpError"] = args?.natBlockIcmpError;
            resourceInputs["natBlockIcmpErrorVariable"] = args?.natBlockIcmpErrorVariable;
            resourceInputs["natPortForwards"] = args?.natPortForwards;
            resourceInputs["natRefreshMode"] = args?.natRefreshMode;
            resourceInputs["natRefreshModeVariable"] = args?.natRefreshModeVariable;
            resourceInputs["natResponseToPing"] = args?.natResponseToPing;
            resourceInputs["natResponseToPingVariable"] = args?.natResponseToPingVariable;
            resourceInputs["natTcpTimeout"] = args?.natTcpTimeout;
            resourceInputs["natTcpTimeoutVariable"] = args?.natTcpTimeoutVariable;
            resourceInputs["natUdpTimeout"] = args?.natUdpTimeout;
            resourceInputs["natUdpTimeoutVariable"] = args?.natUdpTimeoutVariable;
            resourceInputs["perTunnelQos"] = args?.perTunnelQos;
            resourceInputs["perTunnelQosAggregator"] = args?.perTunnelQosAggregator;
            resourceInputs["perTunnelQosAggregatorVariable"] = args?.perTunnelQosAggregatorVariable;
            resourceInputs["perTunnelQosVariable"] = args?.perTunnelQosVariable;
            resourceInputs["pmtuDiscovery"] = args?.pmtuDiscovery;
            resourceInputs["pmtuDiscoveryVariable"] = args?.pmtuDiscoveryVariable;
            resourceInputs["policers"] = args?.policers;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = args?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthDownstreamVariable"] = args?.qosAdaptiveBandwidthDownstreamVariable;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = args?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveBandwidthUpstreamVariable"] = args?.qosAdaptiveBandwidthUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = args?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = args?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = args?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = args?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = args?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = args?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = args?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = args?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = args?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = args?.qosAdaptivePeriodVariable;
            resourceInputs["qosMap"] = args?.qosMap;
            resourceInputs["qosMapVariable"] = args?.qosMapVariable;
            resourceInputs["qosMapVpn"] = args?.qosMapVpn;
            resourceInputs["qosMapVpnVariable"] = args?.qosMapVpnVariable;
            resourceInputs["secondaryRegion"] = args?.secondaryRegion;
            resourceInputs["secondaryRegionVariable"] = args?.secondaryRegionVariable;
            resourceInputs["shapingRate"] = args?.shapingRate;
            resourceInputs["shapingRateVariable"] = args?.shapingRateVariable;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["staticArps"] = args?.staticArps;
            resourceInputs["staticIngressQos"] = args?.staticIngressQos;
            resourceInputs["staticIngressQosVariable"] = args?.staticIngressQosVariable;
            resourceInputs["tcpMss"] = args?.tcpMss;
            resourceInputs["tcpMssVariable"] = args?.tcpMssVariable;
            resourceInputs["tlocExtension"] = args?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = args?.tlocExtensionVariable;
            resourceInputs["trackerVariable"] = args?.trackerVariable;
            resourceInputs["trackers"] = args?.trackers;
            resourceInputs["tunnelInterfaceAllowAll"] = args?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = args?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = args?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = args?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = args?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = args?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = args?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = args?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = args?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = args?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = args?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = args?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = args?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = args?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = args?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = args?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = args?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = args?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = args?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = args?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = args?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = args?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = args?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = args?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = args?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = args?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = args?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = args?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = args?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = args?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = args?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = args?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = args?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = args?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = args?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = args?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceControlConnections"] = args?.tunnelInterfaceControlConnections;
            resourceInputs["tunnelInterfaceControlConnectionsVariable"] = args?.tunnelInterfaceControlConnectionsVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = args?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = args?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = args?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGroups"] = args?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = args?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = args?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = args?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = args?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = args?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = args?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = args?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = args?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = args?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = args?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = args?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = args?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = args?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = args?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = args?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = args?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = args?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = args?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = args?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = args?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = args?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = args?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = args?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = args?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = args?.tunnelQosModeVariable;
            resourceInputs["writeRule"] = args?.writeRule;
            resourceInputs["writeRuleVariable"] = args?.writeRuleVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpnInterfaceCellularFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpnInterfaceCellularFeatureTemplate resources.
 */
export interface VpnInterfaceCellularFeatureTemplateState {
    /**
     * Link autonegotiation
     *   - Default value: `true`
     */
    autonegotiate?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autonegotiateVariable?: pulumi.Input<string>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Cellular Interface Name <0-1>
     */
    cellularInterfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    cellularInterfaceNameVariable?: pulumi.Input<string>;
    /**
     * Clear don't fragment bit
     *   - Default value: `false`
     */
    clearDontFragmentBit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    clearDontFragmentBitVariable?: pulumi.Input<string>;
    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     */
    coreRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    coreRegionVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable core region
     *   - Default value: `false`
     */
    enableCoreRegion?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    enableCoreRegionVariable?: pulumi.Input<string>;
    /**
     * Interface description
     */
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * Interface MTU <68...1500>, in bytes
     *   - Range: `68`-`1500`
     *   - Default value: `1428`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Apply ACL
     */
    ipv4AccessLists?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateIpv4AccessList>[]>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP server addresses
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply IPv6 access list
     */
    ipv6AccessLists?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateIpv6AccessList>[]>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    nat?: pulumi.Input<boolean>;
    /**
     * Block inbound ICMP error messages
     *   - Default value: `true`
     */
    natBlockIcmpError?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natBlockIcmpErrorVariable?: pulumi.Input<string>;
    /**
     * Set port-forwarding rules for NAT on this interface
     */
    natPortForwards?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateNatPortForward>[]>;
    /**
     * Set NAT refresh mode
     *   - Choices: `outbound`, `bi-directional`
     *   - Default value: `outbound`
     */
    natRefreshMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natRefreshModeVariable?: pulumi.Input<string>;
    /**
     * Respond to ping requests to NAT interface ip address from the public side
     *   - Default value: `false`
     */
    natResponseToPing?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natResponseToPingVariable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    natTcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natTcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    natUdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natUdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     */
    perTunnelQosAggregator?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosAggregatorVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * Path MTU Discovery
     *   - Default value: `false`
     */
    pmtuDiscovery?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    pmtuDiscoveryVariable?: pulumi.Input<string>;
    /**
     * Enable policer
     */
    policers?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplatePolicer>[]>;
    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Name of QoS map
     */
    qosMap?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVariable?: pulumi.Input<string>;
    /**
     * Name of VPN QoS map
     */
    qosMapVpn?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVpnVariable?: pulumi.Input<string>;
    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     */
    secondaryRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryRegionVariable?: pulumi.Input<string>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    shapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    shapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Configure static ARP entries
     */
    staticArps?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateStaticArp>[]>;
    /**
     * Static ingress QoS for the port
     *   - Range: `0`-`7`
     */
    staticIngressQos?: pulumi.Input<number>;
    /**
     * Variable name
     */
    staticIngressQosVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `552`-`1960`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    trackers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Allow Control Connection
     *   - Default value: `true`
     */
    tunnelInterfaceControlConnections?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups
     */
    tunnelInterfaceGroups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`8`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
    /**
     * Name of rewrite rule
     */
    writeRule?: pulumi.Input<string>;
    /**
     * Variable name
     */
    writeRuleVariable?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VpnInterfaceCellularFeatureTemplate resource.
 */
export interface VpnInterfaceCellularFeatureTemplateArgs {
    /**
     * Link autonegotiation
     *   - Default value: `true`
     */
    autonegotiate?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autonegotiateVariable?: pulumi.Input<string>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Cellular Interface Name <0-1>
     */
    cellularInterfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    cellularInterfaceNameVariable?: pulumi.Input<string>;
    /**
     * Clear don't fragment bit
     *   - Default value: `false`
     */
    clearDontFragmentBit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    clearDontFragmentBitVariable?: pulumi.Input<string>;
    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     */
    coreRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    coreRegionVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable core region
     *   - Default value: `false`
     */
    enableCoreRegion?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    enableCoreRegionVariable?: pulumi.Input<string>;
    /**
     * Interface description
     */
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * Interface MTU <68...1500>, in bytes
     *   - Range: `68`-`1500`
     *   - Default value: `1428`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Apply ACL
     */
    ipv4AccessLists?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateIpv4AccessList>[]>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP server addresses
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Apply IPv6 access list
     */
    ipv6AccessLists?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateIpv6AccessList>[]>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    nat?: pulumi.Input<boolean>;
    /**
     * Block inbound ICMP error messages
     *   - Default value: `true`
     */
    natBlockIcmpError?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natBlockIcmpErrorVariable?: pulumi.Input<string>;
    /**
     * Set port-forwarding rules for NAT on this interface
     */
    natPortForwards?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateNatPortForward>[]>;
    /**
     * Set NAT refresh mode
     *   - Choices: `outbound`, `bi-directional`
     *   - Default value: `outbound`
     */
    natRefreshMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natRefreshModeVariable?: pulumi.Input<string>;
    /**
     * Respond to ping requests to NAT interface ip address from the public side
     *   - Default value: `false`
     */
    natResponseToPing?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natResponseToPingVariable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    natTcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natTcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    natUdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natUdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     */
    perTunnelQosAggregator?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosAggregatorVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * Path MTU Discovery
     *   - Default value: `false`
     */
    pmtuDiscovery?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    pmtuDiscoveryVariable?: pulumi.Input<string>;
    /**
     * Enable policer
     */
    policers?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplatePolicer>[]>;
    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Name of QoS map
     */
    qosMap?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVariable?: pulumi.Input<string>;
    /**
     * Name of VPN QoS map
     */
    qosMapVpn?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVpnVariable?: pulumi.Input<string>;
    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     */
    secondaryRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryRegionVariable?: pulumi.Input<string>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    shapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    shapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Configure static ARP entries
     */
    staticArps?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateStaticArp>[]>;
    /**
     * Static ingress QoS for the port
     *   - Range: `0`-`7`
     */
    staticIngressQos?: pulumi.Input<number>;
    /**
     * Variable name
     */
    staticIngressQosVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `552`-`1960`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    trackers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Allow Control Connection
     *   - Default value: `true`
     */
    tunnelInterfaceControlConnections?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups
     */
    tunnelInterfaceGroups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`8`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * Name of rewrite rule
     */
    writeRule?: pulumi.Input<string>;
    /**
     * Variable name
     */
    writeRuleVariable?: pulumi.Input<string>;
}
