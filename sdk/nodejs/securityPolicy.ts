// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Security Policy .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.SecurityPolicy("example", {
 *     name: "Example",
 *     description: "Example",
 *     mode: "security",
 *     useCase: "custom",
 *     definitions: [{
 *         id: "7d299c34-981c-4fb3-9167-6be44ab1691f",
 *         type: "urlFiltering",
 *     }],
 *     failureMode: "close",
 *     loggings: [{
 *         external_syslog_server_ip: "10.0.0.1",
 *         external_syslog_server_vpn: "123",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/securityPolicy:SecurityPolicy example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class SecurityPolicy extends pulumi.CustomResource {
    /**
     * Get an existing SecurityPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityPolicyState, opts?: pulumi.CustomResourceOptions): SecurityPolicy {
        return new SecurityPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/securityPolicy:SecurityPolicy';

    /**
     * Returns true if the given object is an instance of SecurityPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityPolicy.__pulumiType;
    }

    /**
     * Audit trail
     *   - Choices: `on`, `off`
     */
    declare public readonly auditTrail: pulumi.Output<string | undefined>;
    /**
     * List of policy definitions
     */
    declare public readonly definitions: pulumi.Output<outputs.SecurityPolicyDefinition[]>;
    /**
     * The description of the security policy
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Bypass firewall policy and allow all Internet traffic to/from VPN 0
     *   - Choices: `allow`, `deny`
     */
    declare public readonly directInternetApplications: pulumi.Output<string | undefined>;
    /**
     * Failure mode
     *   - Choices: `open`, `close`
     */
    declare public readonly failureMode: pulumi.Output<string | undefined>;
    /**
     * High Speed Logging Server IP
     */
    declare public readonly highSpeedLoggingServerIp: pulumi.Output<string | undefined>;
    /**
     * High Speed Logging Port
     */
    declare public readonly highSpeedLoggingServerPort: pulumi.Output<string | undefined>;
    /**
     * High Speed Logging Source Interface
     */
    declare public readonly highSpeedLoggingServerSourceInterface: pulumi.Output<string | undefined>;
    /**
     * High Speed Logging VPN
     */
    declare public readonly highSpeedLoggingVpn: pulumi.Output<string | undefined>;
    /**
     * ICMP Unreachable Allow
     */
    declare public readonly imcpUnreachableAllow: pulumi.Output<boolean | undefined>;
    declare public readonly loggings: pulumi.Output<outputs.SecurityPolicyLogging[] | undefined>;
    /**
     * Match Statistics per-filter
     *   - Choices: `on`, `off`
     */
    declare public readonly matchStatisticsPerFilter: pulumi.Output<string | undefined>;
    /**
     * Max Incomplete ICMP Limit
     */
    declare public readonly maxIncompleteIcmpLimit: pulumi.Output<number | undefined>;
    /**
     * Max Incomplete TCP Limit
     */
    declare public readonly maxIncompleteTcpLimit: pulumi.Output<number | undefined>;
    /**
     * Max Incomplete UDP Limit
     */
    declare public readonly maxIncompleteUdpLimit: pulumi.Output<number | undefined>;
    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     *   - Default value: `security`
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * The name of the security policy
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Session Reclassify Allow
     */
    declare public readonly sessionReclassifyAllow: pulumi.Output<boolean | undefined>;
    /**
     * TCP SYN Flood Limit, value from 1 to 4294967295
     */
    declare public readonly tcpSynFloodLimit: pulumi.Output<string | undefined>;
    /**
     * Unified Logging
     */
    declare public readonly unifiedLogging: pulumi.Output<boolean | undefined>;
    /**
     * The use case of the security policy
     *   - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`, `directInternetAccess`, `directCloudAccess`
     *   - Default value: `custom`
     */
    declare public readonly useCase: pulumi.Output<string>;
    /**
     * The version of the object
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a SecurityPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityPolicyArgs | SecurityPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityPolicyState | undefined;
            resourceInputs["auditTrail"] = state?.auditTrail;
            resourceInputs["definitions"] = state?.definitions;
            resourceInputs["description"] = state?.description;
            resourceInputs["directInternetApplications"] = state?.directInternetApplications;
            resourceInputs["failureMode"] = state?.failureMode;
            resourceInputs["highSpeedLoggingServerIp"] = state?.highSpeedLoggingServerIp;
            resourceInputs["highSpeedLoggingServerPort"] = state?.highSpeedLoggingServerPort;
            resourceInputs["highSpeedLoggingServerSourceInterface"] = state?.highSpeedLoggingServerSourceInterface;
            resourceInputs["highSpeedLoggingVpn"] = state?.highSpeedLoggingVpn;
            resourceInputs["imcpUnreachableAllow"] = state?.imcpUnreachableAllow;
            resourceInputs["loggings"] = state?.loggings;
            resourceInputs["matchStatisticsPerFilter"] = state?.matchStatisticsPerFilter;
            resourceInputs["maxIncompleteIcmpLimit"] = state?.maxIncompleteIcmpLimit;
            resourceInputs["maxIncompleteTcpLimit"] = state?.maxIncompleteTcpLimit;
            resourceInputs["maxIncompleteUdpLimit"] = state?.maxIncompleteUdpLimit;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["sessionReclassifyAllow"] = state?.sessionReclassifyAllow;
            resourceInputs["tcpSynFloodLimit"] = state?.tcpSynFloodLimit;
            resourceInputs["unifiedLogging"] = state?.unifiedLogging;
            resourceInputs["useCase"] = state?.useCase;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as SecurityPolicyArgs | undefined;
            if (args?.definitions === undefined && !opts.urn) {
                throw new Error("Missing required property 'definitions'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["auditTrail"] = args?.auditTrail;
            resourceInputs["definitions"] = args?.definitions;
            resourceInputs["description"] = args?.description;
            resourceInputs["directInternetApplications"] = args?.directInternetApplications;
            resourceInputs["failureMode"] = args?.failureMode;
            resourceInputs["highSpeedLoggingServerIp"] = args?.highSpeedLoggingServerIp;
            resourceInputs["highSpeedLoggingServerPort"] = args?.highSpeedLoggingServerPort;
            resourceInputs["highSpeedLoggingServerSourceInterface"] = args?.highSpeedLoggingServerSourceInterface;
            resourceInputs["highSpeedLoggingVpn"] = args?.highSpeedLoggingVpn;
            resourceInputs["imcpUnreachableAllow"] = args?.imcpUnreachableAllow;
            resourceInputs["loggings"] = args?.loggings;
            resourceInputs["matchStatisticsPerFilter"] = args?.matchStatisticsPerFilter;
            resourceInputs["maxIncompleteIcmpLimit"] = args?.maxIncompleteIcmpLimit;
            resourceInputs["maxIncompleteTcpLimit"] = args?.maxIncompleteTcpLimit;
            resourceInputs["maxIncompleteUdpLimit"] = args?.maxIncompleteUdpLimit;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["sessionReclassifyAllow"] = args?.sessionReclassifyAllow;
            resourceInputs["tcpSynFloodLimit"] = args?.tcpSynFloodLimit;
            resourceInputs["unifiedLogging"] = args?.unifiedLogging;
            resourceInputs["useCase"] = args?.useCase;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SecurityPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SecurityPolicy resources.
 */
export interface SecurityPolicyState {
    /**
     * Audit trail
     *   - Choices: `on`, `off`
     */
    auditTrail?: pulumi.Input<string>;
    /**
     * List of policy definitions
     */
    definitions?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyDefinition>[]>;
    /**
     * The description of the security policy
     */
    description?: pulumi.Input<string>;
    /**
     * Bypass firewall policy and allow all Internet traffic to/from VPN 0
     *   - Choices: `allow`, `deny`
     */
    directInternetApplications?: pulumi.Input<string>;
    /**
     * Failure mode
     *   - Choices: `open`, `close`
     */
    failureMode?: pulumi.Input<string>;
    /**
     * High Speed Logging Server IP
     */
    highSpeedLoggingServerIp?: pulumi.Input<string>;
    /**
     * High Speed Logging Port
     */
    highSpeedLoggingServerPort?: pulumi.Input<string>;
    /**
     * High Speed Logging Source Interface
     */
    highSpeedLoggingServerSourceInterface?: pulumi.Input<string>;
    /**
     * High Speed Logging VPN
     */
    highSpeedLoggingVpn?: pulumi.Input<string>;
    /**
     * ICMP Unreachable Allow
     */
    imcpUnreachableAllow?: pulumi.Input<boolean>;
    loggings?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyLogging>[]>;
    /**
     * Match Statistics per-filter
     *   - Choices: `on`, `off`
     */
    matchStatisticsPerFilter?: pulumi.Input<string>;
    /**
     * Max Incomplete ICMP Limit
     */
    maxIncompleteIcmpLimit?: pulumi.Input<number>;
    /**
     * Max Incomplete TCP Limit
     */
    maxIncompleteTcpLimit?: pulumi.Input<number>;
    /**
     * Max Incomplete UDP Limit
     */
    maxIncompleteUdpLimit?: pulumi.Input<number>;
    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     *   - Default value: `security`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the security policy
     */
    name?: pulumi.Input<string>;
    /**
     * Session Reclassify Allow
     */
    sessionReclassifyAllow?: pulumi.Input<boolean>;
    /**
     * TCP SYN Flood Limit, value from 1 to 4294967295
     */
    tcpSynFloodLimit?: pulumi.Input<string>;
    /**
     * Unified Logging
     */
    unifiedLogging?: pulumi.Input<boolean>;
    /**
     * The use case of the security policy
     *   - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`, `directInternetAccess`, `directCloudAccess`
     *   - Default value: `custom`
     */
    useCase?: pulumi.Input<string>;
    /**
     * The version of the object
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SecurityPolicy resource.
 */
export interface SecurityPolicyArgs {
    /**
     * Audit trail
     *   - Choices: `on`, `off`
     */
    auditTrail?: pulumi.Input<string>;
    /**
     * List of policy definitions
     */
    definitions: pulumi.Input<pulumi.Input<inputs.SecurityPolicyDefinition>[]>;
    /**
     * The description of the security policy
     */
    description: pulumi.Input<string>;
    /**
     * Bypass firewall policy and allow all Internet traffic to/from VPN 0
     *   - Choices: `allow`, `deny`
     */
    directInternetApplications?: pulumi.Input<string>;
    /**
     * Failure mode
     *   - Choices: `open`, `close`
     */
    failureMode?: pulumi.Input<string>;
    /**
     * High Speed Logging Server IP
     */
    highSpeedLoggingServerIp?: pulumi.Input<string>;
    /**
     * High Speed Logging Port
     */
    highSpeedLoggingServerPort?: pulumi.Input<string>;
    /**
     * High Speed Logging Source Interface
     */
    highSpeedLoggingServerSourceInterface?: pulumi.Input<string>;
    /**
     * High Speed Logging VPN
     */
    highSpeedLoggingVpn?: pulumi.Input<string>;
    /**
     * ICMP Unreachable Allow
     */
    imcpUnreachableAllow?: pulumi.Input<boolean>;
    loggings?: pulumi.Input<pulumi.Input<inputs.SecurityPolicyLogging>[]>;
    /**
     * Match Statistics per-filter
     *   - Choices: `on`, `off`
     */
    matchStatisticsPerFilter?: pulumi.Input<string>;
    /**
     * Max Incomplete ICMP Limit
     */
    maxIncompleteIcmpLimit?: pulumi.Input<number>;
    /**
     * Max Incomplete TCP Limit
     */
    maxIncompleteTcpLimit?: pulumi.Input<number>;
    /**
     * Max Incomplete UDP Limit
     */
    maxIncompleteUdpLimit?: pulumi.Input<number>;
    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     *   - Default value: `security`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the security policy
     */
    name?: pulumi.Input<string>;
    /**
     * Session Reclassify Allow
     */
    sessionReclassifyAllow?: pulumi.Input<boolean>;
    /**
     * TCP SYN Flood Limit, value from 1 to 4294967295
     */
    tcpSynFloodLimit?: pulumi.Input<string>;
    /**
     * Unified Logging
     */
    unifiedLogging?: pulumi.Input<boolean>;
    /**
     * The use case of the security policy
     *   - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`, `directInternetAccess`, `directCloudAccess`
     *   - Default value: `custom`
     */
    useCase?: pulumi.Input<string>;
}
