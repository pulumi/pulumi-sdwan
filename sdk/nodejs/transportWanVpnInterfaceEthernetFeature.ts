// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport WAN VPN Interface Ethernet Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.TransportWanVpnInterfaceEthernetFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 *     shutdown: true,
 *     interfaceName: "GigabitEthernet1",
 *     interfaceDescription: "WAN",
 *     ipv4ConfigurationType: "static",
 *     ipv4Address: "1.2.3.4",
 *     ipv4SubnetMask: "0.0.0.0",
 *     ipv4SecondaryAddresses: [{
 *         address: "1.2.3.4",
 *         subnet_mask: "0.0.0.0",
 *     }],
 *     ipv4DhcpHelpers: ["1.2.3.4"],
 *     ipv6ConfigurationType: "static",
 *     iperfServer: "example",
 *     blockNonSourceIp: false,
 *     serviceProvider: "example",
 *     bandwidthUpstream: 21474836,
 *     bandwidthDownstream: 21474836,
 *     autoDetectBandwidth: false,
 *     tunnelInterface: true,
 *     perTunnelQos: true,
 *     tunnelQosMode: "hub",
 *     tunnelBandwidthPercent: 82,
 *     tunnelInterfaceBindLoopbackTunnel: "example",
 *     tunnelInterfaceCarrier: "default",
 *     tunnelInterfaceColor: "default",
 *     tunnelInterfaceHelloInterval: 1000,
 *     tunnelInterfaceHelloTolerance: 12,
 *     tunnelInterfaceLastResortCircuit: false,
 *     tunnelInterfaceGreTunnelDestinationIp: "1.2.3.4",
 *     tunnelInterfaceColorRestrict: true,
 *     tunnelInterfaceGroups: 42949672,
 *     tunnelInterfaceBorder: false,
 *     tunnelInterfaceMaxControlConnections: 62,
 *     tunnelInterfaceNatRefreshInterval: 5,
 *     tunnelInterfaceVbondAsStunServer: false,
 *     tunnelInterfaceExcludeControllerGroupLists: [2],
 *     tunnelInterfaceVmanageConnectionPreference: 8,
 *     tunnelInterfacePortHop: true,
 *     tunnelInterfaceLowBandwidthLink: false,
 *     tunnelInterfaceTunnelTcpMss: 1460,
 *     tunnelInterfaceClearDontFragment: false,
 *     tunnelInterfaceCtsSgtPropagation: false,
 *     tunnelInterfaceNetworkBroadcast: false,
 *     tunnelInterfaceAllowAll: false,
 *     tunnelInterfaceAllowBgp: false,
 *     tunnelInterfaceAllowDhcp: true,
 *     tunnelInterfaceAllowNtp: false,
 *     tunnelInterfaceAllowSsh: false,
 *     tunnelInterfaceAllowDns: true,
 *     tunnelInterfaceAllowIcmp: true,
 *     tunnelInterfaceAllowHttps: true,
 *     tunnelInterfaceAllowOspf: false,
 *     tunnelInterfaceAllowStun: false,
 *     tunnelInterfaceAllowSnmp: false,
 *     tunnelInterfaceAllowNetconf: false,
 *     tunnelInterfaceAllowBfd: false,
 *     tunnelInterfaceEncapsulations: [{
 *         encapsulation: "gre",
 *         preference: 4294967,
 *         weight: 250,
 *     }],
 *     natIpv4: true,
 *     natType: "interface",
 *     natUdpTimeout: 1,
 *     natTcpTimeout: 60,
 *     newStaticNats: [{
 *         source_ip: "1.2.3.4",
 *         translated_ip: "2.3.4.5",
 *         direction: "inside",
 *         source_vpn: 3,
 *     }],
 *     natIpv6: true,
 *     nat64: false,
 *     nat66: true,
 *     staticNat66s: [{
 *         source_prefix: "2001:0db8:85a3::/48",
 *         translated_source_prefix: "abcd:1234:5678::/48",
 *         source_vpn_id: 4,
 *     }],
 *     qosAdaptive: false,
 *     qosShapingRate: 16,
 *     aclIpv4EgressFeatureId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     aclIpv6IngressFeatureId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     arps: [{
 *         ip_address: "1.2.3.4",
 *         mac_address: "00-B0-D0-63-C2-26",
 *     }],
 *     icmpRedirectDisable: true,
 *     duplex: "full",
 *     macAddress: "00-B0-D0-63-C2-26",
 *     ipMtu: 1500,
 *     interfaceMtu: 1500,
 *     tcpMss: 505,
 *     speed: "2500",
 *     arpTimeout: 1200,
 *     autonegotiate: false,
 *     mediaType: "rj45",
 *     tlocExtension: "tloc",
 *     greTunnelSourceIp: "1.2.3.4",
 *     xconnect: "example",
 *     loadInterval: 30,
 *     tracker: "example",
 *     ipDirectedBroadcast: false,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "transport_wan_vpn_interface_ethernet_feature_id,feature_profile_id,transport_wan_vpn_feature_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
 * ```
 */
export class TransportWanVpnInterfaceEthernetFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportWanVpnInterfaceEthernetFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportWanVpnInterfaceEthernetFeatureState, opts?: pulumi.CustomResourceOptions): TransportWanVpnInterfaceEthernetFeature {
        return new TransportWanVpnInterfaceEthernetFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature';

    /**
     * Returns true if the given object is an instance of TransportWanVpnInterfaceEthernetFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportWanVpnInterfaceEthernetFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportWanVpnInterfaceEthernetFeature.__pulumiType;
    }

    declare public readonly aclIpv4EgressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv4IngressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv6EgressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv6IngressFeatureId: pulumi.Output<string | undefined>;
    /**
     * Timeout value for dynamically learned ARP entries, <0..2678400> seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     */
    declare public readonly arpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly arpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Configure ARP entries
     */
    declare public readonly arps: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureArp[] | undefined>;
    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     */
    declare public readonly autoDetectBandwidth: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly autoDetectBandwidthVariable: pulumi.Output<string | undefined>;
    /**
     * Link autonegotiation
     */
    declare public readonly autonegotiate: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly autonegotiateVariable: pulumi.Output<string | undefined>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     */
    declare public readonly blockNonSourceIp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly blockNonSourceIpVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     */
    declare public readonly duplex: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly duplexVariable: pulumi.Output<string | undefined>;
    /**
     * Enable DHCPv6, Attribute conditional on `ipv6ConfigurationType` being equal to `dynamic`
     */
    declare public readonly enableDhcpv6: pulumi.Output<boolean | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    /**
     * GRE tunnel source IP
     */
    declare public readonly greTunnelSourceIp: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly greTunnelSourceIpVariable: pulumi.Output<string | undefined>;
    /**
     * ICMP/ICMPv6 Redirect Disable
     *   - Default value: `true`
     */
    declare public readonly icmpRedirectDisable: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly icmpRedirectDisableVariable: pulumi.Output<string | undefined>;
    declare public readonly interfaceDescription: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceDescriptionVariable: pulumi.Output<string | undefined>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly interfaceMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceMtuVariable: pulumi.Output<string | undefined>;
    declare public readonly interfaceName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceNameVariable: pulumi.Output<string | undefined>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    declare public readonly ipDirectedBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipDirectedBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly ipMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipMtuVariable: pulumi.Output<string | undefined>;
    /**
     * Iperf server for auto bandwidth detect
     */
    declare public readonly iperfServer: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly iperfServerVariable: pulumi.Output<string | undefined>;
    /**
     * IP Address, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    declare public readonly ipv4Address: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    declare public readonly ipv4AddressVariable: pulumi.Output<string | undefined>;
    /**
     * IPv4 Configuration Type
     *   - Choices: `dynamic`, `static`
     *   - Default value: `dynamic`
     */
    declare public readonly ipv4ConfigurationType: pulumi.Output<string | undefined>;
    /**
     * DHCP Distance, Attribute conditional on `ipv4ConfigurationType` being equal to `dynamic`
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     */
    declare public readonly ipv4DhcpDistance: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `dynamic`
     */
    declare public readonly ipv4DhcpDistanceVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv4DhcpHelperVariable: pulumi.Output<string | undefined>;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    declare public readonly ipv4DhcpHelpers: pulumi.Output<string[] | undefined>;
    /**
     * Secondary IpV4 Addresses, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    declare public readonly ipv4SecondaryAddresses: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress[] | undefined>;
    /**
     * Subnet Mask, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    declare public readonly ipv4SubnetMask: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    declare public readonly ipv4SubnetMaskVariable: pulumi.Output<string | undefined>;
    /**
     * IPv6 Address Secondary, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    declare public readonly ipv6Address: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    declare public readonly ipv6AddressVariable: pulumi.Output<string | undefined>;
    /**
     * IPv6 Configuration Type
     *   - Choices: `dynamic`, `static`, `none`
     *   - Default value: `none`
     */
    declare public readonly ipv6ConfigurationType: pulumi.Output<string | undefined>;
    /**
     * secondary IPv6 addresses, Attribute conditional on `ipv6ConfigurationType` being equal to `dynamic`
     */
    declare public readonly ipv6DhcpSecondaryAddresses: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress[] | undefined>;
    /**
     * Static secondary IPv6 addresses, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    declare public readonly ipv6SecondaryAddresses: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress[] | undefined>;
    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     */
    declare public readonly loadInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly loadIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * MAC Address
     */
    declare public readonly macAddress: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly macAddressVariable: pulumi.Output<string | undefined>;
    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     */
    declare public readonly mediaType: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly mediaTypeVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * NAT64 on this interface, Attribute conditional on `natIpv6` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly nat64: pulumi.Output<boolean | undefined>;
    /**
     * NAT66 on this interface, Attribute conditional on `natIpv6` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly nat66: pulumi.Output<boolean | undefined>;
    /**
     * enable Network Address Translation on this interface
     *   - Default value: `false`
     */
    declare public readonly natIpv4: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly natIpv4Variable: pulumi.Output<string | undefined>;
    /**
     * enable Network Address Translation ipv6 on this interface
     *   - Default value: `false`
     */
    declare public readonly natIpv6: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly natIpv6Variable: pulumi.Output<string | undefined>;
    /**
     * NAT Inside Source Loopback Interface, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natLoopback: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natLoopbackVariable: pulumi.Output<string | undefined>;
    /**
     * NAT Overload, Attribute conditional on `natIpv4` being equal to `true`
     *   - Default value: `true`
     */
    declare public readonly natOverload: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natOverloadVariable: pulumi.Output<string | undefined>;
    /**
     * NAT Pool Prefix Length, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`32`
     */
    declare public readonly natPrefixLength: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natPrefixLengthVariable: pulumi.Output<string | undefined>;
    /**
     * NAT Pool Range End, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natRangeEnd: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natRangeEndVariable: pulumi.Output<string | undefined>;
    /**
     * NAT Pool Range Start, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natRangeStart: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natRangeStartVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT TCP session timeout, in minutes, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    declare public readonly natTcpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natTcpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * NAT Type, Attribute conditional on `natIpv4` being equal to `true`
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     */
    declare public readonly natType: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natTypeVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT UDP session timeout, in minutes, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    declare public readonly natUdpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly natUdpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * static NAT, Attribute conditional on `natIpv4` being equal to `true`
     */
    declare public readonly newStaticNats: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNat[] | undefined>;
    /**
     * Per-tunnel Qos, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly perTunnelQos: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly perTunnelQosVariable: pulumi.Output<string | undefined>;
    /**
     * Adaptive QoS
     *   - Default value: `false`
     */
    declare public readonly qosAdaptive: pulumi.Output<boolean | undefined>;
    /**
     * Shaping Rate Downstream
     *   - Default value: `false`
     */
    declare public readonly qosAdaptiveBandwidthDownstream: pulumi.Output<boolean | undefined>;
    /**
     * Shaping Rate Upstream
     *   - Default value: `false`
     */
    declare public readonly qosAdaptiveBandwidthUpstream: pulumi.Output<boolean | undefined>;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveDefaultDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveDefaultDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveDefaultUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveDefaultUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Adapt Period(Minutes)
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    declare public readonly qosAdaptivePeriod: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptivePeriodVariable: pulumi.Output<string | undefined>;
    /**
     * Shaping Rate (Kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosShapingRate: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosShapingRateVariable: pulumi.Output<string | undefined>;
    /**
     * Service Provider Name
     */
    declare public readonly serviceProvider: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly serviceProviderVariable: pulumi.Output<string | undefined>;
    /**
     * - Default value: `true`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    declare public readonly speed: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly speedVariable: pulumi.Output<string | undefined>;
    /**
     * static NAT66, Attribute conditional on `natIpv6` being equal to `true`
     */
    declare public readonly staticNat66s: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66[] | undefined>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    declare public readonly tlocExtension: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tlocExtensionVariable: pulumi.Output<string | undefined>;
    /**
     * Enable tracker for this interface
     */
    declare public readonly tracker: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly trackerVariable: pulumi.Output<string | undefined>;
    /**
     * Transport WAN VPN Feature ID
     */
    declare public readonly transportWanVpnFeatureId: pulumi.Output<string>;
    /**
     * Tunnels Bandwidth Percent, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`100`
     *   - Default value: `50`
     */
    declare public readonly tunnelBandwidthPercent: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelBandwidthPercentVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel Interface on/off
     *   - Default value: `false`
     */
    declare public readonly tunnelInterface: pulumi.Output<boolean | undefined>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowAll: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowAllVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBfd: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBfdVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBgp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBgpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDhcp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDhcpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDns: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDnsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny HTTPS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowHttps: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowHttpsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowIcmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowIcmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNetconf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNetconfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NTP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowNtp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNtpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowOspf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowOspfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSnmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSnmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SSH
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowSsh: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSshVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowStun: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowStunVariable: pulumi.Output<string | undefined>;
    /**
     * Bind loopback tunnel interface to a physical interface, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnel: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnelVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as border TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceBorder: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceBorderVariable: pulumi.Output<string | undefined>;
    /**
     * Set carrier for TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceCarrier: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceCarrierVariable: pulumi.Output<string | undefined>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface), Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceClearDontFragment: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceClearDontFragmentVariable: pulumi.Output<string | undefined>;
    /**
     * Set color for TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `mpls`
     */
    declare public readonly tunnelInterfaceColor: pulumi.Output<string | undefined>;
    /**
     * Restrict this TLOC behavior, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceColorRestrict: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceColorRestrictVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceColorVariable: pulumi.Output<string | undefined>;
    /**
     * CTS SGT Propagation configuration, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceCtsSgtPropagation: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceCtsSgtPropagationVariable: pulumi.Output<string | undefined>;
    /**
     * Encapsulation for TLOC
     */
    declare public readonly tunnelInterfaceEncapsulations: pulumi.Output<outputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation[] | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupListVariable: pulumi.Output<string | undefined>;
    /**
     * Exclude the following controller groups defined in this list., Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupLists: pulumi.Output<number[] | undefined>;
    /**
     * GRE tunnel destination IP, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceGreTunnelDestinationIp: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceGreTunnelDestinationIpVariable: pulumi.Output<string | undefined>;
    /**
     * List of groups, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`4294967295`
     */
    declare public readonly tunnelInterfaceGroups: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceGroupsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    declare public readonly tunnelInterfaceHelloInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceHelloIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    declare public readonly tunnelInterfaceHelloTolerance: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceHelloToleranceVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as last resort, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLastResortCircuit: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceLastResortCircuitVariable: pulumi.Output<string | undefined>;
    /**
     * Set the interface as a low-bandwidth circuit, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLowBandwidthLink: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceLowBandwidthLinkVariable: pulumi.Output<string | undefined>;
    /**
     * Maximum Control Connections, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `0`-`100`
     */
    declare public readonly tunnelInterfaceMaxControlConnections: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceMaxControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of nat refresh packets <1...60> seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceNatRefreshInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceNatRefreshIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Accept and respond to network-prefix-directed broadcasts, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceNetworkBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceNetworkBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * Disallow port hopping on the tunnel interface, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfacePortHop: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfacePortHopVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `500`-`1460`
     */
    declare public readonly tunnelInterfaceTunnelTcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceTunnelTcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Put this wan interface in STUN mode only, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceVbondAsStunServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceVbondAsStunServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface preference for control connection to vManage <0..8>, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreference: pulumi.Output<number | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreferenceVariable: pulumi.Output<string | undefined>;
    /**
     * Set tunnel QoS mode, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `hub`, `spoke`
     */
    declare public readonly tunnelQosMode: pulumi.Output<string | undefined>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    declare public readonly tunnelQosModeVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    declare public readonly xconnect: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly xconnectVariable: pulumi.Output<string | undefined>;

    /**
     * Create a TransportWanVpnInterfaceEthernetFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportWanVpnInterfaceEthernetFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportWanVpnInterfaceEthernetFeatureArgs | TransportWanVpnInterfaceEthernetFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportWanVpnInterfaceEthernetFeatureState | undefined;
            resourceInputs["aclIpv4EgressFeatureId"] = state?.aclIpv4EgressFeatureId;
            resourceInputs["aclIpv4IngressFeatureId"] = state?.aclIpv4IngressFeatureId;
            resourceInputs["aclIpv6EgressFeatureId"] = state?.aclIpv6EgressFeatureId;
            resourceInputs["aclIpv6IngressFeatureId"] = state?.aclIpv6IngressFeatureId;
            resourceInputs["arpTimeout"] = state?.arpTimeout;
            resourceInputs["arpTimeoutVariable"] = state?.arpTimeoutVariable;
            resourceInputs["arps"] = state?.arps;
            resourceInputs["autoDetectBandwidth"] = state?.autoDetectBandwidth;
            resourceInputs["autoDetectBandwidthVariable"] = state?.autoDetectBandwidthVariable;
            resourceInputs["autonegotiate"] = state?.autonegotiate;
            resourceInputs["autonegotiateVariable"] = state?.autonegotiateVariable;
            resourceInputs["bandwidthDownstream"] = state?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = state?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = state?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = state?.bandwidthUpstreamVariable;
            resourceInputs["blockNonSourceIp"] = state?.blockNonSourceIp;
            resourceInputs["blockNonSourceIpVariable"] = state?.blockNonSourceIpVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["duplex"] = state?.duplex;
            resourceInputs["duplexVariable"] = state?.duplexVariable;
            resourceInputs["enableDhcpv6"] = state?.enableDhcpv6;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["greTunnelSourceIp"] = state?.greTunnelSourceIp;
            resourceInputs["greTunnelSourceIpVariable"] = state?.greTunnelSourceIpVariable;
            resourceInputs["icmpRedirectDisable"] = state?.icmpRedirectDisable;
            resourceInputs["icmpRedirectDisableVariable"] = state?.icmpRedirectDisableVariable;
            resourceInputs["interfaceDescription"] = state?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = state?.interfaceDescriptionVariable;
            resourceInputs["interfaceMtu"] = state?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = state?.interfaceMtuVariable;
            resourceInputs["interfaceName"] = state?.interfaceName;
            resourceInputs["interfaceNameVariable"] = state?.interfaceNameVariable;
            resourceInputs["ipDirectedBroadcast"] = state?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = state?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = state?.ipMtu;
            resourceInputs["ipMtuVariable"] = state?.ipMtuVariable;
            resourceInputs["iperfServer"] = state?.iperfServer;
            resourceInputs["iperfServerVariable"] = state?.iperfServerVariable;
            resourceInputs["ipv4Address"] = state?.ipv4Address;
            resourceInputs["ipv4AddressVariable"] = state?.ipv4AddressVariable;
            resourceInputs["ipv4ConfigurationType"] = state?.ipv4ConfigurationType;
            resourceInputs["ipv4DhcpDistance"] = state?.ipv4DhcpDistance;
            resourceInputs["ipv4DhcpDistanceVariable"] = state?.ipv4DhcpDistanceVariable;
            resourceInputs["ipv4DhcpHelperVariable"] = state?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = state?.ipv4DhcpHelpers;
            resourceInputs["ipv4SecondaryAddresses"] = state?.ipv4SecondaryAddresses;
            resourceInputs["ipv4SubnetMask"] = state?.ipv4SubnetMask;
            resourceInputs["ipv4SubnetMaskVariable"] = state?.ipv4SubnetMaskVariable;
            resourceInputs["ipv6Address"] = state?.ipv6Address;
            resourceInputs["ipv6AddressVariable"] = state?.ipv6AddressVariable;
            resourceInputs["ipv6ConfigurationType"] = state?.ipv6ConfigurationType;
            resourceInputs["ipv6DhcpSecondaryAddresses"] = state?.ipv6DhcpSecondaryAddresses;
            resourceInputs["ipv6SecondaryAddresses"] = state?.ipv6SecondaryAddresses;
            resourceInputs["loadInterval"] = state?.loadInterval;
            resourceInputs["loadIntervalVariable"] = state?.loadIntervalVariable;
            resourceInputs["macAddress"] = state?.macAddress;
            resourceInputs["macAddressVariable"] = state?.macAddressVariable;
            resourceInputs["mediaType"] = state?.mediaType;
            resourceInputs["mediaTypeVariable"] = state?.mediaTypeVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat64"] = state?.nat64;
            resourceInputs["nat66"] = state?.nat66;
            resourceInputs["natIpv4"] = state?.natIpv4;
            resourceInputs["natIpv4Variable"] = state?.natIpv4Variable;
            resourceInputs["natIpv6"] = state?.natIpv6;
            resourceInputs["natIpv6Variable"] = state?.natIpv6Variable;
            resourceInputs["natLoopback"] = state?.natLoopback;
            resourceInputs["natLoopbackVariable"] = state?.natLoopbackVariable;
            resourceInputs["natOverload"] = state?.natOverload;
            resourceInputs["natOverloadVariable"] = state?.natOverloadVariable;
            resourceInputs["natPrefixLength"] = state?.natPrefixLength;
            resourceInputs["natPrefixLengthVariable"] = state?.natPrefixLengthVariable;
            resourceInputs["natRangeEnd"] = state?.natRangeEnd;
            resourceInputs["natRangeEndVariable"] = state?.natRangeEndVariable;
            resourceInputs["natRangeStart"] = state?.natRangeStart;
            resourceInputs["natRangeStartVariable"] = state?.natRangeStartVariable;
            resourceInputs["natTcpTimeout"] = state?.natTcpTimeout;
            resourceInputs["natTcpTimeoutVariable"] = state?.natTcpTimeoutVariable;
            resourceInputs["natType"] = state?.natType;
            resourceInputs["natTypeVariable"] = state?.natTypeVariable;
            resourceInputs["natUdpTimeout"] = state?.natUdpTimeout;
            resourceInputs["natUdpTimeoutVariable"] = state?.natUdpTimeoutVariable;
            resourceInputs["newStaticNats"] = state?.newStaticNats;
            resourceInputs["perTunnelQos"] = state?.perTunnelQos;
            resourceInputs["perTunnelQosVariable"] = state?.perTunnelQosVariable;
            resourceInputs["qosAdaptive"] = state?.qosAdaptive;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = state?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = state?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveDefaultDownstream"] = state?.qosAdaptiveDefaultDownstream;
            resourceInputs["qosAdaptiveDefaultDownstreamVariable"] = state?.qosAdaptiveDefaultDownstreamVariable;
            resourceInputs["qosAdaptiveDefaultUpstream"] = state?.qosAdaptiveDefaultUpstream;
            resourceInputs["qosAdaptiveDefaultUpstreamVariable"] = state?.qosAdaptiveDefaultUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = state?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = state?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = state?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = state?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = state?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = state?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = state?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = state?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = state?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = state?.qosAdaptivePeriodVariable;
            resourceInputs["qosShapingRate"] = state?.qosShapingRate;
            resourceInputs["qosShapingRateVariable"] = state?.qosShapingRateVariable;
            resourceInputs["serviceProvider"] = state?.serviceProvider;
            resourceInputs["serviceProviderVariable"] = state?.serviceProviderVariable;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["speed"] = state?.speed;
            resourceInputs["speedVariable"] = state?.speedVariable;
            resourceInputs["staticNat66s"] = state?.staticNat66s;
            resourceInputs["tcpMss"] = state?.tcpMss;
            resourceInputs["tcpMssVariable"] = state?.tcpMssVariable;
            resourceInputs["tlocExtension"] = state?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = state?.tlocExtensionVariable;
            resourceInputs["tracker"] = state?.tracker;
            resourceInputs["trackerVariable"] = state?.trackerVariable;
            resourceInputs["transportWanVpnFeatureId"] = state?.transportWanVpnFeatureId;
            resourceInputs["tunnelBandwidthPercent"] = state?.tunnelBandwidthPercent;
            resourceInputs["tunnelBandwidthPercentVariable"] = state?.tunnelBandwidthPercentVariable;
            resourceInputs["tunnelInterface"] = state?.tunnelInterface;
            resourceInputs["tunnelInterfaceAllowAll"] = state?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = state?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBfd"] = state?.tunnelInterfaceAllowBfd;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = state?.tunnelInterfaceAllowBfdVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = state?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = state?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = state?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = state?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = state?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = state?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = state?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = state?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = state?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = state?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = state?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = state?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = state?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = state?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = state?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = state?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = state?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = state?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = state?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = state?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = state?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = state?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = state?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = state?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = state?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = state?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = state?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = state?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = state?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = state?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = state?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = state?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = state?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = state?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceCtsSgtPropagation"] = state?.tunnelInterfaceCtsSgtPropagation;
            resourceInputs["tunnelInterfaceCtsSgtPropagationVariable"] = state?.tunnelInterfaceCtsSgtPropagationVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = state?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = state?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = state?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIp"] = state?.tunnelInterfaceGreTunnelDestinationIp;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIpVariable"] = state?.tunnelInterfaceGreTunnelDestinationIpVariable;
            resourceInputs["tunnelInterfaceGroups"] = state?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = state?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = state?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = state?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = state?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = state?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = state?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = state?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = state?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = state?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = state?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = state?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = state?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = state?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = state?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = state?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = state?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = state?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = state?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = state?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = state?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = state?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = state?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = state?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = state?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = state?.tunnelQosModeVariable;
            resourceInputs["version"] = state?.version;
            resourceInputs["xconnect"] = state?.xconnect;
            resourceInputs["xconnectVariable"] = state?.xconnectVariable;
        } else {
            const args = argsOrState as TransportWanVpnInterfaceEthernetFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            if (args?.transportWanVpnFeatureId === undefined && !opts.urn) {
                throw new Error("Missing required property 'transportWanVpnFeatureId'");
            }
            resourceInputs["aclIpv4EgressFeatureId"] = args?.aclIpv4EgressFeatureId;
            resourceInputs["aclIpv4IngressFeatureId"] = args?.aclIpv4IngressFeatureId;
            resourceInputs["aclIpv6EgressFeatureId"] = args?.aclIpv6EgressFeatureId;
            resourceInputs["aclIpv6IngressFeatureId"] = args?.aclIpv6IngressFeatureId;
            resourceInputs["arpTimeout"] = args?.arpTimeout;
            resourceInputs["arpTimeoutVariable"] = args?.arpTimeoutVariable;
            resourceInputs["arps"] = args?.arps;
            resourceInputs["autoDetectBandwidth"] = args?.autoDetectBandwidth;
            resourceInputs["autoDetectBandwidthVariable"] = args?.autoDetectBandwidthVariable;
            resourceInputs["autonegotiate"] = args?.autonegotiate;
            resourceInputs["autonegotiateVariable"] = args?.autonegotiateVariable;
            resourceInputs["bandwidthDownstream"] = args?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = args?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = args?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = args?.bandwidthUpstreamVariable;
            resourceInputs["blockNonSourceIp"] = args?.blockNonSourceIp;
            resourceInputs["blockNonSourceIpVariable"] = args?.blockNonSourceIpVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["duplex"] = args?.duplex;
            resourceInputs["duplexVariable"] = args?.duplexVariable;
            resourceInputs["enableDhcpv6"] = args?.enableDhcpv6;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["greTunnelSourceIp"] = args?.greTunnelSourceIp;
            resourceInputs["greTunnelSourceIpVariable"] = args?.greTunnelSourceIpVariable;
            resourceInputs["icmpRedirectDisable"] = args?.icmpRedirectDisable;
            resourceInputs["icmpRedirectDisableVariable"] = args?.icmpRedirectDisableVariable;
            resourceInputs["interfaceDescription"] = args?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = args?.interfaceDescriptionVariable;
            resourceInputs["interfaceMtu"] = args?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = args?.interfaceMtuVariable;
            resourceInputs["interfaceName"] = args?.interfaceName;
            resourceInputs["interfaceNameVariable"] = args?.interfaceNameVariable;
            resourceInputs["ipDirectedBroadcast"] = args?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = args?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = args?.ipMtu;
            resourceInputs["ipMtuVariable"] = args?.ipMtuVariable;
            resourceInputs["iperfServer"] = args?.iperfServer;
            resourceInputs["iperfServerVariable"] = args?.iperfServerVariable;
            resourceInputs["ipv4Address"] = args?.ipv4Address;
            resourceInputs["ipv4AddressVariable"] = args?.ipv4AddressVariable;
            resourceInputs["ipv4ConfigurationType"] = args?.ipv4ConfigurationType;
            resourceInputs["ipv4DhcpDistance"] = args?.ipv4DhcpDistance;
            resourceInputs["ipv4DhcpDistanceVariable"] = args?.ipv4DhcpDistanceVariable;
            resourceInputs["ipv4DhcpHelperVariable"] = args?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = args?.ipv4DhcpHelpers;
            resourceInputs["ipv4SecondaryAddresses"] = args?.ipv4SecondaryAddresses;
            resourceInputs["ipv4SubnetMask"] = args?.ipv4SubnetMask;
            resourceInputs["ipv4SubnetMaskVariable"] = args?.ipv4SubnetMaskVariable;
            resourceInputs["ipv6Address"] = args?.ipv6Address;
            resourceInputs["ipv6AddressVariable"] = args?.ipv6AddressVariable;
            resourceInputs["ipv6ConfigurationType"] = args?.ipv6ConfigurationType;
            resourceInputs["ipv6DhcpSecondaryAddresses"] = args?.ipv6DhcpSecondaryAddresses;
            resourceInputs["ipv6SecondaryAddresses"] = args?.ipv6SecondaryAddresses;
            resourceInputs["loadInterval"] = args?.loadInterval;
            resourceInputs["loadIntervalVariable"] = args?.loadIntervalVariable;
            resourceInputs["macAddress"] = args?.macAddress;
            resourceInputs["macAddressVariable"] = args?.macAddressVariable;
            resourceInputs["mediaType"] = args?.mediaType;
            resourceInputs["mediaTypeVariable"] = args?.mediaTypeVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat64"] = args?.nat64;
            resourceInputs["nat66"] = args?.nat66;
            resourceInputs["natIpv4"] = args?.natIpv4;
            resourceInputs["natIpv4Variable"] = args?.natIpv4Variable;
            resourceInputs["natIpv6"] = args?.natIpv6;
            resourceInputs["natIpv6Variable"] = args?.natIpv6Variable;
            resourceInputs["natLoopback"] = args?.natLoopback;
            resourceInputs["natLoopbackVariable"] = args?.natLoopbackVariable;
            resourceInputs["natOverload"] = args?.natOverload;
            resourceInputs["natOverloadVariable"] = args?.natOverloadVariable;
            resourceInputs["natPrefixLength"] = args?.natPrefixLength;
            resourceInputs["natPrefixLengthVariable"] = args?.natPrefixLengthVariable;
            resourceInputs["natRangeEnd"] = args?.natRangeEnd;
            resourceInputs["natRangeEndVariable"] = args?.natRangeEndVariable;
            resourceInputs["natRangeStart"] = args?.natRangeStart;
            resourceInputs["natRangeStartVariable"] = args?.natRangeStartVariable;
            resourceInputs["natTcpTimeout"] = args?.natTcpTimeout;
            resourceInputs["natTcpTimeoutVariable"] = args?.natTcpTimeoutVariable;
            resourceInputs["natType"] = args?.natType;
            resourceInputs["natTypeVariable"] = args?.natTypeVariable;
            resourceInputs["natUdpTimeout"] = args?.natUdpTimeout;
            resourceInputs["natUdpTimeoutVariable"] = args?.natUdpTimeoutVariable;
            resourceInputs["newStaticNats"] = args?.newStaticNats;
            resourceInputs["perTunnelQos"] = args?.perTunnelQos;
            resourceInputs["perTunnelQosVariable"] = args?.perTunnelQosVariable;
            resourceInputs["qosAdaptive"] = args?.qosAdaptive;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = args?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = args?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveDefaultDownstream"] = args?.qosAdaptiveDefaultDownstream;
            resourceInputs["qosAdaptiveDefaultDownstreamVariable"] = args?.qosAdaptiveDefaultDownstreamVariable;
            resourceInputs["qosAdaptiveDefaultUpstream"] = args?.qosAdaptiveDefaultUpstream;
            resourceInputs["qosAdaptiveDefaultUpstreamVariable"] = args?.qosAdaptiveDefaultUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = args?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = args?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = args?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = args?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = args?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = args?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = args?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = args?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = args?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = args?.qosAdaptivePeriodVariable;
            resourceInputs["qosShapingRate"] = args?.qosShapingRate;
            resourceInputs["qosShapingRateVariable"] = args?.qosShapingRateVariable;
            resourceInputs["serviceProvider"] = args?.serviceProvider;
            resourceInputs["serviceProviderVariable"] = args?.serviceProviderVariable;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["speed"] = args?.speed;
            resourceInputs["speedVariable"] = args?.speedVariable;
            resourceInputs["staticNat66s"] = args?.staticNat66s;
            resourceInputs["tcpMss"] = args?.tcpMss;
            resourceInputs["tcpMssVariable"] = args?.tcpMssVariable;
            resourceInputs["tlocExtension"] = args?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = args?.tlocExtensionVariable;
            resourceInputs["tracker"] = args?.tracker;
            resourceInputs["trackerVariable"] = args?.trackerVariable;
            resourceInputs["transportWanVpnFeatureId"] = args?.transportWanVpnFeatureId;
            resourceInputs["tunnelBandwidthPercent"] = args?.tunnelBandwidthPercent;
            resourceInputs["tunnelBandwidthPercentVariable"] = args?.tunnelBandwidthPercentVariable;
            resourceInputs["tunnelInterface"] = args?.tunnelInterface;
            resourceInputs["tunnelInterfaceAllowAll"] = args?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = args?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBfd"] = args?.tunnelInterfaceAllowBfd;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = args?.tunnelInterfaceAllowBfdVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = args?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = args?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = args?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = args?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = args?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = args?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = args?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = args?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = args?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = args?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = args?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = args?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = args?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = args?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = args?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = args?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = args?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = args?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = args?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = args?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = args?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = args?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = args?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = args?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = args?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = args?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = args?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = args?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = args?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = args?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = args?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = args?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = args?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = args?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceCtsSgtPropagation"] = args?.tunnelInterfaceCtsSgtPropagation;
            resourceInputs["tunnelInterfaceCtsSgtPropagationVariable"] = args?.tunnelInterfaceCtsSgtPropagationVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = args?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = args?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = args?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIp"] = args?.tunnelInterfaceGreTunnelDestinationIp;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIpVariable"] = args?.tunnelInterfaceGreTunnelDestinationIpVariable;
            resourceInputs["tunnelInterfaceGroups"] = args?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = args?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = args?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = args?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = args?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = args?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = args?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = args?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = args?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = args?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = args?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = args?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = args?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = args?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = args?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = args?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = args?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = args?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = args?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = args?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = args?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = args?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = args?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = args?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = args?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = args?.tunnelQosModeVariable;
            resourceInputs["xconnect"] = args?.xconnect;
            resourceInputs["xconnectVariable"] = args?.xconnectVariable;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportWanVpnInterfaceEthernetFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportWanVpnInterfaceEthernetFeature resources.
 */
export interface TransportWanVpnInterfaceEthernetFeatureState {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Timeout value for dynamically learned ARP entries, <0..2678400> seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     */
    arpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    arpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Configure ARP entries
     */
    arps?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureArp>[]>;
    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     */
    autoDetectBandwidth?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autoDetectBandwidthVariable?: pulumi.Input<string>;
    /**
     * Link autonegotiation
     */
    autonegotiate?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autonegotiateVariable?: pulumi.Input<string>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     */
    blockNonSourceIp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    blockNonSourceIpVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     */
    duplex?: pulumi.Input<string>;
    /**
     * Variable name
     */
    duplexVariable?: pulumi.Input<string>;
    /**
     * Enable DHCPv6, Attribute conditional on `ipv6ConfigurationType` being equal to `dynamic`
     */
    enableDhcpv6?: pulumi.Input<boolean>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * GRE tunnel source IP
     */
    greTunnelSourceIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    greTunnelSourceIpVariable?: pulumi.Input<string>;
    /**
     * ICMP/ICMPv6 Redirect Disable
     *   - Default value: `true`
     */
    icmpRedirectDisable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    icmpRedirectDisableVariable?: pulumi.Input<string>;
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Iperf server for auto bandwidth detect
     */
    iperfServer?: pulumi.Input<string>;
    /**
     * Variable name
     */
    iperfServerVariable?: pulumi.Input<string>;
    /**
     * IP Address, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4AddressVariable?: pulumi.Input<string>;
    /**
     * IPv4 Configuration Type
     *   - Choices: `dynamic`, `static`
     *   - Default value: `dynamic`
     */
    ipv4ConfigurationType?: pulumi.Input<string>;
    /**
     * DHCP Distance, Attribute conditional on `ipv4ConfigurationType` being equal to `dynamic`
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     */
    ipv4DhcpDistance?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `dynamic`
     */
    ipv4DhcpDistanceVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Secondary IpV4 Addresses, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress>[]>;
    /**
     * Subnet Mask, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4SubnetMaskVariable?: pulumi.Input<string>;
    /**
     * IPv6 Address Secondary, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * IPv6 Configuration Type
     *   - Choices: `dynamic`, `static`, `none`
     *   - Default value: `none`
     */
    ipv6ConfigurationType?: pulumi.Input<string>;
    /**
     * secondary IPv6 addresses, Attribute conditional on `ipv6ConfigurationType` being equal to `dynamic`
     */
    ipv6DhcpSecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress>[]>;
    /**
     * Static secondary IPv6 addresses, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    ipv6SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress>[]>;
    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    loadIntervalVariable?: pulumi.Input<string>;
    /**
     * MAC Address
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    macAddressVariable?: pulumi.Input<string>;
    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     */
    mediaType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    mediaTypeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * NAT64 on this interface, Attribute conditional on `natIpv6` being equal to `true`
     *   - Default value: `false`
     */
    nat64?: pulumi.Input<boolean>;
    /**
     * NAT66 on this interface, Attribute conditional on `natIpv6` being equal to `true`
     *   - Default value: `false`
     */
    nat66?: pulumi.Input<boolean>;
    /**
     * enable Network Address Translation on this interface
     *   - Default value: `false`
     */
    natIpv4?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natIpv4Variable?: pulumi.Input<string>;
    /**
     * enable Network Address Translation ipv6 on this interface
     *   - Default value: `false`
     */
    natIpv6?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natIpv6Variable?: pulumi.Input<string>;
    /**
     * NAT Inside Source Loopback Interface, Attribute conditional on `natIpv4` being equal to `true`
     */
    natLoopback?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natLoopbackVariable?: pulumi.Input<string>;
    /**
     * NAT Overload, Attribute conditional on `natIpv4` being equal to `true`
     *   - Default value: `true`
     */
    natOverload?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natOverloadVariable?: pulumi.Input<string>;
    /**
     * NAT Pool Prefix Length, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`32`
     */
    natPrefixLength?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natPrefixLengthVariable?: pulumi.Input<string>;
    /**
     * NAT Pool Range End, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeEnd?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeEndVariable?: pulumi.Input<string>;
    /**
     * NAT Pool Range Start, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeStart?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeStartVariable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    natTcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natTcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * NAT Type, Attribute conditional on `natIpv4` being equal to `true`
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     */
    natType?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natTypeVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    natUdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natUdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * static NAT, Attribute conditional on `natIpv4` being equal to `true`
     */
    newStaticNats?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNat>[]>;
    /**
     * Per-tunnel Qos, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS
     *   - Default value: `false`
     */
    qosAdaptive?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Downstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Upstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<boolean>;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Adapt Period(Minutes)
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Shaping Rate (Kbps)
     *   - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Service Provider Name
     */
    serviceProvider?: pulumi.Input<string>;
    /**
     * Variable name
     */
    serviceProviderVariable?: pulumi.Input<string>;
    /**
     * - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    speed?: pulumi.Input<string>;
    /**
     * Variable name
     */
    speedVariable?: pulumi.Input<string>;
    /**
     * static NAT66, Attribute conditional on `natIpv6` being equal to `true`
     */
    staticNat66s?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66>[]>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    tracker?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId?: pulumi.Input<string>;
    /**
     * Tunnels Bandwidth Percent, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`100`
     *   - Default value: `50`
     */
    tunnelBandwidthPercent?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelBandwidthPercentVariable?: pulumi.Input<string>;
    /**
     * Tunnel Interface on/off
     *   - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny HTTPS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `true`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface), Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `mpls`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * CTS SGT Propagation configuration, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceCtsSgtPropagation?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceCtsSgtPropagationVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list., Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * GRE tunnel destination IP, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceGreTunnelDestinationIp?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceGreTunnelDestinationIpVariable?: pulumi.Input<string>;
    /**
     * List of groups, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Maximum Control Connections, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    xconnect?: pulumi.Input<string>;
    /**
     * Variable name
     */
    xconnectVariable?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TransportWanVpnInterfaceEthernetFeature resource.
 */
export interface TransportWanVpnInterfaceEthernetFeatureArgs {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Timeout value for dynamically learned ARP entries, <0..2678400> seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     */
    arpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    arpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Configure ARP entries
     */
    arps?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureArp>[]>;
    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     */
    autoDetectBandwidth?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autoDetectBandwidthVariable?: pulumi.Input<string>;
    /**
     * Link autonegotiation
     */
    autonegotiate?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autonegotiateVariable?: pulumi.Input<string>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     */
    blockNonSourceIp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    blockNonSourceIpVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     */
    duplex?: pulumi.Input<string>;
    /**
     * Variable name
     */
    duplexVariable?: pulumi.Input<string>;
    /**
     * Enable DHCPv6, Attribute conditional on `ipv6ConfigurationType` being equal to `dynamic`
     */
    enableDhcpv6?: pulumi.Input<boolean>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * GRE tunnel source IP
     */
    greTunnelSourceIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    greTunnelSourceIpVariable?: pulumi.Input<string>;
    /**
     * ICMP/ICMPv6 Redirect Disable
     *   - Default value: `true`
     */
    icmpRedirectDisable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    icmpRedirectDisableVariable?: pulumi.Input<string>;
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Iperf server for auto bandwidth detect
     */
    iperfServer?: pulumi.Input<string>;
    /**
     * Variable name
     */
    iperfServerVariable?: pulumi.Input<string>;
    /**
     * IP Address, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4Address?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4AddressVariable?: pulumi.Input<string>;
    /**
     * IPv4 Configuration Type
     *   - Choices: `dynamic`, `static`
     *   - Default value: `dynamic`
     */
    ipv4ConfigurationType?: pulumi.Input<string>;
    /**
     * DHCP Distance, Attribute conditional on `ipv4ConfigurationType` being equal to `dynamic`
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     */
    ipv4DhcpDistance?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `dynamic`
     */
    ipv4DhcpDistanceVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Secondary IpV4 Addresses, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress>[]>;
    /**
     * Subnet Mask, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `ipv4ConfigurationType` being equal to `static`
     */
    ipv4SubnetMaskVariable?: pulumi.Input<string>;
    /**
     * IPv6 Address Secondary, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * IPv6 Configuration Type
     *   - Choices: `dynamic`, `static`, `none`
     *   - Default value: `none`
     */
    ipv6ConfigurationType?: pulumi.Input<string>;
    /**
     * secondary IPv6 addresses, Attribute conditional on `ipv6ConfigurationType` being equal to `dynamic`
     */
    ipv6DhcpSecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress>[]>;
    /**
     * Static secondary IPv6 addresses, Attribute conditional on `ipv6ConfigurationType` being equal to `static`
     */
    ipv6SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress>[]>;
    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    loadIntervalVariable?: pulumi.Input<string>;
    /**
     * MAC Address
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    macAddressVariable?: pulumi.Input<string>;
    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     */
    mediaType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    mediaTypeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * NAT64 on this interface, Attribute conditional on `natIpv6` being equal to `true`
     *   - Default value: `false`
     */
    nat64?: pulumi.Input<boolean>;
    /**
     * NAT66 on this interface, Attribute conditional on `natIpv6` being equal to `true`
     *   - Default value: `false`
     */
    nat66?: pulumi.Input<boolean>;
    /**
     * enable Network Address Translation on this interface
     *   - Default value: `false`
     */
    natIpv4?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natIpv4Variable?: pulumi.Input<string>;
    /**
     * enable Network Address Translation ipv6 on this interface
     *   - Default value: `false`
     */
    natIpv6?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natIpv6Variable?: pulumi.Input<string>;
    /**
     * NAT Inside Source Loopback Interface, Attribute conditional on `natIpv4` being equal to `true`
     */
    natLoopback?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natLoopbackVariable?: pulumi.Input<string>;
    /**
     * NAT Overload, Attribute conditional on `natIpv4` being equal to `true`
     *   - Default value: `true`
     */
    natOverload?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natOverloadVariable?: pulumi.Input<string>;
    /**
     * NAT Pool Prefix Length, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`32`
     */
    natPrefixLength?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natPrefixLengthVariable?: pulumi.Input<string>;
    /**
     * NAT Pool Range End, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeEnd?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeEndVariable?: pulumi.Input<string>;
    /**
     * NAT Pool Range Start, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeStart?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natRangeStartVariable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    natTcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natTcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * NAT Type, Attribute conditional on `natIpv4` being equal to `true`
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     */
    natType?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natTypeVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes, Attribute conditional on `natIpv4` being equal to `true`
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    natUdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `natIpv4` being equal to `true`
     */
    natUdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * static NAT, Attribute conditional on `natIpv4` being equal to `true`
     */
    newStaticNats?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureNewStaticNat>[]>;
    /**
     * Per-tunnel Qos, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS
     *   - Default value: `false`
     */
    qosAdaptive?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Downstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Upstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<boolean>;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Adapt Period(Minutes)
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Shaping Rate (Kbps)
     *   - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Service Provider Name
     */
    serviceProvider?: pulumi.Input<string>;
    /**
     * Variable name
     */
    serviceProviderVariable?: pulumi.Input<string>;
    /**
     * - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    speed?: pulumi.Input<string>;
    /**
     * Variable name
     */
    speedVariable?: pulumi.Input<string>;
    /**
     * static NAT66, Attribute conditional on `natIpv6` being equal to `true`
     */
    staticNat66s?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureStaticNat66>[]>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    tracker?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: pulumi.Input<string>;
    /**
     * Tunnels Bandwidth Percent, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`100`
     *   - Default value: `50`
     */
    tunnelBandwidthPercent?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelBandwidthPercentVariable?: pulumi.Input<string>;
    /**
     * Tunnel Interface on/off
     *   - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny HTTPS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `true`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface), Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `mpls`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * CTS SGT Propagation configuration, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceCtsSgtPropagation?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceCtsSgtPropagationVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list., Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * GRE tunnel destination IP, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceGreTunnelDestinationIp?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceGreTunnelDestinationIpVariable?: pulumi.Input<string>;
    /**
     * List of groups, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Maximum Control Connections, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode, Attribute conditional on `tunnelInterface` being equal to `true`
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name, Attribute conditional on `tunnelInterface` being equal to `true`
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    xconnect?: pulumi.Input<string>;
    /**
     * Variable name
     */
    xconnectVariable?: pulumi.Input<string>;
}
