// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Configuration Group .
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.ConfigurationGroup("example", {
 *     name: "CG_1",
 *     description: "My config group 1",
 *     solution: "sdwan",
 *     featureProfileIds: ["f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"],
 *     devices: [{
 *         id: "C8K-40C0CCFD-9EA8-2B2E-E73B-32C5924EC79B",
 *         variables: [{
 *             name: "host_name",
 *             value: "edge1",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import sdwan:index/configurationGroup:ConfigurationGroup example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class ConfigurationGroup extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationGroupState, opts?: pulumi.CustomResourceOptions): ConfigurationGroup {
        return new ConfigurationGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/configurationGroup:ConfigurationGroup';

    /**
     * Returns true if the given object is an instance of ConfigurationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationGroup.__pulumiType;
    }

    /**
     * Description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of devices
     */
    public readonly devices!: pulumi.Output<outputs.ConfigurationGroupDevice[] | undefined>;
    /**
     * List of feature profile IDs
     */
    public readonly featureProfileIds!: pulumi.Output<string[] | undefined>;
    /**
     * List of all associated feature versions
     */
    public readonly featureVersions!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the configuration group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
     */
    public readonly solution!: pulumi.Output<string>;
    /**
     * List of topology device types
     */
    public readonly topologyDevices!: pulumi.Output<outputs.ConfigurationGroupTopologyDevice[] | undefined>;
    /**
     * Number of devices per site - Range: `1`-`20`
     */
    public readonly topologySiteDevices!: pulumi.Output<number | undefined>;

    /**
     * Create a ConfigurationGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationGroupArgs | ConfigurationGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["featureProfileIds"] = state ? state.featureProfileIds : undefined;
            resourceInputs["featureVersions"] = state ? state.featureVersions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["solution"] = state ? state.solution : undefined;
            resourceInputs["topologyDevices"] = state ? state.topologyDevices : undefined;
            resourceInputs["topologySiteDevices"] = state ? state.topologySiteDevices : undefined;
        } else {
            const args = argsOrState as ConfigurationGroupArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.solution === undefined) && !opts.urn) {
                throw new Error("Missing required property 'solution'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["featureProfileIds"] = args ? args.featureProfileIds : undefined;
            resourceInputs["featureVersions"] = args ? args.featureVersions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["solution"] = args ? args.solution : undefined;
            resourceInputs["topologyDevices"] = args ? args.topologyDevices : undefined;
            resourceInputs["topologySiteDevices"] = args ? args.topologySiteDevices : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationGroup resources.
 */
export interface ConfigurationGroupState {
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * List of devices
     */
    devices?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupDevice>[]>;
    /**
     * List of feature profile IDs
     */
    featureProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of all associated feature versions
     */
    featureVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the configuration group
     */
    name?: pulumi.Input<string>;
    /**
     * Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
     */
    solution?: pulumi.Input<string>;
    /**
     * List of topology device types
     */
    topologyDevices?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupTopologyDevice>[]>;
    /**
     * Number of devices per site - Range: `1`-`20`
     */
    topologySiteDevices?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ConfigurationGroup resource.
 */
export interface ConfigurationGroupArgs {
    /**
     * Description
     */
    description: pulumi.Input<string>;
    /**
     * List of devices
     */
    devices?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupDevice>[]>;
    /**
     * List of feature profile IDs
     */
    featureProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of all associated feature versions
     */
    featureVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the configuration group
     */
    name?: pulumi.Input<string>;
    /**
     * Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
     */
    solution: pulumi.Input<string>;
    /**
     * List of topology device types
     */
    topologyDevices?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupTopologyDevice>[]>;
    /**
     * Number of devices per site - Range: `1`-`20`
     */
    topologySiteDevices?: pulumi.Input<number>;
}
