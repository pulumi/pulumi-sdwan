// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport WAN VPN Interface T1 E1 Serial Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.TransportWanVpnInterfaceT1E1SerialFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 *     shutdown: true,
 *     interfaceName: "Serial0",
 *     ipv4Address: "1.2.3.4",
 *     ipv4SubnetMask: "0.0.0.0",
 *     ipv6Address: "2001:0:0:1::/64",
 *     bandwidth: 123456,
 *     bandwidthDownstream: 123456,
 *     clockRate: "1200",
 *     encapsulation: "ppp",
 *     tunnelInterface: true,
 *     perTunnelQos: true,
 *     perTunnelQosAggregator: false,
 *     tunnelQosMode: "hub",
 *     tunnelInterfaceColor: "mpls",
 *     tunnelInterfaceRestrict: true,
 *     tunnelInterfaceGroups: 42949672,
 *     tunnelInterfaceBorder: false,
 *     tunnelInterfaceMaxControlConnections: 62,
 *     tunnelInterfaceVbondAsStunServer: false,
 *     tunnelInterfaceExcludeControllerGroupLists: [2],
 *     tunnelInterfaceVmanageConnectionPreference: 8,
 *     tunnelInterfacePortHop: true,
 *     tunnelInterfaceLowBandwidthLink: false,
 *     tunnelInterfaceTunnelTcpMss: 1460,
 *     tunnelInterfaceClearDontFragment: false,
 *     tunnelInterfaceClearNetworkBroadcast: false,
 *     tunnelInterfaceCarrier: "default",
 *     tunnelInterfaceBindLoopbackTunnel: "example",
 *     tunnelInterfaceLastResortCircuit: false,
 *     tunnelInterfaceNatRefreshInterval: 5,
 *     tunnelInterfaceHelloInterval: 1000,
 *     tunnelInterfaceHelloTolerance: 12,
 *     tunnelInterfaceAllowAll: false,
 *     tunnelInterfaceAllowBgp: false,
 *     tunnelInterfaceAllowDhcp: true,
 *     tunnelInterfaceAllowDns: true,
 *     tunnelInterfaceAllowIcmp: true,
 *     tunnelInterfaceAllowNetconf: false,
 *     tunnelInterfaceAllowNtp: false,
 *     tunnelInterfaceAllowOspf: false,
 *     tunnelInterfaceAllowSsh: false,
 *     tunnelInterfaceAllowStun: false,
 *     tunnelInterfaceAllowHttps: true,
 *     tunnelInterfaceAllowSnmp: false,
 *     tunnelInterfaceAllowBfd: false,
 *     tunnelInterfaceEncapsulations: [{
 *         encapsulation: "gre",
 *         preference: 4294967,
 *         weight: 250,
 *     }],
 *     aclIpv4EgressFeatureId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     aclIpv6IngressFeatureId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     tcpMss: 1460,
 *     mtu: 1500,
 *     ipMtu: 1500,
 *     tlocExtension: "tloc",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "transport_wan_vpn_interface_t1_e1_serial_feature_id,feature_profile_id,transport_wan_vpn_feature_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
 * ```
 */
export class TransportWanVpnInterfaceT1E1SerialFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportWanVpnInterfaceT1E1SerialFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportWanVpnInterfaceT1E1SerialFeatureState, opts?: pulumi.CustomResourceOptions): TransportWanVpnInterfaceT1E1SerialFeature {
        return new TransportWanVpnInterfaceT1E1SerialFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature';

    /**
     * Returns true if the given object is an instance of TransportWanVpnInterfaceT1E1SerialFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportWanVpnInterfaceT1E1SerialFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportWanVpnInterfaceT1E1SerialFeature.__pulumiType;
    }

    declare public readonly aclIpv4EgressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv4IngressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv6EgressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv6IngressFeatureId: pulumi.Output<string | undefined>;
    /**
     * Interface bandwidth capacity, in kbps
     *   - Range: `1`-`200000000`
     */
    declare public readonly bandwidth: pulumi.Output<number | undefined>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthVariable: pulumi.Output<string | undefined>;
    /**
     * Set preference for interface Clock speed
     *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     */
    declare public readonly clockRate: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly clockRateVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`, `frame-relay`
     */
    declare public readonly encapsulation: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly encapsulationVariable: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     */
    declare public readonly interfaceName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceNameVariable: pulumi.Output<string | undefined>;
    /**
     * Set ip mtu
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly ipMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipMtuVariable: pulumi.Output<string | undefined>;
    declare public readonly ipv4Address: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv4AddressVariable: pulumi.Output<string | undefined>;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    declare public readonly ipv4SubnetMask: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv4SubnetMaskVariable: pulumi.Output<string | undefined>;
    /**
     * Assign IPv6 address
     */
    declare public readonly ipv6Address: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv6AddressVariable: pulumi.Output<string | undefined>;
    /**
     * Interface MTU <68...2000>, in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly mtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly mtuVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    declare public readonly perTunnelQos: pulumi.Output<boolean | undefined>;
    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     */
    declare public readonly perTunnelQosAggregator: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly perTunnelQosAggregatorVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly perTunnelQosVariable: pulumi.Output<string | undefined>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosShapingRate: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosShapingRateVariable: pulumi.Output<string | undefined>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    declare public readonly tlocExtension: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tlocExtensionVariable: pulumi.Output<string | undefined>;
    /**
     * Transport WAN VPN Feature ID
     */
    declare public readonly transportWanVpnFeatureId: pulumi.Output<string>;
    /**
     * Tunnel Interface
     *   - Default value: `false`
     */
    declare public readonly tunnelInterface: pulumi.Output<boolean | undefined>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowAll: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowAllVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBfd: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBfdVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBgp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBgpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDhcp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDhcpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDns: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDnsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowHttps: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowHttpsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowIcmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowIcmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNetconf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNetconfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNtp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNtpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowOspf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowOspfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSnmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSnmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSsh: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSshVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowStun: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowStunVariable: pulumi.Output<string | undefined>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnel: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnelVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceBorder: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBorderVariable: pulumi.Output<string | undefined>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceCarrier: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceCarrierVariable: pulumi.Output<string | undefined>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceClearDontFragment: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceClearDontFragmentVariable: pulumi.Output<string | undefined>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceClearNetworkBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceClearNetworkBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceColor: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorVariable: pulumi.Output<string | undefined>;
    /**
     * Encapsulation for TLOC
     */
    declare public readonly tunnelInterfaceEncapsulations: pulumi.Output<outputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupListVariable: pulumi.Output<string | undefined>;
    /**
     * Exclude the following controller groups defined in this list
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupLists: pulumi.Output<number[] | undefined>;
    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     */
    declare public readonly tunnelInterfaceGroups: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceGroupsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    declare public readonly tunnelInterfaceHelloInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    declare public readonly tunnelInterfaceHelloTolerance: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloToleranceVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLastResortCircuit: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLastResortCircuitVariable: pulumi.Output<string | undefined>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLowBandwidthLink: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLowBandwidthLinkVariable: pulumi.Output<string | undefined>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     */
    declare public readonly tunnelInterfaceMaxControlConnections: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceMaxControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceNatRefreshInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNatRefreshIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfacePortHop: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfacePortHopVariable: pulumi.Output<string | undefined>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceRestrict: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceRestrictVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tunnelInterfaceTunnelTcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceTunnelTcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceVbondAsStunServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVbondAsStunServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreference: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreferenceVariable: pulumi.Output<string | undefined>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `spoke`, `hub`
     */
    declare public readonly tunnelQosMode: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelQosModeVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a TransportWanVpnInterfaceT1E1SerialFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportWanVpnInterfaceT1E1SerialFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportWanVpnInterfaceT1E1SerialFeatureArgs | TransportWanVpnInterfaceT1E1SerialFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportWanVpnInterfaceT1E1SerialFeatureState | undefined;
            resourceInputs["aclIpv4EgressFeatureId"] = state?.aclIpv4EgressFeatureId;
            resourceInputs["aclIpv4IngressFeatureId"] = state?.aclIpv4IngressFeatureId;
            resourceInputs["aclIpv6EgressFeatureId"] = state?.aclIpv6EgressFeatureId;
            resourceInputs["aclIpv6IngressFeatureId"] = state?.aclIpv6IngressFeatureId;
            resourceInputs["bandwidth"] = state?.bandwidth;
            resourceInputs["bandwidthDownstream"] = state?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = state?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthVariable"] = state?.bandwidthVariable;
            resourceInputs["clockRate"] = state?.clockRate;
            resourceInputs["clockRateVariable"] = state?.clockRateVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["encapsulation"] = state?.encapsulation;
            resourceInputs["encapsulationVariable"] = state?.encapsulationVariable;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["interfaceName"] = state?.interfaceName;
            resourceInputs["interfaceNameVariable"] = state?.interfaceNameVariable;
            resourceInputs["ipMtu"] = state?.ipMtu;
            resourceInputs["ipMtuVariable"] = state?.ipMtuVariable;
            resourceInputs["ipv4Address"] = state?.ipv4Address;
            resourceInputs["ipv4AddressVariable"] = state?.ipv4AddressVariable;
            resourceInputs["ipv4SubnetMask"] = state?.ipv4SubnetMask;
            resourceInputs["ipv4SubnetMaskVariable"] = state?.ipv4SubnetMaskVariable;
            resourceInputs["ipv6Address"] = state?.ipv6Address;
            resourceInputs["ipv6AddressVariable"] = state?.ipv6AddressVariable;
            resourceInputs["mtu"] = state?.mtu;
            resourceInputs["mtuVariable"] = state?.mtuVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["perTunnelQos"] = state?.perTunnelQos;
            resourceInputs["perTunnelQosAggregator"] = state?.perTunnelQosAggregator;
            resourceInputs["perTunnelQosAggregatorVariable"] = state?.perTunnelQosAggregatorVariable;
            resourceInputs["perTunnelQosVariable"] = state?.perTunnelQosVariable;
            resourceInputs["qosShapingRate"] = state?.qosShapingRate;
            resourceInputs["qosShapingRateVariable"] = state?.qosShapingRateVariable;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["tcpMss"] = state?.tcpMss;
            resourceInputs["tcpMssVariable"] = state?.tcpMssVariable;
            resourceInputs["tlocExtension"] = state?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = state?.tlocExtensionVariable;
            resourceInputs["transportWanVpnFeatureId"] = state?.transportWanVpnFeatureId;
            resourceInputs["tunnelInterface"] = state?.tunnelInterface;
            resourceInputs["tunnelInterfaceAllowAll"] = state?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = state?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBfd"] = state?.tunnelInterfaceAllowBfd;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = state?.tunnelInterfaceAllowBfdVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = state?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = state?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = state?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = state?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = state?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = state?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = state?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = state?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = state?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = state?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = state?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = state?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = state?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = state?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = state?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = state?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = state?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = state?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = state?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = state?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = state?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = state?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = state?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = state?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = state?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = state?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = state?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = state?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = state?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = state?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceClearNetworkBroadcast"] = state?.tunnelInterfaceClearNetworkBroadcast;
            resourceInputs["tunnelInterfaceClearNetworkBroadcastVariable"] = state?.tunnelInterfaceClearNetworkBroadcastVariable;
            resourceInputs["tunnelInterfaceColor"] = state?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorVariable"] = state?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = state?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = state?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = state?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGroups"] = state?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = state?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = state?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = state?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = state?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = state?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = state?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = state?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = state?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = state?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = state?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = state?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = state?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = state?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfacePortHop"] = state?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = state?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceRestrict"] = state?.tunnelInterfaceRestrict;
            resourceInputs["tunnelInterfaceRestrictVariable"] = state?.tunnelInterfaceRestrictVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = state?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = state?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = state?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = state?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = state?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = state?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = state?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = state?.tunnelQosModeVariable;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as TransportWanVpnInterfaceT1E1SerialFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            if (args?.transportWanVpnFeatureId === undefined && !opts.urn) {
                throw new Error("Missing required property 'transportWanVpnFeatureId'");
            }
            resourceInputs["aclIpv4EgressFeatureId"] = args?.aclIpv4EgressFeatureId;
            resourceInputs["aclIpv4IngressFeatureId"] = args?.aclIpv4IngressFeatureId;
            resourceInputs["aclIpv6EgressFeatureId"] = args?.aclIpv6EgressFeatureId;
            resourceInputs["aclIpv6IngressFeatureId"] = args?.aclIpv6IngressFeatureId;
            resourceInputs["bandwidth"] = args?.bandwidth;
            resourceInputs["bandwidthDownstream"] = args?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = args?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthVariable"] = args?.bandwidthVariable;
            resourceInputs["clockRate"] = args?.clockRate;
            resourceInputs["clockRateVariable"] = args?.clockRateVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["encapsulation"] = args?.encapsulation;
            resourceInputs["encapsulationVariable"] = args?.encapsulationVariable;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["interfaceName"] = args?.interfaceName;
            resourceInputs["interfaceNameVariable"] = args?.interfaceNameVariable;
            resourceInputs["ipMtu"] = args?.ipMtu;
            resourceInputs["ipMtuVariable"] = args?.ipMtuVariable;
            resourceInputs["ipv4Address"] = args?.ipv4Address;
            resourceInputs["ipv4AddressVariable"] = args?.ipv4AddressVariable;
            resourceInputs["ipv4SubnetMask"] = args?.ipv4SubnetMask;
            resourceInputs["ipv4SubnetMaskVariable"] = args?.ipv4SubnetMaskVariable;
            resourceInputs["ipv6Address"] = args?.ipv6Address;
            resourceInputs["ipv6AddressVariable"] = args?.ipv6AddressVariable;
            resourceInputs["mtu"] = args?.mtu;
            resourceInputs["mtuVariable"] = args?.mtuVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["perTunnelQos"] = args?.perTunnelQos;
            resourceInputs["perTunnelQosAggregator"] = args?.perTunnelQosAggregator;
            resourceInputs["perTunnelQosAggregatorVariable"] = args?.perTunnelQosAggregatorVariable;
            resourceInputs["perTunnelQosVariable"] = args?.perTunnelQosVariable;
            resourceInputs["qosShapingRate"] = args?.qosShapingRate;
            resourceInputs["qosShapingRateVariable"] = args?.qosShapingRateVariable;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["tcpMss"] = args?.tcpMss;
            resourceInputs["tcpMssVariable"] = args?.tcpMssVariable;
            resourceInputs["tlocExtension"] = args?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = args?.tlocExtensionVariable;
            resourceInputs["transportWanVpnFeatureId"] = args?.transportWanVpnFeatureId;
            resourceInputs["tunnelInterface"] = args?.tunnelInterface;
            resourceInputs["tunnelInterfaceAllowAll"] = args?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = args?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBfd"] = args?.tunnelInterfaceAllowBfd;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = args?.tunnelInterfaceAllowBfdVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = args?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = args?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = args?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = args?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = args?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = args?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = args?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = args?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = args?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = args?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = args?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = args?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = args?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = args?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = args?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = args?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = args?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = args?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = args?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = args?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = args?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = args?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = args?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = args?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = args?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = args?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = args?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = args?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = args?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = args?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceClearNetworkBroadcast"] = args?.tunnelInterfaceClearNetworkBroadcast;
            resourceInputs["tunnelInterfaceClearNetworkBroadcastVariable"] = args?.tunnelInterfaceClearNetworkBroadcastVariable;
            resourceInputs["tunnelInterfaceColor"] = args?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorVariable"] = args?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = args?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = args?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = args?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGroups"] = args?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = args?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = args?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = args?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = args?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = args?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = args?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = args?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = args?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = args?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = args?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = args?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = args?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = args?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfacePortHop"] = args?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = args?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceRestrict"] = args?.tunnelInterfaceRestrict;
            resourceInputs["tunnelInterfaceRestrictVariable"] = args?.tunnelInterfaceRestrictVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = args?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = args?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = args?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = args?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = args?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = args?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = args?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = args?.tunnelQosModeVariable;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportWanVpnInterfaceT1E1SerialFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportWanVpnInterfaceT1E1SerialFeature resources.
 */
export interface TransportWanVpnInterfaceT1E1SerialFeatureState {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Interface bandwidth capacity, in kbps
     *   - Range: `1`-`200000000`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    bandwidthVariable?: pulumi.Input<string>;
    /**
     * Set preference for interface Clock speed
     *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     */
    clockRate?: pulumi.Input<string>;
    /**
     * Variable name
     */
    clockRateVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`, `frame-relay`
     */
    encapsulation?: pulumi.Input<string>;
    /**
     * Variable name
     */
    encapsulationVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * Set ip mtu
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4AddressVariable?: pulumi.Input<string>;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4SubnetMaskVariable?: pulumi.Input<string>;
    /**
     * Assign IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * Interface MTU <68...2000>, in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    mtuVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     */
    perTunnelQosAggregator?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosAggregatorVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId?: pulumi.Input<string>;
    /**
     * Tunnel Interface
     *   - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    tunnelInterfaceClearNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceRestrictVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `spoke`, `hub`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransportWanVpnInterfaceT1E1SerialFeature resource.
 */
export interface TransportWanVpnInterfaceT1E1SerialFeatureArgs {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Interface bandwidth capacity, in kbps
     *   - Range: `1`-`200000000`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    bandwidthVariable?: pulumi.Input<string>;
    /**
     * Set preference for interface Clock speed
     *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     */
    clockRate?: pulumi.Input<string>;
    /**
     * Variable name
     */
    clockRateVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`, `frame-relay`
     */
    encapsulation?: pulumi.Input<string>;
    /**
     * Variable name
     */
    encapsulationVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * Set ip mtu
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4AddressVariable?: pulumi.Input<string>;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4SubnetMaskVariable?: pulumi.Input<string>;
    /**
     * Assign IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * Interface MTU <68...2000>, in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    mtuVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     */
    perTunnelQosAggregator?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosAggregatorVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: pulumi.Input<string>;
    /**
     * Tunnel Interface
     *   - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    tunnelInterfaceClearNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceRestrictVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `spoke`, `hub`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
}
