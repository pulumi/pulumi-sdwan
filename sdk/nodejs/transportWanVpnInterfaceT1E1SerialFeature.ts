// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport WAN VPN Interface T1 E1 Serial Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.TransportWanVpnInterfaceT1E1SerialFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 *     shutdown: true,
 *     interfaceName: "Serial0",
 *     ipv4Address: "1.2.3.4",
 *     ipv4SubnetMask: "0.0.0.0",
 *     ipv6Address: "2001:0:0:1::/64",
 *     bandwidth: 123456,
 *     bandwidthDownstream: 123456,
 *     clockRate: "1200",
 *     encapsulation: "ppp",
 *     tunnelInterface: true,
 *     perTunnelQos: true,
 *     perTunnelQosAggregator: false,
 *     tunnelQosMode: "hub",
 *     tunnelInterfaceColor: "mpls",
 *     tunnelInterfaceRestrict: true,
 *     tunnelInterfaceGroups: 42949672,
 *     tunnelInterfaceBorder: false,
 *     tunnelInterfaceMaxControlConnections: 62,
 *     tunnelInterfaceVbondAsStunServer: false,
 *     tunnelInterfaceExcludeControllerGroupLists: [2],
 *     tunnelInterfaceVmanageConnectionPreference: 8,
 *     tunnelInterfacePortHop: true,
 *     tunnelInterfaceLowBandwidthLink: false,
 *     tunnelInterfaceTunnelTcpMss: 1460,
 *     tunnelInterfaceClearDontFragment: false,
 *     tunnelInterfaceClearNetworkBroadcast: false,
 *     tunnelInterfaceCarrier: "default",
 *     tunnelInterfaceBindLoopbackTunnel: "example",
 *     tunnelInterfaceLastResortCircuit: false,
 *     tunnelInterfaceNatRefreshInterval: 5,
 *     tunnelInterfaceHelloInterval: 1000,
 *     tunnelInterfaceHelloTolerance: 12,
 *     tunnelInterfaceAllowAll: false,
 *     tunnelInterfaceAllowBgp: false,
 *     tunnelInterfaceAllowDhcp: true,
 *     tunnelInterfaceAllowDns: true,
 *     tunnelInterfaceAllowIcmp: true,
 *     tunnelInterfaceAllowNetconf: false,
 *     tunnelInterfaceAllowNtp: false,
 *     tunnelInterfaceAllowOspf: false,
 *     tunnelInterfaceAllowSsh: false,
 *     tunnelInterfaceAllowStun: false,
 *     tunnelInterfaceAllowHttps: true,
 *     tunnelInterfaceAllowSnmp: false,
 *     tunnelInterfaceAllowBfd: false,
 *     tunnelInterfaceEncapsulations: [{
 *         encapsulation: "gre",
 *         preference: 4294967,
 *         weight: 250,
 *     }],
 *     aclIpv4EgressFeatureId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     aclIpv6IngressFeatureId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     tcpMss: 1460,
 *     mtu: 1500,
 *     ipMtu: 1500,
 *     tlocExtension: "tloc",
 * });
 * ```
 *
 * ## Import
 *
 * Expected import identifier with the format: "transport_wan_vpn_interface_t1_e1_serial_feature_id,feature_profile_id,transport_wan_vpn_feature_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
 * ```
 */
export class TransportWanVpnInterfaceT1E1SerialFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportWanVpnInterfaceT1E1SerialFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportWanVpnInterfaceT1E1SerialFeatureState, opts?: pulumi.CustomResourceOptions): TransportWanVpnInterfaceT1E1SerialFeature {
        return new TransportWanVpnInterfaceT1E1SerialFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature';

    /**
     * Returns true if the given object is an instance of TransportWanVpnInterfaceT1E1SerialFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportWanVpnInterfaceT1E1SerialFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportWanVpnInterfaceT1E1SerialFeature.__pulumiType;
    }

    public readonly aclIpv4EgressFeatureId!: pulumi.Output<string | undefined>;
    public readonly aclIpv4IngressFeatureId!: pulumi.Output<string | undefined>;
    public readonly aclIpv6EgressFeatureId!: pulumi.Output<string | undefined>;
    public readonly aclIpv6IngressFeatureId!: pulumi.Output<string | undefined>;
    /**
     * Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
     */
    public readonly bandwidth!: pulumi.Output<number | undefined>;
    /**
     * Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     */
    public readonly bandwidthDownstream!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly bandwidthDownstreamVariable!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly bandwidthVariable!: pulumi.Output<string | undefined>;
    /**
     * Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
     * `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
     * `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     */
    public readonly clockRate!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly clockRateVariable!: pulumi.Output<string | undefined>;
    /**
     * The description of the Feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     */
    public readonly encapsulation!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly encapsulationVariable!: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    public readonly featureProfileId!: pulumi.Output<string>;
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     */
    public readonly interfaceName!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly interfaceNameVariable!: pulumi.Output<string | undefined>;
    /**
     * Set ip mtu - Range: `576`-`9216` - Default value: `1500`
     */
    public readonly ipMtu!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly ipMtuVariable!: pulumi.Output<string | undefined>;
    public readonly ipv4Address!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly ipv4AddressVariable!: pulumi.Output<string | undefined>;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    public readonly ipv4SubnetMask!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly ipv4SubnetMaskVariable!: pulumi.Output<string | undefined>;
    /**
     * Assign IPv6 address
     */
    public readonly ipv6Address!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly ipv6AddressVariable!: pulumi.Output<string | undefined>;
    /**
     * Interface MTU <68...2000>, in bytes - Range: `576`-`9216` - Default value: `1500`
     */
    public readonly mtu!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly mtuVariable!: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Per-tunnel Qos - Default value: `false`
     */
    public readonly perTunnelQos!: pulumi.Output<boolean | undefined>;
    /**
     * Per-tunnel QoS Aggregator - Default value: `false`
     */
    public readonly perTunnelQosAggregator!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly perTunnelQosAggregatorVariable!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly perTunnelQosVariable!: pulumi.Output<string | undefined>;
    /**
     * 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     */
    public readonly qosShapingRate!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly qosShapingRateVariable!: pulumi.Output<string | undefined>;
    /**
     * Administrative state - Default value: `true`
     */
    public readonly shutdown!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly shutdownVariable!: pulumi.Output<string | undefined>;
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     */
    public readonly tcpMss!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tcpMssVariable!: pulumi.Output<string | undefined>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    public readonly tlocExtension!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly tlocExtensionVariable!: pulumi.Output<string | undefined>;
    /**
     * Transport WAN VPN Feature ID
     */
    public readonly transportWanVpnFeatureId!: pulumi.Output<string | undefined>;
    /**
     * Tunnel Interface - Default value: `false`
     */
    public readonly tunnelInterface!: pulumi.Output<boolean | undefined>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     */
    public readonly tunnelInterfaceAllowAll!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowAllVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny BFD - Default value: `false`
     */
    public readonly tunnelInterfaceAllowBfd!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowBfdVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/deny BGP - Default value: `false`
     */
    public readonly tunnelInterfaceAllowBgp!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowBgpVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DHCP - Default value: `true`
     */
    public readonly tunnelInterfaceAllowDhcp!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowDhcpVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DNS - Default value: `true`
     */
    public readonly tunnelInterfaceAllowDns!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowDnsVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny Https - Default value: `true`
     */
    public readonly tunnelInterfaceAllowHttps!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowHttpsVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny ICMP - Default value: `true`
     */
    public readonly tunnelInterfaceAllowIcmp!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowIcmpVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NETCONF - Default value: `false`
     */
    public readonly tunnelInterfaceAllowNetconf!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowNetconfVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NTP - Default value: `false`
     */
    public readonly tunnelInterfaceAllowNtp!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowNtpVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny OSPF - Default value: `false`
     */
    public readonly tunnelInterfaceAllowOspf!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowOspfVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SNMP - Default value: `false`
     */
    public readonly tunnelInterfaceAllowSnmp!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowSnmpVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SSH - Default value: `false`
     */
    public readonly tunnelInterfaceAllowSsh!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowSshVariable!: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny STUN - Default value: `false`
     */
    public readonly tunnelInterfaceAllowStun!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceAllowStunVariable!: pulumi.Output<string | undefined>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    public readonly tunnelInterfaceBindLoopbackTunnel!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceBindLoopbackTunnelVariable!: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as border TLOC - Default value: `false`
     */
    public readonly tunnelInterfaceBorder!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceBorderVariable!: pulumi.Output<string | undefined>;
    /**
     * Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     */
    public readonly tunnelInterfaceCarrier!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceCarrierVariable!: pulumi.Output<string | undefined>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     */
    public readonly tunnelInterfaceClearDontFragment!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceClearDontFragmentVariable!: pulumi.Output<string | undefined>;
    /**
     * Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     */
    public readonly tunnelInterfaceClearNetworkBroadcast!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceClearNetworkBroadcastVariable!: pulumi.Output<string | undefined>;
    /**
     * Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     */
    public readonly tunnelInterfaceColor!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceColorVariable!: pulumi.Output<string | undefined>;
    /**
     * Encapsulation for TLOC
     */
    public readonly tunnelInterfaceEncapsulations!: pulumi.Output<outputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation[] | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceExcludeControllerGroupListVariable!: pulumi.Output<string | undefined>;
    /**
     * Exclude the following controller groups defined in this list
     */
    public readonly tunnelInterfaceExcludeControllerGroupLists!: pulumi.Output<number[] | undefined>;
    /**
     * List of groups - Range: `1`-`4294967295`
     */
    public readonly tunnelInterfaceGroups!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceGroupsVariable!: pulumi.Output<string | undefined>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds - Range: `100`-`600000` - Default value: `1000`
     */
    public readonly tunnelInterfaceHelloInterval!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceHelloIntervalVariable!: pulumi.Output<string | undefined>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds - Range: `12`-`6000` - Default value: `12`
     */
    public readonly tunnelInterfaceHelloTolerance!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceHelloToleranceVariable!: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as last resort - Default value: `false`
     */
    public readonly tunnelInterfaceLastResortCircuit!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceLastResortCircuitVariable!: pulumi.Output<string | undefined>;
    /**
     * Set the interface as a low-bandwidth circuit - Default value: `false`
     */
    public readonly tunnelInterfaceLowBandwidthLink!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceLowBandwidthLinkVariable!: pulumi.Output<string | undefined>;
    /**
     * Set the maximum number of control connections for this TLOC - Range: `0`-`100`
     */
    public readonly tunnelInterfaceMaxControlConnections!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceMaxControlConnectionsVariable!: pulumi.Output<string | undefined>;
    /**
     * Set time period of nat refresh packets <1...60> seconds - Range: `1`-`60` - Default value: `5`
     */
    public readonly tunnelInterfaceNatRefreshInterval!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceNatRefreshIntervalVariable!: pulumi.Output<string | undefined>;
    /**
     * Disallow port hopping on the tunnel interface - Default value: `true`
     */
    public readonly tunnelInterfacePortHop!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfacePortHopVariable!: pulumi.Output<string | undefined>;
    /**
     * Restrict this TLOC behavior - Default value: `false`
     */
    public readonly tunnelInterfaceRestrict!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceRestrictVariable!: pulumi.Output<string | undefined>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     */
    public readonly tunnelInterfaceTunnelTcpMss!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceTunnelTcpMssVariable!: pulumi.Output<string | undefined>;
    /**
     * Put this wan interface in STUN mode only - Default value: `false`
     */
    public readonly tunnelInterfaceVbondAsStunServer!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceVbondAsStunServerVariable!: pulumi.Output<string | undefined>;
    /**
     * Set interface preference for control connection to vManage <0..8> - Range: `0`-`8` - Default value: `5`
     */
    public readonly tunnelInterfaceVmanageConnectionPreference!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelInterfaceVmanageConnectionPreferenceVariable!: pulumi.Output<string | undefined>;
    /**
     * Set tunnel QoS mode - Choices: `spoke`, `hub`
     */
    public readonly tunnelQosMode!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly tunnelQosModeVariable!: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a TransportWanVpnInterfaceT1E1SerialFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportWanVpnInterfaceT1E1SerialFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportWanVpnInterfaceT1E1SerialFeatureArgs | TransportWanVpnInterfaceT1E1SerialFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportWanVpnInterfaceT1E1SerialFeatureState | undefined;
            resourceInputs["aclIpv4EgressFeatureId"] = state ? state.aclIpv4EgressFeatureId : undefined;
            resourceInputs["aclIpv4IngressFeatureId"] = state ? state.aclIpv4IngressFeatureId : undefined;
            resourceInputs["aclIpv6EgressFeatureId"] = state ? state.aclIpv6EgressFeatureId : undefined;
            resourceInputs["aclIpv6IngressFeatureId"] = state ? state.aclIpv6IngressFeatureId : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["bandwidthDownstream"] = state ? state.bandwidthDownstream : undefined;
            resourceInputs["bandwidthDownstreamVariable"] = state ? state.bandwidthDownstreamVariable : undefined;
            resourceInputs["bandwidthVariable"] = state ? state.bandwidthVariable : undefined;
            resourceInputs["clockRate"] = state ? state.clockRate : undefined;
            resourceInputs["clockRateVariable"] = state ? state.clockRateVariable : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encapsulation"] = state ? state.encapsulation : undefined;
            resourceInputs["encapsulationVariable"] = state ? state.encapsulationVariable : undefined;
            resourceInputs["featureProfileId"] = state ? state.featureProfileId : undefined;
            resourceInputs["interfaceName"] = state ? state.interfaceName : undefined;
            resourceInputs["interfaceNameVariable"] = state ? state.interfaceNameVariable : undefined;
            resourceInputs["ipMtu"] = state ? state.ipMtu : undefined;
            resourceInputs["ipMtuVariable"] = state ? state.ipMtuVariable : undefined;
            resourceInputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            resourceInputs["ipv4AddressVariable"] = state ? state.ipv4AddressVariable : undefined;
            resourceInputs["ipv4SubnetMask"] = state ? state.ipv4SubnetMask : undefined;
            resourceInputs["ipv4SubnetMaskVariable"] = state ? state.ipv4SubnetMaskVariable : undefined;
            resourceInputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            resourceInputs["ipv6AddressVariable"] = state ? state.ipv6AddressVariable : undefined;
            resourceInputs["mtu"] = state ? state.mtu : undefined;
            resourceInputs["mtuVariable"] = state ? state.mtuVariable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["perTunnelQos"] = state ? state.perTunnelQos : undefined;
            resourceInputs["perTunnelQosAggregator"] = state ? state.perTunnelQosAggregator : undefined;
            resourceInputs["perTunnelQosAggregatorVariable"] = state ? state.perTunnelQosAggregatorVariable : undefined;
            resourceInputs["perTunnelQosVariable"] = state ? state.perTunnelQosVariable : undefined;
            resourceInputs["qosShapingRate"] = state ? state.qosShapingRate : undefined;
            resourceInputs["qosShapingRateVariable"] = state ? state.qosShapingRateVariable : undefined;
            resourceInputs["shutdown"] = state ? state.shutdown : undefined;
            resourceInputs["shutdownVariable"] = state ? state.shutdownVariable : undefined;
            resourceInputs["tcpMss"] = state ? state.tcpMss : undefined;
            resourceInputs["tcpMssVariable"] = state ? state.tcpMssVariable : undefined;
            resourceInputs["tlocExtension"] = state ? state.tlocExtension : undefined;
            resourceInputs["tlocExtensionVariable"] = state ? state.tlocExtensionVariable : undefined;
            resourceInputs["transportWanVpnFeatureId"] = state ? state.transportWanVpnFeatureId : undefined;
            resourceInputs["tunnelInterface"] = state ? state.tunnelInterface : undefined;
            resourceInputs["tunnelInterfaceAllowAll"] = state ? state.tunnelInterfaceAllowAll : undefined;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = state ? state.tunnelInterfaceAllowAllVariable : undefined;
            resourceInputs["tunnelInterfaceAllowBfd"] = state ? state.tunnelInterfaceAllowBfd : undefined;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = state ? state.tunnelInterfaceAllowBfdVariable : undefined;
            resourceInputs["tunnelInterfaceAllowBgp"] = state ? state.tunnelInterfaceAllowBgp : undefined;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = state ? state.tunnelInterfaceAllowBgpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowDhcp"] = state ? state.tunnelInterfaceAllowDhcp : undefined;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = state ? state.tunnelInterfaceAllowDhcpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowDns"] = state ? state.tunnelInterfaceAllowDns : undefined;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = state ? state.tunnelInterfaceAllowDnsVariable : undefined;
            resourceInputs["tunnelInterfaceAllowHttps"] = state ? state.tunnelInterfaceAllowHttps : undefined;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = state ? state.tunnelInterfaceAllowHttpsVariable : undefined;
            resourceInputs["tunnelInterfaceAllowIcmp"] = state ? state.tunnelInterfaceAllowIcmp : undefined;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = state ? state.tunnelInterfaceAllowIcmpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowNetconf"] = state ? state.tunnelInterfaceAllowNetconf : undefined;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = state ? state.tunnelInterfaceAllowNetconfVariable : undefined;
            resourceInputs["tunnelInterfaceAllowNtp"] = state ? state.tunnelInterfaceAllowNtp : undefined;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = state ? state.tunnelInterfaceAllowNtpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowOspf"] = state ? state.tunnelInterfaceAllowOspf : undefined;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = state ? state.tunnelInterfaceAllowOspfVariable : undefined;
            resourceInputs["tunnelInterfaceAllowSnmp"] = state ? state.tunnelInterfaceAllowSnmp : undefined;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = state ? state.tunnelInterfaceAllowSnmpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowSsh"] = state ? state.tunnelInterfaceAllowSsh : undefined;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = state ? state.tunnelInterfaceAllowSshVariable : undefined;
            resourceInputs["tunnelInterfaceAllowStun"] = state ? state.tunnelInterfaceAllowStun : undefined;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = state ? state.tunnelInterfaceAllowStunVariable : undefined;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = state ? state.tunnelInterfaceBindLoopbackTunnel : undefined;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = state ? state.tunnelInterfaceBindLoopbackTunnelVariable : undefined;
            resourceInputs["tunnelInterfaceBorder"] = state ? state.tunnelInterfaceBorder : undefined;
            resourceInputs["tunnelInterfaceBorderVariable"] = state ? state.tunnelInterfaceBorderVariable : undefined;
            resourceInputs["tunnelInterfaceCarrier"] = state ? state.tunnelInterfaceCarrier : undefined;
            resourceInputs["tunnelInterfaceCarrierVariable"] = state ? state.tunnelInterfaceCarrierVariable : undefined;
            resourceInputs["tunnelInterfaceClearDontFragment"] = state ? state.tunnelInterfaceClearDontFragment : undefined;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = state ? state.tunnelInterfaceClearDontFragmentVariable : undefined;
            resourceInputs["tunnelInterfaceClearNetworkBroadcast"] = state ? state.tunnelInterfaceClearNetworkBroadcast : undefined;
            resourceInputs["tunnelInterfaceClearNetworkBroadcastVariable"] = state ? state.tunnelInterfaceClearNetworkBroadcastVariable : undefined;
            resourceInputs["tunnelInterfaceColor"] = state ? state.tunnelInterfaceColor : undefined;
            resourceInputs["tunnelInterfaceColorVariable"] = state ? state.tunnelInterfaceColorVariable : undefined;
            resourceInputs["tunnelInterfaceEncapsulations"] = state ? state.tunnelInterfaceEncapsulations : undefined;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = state ? state.tunnelInterfaceExcludeControllerGroupListVariable : undefined;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = state ? state.tunnelInterfaceExcludeControllerGroupLists : undefined;
            resourceInputs["tunnelInterfaceGroups"] = state ? state.tunnelInterfaceGroups : undefined;
            resourceInputs["tunnelInterfaceGroupsVariable"] = state ? state.tunnelInterfaceGroupsVariable : undefined;
            resourceInputs["tunnelInterfaceHelloInterval"] = state ? state.tunnelInterfaceHelloInterval : undefined;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = state ? state.tunnelInterfaceHelloIntervalVariable : undefined;
            resourceInputs["tunnelInterfaceHelloTolerance"] = state ? state.tunnelInterfaceHelloTolerance : undefined;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = state ? state.tunnelInterfaceHelloToleranceVariable : undefined;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = state ? state.tunnelInterfaceLastResortCircuit : undefined;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = state ? state.tunnelInterfaceLastResortCircuitVariable : undefined;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = state ? state.tunnelInterfaceLowBandwidthLink : undefined;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = state ? state.tunnelInterfaceLowBandwidthLinkVariable : undefined;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = state ? state.tunnelInterfaceMaxControlConnections : undefined;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = state ? state.tunnelInterfaceMaxControlConnectionsVariable : undefined;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = state ? state.tunnelInterfaceNatRefreshInterval : undefined;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = state ? state.tunnelInterfaceNatRefreshIntervalVariable : undefined;
            resourceInputs["tunnelInterfacePortHop"] = state ? state.tunnelInterfacePortHop : undefined;
            resourceInputs["tunnelInterfacePortHopVariable"] = state ? state.tunnelInterfacePortHopVariable : undefined;
            resourceInputs["tunnelInterfaceRestrict"] = state ? state.tunnelInterfaceRestrict : undefined;
            resourceInputs["tunnelInterfaceRestrictVariable"] = state ? state.tunnelInterfaceRestrictVariable : undefined;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = state ? state.tunnelInterfaceTunnelTcpMss : undefined;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = state ? state.tunnelInterfaceTunnelTcpMssVariable : undefined;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = state ? state.tunnelInterfaceVbondAsStunServer : undefined;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = state ? state.tunnelInterfaceVbondAsStunServerVariable : undefined;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = state ? state.tunnelInterfaceVmanageConnectionPreference : undefined;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = state ? state.tunnelInterfaceVmanageConnectionPreferenceVariable : undefined;
            resourceInputs["tunnelQosMode"] = state ? state.tunnelQosMode : undefined;
            resourceInputs["tunnelQosModeVariable"] = state ? state.tunnelQosModeVariable : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TransportWanVpnInterfaceT1E1SerialFeatureArgs | undefined;
            if ((!args || args.featureProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["aclIpv4EgressFeatureId"] = args ? args.aclIpv4EgressFeatureId : undefined;
            resourceInputs["aclIpv4IngressFeatureId"] = args ? args.aclIpv4IngressFeatureId : undefined;
            resourceInputs["aclIpv6EgressFeatureId"] = args ? args.aclIpv6EgressFeatureId : undefined;
            resourceInputs["aclIpv6IngressFeatureId"] = args ? args.aclIpv6IngressFeatureId : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["bandwidthDownstream"] = args ? args.bandwidthDownstream : undefined;
            resourceInputs["bandwidthDownstreamVariable"] = args ? args.bandwidthDownstreamVariable : undefined;
            resourceInputs["bandwidthVariable"] = args ? args.bandwidthVariable : undefined;
            resourceInputs["clockRate"] = args ? args.clockRate : undefined;
            resourceInputs["clockRateVariable"] = args ? args.clockRateVariable : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encapsulation"] = args ? args.encapsulation : undefined;
            resourceInputs["encapsulationVariable"] = args ? args.encapsulationVariable : undefined;
            resourceInputs["featureProfileId"] = args ? args.featureProfileId : undefined;
            resourceInputs["interfaceName"] = args ? args.interfaceName : undefined;
            resourceInputs["interfaceNameVariable"] = args ? args.interfaceNameVariable : undefined;
            resourceInputs["ipMtu"] = args ? args.ipMtu : undefined;
            resourceInputs["ipMtuVariable"] = args ? args.ipMtuVariable : undefined;
            resourceInputs["ipv4Address"] = args ? args.ipv4Address : undefined;
            resourceInputs["ipv4AddressVariable"] = args ? args.ipv4AddressVariable : undefined;
            resourceInputs["ipv4SubnetMask"] = args ? args.ipv4SubnetMask : undefined;
            resourceInputs["ipv4SubnetMaskVariable"] = args ? args.ipv4SubnetMaskVariable : undefined;
            resourceInputs["ipv6Address"] = args ? args.ipv6Address : undefined;
            resourceInputs["ipv6AddressVariable"] = args ? args.ipv6AddressVariable : undefined;
            resourceInputs["mtu"] = args ? args.mtu : undefined;
            resourceInputs["mtuVariable"] = args ? args.mtuVariable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["perTunnelQos"] = args ? args.perTunnelQos : undefined;
            resourceInputs["perTunnelQosAggregator"] = args ? args.perTunnelQosAggregator : undefined;
            resourceInputs["perTunnelQosAggregatorVariable"] = args ? args.perTunnelQosAggregatorVariable : undefined;
            resourceInputs["perTunnelQosVariable"] = args ? args.perTunnelQosVariable : undefined;
            resourceInputs["qosShapingRate"] = args ? args.qosShapingRate : undefined;
            resourceInputs["qosShapingRateVariable"] = args ? args.qosShapingRateVariable : undefined;
            resourceInputs["shutdown"] = args ? args.shutdown : undefined;
            resourceInputs["shutdownVariable"] = args ? args.shutdownVariable : undefined;
            resourceInputs["tcpMss"] = args ? args.tcpMss : undefined;
            resourceInputs["tcpMssVariable"] = args ? args.tcpMssVariable : undefined;
            resourceInputs["tlocExtension"] = args ? args.tlocExtension : undefined;
            resourceInputs["tlocExtensionVariable"] = args ? args.tlocExtensionVariable : undefined;
            resourceInputs["transportWanVpnFeatureId"] = args ? args.transportWanVpnFeatureId : undefined;
            resourceInputs["tunnelInterface"] = args ? args.tunnelInterface : undefined;
            resourceInputs["tunnelInterfaceAllowAll"] = args ? args.tunnelInterfaceAllowAll : undefined;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = args ? args.tunnelInterfaceAllowAllVariable : undefined;
            resourceInputs["tunnelInterfaceAllowBfd"] = args ? args.tunnelInterfaceAllowBfd : undefined;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = args ? args.tunnelInterfaceAllowBfdVariable : undefined;
            resourceInputs["tunnelInterfaceAllowBgp"] = args ? args.tunnelInterfaceAllowBgp : undefined;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = args ? args.tunnelInterfaceAllowBgpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowDhcp"] = args ? args.tunnelInterfaceAllowDhcp : undefined;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = args ? args.tunnelInterfaceAllowDhcpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowDns"] = args ? args.tunnelInterfaceAllowDns : undefined;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = args ? args.tunnelInterfaceAllowDnsVariable : undefined;
            resourceInputs["tunnelInterfaceAllowHttps"] = args ? args.tunnelInterfaceAllowHttps : undefined;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = args ? args.tunnelInterfaceAllowHttpsVariable : undefined;
            resourceInputs["tunnelInterfaceAllowIcmp"] = args ? args.tunnelInterfaceAllowIcmp : undefined;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = args ? args.tunnelInterfaceAllowIcmpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowNetconf"] = args ? args.tunnelInterfaceAllowNetconf : undefined;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = args ? args.tunnelInterfaceAllowNetconfVariable : undefined;
            resourceInputs["tunnelInterfaceAllowNtp"] = args ? args.tunnelInterfaceAllowNtp : undefined;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = args ? args.tunnelInterfaceAllowNtpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowOspf"] = args ? args.tunnelInterfaceAllowOspf : undefined;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = args ? args.tunnelInterfaceAllowOspfVariable : undefined;
            resourceInputs["tunnelInterfaceAllowSnmp"] = args ? args.tunnelInterfaceAllowSnmp : undefined;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = args ? args.tunnelInterfaceAllowSnmpVariable : undefined;
            resourceInputs["tunnelInterfaceAllowSsh"] = args ? args.tunnelInterfaceAllowSsh : undefined;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = args ? args.tunnelInterfaceAllowSshVariable : undefined;
            resourceInputs["tunnelInterfaceAllowStun"] = args ? args.tunnelInterfaceAllowStun : undefined;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = args ? args.tunnelInterfaceAllowStunVariable : undefined;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = args ? args.tunnelInterfaceBindLoopbackTunnel : undefined;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = args ? args.tunnelInterfaceBindLoopbackTunnelVariable : undefined;
            resourceInputs["tunnelInterfaceBorder"] = args ? args.tunnelInterfaceBorder : undefined;
            resourceInputs["tunnelInterfaceBorderVariable"] = args ? args.tunnelInterfaceBorderVariable : undefined;
            resourceInputs["tunnelInterfaceCarrier"] = args ? args.tunnelInterfaceCarrier : undefined;
            resourceInputs["tunnelInterfaceCarrierVariable"] = args ? args.tunnelInterfaceCarrierVariable : undefined;
            resourceInputs["tunnelInterfaceClearDontFragment"] = args ? args.tunnelInterfaceClearDontFragment : undefined;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = args ? args.tunnelInterfaceClearDontFragmentVariable : undefined;
            resourceInputs["tunnelInterfaceClearNetworkBroadcast"] = args ? args.tunnelInterfaceClearNetworkBroadcast : undefined;
            resourceInputs["tunnelInterfaceClearNetworkBroadcastVariable"] = args ? args.tunnelInterfaceClearNetworkBroadcastVariable : undefined;
            resourceInputs["tunnelInterfaceColor"] = args ? args.tunnelInterfaceColor : undefined;
            resourceInputs["tunnelInterfaceColorVariable"] = args ? args.tunnelInterfaceColorVariable : undefined;
            resourceInputs["tunnelInterfaceEncapsulations"] = args ? args.tunnelInterfaceEncapsulations : undefined;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = args ? args.tunnelInterfaceExcludeControllerGroupListVariable : undefined;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = args ? args.tunnelInterfaceExcludeControllerGroupLists : undefined;
            resourceInputs["tunnelInterfaceGroups"] = args ? args.tunnelInterfaceGroups : undefined;
            resourceInputs["tunnelInterfaceGroupsVariable"] = args ? args.tunnelInterfaceGroupsVariable : undefined;
            resourceInputs["tunnelInterfaceHelloInterval"] = args ? args.tunnelInterfaceHelloInterval : undefined;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = args ? args.tunnelInterfaceHelloIntervalVariable : undefined;
            resourceInputs["tunnelInterfaceHelloTolerance"] = args ? args.tunnelInterfaceHelloTolerance : undefined;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = args ? args.tunnelInterfaceHelloToleranceVariable : undefined;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = args ? args.tunnelInterfaceLastResortCircuit : undefined;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = args ? args.tunnelInterfaceLastResortCircuitVariable : undefined;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = args ? args.tunnelInterfaceLowBandwidthLink : undefined;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = args ? args.tunnelInterfaceLowBandwidthLinkVariable : undefined;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = args ? args.tunnelInterfaceMaxControlConnections : undefined;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = args ? args.tunnelInterfaceMaxControlConnectionsVariable : undefined;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = args ? args.tunnelInterfaceNatRefreshInterval : undefined;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = args ? args.tunnelInterfaceNatRefreshIntervalVariable : undefined;
            resourceInputs["tunnelInterfacePortHop"] = args ? args.tunnelInterfacePortHop : undefined;
            resourceInputs["tunnelInterfacePortHopVariable"] = args ? args.tunnelInterfacePortHopVariable : undefined;
            resourceInputs["tunnelInterfaceRestrict"] = args ? args.tunnelInterfaceRestrict : undefined;
            resourceInputs["tunnelInterfaceRestrictVariable"] = args ? args.tunnelInterfaceRestrictVariable : undefined;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = args ? args.tunnelInterfaceTunnelTcpMss : undefined;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = args ? args.tunnelInterfaceTunnelTcpMssVariable : undefined;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = args ? args.tunnelInterfaceVbondAsStunServer : undefined;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = args ? args.tunnelInterfaceVbondAsStunServerVariable : undefined;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = args ? args.tunnelInterfaceVmanageConnectionPreference : undefined;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = args ? args.tunnelInterfaceVmanageConnectionPreferenceVariable : undefined;
            resourceInputs["tunnelQosMode"] = args ? args.tunnelQosMode : undefined;
            resourceInputs["tunnelQosModeVariable"] = args ? args.tunnelQosModeVariable : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportWanVpnInterfaceT1E1SerialFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportWanVpnInterfaceT1E1SerialFeature resources.
 */
export interface TransportWanVpnInterfaceT1E1SerialFeatureState {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    bandwidthVariable?: pulumi.Input<string>;
    /**
     * Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
     * `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
     * `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     */
    clockRate?: pulumi.Input<string>;
    /**
     * Variable name
     */
    clockRateVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     */
    encapsulation?: pulumi.Input<string>;
    /**
     * Variable name
     */
    encapsulationVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * Set ip mtu - Range: `576`-`9216` - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4AddressVariable?: pulumi.Input<string>;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4SubnetMaskVariable?: pulumi.Input<string>;
    /**
     * Assign IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * Interface MTU <68...2000>, in bytes - Range: `576`-`9216` - Default value: `1500`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    mtuVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Per-tunnel QoS Aggregator - Default value: `false`
     */
    perTunnelQosAggregator?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosAggregatorVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId?: pulumi.Input<string>;
    /**
     * Tunnel Interface - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     */
    tunnelInterfaceClearNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds - Range: `100`-`600000` - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds - Range: `12`-`6000` - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds - Range: `1`-`60` - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior - Default value: `false`
     */
    tunnelInterfaceRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceRestrictVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8> - Range: `0`-`8` - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode - Choices: `spoke`, `hub`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransportWanVpnInterfaceT1E1SerialFeature resource.
 */
export interface TransportWanVpnInterfaceT1E1SerialFeatureArgs {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    bandwidthVariable?: pulumi.Input<string>;
    /**
     * Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
     * `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
     * `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     */
    clockRate?: pulumi.Input<string>;
    /**
     * Variable name
     */
    clockRateVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     */
    encapsulation?: pulumi.Input<string>;
    /**
     * Variable name
     */
    encapsulationVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * Set ip mtu - Range: `576`-`9216` - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    ipv4Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4AddressVariable?: pulumi.Input<string>;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4SubnetMaskVariable?: pulumi.Input<string>;
    /**
     * Assign IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * Interface MTU <68...2000>, in bytes - Range: `576`-`9216` - Default value: `1500`
     */
    mtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    mtuVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Per-tunnel QoS Aggregator - Default value: `false`
     */
    perTunnelQosAggregator?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosAggregatorVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId?: pulumi.Input<string>;
    /**
     * Tunnel Interface - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     */
    tunnelInterfaceClearNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds - Range: `100`-`600000` - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds - Range: `12`-`6000` - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds - Range: `1`-`60` - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior - Default value: `false`
     */
    tunnelInterfaceRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceRestrictVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8> - Range: `0`-`8` - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode - Choices: `spoke`, `hub`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
}
