// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AllowUrlListPolicyObjectEntry {
    /**
     * URL
     */
    url?: string;
}

export interface AppProbeClassPolicyObjectMapping {
    /**
     * Color
     *   - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
     */
    color: string;
    /**
     * DSCP
     *   - Range: `0`-`63`
     */
    dscp?: number;
}

export interface ApplicationAwareRoutingPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry[];
    /**
     * Sequence ID
     */
    id: number;
    /**
     * Sequence IP type, either `ipv4`, `ipv6` or `all`
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    ipType?: string;
    /**
     * List of match entries
     */
    matchEntries?: outputs.ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface ApplicationAwareRoutingPolicyDefinitionSequenceActionEntry {
    /**
     * Backup SLA preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `backupSlaPreferredColor`
     */
    backupSlaPreferredColor?: string;
    /**
     * Cloud SLA, Attribute conditional on `type` being equal to `cloudSaas`
     */
    cloudSla?: boolean;
    /**
     * Counter name, Attribute conditional on `type` being equal to `count`
     */
    counter?: string;
    /**
     * Enable logging, Attribute conditional on `type` being equal to `log`
     */
    log?: boolean;
    /**
     * List of SLA class parameters, Attribute conditional on `type` being equal to `slaClass`
     */
    slaClassParameters?: outputs.ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter[];
    /**
     * Type of action entry
     *   - Choices: `backupSlaPreferredColor`, `count`, `log`, `slaClass`, `cloudSaas`
     */
    type: string;
}

export interface ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter {
    /**
     * preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
     */
    preferredColor?: string;
    /**
     * Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     */
    preferredColorGroupList?: string;
    /**
     * Preferred color group list version
     */
    preferredColorGroupListVersion?: number;
    /**
     * SLA class list ID, Attribute conditional on `type` being equal to `name`
     */
    slaClassList?: string;
    /**
     * SLA class list version
     */
    slaClassListVersion?: number;
    /**
     * Type of SLA class parameter
     *   - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
     */
    type: string;
}

export interface ApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry {
    /**
     * Application list ID, Attribute conditional on `type` being equal to `appList`
     */
    applicationListId?: string;
    /**
     * Application list version
     */
    applicationListVersion?: number;
    /**
     * Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     */
    destinationDataPrefixListId?: string;
    /**
     * Destination Data Prefix list version
     */
    destinationDataPrefixListVersion?: number;
    /**
     * Destination IP, Attribute conditional on `type` being equal to `destinationIp`
     */
    destinationIp?: string;
    /**
     * Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
     */
    destinationPort?: string;
    /**
     * Destination region, Attribute conditional on `type` being equal to `destinationRegion`
     *   - Choices: `primary-region`, `secondary-region`, `other-region`
     */
    destinationRegion?: string;
    /**
     * DNS request or response, Attribute conditional on `type` being equal to `dns`
     *   - Choices: `request`, `response`
     */
    dns?: string;
    /**
     * DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
     */
    dnsApplicationListId?: string;
    /**
     * DNS Application list version
     */
    dnsApplicationListVersion?: number;
    /**
     * DSCP value, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     */
    dscp?: number;
    /**
     * ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     */
    icmpMessage?: string;
    /**
     * PLP, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `low`, `high`
     */
    plp?: string;
    /**
     * IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
     */
    protocol?: string;
    /**
     * Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     */
    sourceDataPrefixListId?: string;
    /**
     * Source Data Prefix list version
     */
    sourceDataPrefixListVersion?: number;
    /**
     * Source IP, Attribute conditional on `type` being equal to `sourceIp`
     */
    sourceIp?: string;
    /**
     * Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
     */
    sourcePort?: string;
    /**
     * Traffic to, Attribute conditional on `type` being equal to `trafficTo`
     *   - Choices: `access`, `core`, `service`
     */
    trafficTo?: string;
    /**
     * Type of match entry
     *   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `trafficTo`, `icmpMessage`
     */
    type: string;
}

export interface ApplicationListPolicyObjectEntry {
    /**
     * Application name
     */
    application?: string;
    /**
     * Application family name
     */
    applicationFamily?: string;
}

export interface ApplicationPriorityQosPolicyQosScheduler {
    /**
     * bandwidthPercent
     */
    bandwidth?: string;
    /**
     * drops
     */
    drops?: string;
    forwardingClassId?: string;
    /**
     * queue
     */
    queue?: string;
    /**
     * scheduling
     */
    schedulingType?: string;
}

export interface ApplicationPriorityTrafficPolicyPolicySequence {
    actions?: outputs.ApplicationPriorityTrafficPolicyPolicySequenceAction[];
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     */
    baseAction?: string;
    matchEntries?: outputs.ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry[];
    /**
     * Sequence IP Type
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    protocol?: string;
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    sequenceId?: number;
    /**
     * Sequence Name
     */
    sequenceName?: string;
}

export interface ApplicationPriorityTrafficPolicyPolicySequenceAction {
    /**
     * Backup SLA perferred color
     */
    backupSlaPreferredColors?: string[];
    cloudProbe?: boolean;
    cloudSaas?: boolean;
    count?: string;
    fallbackToRouting?: boolean;
    log?: boolean;
    /**
     * - Range: `1`-`5`
     */
    lossCorrectFecThreshold?: number;
    /**
     * - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     */
    lossCorrectType?: string;
    natBypass?: boolean;
    natDiaInterfaces?: string[];
    natDiaPools?: number[];
    natFallback?: boolean;
    /**
     * - Range: `1`-`31`
     */
    natPool?: number;
    natVpn?: boolean;
    /**
     * - Choices: `ipAddress`, `redirectDns`
     */
    redirectDnsField?: string;
    redirectDnsValue?: string;
    secureInternetGateway?: boolean;
    setParameters?: outputs.ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter[];
    /**
     * slaClass
     */
    slaClasses?: outputs.ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass[];
}

export interface ApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter {
    /**
     * - Range: `0`-`63`
     */
    dscp?: number;
    forwardingClassListId?: string;
    localTlocListColors?: string[];
    /**
     * - Choices: `ipsec`, `gre`
     */
    localTlocListEncapsulation?: string;
    localTlocListRestrict?: string;
    nextHopIpv4?: string;
    nextHopIpv6?: string;
    nextHopLoose?: boolean;
    policerId?: string;
    preferredColorGroupId?: string;
    preferredRemoteColorIds?: string[];
    preferredRemoteColorRestrict?: string;
    serviceChainFallbackToRouting?: boolean;
    serviceChainLocal?: boolean;
    serviceChainTlocColors?: string[];
    /**
     * - Choices: `ipsec`, `gre`
     */
    serviceChainTlocEncapsulation?: string;
    serviceChainTlocIp?: string;
    serviceChainTlocListId?: string;
    /**
     * - Choices: `SC1`, `SC2`, `SC4`, `SC5`, `SC6`, `SC7`, `SC8`, `SC9`, `SC10`, `SC11`, `SC12`, `SC13`, `SC14`, `SC15`, `SC16`
     */
    serviceChainType?: string;
    /**
     * - Range: `0`-`65530`
     */
    serviceChainVpn?: number;
    serviceTlocColors?: string[];
    /**
     * - Choices: `ipsec`, `gre`
     */
    serviceTlocEncapsulation?: string;
    serviceTlocIp?: string;
    serviceTlocListId?: string;
    /**
     * - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `appqoe`
     */
    serviceType?: string;
    serviceVpn?: string;
    tlocColors?: string[];
    /**
     * - Choices: `ipsec`, `gre`
     */
    tlocEncapsulation?: string;
    tlocIp?: string;
    tlocListId?: string;
    vpn?: string;
}

export interface ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass {
    fallbackToBestPath?: boolean;
    preferredColorGroupListId?: string;
    preferredColors?: string[];
    preferredRemoteColors?: string[];
    remoteColorRestrict?: boolean;
    slaClassListId?: string;
    strict?: boolean;
}

export interface ApplicationPriorityTrafficPolicyPolicySequenceMatchEntry {
    applicationListId?: string;
    destinationDataIpv4PrefixListId?: string;
    destinationDataIpv6PrefixListId?: string;
    /**
     * Destination Data IP Prefix
     */
    destinationIpv4Prefix?: string;
    /**
     * Destination Data IP Prefix
     */
    destinationIpv6Prefix?: string;
    /**
     * Destination Port (0-65535) range or individual number separated by space
     */
    destinationPorts?: string[];
    /**
     * Destination Region
     *   - Choices: `primary-region`, `secondary-region`, `other-region`
     */
    destinationRegion?: string;
    /**
     * Dns
     *   - Choices: `request`, `response`
     */
    dns?: string;
    dnsApplicationListId?: string;
    /**
     * DSCP number
     *   - Range: `0`-`63`
     */
    dscp?: number;
    /**
     * ICMP6 Message
     */
    icmp6Messages?: string[];
    /**
     * ICMP Message
     */
    icmpMessages?: string[];
    /**
     * Packet Length
     */
    packetLength?: string;
    /**
     * protocol (0-255) range or individual number separated by space
     */
    protocols?: string[];
    saasApplicationListId?: string;
    /**
     * M365 Service Area
     */
    serviceAreas?: string[];
    sourceDataIpv4PrefxListId?: string;
    sourceDataIpv6PrefxListId?: string;
    /**
     * Source Data IP Prefix
     */
    sourceIpv4Prefix?: string;
    /**
     * Source Data IP Prefix
     */
    sourceIpv6Prefix?: string;
    /**
     * Source Port (0-65535) range or individual number separated by space
     */
    sourcePorts?: string[];
    /**
     * TCP States
     *   - Choices: `syn`
     */
    tcp?: string;
    /**
     * M365 Traffic Category
     *   - Choices: `optimize-allow`, `optimize`, `all`
     */
    trafficCategory?: string;
    /**
     * Traffic Class
     *   - Choices: `gold-voip-telephony`, `gold-broadcast-video`, `gold-real-time-interactive`, `gold-multimedia-conferencing`, `gold-multimedia-streaming`, `gold-network-control`, `gold-signaling`, `gold-ops-admin-mgmt`, `gold-transactional-data`, `gold-bulk-data`, `silver`, `bronze`
     */
    trafficClass?: string;
    /**
     * Traffic to
     *   - Choices: `core`, `service`, `access`
     */
    trafficTo?: string;
}

export interface AsPathListPolicyObjectEntry {
    /**
     * Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
     */
    asPath: string;
}

export interface AttachFeatureDeviceTemplateDevice {
    /**
     * Device ID
     */
    id: string;
    /**
     * Device variables
     */
    variables: {[key: string]: string};
}

export interface BlockUrlListPolicyObjectEntry {
    /**
     * URL
     */
    url?: string;
}

export interface CedgeAaaFeatureTemplateAccountingRule {
    /**
     * Comma separated list of groups
     */
    groups?: string;
    /**
     * Configure Accounting Method
     *   - Choices: `commands`, `exec`, `network`, `system`
     */
    method?: string;
    /**
     * Configure Accounting Rule ID
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Privilege level when method is commands
     *   - Choices: `1`, `15`
     */
    privilegeLevel?: string;
    /**
     * Record start and stop without waiting
     *   - Default value: `true`
     */
    startStop?: boolean;
    /**
     * Variable name
     */
    startStopVariable?: string;
}

export interface CedgeAaaFeatureTemplateAuthorizationRule {
    /**
     * Succeed if user has authenticated
     *   - Default value: `false`
     */
    authenticated?: boolean;
    /**
     * Comma separated list of groups
     */
    groups?: string;
    /**
     * Method
     *   - Choices: `commands`
     */
    method?: string;
    /**
     * Configure Authorization Rule ID
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Privilege level when method is commands
     *   - Choices: `1`, `15`
     */
    privilegeLevel?: string;
}

export interface CedgeAaaFeatureTemplateRadiusClient {
    /**
     * Client IP
     */
    clientIp?: string;
    /**
     * Variable name
     */
    clientIpVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * VPN configuration
     */
    vpnConfigurations?: outputs.CedgeAaaFeatureTemplateRadiusClientVpnConfiguration[];
}

export interface CedgeAaaFeatureTemplateRadiusClientVpnConfiguration {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Specify a RADIUS client server-key
     */
    serverKey?: string;
    /**
     * Variable name
     */
    serverKeyVariable?: string;
    /**
     * VPN ID
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CedgeAaaFeatureTemplateRadiusServerGroup {
    /**
     * Set Radius server Group Name
     */
    groupName?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the Radius server
     */
    servers?: outputs.CedgeAaaFeatureTemplateRadiusServerGroupServer[];
    /**
     * Set interface to use to reach Radius server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which Radius server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpnId?: number;
}

export interface CedgeAaaFeatureTemplateRadiusServerGroupServer {
    /**
     * Set Accounting port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1813`
     */
    accountingPort?: number;
    /**
     * Variable name
     */
    accountingPortVariable?: string;
    /**
     * Set IP address of Radius server
     */
    address?: string;
    /**
     * Set Authentication port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1812`
     */
    authenticationPort?: number;
    /**
     * Variable name
     */
    authenticationPortVariable?: string;
    /**
     * Type of encyption. To be used for type 6
     *   - Choices: `6`, `7`
     */
    encryptionType?: string;
    /**
     * Set the Radius server shared key
     */
    key?: string;
    /**
     * key type
     *   - Choices: `key`, `pac`
     *   - Default value: `key`
     */
    keyType?: string;
    /**
     * Variable name
     */
    keyTypeVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure how many times to contact this Radius server
     *   - Range: `1`-`100`
     *   - Default value: `3`
     */
    retransmit?: number;
    /**
     * Variable name
     */
    retransmitVariable?: string;
    /**
     * Set the Radius server shared type 7 encrypted key
     */
    secretKey?: string;
    /**
     * Variable name
     */
    secretKeyVariable?: string;
    /**
     * Configure how long to wait for replies from the Radius server
     *   - Range: `1`-`1000`
     *   - Default value: `5`
     */
    timeout?: number;
    /**
     * Variable name
     */
    timeoutVariable?: string;
}

export interface CedgeAaaFeatureTemplateTacacsServerGroup {
    /**
     * Set TACACS server Group Name
     */
    groupName?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the TACACS server
     */
    servers?: outputs.CedgeAaaFeatureTemplateTacacsServerGroupServer[];
    /**
     * Set interface to use to reach TACACS server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which TACACS server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpnId?: number;
}

export interface CedgeAaaFeatureTemplateTacacsServerGroupServer {
    /**
     * Set IP address of TACACS server
     */
    address?: string;
    /**
     * Type of encyption. To be used for type 6
     *   - Choices: `6`, `7`
     */
    encryptionType?: string;
    /**
     * Set the TACACS server shared key
     */
    key?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * TACACS Port
     *   - Range: `1`-`65535`
     *   - Default value: `49`
     */
    port?: number;
    /**
     * Variable name
     */
    portVariable?: string;
    /**
     * Set the TACACS server shared type 7 encrypted key
     */
    secretKey?: string;
    /**
     * Variable name
     */
    secretKeyVariable?: string;
    /**
     * Configure how long to wait for replies from the TACACS server
     *   - Range: `1`-`1000`
     *   - Default value: `5`
     */
    timeout?: number;
    /**
     * Variable name
     */
    timeoutVariable?: string;
}

export interface CedgeAaaFeatureTemplateUser {
    /**
     * Set the username
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the user password
     */
    password?: string;
    /**
     * Set Privilege Level for this user
     *   - Choices: `1`, `15`
     *   - Default value: `15`
     */
    privilegeLevel?: string;
    /**
     * Variable name
     */
    privilegeLevelVariable?: string;
    /**
     * Set the user scrypt password/hash
     */
    secret?: string;
    /**
     * List of RSA public-keys per user
     */
    sshPubkeys?: outputs.CedgeAaaFeatureTemplateUserSshPubkey[];
}

export interface CedgeAaaFeatureTemplateUserSshPubkey {
    /**
     * Set the RSA key string
     */
    keyString?: string;
    /**
     * Only RSA is supported
     */
    keyType?: string;
    /**
     * Variable name
     */
    keyTypeVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CedgeIgmpFeatureTemplateInterface {
    /**
     * Configure static joins
     */
    joinGroups?: outputs.CedgeIgmpFeatureTemplateInterfaceJoinGroup[];
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CedgeIgmpFeatureTemplateInterfaceJoinGroup {
    /**
     * Set group address
     */
    groupAddress?: string;
    /**
     * Variable name
     */
    groupAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set source address
     */
    source?: string;
    /**
     * Variable name
     */
    sourceVariable?: string;
}

export interface CedgePimFeatureTemplateInterface {
    /**
     * Set interface name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
     *   - Range: `10`-`600`
     *   - Default value: `60`
     */
    joinPruneInterval?: number;
    /**
     * Variable name
     */
    joinPruneIntervalVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set PIM query interval
     *   - Range: `1`-`18725`
     *   - Default value: `30`
     */
    queryInterval?: number;
    /**
     * Variable name
     */
    queryIntervalVariable?: string;
}

export interface CedgePimFeatureTemplateRpAddress {
    /**
     * Set Static RP Access List
     */
    accessList?: string;
    /**
     * Variable name
     */
    accessListVariable?: string;
    /**
     * Set Static RP IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set override flag
     *   - Default value: `false`
     */
    override?: boolean;
    /**
     * Variable name
     */
    overrideVariable?: string;
}

export interface CedgePimFeatureTemplateRpAnnounceField {
    /**
     * Set RP Announce Interface Name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set RP Announce Scope
     *   - Range: `1`-`255`
     */
    scope?: number;
    /**
     * Variable name
     */
    scopeVariable?: string;
}

export interface CedgePimFeatureTemplateRpCandidate {
    /**
     * Set IP Access List for PIM RP Candidate
     */
    accessList?: string;
    /**
     * Variable name
     */
    accessListVariable?: string;
    /**
     * Set Autonomic-Networking virtual interface
     */
    interface?: string;
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * Set RP candidate advertisement interval
     *   - Range: `1`-`16383`
     */
    interval?: number;
    /**
     * Variable name
     */
    intervalVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set RP candidate priority
     *   - Range: `0`-`255`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
}

export interface CellularControllerFeatureTemplateDataProfile {
    /**
     * Set attach profile
     *   - Range: `1`-`16`
     */
    attachProfile?: number;
    /**
     * Variable name
     */
    attachProfileVariable?: string;
    /**
     * Set data profile
     *   - Range: `1`-`16`
     */
    dataProfile?: number;
    /**
     * Variable name
     */
    dataProfileVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set slot number
     *   - Range: `0`-`1`
     */
    slotNumber?: number;
    /**
     * Variable name
     */
    slotNumberVariable?: string;
}

export interface CentralizedPolicyDefinition {
    /**
     * List of entries
     */
    entries?: outputs.CentralizedPolicyDefinitionEntry[];
    /**
     * Policy definition ID
     */
    id: string;
    /**
     * Policy definition type
     *   - Choices: `hubAndSpoke`, `mesh`, `control`, `vpnMembershipGroup`, `appRoute`, `cflowd`, `data`
     */
    type: string;
    /**
     * Policy definition version
     */
    version?: number;
}

export interface CentralizedPolicyDefinitionEntry {
    /**
     * Direction
     *   - Choices: `service`, `tunnel`, `all`, `in`, `out`
     */
    direction?: string;
    /**
     * List of region IDs
     */
    regionIds?: string[];
    /**
     * List of region list IDs
     */
    regionListIds?: string[];
    /**
     * List of region list versions
     */
    regionListVersions?: string[];
    /**
     * List of site list IDs
     */
    siteListIds?: string[];
    /**
     * List of site list versions
     */
    siteListVersions?: string[];
    /**
     * List of VPN list IDs
     */
    vpnListIds?: string[];
    /**
     * List of VPN list versions
     */
    vpnListVersions?: string[];
}

export interface CflowdPolicyDefinitionCollector {
    /**
     * BFD metrics exporting
     */
    bfdMetricsExporting?: boolean;
    /**
     * Export spreading
     *   - Choices: `enable`, `disable`
     */
    exportSpreading?: string;
    /**
     * Exporting interval
     */
    exportingInterval?: number;
    /**
     * IP address
     */
    ipAddress?: string;
    /**
     * Port
     *   - Range: `1024`-`65535`
     */
    port?: number;
    /**
     * Source interface
     */
    sourceInterface?: string;
    /**
     * Transport protocol
     *   - Choices: `transportTcp`, `transportUdp`
     */
    transport?: string;
    /**
     * VPN ID
     *   - Range: `1`-`65535`
     */
    vpnId?: number;
}

export interface CiscoBfdFeatureTemplateColor {
    /**
     * Set color that identifies the WAN transport tunnel
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     */
    color?: string;
    /**
     * Variable name
     */
    colorVariable?: string;
    /**
     * Set BFD Default DSCP value for tloc color
     *   - Range: `0`-`63`
     *   - Default value: `48`
     */
    dscp?: number;
    /**
     * Variable name
     */
    dscpVariable?: string;
    /**
     * Set how often BFD sends Hello packets
     *   - Range: `100`-`300000`
     *   - Default value: `1000`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set how many Hello packet intervals to wait before declaring that a tunnel has failed
     *   - Range: `1`-`60`
     *   - Default value: `7`
     */
    multiplier?: number;
    /**
     * Variable name
     */
    multiplierVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Control automatic path MTU discovery
     *   - Default value: `true`
     */
    pmtuDiscovery?: boolean;
    /**
     * Variable name
     */
    pmtuDiscoveryVariable?: string;
}

export interface CiscoBgpFeatureTemplateAddressFamily {
    /**
     * BGP Default Information Originate
     *   - Default value: `false`
     */
    defaultInformationOriginate?: boolean;
    /**
     * Variable name
     */
    defaultInformationOriginateVariable?: string;
    /**
     * Set BGP address family
     *   - Choices: `ipv4-unicast`, `ipv6-unicast`
     */
    familyType?: string;
    /**
     * Aggregate prefixes in specific range
     */
    ipv4AggregateAddresses?: outputs.CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress[];
    /**
     * Configure the networks for BGP to advertise
     */
    ipv4Networks?: outputs.CiscoBgpFeatureTemplateAddressFamilyIpv4Network[];
    /**
     * IPv6 Aggregate prefixes in specific range
     */
    ipv6AggregateAddresses?: outputs.CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress[];
    /**
     * Configure the networks for BGP to advertise
     */
    ipv6Networks?: outputs.CiscoBgpFeatureTemplateAddressFamilyIpv6Network[];
    /**
     * Set maximum number of parallel IBGP paths for multipath load sharing
     *   - Range: `0`-`32`
     */
    maximumPaths?: number;
    /**
     * Variable name
     */
    maximumPathsVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Redistribute routes into BGP
     */
    redistributeRoutes?: outputs.CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute[];
    /**
     * Filter
     *   - Default value: `false`
     */
    tableMapFilter?: boolean;
    /**
     * Variable name
     */
    tableMapFilterVariable?: string;
    /**
     * Map external entry attributes into routing table
     */
    tableMapPolicy?: string;
    /**
     * Variable name
     */
    tableMapPolicyVariable?: string;
}

export interface CiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress {
    /**
     * Set AS set path information
     *   - Default value: `false`
     */
    asSetPath?: boolean;
    /**
     * Variable name
     */
    asSetPathVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the prefixes to aggregate
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * Filter out more specific routes from updates
     *   - Default value: `false`
     */
    summaryOnly?: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable?: string;
}

export interface CiscoBgpFeatureTemplateAddressFamilyIpv4Network {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the prefixes for BGP to announce
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface CiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress {
    /**
     * Set AS set path information
     *   - Default value: `false`
     */
    asSetPath?: boolean;
    /**
     * Variable name
     */
    asSetPathVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the IPv6 prefixes to aggregate
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * Filter out more specific routes from updates
     *   - Default value: `false`
     */
    summaryOnly?: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable?: string;
}

export interface CiscoBgpFeatureTemplateAddressFamilyIpv6Network {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the prefixes for BGP to announce
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface CiscoBgpFeatureTemplateAddressFamilyRedistributeRoute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `static`, `connected`, `ospf`, `ospfv3`, `omp`, `eigrp`, `nat`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Configure policy to apply to prefixes received from BGP neighbor
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv4Neighbor {
    /**
     * Set neighbor address
     */
    address?: string;
    /**
     * Set BGP address family
     */
    addressFamilies?: outputs.CiscoBgpFeatureTemplateIpv4NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * As Number
     *   - Range: `1`-`10`
     */
    allowAsIn?: number;
    /**
     * Variable name
     */
    allowAsInVariable?: string;
    /**
     * As Override
     *   - Default value: `false`
     */
    asOverride?: boolean;
    /**
     * Variable name
     */
    asOverrideVariable?: string;
    /**
     * Set description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Set TTL value for peers that are not directly connected
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    ebgpMultihop?: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable?: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     *   - Range: `0`-`65535`
     */
    holdtime?: number;
    /**
     * Variable name
     */
    holdtimeVariable?: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     *   - Range: `0`-`65535`
     */
    keepalive?: number;
    /**
     * Variable name
     */
    keepaliveVariable?: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     *   - Default value: `false`
     */
    nextHopSelf?: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs?: string;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Send community attribute
     *   - Default value: `true`
     */
    sendCommunity?: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable?: string;
    /**
     * Send extended community attribute
     *   - Default value: `true`
     */
    sendExtCommunity?: boolean;
    /**
     * Variable name
     */
    sendExtCommunityVariable?: string;
    /**
     * Send label
     *   - Default value: `false`
     */
    sendLabel?: boolean;
    /**
     * Send label
     *   - Default value: `false`
     */
    sendLabelExplicit?: boolean;
    /**
     * Variable name
     */
    sendLabelExplicitVariable?: string;
    /**
     * Variable name
     */
    sendLabelVariable?: string;
    /**
     * Enable or disable a BGP neighbor
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Set IP address of interface for TCP connection to BGP neighbor
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv4NeighborAddressFamily {
    /**
     * Set BGP address family
     *   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
     */
    familyType?: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     *   - Range: `0`-`4294967295`
     */
    maximumPrefixes?: number;
    /**
     * Set when to restart BGP connection if threshold is exceeded
     *   - Range: `0`-`65535`
     */
    maximumPrefixesRestart?: number;
    /**
     * Variable name
     */
    maximumPrefixesRestartVariable?: string;
    /**
     * Set threshold at which to generate a warning message
     *   - Range: `0`-`100`
     */
    maximumPrefixesThreshold?: number;
    /**
     * Variable name
     */
    maximumPrefixesThresholdVariable?: string;
    /**
     * Variable name
     */
    maximumPrefixesVariable?: string;
    /**
     * Display only a warning message when threshold is exceeded
     *   - Default value: `false`
     */
    maximumPrefixesWarningOnly?: boolean;
    /**
     * Variable name
     */
    maximumPrefixesWarningOnlyVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select route policy to apply to prefixes received from BGP neighbor
     */
    routePolicies?: outputs.CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy[];
}

export interface CiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy {
    /**
     * Set direction for applying route policy
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure name of route policy
     */
    policyName?: string;
    /**
     * Variable name
     */
    policyNameVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv4RouteTarget {
    /**
     * Export Target-VPN community for IPV4
     */
    exports?: outputs.CiscoBgpFeatureTemplateIpv4RouteTargetExport[];
    /**
     * Import Target-VPN community for IPV4
     */
    imports?: outputs.CiscoBgpFeatureTemplateIpv4RouteTargetImport[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * VPN ID for IPv4
     *   - Range: `1`-`65527`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv4RouteTargetExport {
    /**
     * asn-ip
     */
    asnIp?: string;
    /**
     * Variable name
     */
    asnIpVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoBgpFeatureTemplateIpv4RouteTargetImport {
    /**
     * asn-ip
     */
    asnIp?: string;
    /**
     * Variable name
     */
    asnIpVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoBgpFeatureTemplateIpv6Neighbor {
    /**
     * Set neighbor address
     */
    address?: string;
    /**
     * Set BGP address family
     */
    addressFamilies?: outputs.CiscoBgpFeatureTemplateIpv6NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * As Number
     *   - Range: `1`-`10`
     */
    allowAsIn?: number;
    /**
     * Variable name
     */
    allowAsInVariable?: string;
    /**
     * As Override
     *   - Default value: `false`
     */
    asOverride?: boolean;
    /**
     * Variable name
     */
    asOverrideVariable?: string;
    /**
     * Set description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Set TTL value for peers that are not directly connected
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    ebgpMultihop?: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable?: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     *   - Range: `0`-`65535`
     */
    holdtime?: number;
    /**
     * Variable name
     */
    holdtimeVariable?: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     *   - Range: `0`-`65535`
     */
    keepalive?: number;
    /**
     * Variable name
     */
    keepaliveVariable?: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     *   - Default value: `false`
     */
    nextHopSelf?: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs?: string;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Send community attribute
     *   - Default value: `true`
     */
    sendCommunity?: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable?: string;
    /**
     * Send extended community attribute
     *   - Default value: `true`
     */
    sendExtCommunity?: boolean;
    /**
     * Variable name
     */
    sendExtCommunityVariable?: string;
    /**
     * Send label
     *   - Default value: `false`
     */
    sendLabel?: boolean;
    /**
     * Send label Explicit
     *   - Default value: `false`
     */
    sendLabelExplicit?: boolean;
    /**
     * Variable name
     */
    sendLabelExplicitVariable?: string;
    /**
     * Variable name
     */
    sendLabelVariable?: string;
    /**
     * Enable or disable a BGP neighbor
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Set IP address of interface for TCP connection to BGP neighbor
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv6NeighborAddressFamily {
    /**
     * Set BGP address family
     *   - Choices: `ipv6-unicast`
     */
    familyType?: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     *   - Range: `0`-`4294967295`
     *   - Default value: `0`
     */
    maximumPrefixes?: number;
    /**
     * Set when to restart BGP connection if threshold is exceeded
     *   - Range: `0`-`65535`
     */
    maximumPrefixesRestart?: number;
    /**
     * Variable name
     */
    maximumPrefixesRestartVariable?: string;
    /**
     * Set threshold at which to generate a warning message
     *   - Range: `0`-`100`
     *   - Default value: `0`
     */
    maximumPrefixesThreshold?: number;
    /**
     * Variable name
     */
    maximumPrefixesThresholdVariable?: string;
    /**
     * Variable name
     */
    maximumPrefixesVariable?: string;
    /**
     * Display only a warning message when threshold is exceeded
     *   - Default value: `false`
     */
    maximumPrefixesWarningOnly?: boolean;
    /**
     * Variable name
     */
    maximumPrefixesWarningOnlyVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select route policy to apply to prefixes received from BGP neighbor
     */
    routePolicies?: outputs.CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy[];
}

export interface CiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy {
    /**
     * Set direction for applying route policy
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure name of route policy
     */
    policyName?: string;
    /**
     * Variable name
     */
    policyNameVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv6RouteTarget {
    /**
     * Export Target-VPN community for IPV6
     */
    exports?: outputs.CiscoBgpFeatureTemplateIpv6RouteTargetExport[];
    /**
     * Import Target-VPN community for IPV6
     */
    imports?: outputs.CiscoBgpFeatureTemplateIpv6RouteTargetImport[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * VPN ID for IPv6
     *   - Range: `1`-`65527`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoBgpFeatureTemplateIpv6RouteTargetExport {
    /**
     * asn-ip
     */
    asnIp?: string;
    /**
     * Variable name
     */
    asnIpVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoBgpFeatureTemplateIpv6RouteTargetImport {
    /**
     * asn-ip
     */
    asnIp?: string;
    /**
     * Variable name
     */
    asnIpVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoBgpFeatureTemplateMplsInterface {
    /**
     * Interface Name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoDhcpServerFeatureTemplateOption {
    /**
     * Set ASCII value
     */
    ascii?: string;
    /**
     * Variable name
     */
    asciiVariable?: string;
    /**
     * Set HEX value
     */
    hex?: string;
    /**
     * Variable name
     */
    hexVariable?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Set ip address
     */
    ipAddresses?: string[];
    /**
     * Set Option Code
     *   - Range: `1`-`254`
     */
    optionCode?: number;
    /**
     * Variable name
     */
    optionCodeVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoDhcpServerFeatureTemplateStaticLease {
    /**
     * Set client’s hostname
     */
    hostname?: string;
    /**
     * Variable name
     */
    hostnameVariable?: string;
    /**
     * Set client’s static IP address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Set MAC address of client
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoLoggingFeatureTemplateIpv4Server {
    /**
     * Define custom profile
     *   - Default value: `false`
     */
    customProfile?: boolean;
    /**
     * Variable name
     */
    customProfileVariable?: string;
    /**
     * Enable TLS
     *   - Default value: `false`
     */
    enableTls?: boolean;
    /**
     * Variable name
     */
    enableTlsVariable?: string;
    /**
     * Set hostname or IPv4 address of server
     */
    hostnameIp?: string;
    /**
     * Variable name
     */
    hostnameIpVariable?: string;
    /**
     * Set logging level for messages logged to server
     *   - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `information`
     */
    loggingLevel?: string;
    /**
     * Variable name
     */
    loggingLevelVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure a TLS profile
     */
    profile?: string;
    /**
     * Variable name
     */
    profileVariable?: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which syslog server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoLoggingFeatureTemplateIpv6Server {
    /**
     * Define custom profile
     *   - Default value: `false`
     */
    customProfile?: boolean;
    /**
     * Variable name
     */
    customProfileVariable?: string;
    /**
     * Enable TLS
     *   - Default value: `false`
     */
    enableTls?: boolean;
    /**
     * Variable name
     */
    enableTlsVariable?: string;
    /**
     * Set IPv6 hostname or IPv6 address of server
     */
    hostnameIp?: string;
    /**
     * Variable name
     */
    hostnameIpVariable?: string;
    /**
     * Set logging level for messages logged to server
     *   - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `information`
     */
    loggingLevel?: string;
    /**
     * Variable name
     */
    loggingLevelVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure a TLS profile
     */
    profile?: string;
    /**
     * Variable name
     */
    profileVariable?: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which syslog server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoLoggingFeatureTemplateTlsProfile {
    /**
     * Authentication Type
     *   - Choices: `Server`, `Mutual`
     */
    authenticationType?: string;
    /**
     * Variable name
     */
    ciphersuiteListVariable?: string;
    /**
     * Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
     */
    ciphersuiteLists?: string[];
    /**
     * Specify the name of the TLS profile
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * TLS Version
     *   - Choices: `TLSv1.1`, `TLSv1.2`
     *   - Default value: `TLSv1.1`
     */
    version?: string;
    /**
     * Variable name
     */
    versionVariable?: string;
}

export interface CiscoNtpFeatureTemplateAuthenticationKey {
    /**
     * MD5 authentication key ID
     *   - Range: `1`-`65535`
     */
    id?: number;
    /**
     * Variable name
     */
    idVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Enter cleartext or AES-encrypted MD5 authentication key
     */
    value?: string;
    /**
     * Variable name
     */
    valueVariable?: string;
}

export interface CiscoNtpFeatureTemplateServer {
    /**
     * Set authentication key for the server
     *   - Range: `1`-`65535`
     */
    authenticationKeyId?: number;
    /**
     * Variable name
     */
    authenticationKeyIdVariable?: string;
    /**
     * Set hostname or IP address of server
     */
    hostnameIp?: string;
    /**
     * Variable name
     */
    hostnameIpVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefer this NTP server
     *   - Default value: `false`
     */
    prefer?: boolean;
    /**
     * Variable name
     */
    preferVariable?: string;
    /**
     * Set interface to use to reach NTP server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     */
    version?: number;
    /**
     * Variable name
     */
    versionVariable?: string;
    /**
     * Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoOmpFeatureTemplateAdvertiseIpv4Route {
    /**
     * Advertise OSPF external routes
     *   - Choices: `external`
     */
    advertiseExternalOspf?: string;
    /**
     * Variable name
     */
    advertiseExternalOspfVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set routes to advertise
     *   - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `eigrp`, `lisp`, `isis`
     */
    protocol?: string;
}

export interface CiscoOmpFeatureTemplateAdvertiseIpv6Route {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set routes to advertise
     *   - Choices: `bgp`, `ospf`, `connected`, `static`, `eigrp`, `lisp`, `isis`
     */
    protocol?: string;
}

export interface CiscoOspfFeatureTemplateArea {
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.CiscoOspfFeatureTemplateAreaInterface[];
    /**
     * NSSA area
     */
    nssa?: boolean;
    /**
     * Do not inject interarea routes into NSSA
     *   - Default value: `false`
     */
    nssaNoSummary?: boolean;
    /**
     * Variable name
     */
    nssaNoSummaryVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.CiscoOspfFeatureTemplateAreaRange[];
    /**
     * Stub area
     */
    stub?: boolean;
    /**
     * Do not inject interarea routes into stub
     *   - Default value: `false`
     */
    stubNoSummary?: boolean;
    /**
     * Variable name
     */
    stubNoSummaryVariable?: string;
}

export interface CiscoOspfFeatureTemplateAreaInterface {
    /**
     * Set MD5 authentication key
     */
    authenticationMessageDigestKey?: string;
    /**
     * Set MD5 message digest key
     *   - Range: `1`-`255`
     */
    authenticationMessageDigestKeyId?: number;
    /**
     * Variable name
     */
    authenticationMessageDigestKeyIdVariable?: string;
    /**
     * Variable name
     */
    authenticationMessageDigestKeyVariable?: string;
    /**
     * Set OSPF interface authentication type
     *   - Choices: `simple`, `message-digest`, `null`
     */
    authenticationType?: string;
    /**
     * Variable name
     */
    authenticationTypeVariable?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     *   - Default value: `broadcast`
     */
    network?: string;
    /**
     * Variable name
     */
    networkVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
    /**
     * Set router’s priority to be elected as designated router
     *   - Range: `0`-`255`
     *   - Default value: `1`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    retransmitInterval?: number;
    /**
     * Variable name
     */
    retransmitIntervalVariable?: string;
}

export interface CiscoOspfFeatureTemplateAreaRange {
    /**
     * Set matching prefix
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoOspfFeatureTemplateMaxMetricRouterLsa {
    /**
     * Set the router LSA advertisement type
     *   - Choices: `administrative`, `on-startup`
     */
    adType?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set how long to advertise maximum metric after router starts up
     *   - Range: `5`-`86400`
     */
    time?: number;
    /**
     * Variable name
     */
    timeVariable?: string;
}

export interface CiscoOspfFeatureTemplateRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     *   - Default value: `true`
     */
    natDia?: boolean;
    /**
     * Variable name
     */
    natDiaVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the protocol
     *   - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Set route policy to apply to redistributed routes
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoOspfFeatureTemplateRoutePolicy {
    /**
     * Set direction to apply policy
     *   - Choices: `in`
     */
    direction?: string;
    /**
     * Variable name
     */
    directionVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of route policy
     */
    policyName?: string;
    /**
     * Variable name
     */
    policyNameVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv4Area {
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.CiscoOspfv3FeatureTemplateIpv4AreaInterface[];
    /**
     * Area Type Normal
     *   - Default value: `false`
     */
    normal?: boolean;
    /**
     * Variable name
     */
    normalVariable?: string;
    /**
     * NSSA area
     */
    nssa?: boolean;
    /**
     * Do not inject interarea routes into NSSA
     *   - Default value: `false`
     */
    nssaNoSummary?: boolean;
    /**
     * Variable name
     */
    nssaNoSummaryVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.CiscoOspfv3FeatureTemplateIpv4AreaRange[];
    /**
     * Stub area
     */
    stub?: boolean;
    /**
     * Do not inject interarea routes into stub
     *   - Default value: `false`
     */
    stubNoSummary?: boolean;
    /**
     * Variable name
     */
    stubNoSummaryVariable?: string;
    /**
     * Always Translate LSAs on this ABR
     *   - Choices: `always`
     */
    translate?: string;
    /**
     * Variable name
     */
    translateVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv4AreaInterface {
    /**
     * Set OSPF interface authentication key
     */
    authenticationKey?: string;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set OSPF interface authentication type
     *   - Choices: `md5`, `sha1`
     */
    authenticationType?: string;
    /**
     * Variable name
     */
    authenticationTypeVariable?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     *   - Range: `256`-`4294967295`
     */
    ipsecSpi?: number;
    /**
     * Variable name
     */
    ipsecSpiVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     *   - Default value: `broadcast`
     */
    network?: string;
    /**
     * Variable name
     */
    networkVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    retransmitInterval?: number;
    /**
     * Variable name
     */
    retransmitIntervalVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv4AreaRange {
    /**
     * Set Matching Prefix
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa {
    /**
     * Set the router LSA advertisement type
     *   - Choices: `on-startup`
     */
    adType?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set how long to advertise maximum metric after router starts up
     *   - Range: `5`-`86400`
     */
    time?: number;
    /**
     * Variable name
     */
    timeVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv4Redistribute {
    /**
     * Enable NAT DIA for redistributed routes
     *   - Default value: `true`
     */
    natDia?: boolean;
    /**
     * Variable name
     */
    natDiaVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the protocol
     *   - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Set route policy to apply to redistributed routes
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv6Area {
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.CiscoOspfv3FeatureTemplateIpv6AreaInterface[];
    /**
     * Area Type Normal
     *   - Default value: `false`
     */
    normal?: boolean;
    /**
     * Variable name
     */
    normalVariable?: string;
    /**
     * NSSA area
     */
    nssa?: boolean;
    /**
     * Do not inject interarea routes into NSSA
     *   - Default value: `false`
     */
    nssaNoSummary?: boolean;
    /**
     * Variable name
     */
    nssaNoSummaryVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.CiscoOspfv3FeatureTemplateIpv6AreaRange[];
    /**
     * Stub area
     */
    stub?: boolean;
    /**
     * Do not inject interarea routes into stub
     *   - Default value: `false`
     */
    stubNoSummary?: boolean;
    /**
     * Variable name
     */
    stubNoSummaryVariable?: string;
    /**
     * Always translate LSAs on this ABR
     *   - Choices: `always`
     */
    translate?: string;
    /**
     * Variable name
     */
    translateVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv6AreaInterface {
    /**
     * Set OSPF interface authentication key
     */
    authenticationKey?: string;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set OSPF interface authentication type
     *   - Choices: `md5`, `sha1`
     */
    authenticationType?: string;
    /**
     * Variable name
     */
    authenticationTypeVariable?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     *   - Range: `256`-`4294967295`
     */
    ipsecSpi?: number;
    /**
     * Variable name
     */
    ipsecSpiVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     *   - Default value: `broadcast`
     */
    network?: string;
    /**
     * Variable name
     */
    networkVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    retransmitInterval?: number;
    /**
     * Variable name
     */
    retransmitIntervalVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv6AreaRange {
    /**
     * Set Matching Prefix
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa {
    /**
     * Set the router LSA advertisement type
     *   - Choices: `on-startup`
     */
    adType?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set how long to advertise maximum metric after router starts up
     */
    time?: number;
    /**
     * Variable name
     */
    timeVariable?: string;
}

export interface CiscoOspfv3FeatureTemplateIpv6Redistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the protocol
     *   - Choices: `bgp`, `connected`, `eigrp`, `isis`, `lisp`, `nat-route`, `omp`, `static`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Set route policy to apply to redistributed routes
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoSecureInternetGatewayFeatureTemplateInterface {
    /**
     * Enable Application Tunnel Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     */
    application?: string;
    /**
     * Auto Tunnel Mode
     *   - Default value: `false`
     */
    autoTunnelMode?: boolean;
    /**
     * IKE keepalive interval (seconds)
     *   - Range: `0`-`65535`
     *   - Default value: `10`
     */
    deadPeerDetectionInterval?: number;
    /**
     * Variable name
     */
    deadPeerDetectionIntervalVariable?: string;
    /**
     * IKE keepalive retries
     *   - Range: `0`-`255`
     *   - Default value: `3`
     */
    deadPeerDetectionRetries?: number;
    /**
     * Variable name
     */
    deadPeerDetectionRetriesVariable?: string;
    /**
     * Interface description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     */
    ikeCiphersuite?: string;
    /**
     * Variable name
     */
    ikeCiphersuiteVariable?: string;
    /**
     * IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`
     *   - Default value: `14`
     */
    ikeGroup?: string;
    /**
     * Variable name
     */
    ikeGroupVariable?: string;
    /**
     * Use preshared key to authenticate IKE peer
     */
    ikePreSharedKey?: string;
    /**
     * Use preshared key to authenticate IKE peer
     *   - Default value: `true`
     */
    ikePreSharedKeyDynamic?: boolean;
    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     */
    ikePreSharedKeyLocalId?: string;
    /**
     * Variable name
     */
    ikePreSharedKeyLocalIdVariable?: string;
    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     */
    ikePreSharedKeyRemoteId?: string;
    /**
     * Variable name
     */
    ikePreSharedKeyRemoteIdVariable?: string;
    /**
     * Variable name
     */
    ikePreSharedKeyVariable?: string;
    /**
     * IKE rekey interval <300..1209600> seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `14400`
     */
    ikeRekeyInterval?: number;
    /**
     * Variable name
     */
    ikeRekeyIntervalVariable?: string;
    /**
     * IKE Version <1..2>
     *   - Range: `1`-`2`
     *   - Default value: `2`
     */
    ikeVersion?: number;
    /**
     * Variable name
     */
    ikeVersionVariable?: string;
    /**
     * Unnumbered interface
     *   - Default value: `true`
     */
    ipUnnumbered?: boolean;
    /**
     * IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     */
    ipsecCiphersuite?: string;
    /**
     * Variable name
     */
    ipsecCiphersuiteVariable?: string;
    /**
     * IPsec perfect forward secrecy settings
     *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
     *   - Default value: `none`
     */
    ipsecPerfectForwardSecrecy?: string;
    /**
     * Variable name
     */
    ipsecPerfectForwardSecrecyVariable?: string;
    /**
     * IPsec rekey interval <300..1209600> seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `3600`
     */
    ipsecRekeyInterval?: number;
    /**
     * Variable name
     */
    ipsecRekeyIntervalVariable?: string;
    /**
     * Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     */
    ipsecReplayWindow?: number;
    /**
     * Variable name
     */
    ipsecReplayWindowVariable?: string;
    /**
     * Assign IPv4 address
     */
    ipv4Address?: string;
    /**
     * Variable name
     */
    ipv4AddressVariable?: string;
    /**
     * Interface MTU <576..2000>, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1400`
     */
    mtu?: number;
    /**
     * Variable name
     */
    mtuVariable?: string;
    /**
     * Interface name: IPsec when present
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Administrative state
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * SIG Tunnel Provider
     *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
     *   - Default value: `secure-internet-gateway-umbrella`
     */
    sigProvider?: string;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: number;
    /**
     * Variable name
     */
    tcpMssVariable?: string;
    /**
     * Enable/disable SIG tracking
     *   - Default value: `true`
     */
    trackEnable?: boolean;
    /**
     * Enable tracker for this interface
     */
    tracker?: string;
    /**
     * SIG Tunnel Data Center
     *   - Choices: `primary-dc`, `secondary-dc`
     *   - Default value: `primary-dc`
     */
    tunnelDcPreference?: string;
    /**
     * Tunnel destination IP address
     */
    tunnelDestination?: string;
    /**
     * Variable name
     */
    tunnelDestinationVariable?: string;
    /**
     * Public IP required to setup GRE tunnel to Zscaler
     *   - Default value: `Auto`
     */
    tunnelPublicIp?: string;
    /**
     * Variable name
     */
    tunnelPublicIpVariable?: string;
    /**
     * <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
     */
    tunnelRouteVia?: string;
    /**
     * Variable name
     */
    tunnelRouteViaVariable?: string;
    /**
     * Tunnel source IP Address
     */
    tunnelSource?: string;
    /**
     * <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
     */
    tunnelSourceInterface?: string;
    /**
     * Variable name
     */
    tunnelSourceInterfaceVariable?: string;
    /**
     * Variable name
     */
    tunnelSourceVariable?: string;
}

export interface CiscoSecureInternetGatewayFeatureTemplateService {
    /**
     * Interface Pair for active and backup
     */
    interfacePairs?: outputs.CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Service Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     */
    serviceType?: string;
    /**
     * Umbrella Primary Datacenter
     *   - Default value: `Auto`
     */
    umbrellaPrimaryDataCenter?: string;
    /**
     * Variable name
     */
    umbrellaPrimaryDataCenterVariable?: string;
    /**
     * Umbrella Secondary Datacenter
     *   - Default value: `Auto`
     */
    umbrellaSecondaryDataCenter?: string;
    /**
     * Variable name
     */
    umbrellaSecondaryDataCenterVariable?: string;
    /**
     * For first-time Acceptable User Policy behavior, block Internet access
     *   - Default value: `false`
     */
    zscalerAupBlockInternetUntilAccepted?: boolean;
    /**
     * Enable Acceptable User Policy
     *   - Default value: `false`
     */
    zscalerAupEnabled?: boolean;
    /**
     * For first-time Acceptable User Policy behavior, force SSL inspection
     *   - Default value: `false`
     */
    zscalerAupForceSslInspection?: boolean;
    /**
     * Custom Acceptable User Policy frequency in days
     *   - Default value: `0`
     */
    zscalerAupTimeout?: number;
    /**
     * Enforce Authentication
     *   - Default value: `false`
     */
    zscalerAuthenticationRequired?: boolean;
    /**
     * Enable Caution
     *   - Default value: `false`
     */
    zscalerCautionEnabled?: boolean;
    /**
     * Firewall enabled
     *   - Default value: `false`
     */
    zscalerFirewallEnabled?: boolean;
    /**
     * Enable IPS Control
     *   - Default value: `false`
     */
    zscalerIpsControlEnabled?: boolean;
    /**
     * Zscaler location name (optional)
     *   - Default value: `Auto`
     */
    zscalerLocationName?: string;
    /**
     * Variable name
     */
    zscalerLocationNameVariable?: string;
    /**
     * Custom Primary Datacenter
     *   - Default value: `Auto`
     */
    zscalerPrimaryDataCenter?: string;
    /**
     * Variable name
     */
    zscalerPrimaryDataCenterVariable?: string;
    /**
     * Custom Secondary Datacenter
     *   - Default value: `Auto`
     */
    zscalerSecondaryDataCenter?: string;
    /**
     * Variable name
     */
    zscalerSecondaryDataCenterVariable?: string;
    /**
     * Display time unit
     *   - Choices: `MINUTE`, `HOUR`, `DAY`
     *   - Default value: `MINUTE`
     */
    zscalerSurrogateDisplayTimeUnit?: string;
    /**
     * Idle time to disassociation
     *   - Default value: `0`
     */
    zscalerSurrogateIdleTime?: number;
    /**
     * Enable Surrogate IP
     *   - Default value: `false`
     */
    zscalerSurrogateIp?: boolean;
    /**
     * Enforce Surrogate IP for known browsers
     *   - Default value: `false`
     */
    zscalerSurrogateIpEnforceForKnownBrowsers?: boolean;
    /**
     * Refresh time for re-validation of surrogacy in minutes
     *   - Default value: `0`
     */
    zscalerSurrogateRefreshTime?: number;
    /**
     * Refresh Time unit
     *   - Choices: `MINUTE`, `HOUR`, `DAY`
     *   - Default value: `MINUTE`
     */
    zscalerSurrogateRefreshTimeUnit?: string;
    /**
     * XFF forwarding enabled
     *   - Default value: `false`
     */
    zscalerXffForward?: boolean;
}

export interface CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair {
    /**
     * Active Tunnel Interface for SIG
     */
    activeInterface?: string;
    /**
     * Active Tunnel Interface Weight
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    activeInterfaceWeight?: number;
    /**
     * Backup Tunnel Interface for SIG
     */
    backupInterface?: string;
    /**
     * Backup Tunnel Interface Weight
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    backupInterfaceWeight?: number;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoSecureInternetGatewayFeatureTemplateTracker {
    /**
     * API url of endpoint
     */
    endpointApiUrl?: string;
    /**
     * Variable name
     */
    endpointApiUrlVariable?: string;
    /**
     * Probe interval <10..600> seconds
     *   - Range: `20`-`600`
     *   - Default value: `60`
     */
    interval?: number;
    /**
     * Variable name
     */
    intervalVariable?: string;
    /**
     * Probe failure multiplier <1..10> failed attempts
     *   - Range: `1`-`10`
     *   - Default value: `3`
     */
    multiplier?: number;
    /**
     * Variable name
     */
    multiplierVariable?: string;
    /**
     * Tracker name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Probe Timeout threshold <100..1000> milliseconds
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     */
    threshold?: number;
    /**
     * Variable name
     */
    thresholdVariable?: string;
    /**
     * - Choices: `SIG`
     *   - Default value: ` SIG`
     */
    trackerType?: string;
}

export interface CiscoSecurityFeatureTemplateKey {
    /**
     * Configure Accept AO Mismatch
     *   - Default value: `false`
     */
    acceptAoMismatch?: boolean;
    /**
     * Variable name
     */
    acceptAoMismatchVariable?: string;
    /**
     * Configure Accept lifetime Duration
     *   - Range: `1`-`2147483646`
     */
    acceptLifetimeDuration?: number;
    /**
     * Variable name
     */
    acceptLifetimeDurationVariable?: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifetimeEndTime?: string;
    /**
     * Configure Key lifetime end time
     *   - Choices: `infinite`, `duration`, `end-epoch`
     *   - Default value: `infinite`
     */
    acceptLifetimeEndTimeFormat?: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifetimeInfinite?: boolean;
    /**
     * Variable name
     */
    acceptLifetimeInfiniteVariable?: string;
    /**
     * Configure Accept Lifetime Local
     *   - Default value: `false`
     */
    acceptLifetimeLocal?: boolean;
    /**
     * Variable name
     */
    acceptLifetimeLocalVariable?: string;
    /**
     * Configure Key lifetime start time
     */
    acceptLifetimeStartTime?: string;
    /**
     * Select the chain name
     */
    chainName?: string;
    /**
     * Crypto Algorithm
     *   - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
     */
    cryptoAlgorithm?: string;
    /**
     * Select the Key ID
     */
    id?: string;
    /**
     * Configure Include TCP Options
     *   - Default value: `false`
     */
    includeTcpOptions?: boolean;
    /**
     * Variable name
     */
    includeTcpOptionsVariable?: string;
    /**
     * Specify the Key String
     */
    keyString?: string;
    /**
     * Variable name
     */
    keyStringVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Specify the Receiver ID
     *   - Range: `0`-`255`
     *   - Default value: `0`
     */
    receiveId?: number;
    /**
     * Variable name
     */
    receiveIdVariable?: string;
    /**
     * Specify the Send ID
     *   - Range: `0`-`255`
     *   - Default value: `0`
     */
    sendId?: number;
    /**
     * Variable name
     */
    sendIdVariable?: string;
    /**
     * Configure Send lifetime Duration
     *   - Range: `1`-`2147483646`
     */
    sendLifetimeDuration?: number;
    /**
     * Variable name
     */
    sendLifetimeDurationVariable?: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifetimeEndTime?: string;
    /**
     * Configure Key lifetime end time
     *   - Choices: `infinite`, `duration`, `end-epoch`
     *   - Default value: `infinite`
     */
    sendLifetimeEndTimeFormat?: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifetimeInfinite?: boolean;
    /**
     * Variable name
     */
    sendLifetimeInfiniteVariable?: string;
    /**
     * Configure Send lifetime Local
     *   - Default value: `false`
     */
    sendLifetimeLocal?: boolean;
    /**
     * Variable name
     */
    sendLifetimeLocalVariable?: string;
    /**
     * Configure Key lifetime start time
     */
    sendLifetimeStartTime?: string;
}

export interface CiscoSecurityFeatureTemplateKeychain {
    /**
     * Specify the Key ID
     *   - Range: `0`-`2147483647`
     */
    keyId?: number;
    /**
     * Specify the name of the Keychain
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoSnmpFeatureTemplateCommunity {
    /**
     * Configure access permissions
     *   - Choices: `read-only`
     */
    authorization?: string;
    /**
     * Variable name
     */
    authorizationVariable?: string;
    /**
     * Set name of the SNMP community
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set name of the SNMP view
     */
    view?: string;
    /**
     * Variable name
     */
    viewVariable?: string;
}

export interface CiscoSnmpFeatureTemplateGroup {
    /**
     * Name of the SNMP group
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure security level
     *   - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
     */
    securityLevel?: string;
    /**
     * Name of the SNMP view
     */
    view?: string;
    /**
     * Variable name
     */
    viewVariable?: string;
}

export interface CiscoSnmpFeatureTemplateTrapTarget {
    /**
     * Set name of the SNMP community
     */
    communityName?: string;
    /**
     * Variable name
     */
    communityNameVariable?: string;
    /**
     * Set IPv4/IPv6 address of SNMP server
     */
    ip?: string;
    /**
     * Variable name
     */
    ipVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Source interface for outgoing SNMP traps
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set UDP port number to connect to SNMP server
     *   - Range: `1`-`65535`
     */
    udpPort?: number;
    /**
     * Variable name
     */
    udpPortVariable?: string;
    /**
     * Set name of the SNMP user
     */
    user?: string;
    /**
     * Variable name
     */
    userVariable?: string;
    /**
     * Set VPN in which SNMP server is located
     *   - Range: `0`-`65530`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoSnmpFeatureTemplateUser {
    /**
     * Specify authentication protocol password
     */
    authenticationPassword?: string;
    /**
     * Variable name
     */
    authenticationPasswordVariable?: string;
    /**
     * Configure authentication protocol
     *   - Choices: `md5`, `sha`
     */
    authenticationProtocol?: string;
    /**
     * Variable name
     */
    authenticationProtocolVariable?: string;
    /**
     * Name of the SNMP group
     */
    group?: string;
    /**
     * Variable name
     */
    groupVariable?: string;
    /**
     * Name of the SNMP user
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Specify privacy protocol password
     */
    privacyPassword?: string;
    /**
     * Variable name
     */
    privacyPasswordVariable?: string;
    /**
     * Configure privacy protocol
     *   - Choices: `aes-cfb-128`, `aes-256-cfb-128`
     */
    privacyProtocol?: string;
    /**
     * Variable name
     */
    privacyProtocolVariable?: string;
}

export interface CiscoSnmpFeatureTemplateView {
    /**
     * Set the name of the SNMP view
     */
    name?: string;
    /**
     * Configure SNMP object identifier
     */
    objectIdentifiers?: outputs.CiscoSnmpFeatureTemplateViewObjectIdentifier[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoSnmpFeatureTemplateViewObjectIdentifier {
    /**
     * Exclude the OID
     *   - Default value: `false`
     */
    exclude?: boolean;
    /**
     * Variable name
     */
    excludeVariable?: string;
    /**
     * Configure identifier of subtree of MIB objects
     */
    id?: string;
    /**
     * Variable name
     */
    idVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber {
    /**
     * Mobile number, ex: +1231234414
     */
    number?: string;
    /**
     * Variable name
     */
    numberVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoSystemFeatureTemplateObjectTracker {
    /**
     * Type of grouping to be performed for tracker group
     *   - Choices: `and`, `or`
     */
    boolean?: string;
    /**
     * Variable name
     */
    booleanVariable?: string;
    /**
     * Tracks id in group configuration
     */
    groupTracksIds?: outputs.CiscoSystemFeatureTemplateObjectTrackerGroupTracksId[];
    /**
     * interface name
     */
    interface?: string;
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * IP address of route
     */
    ip?: string;
    /**
     * Variable name
     */
    ipVariable?: string;
    /**
     * Route Ip Mask
     *   - Default value: `0.0.0.0`
     */
    mask?: string;
    /**
     * Variable name
     */
    maskVariable?: string;
    /**
     * Object tracker ID
     *   - Range: `1`-`1000`
     */
    objectNumber?: number;
    /**
     * Variable name
     */
    objectNumberVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * service sig
     */
    sig?: string;
    /**
     * Variable name
     */
    sigVariable?: string;
    /**
     * VPN
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    vpnId?: number;
}

export interface CiscoSystemFeatureTemplateObjectTrackerGroupTracksId {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Track id
     *   - Range: `1`-`1000`
     */
    trackId?: number;
    /**
     * Variable name
     */
    trackIdVariable?: string;
}

export interface CiscoSystemFeatureTemplateTracker {
    /**
     * Type of grouping to be performed for tracker group
     *   - Choices: `or`, `and`
     *   - Default value: `or`
     */
    boolean?: string;
    /**
     * Variable name
     */
    booleanVariable?: string;
    /**
     * Tracker member names separated by space
     */
    elements?: string[];
    /**
     * Variable name
     */
    elementsVariable?: string;
    /**
     * API url of endpoint
     */
    endpointApiUrl?: string;
    /**
     * Variable name
     */
    endpointApiUrlVariable?: string;
    /**
     * DNS name of endpoint
     */
    endpointDnsName?: string;
    /**
     * Variable name
     */
    endpointDnsNameVariable?: string;
    /**
     * IP address of endpoint
     */
    endpointIp?: string;
    /**
     * Variable name
     */
    endpointIpVariable?: string;
    /**
     * Probe interval <10..600> seconds
     *   - Range: `20`-`600`
     *   - Default value: `60`
     */
    interval?: number;
    /**
     * Variable name
     */
    intervalVariable?: string;
    /**
     * Probe failure multiplier <1..10> failed attempts
     *   - Range: `1`-`10`
     *   - Default value: `3`
     */
    multiplier?: number;
    /**
     * Variable name
     */
    multiplierVariable?: string;
    /**
     * Tracker name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Probe Timeout threshold <100..1000> milliseconds
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     */
    threshold?: number;
    /**
     * Variable name
     */
    thresholdVariable?: string;
    /**
     * Default(Interface)
     *   - Choices: `tracker-group`, `interface`, `static-route`
     *   - Default value: `interface`
     */
    type?: string;
    /**
     * Variable name
     */
    typeVariable?: string;
}

export interface CiscoThousandeyesFeatureTemplateVirtualApplication {
    /**
     * List of Virtual applications
     *   - Default value: `te`
     */
    applicationType?: string;
    /**
     * List of Virtual applications
     *   - Default value: `1`
     */
    instanceId?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the Account Group Token
     */
    teAccountGroupToken?: string;
    /**
     * Variable name
     */
    teAccountGroupTokenVariable?: string;
    /**
     * Set the Agent IP Address
     */
    teAgentIp?: string;
    /**
     * Variable name
     */
    teAgentIpVariable?: string;
    /**
     * Set the Agent default gateway
     */
    teDefaultGateway?: string;
    /**
     * Variable name
     */
    teDefaultGatewayVariable?: string;
    /**
     * Set the host name
     */
    teHostname?: string;
    /**
     * Variable name
     */
    teHostnameVariable?: string;
    /**
     * Set the name server
     */
    teNameServer?: string;
    /**
     * Variable name
     */
    teNameServerVariable?: string;
    /**
     * PAC URL
     */
    tePacUrl?: string;
    /**
     * Variable name
     */
    tePacUrlVariable?: string;
    /**
     * Set the proxy host
     */
    teProxyHost?: string;
    /**
     * Variable name
     */
    teProxyHostVariable?: string;
    /**
     * Set the proxy port
     *   - Range: `0`-`65535`
     */
    teProxyPort?: number;
    /**
     * Variable name
     */
    teProxyPortVariable?: string;
    /**
     * VPN number
     *   - Range: `1`-`65535`
     */
    teVpn?: number;
    /**
     * Variable name
     */
    teVpnVariable?: string;
    /**
     * Web Proxy Type
     *   - Choices: `none`, `static`, `pac`
     *   - Default value: `none`
     */
    teWebProxyType?: string;
}

export interface CiscoTrustsecFeatureTemplateSxpConnection {
    /**
     * Configure Connection Maximum hold time <0..65535>
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     */
    maximumHoldTime?: number;
    /**
     * Variable name
     */
    maximumHoldTimeVariable?: string;
    /**
     * Configure Connection Minimum hold time <0..65535>
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     */
    minimumHoldTime?: number;
    /**
     * Variable name
     */
    minimumHoldTimeVariable?: string;
    /**
     * Define Mode of connection
     *   - Choices: `local`, `peer`
     *   - Default value: `local`
     */
    mode?: string;
    /**
     * Define Role of a device <speaker/listener/both>
     *   - Choices: `listener`, `speaker`, `both`
     *   - Default value: `speaker`
     */
    modeType?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure SXP Peer IP address (IPv4)
     */
    peerIp?: string;
    /**
     * Define Preshared Key type
     *   - Choices: `default`, `key-chain`, `none`
     *   - Default value: `none`
     */
    presharedKey?: string;
    /**
     * Configure SXP Source IP address (IPv4)
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Configure Connection VPN (VRF) ID
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoVpnFeatureTemplateDnsHost {
    /**
     * Hostname
     */
    hostname?: string;
    /**
     * Variable name
     */
    hostnameVariable?: string;
    /**
     * Variable name
     */
    ipVariable?: string;
    /**
     * List of IP
     */
    ips?: string[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnFeatureTemplateDnsIpv4Server {
    /**
     * DNS Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Role
     *   - Choices: `primary`, `secondary`
     *   - Default value: `primary`
     */
    role?: string;
    /**
     * Variable name
     */
    roleVariable?: string;
}

export interface CiscoVpnFeatureTemplateDnsIpv6Server {
    /**
     * DNS Address
     */
    address?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Role
     *   - Choices: `primary`, `secondary`
     *   - Default value: `primary`
     */
    role?: string;
    /**
     * Variable name
     */
    roleVariable?: string;
}

export interface CiscoVpnFeatureTemplateIpv4StaticGreRoute {
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * List of GRE Interfaces
     */
    interfaces?: string[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * Destination VPN to resolve the prefix
     *   - Default value: `0`
     */
    vpnId?: number;
}

export interface CiscoVpnFeatureTemplateIpv4StaticIpsecRoute {
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * List of IPSEC Interfaces (Separated by commas)
     */
    interfaces?: string[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * Destination VPN to resolve the prefix
     *   - Default value: `0`
     */
    vpnId?: number;
}

export interface CiscoVpnFeatureTemplateIpv4StaticRoute {
    /**
     * Default Gateway obtained from DHCP
     *   - Default value: `false`
     */
    dhcp?: boolean;
    /**
     * Variable name
     */
    dhcpVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    distance?: number;
    /**
     * Variable name
     */
    distanceVariable?: string;
    /**
     * IP gateway address
     */
    nextHops?: outputs.CiscoVpnFeatureTemplateIpv4StaticRouteNextHop[];
    /**
     * null0
     *   - Default value: `false`
     */
    null0?: boolean;
    /**
     * Variable name
     */
    null0Variable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * IP gateway address
     */
    trackNextHops?: outputs.CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop[];
    /**
     * Destination VPN(!=0 or !=512) to resolve the prefix
     *   - Default value: `0`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoVpnFeatureTemplateIpv4StaticRouteNextHop {
    /**
     * IP Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    distance?: number;
    /**
     * Variable name
     */
    distanceVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop {
    /**
     * IP Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    distance?: number;
    /**
     * Variable name
     */
    distanceVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Static route tracker
     */
    tracker?: string;
    /**
     * Variable name
     */
    trackerVariable?: string;
}

export interface CiscoVpnFeatureTemplateIpv4StaticServiceRoute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * Service
     *   - Choices: `sig`
     *   - Default value: `sig`
     */
    service?: string;
    /**
     * Destination VPN to resolve the prefix
     *   - Default value: `0`
     */
    vpnId?: number;
}

export interface CiscoVpnFeatureTemplateIpv6StaticRoute {
    /**
     * NAT
     *   - Choices: `NAT64`, `NAT66`
     *   - Default value: `NAT64`
     */
    nat?: string;
    /**
     * Variable name
     */
    natVariable?: string;
    /**
     * IP gateway address
     */
    nextHops?: outputs.CiscoVpnFeatureTemplateIpv6StaticRouteNextHop[];
    /**
     * null0
     *   - Default value: `false`
     */
    null0?: boolean;
    /**
     * Variable name
     */
    null0Variable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
    /**
     * Destination VPN(!=0 or !=512) to resolve the prefix
     *   - Default value: `0`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoVpnFeatureTemplateIpv6StaticRouteNextHop {
    /**
     * IP Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    distance?: number;
    /**
     * Variable name
     */
    distanceVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnFeatureTemplateNat64Pool {
    /**
     * Ending IP address of NAT pool range
     */
    endAddress?: string;
    /**
     * Variable name
     */
    endAddressVariable?: string;
    /**
     * Enable Route Leaking from Global VPN to this Service VPN
     *   - Default value: `false`
     */
    leakFromGlobal?: boolean;
    /**
     * Select protocol for route leaking
     *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
     */
    leakFromGlobalProtocol?: string;
    /**
     * Enable Route Leaking from this Service VPN to Global VPN
     *   - Default value: `false`
     */
    leakToGlobal?: boolean;
    /**
     * NAT64 Pool name
     */
    name?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * NAT 64 Overload Option
     *   - Default value: `false`
     */
    overload?: boolean;
    /**
     * Variable name
     */
    overloadVariable?: string;
    /**
     * Starting IP address of NAT pool range
     */
    startAddress?: string;
    /**
     * Variable name
     */
    startAddressVariable?: string;
}

export interface CiscoVpnFeatureTemplateNatPool {
    /**
     * Direction of NAT translation
     *   - Choices: `inside`, `outside`
     */
    direction?: string;
    /**
     * Variable name
     */
    directionVariable?: string;
    /**
     * NAT Pool Name, natpool1..31
     *   - Range: `1`-`31`
     */
    name?: number;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Enable port translation(PAT)
     *   - Default value: `true`
     */
    overload?: boolean;
    /**
     * Variable name
     */
    overloadVariable?: string;
    /**
     * Ending IP address of NAT Pool Prefix Length
     *   - Range: `1`-`32`
     */
    prefixLength?: number;
    /**
     * Variable name
     */
    prefixLengthVariable?: string;
    /**
     * Ending IP address of NAT pool range
     */
    rangeEnd?: string;
    /**
     * Variable name
     */
    rangeEndVariable?: string;
    /**
     * Starting IP address of NAT pool range
     */
    rangeStart?: string;
    /**
     * Variable name
     */
    rangeStartVariable?: string;
    /**
     * Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     */
    trackerId?: number;
    /**
     * Variable name
     */
    trackerIdVariable?: string;
}

export interface CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    prefixes?: outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix[];
    /**
     * Advertised routes protocol
     *   - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable?: string;
    protocolSubTypes?: string[];
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Set Route Policy to OMP
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix {
    /**
     * Aggregate Only
     *   - Default value: `false`
     */
    aggregateOnly?: boolean;
    /**
     * Variable name
     */
    aggregateOnlyVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefixEntry?: string;
    /**
     * Variable name
     */
    prefixEntryVariable?: string;
}

export interface CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    prefixes?: outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix[];
    /**
     * Advertised routes protocol
     *   - Choices: `bgp`, `ospf`, `connected`, `static`, `network`, `aggregate`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable?: string;
    protocolSubTypes?: string[];
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix {
    /**
     * Aggregate Only
     *   - Default value: `false`
     */
    aggregateOnly?: boolean;
    /**
     * Variable name
     */
    aggregateOnlyVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Prefix
     */
    prefixEntry?: string;
    /**
     * Variable name
     */
    prefixEntryVariable?: string;
}

export interface CiscoVpnFeatureTemplatePortForwardRule {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * NAT Pool Name, natpool1..31
     */
    poolName?: number;
    /**
     * Variable name
     */
    poolNameVariable?: string;
    /**
     * Protocol
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Source IP address to be translated
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Source Port
     *   - Default value: `0`
     */
    sourcePort?: number;
    /**
     * Variable name
     */
    sourcePortVariable?: string;
    /**
     * Statically translated source IP address
     */
    translateIp?: string;
    /**
     * Variable name
     */
    translateIpVariable?: string;
    /**
     * Translate Port
     *   - Default value: `0`
     */
    translatePort?: number;
    /**
     * Variable name
     */
    translatePortVariable?: string;
}

export interface CiscoVpnFeatureTemplateRouteGlobalExport {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
     *   - Choices: `static`, `connected`, `bgp`, `eigrp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable?: string;
    /**
     * - Default value: `external`
     */
    protocolSubTypes?: string[];
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Enable redistribution of replicated route protocol
     */
    redistributes?: outputs.CiscoVpnFeatureTemplateRouteGlobalExportRedistribute[];
    /**
     * Select a Route Policy to enable route leaking from this Service VPN to Global VPN
     */
    routePolicy?: string;
}

export interface CiscoVpnFeatureTemplateRouteGlobalExportRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select a Route Protocol to enable redistribution
     *   - Choices: `bgp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Select a Route Policy to enable redistribution
     */
    routePolicy?: string;
}

export interface CiscoVpnFeatureTemplateRouteGlobalImport {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
     *   - Choices: `static`, `connected`, `bgp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable?: string;
    /**
     * - Default value: `external`
     */
    protocolSubTypes?: string[];
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Enable redistribution of replicated route protocol
     */
    redistributes?: outputs.CiscoVpnFeatureTemplateRouteGlobalImportRedistribute[];
    /**
     * Select a Route Policy to enable route leaking from Global VPN to this Service VPN
     */
    routePolicy?: string;
}

export interface CiscoVpnFeatureTemplateRouteGlobalImportRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select a Route Protocol to enable redistribution
     *   - Choices: `bgp`, `eigrp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Select a Route Policy to enable redistribution
     */
    routePolicy?: string;
}

export interface CiscoVpnFeatureTemplateRouteVpnImport {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select a Route Protocol to enable route leaking to current VPN
     *   - Choices: `static`, `connected`, `bgp`, `ospf`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable?: string;
    /**
     * - Default value: `external`
     */
    protocolSubTypes?: string[];
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Enable redistribution of replicated route protocol
     */
    redistributes?: outputs.CiscoVpnFeatureTemplateRouteVpnImportRedistribute[];
    /**
     * Select a Route Policy to enable route leaking to current VPN
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
    /**
     * Select a Source VPN where route leaks from
     *   - Range: `1`-`65530`
     *   - Default value: `1`
     */
    sourceVpnId?: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable?: string;
}

export interface CiscoVpnFeatureTemplateRouteVpnImportRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Select a Route Protocol to enable redistribution
     *   - Choices: `bgp`, `eigrp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Select a Route Policy to enable redistribution
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface CiscoVpnFeatureTemplateService {
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * List of IPv4 address
     */
    addresses?: string[];
    /**
     * Tracking Service
     */
    interface?: string;
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Service Type
     *   - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
     */
    serviceTypes?: string;
    /**
     * Tracking Service
     *   - Default value: `true`
     */
    trackEnable?: boolean;
    /**
     * Variable name
     */
    trackEnableVariable?: string;
}

export interface CiscoVpnFeatureTemplateStaticNatRule {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * NAT Pool Name, natpool1..31
     */
    poolName?: number;
    /**
     * Variable name
     */
    poolNameVariable?: string;
    /**
     * Source IP address to be translated
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     */
    staticNatDirection?: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable?: string;
    /**
     * Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     */
    trackerId?: number;
    /**
     * Variable name
     */
    trackerIdVariable?: string;
    /**
     * Statically translated source IP address
     */
    translateIp?: string;
    /**
     * Variable name
     */
    translateIpVariable?: string;
}

export interface CiscoVpnFeatureTemplateStaticNatSubnetRule {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Network Prefix Length
     *   - Range: `1`-`32`
     */
    prefixLength?: number;
    /**
     * Variable name
     */
    prefixLengthVariable?: string;
    /**
     * Source IP Subnet to be translated
     */
    sourceIpSubnet?: string;
    /**
     * Variable name
     */
    sourceIpSubnetVariable?: string;
    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     */
    staticNatDirection?: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable?: string;
    /**
     * Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     */
    trackerId?: number;
    /**
     * Variable name
     */
    trackerIdVariable?: string;
    /**
     * Statically translated source IP Subnet
     */
    translateIpSubnet?: string;
    /**
     * Variable name
     */
    translateIpSubnetVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress {
    /**
     * IP Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv4Vrrp {
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * Assign IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * VRRP Secondary IP address
     */
    ipv4SecondaryAddresses?: outputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `100`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * change TLOC preference
     *   - Default value: `false`
     */
    tlocPreferenceChange?: boolean;
    /**
     * Set tloc preference change value
     *   - Range: `1`-`4294967295`
     */
    tlocPreferenceChangeValue?: number;
    /**
     * Variable name
     */
    tlocPreferenceChangeValueVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Track Prefix List
     */
    trackPrefixList?: string;
    /**
     * Variable name
     */
    trackPrefixListVariable?: string;
    /**
     * tracking object for VRRP configuration
     */
    trackingObjects?: outputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject[];
}

export interface CiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress {
    /**
     * VRRP Secondary IP address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     *   - Range: `1`-`255`
     */
    decrementValue?: number;
    /**
     * Variable name
     */
    decrementValueVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Track Action
     *   - Choices: `decrement`, `shutdown`
     *   - Default value: `decrement`
     */
    trackAction?: string;
    /**
     * Variable name
     */
    trackActionVariable?: string;
    /**
     * Tracker ID
     *   - Range: `1`-`1000`
     */
    trackerId?: number;
    /**
     * Variable name
     */
    trackerIdVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * DHCPv6 Helper VPN
     *   - Range: `1`-`65536`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress {
    /**
     * IPv6 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv6Vrrp {
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * IPv6 VRRP
     */
    ipv6Addresses?: outputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `100`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Variable name
     */
    trackOmpVariable?: string;
    /**
     * Track Prefix List
     */
    trackPrefixList?: string;
    /**
     * Variable name
     */
    trackPrefixListVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address {
    /**
     * Use link-local IPv6 Address
     */
    ipv6LinkLocal?: string;
    /**
     * Variable name
     */
    ipv6LinkLocalVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Assign Global IPv6 Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateStaticArp {
    /**
     * IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC address
     */
    mac?: string;
    /**
     * Variable name
     */
    macVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoVpnInterfaceFeatureTemplateStaticNat66Entry {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Source Prefix
     */
    sourcePrefix?: string;
    /**
     * Variable name
     */
    sourcePrefixVariable?: string;
    /**
     * Source VPN ID
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    sourceVpnId?: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable?: string;
    /**
     * Translated Source Prefix
     */
    translatedSourcePrefix?: string;
    /**
     * Variable name
     */
    translatedSourcePrefixVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateStaticNatEntry {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Source IP address to be translated
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Configure VPN ID
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    sourceVpnId?: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable?: string;
    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     *   - Default value: `inside`
     */
    staticNatDirection?: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable?: string;
    /**
     * Statically translated source IP address
     */
    translateIp?: string;
    /**
     * Variable name
     */
    translateIpVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Protocol
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Source IP address to be translated
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Source Port
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     */
    sourcePort?: number;
    /**
     * Variable name
     */
    sourcePortVariable?: string;
    /**
     * Configure VPN ID
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    sourceVpnId?: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable?: string;
    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     *   - Default value: `inside`
     */
    staticNatDirection?: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable?: string;
    /**
     * Statically translated source IP address
     */
    translateIp?: string;
    /**
     * Variable name
     */
    translateIpVariable?: string;
    /**
     * Translate Port
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     */
    translatePort?: number;
    /**
     * Variable name
     */
    translatePortVariable?: string;
}

export interface CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface CiscoVpnInterfaceGreFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface CiscoWirelessLanFeatureTemplateSsid {
    /**
     * Set admin state
     *   - Default value: `true`
     */
    adminState?: boolean;
    /**
     * Variable name
     */
    adminStateVariable?: string;
    /**
     * Enable broadcast SSID
     *   - Default value: `true`
     */
    broadcastSsid?: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set passphrase
     */
    passphrase?: string;
    /**
     * Variable name
     */
    passphraseVariable?: string;
    /**
     * Select QoS profile
     *   - Choices: `platinum`, `gold`, `silver`, `bronze`
     *   - Default value: `silver`
     */
    qosProfile?: string;
    /**
     * Variable name
     */
    qosProfileVariable?: string;
    /**
     * Select radio type
     *   - Choices: `24ghz`, `5ghz`, `all`
     *   - Default value: `all`
     */
    radioType?: string;
    /**
     * Variable name
     */
    radioTypeVariable?: string;
    /**
     * Set RADIUS server IP
     */
    radiusServerIp?: string;
    /**
     * Variable name
     */
    radiusServerIpVariable?: string;
    /**
     * Set RADIUS server authentication port
     *   - Range: `1`-`65535`
     *   - Default value: `1812`
     */
    radiusServerPort?: number;
    /**
     * Variable name
     */
    radiusServerPortVariable?: string;
    /**
     * Set RADIUS server shared secret
     */
    radiusServerSecret?: string;
    /**
     * Variable name
     */
    radiusServerSecretVariable?: string;
    /**
     * Select security type
     *   - Choices: `enterprise`, `personal`, `open`
     *   - Default value: `personal`
     */
    securityType?: string;
    /**
     * Variable name
     */
    securityTypeVariable?: string;
    /**
     * Set VLAN ID
     *   - Range: `1`-`4094`
     */
    vlanId?: number;
    /**
     * Variable name
     */
    vlanIdVariable?: string;
    /**
     * Configure wlan SSID
     */
    wirelessNetworkName?: string;
}

export interface ColorListPolicyObjectEntry {
    /**
     * Color
     *   - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
     */
    color: string;
}

export interface ConfigurationGroupDevice {
    /**
     * Deploy to device if enabled.
     *   - Default value: `false`
     */
    deploy: boolean;
    /**
     * Device ID
     */
    id?: string;
    /**
     * List of variables
     */
    variables?: outputs.ConfigurationGroupDeviceVariable[];
}

export interface ConfigurationGroupDeviceVariable {
    /**
     * Use this instead of `value` in case value is of type `List`.
     */
    listValues?: string[];
    /**
     * Variable name
     */
    name: string;
    /**
     * Variable value
     */
    value?: string;
}

export interface ConfigurationGroupTopologyDevice {
    /**
     * Criteria attribute
     *   - Choices: `tag`
     */
    criteriaAttribute: string;
    /**
     * Criteria value
     */
    criteriaValue?: string;
    /**
     * List of unsupported features
     */
    unsupportedFeatures?: outputs.ConfigurationGroupTopologyDeviceUnsupportedFeature[];
}

export interface ConfigurationGroupTopologyDeviceUnsupportedFeature {
    /**
     * Parcel ID
     */
    parcelId?: string;
    /**
     * Parcel type
     *   - Choices: `wan/vpn/interface/gre`, `wan/vpn/interface/ethernet`, `wan/vpn/interface/cellular`, `wan/vpn/interface/ipsec`, `wan/vpn/interface/serial`, `routing/ospf`, `lan/vpn/interface/ethernet`, `lan/vpn/interface/svi`, `lan/vpn/interface/ipsec`, `lan/vpn`
     */
    parcelType?: string;
}

export interface CustomControlTopologyPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.CustomControlTopologyPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `reject`
     *   - Choices: `accept`, `reject`
     */
    baseAction?: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * Sequence IP type, either `ipv4`, `ipv6` or `all`
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    ipType?: string;
    /**
     * List of match entries
     */
    matchEntries?: outputs.CustomControlTopologyPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
    /**
     * Sequence type, either `route` or `tloc`
     *   - Choices: `route`, `tloc`
     */
    type?: string;
}

export interface CustomControlTopologyPolicyDefinitionSequenceActionEntry {
    /**
     * Export to VPN list ID, Attribute conditional on `type` being equal to `exportTo`
     */
    exportToVpnListId?: string;
    /**
     * Export to VPN list version
     */
    exportToVpnListVersion?: number;
    /**
     * List of set parameters, Attribute conditional on `type` being equal to `set`
     */
    setParameters?: outputs.CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Type of action entry
     *   - Choices: `set`, `exportTo`
     */
    type: string;
}

export interface CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     */
    community?: string;
    /**
     * Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     */
    communityAdditive?: boolean;
    /**
     * OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Service TLOC color, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocColor?: string;
    /**
     * Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`
     */
    serviceTlocEncapsulation?: string;
    /**
     * Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocIp?: string;
    /**
     * Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocListId?: string;
    /**
     * Service TLOC list version
     */
    serviceTlocListVersion?: number;
    /**
     * Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     */
    serviceType?: string;
    /**
     * Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     */
    serviceVpnId?: number;
    /**
     * TLOC action, Attribute conditional on `type` being equal to `tlocAction`
     *   - Choices: `strict`, `primary`, `backup`, `ecmp`
     */
    tlocAction?: string;
    /**
     * TLOC color, Attribute conditional on `type` being equal to `tloc`
     */
    tlocColor?: string;
    /**
     * TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     */
    tlocEncapsulation?: string;
    /**
     * TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     */
    tlocIp?: string;
    /**
     * TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     */
    tlocListId?: string;
    /**
     * TLOC list version
     */
    tlocListVersion?: number;
    /**
     * Type of set parameter
     *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
     */
    type: string;
}

export interface CustomControlTopologyPolicyDefinitionSequenceMatchEntry {
    /**
     * Carrier, Attribute conditional on `type` being equal to `carrier`
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     */
    carrier?: string;
    /**
     * Color list ID, Attribute conditional on `type` being equal to `colorList`
     */
    colorListId?: string;
    /**
     * Color list version
     */
    colorListVersion?: number;
    /**
     * Community list ID, Attribute conditional on `type` being equal to `community`
     */
    communityListId?: string;
    /**
     * Community list version
     */
    communityListVersion?: number;
    /**
     * Domain ID, Attribute conditional on `type` being equal to `domainId`
     *   - Range: `0`-`4294967295`
     */
    domainId?: number;
    /**
     * Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
     */
    expandedCommunityListId?: string;
    /**
     * Expanded community list version
     */
    expandedCommunityListVersion?: number;
    /**
     * Group ID, Attribute conditional on `type` being equal to `groupId`
     *   - Range: `0`-`4294967295`
     */
    groupId?: number;
    /**
     * OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`, `aggregrate`, `bgp`, `bgp-external`, `bgp-internal`, `connected`, `eigrp`, `ospf`, `ospf-inter-area`, `ospf-intra-area`, `ospf-external1`, `ospf-external2`, `rip`, `static`, `eigrp-summary`, `eigrp-internal`, `eigrp-external`, `lisp`, `nat-dia`, `natpool`, `isis`, `isis-level1`, `isis-level2`
     */
    origin?: string;
    /**
     * Originator IP, Attribute conditional on `type` being equal to `originator`
     */
    originator?: string;
    /**
     * Path type, Attribute conditional on `type` being equal to `pathType`
     *   - Choices: `hierarchical-path`, `direct-path`, `transport-gateway-path`
     */
    pathType?: string;
    /**
     * Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Prefix list ID, Attribute conditional on `type` being equal to `prefixList`
     */
    prefixListId?: string;
    /**
     * Prefix list version
     */
    prefixListVersion?: number;
    /**
     * Site ID, Attribute conditional on `type` being equal to `siteId`
     *   - Range: `0`-`4294967295`
     */
    siteId?: number;
    /**
     * Site list ID, Attribute conditional on `type` being equal to `siteList`
     */
    siteListId?: string;
    /**
     * Site list version
     */
    siteListVersion?: number;
    /**
     * TLOC color, Attribute conditional on `type` being equal to `tloc`
     */
    tlocColor?: string;
    /**
     * TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     */
    tlocEncapsulation?: string;
    /**
     * TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     */
    tlocIp?: string;
    /**
     * TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     */
    tlocListId?: string;
    /**
     * TLOC list version
     */
    tlocListVersion?: number;
    /**
     * Type of match entry
     *   - Choices: `colorList`, `community`, `expandedCommunity`, `ompTag`, `origin`, `originator`, `preference`, `siteList`, `pathType`, `tlocList`, `vpnList`, `prefixList`, `vpn`, `tloc`, `siteId`, `carrier`, `domainId`, `groupId`
     */
    type: string;
    /**
     * VPN ID, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65536`
     */
    vpnId?: number;
    /**
     * VPN list ID, Attribute conditional on `type` being equal to `vpnList`
     */
    vpnListId?: string;
    /**
     * VPN list version
     */
    vpnListVersion?: number;
}

export interface DataFqdnPrefixListPolicyObjectEntry {
    /**
     * Fully qualified domain name
     */
    fqdn: string;
}

export interface DataIpv4PrefixListPolicyObjectEntry {
    /**
     * IP prefix list entry, e.g. `10.0.0.0/12`
     */
    prefix: string;
}

export interface DataIpv6PrefixListPolicyObjectEntry {
    /**
     * IP prefix list entry, e.g. `2001:0:0:1::/64`
     */
    prefix: string;
}

export interface DnsSecurityPolicyDefinitionTargetVpn {
    /**
     * Only relevant when `umbrellaDnsDefault` is `false`
     */
    customDnsServerIp?: string;
    /**
     * Should the local domain bypass list be enabled
     */
    localDomainBypassEnabled?: boolean;
    /**
     * Should use umbrella as DNS Server
     */
    umbrellaDnsDefault?: boolean;
    /**
     * VPN ID's separated by Comma
     */
    vpnIds?: string[];
}

export interface DnsSecurityPolicyTargetVpn {
    /**
     * Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     */
    dnsServerIp?: string;
    /**
     * Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     */
    localDomainBypassEnabled?: boolean;
    /**
     * non empty interger string
     */
    uid?: string;
    /**
     * Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     */
    umbrellaDefault?: boolean;
    vpns?: string[];
}

export interface DomainListPolicyObjectEntry {
    /**
     * Domain name, must not start with `*`
     */
    domain?: string;
}

export interface EigrpFeatureTemplateAddressFamily {
    /**
     * Configure the networks for EIGRP to advertise
     */
    networks?: outputs.EigrpFeatureTemplateAddressFamilyNetwork[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Redistribute routes into EIGRP
     */
    redistributes?: outputs.EigrpFeatureTemplateAddressFamilyRedistribute[];
    /**
     * Set EIGRP address family
     *   - Choices: `ipv4`
     *   - Default value: `ipv4`
     */
    type?: string;
}

export interface EigrpFeatureTemplateAddressFamilyNetwork {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure the prefixes for EIGRP to announce
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface EigrpFeatureTemplateAddressFamilyRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Configure policy to apply to prefixes received from EIGRP neighbor
     */
    routePolicy?: string;
    /**
     * Variable name
     */
    routePolicyVariable?: string;
}

export interface EigrpFeatureTemplateInterface {
    /**
     * Set interface name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Enable/disable EIGRP
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Set summary addresses
     */
    summaryAddresses?: outputs.EigrpFeatureTemplateInterfaceSummaryAddress[];
}

export interface EigrpFeatureTemplateInterfaceSummaryAddress {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set summary address prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface EigrpFeatureTemplateKey {
    /**
     * Set MD5 key
     */
    md5AuthenticationKey?: string;
    /**
     * Variable name
     */
    md5AuthenticationKeyVariable?: string;
    /**
     * Set MD5 key ID
     *   - Range: `1`-`255`
     */
    md5KeyId?: number;
    /**
     * Variable name
     */
    md5KeyIdVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface ExpandedCommunityListPolicyObjectEntry {
    /**
     * Expanded community value, e.g. `100:1000`
     */
    community?: string;
}

export interface ExtendedCommunityListPolicyObjectEntry {
    /**
     * Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
     */
    community: string;
}

export interface FeatureDeviceTemplateGeneralTemplate {
    /**
     * Feature template ID
     */
    id: string;
    /**
     * List of sub templates
     */
    subTemplates?: outputs.FeatureDeviceTemplateGeneralTemplateSubTemplate[];
    /**
     * Feature template type
     *   - Choices: `ciscoSystem`, `ciscoLogging`, `cedgeAaa`, `ciscoBfd`, `ciscoOmp`, `ciscoSecurity`, `ciscoBanner`, `ciscoSnmp`, `cedgeGlobal`, `cli-template`, `ciscoSigCredentials`, `switchport`, `ciscoThousandeyes`, `ciscoVpn`, `virtual-application-utd`, `cellular-cedge-controller`
     */
    type: string;
    /**
     * Feature template version
     */
    version?: number;
}

export interface FeatureDeviceTemplateGeneralTemplateSubTemplate {
    /**
     * Feature template ID
     */
    id: string;
    /**
     * List of sub templates
     */
    subTemplates?: outputs.FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate[];
    /**
     * Feature template type
     *   - Choices: `ciscoLogging`, `ciscoNtp`, `ciscoOspf`, `ciscoBgp`, `ciscoVpnInterface`, `ciscoVpnInterfaceGre`, `ciscoVpnInterfaceIpsec`, `vpn-interface-svi`, `vpn-cedge-interface-cellular`, `ciscoSecureInternetGateway`
     */
    type: string;
    /**
     * Feature template version
     */
    version?: number;
}

export interface FeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate {
    /**
     * Feature template ID
     */
    id: string;
    /**
     * Feature template type
     *   - Choices: `ciscoDhcpServer`, `cellular-cedge-profile`
     */
    type: string;
    /**
     * Feature template version
     */
    version?: number;
}

export interface GeoLocationListPolicyObjectEntry {
    /**
     * Continent
     *   - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
     */
    continent?: string;
    /**
     * Country
     */
    country?: string;
}

export interface GetAllowUrlListPolicyObjectEntry {
    /**
     * URL
     */
    url: string;
}

export interface GetAppProbeClassPolicyObjectMapping {
    /**
     * Color
     */
    color: string;
    /**
     * DSCP
     */
    dscp: number;
}

export interface GetApplicationAwareRoutingPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntry[];
    /**
     * Sequence ID
     */
    id: number;
    /**
     * Sequence IP type, either `ipv4`, `ipv6` or `all`
     */
    ipType: string;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntry {
    /**
     * Backup SLA preferred color (Single value or multiple values separated by spaces)
     */
    backupSlaPreferredColor: string;
    /**
     * Cloud SLA
     */
    cloudSla: boolean;
    /**
     * Counter name
     */
    counter: string;
    /**
     * Enable logging
     */
    log: boolean;
    /**
     * List of SLA class parameters
     */
    slaClassParameters: outputs.GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter[];
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameter {
    /**
     * preferred color (Single value or multiple values separated by spaces)
     */
    preferredColor: string;
    /**
     * Preferred color group list ID
     */
    preferredColorGroupList: string;
    /**
     * Preferred color group list version
     */
    preferredColorGroupListVersion: number;
    /**
     * SLA class list ID
     */
    slaClassList: string;
    /**
     * SLA class list version
     */
    slaClassListVersion: number;
    /**
     * Type of SLA class parameter
     */
    type: string;
}

export interface GetApplicationAwareRoutingPolicyDefinitionSequenceMatchEntry {
    /**
     * Application list ID
     */
    applicationListId: string;
    /**
     * Application list version
     */
    applicationListVersion: number;
    /**
     * Destination Data Prefix list ID
     */
    destinationDataPrefixListId: string;
    /**
     * Destination Data Prefix list version
     */
    destinationDataPrefixListVersion: number;
    /**
     * Destination IP
     */
    destinationIp: string;
    /**
     * Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
     */
    destinationPort: string;
    /**
     * Destination region
     */
    destinationRegion: string;
    /**
     * DNS request or response
     */
    dns: string;
    /**
     * DNS Application list ID
     */
    dnsApplicationListId: string;
    /**
     * DNS Application list version
     */
    dnsApplicationListVersion: number;
    /**
     * DSCP value
     */
    dscp: number;
    /**
     * ICMP Message
     */
    icmpMessage: string;
    /**
     * PLP
     */
    plp: string;
    /**
     * IP Protocol, 0-255 (Single value or multiple values separated by spaces)
     */
    protocol: string;
    /**
     * Source Data Prefix list ID
     */
    sourceDataPrefixListId: string;
    /**
     * Source Data Prefix list version
     */
    sourceDataPrefixListVersion: number;
    /**
     * Source IP
     */
    sourceIp: string;
    /**
     * Source port, 0-65535 (Single value, range or multiple values separated by spaces)
     */
    sourcePort: string;
    /**
     * Traffic to
     */
    trafficTo: string;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetApplicationListPolicyObjectEntry {
    /**
     * Application name
     */
    application: string;
    /**
     * Application family name
     */
    applicationFamily: string;
}

export interface GetApplicationPriorityQosPolicyQosScheduler {
    /**
     * bandwidthPercent
     */
    bandwidth: string;
    /**
     * drops
     */
    drops: string;
    forwardingClassId: string;
    /**
     * queue
     */
    queue: string;
    /**
     * scheduling
     */
    schedulingType: string;
}

export interface GetApplicationPriorityTrafficPolicyPolicySequence {
    actions: outputs.GetApplicationPriorityTrafficPolicyPolicySequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    matchEntries: outputs.GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry[];
    /**
     * Sequence IP Type
     */
    protocol: string;
    /**
     * Sequence Id
     */
    sequenceId: number;
    /**
     * Sequence Name
     */
    sequenceName: string;
}

export interface GetApplicationPriorityTrafficPolicyPolicySequenceAction {
    /**
     * Backup SLA perferred color
     */
    backupSlaPreferredColors: string[];
    cloudProbe: boolean;
    cloudSaas: boolean;
    count: string;
    fallbackToRouting: boolean;
    log: boolean;
    lossCorrectFecThreshold: number;
    lossCorrectType: string;
    natBypass: boolean;
    natDiaInterfaces: string[];
    natDiaPools: number[];
    natFallback: boolean;
    natPool: number;
    natVpn: boolean;
    redirectDnsField: string;
    redirectDnsValue: string;
    secureInternetGateway: boolean;
    setParameters: outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter[];
    /**
     * slaClass
     */
    slaClasses: outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass[];
}

export interface GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter {
    dscp: number;
    forwardingClassListId: string;
    localTlocListColors: string[];
    localTlocListEncapsulation: string;
    localTlocListRestrict: string;
    nextHopIpv4: string;
    nextHopIpv6: string;
    nextHopLoose: boolean;
    policerId: string;
    preferredColorGroupId: string;
    preferredRemoteColorIds: string[];
    preferredRemoteColorRestrict: string;
    serviceChainFallbackToRouting: boolean;
    serviceChainLocal: boolean;
    serviceChainTlocColors: string[];
    serviceChainTlocEncapsulation: string;
    serviceChainTlocIp: string;
    serviceChainTlocListId: string;
    serviceChainType: string;
    serviceChainVpn: number;
    serviceTlocColors: string[];
    serviceTlocEncapsulation: string;
    serviceTlocIp: string;
    serviceTlocListId: string;
    serviceType: string;
    serviceVpn: string;
    tlocColors: string[];
    tlocEncapsulation: string;
    tlocIp: string;
    tlocListId: string;
    vpn: string;
}

export interface GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass {
    fallbackToBestPath: boolean;
    preferredColorGroupListId: string;
    preferredColors: string[];
    preferredRemoteColors: string[];
    remoteColorRestrict: boolean;
    slaClassListId: string;
    strict: boolean;
}

export interface GetApplicationPriorityTrafficPolicyPolicySequenceMatchEntry {
    applicationListId: string;
    destinationDataIpv4PrefixListId: string;
    destinationDataIpv6PrefixListId: string;
    /**
     * Destination Data IP Prefix
     */
    destinationIpv4Prefix: string;
    /**
     * Destination Data IP Prefix
     */
    destinationIpv6Prefix: string;
    /**
     * Destination Port (0-65535) range or individual number separated by space
     */
    destinationPorts: string[];
    /**
     * Destination Region
     */
    destinationRegion: string;
    /**
     * Dns
     */
    dns: string;
    dnsApplicationListId: string;
    /**
     * DSCP number
     */
    dscp: number;
    /**
     * ICMP6 Message
     */
    icmp6Messages: string[];
    /**
     * ICMP Message
     */
    icmpMessages: string[];
    /**
     * Packet Length
     */
    packetLength: string;
    /**
     * protocol (0-255) range or individual number separated by space
     */
    protocols: string[];
    saasApplicationListId: string;
    /**
     * M365 Service Area
     */
    serviceAreas: string[];
    sourceDataIpv4PrefxListId: string;
    sourceDataIpv6PrefxListId: string;
    /**
     * Source Data IP Prefix
     */
    sourceIpv4Prefix: string;
    /**
     * Source Data IP Prefix
     */
    sourceIpv6Prefix: string;
    /**
     * Source Port (0-65535) range or individual number separated by space
     */
    sourcePorts: string[];
    /**
     * TCP States
     */
    tcp: string;
    /**
     * M365 Traffic Category
     */
    trafficCategory: string;
    /**
     * Traffic Class
     */
    trafficClass: string;
    /**
     * Traffic to
     */
    trafficTo: string;
}

export interface GetAsPathListPolicyObjectEntry {
    /**
     * Regular expression to match the BGP AS paths e.g., `^1239_[0-9]*$`
     */
    asPath: string;
}

export interface GetBlockUrlListPolicyObjectEntry {
    /**
     * URL
     */
    url: string;
}

export interface GetCedgeAaaFeatureTemplateAccountingRule {
    /**
     * Comma separated list of groups
     */
    groups: string;
    /**
     * Configure Accounting Method
     */
    method: string;
    /**
     * Configure Accounting Rule ID
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Privilege level when method is commands
     */
    privilegeLevel: string;
    /**
     * Record start and stop without waiting
     */
    startStop: boolean;
    /**
     * Variable name
     */
    startStopVariable: string;
}

export interface GetCedgeAaaFeatureTemplateAuthorizationRule {
    /**
     * Succeed if user has authenticated
     */
    authenticated: boolean;
    /**
     * Comma separated list of groups
     */
    groups: string;
    /**
     * Method
     */
    method: string;
    /**
     * Configure Authorization Rule ID
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Privilege level when method is commands
     */
    privilegeLevel: string;
}

export interface GetCedgeAaaFeatureTemplateRadiusClient {
    /**
     * Client IP
     */
    clientIp: string;
    /**
     * Variable name
     */
    clientIpVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * VPN configuration
     */
    vpnConfigurations: outputs.GetCedgeAaaFeatureTemplateRadiusClientVpnConfiguration[];
}

export interface GetCedgeAaaFeatureTemplateRadiusClientVpnConfiguration {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Specify a RADIUS client server-key
     */
    serverKey: string;
    /**
     * Variable name
     */
    serverKeyVariable: string;
    /**
     * VPN ID
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCedgeAaaFeatureTemplateRadiusServerGroup {
    /**
     * Set Radius server Group Name
     */
    groupName: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the Radius server
     */
    servers: outputs.GetCedgeAaaFeatureTemplateRadiusServerGroupServer[];
    /**
     * Set interface to use to reach Radius server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which Radius server is located
     */
    vpnId: number;
}

export interface GetCedgeAaaFeatureTemplateRadiusServerGroupServer {
    /**
     * Set Accounting port to use to connect to Radius server
     */
    accountingPort: number;
    /**
     * Variable name
     */
    accountingPortVariable: string;
    /**
     * Set IP address of Radius server
     */
    address: string;
    /**
     * Set Authentication port to use to connect to Radius server
     */
    authenticationPort: number;
    /**
     * Variable name
     */
    authenticationPortVariable: string;
    /**
     * Type of encyption. To be used for type 6
     */
    encryptionType: string;
    /**
     * Set the Radius server shared key
     */
    key: string;
    /**
     * key type
     */
    keyType: string;
    /**
     * Variable name
     */
    keyTypeVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure how many times to contact this Radius server
     */
    retransmit: number;
    /**
     * Variable name
     */
    retransmitVariable: string;
    /**
     * Set the Radius server shared type 7 encrypted key
     */
    secretKey: string;
    /**
     * Variable name
     */
    secretKeyVariable: string;
    /**
     * Configure how long to wait for replies from the Radius server
     */
    timeout: number;
    /**
     * Variable name
     */
    timeoutVariable: string;
}

export interface GetCedgeAaaFeatureTemplateTacacsServerGroup {
    /**
     * Set TACACS server Group Name
     */
    groupName: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the TACACS server
     */
    servers: outputs.GetCedgeAaaFeatureTemplateTacacsServerGroupServer[];
    /**
     * Set interface to use to reach TACACS server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which TACACS server is located
     */
    vpnId: number;
}

export interface GetCedgeAaaFeatureTemplateTacacsServerGroupServer {
    /**
     * Set IP address of TACACS server
     */
    address: string;
    /**
     * Type of encyption. To be used for type 6
     */
    encryptionType: string;
    /**
     * Set the TACACS server shared key
     */
    key: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * TACACS Port
     */
    port: number;
    /**
     * Variable name
     */
    portVariable: string;
    /**
     * Set the TACACS server shared type 7 encrypted key
     */
    secretKey: string;
    /**
     * Variable name
     */
    secretKeyVariable: string;
    /**
     * Configure how long to wait for replies from the TACACS server
     */
    timeout: number;
    /**
     * Variable name
     */
    timeoutVariable: string;
}

export interface GetCedgeAaaFeatureTemplateUser {
    /**
     * Set the username
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the user password
     */
    password: string;
    /**
     * Set Privilege Level for this user
     */
    privilegeLevel: string;
    /**
     * Variable name
     */
    privilegeLevelVariable: string;
    /**
     * Set the user scrypt password/hash
     */
    secret: string;
    /**
     * List of RSA public-keys per user
     */
    sshPubkeys: outputs.GetCedgeAaaFeatureTemplateUserSshPubkey[];
}

export interface GetCedgeAaaFeatureTemplateUserSshPubkey {
    /**
     * Set the RSA key string
     */
    keyString: string;
    /**
     * Only RSA is supported
     */
    keyType: string;
    /**
     * Variable name
     */
    keyTypeVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCedgeIgmpFeatureTemplateInterface {
    /**
     * Configure static joins
     */
    joinGroups: outputs.GetCedgeIgmpFeatureTemplateInterfaceJoinGroup[];
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCedgeIgmpFeatureTemplateInterfaceJoinGroup {
    /**
     * Set group address
     */
    groupAddress: string;
    /**
     * Variable name
     */
    groupAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set source address
     */
    source: string;
    /**
     * Variable name
     */
    sourceVariable: string;
}

export interface GetCedgePimFeatureTemplateInterface {
    /**
     * Set interface name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
     */
    joinPruneInterval: number;
    /**
     * Variable name
     */
    joinPruneIntervalVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set PIM query interval
     */
    queryInterval: number;
    /**
     * Variable name
     */
    queryIntervalVariable: string;
}

export interface GetCedgePimFeatureTemplateRpAddress {
    /**
     * Set Static RP Access List
     */
    accessList: string;
    /**
     * Variable name
     */
    accessListVariable: string;
    /**
     * Set Static RP IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set override flag
     */
    override: boolean;
    /**
     * Variable name
     */
    overrideVariable: string;
}

export interface GetCedgePimFeatureTemplateRpAnnounceField {
    /**
     * Set RP Announce Interface Name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set RP Announce Scope
     */
    scope: number;
    /**
     * Variable name
     */
    scopeVariable: string;
}

export interface GetCedgePimFeatureTemplateRpCandidate {
    /**
     * Set IP Access List for PIM RP Candidate
     */
    accessList: string;
    /**
     * Variable name
     */
    accessListVariable: string;
    /**
     * Set Autonomic-Networking virtual interface
     */
    interface: string;
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * Set RP candidate advertisement interval
     */
    interval: number;
    /**
     * Variable name
     */
    intervalVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set RP candidate priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
}

export interface GetCellularControllerFeatureTemplateDataProfile {
    /**
     * Set attach profile
     */
    attachProfile: number;
    /**
     * Variable name
     */
    attachProfileVariable: string;
    /**
     * Set data profile
     */
    dataProfile: number;
    /**
     * Variable name
     */
    dataProfileVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set slot number
     */
    slotNumber: number;
    /**
     * Variable name
     */
    slotNumberVariable: string;
}

export interface GetCentralizedPolicyDefinition {
    /**
     * List of entries
     */
    entries: outputs.GetCentralizedPolicyDefinitionEntry[];
    /**
     * Policy definition ID
     */
    id: string;
    /**
     * Policy definition type
     */
    type: string;
    /**
     * Policy definition version
     */
    version: number;
}

export interface GetCentralizedPolicyDefinitionEntry {
    /**
     * Direction
     */
    direction: string;
    /**
     * List of region IDs
     */
    regionIds: string[];
    /**
     * List of region list IDs
     */
    regionListIds: string[];
    /**
     * List of region list versions
     */
    regionListVersions: string[];
    /**
     * List of site list IDs
     */
    siteListIds: string[];
    /**
     * List of site list versions
     */
    siteListVersions: string[];
    /**
     * List of VPN list IDs
     */
    vpnListIds: string[];
    /**
     * List of VPN list versions
     */
    vpnListVersions: string[];
}

export interface GetCflowdPolicyDefinitionCollector {
    /**
     * BFD metrics exporting
     */
    bfdMetricsExporting: boolean;
    /**
     * Export spreading
     */
    exportSpreading: string;
    /**
     * Exporting interval
     */
    exportingInterval: number;
    /**
     * IP address
     */
    ipAddress: string;
    /**
     * Port
     */
    port: number;
    /**
     * Source interface
     */
    sourceInterface: string;
    /**
     * Transport protocol
     */
    transport: string;
    /**
     * VPN ID
     */
    vpnId: number;
}

export interface GetCiscoBfdFeatureTemplateColor {
    /**
     * Set color that identifies the WAN transport tunnel
     */
    color: string;
    /**
     * Variable name
     */
    colorVariable: string;
    /**
     * Set BFD Default DSCP value for tloc color
     */
    dscp: number;
    /**
     * Variable name
     */
    dscpVariable: string;
    /**
     * Set how often BFD sends Hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set how many Hello packet intervals to wait before declaring that a tunnel has failed
     */
    multiplier: number;
    /**
     * Variable name
     */
    multiplierVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Control automatic path MTU discovery
     */
    pmtuDiscovery: boolean;
    /**
     * Variable name
     */
    pmtuDiscoveryVariable: string;
}

export interface GetCiscoBgpFeatureTemplateAddressFamily {
    /**
     * BGP Default Information Originate
     */
    defaultInformationOriginate: boolean;
    /**
     * Variable name
     */
    defaultInformationOriginateVariable: string;
    /**
     * Set BGP address family
     */
    familyType: string;
    /**
     * Aggregate prefixes in specific range
     */
    ipv4AggregateAddresses: outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress[];
    /**
     * Configure the networks for BGP to advertise
     */
    ipv4Networks: outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv4Network[];
    /**
     * IPv6 Aggregate prefixes in specific range
     */
    ipv6AggregateAddresses: outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress[];
    /**
     * Configure the networks for BGP to advertise
     */
    ipv6Networks: outputs.GetCiscoBgpFeatureTemplateAddressFamilyIpv6Network[];
    /**
     * Set maximum number of parallel IBGP paths for multipath load sharing
     */
    maximumPaths: number;
    /**
     * Variable name
     */
    maximumPathsVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Redistribute routes into BGP
     */
    redistributeRoutes: outputs.GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRoute[];
    /**
     * Filter
     */
    tableMapFilter: boolean;
    /**
     * Variable name
     */
    tableMapFilterVariable: string;
    /**
     * Map external entry attributes into routing table
     */
    tableMapPolicy: string;
    /**
     * Variable name
     */
    tableMapPolicyVariable: string;
}

export interface GetCiscoBgpFeatureTemplateAddressFamilyIpv4AggregateAddress {
    /**
     * Set AS set path information
     */
    asSetPath: boolean;
    /**
     * Variable name
     */
    asSetPathVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the prefixes to aggregate
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * Filter out more specific routes from updates
     */
    summaryOnly: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable: string;
}

export interface GetCiscoBgpFeatureTemplateAddressFamilyIpv4Network {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the prefixes for BGP to announce
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetCiscoBgpFeatureTemplateAddressFamilyIpv6AggregateAddress {
    /**
     * Set AS set path information
     */
    asSetPath: boolean;
    /**
     * Variable name
     */
    asSetPathVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the IPv6 prefixes to aggregate
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * Filter out more specific routes from updates
     */
    summaryOnly: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable: string;
}

export interface GetCiscoBgpFeatureTemplateAddressFamilyIpv6Network {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the prefixes for BGP to announce
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetCiscoBgpFeatureTemplateAddressFamilyRedistributeRoute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Configure policy to apply to prefixes received from BGP neighbor
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv4Neighbor {
    /**
     * Set neighbor address
     */
    address: string;
    /**
     * Set BGP address family
     */
    addressFamilies: outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * As Number
     */
    allowAsIn: number;
    /**
     * Variable name
     */
    allowAsInVariable: string;
    /**
     * As Override
     */
    asOverride: boolean;
    /**
     * Variable name
     */
    asOverrideVariable: string;
    /**
     * Set description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Set TTL value for peers that are not directly connected
     */
    ebgpMultihop: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     */
    holdtime: number;
    /**
     * Variable name
     */
    holdtimeVariable: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     */
    keepalive: number;
    /**
     * Variable name
     */
    keepaliveVariable: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     */
    nextHopSelf: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs: string;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Send community attribute
     */
    sendCommunity: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable: string;
    /**
     * Send extended community attribute
     */
    sendExtCommunity: boolean;
    /**
     * Variable name
     */
    sendExtCommunityVariable: string;
    /**
     * Send label
     */
    sendLabel: boolean;
    /**
     * Send label
     */
    sendLabelExplicit: boolean;
    /**
     * Variable name
     */
    sendLabelExplicitVariable: string;
    /**
     * Variable name
     */
    sendLabelVariable: string;
    /**
     * Enable or disable a BGP neighbor
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Set IP address of interface for TCP connection to BGP neighbor
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily {
    /**
     * Set BGP address family
     */
    familyType: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     */
    maximumPrefixes: number;
    /**
     * Set when to restart BGP connection if threshold is exceeded
     */
    maximumPrefixesRestart: number;
    /**
     * Variable name
     */
    maximumPrefixesRestartVariable: string;
    /**
     * Set threshold at which to generate a warning message
     */
    maximumPrefixesThreshold: number;
    /**
     * Variable name
     */
    maximumPrefixesThresholdVariable: string;
    /**
     * Variable name
     */
    maximumPrefixesVariable: string;
    /**
     * Display only a warning message when threshold is exceeded
     */
    maximumPrefixesWarningOnly: boolean;
    /**
     * Variable name
     */
    maximumPrefixesWarningOnlyVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select route policy to apply to prefixes received from BGP neighbor
     */
    routePolicies: outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy[];
}

export interface GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy {
    /**
     * Set direction for applying route policy
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure name of route policy
     */
    policyName: string;
    /**
     * Variable name
     */
    policyNameVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv4RouteTarget {
    /**
     * Export Target-VPN community for IPV4
     */
    exports: outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetExport[];
    /**
     * Import Target-VPN community for IPV4
     */
    imports: outputs.GetCiscoBgpFeatureTemplateIpv4RouteTargetImport[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * VPN ID for IPv4
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv4RouteTargetExport {
    /**
     * asn-ip
     */
    asnIp: string;
    /**
     * Variable name
     */
    asnIpVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoBgpFeatureTemplateIpv4RouteTargetImport {
    /**
     * asn-ip
     */
    asnIp: string;
    /**
     * Variable name
     */
    asnIpVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoBgpFeatureTemplateIpv6Neighbor {
    /**
     * Set neighbor address
     */
    address: string;
    /**
     * Set BGP address family
     */
    addressFamilies: outputs.GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * As Number
     */
    allowAsIn: number;
    /**
     * Variable name
     */
    allowAsInVariable: string;
    /**
     * As Override
     */
    asOverride: boolean;
    /**
     * Variable name
     */
    asOverrideVariable: string;
    /**
     * Set description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Set TTL value for peers that are not directly connected
     */
    ebgpMultihop: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     */
    holdtime: number;
    /**
     * Variable name
     */
    holdtimeVariable: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     */
    keepalive: number;
    /**
     * Variable name
     */
    keepaliveVariable: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     */
    nextHopSelf: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs: string;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Send community attribute
     */
    sendCommunity: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable: string;
    /**
     * Send extended community attribute
     */
    sendExtCommunity: boolean;
    /**
     * Variable name
     */
    sendExtCommunityVariable: string;
    /**
     * Send label
     */
    sendLabel: boolean;
    /**
     * Send label Explicit
     */
    sendLabelExplicit: boolean;
    /**
     * Variable name
     */
    sendLabelExplicitVariable: string;
    /**
     * Variable name
     */
    sendLabelVariable: string;
    /**
     * Enable or disable a BGP neighbor
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Set IP address of interface for TCP connection to BGP neighbor
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamily {
    /**
     * Set BGP address family
     */
    familyType: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     */
    maximumPrefixes: number;
    /**
     * Set when to restart BGP connection if threshold is exceeded
     */
    maximumPrefixesRestart: number;
    /**
     * Variable name
     */
    maximumPrefixesRestartVariable: string;
    /**
     * Set threshold at which to generate a warning message
     */
    maximumPrefixesThreshold: number;
    /**
     * Variable name
     */
    maximumPrefixesThresholdVariable: string;
    /**
     * Variable name
     */
    maximumPrefixesVariable: string;
    /**
     * Display only a warning message when threshold is exceeded
     */
    maximumPrefixesWarningOnly: boolean;
    /**
     * Variable name
     */
    maximumPrefixesWarningOnlyVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select route policy to apply to prefixes received from BGP neighbor
     */
    routePolicies: outputs.GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy[];
}

export interface GetCiscoBgpFeatureTemplateIpv6NeighborAddressFamilyRoutePolicy {
    /**
     * Set direction for applying route policy
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure name of route policy
     */
    policyName: string;
    /**
     * Variable name
     */
    policyNameVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv6RouteTarget {
    /**
     * Export Target-VPN community for IPV6
     */
    exports: outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetExport[];
    /**
     * Import Target-VPN community for IPV6
     */
    imports: outputs.GetCiscoBgpFeatureTemplateIpv6RouteTargetImport[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * VPN ID for IPv6
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoBgpFeatureTemplateIpv6RouteTargetExport {
    /**
     * asn-ip
     */
    asnIp: string;
    /**
     * Variable name
     */
    asnIpVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoBgpFeatureTemplateIpv6RouteTargetImport {
    /**
     * asn-ip
     */
    asnIp: string;
    /**
     * Variable name
     */
    asnIpVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoBgpFeatureTemplateMplsInterface {
    /**
     * Interface Name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoDhcpServerFeatureTemplateOption {
    /**
     * Set ASCII value
     */
    ascii: string;
    /**
     * Variable name
     */
    asciiVariable: string;
    /**
     * Set HEX value
     */
    hex: string;
    /**
     * Variable name
     */
    hexVariable: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Set ip address
     */
    ipAddresses: string[];
    /**
     * Set Option Code
     */
    optionCode: number;
    /**
     * Variable name
     */
    optionCodeVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoDhcpServerFeatureTemplateStaticLease {
    /**
     * Set client’s hostname
     */
    hostname: string;
    /**
     * Variable name
     */
    hostnameVariable: string;
    /**
     * Set client’s static IP address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Set MAC address of client
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoLoggingFeatureTemplateIpv4Server {
    /**
     * Define custom profile
     */
    customProfile: boolean;
    /**
     * Variable name
     */
    customProfileVariable: string;
    /**
     * Enable TLS
     */
    enableTls: boolean;
    /**
     * Variable name
     */
    enableTlsVariable: string;
    /**
     * Set hostname or IPv4 address of server
     */
    hostnameIp: string;
    /**
     * Variable name
     */
    hostnameIpVariable: string;
    /**
     * Set logging level for messages logged to server
     */
    loggingLevel: string;
    /**
     * Variable name
     */
    loggingLevelVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure a TLS profile
     */
    profile: string;
    /**
     * Variable name
     */
    profileVariable: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which syslog server is located
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoLoggingFeatureTemplateIpv6Server {
    /**
     * Define custom profile
     */
    customProfile: boolean;
    /**
     * Variable name
     */
    customProfileVariable: string;
    /**
     * Enable TLS
     */
    enableTls: boolean;
    /**
     * Variable name
     */
    enableTlsVariable: string;
    /**
     * Set IPv6 hostname or IPv6 address of server
     */
    hostnameIp: string;
    /**
     * Variable name
     */
    hostnameIpVariable: string;
    /**
     * Set logging level for messages logged to server
     */
    loggingLevel: string;
    /**
     * Variable name
     */
    loggingLevelVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure a TLS profile
     */
    profile: string;
    /**
     * Variable name
     */
    profileVariable: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which syslog server is located
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoLoggingFeatureTemplateTlsProfile {
    /**
     * Authentication Type
     */
    authenticationType: string;
    /**
     * Variable name
     */
    ciphersuiteListVariable: string;
    /**
     * Syslog secure server ciphersuites. Possible values: `aes-128-cbc-sha`, `aes-256-cbc-sha`, `dhe-aes-cbc-sha2`, `dhe-aes-gcm-sha2`, `ecdhe-ecdsa-aes-gcm-sha2`, `ecdhe-rsa-aes-cbc-sha2`, `ecdhe-rsa-aes-gcm-sha2`, `rsa-aes-cbc-sha2`, `rsa-aes-gcm-sha2`
     */
    ciphersuiteLists: string[];
    /**
     * Specify the name of the TLS profile
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * TLS Version
     */
    version: string;
    /**
     * Variable name
     */
    versionVariable: string;
}

export interface GetCiscoNtpFeatureTemplateAuthenticationKey {
    /**
     * MD5 authentication key ID
     */
    id: number;
    /**
     * Variable name
     */
    idVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Enter cleartext or AES-encrypted MD5 authentication key
     */
    value: string;
    /**
     * Variable name
     */
    valueVariable: string;
}

export interface GetCiscoNtpFeatureTemplateServer {
    /**
     * Set authentication key for the server
     */
    authenticationKeyId: number;
    /**
     * Variable name
     */
    authenticationKeyIdVariable: string;
    /**
     * Set hostname or IP address of server
     */
    hostnameIp: string;
    /**
     * Variable name
     */
    hostnameIpVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefer this NTP server
     */
    prefer: boolean;
    /**
     * Variable name
     */
    preferVariable: string;
    /**
     * Set interface to use to reach NTP server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set NTP version
     */
    version: number;
    /**
     * Variable name
     */
    versionVariable: string;
    /**
     * Set VPN in which NTP server is located
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoOmpFeatureTemplateAdvertiseIpv4Route {
    /**
     * Advertise OSPF external routes
     */
    advertiseExternalOspf: string;
    /**
     * Variable name
     */
    advertiseExternalOspfVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set routes to advertise
     */
    protocol: string;
}

export interface GetCiscoOmpFeatureTemplateAdvertiseIpv6Route {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set routes to advertise
     */
    protocol: string;
}

export interface GetCiscoOspfFeatureTemplateArea {
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetCiscoOspfFeatureTemplateAreaInterface[];
    /**
     * NSSA area
     */
    nssa: boolean;
    /**
     * Do not inject interarea routes into NSSA
     */
    nssaNoSummary: boolean;
    /**
     * Variable name
     */
    nssaNoSummaryVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetCiscoOspfFeatureTemplateAreaRange[];
    /**
     * Stub area
     */
    stub: boolean;
    /**
     * Do not inject interarea routes into stub
     */
    stubNoSummary: boolean;
    /**
     * Variable name
     */
    stubNoSummaryVariable: string;
}

export interface GetCiscoOspfFeatureTemplateAreaInterface {
    /**
     * Set MD5 authentication key
     */
    authenticationMessageDigestKey: string;
    /**
     * Set MD5 message digest key
     */
    authenticationMessageDigestKeyId: number;
    /**
     * Variable name
     */
    authenticationMessageDigestKeyIdVariable: string;
    /**
     * Variable name
     */
    authenticationMessageDigestKeyVariable: string;
    /**
     * Set OSPF interface authentication type
     */
    authenticationType: string;
    /**
     * Variable name
     */
    authenticationTypeVariable: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    network: string;
    /**
     * Variable name
     */
    networkVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
    /**
     * Set router’s priority to be elected as designated router
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    retransmitInterval: number;
    /**
     * Variable name
     */
    retransmitIntervalVariable: string;
}

export interface GetCiscoOspfFeatureTemplateAreaRange {
    /**
     * Set matching prefix
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoOspfFeatureTemplateMaxMetricRouterLsa {
    /**
     * Set the router LSA advertisement type
     */
    adType: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set how long to advertise maximum metric after router starts up
     */
    time: number;
    /**
     * Variable name
     */
    timeVariable: string;
}

export interface GetCiscoOspfFeatureTemplateRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     */
    natDia: boolean;
    /**
     * Variable name
     */
    natDiaVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Set route policy to apply to redistributed routes
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoOspfFeatureTemplateRoutePolicy {
    /**
     * Set direction to apply policy
     */
    direction: string;
    /**
     * Variable name
     */
    directionVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of route policy
     */
    policyName: string;
    /**
     * Variable name
     */
    policyNameVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv4Area {
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaInterface[];
    /**
     * Area Type Normal
     */
    normal: boolean;
    /**
     * Variable name
     */
    normalVariable: string;
    /**
     * NSSA area
     */
    nssa: boolean;
    /**
     * Do not inject interarea routes into NSSA
     */
    nssaNoSummary: boolean;
    /**
     * Variable name
     */
    nssaNoSummaryVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetCiscoOspfv3FeatureTemplateIpv4AreaRange[];
    /**
     * Stub area
     */
    stub: boolean;
    /**
     * Do not inject interarea routes into stub
     */
    stubNoSummary: boolean;
    /**
     * Variable name
     */
    stubNoSummaryVariable: string;
    /**
     * Always Translate LSAs on this ABR
     */
    translate: string;
    /**
     * Variable name
     */
    translateVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv4AreaInterface {
    /**
     * Set OSPF interface authentication key
     */
    authenticationKey: string;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set OSPF interface authentication type
     */
    authenticationType: string;
    /**
     * Variable name
     */
    authenticationTypeVariable: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     */
    ipsecSpi: number;
    /**
     * Variable name
     */
    ipsecSpiVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    network: string;
    /**
     * Variable name
     */
    networkVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    retransmitInterval: number;
    /**
     * Variable name
     */
    retransmitIntervalVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv4AreaRange {
    /**
     * Set Matching Prefix
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoOspfv3FeatureTemplateIpv4MaxMetricRouterLsa {
    /**
     * Set the router LSA advertisement type
     */
    adType: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set how long to advertise maximum metric after router starts up
     */
    time: number;
    /**
     * Variable name
     */
    timeVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv4Redistribute {
    /**
     * Enable NAT DIA for redistributed routes
     */
    natDia: boolean;
    /**
     * Variable name
     */
    natDiaVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Set route policy to apply to redistributed routes
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv6Area {
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaInterface[];
    /**
     * Area Type Normal
     */
    normal: boolean;
    /**
     * Variable name
     */
    normalVariable: string;
    /**
     * NSSA area
     */
    nssa: boolean;
    /**
     * Do not inject interarea routes into NSSA
     */
    nssaNoSummary: boolean;
    /**
     * Variable name
     */
    nssaNoSummaryVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetCiscoOspfv3FeatureTemplateIpv6AreaRange[];
    /**
     * Stub area
     */
    stub: boolean;
    /**
     * Do not inject interarea routes into stub
     */
    stubNoSummary: boolean;
    /**
     * Variable name
     */
    stubNoSummaryVariable: string;
    /**
     * Always translate LSAs on this ABR
     */
    translate: string;
    /**
     * Variable name
     */
    translateVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv6AreaInterface {
    /**
     * Set OSPF interface authentication key
     */
    authenticationKey: string;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set OSPF interface authentication type
     */
    authenticationType: string;
    /**
     * Variable name
     */
    authenticationTypeVariable: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     */
    ipsecSpi: number;
    /**
     * Variable name
     */
    ipsecSpiVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    network: string;
    /**
     * Variable name
     */
    networkVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    retransmitInterval: number;
    /**
     * Variable name
     */
    retransmitIntervalVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv6AreaRange {
    /**
     * Set Matching Prefix
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoOspfv3FeatureTemplateIpv6MaxMetricRouterLsa {
    /**
     * Set the router LSA advertisement type
     */
    adType: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set how long to advertise maximum metric after router starts up
     */
    time: number;
    /**
     * Variable name
     */
    timeVariable: string;
}

export interface GetCiscoOspfv3FeatureTemplateIpv6Redistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Set route policy to apply to redistributed routes
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoSecureInternetGatewayFeatureTemplateInterface {
    /**
     * Enable Application Tunnel Type
     */
    application: string;
    /**
     * Auto Tunnel Mode
     */
    autoTunnelMode: boolean;
    /**
     * IKE keepalive interval (seconds)
     */
    deadPeerDetectionInterval: number;
    /**
     * Variable name
     */
    deadPeerDetectionIntervalVariable: string;
    /**
     * IKE keepalive retries
     */
    deadPeerDetectionRetries: number;
    /**
     * Variable name
     */
    deadPeerDetectionRetriesVariable: string;
    /**
     * Interface description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * IKE identity the IKE preshared secret belongs to
     */
    ikeCiphersuite: string;
    /**
     * Variable name
     */
    ikeCiphersuiteVariable: string;
    /**
     * IKE Diffie Hellman Groups
     */
    ikeGroup: string;
    /**
     * Variable name
     */
    ikeGroupVariable: string;
    /**
     * Use preshared key to authenticate IKE peer
     */
    ikePreSharedKey: string;
    /**
     * Use preshared key to authenticate IKE peer
     */
    ikePreSharedKeyDynamic: boolean;
    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     */
    ikePreSharedKeyLocalId: string;
    /**
     * Variable name
     */
    ikePreSharedKeyLocalIdVariable: string;
    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     */
    ikePreSharedKeyRemoteId: string;
    /**
     * Variable name
     */
    ikePreSharedKeyRemoteIdVariable: string;
    /**
     * Variable name
     */
    ikePreSharedKeyVariable: string;
    /**
     * IKE rekey interval \n\n seconds
     */
    ikeRekeyInterval: number;
    /**
     * Variable name
     */
    ikeRekeyIntervalVariable: string;
    /**
     * IKE Version \n\n
     */
    ikeVersion: number;
    /**
     * Variable name
     */
    ikeVersionVariable: string;
    /**
     * Unnumbered interface
     */
    ipUnnumbered: boolean;
    /**
     * IPsec(ESP) encryption and integrity protocol
     */
    ipsecCiphersuite: string;
    /**
     * Variable name
     */
    ipsecCiphersuiteVariable: string;
    /**
     * IPsec perfect forward secrecy settings
     */
    ipsecPerfectForwardSecrecy: string;
    /**
     * Variable name
     */
    ipsecPerfectForwardSecrecyVariable: string;
    /**
     * IPsec rekey interval \n\n seconds
     */
    ipsecRekeyInterval: number;
    /**
     * Variable name
     */
    ipsecRekeyIntervalVariable: string;
    /**
     * Replay window size 32..8192 (must be a power of 2)
     */
    ipsecReplayWindow: number;
    /**
     * Variable name
     */
    ipsecReplayWindowVariable: string;
    /**
     * Assign IPv4 address
     */
    ipv4Address: string;
    /**
     * Variable name
     */
    ipv4AddressVariable: string;
    /**
     * Interface MTU \n\n, in bytes
     */
    mtu: number;
    /**
     * Variable name
     */
    mtuVariable: string;
    /**
     * Interface name: IPsec when present
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Administrative state
     */
    shutdown: boolean;
    /**
     * SIG Tunnel Provider
     */
    sigProvider: string;
    /**
     * TCP MSS on SYN packets, in bytes
     */
    tcpMss: number;
    /**
     * Variable name
     */
    tcpMssVariable: string;
    /**
     * Enable/disable SIG tracking
     */
    trackEnable: boolean;
    /**
     * Enable tracker for this interface
     */
    tracker: string;
    /**
     * SIG Tunnel Data Center
     */
    tunnelDcPreference: string;
    /**
     * Tunnel destination IP address
     */
    tunnelDestination: string;
    /**
     * Variable name
     */
    tunnelDestinationVariable: string;
    /**
     * Public IP required to setup GRE tunnel to Zscaler
     */
    tunnelPublicIp: string;
    /**
     * Variable name
     */
    tunnelPublicIpVariable: string;
    /**
     * \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     */
    tunnelRouteVia: string;
    /**
     * Variable name
     */
    tunnelRouteViaVariable: string;
    /**
     * Tunnel source IP Address
     */
    tunnelSource: string;
    /**
     * \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     */
    tunnelSourceInterface: string;
    /**
     * Variable name
     */
    tunnelSourceInterfaceVariable: string;
    /**
     * Variable name
     */
    tunnelSourceVariable: string;
}

export interface GetCiscoSecureInternetGatewayFeatureTemplateService {
    /**
     * Interface Pair for active and backup
     */
    interfacePairs: outputs.GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Service Type
     */
    serviceType: string;
    /**
     * Umbrella Primary Datacenter
     */
    umbrellaPrimaryDataCenter: string;
    /**
     * Variable name
     */
    umbrellaPrimaryDataCenterVariable: string;
    /**
     * Umbrella Secondary Datacenter
     */
    umbrellaSecondaryDataCenter: string;
    /**
     * Variable name
     */
    umbrellaSecondaryDataCenterVariable: string;
    /**
     * For first-time Acceptable User Policy behavior, block Internet access
     */
    zscalerAupBlockInternetUntilAccepted: boolean;
    /**
     * Enable Acceptable User Policy
     */
    zscalerAupEnabled: boolean;
    /**
     * For first-time Acceptable User Policy behavior, force SSL inspection
     */
    zscalerAupForceSslInspection: boolean;
    /**
     * Custom Acceptable User Policy frequency in days
     */
    zscalerAupTimeout: number;
    /**
     * Enforce Authentication
     */
    zscalerAuthenticationRequired: boolean;
    /**
     * Enable Caution
     */
    zscalerCautionEnabled: boolean;
    /**
     * Firewall enabled
     */
    zscalerFirewallEnabled: boolean;
    /**
     * Enable IPS Control
     */
    zscalerIpsControlEnabled: boolean;
    /**
     * Zscaler location name (optional)
     */
    zscalerLocationName: string;
    /**
     * Variable name
     */
    zscalerLocationNameVariable: string;
    /**
     * Custom Primary Datacenter
     */
    zscalerPrimaryDataCenter: string;
    /**
     * Variable name
     */
    zscalerPrimaryDataCenterVariable: string;
    /**
     * Custom Secondary Datacenter
     */
    zscalerSecondaryDataCenter: string;
    /**
     * Variable name
     */
    zscalerSecondaryDataCenterVariable: string;
    /**
     * Display time unit
     */
    zscalerSurrogateDisplayTimeUnit: string;
    /**
     * Idle time to disassociation
     */
    zscalerSurrogateIdleTime: number;
    /**
     * Enable Surrogate IP
     */
    zscalerSurrogateIp: boolean;
    /**
     * Enforce Surrogate IP for known browsers
     */
    zscalerSurrogateIpEnforceForKnownBrowsers: boolean;
    /**
     * Refresh time for re-validation of surrogacy in minutes
     */
    zscalerSurrogateRefreshTime: number;
    /**
     * Refresh Time unit
     */
    zscalerSurrogateRefreshTimeUnit: string;
    /**
     * XFF forwarding enabled
     */
    zscalerXffForward: boolean;
}

export interface GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair {
    /**
     * Active Tunnel Interface for SIG
     */
    activeInterface: string;
    /**
     * Active Tunnel Interface Weight
     */
    activeInterfaceWeight: number;
    /**
     * Backup Tunnel Interface for SIG
     */
    backupInterface: string;
    /**
     * Backup Tunnel Interface Weight
     */
    backupInterfaceWeight: number;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoSecureInternetGatewayFeatureTemplateTracker {
    /**
     * API url of endpoint
     */
    endpointApiUrl: string;
    /**
     * Variable name
     */
    endpointApiUrlVariable: string;
    /**
     * Probe interval \n\n seconds
     */
    interval: number;
    /**
     * Variable name
     */
    intervalVariable: string;
    /**
     * Probe failure multiplier \n\n failed attempts
     */
    multiplier: number;
    /**
     * Variable name
     */
    multiplierVariable: string;
    /**
     * Tracker name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Probe Timeout threshold \n\n milliseconds
     */
    threshold: number;
    /**
     * Variable name
     */
    thresholdVariable: string;
    trackerType: string;
}

export interface GetCiscoSecurityFeatureTemplateKey {
    /**
     * Configure Accept AO Mismatch
     */
    acceptAoMismatch: boolean;
    /**
     * Variable name
     */
    acceptAoMismatchVariable: string;
    /**
     * Configure Accept lifetime Duration
     */
    acceptLifetimeDuration: number;
    /**
     * Variable name
     */
    acceptLifetimeDurationVariable: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifetimeEndTime: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifetimeEndTimeFormat: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifetimeInfinite: boolean;
    /**
     * Variable name
     */
    acceptLifetimeInfiniteVariable: string;
    /**
     * Configure Accept Lifetime Local
     */
    acceptLifetimeLocal: boolean;
    /**
     * Variable name
     */
    acceptLifetimeLocalVariable: string;
    /**
     * Configure Key lifetime start time
     */
    acceptLifetimeStartTime: string;
    /**
     * Select the chain name
     */
    chainName: string;
    /**
     * Crypto Algorithm
     */
    cryptoAlgorithm: string;
    /**
     * Select the Key ID
     */
    id: string;
    /**
     * Configure Include TCP Options
     */
    includeTcpOptions: boolean;
    /**
     * Variable name
     */
    includeTcpOptionsVariable: string;
    /**
     * Specify the Key String
     */
    keyString: string;
    /**
     * Variable name
     */
    keyStringVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Specify the Receiver ID
     */
    receiveId: number;
    /**
     * Variable name
     */
    receiveIdVariable: string;
    /**
     * Specify the Send ID
     */
    sendId: number;
    /**
     * Variable name
     */
    sendIdVariable: string;
    /**
     * Configure Send lifetime Duration
     */
    sendLifetimeDuration: number;
    /**
     * Variable name
     */
    sendLifetimeDurationVariable: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifetimeEndTime: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifetimeEndTimeFormat: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifetimeInfinite: boolean;
    /**
     * Variable name
     */
    sendLifetimeInfiniteVariable: string;
    /**
     * Configure Send lifetime Local
     */
    sendLifetimeLocal: boolean;
    /**
     * Variable name
     */
    sendLifetimeLocalVariable: string;
    /**
     * Configure Key lifetime start time
     */
    sendLifetimeStartTime: string;
}

export interface GetCiscoSecurityFeatureTemplateKeychain {
    /**
     * Specify the Key ID
     */
    keyId: number;
    /**
     * Specify the name of the Keychain
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoSnmpFeatureTemplateCommunity {
    /**
     * Configure access permissions
     */
    authorization: string;
    /**
     * Variable name
     */
    authorizationVariable: string;
    /**
     * Set name of the SNMP community
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set name of the SNMP view
     */
    view: string;
    /**
     * Variable name
     */
    viewVariable: string;
}

export interface GetCiscoSnmpFeatureTemplateGroup {
    /**
     * Name of the SNMP group
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure security level
     */
    securityLevel: string;
    /**
     * Name of the SNMP view
     */
    view: string;
    /**
     * Variable name
     */
    viewVariable: string;
}

export interface GetCiscoSnmpFeatureTemplateTrapTarget {
    /**
     * Set name of the SNMP community
     */
    communityName: string;
    /**
     * Variable name
     */
    communityNameVariable: string;
    /**
     * Set IPv4/IPv6 address of SNMP server
     */
    ip: string;
    /**
     * Variable name
     */
    ipVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Source interface for outgoing SNMP traps
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set UDP port number to connect to SNMP server
     */
    udpPort: number;
    /**
     * Variable name
     */
    udpPortVariable: string;
    /**
     * Set name of the SNMP user
     */
    user: string;
    /**
     * Variable name
     */
    userVariable: string;
    /**
     * Set VPN in which SNMP server is located
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoSnmpFeatureTemplateUser {
    /**
     * Specify authentication protocol password
     */
    authenticationPassword: string;
    /**
     * Variable name
     */
    authenticationPasswordVariable: string;
    /**
     * Configure authentication protocol
     */
    authenticationProtocol: string;
    /**
     * Variable name
     */
    authenticationProtocolVariable: string;
    /**
     * Name of the SNMP group
     */
    group: string;
    /**
     * Variable name
     */
    groupVariable: string;
    /**
     * Name of the SNMP user
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Specify privacy protocol password
     */
    privacyPassword: string;
    /**
     * Variable name
     */
    privacyPasswordVariable: string;
    /**
     * Configure privacy protocol
     */
    privacyProtocol: string;
    /**
     * Variable name
     */
    privacyProtocolVariable: string;
}

export interface GetCiscoSnmpFeatureTemplateView {
    /**
     * Set the name of the SNMP view
     */
    name: string;
    /**
     * Configure SNMP object identifier
     */
    objectIdentifiers: outputs.GetCiscoSnmpFeatureTemplateViewObjectIdentifier[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoSnmpFeatureTemplateViewObjectIdentifier {
    /**
     * Exclude the OID
     */
    exclude: boolean;
    /**
     * Variable name
     */
    excludeVariable: string;
    /**
     * Configure identifier of subtree of MIB objects
     */
    id: string;
    /**
     * Variable name
     */
    idVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber {
    /**
     * Mobile number, ex: +1231234414
     */
    number: string;
    /**
     * Variable name
     */
    numberVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoSystemFeatureTemplateObjectTracker {
    /**
     * Type of grouping to be performed for tracker group
     */
    boolean: string;
    /**
     * Variable name
     */
    booleanVariable: string;
    /**
     * Tracks id in group configuration
     */
    groupTracksIds: outputs.GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksId[];
    /**
     * interface name
     */
    interface: string;
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * IP address of route
     */
    ip: string;
    /**
     * Variable name
     */
    ipVariable: string;
    /**
     * Route Ip Mask
     */
    mask: string;
    /**
     * Variable name
     */
    maskVariable: string;
    /**
     * Object tracker ID
     */
    objectNumber: number;
    /**
     * Variable name
     */
    objectNumberVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * service sig
     */
    sig: string;
    /**
     * Variable name
     */
    sigVariable: string;
    /**
     * VPN
     */
    vpnId: number;
}

export interface GetCiscoSystemFeatureTemplateObjectTrackerGroupTracksId {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Track id
     */
    trackId: number;
    /**
     * Variable name
     */
    trackIdVariable: string;
}

export interface GetCiscoSystemFeatureTemplateTracker {
    /**
     * Type of grouping to be performed for tracker group
     */
    boolean: string;
    /**
     * Variable name
     */
    booleanVariable: string;
    /**
     * Tracker member names separated by space
     */
    elements: string[];
    /**
     * Variable name
     */
    elementsVariable: string;
    /**
     * API url of endpoint
     */
    endpointApiUrl: string;
    /**
     * Variable name
     */
    endpointApiUrlVariable: string;
    /**
     * DNS name of endpoint
     */
    endpointDnsName: string;
    /**
     * Variable name
     */
    endpointDnsNameVariable: string;
    /**
     * IP address of endpoint
     */
    endpointIp: string;
    /**
     * Variable name
     */
    endpointIpVariable: string;
    /**
     * Probe interval \n\n seconds
     */
    interval: number;
    /**
     * Variable name
     */
    intervalVariable: string;
    /**
     * Probe failure multiplier \n\n failed attempts
     */
    multiplier: number;
    /**
     * Variable name
     */
    multiplierVariable: string;
    /**
     * Tracker name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Probe Timeout threshold \n\n milliseconds
     */
    threshold: number;
    /**
     * Variable name
     */
    thresholdVariable: string;
    /**
     * Default(Interface)
     */
    type: string;
    /**
     * Variable name
     */
    typeVariable: string;
}

export interface GetCiscoThousandeyesFeatureTemplateVirtualApplication {
    /**
     * List of Virtual applications
     */
    applicationType: string;
    /**
     * List of Virtual applications
     */
    instanceId: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the Account Group Token
     */
    teAccountGroupToken: string;
    /**
     * Variable name
     */
    teAccountGroupTokenVariable: string;
    /**
     * Set the Agent IP Address
     */
    teAgentIp: string;
    /**
     * Variable name
     */
    teAgentIpVariable: string;
    /**
     * Set the Agent default gateway
     */
    teDefaultGateway: string;
    /**
     * Variable name
     */
    teDefaultGatewayVariable: string;
    /**
     * Set the host name
     */
    teHostname: string;
    /**
     * Variable name
     */
    teHostnameVariable: string;
    /**
     * Set the name server
     */
    teNameServer: string;
    /**
     * Variable name
     */
    teNameServerVariable: string;
    /**
     * PAC URL
     */
    tePacUrl: string;
    /**
     * Variable name
     */
    tePacUrlVariable: string;
    /**
     * Set the proxy host
     */
    teProxyHost: string;
    /**
     * Variable name
     */
    teProxyHostVariable: string;
    /**
     * Set the proxy port
     */
    teProxyPort: number;
    /**
     * Variable name
     */
    teProxyPortVariable: string;
    /**
     * VPN number
     */
    teVpn: number;
    /**
     * Variable name
     */
    teVpnVariable: string;
    /**
     * Web Proxy Type
     */
    teWebProxyType: string;
}

export interface GetCiscoTrustsecFeatureTemplateSxpConnection {
    /**
     * Configure Connection Maximum hold time \n\n
     */
    maximumHoldTime: number;
    /**
     * Variable name
     */
    maximumHoldTimeVariable: string;
    /**
     * Configure Connection Minimum hold time \n\n
     */
    minimumHoldTime: number;
    /**
     * Variable name
     */
    minimumHoldTimeVariable: string;
    /**
     * Define Mode of connection
     */
    mode: string;
    /**
     * Define Role of a device \n\n
     */
    modeType: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure SXP Peer IP address (IPv4)
     */
    peerIp: string;
    /**
     * Define Preshared Key type
     */
    presharedKey: string;
    /**
     * Configure SXP Source IP address (IPv4)
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Configure Connection VPN (VRF) ID
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoVpnFeatureTemplateDnsHost {
    /**
     * Hostname
     */
    hostname: string;
    /**
     * Variable name
     */
    hostnameVariable: string;
    /**
     * Variable name
     */
    ipVariable: string;
    /**
     * List of IP
     */
    ips: string[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnFeatureTemplateDnsIpv4Server {
    /**
     * DNS Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Role
     */
    role: string;
    /**
     * Variable name
     */
    roleVariable: string;
}

export interface GetCiscoVpnFeatureTemplateDnsIpv6Server {
    /**
     * DNS Address
     */
    address: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Role
     */
    role: string;
    /**
     * Variable name
     */
    roleVariable: string;
}

export interface GetCiscoVpnFeatureTemplateIpv4StaticGreRoute {
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * List of GRE Interfaces
     */
    interfaces: string[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * Destination VPN to resolve the prefix
     */
    vpnId: number;
}

export interface GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute {
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * List of IPSEC Interfaces (Separated by commas)
     */
    interfaces: string[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * Destination VPN to resolve the prefix
     */
    vpnId: number;
}

export interface GetCiscoVpnFeatureTemplateIpv4StaticRoute {
    /**
     * Default Gateway obtained from DHCP
     */
    dhcp: boolean;
    /**
     * Variable name
     */
    dhcpVariable: string;
    /**
     * Administrative distance
     */
    distance: number;
    /**
     * Variable name
     */
    distanceVariable: string;
    /**
     * IP gateway address
     */
    nextHops: outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHop[];
    /**
     * null0
     */
    null0: boolean;
    /**
     * Variable name
     */
    null0Variable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * IP gateway address
     */
    trackNextHops: outputs.GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop[];
    /**
     * Destination VPN(!=0 or !=512) to resolve the prefix
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoVpnFeatureTemplateIpv4StaticRouteNextHop {
    /**
     * IP Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    distance: number;
    /**
     * Variable name
     */
    distanceVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnFeatureTemplateIpv4StaticRouteTrackNextHop {
    /**
     * IP Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    distance: number;
    /**
     * Variable name
     */
    distanceVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Static route tracker
     */
    tracker: string;
    /**
     * Variable name
     */
    trackerVariable: string;
}

export interface GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * Service
     */
    service: string;
    /**
     * Destination VPN to resolve the prefix
     */
    vpnId: number;
}

export interface GetCiscoVpnFeatureTemplateIpv6StaticRoute {
    /**
     * NAT
     */
    nat: string;
    /**
     * Variable name
     */
    natVariable: string;
    /**
     * IP gateway address
     */
    nextHops: outputs.GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHop[];
    /**
     * null0
     */
    null0: boolean;
    /**
     * Variable name
     */
    null0Variable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
    /**
     * Destination VPN(!=0 or !=512) to resolve the prefix
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoVpnFeatureTemplateIpv6StaticRouteNextHop {
    /**
     * IP Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    distance: number;
    /**
     * Variable name
     */
    distanceVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnFeatureTemplateNat64Pool {
    /**
     * Ending IP address of NAT pool range
     */
    endAddress: string;
    /**
     * Variable name
     */
    endAddressVariable: string;
    /**
     * Enable Route Leaking from Global VPN to this Service VPN
     */
    leakFromGlobal: boolean;
    /**
     * Select protocol for route leaking
     */
    leakFromGlobalProtocol: string;
    /**
     * Enable Route Leaking from this Service VPN to Global VPN
     */
    leakToGlobal: boolean;
    /**
     * NAT64 Pool name
     */
    name: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * NAT 64 Overload Option
     */
    overload: boolean;
    /**
     * Variable name
     */
    overloadVariable: string;
    /**
     * Starting IP address of NAT pool range
     */
    startAddress: string;
    /**
     * Variable name
     */
    startAddressVariable: string;
}

export interface GetCiscoVpnFeatureTemplateNatPool {
    /**
     * Direction of NAT translation
     */
    direction: string;
    /**
     * Variable name
     */
    directionVariable: string;
    /**
     * NAT Pool Name, natpool1..31
     */
    name: number;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Enable port translation(PAT)
     */
    overload: boolean;
    /**
     * Variable name
     */
    overloadVariable: string;
    /**
     * Ending IP address of NAT Pool Prefix Length
     */
    prefixLength: number;
    /**
     * Variable name
     */
    prefixLengthVariable: string;
    /**
     * Ending IP address of NAT pool range
     */
    rangeEnd: string;
    /**
     * Variable name
     */
    rangeEndVariable: string;
    /**
     * Starting IP address of NAT pool range
     */
    rangeStart: string;
    /**
     * Variable name
     */
    rangeStartVariable: string;
    /**
     * Add Object/Object Group Tracker
     */
    trackerId: number;
    /**
     * Variable name
     */
    trackerIdVariable: string;
}

export interface GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    prefixes: outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix[];
    /**
     * Advertised routes protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable: string;
    protocolSubTypes: string[];
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Set Route Policy to OMP
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RoutePrefix {
    /**
     * Aggregate Only
     */
    aggregateOnly: boolean;
    /**
     * Variable name
     */
    aggregateOnlyVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefixEntry: string;
    /**
     * Variable name
     */
    prefixEntryVariable: string;
}

export interface GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    prefixes: outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix[];
    /**
     * Advertised routes protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable: string;
    protocolSubTypes: string[];
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RoutePrefix {
    /**
     * Aggregate Only
     */
    aggregateOnly: boolean;
    /**
     * Variable name
     */
    aggregateOnlyVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Prefix
     */
    prefixEntry: string;
    /**
     * Variable name
     */
    prefixEntryVariable: string;
}

export interface GetCiscoVpnFeatureTemplatePortForwardRule {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * NAT Pool Name, natpool1..31
     */
    poolName: number;
    /**
     * Variable name
     */
    poolNameVariable: string;
    /**
     * Protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Source IP address to be translated
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Source Port
     */
    sourcePort: number;
    /**
     * Variable name
     */
    sourcePortVariable: string;
    /**
     * Statically translated source IP address
     */
    translateIp: string;
    /**
     * Variable name
     */
    translateIpVariable: string;
    /**
     * Translate Port
     */
    translatePort: number;
    /**
     * Variable name
     */
    translatePortVariable: string;
}

export interface GetCiscoVpnFeatureTemplateRouteGlobalExport {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select a Route Protocol to enable route leaking from this Service VPN to Global VPN
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable: string;
    protocolSubTypes: string[];
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Enable redistribution of replicated route protocol
     */
    redistributes: outputs.GetCiscoVpnFeatureTemplateRouteGlobalExportRedistribute[];
    /**
     * Select a Route Policy to enable route leaking from this Service VPN to Global VPN
     */
    routePolicy: string;
}

export interface GetCiscoVpnFeatureTemplateRouteGlobalExportRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select a Route Protocol to enable redistribution
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Select a Route Policy to enable redistribution
     */
    routePolicy: string;
}

export interface GetCiscoVpnFeatureTemplateRouteGlobalImport {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select a Route Protocol to enable route leaking from Global VPN to this Service VPN
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable: string;
    protocolSubTypes: string[];
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Enable redistribution of replicated route protocol
     */
    redistributes: outputs.GetCiscoVpnFeatureTemplateRouteGlobalImportRedistribute[];
    /**
     * Select a Route Policy to enable route leaking from Global VPN to this Service VPN
     */
    routePolicy: string;
}

export interface GetCiscoVpnFeatureTemplateRouteGlobalImportRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select a Route Protocol to enable redistribution
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Select a Route Policy to enable redistribution
     */
    routePolicy: string;
}

export interface GetCiscoVpnFeatureTemplateRouteVpnImport {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select a Route Protocol to enable route leaking to current VPN
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable: string;
    protocolSubTypes: string[];
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Enable redistribution of replicated route protocol
     */
    redistributes: outputs.GetCiscoVpnFeatureTemplateRouteVpnImportRedistribute[];
    /**
     * Select a Route Policy to enable route leaking to current VPN
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
    /**
     * Select a Source VPN where route leaks from
     */
    sourceVpnId: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable: string;
}

export interface GetCiscoVpnFeatureTemplateRouteVpnImportRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Select a Route Protocol to enable redistribution
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Select a Route Policy to enable redistribution
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetCiscoVpnFeatureTemplateService {
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * List of IPv4 address
     */
    addresses: string[];
    /**
     * Tracking Service
     */
    interface: string;
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Service Type
     */
    serviceTypes: string;
    /**
     * Tracking Service
     */
    trackEnable: boolean;
    /**
     * Variable name
     */
    trackEnableVariable: string;
}

export interface GetCiscoVpnFeatureTemplateStaticNatRule {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * NAT Pool Name, natpool1..31
     */
    poolName: number;
    /**
     * Variable name
     */
    poolNameVariable: string;
    /**
     * Source IP address to be translated
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Direction of static NAT translation
     */
    staticNatDirection: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable: string;
    /**
     * Add Object/Object Group Tracker
     */
    trackerId: number;
    /**
     * Variable name
     */
    trackerIdVariable: string;
    /**
     * Statically translated source IP address
     */
    translateIp: string;
    /**
     * Variable name
     */
    translateIpVariable: string;
}

export interface GetCiscoVpnFeatureTemplateStaticNatSubnetRule {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Network Prefix Length
     */
    prefixLength: number;
    /**
     * Variable name
     */
    prefixLengthVariable: string;
    /**
     * Source IP Subnet to be translated
     */
    sourceIpSubnet: string;
    /**
     * Variable name
     */
    sourceIpSubnetVariable: string;
    /**
     * Direction of static NAT translation
     */
    staticNatDirection: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable: string;
    /**
     * Add Object/Object Group Tracker
     */
    trackerId: number;
    /**
     * Variable name
     */
    trackerIdVariable: string;
    /**
     * Statically translated source IP Subnet
     */
    translateIpSubnet: string;
    /**
     * Variable name
     */
    translateIpSubnetVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress {
    /**
     * IP Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp {
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * Assign IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * VRRP Secondary IP address
     */
    ipv4SecondaryAddresses: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * change TLOC preference
     */
    tlocPreferenceChange: boolean;
    /**
     * Set tloc preference change value
     */
    tlocPreferenceChangeValue: number;
    /**
     * Variable name
     */
    tlocPreferenceChangeValueVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Track Prefix List
     */
    trackPrefixList: string;
    /**
     * Variable name
     */
    trackPrefixListVariable: string;
    /**
     * tracking object for VRRP configuration
     */
    trackingObjects: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject[];
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpIpv4SecondaryAddress {
    /**
     * VRRP Secondary IP address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     */
    decrementValue: number;
    /**
     * Variable name
     */
    decrementValueVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Track Action
     */
    trackAction: string;
    /**
     * Variable name
     */
    trackActionVariable: string;
    /**
     * Tracker ID
     */
    trackerId: number;
    /**
     * Variable name
     */
    trackerIdVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * DHCPv6 Helper VPN
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress {
    /**
     * IPv6 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp {
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * IPv6 VRRP
     */
    ipv6Addresses: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Variable name
     */
    trackOmpVariable: string;
    /**
     * Track Prefix List
     */
    trackPrefixList: string;
    /**
     * Variable name
     */
    trackPrefixListVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpIpv6Address {
    /**
     * Use link-local IPv6 Address
     */
    ipv6LinkLocal: string;
    /**
     * Variable name
     */
    ipv6LinkLocalVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Assign Global IPv6 Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateStaticArp {
    /**
     * IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC address
     */
    mac: string;
    /**
     * Variable name
     */
    macVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Source Prefix
     */
    sourcePrefix: string;
    /**
     * Variable name
     */
    sourcePrefixVariable: string;
    /**
     * Source VPN ID
     */
    sourceVpnId: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable: string;
    /**
     * Translated Source Prefix
     */
    translatedSourcePrefix: string;
    /**
     * Variable name
     */
    translatedSourcePrefixVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Source IP address to be translated
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Configure VPN ID
     */
    sourceVpnId: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable: string;
    /**
     * Direction of static NAT translation
     */
    staticNatDirection: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable: string;
    /**
     * Statically translated source IP address
     */
    translateIp: string;
    /**
     * Variable name
     */
    translateIpVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Source IP address to be translated
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Source Port
     */
    sourcePort: number;
    /**
     * Variable name
     */
    sourcePortVariable: string;
    /**
     * Configure VPN ID
     */
    sourceVpnId: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable: string;
    /**
     * Direction of static NAT translation
     */
    staticNatDirection: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable: string;
    /**
     * Statically translated source IP address
     */
    translateIp: string;
    /**
     * Variable name
     */
    translateIpVariable: string;
    /**
     * Translate Port
     */
    translatePort: number;
    /**
     * Variable name
     */
    translatePortVariable: string;
}

export interface GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetCiscoVpnInterfaceGreFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetCiscoWirelessLanFeatureTemplateSsid {
    /**
     * Set admin state
     */
    adminState: boolean;
    /**
     * Variable name
     */
    adminStateVariable: string;
    /**
     * Enable broadcast SSID
     */
    broadcastSsid: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set passphrase
     */
    passphrase: string;
    /**
     * Variable name
     */
    passphraseVariable: string;
    /**
     * Select QoS profile
     */
    qosProfile: string;
    /**
     * Variable name
     */
    qosProfileVariable: string;
    /**
     * Select radio type
     */
    radioType: string;
    /**
     * Variable name
     */
    radioTypeVariable: string;
    /**
     * Set RADIUS server IP
     */
    radiusServerIp: string;
    /**
     * Variable name
     */
    radiusServerIpVariable: string;
    /**
     * Set RADIUS server authentication port
     */
    radiusServerPort: number;
    /**
     * Variable name
     */
    radiusServerPortVariable: string;
    /**
     * Set RADIUS server shared secret
     */
    radiusServerSecret: string;
    /**
     * Variable name
     */
    radiusServerSecretVariable: string;
    /**
     * Select security type
     */
    securityType: string;
    /**
     * Variable name
     */
    securityTypeVariable: string;
    /**
     * Set VLAN ID
     */
    vlanId: number;
    /**
     * Variable name
     */
    vlanIdVariable: string;
    /**
     * Configure wlan SSID
     */
    wirelessNetworkName: string;
}

export interface GetColorListPolicyObjectEntry {
    /**
     * Color
     */
    color: string;
}

export interface GetConfigurationGroupDevice {
    /**
     * Deploy to device if enabled.
     */
    deploy: boolean;
    /**
     * Device ID
     */
    id: string;
    /**
     * List of variables
     */
    variables: outputs.GetConfigurationGroupDeviceVariable[];
}

export interface GetConfigurationGroupDeviceVariable {
    /**
     * Use this instead of `value` in case value is of type `List`.
     */
    listValues: string[];
    /**
     * Variable name
     */
    name: string;
    /**
     * Variable value
     */
    value: string;
}

export interface GetConfigurationGroupTopologyDevice {
    /**
     * Criteria attribute
     */
    criteriaAttribute: string;
    /**
     * Criteria value
     */
    criteriaValue: string;
    /**
     * List of unsupported features
     */
    unsupportedFeatures: outputs.GetConfigurationGroupTopologyDeviceUnsupportedFeature[];
}

export interface GetConfigurationGroupTopologyDeviceUnsupportedFeature {
    /**
     * Parcel ID
     */
    parcelId: string;
    /**
     * Parcel type
     */
    parcelType: string;
}

export interface GetCustomControlTopologyPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetCustomControlTopologyPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `reject`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * Sequence IP type, either `ipv4`, `ipv6` or `all`
     */
    ipType: string;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
    /**
     * Sequence type, either `route` or `tloc`
     */
    type: string;
}

export interface GetCustomControlTopologyPolicyDefinitionSequenceActionEntry {
    /**
     * Export to VPN list ID
     */
    exportToVpnListId: string;
    /**
     * Export to VPN list version
     */
    exportToVpnListVersion: number;
    /**
     * List of set parameters
     */
    setParameters: outputs.GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetCustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * Community value, e.g. `1000:10000` or `internet` or `local-AS`
     */
    community: string;
    /**
     * Community additive
     */
    communityAdditive: boolean;
    /**
     * OMP tag
     */
    ompTag: number;
    /**
     * Preference
     */
    preference: number;
    /**
     * Service TLOC color
     */
    serviceTlocColor: string;
    /**
     * Service TLOC encapsulation
     */
    serviceTlocEncapsulation: string;
    /**
     * Service TLOC IP address
     */
    serviceTlocIp: string;
    /**
     * Service TLOC list ID
     */
    serviceTlocListId: string;
    /**
     * Service TLOC list version
     */
    serviceTlocListVersion: number;
    /**
     * Service type
     */
    serviceType: string;
    /**
     * Service VPN ID
     */
    serviceVpnId: number;
    /**
     * TLOC action
     */
    tlocAction: string;
    /**
     * TLOC color
     */
    tlocColor: string;
    /**
     * TLOC encapsulation
     */
    tlocEncapsulation: string;
    /**
     * TLOC IP address
     */
    tlocIp: string;
    /**
     * TLOC list ID
     */
    tlocListId: string;
    /**
     * TLOC list version
     */
    tlocListVersion: number;
    /**
     * Type of set parameter
     */
    type: string;
}

export interface GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry {
    /**
     * Carrier
     */
    carrier: string;
    /**
     * Color list ID
     */
    colorListId: string;
    /**
     * Color list version
     */
    colorListVersion: number;
    /**
     * Community list ID
     */
    communityListId: string;
    /**
     * Community list version
     */
    communityListVersion: number;
    /**
     * Domain ID
     */
    domainId: number;
    /**
     * Expanded community list ID
     */
    expandedCommunityListId: string;
    /**
     * Expanded community list version
     */
    expandedCommunityListVersion: number;
    /**
     * Group ID
     */
    groupId: number;
    /**
     * OMP tag
     */
    ompTag: number;
    /**
     * Origin
     */
    origin: string;
    /**
     * Originator IP
     */
    originator: string;
    /**
     * Path type
     */
    pathType: string;
    /**
     * Preference
     */
    preference: number;
    /**
     * Prefix list ID
     */
    prefixListId: string;
    /**
     * Prefix list version
     */
    prefixListVersion: number;
    /**
     * Site ID
     */
    siteId: number;
    /**
     * Site list ID
     */
    siteListId: string;
    /**
     * Site list version
     */
    siteListVersion: number;
    /**
     * TLOC color
     */
    tlocColor: string;
    /**
     * TLOC encapsulation
     */
    tlocEncapsulation: string;
    /**
     * TLOC IP address
     */
    tlocIp: string;
    /**
     * TLOC list ID
     */
    tlocListId: string;
    /**
     * TLOC list version
     */
    tlocListVersion: number;
    /**
     * Type of match entry
     */
    type: string;
    /**
     * VPN ID
     */
    vpnId: number;
    /**
     * VPN list ID
     */
    vpnListId: string;
    /**
     * VPN list version
     */
    vpnListVersion: number;
}

export interface GetDataFqdnPrefixListPolicyObjectEntry {
    /**
     * Fully qualified domain name
     */
    fqdn: string;
}

export interface GetDataIpv4PrefixListPolicyObjectEntry {
    /**
     * IP prefix list entry, e.g. `10.0.0.0/12`
     */
    prefix: string;
}

export interface GetDataIpv6PrefixListPolicyObjectEntry {
    /**
     * IP prefix list entry, e.g. `2001:0:0:1::/64`
     */
    prefix: string;
}

export interface GetDeviceDevice {
    /**
     * The device ID as defined in SD-WAN Manager
     */
    deviceId: string;
    /**
     * Hostname for respective device
     */
    hostname: string;
    /**
     * Reachability of device
     */
    reachability: string;
    /**
     * Serial number for device. Could be board or virtual identifier
     */
    serialNumber: string;
    /**
     * Site id for respective device
     */
    siteId: string;
    /**
     * State for respective device
     */
    state: string;
    /**
     * Status for respective device
     */
    status: string;
    /**
     * Unique identifier for device
     */
    uuid: string;
}

export interface GetDnsSecurityPolicyDefinitionTargetVpn {
    /**
     * Only relevant when `umbrellaDnsDefault` is `false`
     */
    customDnsServerIp: string;
    /**
     * Should the local domain bypass list be enabled
     */
    localDomainBypassEnabled: boolean;
    /**
     * Should use umbrella as DNS Server
     */
    umbrellaDnsDefault: boolean;
    /**
     * VPN ID's separated by Comma
     */
    vpnIds: string[];
}

export interface GetDnsSecurityPolicyTargetVpn {
    /**
     * Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     */
    dnsServerIp: string;
    /**
     * Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     */
    localDomainBypassEnabled: boolean;
    /**
     * non empty interger string
     */
    uid: string;
    /**
     * Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     */
    umbrellaDefault: boolean;
    vpns: string[];
}

export interface GetDomainListPolicyObjectEntry {
    /**
     * Domain name, must not start with `*`
     */
    domain: string;
}

export interface GetEigrpFeatureTemplateAddressFamily {
    /**
     * Configure the networks for EIGRP to advertise
     */
    networks: outputs.GetEigrpFeatureTemplateAddressFamilyNetwork[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Redistribute routes into EIGRP
     */
    redistributes: outputs.GetEigrpFeatureTemplateAddressFamilyRedistribute[];
    /**
     * Set EIGRP address family
     */
    type: string;
}

export interface GetEigrpFeatureTemplateAddressFamilyNetwork {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure the prefixes for EIGRP to announce
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetEigrpFeatureTemplateAddressFamilyRedistribute {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Configure policy to apply to prefixes received from EIGRP neighbor
     */
    routePolicy: string;
    /**
     * Variable name
     */
    routePolicyVariable: string;
}

export interface GetEigrpFeatureTemplateInterface {
    /**
     * Set interface name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Enable/disable EIGRP
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Set summary addresses
     */
    summaryAddresses: outputs.GetEigrpFeatureTemplateInterfaceSummaryAddress[];
}

export interface GetEigrpFeatureTemplateInterfaceSummaryAddress {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set summary address prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetEigrpFeatureTemplateKey {
    /**
     * Set MD5 key
     */
    md5AuthenticationKey: string;
    /**
     * Variable name
     */
    md5AuthenticationKeyVariable: string;
    /**
     * Set MD5 key ID
     */
    md5KeyId: number;
    /**
     * Variable name
     */
    md5KeyIdVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetExpandedCommunityListPolicyObjectEntry {
    /**
     * Expanded community value, e.g. `100:1000`
     */
    community: string;
}

export interface GetExtendedCommunityListPolicyObjectEntry {
    /**
     * Extended community value, e.g. `community soo 10.0.0.1:30` or `community rt 100:10`
     */
    community: string;
}

export interface GetFeatureDeviceTemplateGeneralTemplate {
    /**
     * Feature template ID
     */
    id: string;
    /**
     * List of sub templates
     */
    subTemplates: outputs.GetFeatureDeviceTemplateGeneralTemplateSubTemplate[];
    /**
     * Feature template type
     */
    type: string;
    /**
     * Feature template version
     */
    version: number;
}

export interface GetFeatureDeviceTemplateGeneralTemplateSubTemplate {
    /**
     * Feature template ID
     */
    id: string;
    /**
     * List of sub templates
     */
    subTemplates: outputs.GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate[];
    /**
     * Feature template type
     */
    type: string;
    /**
     * Feature template version
     */
    version: number;
}

export interface GetFeatureDeviceTemplateGeneralTemplateSubTemplateSubTemplate {
    /**
     * Feature template ID
     */
    id: string;
    /**
     * Feature template type
     */
    type: string;
    /**
     * Feature template version
     */
    version: number;
}

export interface GetGeoLocationListPolicyObjectEntry {
    /**
     * Continent
     */
    continent: string;
    /**
     * Country
     */
    country: string;
}

export interface GetHubAndSpokeTopologyPolicyDefinitionTopology {
    /**
     * Advertise Hub TLOCs
     */
    advertiseHubTlocs: boolean;
    /**
     * All hubs are equal (All Spokes Sites connect to all Hubs)
     */
    allHubsAreEqual: boolean;
    /**
     * Topology name
     */
    name: string;
    /**
     * List of spokes
     */
    spokes: outputs.GetHubAndSpokeTopologyPolicyDefinitionTopologySpoke[];
    /**
     * TLOC list ID (required when `advertiseHubTlocs` is 'true')
     */
    tlocListId: string;
}

export interface GetHubAndSpokeTopologyPolicyDefinitionTopologySpoke {
    /**
     * List of hubs
     */
    hubs: outputs.GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub[];
    /**
     * Site list ID
     */
    siteListId: string;
    /**
     * Site list version
     */
    siteListVersion: number;
}

export interface GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub {
    /**
     * List of IPv4 prefix list IDs
     */
    ipv4PrefixListIds: string[];
    /**
     * List of IPv6 prefix list IDs
     */
    ipv6PrefixListIds: string[];
    /**
     * Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `allHubsAreEqual` is 'false')
     */
    preference: string;
    /**
     * Site list ID
     */
    siteListId: string;
    /**
     * Site list version
     */
    siteListVersion: number;
}

export interface GetIntrusionPreventionPolicyDefinitionLogging {
    /**
     * External Syslog Server IP
     */
    externalSyslogServerIp: string;
    /**
     * External Syslog Server VPN
     */
    externalSyslogServerVpn: string;
}

export interface GetIpsSignatureListPolicyObjectEntry {
    /**
     * Signature generator ID
     */
    generatorId: number;
    /**
     * Signature ID
     */
    signatureId: number;
}

export interface GetIpv4AclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetIpv4AclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetIpv4AclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface GetIpv4AclPolicyDefinitionSequenceActionEntry {
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion: number;
    /**
     * Counter name
     */
    counterName: string;
    /**
     * Enable logging
     */
    log: boolean;
    /**
     * Mirror ID
     */
    mirrorId: string;
    /**
     * Mirror version
     */
    mirrorVersion: number;
    /**
     * Policer ID
     */
    policerId: string;
    /**
     * Policer version
     */
    policerVersion: number;
    /**
     * List of set parameters
     */
    setParameters: outputs.GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetIpv4AclPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * DSCP value
     */
    dscp: number;
    /**
     * Next hop IP
     */
    nextHop: string;
    /**
     * Type of set parameter
     */
    type: string;
}

export interface GetIpv4AclPolicyDefinitionSequenceMatchEntry {
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion: number;
    /**
     * Destination data IPv4 prefix list ID
     */
    destinationDataIpv4PrefixListId: string;
    /**
     * Destination data IPv4 prefix list version
     */
    destinationDataIpv4PrefixListVersion: number;
    /**
     * Destination IP prefix
     */
    destinationIp: string;
    /**
     * Destination ports. Single value (0-65535) or ranges separated by spaces.
     */
    destinationPorts: string;
    /**
     * DSCP value
     */
    dscp: number;
    /**
     * ICMP Message
     */
    icmpMessage: string;
    /**
     * Packet length
     */
    packetLength: number;
    /**
     * PLP - priority
     */
    priority: string;
    /**
     * Single value (0-255) or multiple values separated by spaces
     */
    protocol: string;
    /**
     * Source data IPv4 prefix list ID
     */
    sourceDataIpv4PrefixListId: string;
    /**
     * Source data IPv4 prefix list version
     */
    sourceDataIpv4PrefixListVersion: number;
    /**
     * Source IP prefix
     */
    sourceIp: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces.
     */
    sourcePorts: string;
    /**
     * TCP parameters
     */
    tcp: string;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetIpv4DeviceAclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetIpv4DeviceAclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface GetIpv4DeviceAclPolicyDefinitionSequenceActionEntry {
    /**
     * Counter name
     */
    counterName: string;
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetIpv4DeviceAclPolicyDefinitionSequenceMatchEntry {
    /**
     * Destination data IPv4 prefix list ID
     */
    destinationDataIpv4PrefixListId: string;
    /**
     * Destination data IPv4 prefix list version
     */
    destinationDataIpv4PrefixListVersion: number;
    /**
     * Destination IP prefix
     */
    destinationIp: string;
    /**
     * Destination port, only `22` and `161` supported
     */
    destinationPort: number;
    /**
     * Source data IPv4 prefix list ID
     */
    sourceDataIpv4PrefixListId: string;
    /**
     * Source data IPv4 prefix list version
     */
    sourceDataIpv4PrefixListVersion: number;
    /**
     * Source IP prefix
     */
    sourceIp: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces.
     */
    sourcePorts: string;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetIpv4PrefixListPolicyObjectEntry {
    /**
     * Greater equal
     */
    ge: number;
    /**
     * Lesser equal
     */
    le: number;
    /**
     * IP prefix list entry e.g., `10.0.0.0/12`
     */
    prefix: string;
}

export interface GetIpv6AclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetIpv6AclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetIpv6AclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface GetIpv6AclPolicyDefinitionSequenceActionEntry {
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion: number;
    /**
     * Counter name
     */
    counterName: string;
    /**
     * Enable logging
     */
    log: boolean;
    /**
     * Mirror ID
     */
    mirrorId: string;
    /**
     * Mirror version
     */
    mirrorVersion: number;
    /**
     * Policer ID
     */
    policerId: string;
    /**
     * Policer version
     */
    policerVersion: number;
    /**
     * List of set parameters
     */
    setParameters: outputs.GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetIpv6AclPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * Next hop IP
     */
    nextHop: string;
    /**
     * Traffic class
     */
    trafficClass: number;
    /**
     * Type of set parameter
     */
    type: string;
}

export interface GetIpv6AclPolicyDefinitionSequenceMatchEntry {
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion: number;
    /**
     * Destination dataIPv6 prefix list ID
     */
    destinationDataIpv6PrefixListId: string;
    /**
     * Destination data prefix list version
     */
    destinationDataIpv6PrefixListVersion: number;
    /**
     * Destination IPv6 prefix
     */
    destinationIp: string;
    /**
     * Destination ports. Single value (0-65535) or ranges separated by spaces.
     */
    destinationPorts: string;
    /**
     * Next header
     */
    nextHeader: number;
    /**
     * Packet length
     */
    packetLength: number;
    /**
     * PLP - priority
     */
    priority: string;
    /**
     * Source data IPv6 prefix list ID
     */
    sourceDataIpv6PrefixListId: string;
    /**
     * Source data IPv6 prefix list version
     */
    sourceDataIpv6PrefixListVersion: number;
    /**
     * Source IPv6 prefix
     */
    sourceIp: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces.
     */
    sourcePorts: string;
    /**
     * TCP parameters
     */
    tcp: string;
    /**
     * Traffic class
     */
    trafficClass: number;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetIpv6DeviceAclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetIpv6DeviceAclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface GetIpv6DeviceAclPolicyDefinitionSequenceActionEntry {
    /**
     * Counter name
     */
    counterName: string;
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetIpv6DeviceAclPolicyDefinitionSequenceMatchEntry {
    /**
     * Destination data IPv6 prefix list ID
     */
    destinationDataIpv6PrefixListId: string;
    /**
     * Destination data IPv6 prefix list version
     */
    destinationDataIpv6PrefixListVersion: number;
    /**
     * Destination IP prefix
     */
    destinationIp: string;
    /**
     * Destination port, only `22` and `161` supported
     */
    destinationPort: number;
    /**
     * Source data IPv6 prefix list ID
     */
    sourceDataIpv6PrefixListId: string;
    /**
     * Source data IPv6 prefix list version
     */
    sourceDataIpv6PrefixListVersion: number;
    /**
     * Source IP prefix
     */
    sourceIp: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces.
     */
    sourcePorts: string;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetIpv6PrefixListPolicyObjectEntry {
    /**
     * Greater equal
     */
    ge: number;
    /**
     * Lesser equal
     */
    le: number;
    /**
     * IP prefix list entry, e.g. `2001:1:1:2::/64`
     */
    prefix: string;
}

export interface GetLocalApplicationListPolicyObjectEntry {
    /**
     * Application name
     */
    application: string;
    /**
     * Application family name
     */
    applicationFamily: string;
}

export interface GetLocalizedPolicyDefinition {
    /**
     * Policy definition ID
     */
    id: string;
    /**
     * Policy definition type
     */
    type: string;
    /**
     * Policy definition version
     */
    version: number;
}

export interface GetMeshTopologyPolicyDefinitionRegion {
    /**
     * Region name
     */
    name: string;
    /**
     * Site list IDs
     */
    siteListIds: string[];
    /**
     * Site list versions
     */
    siteListVersions: string[];
}

export interface GetOtherThousandeyesFeatureVirtualApplication {
    /**
     * Set the Account Group Token
     */
    accountGroupToken: string;
    /**
     * Variable name
     */
    accountGroupTokenVariable: string;
    /**
     * Set the Agent default gateway
     */
    agentDefaultGateway: string;
    /**
     * Variable name
     */
    agentDefaultGatewayVariable: string;
    /**
     * Set the host name
     */
    hostname: string;
    /**
     * Variable name
     */
    hostnameVariable: string;
    /**
     * Set the Agent IP Address
     */
    managementIp: string;
    /**
     * Variable name
     */
    managementIpVariable: string;
    /**
     * Set the Agent SubnetMask
     */
    managementSubnetMask: string;
    /**
     * Variable name
     */
    managementSubnetMaskVariable: string;
    /**
     * Set the name server
     */
    nameServerIp: string;
    /**
     * Variable name
     */
    nameServerIpVariable: string;
    /**
     * Set the proxy PAC url
     */
    pacUrl: string;
    /**
     * Variable name
     */
    pacUrlVariable: string;
    /**
     * Set the Proxy Host
     */
    proxyHost: string;
    /**
     * Variable name
     */
    proxyHostVariable: string;
    /**
     * Set the Proxy Port
     */
    proxyPort: number;
    /**
     * Variable name
     */
    proxyPortVariable: string;
    /**
     * Select Web Proxy Type
     */
    proxyType: string;
    /**
     * VPN number
     */
    vpn: number;
    /**
     * Variable name
     */
    vpnVariable: string;
}

export interface GetOtherUcseFeatureInterface {
    /**
     * Set Inteface name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Assign IPv4 address
     */
    ipv4Address: string;
    /**
     * Variable name
     */
    ipv4AddressVariable: string;
    /**
     * UCSE Interface VPN
     */
    ucseInterfaceVpn: number;
    /**
     * Variable name
     */
    ucseInterfaceVpnVariable: string;
}

export interface GetPolicyObjectAppProbeClassEntry {
    /**
     * Forwarding Class Name
     */
    forwardingClass: string;
    /**
     * Map
     */
    maps: outputs.GetPolicyObjectAppProbeClassEntryMap[];
}

export interface GetPolicyObjectAppProbeClassEntryMap {
    /**
     * Color
     */
    color: string;
    /**
     * DSCP number
     */
    dscp: number;
}

export interface GetPolicyObjectApplicationListEntry {
    application: string;
    applicationFamily: string;
}

export interface GetPolicyObjectAsPathListEntry {
    asPathList: string;
}

export interface GetPolicyObjectClassMapEntry {
    /**
     * select a queue
     */
    queue: string;
}

export interface GetPolicyObjectColorListEntry {
    color: string;
}

export interface GetPolicyObjectDataIpv4PrefixListEntry {
    /**
     * IPv4 address
     */
    ipv4Address: string;
    /**
     * IPv4 prefix Length
     */
    ipv4PrefixLength: number;
}

export interface GetPolicyObjectDataIpv6PrefixListEntry {
    /**
     * IPv6 address
     */
    ipv6Address: string;
    /**
     * IPv6 prefix
     */
    ipv6PrefixLength: number;
}

export interface GetPolicyObjectExtendedCommunityListEntry {
    /**
     * can be soo 10.0.0.1:30 or rt 500:50 etc.
     */
    extendedCommunity: string;
}

export interface GetPolicyObjectIpv4PrefixListEntry {
    /**
     * IPv4 prefix length with ge range operator
     */
    ge: number;
    /**
     * IPv4 address
     */
    ipv4Address: string;
    /**
     * IPv4 prefix length
     */
    ipv4PrefixLength: number;
    /**
     * IPv4 prefix length with le range operator
     */
    le: number;
}

export interface GetPolicyObjectIpv6PrefixListEntry {
    /**
     * IPv6 prefix length with ge range operator
     */
    ge: number;
    /**
     * IPv6 address
     */
    ipv6Address: string;
    /**
     * IPv6 prefix length
     */
    ipv6PrefixLength: number;
    /**
     * IPv6 prefix length with le range operator
     */
    le: number;
}

export interface GetPolicyObjectMirrorEntry {
    /**
     * remote destination ip address
     */
    remoteDestinationIp: string;
    /**
     * source ip address
     */
    sourceIp: string;
}

export interface GetPolicyObjectPolicerEntry {
    /**
     * Burst (Bytes)
     */
    burstBytes: number;
    /**
     * Exceed options such as Drop or Remark
     */
    exceedAction: string;
    /**
     * Rate (bps)
     */
    rateBps: number;
}

export interface GetPolicyObjectPreferredColorGroupEntry {
    primaryColorPreferences: string[];
    primaryPathPreference: string;
    secondaryColorPreferences: string[];
    secondaryPathPreference: string;
    tertiaryColorPreferences: string[];
    tertiaryPathPreference: string;
}

export interface GetPolicyObjectSecurityDataIpv4PrefixListEntry {
    ipPrefix: string;
    /**
     * Variable name
     */
    ipPrefixVariable: string;
}

export interface GetPolicyObjectSecurityFqdnListEntry {
    pattern: string;
}

export interface GetPolicyObjectSecurityGeolocationListEntry {
    /**
     * continent name
     */
    continent: string;
    /**
     * country names
     */
    country: string;
}

export interface GetPolicyObjectSecurityIdentityListEntry {
    user: string;
    userGroup: string;
}

export interface GetPolicyObjectSecurityIpsSignatureEntry {
    generatorId: string;
    signatureId: string;
}

export interface GetPolicyObjectSecurityLocalApplicationListEntry {
    app: string;
    appFamily: string;
}

export interface GetPolicyObjectSecurityLocalDomainListEntry {
    localDomain: string;
}

export interface GetPolicyObjectSecurityPortListEntry {
    /**
     * can be single port or port range
     */
    port: string;
}

export interface GetPolicyObjectSecurityScalableGroupTagListEntry {
    sgtName: string;
    tag: string;
}

export interface GetPolicyObjectSecurityUrlAllowListEntry {
    /**
     * valid url pattern
     */
    pattern: string;
}

export interface GetPolicyObjectSecurityUrlBlockListEntry {
    /**
     * valid url pattern
     */
    pattern: string;
}

export interface GetPolicyObjectSlaClassListEntry {
    appProbeClassListId: string;
    fallbackBestTunnelCriteria: string;
    fallbackBestTunnelJitterVariance: number;
    fallbackBestTunnelLatencyVariance: number;
    fallbackBestTunnelLossVariance: number;
    jitter: number;
    latency: number;
    loss: number;
}

export interface GetPolicyObjectStandardCommunityListEntry {
    /**
     * Standard Community
     */
    standardCommunity: string;
}

export interface GetPolicyObjectTlocListEntry {
    /**
     * color
     */
    color: string;
    /**
     * encapsulation
     */
    encapsulation: string;
    /**
     * Preference
     */
    preference: string;
    /**
     * tloc
     */
    tlocIp: string;
}

export interface GetPolicyObjectVpnGroupEntry {
    /**
     * can be single vpn id or vpn id range
     */
    vpn: number;
}

export interface GetPortListPolicyObjectEntry {
    /**
     * Port number
     */
    port: number;
}

export interface GetProtocolListPolicyObjectEntry {
    /**
     * Protocol name
     */
    protocol: string;
}

export interface GetQosMapPolicyDefinitionQosScheduler {
    /**
     * Bandwidth percent
     */
    bandwidthPercent: number;
    /**
     * Buffer percent
     */
    bufferPercent: number;
    /**
     * Burst size
     */
    burst: number;
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion: number;
    /**
     * Drop type
     */
    dropType: string;
    /**
     * Queue number
     */
    queue: number;
    /**
     * Scheduling type
     */
    schedulingType: string;
}

export interface GetRegionListPolicyObjectEntry {
    /**
     * Region ID or range of Region IDs e.g., `2` or `3-6`
     */
    regionId: string;
}

export interface GetRewriteRulePolicyDefinitionRule {
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion: number;
    /**
     * DSCP
     */
    dscp: number;
    /**
     * Layer2 CoS
     */
    layer2Cos: number;
    /**
     * Priority
     */
    priority: string;
}

export interface GetRoutePolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetRoutePolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `reject`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * IP version, either `ipv4` or `ipv6`
     */
    ipType: string;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetRoutePolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface GetRoutePolicyDefinitionSequenceActionEntry {
    /**
     * Aggregator
     */
    aggregator: number;
    /**
     * IP address
     */
    aggregatorIpAddress: string;
    /**
     * Space separated list of ASN to exclude
     */
    asPathExclude: string;
    /**
     * Space separated list of ASN to prepend
     */
    asPathPrepend: string;
    /**
     * Atomic aggregate
     */
    atomicAggregate: boolean;
    /**
     * Community value, e.g. `1000:10000` or `internet` or `local-AS`
     */
    community: string;
    /**
     * Community additive
     */
    communityAdditive: boolean;
    /**
     * Local preference
     */
    localPreference: number;
    /**
     * Metric
     */
    metric: number;
    /**
     * Metric type
     */
    metricType: string;
    /**
     * Next hop IP
     */
    nextHop: string;
    /**
     * OMP tag
     */
    ompTag: number;
    /**
     * Origin
     */
    origin: string;
    /**
     * Originator IP
     */
    originator: string;
    /**
     * OSPF tag
     */
    ospfTag: number;
    /**
     * Type of action entry
     */
    type: string;
    /**
     * Weight
     */
    weight: number;
}

export interface GetRoutePolicyDefinitionSequenceMatchEntry {
    /**
     * AS path list ID
     */
    asPathListId: string;
    /**
     * AS path list version
     */
    asPathListVersion: number;
    /**
     * Community list IDs
     */
    communityListIds: string[];
    /**
     * Community list match flag
     */
    communityListMatchFlag: string;
    /**
     * Community list versions
     */
    communityListVersions: string[];
    /**
     * Expanded community list ID
     */
    expandedCommunityListId: string;
    /**
     * Expanded community list version
     */
    expandedCommunityListVersion: number;
    /**
     * Extended community list ID
     */
    extendedCommunityListId: string;
    /**
     * Extended community list version
     */
    extendedCommunityListVersion: number;
    /**
     * Local preference
     */
    localPreference: number;
    /**
     * Metric
     */
    metric: number;
    /**
     * Next hop prefix list ID
     */
    nextHopPrefixListId: string;
    /**
     * Next hop prefix list version
     */
    nextHopPrefixListVersion: number;
    /**
     * OMP tag
     */
    ompTag: number;
    /**
     * Origin
     */
    origin: string;
    /**
     * OSPF tag
     */
    ospfTag: number;
    /**
     * Peer IP
     */
    peer: string;
    /**
     * Prefix list ID
     */
    prefixListId: string;
    /**
     * Prefix list version
     */
    prefixListVersion: number;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetRuleSetPolicyDefinitionRule {
    /**
     * Destination data FQDN prefix list ID
     */
    destinationDataFqdnPrefixListId: string;
    /**
     * Destination data FQDN prefix list version
     */
    destinationDataFqdnPrefixListVersion: number;
    /**
     * Destination data IPv4 prefix list ID
     */
    destinationDataIpv4PrefixListId: string;
    /**
     * Destination data IPv4 prefix list version
     */
    destinationDataIpv4PrefixListVersion: number;
    /**
     * Destination fully qualified domain name
     */
    destinationFqdn: string;
    /**
     * Destination geo location
     */
    destinationGeoLocation: string;
    /**
     * Destination geo location list ID
     */
    destinationGeoLocationListId: string;
    /**
     * Destination geo location list version
     */
    destinationGeoLocationListVersion: number;
    /**
     * Destination IPv4 prefix
     */
    destinationIpv4Prefix: string;
    /**
     * Destination IPv4 prefix variable name
     */
    destinationIpv4PrefixVariable: string;
    /**
     * Destination object group ID
     */
    destinationObjectGroupId: string;
    /**
     * Destination object group version
     */
    destinationObjectGroupVersion: number;
    /**
     * Destination port or range of ports
     */
    destinationPort: string;
    /**
     * Destination port list ID
     */
    destinationPortListId: string;
    /**
     * Destination port list version
     */
    destinationPortListVersion: number;
    /**
     * The name of the rule
     */
    name: string;
    /**
     * The order of the rule
     */
    order: number;
    /**
     * Protocol name
     */
    protocol: string;
    /**
     * Protocol list ID
     */
    protocolListId: string;
    /**
     * Protocol list version
     */
    protocolListVersion: number;
    /**
     * Protocol number
     */
    protocolNumber: number;
    /**
     * Source data FQDN prefix list ID
     */
    sourceDataFqdnPrefixListId: string;
    /**
     * Source data FQDN prefix list version
     */
    sourceDataFqdnPrefixListVersion: number;
    /**
     * Source data IPv4 prefix list ID
     */
    sourceDataIpv4PrefixListId: string;
    /**
     * Source data IPv4 prefix list version
     */
    sourceDataIpv4PrefixListVersion: number;
    /**
     * Source fully qualified domain name
     */
    sourceFqdn: string;
    /**
     * Source geo location
     */
    sourceGeoLocation: string;
    /**
     * Source geo location list ID
     */
    sourceGeoLocationListId: string;
    /**
     * Source geo location list version
     */
    sourceGeoLocationListVersion: number;
    /**
     * Source IPv4 prefix
     */
    sourceIpv4Prefix: string;
    /**
     * Source IPv4 prefix variable name
     */
    sourceIpv4PrefixVariable: string;
    /**
     * Source object group ID
     */
    sourceObjectGroupId: string;
    /**
     * Source object group version
     */
    sourceObjectGroupVersion: number;
    /**
     * Source port or range of ports
     */
    sourcePort: string;
    /**
     * Source port list ID
     */
    sourcePortListId: string;
    /**
     * Source port list version
     */
    sourcePortListVersion: number;
}

export interface GetSecurityAppHostingFeatureTemplateVirtualApplication {
    /**
     * List of Virtual applications
     */
    applicationType: string;
    /**
     * Data Gateway IP
     */
    dataGatewayIp: string;
    /**
     * Variable name
     */
    dataGatewayIpVariable: string;
    /**
     * Data Service IP
     */
    dataServiceIp: string;
    /**
     * Variable name
     */
    dataServiceIpVariable: string;
    /**
     * Download URL Database on Device
     */
    databaseUrl: boolean;
    /**
     * Variable name
     */
    databaseUrlVariable: string;
    /**
     * List of Virtual applications
     */
    instanceId: string;
    /**
     * Is Nat enabled
     */
    nat: boolean;
    /**
     * Variable name
     */
    natVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Resource Profile
     */
    resourceProfile: string;
    /**
     * Variable name
     */
    resourceProfileVariable: string;
    /**
     * Service Gateway IP (Management interface)
     */
    serviceGatewayIp: string;
    /**
     * Variable name
     */
    serviceGatewayIpVariable: string;
    /**
     * Service IP
     */
    serviceIp: string;
    /**
     * Variable name
     */
    serviceIpVariable: string;
}

export interface GetSecurityPolicyDefinition {
    /**
     * Destination Zone
     */
    destinationZone: string;
    /**
     * Policy definition ID
     */
    id: string;
    /**
     * Source Zone
     */
    sourceZone: string;
    /**
     * Policy definition type
     */
    type: string;
    /**
     * Policy definition version
     */
    version: number;
}

export interface GetSecurityPolicyLogging {
    /**
     * External Syslog Server IP
     */
    externalSyslogServerIp: string;
    /**
     * External Syslog Server Source Interface
     */
    externalSyslogServerSourceInterface: string;
    /**
     * External Syslog Server VPN
     */
    externalSyslogServerVpn: string;
}

export interface GetServiceDhcpServerFeatureOptionCode {
    /**
     * Set ASCII value
     */
    ascii: string;
    /**
     * Variable name
     */
    asciiVariable: string;
    /**
     * Set Option Code
     */
    code: number;
    /**
     * Variable name
     */
    codeVariable: string;
    /**
     * Set HEX value
     */
    hex: string;
    /**
     * Variable name
     */
    hexVariable: string;
    /**
     * Variable name
     */
    ipVariable: string;
    /**
     * Set ip address
     */
    ips: string[];
}

export interface GetServiceDhcpServerFeatureStaticLease {
    /**
     * Set client’s static IP address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Set MAC address of client
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
}

export interface GetServiceIpv4AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions: outputs.GetServiceIpv4AclFeatureSequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    /**
     * Define match conditions
     */
    matchEntries: outputs.GetServiceIpv4AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     */
    sequenceId: number;
    /**
     * Sequence Name
     */
    sequenceName: string;
}

export interface GetServiceIpv4AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName: string;
    /**
     * Enable Log
     */
    acceptLog: boolean;
    acceptMirrorListId: string;
    acceptPolicerId: string;
    /**
     * DSCP number
     */
    acceptSetDscp: number;
    /**
     * Set Next Hop (IPV4 address)
     */
    acceptSetNextHop: string;
    /**
     * Counter Name
     */
    dropCounterName: string;
    /**
     * Enable Log
     */
    dropLog: boolean;
}

export interface GetServiceIpv4AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix: string;
    destinationDataPrefixListId: string;
    /**
     * Variable name
     */
    destinationDataPrefixVariable: string;
    /**
     * Destination Port List
     */
    destinationPorts: outputs.GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * DSCP number
     */
    dscps: number[];
    /**
     * ICMP Message
     */
    icmpMessages: string[];
    /**
     * Packet Length
     */
    packetLength: string;
    /**
     * protocol number list with at least one item
     */
    protocols: number[];
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix: string;
    sourceDataPrefixListId: string;
    /**
     * Variable name
     */
    sourceDataPrefixVariable: string;
    /**
     * Source Port List
     */
    sourcePorts: outputs.GetServiceIpv4AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     */
    tcpState: string;
}

export interface GetServiceIpv4AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port: string;
}

export interface GetServiceIpv4AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port: string;
}

export interface GetServiceIpv6AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions: outputs.GetServiceIpv6AclFeatureSequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    /**
     * Define match conditions
     */
    matchEntries: outputs.GetServiceIpv6AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     */
    sequenceId: number;
    /**
     * Sequence Name
     */
    sequenceName: string;
}

export interface GetServiceIpv6AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName: string;
    /**
     * Enable Log
     */
    acceptLog: boolean;
    acceptMirrorListId: string;
    acceptPolicerId: string;
    /**
     * Set Next Hop (IPV6 address)
     */
    acceptSetNextHop: string;
    /**
     * set traffic class number
     */
    acceptTrafficClass: number;
    /**
     * Counter Name
     */
    dropCounterName: string;
    /**
     * Enable Log
     */
    dropLog: boolean;
}

export interface GetServiceIpv6AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix: string;
    destinationDataPrefixListId: string;
    /**
     * Destination Port List
     */
    destinationPorts: outputs.GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * ICMP6 Message
     */
    icmpMessages: string[];
    /**
     * next header number
     */
    nextHeader: number;
    /**
     * Packet Length
     */
    packetLength: string;
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix: string;
    sourceDataPrefixListId: string;
    /**
     * Source Port List
     */
    sourcePorts: outputs.GetServiceIpv6AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     */
    tcpState: string;
    /**
     * Select Traffic Class
     */
    trafficClasses: number[];
}

export interface GetServiceIpv6AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port: string;
}

export interface GetServiceIpv6AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port: string;
}

export interface GetServiceLanVpnFeatureAdvertiseOmpIpv4 {
    /**
     * IPv4 Prefix List
     */
    prefixes: outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv4Prefix[];
    /**
     * Protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceLanVpnFeatureAdvertiseOmpIpv4Prefix {
    /**
     * Aggregate Only
     */
    aggregateOnly: boolean;
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * Applied to Region
     */
    region: string;
    /**
     * Variable name
     */
    regionVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceLanVpnFeatureAdvertiseOmpIpv6 {
    /**
     * IPv6 Prefix List
     */
    prefixes: outputs.GetServiceLanVpnFeatureAdvertiseOmpIpv6Prefix[];
    /**
     * Protocol
     */
    protocol: string;
    /**
     * Protocol Sub Type
     */
    protocolSubType: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceLanVpnFeatureAdvertiseOmpIpv6Prefix {
    /**
     * Aggregate Only
     */
    aggregateOnly: boolean;
    /**
     * IPv6 Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetServiceLanVpnFeatureGreRoute {
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * Interface
     */
    interfaces: string[];
    /**
     * IP Address
     */
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
    /**
     * Service
     */
    vpn: number;
}

export interface GetServiceLanVpnFeatureHostMapping {
    /**
     * Hostname
     */
    hostName: string;
    /**
     * Variable name
     */
    hostNameVariable: string;
    /**
     * List of IP
     */
    listOfIps: string[];
    /**
     * Variable name
     */
    listOfIpsVariable: string;
}

export interface GetServiceLanVpnFeatureIpsecRoute {
    /**
     * Variable name
     */
    interfaceVariable: string;
    /**
     * Interface
     */
    interfaces: string[];
    /**
     * IP Address
     */
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceLanVpnFeatureIpv4ExportRouteTarget {
    /**
     * Route target
     */
    routeTarget: string;
    /**
     * Variable name
     */
    routeTargetVariable: string;
}

export interface GetServiceLanVpnFeatureIpv4ImportRouteTarget {
    /**
     * Route target
     */
    routeTarget: string;
    /**
     * Variable name
     */
    routeTargetVariable: string;
}

export interface GetServiceLanVpnFeatureIpv4StaticRoute {
    /**
     * IPv4 Route Gateway DHCP
     */
    gatewayDhcp: boolean;
    /**
     * IP Address
     */
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * IPv4 Route Gateway Next Hop with Tracker
     */
    nextHopWithTrackers: outputs.GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker[];
    /**
     * IPv4 Route Gateway Next Hop
     */
    nextHops: outputs.GetServiceLanVpnFeatureIpv4StaticRouteNextHop[];
    /**
     * IPv4 Route Gateway Next Hop
     */
    null0: boolean;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
    /**
     * IPv4 Route Gateway VPN
     */
    vpn: boolean;
}

export interface GetServiceLanVpnFeatureIpv4StaticRouteNextHop {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
}

export interface GetServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
    trackerId: string;
}

export interface GetServiceLanVpnFeatureIpv6ExportRouteTarget {
    /**
     * Route target
     */
    routeTarget: string;
    /**
     * Variable name
     */
    routeTargetVariable: string;
}

export interface GetServiceLanVpnFeatureIpv6ImportRouteTarget {
    /**
     * Route target
     */
    routeTarget: string;
    /**
     * Variable name
     */
    routeTargetVariable: string;
}

export interface GetServiceLanVpnFeatureIpv6StaticRoute {
    /**
     * IPv6 Nat
     */
    nat: string;
    /**
     * Variable name
     */
    natVariable: string;
    /**
     * IPv6 Route Gateway Next Hop
     */
    nextHops: outputs.GetServiceLanVpnFeatureIpv6StaticRouteNextHop[];
    /**
     * IPv6 Route Gateway Next Hop
     */
    null0: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetServiceLanVpnFeatureIpv6StaticRouteNextHop {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
}

export interface GetServiceLanVpnFeatureNat64V4Pool {
    /**
     * NAT64 v4 Pool Name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * NAT64 Overload
     */
    overload: boolean;
    /**
     * Variable name
     */
    overloadVariable: string;
    /**
     * NAT64 Pool Range End
     */
    rangeEnd: string;
    /**
     * Variable name
     */
    rangeEndVariable: string;
    /**
     * NAT64 Pool Range Start
     */
    rangeStart: string;
    /**
     * Variable name
     */
    rangeStartVariable: string;
}

export interface GetServiceLanVpnFeatureNatPool {
    /**
     * NAT Direction
     */
    direction: string;
    /**
     * Variable name
     */
    directionVariable: string;
    /**
     * NAT Pool Name
     */
    natPoolName: number;
    /**
     * Variable name
     */
    natPoolNameVariable: string;
    /**
     * NAT Overload
     */
    overload: boolean;
    /**
     * Variable name
     */
    overloadVariable: string;
    /**
     * NAT Pool Prefix Length
     */
    prefixLength: number;
    /**
     * Variable name
     */
    prefixLengthVariable: string;
    /**
     * NAT Pool Range End
     */
    rangeEnd: string;
    /**
     * Variable name
     */
    rangeEndVariable: string;
    /**
     * NAT Pool Range Start
     */
    rangeStart: string;
    /**
     * Variable name
     */
    rangeStartVariable: string;
    trackerObjectId: string;
}

export interface GetServiceLanVpnFeatureNatPortForward {
    /**
     * NAT Pool Name
     */
    natPoolName: number;
    /**
     * Variable name
     */
    natPoolNameVariable: string;
    /**
     * Protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    /**
     * Source IP Address
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Source Port
     */
    sourcePort: number;
    /**
     * Variable name
     */
    sourcePortVariable: string;
    /**
     * Translate Port
     */
    translatePort: number;
    /**
     * Variable name
     */
    translatePortVariable: string;
    /**
     * Translated Source IP Address
     */
    translatedSourceIp: string;
    /**
     * Variable name
     */
    translatedSourceIpVariable: string;
}

export interface GetServiceLanVpnFeatureRouteLeakFromGlobalVpn {
    /**
     * Redistribute Routes to specific Protocol on Service VPN
     */
    redistributions: outputs.GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution[];
    routePolicyId: string;
    /**
     * Leak Routes of particular protocol from Global to Service VPN
     */
    routeProtocol: string;
    /**
     * Variable name
     */
    routeProtocolVariable: string;
}

export interface GetServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution {
    /**
     * Protocol to restributed leaked routes
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    redistributionPolicyId: string;
}

export interface GetServiceLanVpnFeatureRouteLeakFromOtherService {
    /**
     * Redistribute Route to specific Protocol on Current Service VPN
     */
    redistributions: outputs.GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution[];
    routePolicyId: string;
    /**
     * Leak Route of particular protocol from Source Service VPN
     */
    routeProtocol: string;
    /**
     * Variable name
     */
    routeProtocolVariable: string;
    /**
     * Source Service VPN from where route are to be leaked
     */
    sourceVpn: number;
    /**
     * Variable name
     */
    sourceVpnVariable: string;
}

export interface GetServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution {
    /**
     * Protocol to restributed leaked routes
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    redistributionPolicyId: string;
}

export interface GetServiceLanVpnFeatureRouteLeakToGlobalVpn {
    /**
     * Redistribute Routes to specific Protocol on Global VPN
     */
    redistributions: outputs.GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution[];
    routePolicyId: string;
    /**
     * Leak Routes of particular protocol from Service to Global VPN
     */
    routeProtocol: string;
    /**
     * Variable name
     */
    routeProtocolVariable: string;
}

export interface GetServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution {
    /**
     * Protocol to restributed leaked routes
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    redistributionPolicyId: string;
}

export interface GetServiceLanVpnFeatureService {
    /**
     * IPv4 Addresses (Maximum: 4)
     */
    ipv4Addresses: string[];
    /**
     * Variable name
     */
    ipv4AddressesVariable: string;
    /**
     * Service Type
     */
    serviceType: string;
    /**
     * Variable name
     */
    serviceTypeVariable: string;
    /**
     * Tracking
     */
    tracking: boolean;
    /**
     * Variable name
     */
    trackingVariable: string;
}

export interface GetServiceLanVpnFeatureServiceRoute {
    /**
     * IP Address
     */
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * Service
     */
    service: string;
    /**
     * Variable name
     */
    serviceVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
    /**
     * Service
     */
    vpn: number;
}

export interface GetServiceLanVpnFeatureStaticNat {
    /**
     * NAT Pool Name
     */
    natPoolName: number;
    /**
     * Variable name
     */
    natPoolNameVariable: string;
    /**
     * Source IP Address
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Static NAT Direction
     */
    staticNatDirection: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable: string;
    trackerObjectId: string;
    /**
     * Translated Source IP Address
     */
    translatedSourceIp: string;
    /**
     * Variable name
     */
    translatedSourceIpVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureArp {
    /**
     * IPV4 Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC Address
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp {
    /**
     * VRRP Ip Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * VRRP Secondary Ip Addresses
     */
    secondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress[];
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    tlocPrefChangeValue: number;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    tlocPrefixChange: boolean;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Tracking object for VRRP configuration
     */
    trackingObjects: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject[];
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress {
    /**
     * Ip Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     */
    decrementValue: number;
    /**
     * Variable name
     */
    decrementValueVariable: string;
    /**
     * Track Action
     */
    trackerAction: string;
    /**
     * Variable name
     */
    trackerActionVariable: string;
    trackerId: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * DHCPv6 Helper VPN
     */
    dhcpv6HelperVpn: number;
    /**
     * Variable name
     */
    dhcpv6HelperVpnVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp {
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * IPv6 VRRP
     */
    ipv6Addresses: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address[];
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address {
    /**
     * Assign Global IPv6 Prefix
     */
    globalAddress: string;
    /**
     * Variable name
     */
    globalAddressVariable: string;
    /**
     * Use link-local IPv6 Address
     */
    linkLocalAddress: string;
    /**
     * Variable name
     */
    linkLocalAddressVariable: string;
}

export interface GetServiceLanVpnInterfaceEthernetFeatureStaticNat {
    /**
     * Direction of static NAT translation
     */
    direction: string;
    /**
     * Source IP address to be translated
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Source VPN ID
     */
    sourceVpn: number;
    /**
     * Variable name
     */
    sourceVpnVariable: string;
    /**
     * Statically translated source IP address
     */
    translateIp: string;
    /**
     * Variable name
     */
    translateIpVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureArp {
    /**
     * IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC address
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Subnet Mask
     */
    ipv4SubnetMask: string;
    /**
     * Variable name
     */
    ipv4SubnetMaskVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp {
    /**
     * Assign IPV4 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * Track Prefix List
     */
    prefixList: string;
    /**
     * Variable name
     */
    prefixListVariable: string;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * VRRP Secondary IPV4 address
     */
    secondaryAddresses: outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress[];
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * change TLOC preference
     */
    tlocPrefixChange: boolean;
    /**
     * Set tloc preference change value
     */
    tlocPrefixChangeValue: number;
    /**
     * Variable name
     */
    tlocPrefixChangeValueVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Variable name
     */
    trackOmpVariable: string;
    /**
     * tracking object for VRRP configuration
     */
    trackingObjects: outputs.GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject[];
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress {
    /**
     * VRRP Secondary IPV4 address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     */
    decrementValue: number;
    /**
     * Variable name
     */
    decrementValueVariable: string;
    /**
     * Track Action
     */
    trackAction: string;
    /**
     * Variable name
     */
    trackActionVariable: string;
    trackerId: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * DHCPv6 Helper VPN
     */
    vpn: number;
    /**
     * Variable name
     */
    vpnVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress {
    /**
     * IPv6 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp {
    /**
     * IPv6 VRRP
     */
    addresses: outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress[];
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * IPv6 Secondary IP address
     */
    secondaryAddresses: outputs.GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress[];
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Variable name
     */
    trackOmpVariable: string;
    /**
     * Track Prefix List
     */
    trackPrefixList: string;
    /**
     * Variable name
     */
    trackPrefixListVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress {
    /**
     * Assign Global IPv6 Prefix
     */
    globalAddress: string;
    /**
     * Variable name
     */
    globalAddressVariable: string;
    /**
     * Use link-local IPv6 Address
     */
    linkLocalAddress: string;
    /**
     * Variable name
     */
    linkLocalAddressVariable: string;
}

export interface GetServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress {
    /**
     * IPv6 Secondary IP address
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetServiceMulticastFeatureAutoRpAnnounce {
    /**
     * Set RP Announce Interface Name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set RP Announce Scope
     */
    scope: number;
    /**
     * Variable name
     */
    scopeVariable: string;
}

export interface GetServiceMulticastFeatureAutoRpDiscovery {
    /**
     * Set RP Discovery Interface Name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set RP Discovery Scope
     */
    scope: number;
    /**
     * Variable name
     */
    scopeVariable: string;
}

export interface GetServiceMulticastFeatureIgmpInterface {
    /**
     * Set interface name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Configure static joins
     */
    joinGroups: outputs.GetServiceMulticastFeatureIgmpInterfaceJoinGroup[];
    /**
     * igmp Version \n\n
     */
    version: number;
}

export interface GetServiceMulticastFeatureIgmpInterfaceJoinGroup {
    /**
     * Set group address
     */
    groupAddress: string;
    /**
     * Variable name
     */
    groupAddressVariable: string;
    /**
     * Set source address
     */
    sourceAddress: string;
    /**
     * Variable name
     */
    sourceAddressVariable: string;
}

export interface GetServiceMulticastFeatureMsdpGroup {
    /**
     * Set MSDP mesh group
     */
    meshGroupName: string;
    /**
     * Variable name
     */
    meshGroupNameVariable: string;
    /**
     * Configure peer
     */
    peers: outputs.GetServiceMulticastFeatureMsdpGroupPeer[];
}

export interface GetServiceMulticastFeatureMsdpGroupPeer {
    /**
     * Set MSDP peer ip connect-source interface
     */
    connectionSourceInterface: string;
    /**
     * Variable name
     */
    connectionSourceInterfaceVariable: string;
    /**
     * Set MSDP default peer
     */
    defaultPeer: boolean;
    /**
     * Set MSDP peer ip keepalive hold time
     */
    keepaliveHoldTime: number;
    /**
     * Variable name
     */
    keepaliveHoldTimeVariable: string;
    /**
     * Set MSDP peer ip keepalive interval
     */
    keepaliveInterval: number;
    /**
     * Variable name
     */
    keepaliveIntervalVariable: string;
    /**
     * Set MSDP peer ip password
     */
    peerAuthenticationPassword: string;
    /**
     * Variable name
     */
    peerAuthenticationPasswordVariable: string;
    /**
     * Set MSDP peer ip
     */
    peerIp: string;
    /**
     * Variable name
     */
    peerIpVariable: string;
    prefixListId: string;
    /**
     * Set MSDP peer ip remote autonomous system number
     */
    remoteAs: number;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Set MSDP peer ip SA limit message number
     */
    saLimit: number;
    /**
     * Variable name
     */
    saLimitVariable: string;
}

export interface GetServiceMulticastFeaturePimBsrCandidate {
    /**
     * Set BSR RP candidate filter
     */
    acceptCandidateAccessList: string;
    /**
     * Variable name
     */
    acceptCandidateAccessListVariable: string;
    /**
     * Hash Mask length for RP selection
     */
    hashMaskLength: number;
    /**
     * Variable name
     */
    hashMaskLengthVariable: string;
    /**
     * Set Autonomic-Networking virtual interface
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set RP candidate priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
}

export interface GetServiceMulticastFeaturePimBsrRpCandidate {
    /**
     * Set IP Access List for PIM RP Candidate
     */
    accessListId: string;
    /**
     * Variable name
     */
    accessListIdVariable: string;
    /**
     * Set Autonomic-Networking virtual interface
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set RP candidate advertisement interval
     */
    interval: number;
    /**
     * Variable name
     */
    intervalVariable: string;
    /**
     * Set RP candidate priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
}

export interface GetServiceMulticastFeaturePimInterface {
    /**
     * Set interface name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
     */
    joinPruneInterval: number;
    /**
     * Variable name
     */
    joinPruneIntervalVariable: string;
    /**
     * Set PIM query interval
     */
    queryInterval: number;
    /**
     * Variable name
     */
    queryIntervalVariable: string;
}

export interface GetServiceMulticastFeatureStaticRpAddress {
    /**
     * Set Static RP Access List
     */
    accessList: string;
    /**
     * Variable name
     */
    accessListVariable: string;
    /**
     * Set Static RP IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Set override flag
     */
    override: boolean;
    /**
     * Variable name
     */
    overrideVariable: string;
}

export interface GetServiceObjectTrackerGroupFeatureTrackerElement {
    objectTrackerId: string;
}

export interface GetServiceRoutePolicyFeatureSequence {
    /**
     * Define list of actions
     */
    actions: outputs.GetServiceRoutePolicyFeatureSequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    /**
     * Sequence Id
     */
    id: number;
    /**
     * Define match conditions
     */
    matchEntries: outputs.GetServiceRoutePolicyFeatureSequenceMatchEntry[];
    /**
     * Sequence Name
     */
    name: string;
    /**
     * protocol such as IPV4, IPV6, or BOTH
     */
    protocol: string;
}

export interface GetServiceRoutePolicyFeatureSequenceAction {
    asPathPrepends: number[];
    communities: string[];
    communityAdditive: boolean;
    /**
     * Variable name
     */
    communityVariable: string;
    /**
     * Set Ipv4 Next Hop
     */
    ipv4NextHop: string;
    /**
     * Set Ipv6 Next Hop
     */
    ipv6NextHop: string;
    /**
     * Set Local Preference
     */
    localPreference: number;
    /**
     * Set Metric
     */
    metric: number;
    /**
     * Set Metric Type
     */
    metricType: string;
    /**
     * Set OMP Tag
     */
    ompTag: number;
    /**
     * Set Origin
     */
    origin: string;
    /**
     * Set OSPF Tag
     */
    ospfTag: number;
    /**
     * Set Weight
     */
    weight: number;
}

export interface GetServiceRoutePolicyFeatureSequenceMatchEntry {
    asPathListId: string;
    /**
     * BGP Local Preference
     */
    bgpLocalPreference: number;
    expandedCommunityListId: string;
    extendedCommunityListId: string;
    ipv4AddressPrefixListId: string;
    ipv4NextHopPrefixListId: string;
    ipv6AddressPrefixListId: string;
    ipv6NextHopPrefixListId: string;
    /**
     * Select Metric
     */
    metric: number;
    /**
     * Select OMP Tag
     */
    ompTag: number;
    /**
     * Select OSPF Tag
     */
    ospfTag: number;
    /**
     * Select a condition such as OR, AND or EXACT
     */
    standardCommunityListCriteria: string;
    /**
     * Select a standard community list
     */
    standardCommunityLists: outputs.GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList[];
}

export interface GetServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList {
    id: string;
}

export interface GetServiceRoutingBgpFeatureIpv4AggregateAddress {
    /**
     * Set AS set path information
     */
    asSetPath: boolean;
    /**
     * Variable name
     */
    asSetPathVariable: string;
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
    /**
     * Filter out more specific routes from updates
     */
    summaryOnly: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv4Neighbor {
    /**
     * Set neighbor address
     */
    address: string;
    /**
     * Set BGP address family
     */
    addressFamilies: outputs.GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * The number of accept as-path with my AS present in it
     */
    allowasInNumber: number;
    /**
     * Variable name
     */
    allowasInNumberVariable: string;
    /**
     * Override matching AS-number while sending update
     */
    asOverride: boolean;
    /**
     * Variable name
     */
    asOverrideVariable: string;
    /**
     * Set description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Set TTL value for peers that are not directly connected
     */
    ebgpMultihop: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable: string;
    /**
     * Interval (seconds) not receiving a keepalive message declares a BGP peer down
     */
    holdTime: number;
    /**
     * Variable name
     */
    holdTimeVariable: string;
    /**
     * Interval (seconds) of keepalive messages sent to its BGP peer
     */
    keepaliveTime: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable: string;
    /**
     * Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs: number;
    /**
     * Variable name
     */
    localAsVariable: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     */
    nextHopSelf: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs: number;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Send community attribute
     */
    sendCommunity: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable: string;
    /**
     * Send extended community attribute
     */
    sendExtendedCommunity: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable: string;
    /**
     * Send label
     */
    sendLabel: boolean;
    /**
     * Variable name
     */
    sendLabelVariable: string;
    /**
     * Enable or disable a BGP neighbor
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv4NeighborAddressFamily {
    /**
     * Set IPv4 unicast address family
     */
    familyType: string;
    inRoutePolicyId: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     */
    maxNumberOfPrefixes: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable: string;
    outRoutePolicyId: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     */
    restartInterval: number;
    /**
     * Variable name
     */
    restartIntervalVariable: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     */
    threshold: number;
    /**
     * Variable name
     */
    thresholdVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv4Network {
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv4Redistribute {
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceRoutingBgpFeatureIpv6AggregateAddress {
    /**
     * Configure the IPv6 prefixes to aggregate
     */
    aggregatePrefix: string;
    /**
     * Variable name
     */
    aggregatePrefixVariable: string;
    /**
     * Set AS set path information
     */
    asSetPath: boolean;
    /**
     * Variable name
     */
    asSetPathVariable: string;
    /**
     * Filter out more specific routes from updates
     */
    summaryOnly: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv6Neighbor {
    /**
     * Set IPv6 neighbor address
     */
    address: string;
    /**
     * Set IPv6 BGP address family
     */
    addressFamilies: outputs.GetServiceRoutingBgpFeatureIpv6NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * The number of accept as-path with my AS present in it
     */
    allowasInNumber: number;
    /**
     * Variable name
     */
    allowasInNumberVariable: string;
    /**
     * Override matching AS-number while sending update
     */
    asOverride: boolean;
    /**
     * Variable name
     */
    asOverrideVariable: string;
    /**
     * Set description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Set TTL value for peers that are not directly connected
     */
    ebgpMultihop: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     */
    holdTime: number;
    /**
     * Variable name
     */
    holdTimeVariable: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     */
    keepaliveTime: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable: string;
    /**
     * Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs: number;
    /**
     * Variable name
     */
    localAsVariable: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     */
    nextHopSelf: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs: number;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Send community attribute
     */
    sendCommunity: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable: string;
    /**
     * Send extended community attribute
     */
    sendExtendedCommunity: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable: string;
    /**
     * Enable or disable a BGP neighbor
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv6NeighborAddressFamily {
    /**
     * Set IPv6 unicast address family
     */
    familyType: string;
    inRoutePolicyId: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     */
    maxNumberOfPrefixes: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable: string;
    outRoutePolicyId: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     */
    restartInterval: number;
    /**
     * Variable name
     */
    restartIntervalVariable: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     */
    threshold: number;
    /**
     * Variable name
     */
    thresholdVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv6Network {
    /**
     * Configure the prefixes for BGP to announce
     */
    networkPrefix: string;
    /**
     * Variable name
     */
    networkPrefixVariable: string;
}

export interface GetServiceRoutingBgpFeatureIpv6Redistribute {
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceRoutingEigrpFeatureInterface {
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Enable/disable EIGRP
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Set summary addresses
     */
    summaryAddresses: outputs.GetServiceRoutingEigrpFeatureInterfaceSummaryAddress[];
}

export interface GetServiceRoutingEigrpFeatureInterfaceSummaryAddress {
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    mask: string;
    /**
     * Variable name
     */
    maskVariable: string;
}

export interface GetServiceRoutingEigrpFeatureMd5Key {
    /**
     * Set MD5 key ID
     */
    keyId: number;
    /**
     * Variable name
     */
    keyIdVariable: string;
    /**
     * Set MD5 key
     */
    keyString: string;
    /**
     * Variable name
     */
    keyStringVariable: string;
}

export interface GetServiceRoutingEigrpFeatureNetwork {
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    mask: string;
    /**
     * Variable name
     */
    maskVariable: string;
}

export interface GetServiceRoutingEigrpFeatureRedistribute {
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceRoutingOspfFeatureArea {
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * set the area type
     */
    areaType: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetServiceRoutingOspfFeatureAreaInterface[];
    /**
     * Do not inject interarea routes into STUB or NSSA
     */
    noSummary: boolean;
    /**
     * Variable name
     */
    noSummaryVariable: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetServiceRoutingOspfFeatureAreaRange[];
}

export interface GetServiceRoutingOspfFeatureAreaInterface {
    /**
     * Set OSPF interface authentication type
     */
    authenticationType: string;
    /**
     * Variable name
     */
    authenticationTypeVariable: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set router’s priority to be elected as designated router
     */
    designatedRouterPriority: number;
    /**
     * Variable name
     */
    designatedRouterPriorityVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    lsaRetransmitInterval: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable: string;
    /**
     * Set MD5 authentication key
     */
    messageDigestKey: string;
    /**
     * Set MD5 message digest key
     */
    messageDigestKeyId: number;
    /**
     * Variable name
     */
    messageDigestKeyIdVariable: string;
    /**
     * Variable name
     */
    messageDigestKeyVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    networkType: string;
    /**
     * Variable name
     */
    networkTypeVariable: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
}

export interface GetServiceRoutingOspfFeatureAreaRange {
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceRoutingOspfFeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     */
    natDia: boolean;
    /**
     * Variable name
     */
    natDiaVariable: string;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceRoutingOspfFeatureRouterLsa {
    /**
     * Set how long to advertise maximum metric after router starts up
     */
    time: number;
    /**
     * Variable name
     */
    timeVariable: string;
    /**
     * Set the router LSA advertisement type
     */
    type: string;
}

export interface GetServiceRoutingOspfv3Ipv4FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable: string;
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * stub area type
     */
    areaType: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetServiceRoutingOspfv3Ipv4FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary: boolean;
    /**
     * Variable name
     */
    noSummaryVariable: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetServiceRoutingOspfv3Ipv4FeatureAreaRange[];
}

export interface GetServiceRoutingOspfv3Ipv4FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey: string;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     */
    authenticationSpi: number;
    /**
     * Variable name
     */
    authenticationSpiVariable: string;
    /**
     * No Authentication by default
     */
    authenticationType: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    lsaRetransmitInterval: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    networkType: string;
    /**
     * Variable name
     */
    networkTypeVariable: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
}

export interface GetServiceRoutingOspfv3Ipv4FeatureAreaRange {
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetServiceRoutingOspfv3Ipv4FeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     */
    natDia: boolean;
    /**
     * Variable name
     */
    natDiaVariable: string;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceRoutingOspfv3Ipv6FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable: string;
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * stub area type
     */
    areaType: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetServiceRoutingOspfv3Ipv6FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary: boolean;
    /**
     * Variable name
     */
    noSummaryVariable: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetServiceRoutingOspfv3Ipv6FeatureAreaRange[];
}

export interface GetServiceRoutingOspfv3Ipv6FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey: string;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     */
    authenticationSpi: number;
    /**
     * Variable name
     */
    authenticationSpiVariable: string;
    /**
     * No Authentication by default
     */
    authenticationType: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    lsaRetransmitInterval: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    networkType: string;
    /**
     * Variable name
     */
    networkTypeVariable: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
}

export interface GetServiceRoutingOspfv3Ipv6FeatureAreaRange {
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * IPv6 prefix,for example 2001::/64
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetServiceRoutingOspfv3Ipv6FeatureRedistribute {
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetServiceSwitchportFeatureInterface {
    /**
     * Set uni or bi directional authorization mode
     */
    controlDirection: string;
    /**
     * Variable name
     */
    controlDirectionVariable: string;
    /**
     * Set Critical VLAN
     */
    criticalVlan: number;
    /**
     * Variable name
     */
    criticalVlanVariable: string;
    /**
     * Duplex mode
     */
    duplex: string;
    /**
     * Variable name
     */
    duplexVariable: string;
    /**
     * Enable Periodic Reauthentication
     */
    enablePeriodicReauth: boolean;
    /**
     * Variable name
     */
    enablePeriodicReauthVariable: string;
    /**
     * Enable Critical Voice VLAN
     */
    enableVoice: boolean;
    /**
     * Variable name
     */
    enableVoiceVariable: string;
    /**
     * Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
     */
    guestVlan: number;
    /**
     * Variable name
     */
    guestVlanVariable: string;
    /**
     * Set host mode
     */
    hostMode: string;
    /**
     * Variable name
     */
    hostModeVariable: string;
    /**
     * Periodic Reauthentication Inactivity Timeout (in seconds)
     */
    inactivity: number;
    /**
     * Variable name
     */
    inactivityVariable: string;
    /**
     * Set Interface name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * MAC Authentication Bypass
     */
    macAuthenticationBypass: boolean;
    /**
     * Variable name
     */
    macAuthenticationBypassVariable: string;
    /**
     * Set type of switch port: access/trunk
     */
    mode: string;
    /**
     * Set 802.1x Interface Pae Type
     */
    paeEnable: boolean;
    /**
     * Variable name
     */
    paeEnableVariable: string;
    /**
     * Set Port-Control Mode
     */
    portControl: string;
    /**
     * Variable name
     */
    portControlVariable: string;
    /**
     * Periodic Reauthentication Interval (in seconds)
     */
    reauthentication: number;
    /**
     * Variable name
     */
    reauthenticationVariable: string;
    /**
     * Set Restricted VLAN ID
     */
    restrictedVlan: number;
    /**
     * Variable name
     */
    restrictedVlanVariable: string;
    /**
     * Administrative state
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Set interface speed
     */
    speed: string;
    /**
     * Variable name
     */
    speedVariable: string;
    /**
     * Set VLAN identifier associated with bridging domain
     */
    switchportAccessVlan: number;
    /**
     * Variable name
     */
    switchportAccessVlanVariable: string;
    /**
     * Configure VLAN IDs used with the trunk
     */
    switchportTrunkAllowedVlans: string;
    /**
     * Variable name
     */
    switchportTrunkAllowedVlansVariable: string;
    /**
     * Configure VLAN ID used for native VLAN
     */
    switchportTrunkNativeVlan: number;
    /**
     * Variable name
     */
    switchportTrunkNativeVlanVariable: string;
    /**
     * Configure Voice Vlan
     */
    voiceVlan: number;
    /**
     * Variable name
     */
    voiceVlanVariable: string;
}

export interface GetServiceSwitchportFeatureStaticMacAddress {
    /**
     * Interface name: GigabitEthernet0/<>/<>
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * Set MAC address in xxxx.xxxx.xxxx format
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
    /**
     * Configure VLAN ID used with the mac and interface
     */
    vlanId: number;
    /**
     * Variable name
     */
    vlanIdVariable: string;
}

export interface GetServiceTrackerGroupFeatureTrackerElement {
    trackerId: string;
}

export interface GetServiceWirelessLanFeatureSsid {
    /**
     * Set admin state
     */
    adminState: boolean;
    /**
     * Variable name
     */
    adminStateVariable: string;
    /**
     * Enable broadcast SSID
     */
    broadcastSsid: boolean;
    /**
     * Variable name
     */
    broadcastSsidVariable: string;
    /**
     * Set passphrase
     */
    passphrase: string;
    /**
     * Variable name
     */
    passphraseVariable: string;
    /**
     * Select QoS profile
     */
    qosProfile: string;
    /**
     * Variable name
     */
    qosProfileVariable: string;
    /**
     * Select radio type
     */
    radioType: string;
    /**
     * Variable name
     */
    radioTypeVariable: string;
    /**
     * Set RADIUS server IP
     */
    radiusServerIp: string;
    /**
     * Variable name
     */
    radiusServerIpVariable: string;
    /**
     * Set RADIUS server authentication port
     */
    radiusServerPort: number;
    /**
     * Variable name
     */
    radiusServerPortVariable: string;
    /**
     * Set RADIUS server shared secret
     */
    radiusServerSecret: string;
    /**
     * Variable name
     */
    radiusServerSecretVariable: string;
    /**
     * Select security type
     */
    securityType: string;
    /**
     * Configure wlan SSID
     */
    ssidName: string;
    /**
     * Set VLAN ID
     */
    vlanId: number;
    /**
     * Variable name
     */
    vlanIdVariable: string;
}

export interface GetSiteListPolicyObjectEntry {
    /**
     * Site ID or range of Site IDs e.g., `100` or `200-300`
     */
    siteId: string;
}

export interface GetStandardCommunityListPolicyObjectEntry {
    /**
     * Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
     */
    community: string;
}

export interface GetSwitchportFeatureTemplateInterface {
    /**
     * Variable name
     */
    dot1xAuthenticationOrderVariable: string;
    /**
     * Specify authentication methods in the order of preference
     */
    dot1xAuthenticationOrders: string[];
    /**
     * Set uni or bi directional authorization mode
     */
    dot1xControlDirection: string;
    /**
     * Variable name
     */
    dot1xControlDirectionVariable: string;
    /**
     * Set Critical VLAN
     */
    dot1xCriticalVlan: number;
    /**
     * Variable name
     */
    dot1xCriticalVlanVariable: string;
    /**
     * Set 802.1x on off
     */
    dot1xEnable: boolean;
    /**
     * Enable Critical Voice VLAN
     */
    dot1xEnableCriticialVoiceVlan: boolean;
    /**
     * Variable name
     */
    dot1xEnableCriticialVoiceVlanVariable: string;
    /**
     * Enable Periodic Reauthentication
     */
    dot1xEnablePeriodicReauth: boolean;
    /**
     * Variable name
     */
    dot1xEnablePeriodicReauthVariable: string;
    /**
     * Variable name
     */
    dot1xEnableVariable: string;
    /**
     * Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
     */
    dot1xGuestVlan: number;
    /**
     * Variable name
     */
    dot1xGuestVlanVariable: string;
    /**
     * Set host mode
     */
    dot1xHostMode: string;
    /**
     * Variable name
     */
    dot1xHostModeVariable: string;
    /**
     * MAC Authentication Bypass
     */
    dot1xMacAuthenticationBypass: boolean;
    /**
     * Variable name
     */
    dot1xMacAuthenticationBypassVariable: string;
    /**
     * Set 802.1x Interface Pae Type
     */
    dot1xPaeEnable: boolean;
    /**
     * Variable name
     */
    dot1xPaeEnableVariable: string;
    /**
     * Periodic Reauthentication Inactivity Timeout (in seconds)
     */
    dot1xPeriodicReauthInactivityTimeout: number;
    /**
     * Variable name
     */
    dot1xPeriodicReauthInactivityTimeoutVariable: string;
    /**
     * Periodic Reauthentication Interval (in seconds)
     */
    dot1xPeriodicReauthInterval: number;
    /**
     * Variable name
     */
    dot1xPeriodicReauthIntervalVariable: string;
    /**
     * Set Port-Control Mode
     */
    dot1xPortControl: string;
    /**
     * Variable name
     */
    dot1xPortControlVariable: string;
    /**
     * Set Restricted VLAN ID
     */
    dot1xRestrictedVlan: number;
    /**
     * Variable name
     */
    dot1xRestrictedVlanVariable: string;
    /**
     * Duplex mode
     */
    duplex: string;
    /**
     * Variable name
     */
    duplexVariable: string;
    /**
     * Set Interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Administrative state
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Set interface speed
     */
    speed: string;
    /**
     * Variable name
     */
    speedVariable: string;
    /**
     * Set VLAN identifier associated with bridging domain
     */
    switchportAccessVlan: number;
    /**
     * Variable name
     */
    switchportAccessVlanVariable: string;
    /**
     * Set type of switch port: access/trunk
     */
    switchportMode: string;
    /**
     * Configure VLAN IDs used with the trunk
     */
    switchportTrunkAllowedVlans: string;
    /**
     * Variable name
     */
    switchportTrunkAllowedVlansVariable: string;
    /**
     * Configure VLAN ID used for native VLAN
     */
    switchportTrunkNativeVlan: number;
    /**
     * Variable name
     */
    switchportTrunkNativeVlanVariable: string;
    /**
     * Configure Voice Vlan
     */
    voiceVlan: number;
    /**
     * Variable name
     */
    voiceVlanVariable: string;
}

export interface GetSwitchportFeatureTemplateStaticMacAddress {
    /**
     * Interface name: GigabitEthernet0/<>/<>
     */
    ifName: string;
    /**
     * Variable name
     */
    ifNameVariable: string;
    /**
     * Set MAC address in xxxx.xxxx.xxxx format
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Configure VLAN ID used with the mac and interface
     */
    vlan: number;
    /**
     * Variable name
     */
    vlanVariable: string;
}

export interface GetSystemAaaFeatureAccountingRule {
    /**
     * Use Server-group
     */
    groups: string[];
    /**
     * Privilege level when method is commands
     */
    level: string;
    /**
     * Configure Accounting Method
     */
    method: string;
    /**
     * Configure Accounting Rule ID
     */
    ruleId: string;
    /**
     * Record start and stop without waiting
     */
    startStop: boolean;
    /**
     * Variable name
     */
    startStopVariable: string;
}

export interface GetSystemAaaFeatureAuthorizationRule {
    /**
     * Use Server-group
     */
    groups: string[];
    /**
     * Succeed if user has authenticated
     */
    ifAuthenticated: boolean;
    /**
     * Privilege level when method is commands
     */
    level: string;
    /**
     * Method
     */
    method: string;
    /**
     * Configure Authorization Rule ID
     */
    ruleId: string;
}

export interface GetSystemAaaFeatureRadiusGroup {
    /**
     * Set Radius server Group Name
     */
    groupName: string;
    /**
     * Configure the Radius server
     */
    servers: outputs.GetSystemAaaFeatureRadiusGroupServer[];
    /**
     * Set interface to use to reach Radius server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which Radius server is located
     */
    vpn: number;
}

export interface GetSystemAaaFeatureRadiusGroupServer {
    /**
     * Set Accounting port to use to connect to Radius server
     */
    acctPort: number;
    /**
     * Variable name
     */
    acctPortVariable: string;
    /**
     * Set IP address of Radius server
     */
    address: string;
    /**
     * Set Authentication port to use to connect to Radius server
     */
    authPort: number;
    /**
     * Variable name
     */
    authPortVariable: string;
    /**
     * Set the Radius server shared key
     */
    key: string;
    /**
     * Type of encyption. To be used for type 6
     */
    keyEnum: string;
    /**
     * key type
     */
    keyType: string;
    /**
     * Variable name
     */
    keyTypeVariable: string;
    /**
     * Configure how many times to contact this Radius server
     */
    retransmit: number;
    /**
     * Variable name
     */
    retransmitVariable: string;
    /**
     * Set the Radius server shared type 7 encrypted key
     */
    secretKey: string;
    /**
     * Variable name
     */
    secretKeyVariable: string;
    /**
     * Configure how long to wait for replies from the Radius server
     */
    timeout: number;
    /**
     * Variable name
     */
    timeoutVariable: string;
}

export interface GetSystemAaaFeatureTacacsGroup {
    /**
     * Set TACACS server Group Name
     */
    groupName: string;
    /**
     * Configure the TACACS server
     */
    servers: outputs.GetSystemAaaFeatureTacacsGroupServer[];
    /**
     * Set interface to use to reach TACACS server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which TACACS server is located
     */
    vpn: number;
}

export interface GetSystemAaaFeatureTacacsGroupServer {
    /**
     * Set IP address of TACACS server
     */
    address: string;
    /**
     * Set the TACACS server shared key
     */
    key: string;
    /**
     * Type of encyption. To be used for type 6
     */
    keyEnum: string;
    /**
     * TACACS Port
     */
    port: number;
    /**
     * Variable name
     */
    portVariable: string;
    /**
     * Set the TACACS server shared type 7 encrypted key
     */
    secretKey: string;
    /**
     * Variable name
     */
    secretKeyVariable: string;
    /**
     * Configure how long to wait for replies from the TACACS server
     */
    timeout: number;
    /**
     * Variable name
     */
    timeoutVariable: string;
}

export interface GetSystemAaaFeatureUser {
    /**
     * Set the username
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the user password
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set Privilege Level for this user
     */
    privilege: string;
    /**
     * Variable name
     */
    privilegeVariable: string;
    /**
     * List of RSA public-keys per user
     */
    publicKeys: outputs.GetSystemAaaFeatureUserPublicKey[];
}

export interface GetSystemAaaFeatureUserPublicKey {
    /**
     * Set the RSA key string
     */
    keyString: string;
    /**
     * Only RSA is supported
     */
    keyType: string;
    /**
     * Variable name
     */
    keyTypeVariable: string;
}

export interface GetSystemBasicFeatureAffinityPerVrf {
    /**
     * Affinity Group Number
     */
    affinityGroupNumber: number;
    /**
     * Variable name
     */
    affinityGroupNumberVariable: string;
    /**
     * Range of VRFs
     */
    vrfRange: string;
    /**
     * Variable name
     */
    vrfRangeVariable: string;
}

export interface GetSystemBasicFeatureGpsSmsMobileNumber {
    /**
     * Mobile number, ex: 1231234414
     */
    number: string;
    /**
     * Variable name
     */
    numberVariable: string;
}

export interface GetSystemBfdFeatureColor {
    /**
     * Color that identifies the WAN transport tunnel
     */
    color: string;
    /**
     * Variable name
     */
    colorVariable: string;
    /**
     * BFD Default DSCP value for tloc color
     */
    dscp: number;
    /**
     * Variable name
     */
    dscpVariable: string;
    /**
     * Hello Interval (milliseconds)
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Multiplier
     */
    multiplier: number;
    /**
     * Variable name
     */
    multiplierVariable: string;
    /**
     * Path MTU Discovery
     */
    pmtuDiscovery: boolean;
    /**
     * Variable name
     */
    pmtuDiscoveryVariable: string;
}

export interface GetSystemIpv4DeviceAccessFeatureSequence {
    /**
     * Base Action
     */
    baseAction: string;
    destinationDataPrefixListId: string;
    /**
     * Variable name
     */
    destinationIpPrefixListVariable: string;
    /**
     * Destination Data IP Prefix List
     */
    destinationIpPrefixLists: string[];
    /**
     * device access protocol
     */
    deviceAccessPort: number;
    /**
     * Sequence Id
     */
    id: number;
    /**
     * Sequence Name
     */
    name: string;
    sourceDataPrefixListId: string;
    /**
     * Variable name
     */
    sourceIpPrefixListVariable: string;
    /**
     * Source Data IP Prefix List
     */
    sourceIpPrefixLists: string[];
    /**
     * Source Port List
     */
    sourcePorts: number[];
}

export interface GetSystemIpv6DeviceAccessFeatureSequence {
    /**
     * Base Action
     */
    baseAction: string;
    destinationDataPrefixListId: string;
    /**
     * Variable name
     */
    destinationIpPrefixListVariable: string;
    /**
     * Destination Data IP Prefix List
     */
    destinationIpPrefixLists: string[];
    /**
     * device access protocol
     */
    deviceAccessPort: number;
    /**
     * Sequence Id
     */
    id: number;
    /**
     * Sequence Name
     */
    name: string;
    sourceDataPrefixListId: string;
    /**
     * Variable name
     */
    sourceIpPrefixListVariable: string;
    /**
     * Source Data IP Prefix List
     */
    sourceIpPrefixLists: string[];
    /**
     * Source Port List
     */
    sourcePorts: number[];
}

export interface GetSystemLoggingFeatureIpv4Server {
    /**
     * Set hostname or IPv4 address of server
     */
    hostnameIp: string;
    /**
     * Variable name
     */
    hostnameIpVariable: string;
    /**
     * Set logging level for messages logged to server
     */
    priority: string;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Enable TLS Profile
     */
    tlsEnable: boolean;
    /**
     * Variable name
     */
    tlsEnableVariable: string;
    /**
     * Define custom profile
     */
    tlsPropertiesCustomProfile: boolean;
    /**
     * Variable name
     */
    tlsPropertiesCustomProfileVariable: string;
    /**
     * Configure a TLS profile
     */
    tlsPropertiesProfile: string;
    /**
     * Variable name
     */
    tlsPropertiesProfileVariable: string;
    /**
     * Set hostname or IPv4 address of server
     */
    vpn: number;
    /**
     * Variable name
     */
    vpnVariable: string;
}

export interface GetSystemLoggingFeatureIpv6Server {
    /**
     * Set IPv6 hostname or IPv6 address of server
     */
    hostnameIp: string;
    /**
     * Variable name
     */
    hostnameIpVariable: string;
    /**
     * Set logging level for messages logged to server
     */
    priority: string;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Enable TLS Profile
     */
    tlsEnable: boolean;
    /**
     * Variable name
     */
    tlsEnableVariable: string;
    /**
     * Define custom profile
     */
    tlsPropertiesCustomProfile: boolean;
    /**
     * Variable name
     */
    tlsPropertiesCustomProfileVariable: string;
    /**
     * Configure a TLS profile
     */
    tlsPropertiesProfile: string;
    /**
     * Variable name
     */
    tlsPropertiesProfileVariable: string;
    /**
     * Set hostname or IPv4 address of server
     */
    vpn: number;
    /**
     * Variable name
     */
    vpnVariable: string;
}

export interface GetSystemLoggingFeatureTlsProfile {
    /**
     * Syslog secure server ciphersuites
     */
    cipherSuites: string[];
    /**
     * Variable name
     */
    cipherSuitesVariable: string;
    /**
     * Specify the name of the TLS profile
     */
    profile: string;
    /**
     * Variable name
     */
    profileVariable: string;
    /**
     * TLS Version
     */
    tlsVersion: string;
    /**
     * Variable name
     */
    tlsVersionVariable: string;
}

export interface GetSystemNtpFeatureAuthenticationKey {
    /**
     * MD5 authentication key ID
     */
    keyId: number;
    /**
     * Variable name
     */
    keyIdVariable: string;
    /**
     * Enter cleartext or AES-encrypted MD5 authentication key
     */
    md5Value: string;
    /**
     * Variable name
     */
    md5ValueVariable: string;
}

export interface GetSystemNtpFeatureServer {
    /**
     * Set authentication key for the server
     */
    authenticationKey: number;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set hostname or IP address of server
     */
    hostnameIpAddress: string;
    /**
     * Variable name
     */
    hostnameIpAddressVariable: string;
    /**
     * Set NTP version
     */
    ntpVersion: number;
    /**
     * Variable name
     */
    ntpVersionVariable: string;
    /**
     * Prefer this NTP server
     */
    preferThisNtpServer: boolean;
    /**
     * Variable name
     */
    preferThisNtpServerVariable: string;
    /**
     * Set interface to use to reach NTP server
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set VPN in which NTP server is located
     */
    vpn: number;
    /**
     * Variable name
     */
    vpnVariable: string;
}

export interface GetSystemSecurityFeatureKey {
    /**
     * Configure Accept AO Mismatch
     */
    acceptAoMismatch: boolean;
    /**
     * Variable name
     */
    acceptAoMismatchVariable: string;
    /**
     * Send lifetime Duration (seconds)
     */
    acceptLifeTimeDuration: number;
    /**
     * Variable name
     */
    acceptLifeTimeDurationVariable: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifeTimeExact: number;
    /**
     * Infinite lifetime
     */
    acceptLifeTimeInfinite: boolean;
    /**
     * Variable name
     */
    acceptLifeTimeInfiniteVariable: string;
    /**
     * Configure Send lifetime Local
     */
    acceptLifeTimeLocal: boolean;
    /**
     * Variable name
     */
    acceptLifeTimeLocalVariable: string;
    /**
     * Configure Key lifetime start time
     */
    acceptLifeTimeStartEpoch: number;
    /**
     * Crypto Algorithm
     */
    cryptoAlgorithm: string;
    /**
     * Select the Key ID
     */
    id: number;
    /**
     * Configure Include TCP Options
     */
    includeTcpOptions: boolean;
    /**
     * Variable name
     */
    includeTcpOptionsVariable: string;
    /**
     * Specify the Key String
     */
    keyString: string;
    /**
     * Variable name
     */
    keyStringVariable: string;
    /**
     * Select the chain name
     */
    name: string;
    /**
     * Specify the Receiver ID
     */
    receiverId: number;
    /**
     * Variable name
     */
    receiverIdVariable: string;
    /**
     * Specify the Send ID
     */
    sendId: number;
    /**
     * Variable name
     */
    sendIdVariable: string;
    /**
     * Send lifetime Duration (seconds)
     */
    sendLifeTimeDuration: number;
    /**
     * Variable name
     */
    sendLifeTimeDurationVariable: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifeTimeExact: number;
    /**
     * Infinite lifetime
     */
    sendLifeTimeInfinite: boolean;
    /**
     * Variable name
     */
    sendLifeTimeInfiniteVariable: string;
    /**
     * Configure Send lifetime Local
     */
    sendLifeTimeLocal: boolean;
    /**
     * Variable name
     */
    sendLifeTimeLocalVariable: string;
    /**
     * Configure Key lifetime start time
     */
    sendLifeTimeStartEpoch: number;
}

export interface GetSystemSecurityFeatureKeychain {
    /**
     * Specify the name of the Keychain
     */
    keyChainName: string;
    /**
     * Specify the Key ID
     */
    keyId: number;
}

export interface GetSystemSnmpFeatureCommunity {
    /**
     * Configure access permissions
     */
    authorization: string;
    /**
     * Variable name
     */
    authorizationVariable: string;
    /**
     * Set name of the SNMP community
     */
    name: string;
    /**
     * Set user label of the SNMP community
     */
    userLabel: string;
    /**
     * Set name of the SNMP view
     */
    view: string;
    /**
     * Variable name
     */
    viewVariable: string;
}

export interface GetSystemSnmpFeatureGroup {
    /**
     * Name of the SNMP group
     */
    name: string;
    /**
     * Configure security level
     */
    securityLevel: string;
    /**
     * Name of the SNMP view
     */
    view: string;
    /**
     * Variable name
     */
    viewVariable: string;
}

export interface GetSystemSnmpFeatureTrapTargetServer {
    /**
     * Set IPv4/IPv6 address of SNMP server
     */
    ip: string;
    /**
     * Variable name
     */
    ipVariable: string;
    /**
     * Set UDP port number to connect to SNMP server
     */
    port: number;
    /**
     * Variable name
     */
    portVariable: string;
    /**
     * Source interface for outgoing SNMP traps
     */
    sourceInterface: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable: string;
    /**
     * Set name of the SNMP user
     */
    user: string;
    /**
     * Set user label of the SNMP community
     */
    userLabel: string;
    /**
     * Variable name
     */
    userVariable: string;
    /**
     * Set VPN in which SNMP server is located
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetSystemSnmpFeatureUser {
    /**
     * Specify authentication protocol password
     */
    authenticationPassword: string;
    /**
     * Variable name
     */
    authenticationPasswordVariable: string;
    /**
     * Configure authentication protocol
     */
    authenticationProtocol: string;
    /**
     * Variable name
     */
    authenticationProtocolVariable: string;
    /**
     * Name of the SNMP group
     */
    group: string;
    /**
     * Variable name
     */
    groupVariable: string;
    /**
     * Name of the SNMP user
     */
    name: string;
    /**
     * Specify privacy protocol password
     */
    privacyPassword: string;
    /**
     * Variable name
     */
    privacyPasswordVariable: string;
    /**
     * Configure privacy protocol
     */
    privacyProtocol: string;
    /**
     * Variable name
     */
    privacyProtocolVariable: string;
}

export interface GetSystemSnmpFeatureView {
    /**
     * Set the name of the SNMP view
     */
    name: string;
    /**
     * Configure SNMP object identifier
     */
    oids: outputs.GetSystemSnmpFeatureViewOid[];
}

export interface GetSystemSnmpFeatureViewOid {
    /**
     * Exclude the OID
     */
    exclude: boolean;
    /**
     * Variable name
     */
    excludeVariable: string;
    /**
     * Configure identifier of subtree of MIB objects
     */
    id: string;
    /**
     * Variable name
     */
    idVariable: string;
}

export interface GetTlocListPolicyObjectEntry {
    /**
     * Color
     */
    color: string;
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Preference
     */
    preference: number;
    /**
     * TLOC IP
     */
    tlocIp: string;
}

export interface GetTlsSslDecryptionPolicyDefinitionNetworkRule {
    /**
     * Rule base action
     */
    baseAction: string;
    /**
     * Rule ID
     */
    ruleId: number;
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Rule type
     */
    ruleType: string;
    /**
     * List of network source / destination configuration
     */
    sourceAndDestinationConfigurations: outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration[];
}

export interface GetTlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration {
    /**
     * source / destination option
     */
    option: string;
    /**
     * source / destination option target
     */
    value: string;
}

export interface GetTlsSslDecryptionPolicyDefinitionUrlRule {
    /**
     * Country
     */
    ruleName: string;
    /**
     * List of VPN IDs
     */
    targetVpns: string[];
    /**
     * TLS SSL Profile Policy ID
     */
    tlsSslProfilePolicyId: string;
    /**
     * TLS SSL Profile Policy version
     */
    tlsSslProfileVersion: number;
}

export interface GetTrafficDataPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries: outputs.GetTrafficDataPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     */
    baseAction: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * Sequence IP type, either `ipv4`, `ipv6` or `all`
     */
    ipType: string;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetTrafficDataPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
    /**
     * Sequence type
     */
    type: string;
}

export interface GetTrafficDataPolicyDefinitionSequenceActionEntry {
    /**
     * Enable cflowd
     */
    cflowd: boolean;
    /**
     * Counter name
     */
    counter: string;
    /**
     * Enable DRE optimization
     */
    dreOptimization: boolean;
    /**
     * Enable fallback to routing
     */
    fallbackToRouting: boolean;
    /**
     * Enable logging
     */
    log: boolean;
    /**
     * Loss correction
     */
    lossCorrection: string;
    /**
     * Loss correction FEC
     */
    lossCorrectionFec: string;
    /**
     * Loss correction FEC threshold
     */
    lossCorrectionFecThreshold: string;
    /**
     * Loss correction packet duplication
     */
    lossCorrectionPacketDuplication: string;
    /**
     * List of NAT parameters
     */
    natParameters: outputs.GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter[];
    /**
     * NAT pool
     */
    natPool: string;
    /**
     * NAT pool ID
     */
    natPoolId: number;
    /**
     * Redirect DNS
     */
    redirectDns: string;
    /**
     * Redirect DNS IP address
     */
    redirectDnsAddress: string;
    /**
     * Redirect DNS type
     */
    redirectDnsType: string;
    /**
     * Enable secure internet gateway
     */
    secureInternetGateway: boolean;
    /**
     * Service node group
     */
    serviceNodeGroup: string;
    /**
     * List of set parameters
     */
    setParameters: outputs.GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Enable TCP optimization
     */
    tcpOptimization: boolean;
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetTrafficDataPolicyDefinitionSequenceActionEntryNatParameter {
    /**
     * Fallback
     */
    fallback: boolean;
    /**
     * Type of NAT parameter
     */
    type: string;
    /**
     * DSCP
     */
    vpnId: number;
}

export interface GetTrafficDataPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * DSCP
     */
    dscp: number;
    /**
     * Forwarding class
     */
    forwardingClass: string;
    /**
     * Local TLOC list color. Space separated list of colors.
     */
    localTlocListColor: string;
    /**
     * Local TLOC list encapsulation.
     */
    localTlocListEncap: string;
    /**
     * Local TLOC list restrict
     */
    localTlocListRestrict: boolean;
    /**
     * Next hop IP
     */
    nextHop: string;
    /**
     * Use routing table entry to forward the packet in case Next-hop is not available
     */
    nextHopLoose: boolean;
    /**
     * Policer list ID
     */
    policerListId: string;
    /**
     * Policer list version
     */
    policerListVersion: number;
    /**
     * Preferred color group list ID
     */
    preferredColorGroupList: string;
    /**
     * Preferred color group list version
     */
    preferredColorGroupListVersion: number;
    /**
     * Service TLOC color
     */
    serviceTlocColor: string;
    /**
     * Service TLOC encapsulation
     */
    serviceTlocEncapsulation: string;
    /**
     * Service TLOC IP address
     */
    serviceTlocIp: string;
    /**
     * Service TLOC list ID
     */
    serviceTlocListId: string;
    /**
     * Service TLOC list version
     */
    serviceTlocListVersion: number;
    /**
     * Service TLOC Local
     */
    serviceTlocLocal: boolean;
    /**
     * Service TLOC Restrict
     */
    serviceTlocRestrict: boolean;
    /**
     * Service type
     */
    serviceType: string;
    /**
     * Service VPN ID
     */
    serviceVpnId: number;
    /**
     * TLOC color
     */
    tlocColor: string;
    /**
     * TLOC encapsulation
     */
    tlocEncapsulation: string;
    /**
     * TLOC IP address
     */
    tlocIp: string;
    /**
     * TLOC list ID
     */
    tlocListId: string;
    /**
     * TLOC list version
     */
    tlocListVersion: number;
    /**
     * Type of set parameter
     */
    type: string;
    /**
     * DSCP
     */
    vpnId: number;
}

export interface GetTrafficDataPolicyDefinitionSequenceMatchEntry {
    /**
     * Application list ID
     */
    applicationListId: string;
    /**
     * Application list version
     */
    applicationListVersion: number;
    /**
     * Destination Data Prefix list ID
     */
    destinationDataPrefixListId: string;
    /**
     * Destination Data Prefix list version
     */
    destinationDataPrefixListVersion: number;
    /**
     * Destination IP
     */
    destinationIp: string;
    /**
     * Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
     */
    destinationPort: string;
    /**
     * Destination region
     */
    destinationRegion: string;
    /**
     * DNS request or response
     */
    dns: string;
    /**
     * DNS Application list ID
     */
    dnsApplicationListId: string;
    /**
     * DNS Application list version
     */
    dnsApplicationListVersion: number;
    /**
     * DSCP value
     */
    dscp: number;
    /**
     * ICMP Message
     */
    icmpMessage: string;
    /**
     * Packet length
     */
    packetLength: number;
    /**
     * PLP
     */
    plp: string;
    /**
     * IP Protocol, 0-255 (Single value or multiple values separated by spaces)
     */
    protocol: string;
    /**
     * Source Data Prefix list ID
     */
    sourceDataPrefixListId: string;
    /**
     * Source Data Prefix list version
     */
    sourceDataPrefixListVersion: number;
    /**
     * Source IP
     */
    sourceIp: string;
    /**
     * Source port, 0-65535 (Single value, range or multiple values separated by spaces)
     */
    sourcePort: string;
    /**
     * TCP flags
     */
    tcp: string;
    /**
     * Traffic to
     */
    trafficTo: string;
    /**
     * Type of match entry
     */
    type: string;
}

export interface GetTransportIpv4AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions: outputs.GetTransportIpv4AclFeatureSequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    /**
     * Define match conditions
     */
    matchEntries: outputs.GetTransportIpv4AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     */
    sequenceId: number;
    /**
     * Sequence Name
     */
    sequenceName: string;
}

export interface GetTransportIpv4AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName: string;
    /**
     * Enable Log
     */
    acceptLog: boolean;
    acceptMirrorListId: string;
    acceptPolicerId: string;
    /**
     * DSCP number
     */
    acceptSetDscp: number;
    /**
     * Set Next Hop (IPV4 address)
     */
    acceptSetNextHop: string;
    /**
     * Counter Name
     */
    dropCounterName: string;
    /**
     * Enable Log
     */
    dropLog: boolean;
}

export interface GetTransportIpv4AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix: string;
    destinationDataPrefixListId: string;
    /**
     * Variable name
     */
    destinationDataPrefixVariable: string;
    /**
     * Destination Port List
     */
    destinationPorts: outputs.GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * DSCP number
     */
    dscps: number[];
    /**
     * ICMP Message
     */
    icmpMessages: string[];
    /**
     * Packet Length
     */
    packetLength: string;
    /**
     * protocol number list with at least one item
     */
    protocols: number[];
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix: string;
    sourceDataPrefixListId: string;
    /**
     * Variable name
     */
    sourceDataPrefixVariable: string;
    /**
     * Source Port List
     */
    sourcePorts: outputs.GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     */
    tcpState: string;
}

export interface GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port: string;
}

export interface GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port: string;
}

export interface GetTransportIpv6AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions: outputs.GetTransportIpv6AclFeatureSequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    /**
     * Define match conditions
     */
    matchEntries: outputs.GetTransportIpv6AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     */
    sequenceId: number;
    /**
     * Sequence Name
     */
    sequenceName: string;
}

export interface GetTransportIpv6AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName: string;
    /**
     * Enable Log
     */
    acceptLog: boolean;
    acceptMirrorListId: string;
    acceptPolicerId: string;
    /**
     * Set Next Hop (IPV6 address)
     */
    acceptSetNextHop: string;
    /**
     * set traffic class number
     */
    acceptTrafficClass: number;
    /**
     * Counter Name
     */
    dropCounterName: string;
    /**
     * Enable Log
     */
    dropLog: boolean;
}

export interface GetTransportIpv6AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix: string;
    destinationDataPrefixListId: string;
    /**
     * Destination Port List
     */
    destinationPorts: outputs.GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * ICMP6 Message
     */
    icmpMessages: string[];
    /**
     * next header number
     */
    nextHeader: number;
    /**
     * Packet Length
     */
    packetLength: string;
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix: string;
    sourceDataPrefixListId: string;
    /**
     * Source Port List
     */
    sourcePorts: outputs.GetTransportIpv6AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     */
    tcpState: string;
    /**
     * Select Traffic Class
     */
    trafficClasses: number[];
}

export interface GetTransportIpv6AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port: string;
}

export interface GetTransportIpv6AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port: string;
}

export interface GetTransportIpv6TrackerGroupFeatureTrackerElement {
    trackerId: string;
}

export interface GetTransportManagementVpnFeatureIpv4StaticRoute {
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
    /**
     * Gateway
     */
    gateway: string;
    /**
     * IP Address
     */
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * IPv4 Route Gateway Next Hop
     */
    nextHops: outputs.GetTransportManagementVpnFeatureIpv4StaticRouteNextHop[];
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportManagementVpnFeatureIpv4StaticRouteNextHop {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
}

export interface GetTransportManagementVpnFeatureIpv6StaticRoute {
    /**
     * Gateway
     */
    gateway: string;
    /**
     * IPv6 Nat
     */
    nat: string;
    /**
     * Variable name
     */
    natVariable: string;
    /**
     * IPv6 Route Gateway Next Hop
     */
    nextHops: outputs.GetTransportManagementVpnFeatureIpv6StaticRouteNextHop[];
    /**
     * IPv6 Route Gateway Next Hop
     */
    null0: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetTransportManagementVpnFeatureIpv6StaticRouteNextHop {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
}

export interface GetTransportManagementVpnFeatureNewHostMapping {
    /**
     * Hostname
     */
    hostName: string;
    /**
     * Variable name
     */
    hostNameVariable: string;
    /**
     * List of IP
     */
    listOfIpAddresses: string[];
    /**
     * Variable name
     */
    listOfIpAddressesVariable: string;
}

export interface GetTransportManagementVpnInterfaceEthernetFeatureArpEntry {
    /**
     * IPV4 Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC Address
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
}

export interface GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportRoutePolicyFeatureSequence {
    /**
     * Define list of actions
     */
    actions: outputs.GetTransportRoutePolicyFeatureSequenceAction[];
    /**
     * Base Action
     */
    baseAction: string;
    /**
     * Sequence Id
     */
    id: number;
    /**
     * Define match conditions
     */
    matchEntries: outputs.GetTransportRoutePolicyFeatureSequenceMatchEntry[];
    /**
     * Sequence Name
     */
    name: string;
    /**
     * protocol such as IPV4, IPV6, or BOTH
     */
    protocol: string;
}

export interface GetTransportRoutePolicyFeatureSequenceAction {
    asPathPrepends: number[];
    communities: string[];
    communityAdditive: boolean;
    /**
     * Variable name
     */
    communityVariable: string;
    /**
     * Set Ipv4 Next Hop
     */
    ipv4NextHop: string;
    /**
     * Set Ipv6 Next Hop
     */
    ipv6NextHop: string;
    /**
     * Set Local Preference
     */
    localPreference: number;
    /**
     * Set Metric
     */
    metric: number;
    /**
     * Set Metric Type
     */
    metricType: string;
    /**
     * Set OMP Tag
     */
    ompTag: number;
    /**
     * Set Origin
     */
    origin: string;
    /**
     * Set OSPF Tag
     */
    ospfTag: number;
    /**
     * Set Weight
     */
    weight: number;
}

export interface GetTransportRoutePolicyFeatureSequenceMatchEntry {
    asPathListId: string;
    /**
     * BGP Local Preference
     */
    bgpLocalPreference: number;
    expandedCommunityListId: string;
    extendedCommunityListId: string;
    ipv4AddressPrefixListId: string;
    ipv4NextHopPrefixListId: string;
    ipv6AddressPrefixListId: string;
    ipv6NextHopPrefixListId: string;
    /**
     * Select Metric
     */
    metric: number;
    /**
     * Select OMP Tag
     */
    ompTag: number;
    /**
     * Select OSPF Tag
     */
    ospfTag: number;
    /**
     * Select a condition such as OR, AND or EXACT
     */
    standardCommunityListCriteria: string;
    /**
     * Select a standard community list
     */
    standardCommunityLists: outputs.GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList[];
}

export interface GetTransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList {
    id: string;
}

export interface GetTransportRoutingBgpFeatureIpv4AggregateAddress {
    /**
     * Set AS set path information
     */
    asSetPath: boolean;
    /**
     * Variable name
     */
    asSetPathVariable: string;
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
    /**
     * Filter out more specific routes from updates
     */
    summaryOnly: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv4Neighbor {
    /**
     * Set neighbor address
     */
    address: string;
    /**
     * Set BGP address family
     */
    addressFamilies: outputs.GetTransportRoutingBgpFeatureIpv4NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * The number of accept as-path with my AS present in it
     */
    allowasInNumber: number;
    /**
     * Variable name
     */
    allowasInNumberVariable: string;
    /**
     * Override matching AS-number while sending update
     */
    asOverride: boolean;
    /**
     * Variable name
     */
    asOverrideVariable: string;
    /**
     * Set description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Set TTL value for peers that are not directly connected
     */
    ebgpMultihop: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable: string;
    /**
     * Send explicit null label
     */
    explicitNull: boolean;
    /**
     * Variable name
     */
    explicitNullVariable: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     */
    holdTime: number;
    /**
     * Variable name
     */
    holdTimeVariable: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     */
    keepaliveTime: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable: string;
    /**
     * Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs: number;
    /**
     * Variable name
     */
    localAsVariable: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     */
    nextHopSelf: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs: number;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Send community attribute
     */
    sendCommunity: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable: string;
    /**
     * Send extended community attribute
     */
    sendExtendedCommunity: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable: string;
    /**
     * Send label
     */
    sendLabel: boolean;
    /**
     * Enable or disable a BGP neighbor
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv4NeighborAddressFamily {
    /**
     * Set IPv4 unicast address family
     */
    familyType: string;
    inRoutePolicyId: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     */
    maxNumberOfPrefixes: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable: string;
    outRoutePolicyId: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     */
    restartInterval: number;
    /**
     * Variable name
     */
    restartIntervalVariable: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     */
    threshold: number;
    /**
     * Variable name
     */
    thresholdVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv4Network {
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv4Redistribute {
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetTransportRoutingBgpFeatureIpv6AggregateAddress {
    /**
     * Configure the IPv6 prefixes to aggregate
     */
    aggregatePrefix: string;
    /**
     * Variable name
     */
    aggregatePrefixVariable: string;
    /**
     * Set AS set path information
     */
    asSetPath: boolean;
    /**
     * Variable name
     */
    asSetPathVariable: string;
    /**
     * Filter out more specific routes from updates
     */
    summaryOnly: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv6Neighbor {
    /**
     * Set IPv6 neighbor address
     */
    address: string;
    /**
     * Set IPv6 BGP address family
     */
    addressFamilies: outputs.GetTransportRoutingBgpFeatureIpv6NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * The number of accept as-path with my AS present in it
     */
    allowasInNumber: number;
    /**
     * Variable name
     */
    allowasInNumberVariable: string;
    /**
     * Override matching AS-number while sending update
     */
    asOverride: boolean;
    /**
     * Variable name
     */
    asOverrideVariable: string;
    /**
     * Set description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Set TTL value for peers that are not directly connected
     */
    ebgpMultihop: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable: string;
    /**
     * Interval (seconds) not receiving a keepalive message declares a BGP peer down
     */
    holdTime: number;
    /**
     * Variable name
     */
    holdTimeVariable: string;
    /**
     * Interval (seconds) of keepalive messages sent to its BGP peer
     */
    keepaliveTime: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable: string;
    /**
     * Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs: number;
    /**
     * Variable name
     */
    localAsVariable: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     */
    nextHopSelf: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password: string;
    /**
     * Variable name
     */
    passwordVariable: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs: number;
    /**
     * Variable name
     */
    remoteAsVariable: string;
    /**
     * Send community attribute
     */
    sendCommunity: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable: string;
    /**
     * Send extended community attribute
     */
    sendExtendedCommunity: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable: string;
    /**
     * Enable or disable a BGP neighbor
     */
    shutdown: boolean;
    /**
     * Variable name
     */
    shutdownVariable: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv6NeighborAddressFamily {
    /**
     * Set IPv6 unicast address family
     */
    familyType: string;
    inRoutePolicyId: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     */
    maxNumberOfPrefixes: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable: string;
    outRoutePolicyId: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     */
    restartInterval: number;
    /**
     * Variable name
     */
    restartIntervalVariable: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     */
    threshold: number;
    /**
     * Variable name
     */
    thresholdVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv6Network {
    /**
     * Configure the prefixes for BGP to announce
     */
    networkPrefix: string;
    /**
     * Variable name
     */
    networkPrefixVariable: string;
}

export interface GetTransportRoutingBgpFeatureIpv6Redistribute {
    /**
     * Set the protocol to redistribute routes from
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetTransportRoutingBgpFeatureMplsInterface {
    /**
     * Interface Name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
}

export interface GetTransportRoutingOspfFeatureArea {
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * set the area type
     */
    areaType: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetTransportRoutingOspfFeatureAreaInterface[];
    /**
     * Do not inject interarea routes into STUB or NSSA
     */
    noSummary: boolean;
    /**
     * Variable name
     */
    noSummaryVariable: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetTransportRoutingOspfFeatureAreaRange[];
}

export interface GetTransportRoutingOspfFeatureAreaInterface {
    /**
     * Set OSPF interface authentication type
     */
    authenticationType: string;
    /**
     * Variable name
     */
    authenticationTypeVariable: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set router’s priority to be elected as designated router
     */
    designatedRouterPriority: number;
    /**
     * Variable name
     */
    designatedRouterPriorityVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    lsaRetransmitInterval: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable: string;
    /**
     * Set MD5 authentication key
     */
    messageDigestKey: string;
    /**
     * Set MD5 message digest key
     */
    messageDigestKeyId: number;
    /**
     * Variable name
     */
    messageDigestKeyIdVariable: string;
    /**
     * Variable name
     */
    messageDigestKeyVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    networkType: string;
    /**
     * Variable name
     */
    networkTypeVariable: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
}

export interface GetTransportRoutingOspfFeatureAreaRange {
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportRoutingOspfFeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     */
    natDia: boolean;
    /**
     * Variable name
     */
    natDiaVariable: string;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetTransportRoutingOspfFeatureRouterLsa {
    /**
     * Set how long to advertise maximum metric after router starts up
     */
    time: number;
    /**
     * Variable name
     */
    timeVariable: string;
    /**
     * Set the router LSA advertisement type
     */
    type: string;
}

export interface GetTransportRoutingOspfv3Ipv4FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable: string;
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * stub area type
     */
    areaType: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary: boolean;
    /**
     * Variable name
     */
    noSummaryVariable: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetTransportRoutingOspfv3Ipv4FeatureAreaRange[];
}

export interface GetTransportRoutingOspfv3Ipv4FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey: string;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     */
    authenticationSpi: number;
    /**
     * Variable name
     */
    authenticationSpiVariable: string;
    /**
     * No Authentication by default
     */
    authenticationType: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    lsaRetransmitInterval: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    networkType: string;
    /**
     * Variable name
     */
    networkTypeVariable: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
}

export interface GetTransportRoutingOspfv3Ipv4FeatureAreaRange {
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportRoutingOspfv3Ipv4FeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     */
    natDia: boolean;
    /**
     * Variable name
     */
    natDiaVariable: string;
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetTransportRoutingOspfv3Ipv6FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable: string;
    /**
     * Set OSPF area number
     */
    areaNumber: number;
    /**
     * Variable name
     */
    areaNumberVariable: string;
    /**
     * stub area type
     */
    areaType: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces: outputs.GetTransportRoutingOspfv3Ipv6FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary: boolean;
    /**
     * Variable name
     */
    noSummaryVariable: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges: outputs.GetTransportRoutingOspfv3Ipv6FeatureAreaRange[];
}

export interface GetTransportRoutingOspfv3Ipv6FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey: string;
    /**
     * Variable name
     */
    authenticationKeyVariable: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     */
    authenticationSpi: number;
    /**
     * Variable name
     */
    authenticationSpiVariable: string;
    /**
     * No Authentication by default
     */
    authenticationType: string;
    /**
     * Set cost of OSPF interface
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Set interval after which neighbor is declared to be down
     */
    deadInterval: number;
    /**
     * Variable name
     */
    deadIntervalVariable: string;
    /**
     * Set interval between OSPF hello packets
     */
    helloInterval: number;
    /**
     * Variable name
     */
    helloIntervalVariable: string;
    /**
     * Set time between retransmitting LSAs
     */
    lsaRetransmitInterval: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable: string;
    /**
     * Set interface name
     */
    name: string;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Set the OSPF network type
     */
    networkType: string;
    /**
     * Variable name
     */
    networkTypeVariable: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     */
    passiveInterface: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable: string;
}

export interface GetTransportRoutingOspfv3Ipv6FeatureAreaRange {
    /**
     * Set cost for this range
     */
    cost: number;
    /**
     * Variable name
     */
    costVariable: string;
    /**
     * Do not advertise this range
     */
    noAdvertise: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable: string;
    /**
     * IPv6 prefix,for example 2001::/64
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetTransportRoutingOspfv3Ipv6FeatureRedistribute {
    /**
     * Set the protocol
     */
    protocol: string;
    /**
     * Variable name
     */
    protocolVariable: string;
    routePolicyId: string;
}

export interface GetTransportT1E1ControllerFeatureEntry {
    /**
     * Cable Config
     */
    cableLength: string;
    /**
     * Channel Group List
     */
    channelGroups: outputs.GetTransportT1E1ControllerFeatureEntryChannelGroup[];
    /**
     * Clock Source
     */
    clockSource: string;
    /**
     * Description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Card Type
     */
    e1Description: string;
    /**
     * Framing
     */
    e1Framing: string;
    /**
     * Variable name
     */
    e1FramingVariable: string;
    /**
     * LineCode
     */
    e1Linecode: string;
    /**
     * Variable name
     */
    e1LinecodeVariable: string;
    /**
     * length
     */
    lengthLong: string;
    /**
     * Variable name
     */
    lengthLongVariable: string;
    /**
     * length
     */
    lengthShort: string;
    /**
     * Variable name
     */
    lengthShortVariable: string;
    /**
     * Line Mode
     */
    lineMode: string;
    /**
     * Variable name
     */
    lineModeVariable: string;
    /**
     * Card Type
     */
    t1Description: string;
    /**
     * Framing
     */
    t1Framing: string;
    /**
     * Variable name
     */
    t1FramingVariable: string;
    /**
     * LineCode
     */
    t1Linecode: string;
    /**
     * Variable name
     */
    t1LinecodeVariable: string;
}

export interface GetTransportT1E1ControllerFeatureEntryChannelGroup {
    /**
     * Number
     */
    channelGroup: number;
    /**
     * Variable name
     */
    channelGroupVariable: string;
    /**
     * Time slots
     */
    timeSlot: string;
    /**
     * Variable name
     */
    timeSlotVariable: string;
}

export interface GetTransportTrackerGroupFeatureTrackerElement {
    trackerId: string;
}

export interface GetTransportWanVpnFeatureIpv4StaticRoute {
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
    /**
     * Gateway
     */
    gateway: string;
    /**
     * IP Address
     */
    networkAddress: string;
    /**
     * Variable name
     */
    networkAddressVariable: string;
    /**
     * IPv4 Route Gateway Next Hop
     */
    nextHops: outputs.GetTransportWanVpnFeatureIpv4StaticRouteNextHop[];
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportWanVpnFeatureIpv4StaticRouteNextHop {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
}

export interface GetTransportWanVpnFeatureIpv6StaticRoute {
    /**
     * Gateway
     */
    gateway: string;
    /**
     * IPv6 Nat
     */
    nat: string;
    /**
     * Variable name
     */
    natVariable: string;
    /**
     * IPv6 Route Gateway Next Hop
     */
    nextHops: outputs.GetTransportWanVpnFeatureIpv6StaticRouteNextHop[];
    /**
     * IPv6 Route Gateway Next Hop
     */
    null0: boolean;
    /**
     * Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetTransportWanVpnFeatureIpv6StaticRouteNextHop {
    /**
     * Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Administrative distance
     */
    administrativeDistance: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable: string;
}

export interface GetTransportWanVpnFeatureNat64V4Pool {
    /**
     * NAT64 v4 Pool Name
     */
    nat64V4PoolName: string;
    /**
     * Variable name
     */
    nat64V4PoolNameVariable: string;
    /**
     * NAT64 Overload
     */
    nat64V4PoolOverload: boolean;
    /**
     * Variable name
     */
    nat64V4PoolOverloadVariable: string;
    /**
     * NAT64 Pool Range End
     */
    nat64V4PoolRangeEnd: string;
    /**
     * Variable name
     */
    nat64V4PoolRangeEndVariable: string;
    /**
     * NAT64 Pool Range Start
     */
    nat64V4PoolRangeStart: string;
    /**
     * Variable name
     */
    nat64V4PoolRangeStartVariable: string;
}

export interface GetTransportWanVpnFeatureNewHostMapping {
    /**
     * Hostname
     */
    hostName: string;
    /**
     * Variable name
     */
    hostNameVariable: string;
    /**
     * List of IP
     */
    listOfIpAddresses: string[];
    /**
     * Variable name
     */
    listOfIpAddressesVariable: string;
}

export interface GetTransportWanVpnFeatureService {
    /**
     * Service Type
     */
    serviceType: string;
}

export interface GetTransportWanVpnInterfaceCellularFeatureArp {
    /**
     * IP V4 Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC Address
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
}

export interface GetTransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureArp {
    /**
     * IP V4 Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC Address
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Subnet Mask
     */
    subnetMask: string;
    /**
     * Variable name
     */
    subnetMaskVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat {
    /**
     * Direction of static NAT translation
     */
    direction: string;
    /**
     * Source IP address to be translated
     */
    sourceIp: string;
    /**
     * Variable name
     */
    sourceIpVariable: string;
    /**
     * Source VPN ID
     */
    sourceVpn: number;
    /**
     * Variable name
     */
    sourceVpnVariable: string;
    /**
     * Statically translated source IP address
     */
    translatedIp: string;
    /**
     * Variable name
     */
    translatedIpVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureStaticNat66 {
    /**
     * Source Prefix
     */
    sourcePrefix: string;
    /**
     * Variable name
     */
    sourcePrefixVariable: string;
    /**
     * Source VPN ID
     */
    sourceVpnId: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable: string;
    /**
     * Translated Source Prefix
     */
    translatedSourcePrefix: string;
    /**
     * Variable name
     */
    translatedSourcePrefixVariable: string;
}

export interface GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetUrlFilteringPolicyDefinitionLogging {
    /**
     * External Syslog Server IP
     */
    externalSyslogServerIp: string;
    /**
     * External Syslog Server VPN
     */
    externalSyslogServerVpn: string;
}

export interface GetVedgeInventoryDevice {
    /**
     * Chassis Number
     */
    chassisNumber: string;
    /**
     * Type of device
     */
    deviceType: string;
    /**
     * Hostname for respective device
     */
    hostname: string;
    /**
     * Serial number for device. Could be board or virtual identifier
     */
    serialNumber: string;
    /**
     * Site id for respective device
     */
    siteId: string;
    /**
     * Validity of device
     */
    validity: string;
}

export interface GetVpnInterfaceCellularFeatureTemplateIpv4AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceCellularFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceCellularFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Ending port of port range
     */
    portEndRange: number;
    /**
     * Starting port of port range
     */
    portStartRange: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress: string;
    /**
     * Variable name
     */
    privateIpAddressVariable: string;
    /**
     * VPN in which private IP Address resides
     */
    privateVpn: number;
    /**
     * Variable name
     */
    privateVpnVariable: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     */
    protocol: string;
}

export interface GetVpnInterfaceCellularFeatureTemplatePolicer {
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of policer
     */
    policerName: string;
}

export interface GetVpnInterfaceCellularFeatureTemplateStaticArp {
    /**
     * IP Address
     */
    ipAddress: string;
    /**
     * Variable name
     */
    ipAddressVariable: string;
    /**
     * MAC address
     */
    mac: string;
    /**
     * Variable name
     */
    macVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnInterfaceDslIpoeFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceDslIpoeFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Ending port of port range
     */
    portEndRange: number;
    /**
     * Starting port of port range
     */
    portStartRange: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress: string;
    /**
     * Variable name
     */
    privateIpAddressVariable: string;
    /**
     * VPN in which private IP Address resides
     */
    privateVpn: number;
    /**
     * Variable name
     */
    privateVpnVariable: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     */
    protocol: string;
}

export interface GetVpnInterfaceDslIpoeFeatureTemplatePolicer {
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of policer
     */
    policerName: string;
}

export interface GetVpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnInterfaceDslIpoeFeatureTemplateVdslConfiguration {
    /**
     * Set module slot/subslot/port number
     */
    controllerVdslSlot: string;
    /**
     * Variable name
     */
    controllerVdslSlotVariable: string;
    /**
     * Set VDSL operating mode to adsl1
     */
    modeAdsl1: boolean;
    /**
     * Set VDSL operating mode to adsl2
     */
    modeAdsl2: boolean;
    /**
     * Set VDSL operating mode to adsl2plus
     */
    modeAdsl2plus: boolean;
    /**
     * Set VDSL operating mode to ansi
     */
    modeAnsi: boolean;
    /**
     * Set VDSL operating mode to vdsl2
     */
    modeVdsl2: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Seamless rate adaption
     */
    sra: boolean;
    /**
     * Set module slot/subslot/port number
     */
    vdslModemConfiguration: string;
    /**
     * Variable name
     */
    vdslModemConfigurationVariable: string;
}

export interface GetVpnInterfaceDslPppoaFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceDslPppoaFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Ending port of port range
     */
    portEndRange: number;
    /**
     * Starting port of port range
     */
    portStartRange: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress: string;
    /**
     * Variable name
     */
    privateIpAddressVariable: string;
    /**
     * VPN in which private IP Address resides
     */
    privateVpn: number;
    /**
     * Variable name
     */
    privateVpnVariable: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     */
    protocol: string;
}

export interface GetVpnInterfaceDslPppoaFeatureTemplatePolicer {
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of policer
     */
    policerName: string;
}

export interface GetVpnInterfaceDslPppoaFeatureTemplatePvc {
    /**
     * Dialer Pool corresponding to this pvc
     */
    atmDialerPoolMember: number;
    /**
     * Variable name
     */
    atmDialerPoolMemberVariable: string;
    /**
     * dialer
     */
    atmEncapsulationAal5mux: boolean;
    /**
     * aal5nlpid
     */
    atmEncapsulationAal5nlpid: boolean;
    /**
     * aal5snap
     */
    atmEncapsulationAal5snap: boolean;
    /**
     * Maximum Burst Size in Cells
     */
    atmVbrNrtMaximumBurstSize: number;
    /**
     * Variable name
     */
    atmVbrNrtMaximumBurstSizeVariable: string;
    /**
     * Peak Cell Rate in Kbps
     */
    atmVbrNrtPeakCellRate: number;
    /**
     * Variable name
     */
    atmVbrNrtPeakCellRateVariable: string;
    /**
     * Peak Cell Rate in Kbps
     */
    atmVbrNrtSustainableCellRate: number;
    /**
     * Variable name
     */
    atmVbrNrtSustainableCellRateVariable: string;
    /**
     * Average Cell Rate in Kbps
     */
    atmVbrRtAverageCellRate: number;
    /**
     * Variable name
     */
    atmVbrRtAverageCellRateVariable: string;
    /**
     * Maximum Burst Size in number of Cells
     */
    atmVbrRtMaximumBurstSize: number;
    /**
     * Variable name
     */
    atmVbrRtMaximumBurstSizeVariable: string;
    /**
     * Peak Cell Rate in Kbps
     */
    atmVbrRtPeakCellRate: number;
    /**
     * Variable name
     */
    atmVbrRtPeakCellRateVariable: string;
    /**
     * VPI/VCI
     */
    atmVpiAndVci: string;
    /**
     * Variable name
     */
    atmVpiAndVciVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnInterfaceDslPppoaFeatureTemplateVdslConfiguration {
    /**
     * Set module slot/subslot/port number
     */
    controllerVdslSlot: string;
    /**
     * Variable name
     */
    controllerVdslSlotVariable: string;
    /**
     * Set VDSL operating mode to adsl1
     */
    modeAdsl1: boolean;
    /**
     * Set VDSL operating mode to adsl2
     */
    modeAdsl2: boolean;
    /**
     * Set VDSL operating mode to adsl2plus
     */
    modeAdsl2plus: boolean;
    /**
     * Set VDSL operating mode to ansi
     */
    modeAnsi: boolean;
    /**
     * Set VDSL operating mode to vdsl2
     */
    modeVdsl2: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Seamless rate adaption
     */
    sra: boolean;
    /**
     * Set module slot/subslot/port number
     */
    vdslModemConfiguration: string;
    /**
     * Variable name
     */
    vdslModemConfigurationVariable: string;
}

export interface GetVpnInterfaceDslPppoeFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Ending port of port range
     */
    portEndRange: number;
    /**
     * Starting port of port range
     */
    portStartRange: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress: string;
    /**
     * Variable name
     */
    privateIpAddressVariable: string;
    /**
     * VPN in which private IP Address resides
     */
    privateVpn: number;
    /**
     * Variable name
     */
    privateVpnVariable: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     */
    protocol: string;
}

export interface GetVpnInterfaceDslPppoeFeatureTemplatePolicer {
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of policer
     */
    policerName: string;
}

export interface GetVpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnInterfaceDslPppoeFeatureTemplateVdslConfiguration {
    /**
     * Set module slot/subslot/port number
     */
    controllerVdslSlot: string;
    /**
     * Variable name
     */
    controllerVdslSlotVariable: string;
    /**
     * Set VDSL operating mode to adsl1
     */
    modeAdsl1: boolean;
    /**
     * Set VDSL operating mode to adsl2
     */
    modeAdsl2: boolean;
    /**
     * Set VDSL operating mode to adsl2plus
     */
    modeAdsl2plus: boolean;
    /**
     * Set VDSL operating mode to ansi
     */
    modeAnsi: boolean;
    /**
     * Set VDSL operating mode to vdsl2
     */
    modeVdsl2: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Seamless rate adaption
     */
    sra: boolean;
    /**
     * Set module slot/subslot/port number
     */
    vdslModemConfiguration: string;
    /**
     * Variable name
     */
    vdslModemConfigurationVariable: string;
}

export interface GetVpnInterfaceEthernetPppoeFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceEthernetPppoeFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Ending port of port range
     */
    portEndRange: number;
    /**
     * Starting port of port range
     */
    portStartRange: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress: string;
    /**
     * Variable name
     */
    privateIpAddressVariable: string;
    /**
     * VPN in which private IP Address resides
     */
    privateVpn: number;
    /**
     * Variable name
     */
    privateVpnVariable: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     */
    protocol: string;
}

export interface GetVpnInterfaceEthernetPppoeFeatureTemplatePolicer {
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of policer
     */
    policerName: string;
}

export interface GetVpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnInterfaceMultilinkFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceMultilinkFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterface {
    /**
     * Channel Group List
     */
    channelGroupLists: outputs.GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList[];
    /**
     * Description
     */
    description: string;
    /**
     * Variable name
     */
    descriptionVariable: string;
    /**
     * Framing
     */
    framing: string;
    /**
     * Variable name
     */
    framingVariable: string;
    /**
     * Card Type
     */
    interfaceType: string;
    /**
     * Internal
     */
    internal: boolean;
    /**
     * Line Mode
     */
    lineMode: string;
    /**
     * Variable name
     */
    lineModeVariable: string;
    /**
     * LineCode
     */
    linecode: string;
    /**
     * Variable name
     */
    linecodeVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set length for long
     */
    setLengthForLong: string;
    /**
     * Set Length for short
     */
    setLengthForShort: string;
    /**
     * Slot number
     */
    slot: string;
}

export interface GetVpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList {
    /**
     * Number
     */
    channelGroup: number;
    /**
     * Variable name
     */
    channelGroupVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Variable name
     */
    timeSlotVariable: string;
    /**
     * Time slots
     */
    timeSlots: string[];
}

export interface GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList {
    /**
     * Interface bandwidth capacity, in kbps
     */
    bandwidth: number;
    /**
     * Variable name
     */
    bandwidthVariable: string;
    /**
     * Set preference for interface Clock speed
     */
    clockRate: number;
    /**
     * Variable name
     */
    clockRateVariable: string;
    /**
     * Configure Encapsulation for interface
     */
    encapsulationSerial: string;
    /**
     * Variable name
     */
    encapsulationSerialVariable: string;
    /**
     * Interface description
     */
    interfaceDescription: string;
    /**
     * Variable name
     */
    interfaceDescriptionVariable: string;
    /**
     * Interface Name
     */
    interfaceName: string;
    /**
     * Variable name
     */
    interfaceNameVariable: string;
    /**
     * NIM Serial interface type
     */
    nimSerialInterfaceType: string;
    /**
     * Variable name
     */
    nimSerialInterfaceTypeVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv4AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress {
    /**
     * IP Address
     */
    ipv4Address: string;
    /**
     * Variable name
     */
    ipv4AddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv4Vrrp {
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * Assign IP Address
     */
    ipv4Address: string;
    /**
     * Variable name
     */
    ipv4AddressVariable: string;
    /**
     * VRRP Secondary IP address
     */
    ipv4SecondaryAddresses: outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * change TLOC preference
     */
    tlocPreferenceChange: boolean;
    /**
     * Set tloc preference change value
     */
    tlocPreferenceChangeValue: number;
    /**
     * Variable name
     */
    tlocPreferenceChangeValueVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Variable name
     */
    trackOmpVariable: string;
    /**
     * Track Prefix List
     */
    trackPrefixList: string;
    /**
     * Variable name
     */
    trackPrefixListVariable: string;
    /**
     * tracking object for VRRP configuration
     */
    trackingObjects: outputs.GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject[];
}

export interface GetVpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress {
    /**
     * VRRP Secondary IP address
     */
    ipv4Address: string;
    /**
     * Variable name
     */
    ipv4AddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     */
    decrementValue: number;
    /**
     * Variable name
     */
    decrementValueVariable: string;
    /**
     * Tracker ID
     */
    name: number;
    /**
     * Variable name
     */
    nameVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Track Action
     */
    trackAction: string;
    /**
     * Variable name
     */
    trackActionVariable: string;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address: string;
    /**
     * Variable name
     */
    addressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * DHCPv6 Helper VPN
     */
    vpnId: number;
    /**
     * Variable name
     */
    vpnIdVariable: string;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress {
    /**
     * IPv6 Address
     */
    ipv6Address: string;
    /**
     * Variable name
     */
    ipv6AddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv6Vrrp {
    /**
     * Group ID
     */
    groupId: number;
    /**
     * Variable name
     */
    groupIdVariable: string;
    /**
     * IPv6 VRRP
     */
    ipv6Addresses: outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address[];
    /**
     * IPv6 Secondary IP address
     */
    ipv6SecondaryAddresses: outputs.GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress[];
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set priority
     */
    priority: number;
    /**
     * Variable name
     */
    priorityVariable: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     */
    timer: number;
    /**
     * Variable name
     */
    timerVariable: string;
    /**
     * Track OMP status
     */
    trackOmp: boolean;
    /**
     * Variable name
     */
    trackOmpVariable: string;
    /**
     * Track Prefix List
     */
    trackPrefixList: string;
    /**
     * Variable name
     */
    trackPrefixListVariable: string;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address {
    /**
     * Use link-local IPv6 Address
     */
    linkLocalAddress: string;
    /**
     * Variable name
     */
    linkLocalAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Assign Global IPv6 Prefix
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetVpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress {
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * IPv6 Secondary IP address
     */
    prefix: string;
    /**
     * Variable name
     */
    prefixVariable: string;
}

export interface GetVpnInterfaceSviFeatureTemplatePolicer {
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Name of policer
     */
    policerName: string;
}

export interface GetVpnInterfaceSviFeatureTemplateStaticArpEntry {
    /**
     * IP Address
     */
    ipv4Address: string;
    /**
     * Variable name
     */
    ipv4AddressVariable: string;
    /**
     * MAC address
     */
    macAddress: string;
    /**
     * Variable name
     */
    macAddressVariable: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName: string;
    /**
     * Variable name
     */
    aclNameVariable: string;
    /**
     * Direction
     */
    direction: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
}

export interface GetVpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     */
    encapsulation: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional: boolean;
    /**
     * Set preference for TLOC
     */
    preference: number;
    /**
     * Variable name
     */
    preferenceVariable: string;
    /**
     * Set weight for TLOC
     */
    weight: number;
    /**
     * Variable name
     */
    weightVariable: string;
}

export interface GetVpnListPolicyObjectEntry {
    /**
     * VPN ID or range of VPN IDs e.g., `100` or `200-300`
     */
    vpnId: string;
}

export interface GetVpnMembershipPolicyDefinitionSite {
    /**
     * Site list ID
     */
    siteListId: string;
    /**
     * Site list version
     */
    siteListVersion: number;
    /**
     * VPN list IDs
     */
    vpnListIds: string[];
    /**
     * VPN list versions
     */
    vpnListVersions: string[];
}

export interface GetZoneBasedFirewallPolicyDefinitionApplyZonePair {
    /**
     * Destination Zone
     */
    destinationZone: string;
    /**
     * Source Zone
     */
    sourceZone: string;
}

export interface GetZoneBasedFirewallPolicyDefinitionRule {
    /**
     * List of actions entries
     */
    actionEntries: outputs.GetZoneBasedFirewallPolicyDefinitionRuleActionEntry[];
    /**
     * Base action
     */
    baseAction: string;
    /**
     * List of match entries
     */
    matchEntries: outputs.GetZoneBasedFirewallPolicyDefinitionRuleMatchEntry[];
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Rule
     */
    ruleOrder: number;
}

export interface GetZoneBasedFirewallPolicyDefinitionRuleActionEntry {
    /**
     * Type of action entry
     */
    type: string;
}

export interface GetZoneBasedFirewallPolicyDefinitionRuleMatchEntry {
    /**
     * policy id for selected match entry
     */
    policyId: string;
    /**
     * Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
     */
    protocolType: string;
    /**
     * Type of match entry
     */
    type: string;
    /**
     * value for selected match entry
     */
    value: string;
    /**
     * variable value for selected match entry if it has variable option (sourceIp & destinationIp)
     */
    valueVariable: string;
}

export interface GetZoneListPolicyObjectEntry {
    /**
     * Interface name
     */
    interface: string;
    /**
     * VPN ID
     */
    vpn: string;
}

export interface HubAndSpokeTopologyPolicyDefinitionTopology {
    /**
     * Advertise Hub TLOCs
     */
    advertiseHubTlocs?: boolean;
    /**
     * All hubs are equal (All Spokes Sites connect to all Hubs)
     */
    allHubsAreEqual?: boolean;
    /**
     * Topology name
     */
    name: string;
    /**
     * List of spokes
     */
    spokes?: outputs.HubAndSpokeTopologyPolicyDefinitionTopologySpoke[];
    /**
     * TLOC list ID (required when `advertiseHubTlocs` is 'true')
     */
    tlocListId?: string;
}

export interface HubAndSpokeTopologyPolicyDefinitionTopologySpoke {
    /**
     * List of hubs
     */
    hubs?: outputs.HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub[];
    /**
     * Site list ID
     */
    siteListId?: string;
    /**
     * Site list version
     */
    siteListVersion?: number;
}

export interface HubAndSpokeTopologyPolicyDefinitionTopologySpokeHub {
    /**
     * List of IPv4 prefix list IDs
     */
    ipv4PrefixListIds?: string[];
    /**
     * List of IPv6 prefix list IDs
     */
    ipv6PrefixListIds?: string[];
    /**
     * Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `allHubsAreEqual` is 'false')
     */
    preference?: string;
    /**
     * Site list ID
     */
    siteListId?: string;
    /**
     * Site list version
     */
    siteListVersion?: number;
}

export interface IntrusionPreventionPolicyDefinitionLogging {
    /**
     * External Syslog Server IP
     */
    externalSyslogServerIp?: string;
    /**
     * External Syslog Server VPN
     */
    externalSyslogServerVpn?: string;
}

export interface IpsSignatureListPolicyObjectEntry {
    /**
     * Signature generator ID
     *   - Range: `0`-`4294967295`
     */
    generatorId?: number;
    /**
     * Signature ID
     *   - Range: `0`-`4294967295`
     */
    signatureId?: number;
}

export interface Ipv4AclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.Ipv4AclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     *   - Choices: `accept`, `drop`
     */
    baseAction?: string;
    /**
     * Sequence ID
     *   - Range: `1`-`65534`
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries?: outputs.Ipv4AclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface Ipv4AclPolicyDefinitionSequenceActionEntry {
    /**
     * Class map ID, Attribute conditional on `type` being equal to `class`
     */
    classMapId?: string;
    /**
     * Class map version
     */
    classMapVersion?: number;
    /**
     * Counter name, Attribute conditional on `type` being equal to `count`
     */
    counterName?: string;
    /**
     * Enable logging, Attribute conditional on `type` being equal to `log`
     */
    log?: boolean;
    /**
     * Mirror ID, Attribute conditional on `type` being equal to `mirror`
     */
    mirrorId?: string;
    /**
     * Mirror version
     */
    mirrorVersion?: number;
    /**
     * Policer ID, Attribute conditional on `type` being equal to `policer`
     */
    policerId?: string;
    /**
     * Policer version
     */
    policerVersion?: number;
    /**
     * List of set parameters, Attribute conditional on `type` being equal to `set`
     */
    setParameters?: outputs.Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Type of action entry
     *   - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
     */
    type: string;
}

export interface Ipv4AclPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * DSCP value, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     */
    dscp?: number;
    /**
     * Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     */
    nextHop?: string;
    /**
     * Type of set parameter
     *   - Choices: `dscp`, `nextHop`
     */
    type: string;
}

export interface Ipv4AclPolicyDefinitionSequenceMatchEntry {
    /**
     * Class map ID, Attribute conditional on `type` being equal to `class`
     */
    classMapId?: string;
    /**
     * Class map version
     */
    classMapVersion?: number;
    /**
     * Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     */
    destinationDataIpv4PrefixListId?: string;
    /**
     * Destination data IPv4 prefix list version
     */
    destinationDataIpv4PrefixListVersion?: number;
    /**
     * Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
     */
    destinationIp?: string;
    /**
     * Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
     */
    destinationPorts?: string;
    /**
     * DSCP value, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     */
    dscp?: number;
    /**
     * ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     */
    icmpMessage?: string;
    /**
     * Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     */
    packetLength?: number;
    /**
     * PLP - priority, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `high`, `low`
     */
    priority?: string;
    /**
     * Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
     */
    protocol?: string;
    /**
     * Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     */
    sourceDataIpv4PrefixListId?: string;
    /**
     * Source data IPv4 prefix list version
     */
    sourceDataIpv4PrefixListVersion?: number;
    /**
     * Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
     */
    sourceIp?: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     */
    sourcePorts?: string;
    /**
     * TCP parameters, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     */
    tcp?: string;
    /**
     * Type of match entry
     *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
     */
    type: string;
}

export interface Ipv4DeviceAclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.Ipv4DeviceAclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     *   - Choices: `accept`, `drop`
     */
    baseAction?: string;
    /**
     * Sequence ID
     *   - Range: `1`-`65534`
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries?: outputs.Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface Ipv4DeviceAclPolicyDefinitionSequenceActionEntry {
    /**
     * Counter name, Attribute conditional on `type` being equal to `count`
     */
    counterName?: string;
    /**
     * Type of action entry
     *   - Choices: `count`
     */
    type: string;
}

export interface Ipv4DeviceAclPolicyDefinitionSequenceMatchEntry {
    /**
     * Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     */
    destinationDataIpv4PrefixListId?: string;
    /**
     * Destination data IPv4 prefix list version
     */
    destinationDataIpv4PrefixListVersion?: number;
    /**
     * Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
     */
    destinationIp?: string;
    /**
     * Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
     *   - Range: `0`-`65535`
     */
    destinationPort?: number;
    /**
     * Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     */
    sourceDataIpv4PrefixListId?: string;
    /**
     * Source data IPv4 prefix list version
     */
    sourceDataIpv4PrefixListVersion?: number;
    /**
     * Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
     */
    sourceIp?: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     */
    sourcePorts?: string;
    /**
     * Type of match entry
     *   - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
     */
    type: string;
}

export interface Ipv4PrefixListPolicyObjectEntry {
    /**
     * Greater equal
     */
    ge?: number;
    /**
     * Lesser equal
     */
    le?: number;
    /**
     * IP prefix list entry e.g., `10.0.0.0/12`
     */
    prefix: string;
}

export interface Ipv6AclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.Ipv6AclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     *   - Choices: `accept`, `drop`
     */
    baseAction?: string;
    /**
     * Sequence ID
     *   - Range: `1`-`65534`
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries?: outputs.Ipv6AclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface Ipv6AclPolicyDefinitionSequenceActionEntry {
    /**
     * Class map ID, Attribute conditional on `type` being equal to `class`
     */
    classMapId?: string;
    /**
     * Class map version
     */
    classMapVersion?: number;
    /**
     * Counter name, Attribute conditional on `type` being equal to `count`
     */
    counterName?: string;
    /**
     * Enable logging, Attribute conditional on `type` being equal to `log`
     */
    log?: boolean;
    /**
     * Mirror ID, Attribute conditional on `type` being equal to `mirror`
     */
    mirrorId?: string;
    /**
     * Mirror version
     */
    mirrorVersion?: number;
    /**
     * Policer ID, Attribute conditional on `type` being equal to `policer`
     */
    policerId?: string;
    /**
     * Policer version
     */
    policerVersion?: number;
    /**
     * List of set parameters, Attribute conditional on `type` being equal to `set`
     */
    setParameters?: outputs.Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Type of action entry
     *   - Choices: `class`, `count`, `set`, `log`, `mirror`, `policer`
     */
    type: string;
}

export interface Ipv6AclPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     */
    nextHop?: string;
    /**
     * Traffic class, Attribute conditional on `type` being equal to `trafficClass`
     *   - Range: `0`-`63`
     */
    trafficClass?: number;
    /**
     * Type of set parameter
     *   - Choices: `trafficClass`, `nextHop`
     */
    type: string;
}

export interface Ipv6AclPolicyDefinitionSequenceMatchEntry {
    /**
     * Class map ID, Attribute conditional on `type` being equal to `class`
     */
    classMapId?: string;
    /**
     * Class map version
     */
    classMapVersion?: number;
    /**
     * Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
     */
    destinationDataIpv6PrefixListId?: string;
    /**
     * Destination data prefix list version
     */
    destinationDataIpv6PrefixListVersion?: number;
    /**
     * Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
     */
    destinationIp?: string;
    /**
     * Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
     */
    destinationPorts?: string;
    /**
     * Next header, Attribute conditional on `type` being equal to `nextHeader`
     *   - Range: `0`-`255`
     */
    nextHeader?: number;
    /**
     * Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     */
    packetLength?: number;
    /**
     * PLP - priority, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `high`, `low`
     */
    priority?: string;
    /**
     * Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
     */
    sourceDataIpv6PrefixListId?: string;
    /**
     * Source data IPv6 prefix list version
     */
    sourceDataIpv6PrefixListVersion?: number;
    /**
     * Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
     */
    sourceIp?: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     */
    sourcePorts?: string;
    /**
     * TCP parameters, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     */
    tcp?: string;
    /**
     * Traffic class, Attribute conditional on `type` being equal to `trafficClass`
     *   - Range: `0`-`63`
     */
    trafficClass?: number;
    /**
     * Type of match entry
     *   - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
     */
    type: string;
}

export interface Ipv6DeviceAclPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.Ipv6DeviceAclPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     *   - Choices: `accept`, `drop`
     */
    baseAction?: string;
    /**
     * Sequence ID
     *   - Range: `1`-`65534`
     */
    id: number;
    /**
     * List of match entries
     */
    matchEntries?: outputs.Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface Ipv6DeviceAclPolicyDefinitionSequenceActionEntry {
    /**
     * Counter name, Attribute conditional on `type` being equal to `count`
     */
    counterName?: string;
    /**
     * Type of action entry
     *   - Choices: `count`
     */
    type: string;
}

export interface Ipv6DeviceAclPolicyDefinitionSequenceMatchEntry {
    /**
     * Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
     */
    destinationDataIpv6PrefixListId?: string;
    /**
     * Destination data IPv6 prefix list version
     */
    destinationDataIpv6PrefixListVersion?: number;
    /**
     * Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
     */
    destinationIp?: string;
    /**
     * Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
     *   - Range: `0`-`65535`
     */
    destinationPort?: number;
    /**
     * Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
     */
    sourceDataIpv6PrefixListId?: string;
    /**
     * Source data IPv6 prefix list version
     */
    sourceDataIpv6PrefixListVersion?: number;
    /**
     * Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
     */
    sourceIp?: string;
    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     */
    sourcePorts?: string;
    /**
     * Type of match entry
     *   - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
     */
    type: string;
}

export interface Ipv6PrefixListPolicyObjectEntry {
    /**
     * Greater equal
     */
    ge?: number;
    /**
     * Lesser equal
     */
    le?: number;
    /**
     * IP prefix list entry, e.g. `2001:1:1:2::/64`
     */
    prefix: string;
}

export interface LocalApplicationListPolicyObjectEntry {
    /**
     * Application name
     */
    application?: string;
    /**
     * Application family name
     */
    applicationFamily?: string;
}

export interface LocalizedPolicyDefinition {
    /**
     * Policy definition ID
     */
    id: string;
    /**
     * Policy definition type
     *   - Choices: `qosMap`, `rewriteRule`, `vedgeRoute`, `acl`, `aclv6`, `deviceAccessPolicy`, `deviceAccessPolicyv6`
     */
    type: string;
    /**
     * Policy definition version
     */
    version?: number;
}

export interface MeshTopologyPolicyDefinitionRegion {
    /**
     * Region name
     */
    name: string;
    /**
     * Site list IDs
     */
    siteListIds?: string[];
    /**
     * Site list versions
     */
    siteListVersions?: string[];
}

export interface OtherThousandeyesFeatureVirtualApplication {
    /**
     * Set the Account Group Token
     */
    accountGroupToken?: string;
    /**
     * Variable name
     */
    accountGroupTokenVariable?: string;
    /**
     * Set the Agent default gateway
     */
    agentDefaultGateway?: string;
    /**
     * Variable name
     */
    agentDefaultGatewayVariable?: string;
    /**
     * Set the host name
     */
    hostname?: string;
    /**
     * Variable name
     */
    hostnameVariable?: string;
    /**
     * Set the Agent IP Address
     */
    managementIp?: string;
    /**
     * Variable name
     */
    managementIpVariable?: string;
    /**
     * Set the Agent SubnetMask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    managementSubnetMask?: string;
    /**
     * Variable name
     */
    managementSubnetMaskVariable?: string;
    /**
     * Set the name server
     */
    nameServerIp?: string;
    /**
     * Variable name
     */
    nameServerIpVariable?: string;
    /**
     * Set the proxy PAC url
     */
    pacUrl?: string;
    /**
     * Variable name
     */
    pacUrlVariable?: string;
    /**
     * Set the Proxy Host
     */
    proxyHost?: string;
    /**
     * Variable name
     */
    proxyHostVariable?: string;
    /**
     * Set the Proxy Port
     *   - Range: `1`-`65535`
     */
    proxyPort?: number;
    /**
     * Variable name
     */
    proxyPortVariable?: string;
    /**
     * Select Web Proxy Type
     */
    proxyType?: string;
    /**
     * VPN number
     *   - Range: `0`-`65530`
     */
    vpn?: number;
    /**
     * Variable name
     */
    vpnVariable?: string;
}

export interface OtherUcseFeatureInterface {
    /**
     * Set Inteface name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Assign IPv4 address
     */
    ipv4Address?: string;
    /**
     * Variable name
     */
    ipv4AddressVariable?: string;
    /**
     * UCSE Interface VPN
     *   - Range: `1`-`65527`
     */
    ucseInterfaceVpn?: number;
    /**
     * Variable name
     */
    ucseInterfaceVpnVariable?: string;
}

export interface PolicyObjectAppProbeClassEntry {
    /**
     * Forwarding Class Name
     */
    forwardingClass?: string;
    /**
     * Map
     */
    maps?: outputs.PolicyObjectAppProbeClassEntryMap[];
}

export interface PolicyObjectAppProbeClassEntryMap {
    /**
     * Color
     *   - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
     */
    color?: string;
    /**
     * DSCP number
     *   - Range: `0`-`63`
     */
    dscp?: number;
}

export interface PolicyObjectApplicationListEntry {
    application?: string;
    applicationFamily?: string;
}

export interface PolicyObjectAsPathListEntry {
    asPathList?: string;
}

export interface PolicyObjectClassMapEntry {
    /**
     * select a queue
     *   - Choices: `0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`
     */
    queue?: string;
}

export interface PolicyObjectColorListEntry {
    /**
     * - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
     */
    color?: string;
}

export interface PolicyObjectDataIpv4PrefixListEntry {
    /**
     * IPv4 address
     */
    ipv4Address?: string;
    /**
     * IPv4 prefix Length
     *   - Range: `0`-`32`
     */
    ipv4PrefixLength?: number;
}

export interface PolicyObjectDataIpv6PrefixListEntry {
    /**
     * IPv6 address
     */
    ipv6Address?: string;
    /**
     * IPv6 prefix
     *   - Range: `0`-`128`
     */
    ipv6PrefixLength?: number;
}

export interface PolicyObjectExtendedCommunityListEntry {
    /**
     * can be soo 10.0.0.1:30 or rt 500:50 etc.
     */
    extendedCommunity?: string;
}

export interface PolicyObjectIpv4PrefixListEntry {
    /**
     * IPv4 prefix length with ge range operator
     *   - Range: `1`-`32`
     */
    ge?: number;
    /**
     * IPv4 address
     */
    ipv4Address?: string;
    /**
     * IPv4 prefix length
     *   - Range: `0`-`32`
     */
    ipv4PrefixLength?: number;
    /**
     * IPv4 prefix length with le range operator
     *   - Range: `1`-`32`
     */
    le?: number;
}

export interface PolicyObjectIpv6PrefixListEntry {
    /**
     * IPv6 prefix length with ge range operator
     *   - Range: `1`-`128`
     */
    ge?: number;
    /**
     * IPv6 address
     */
    ipv6Address?: string;
    /**
     * IPv6 prefix length
     *   - Range: `0`-`128`
     */
    ipv6PrefixLength?: number;
    /**
     * IPv6 prefix length with le range operator
     *   - Range: `1`-`128`
     */
    le?: number;
}

export interface PolicyObjectMirrorEntry {
    /**
     * remote destination ip address
     */
    remoteDestinationIp?: string;
    /**
     * source ip address
     */
    sourceIp?: string;
}

export interface PolicyObjectPolicerEntry {
    /**
     * Burst (Bytes)
     *   - Range: `15000`-`10000000`
     */
    burstBytes?: number;
    /**
     * Exceed options such as Drop or Remark
     *   - Choices: `drop`, `remark`
     */
    exceedAction?: string;
    /**
     * Rate (bps)
     *   - Range: `8`-`100000000000`
     */
    rateBps?: number;
}

export interface PolicyObjectPreferredColorGroupEntry {
    primaryColorPreferences?: string[];
    /**
     * - Choices: `all-paths`, `direct-path`, `multi-hop-path`
     */
    primaryPathPreference?: string;
    secondaryColorPreferences?: string[];
    /**
     * - Choices: `all-paths`, `direct-path`, `multi-hop-path`
     */
    secondaryPathPreference?: string;
    tertiaryColorPreferences?: string[];
    /**
     * - Choices: `all-paths`, `direct-path`, `multi-hop-path`
     */
    tertiaryPathPreference?: string;
}

export interface PolicyObjectSecurityDataIpv4PrefixListEntry {
    ipPrefix?: string;
    /**
     * Variable name
     */
    ipPrefixVariable?: string;
}

export interface PolicyObjectSecurityFqdnListEntry {
    pattern?: string;
}

export interface PolicyObjectSecurityGeolocationListEntry {
    /**
     * continent name
     *   - Choices: `AF`, `AN`, `AS`, `EU`, `NA`, `OC`, `SA`
     */
    continent?: string;
    /**
     * country names
     *   - Choices: `AFG`, `ALB`, `ATA`, `DZA`, `ASM`, `AND`, `AGO`, `ATG`, `AZE`, `ARG`, `AUS`, `AUT`, `BHS`, `BHR`, `BGD`, `ARM`, `BRB`, `BEL`, `BMU`, `BTN`, `BOL`, `BIH`, `BWA`, `BVT`, `BRA`, `BLZ`, `IOT`, `SLB`, `VGB`, `BRN`, `BGR`, `MMR`, `BDI`, `BLR`, `KHM`, `CMR`, `CAN`, `CPV`, `CYM`, `CAF`, `LKA`, `TCD`, `CHL`, `CHN`, `TWN`, `CXR`, `CCK`, `COL`, `COM`, `MYT`, `COG`, `COD`, `COK`, `CRI`, `HRV`, `CUB`, `CYP`, `CZE`, `BEN`, `DNK`, `DMA`, `DOM`, `ECU`, `SLV`, `GNQ`, `ETH`, `ERI`, `EST`, `FRO`, `FLK`, `SGS`, `FJI`, `FIN`, `ALA`, `FRA`, `GUF`, `PYF`, `ATF`, `DJI`, `GAB`, `GEO`, `GMB`, `PSE`, `DEU`, `GHA`, `GIB`, `KIR`, `GRC`, `GRL`, `GRD`, `GLP`, `GUM`, `GTM`, `GIN`, `GUY`, `HTI`, `HMD`, `VAT`, `HND`, `HKG`, `HUN`, `ISL`, `IND`, `IDN`, `IRN`, `IRQ`, `IRL`, `ISR`, `ITA`, `CIV`, `JAM`, `JPN`, `KAZ`, `JOR`, `KEN`, `PRK`, `KOR`, `KWT`, `KGZ`, `LAO`, `LBN`, `LSO`, `LVA`, `LBR`, `LBY`, `LIE`, `LTU`, `LUX`, `MAC`, `MDG`, `MWI`, `MYS`, `MDV`, `MLI`, `MLT`, `MTQ`, `MRT`, `MUS`, `MEX`, `MCO`, `MNG`, `MDA`, `MNE`, `MSR`, `MAR`, `MOZ`, `OMN`, `NAM`, `NRU`, `NPL`, `NLD`, `ANT`, `CUW`, `ABW`, `SXM`, `BES`, `NCL`, `VUT`, `NZL`, `NIC`, `NER`, `NGA`, `NIU`, `NFK`, `NOR`, `MNP`, `UMI`, `FSM`, `MHL`, `PLW`, `PAK`, `PAN`, `PNG`, `PRY`, `PER`, `PHL`, `PCN`, `POL`, `PRT`, `GNB`, `TLS`, `PRI`, `QAT`, `REU`, `ROU`, `RUS`, `RWA`, `BLM`, `SHN`, `KNA`, `AIA`, `LCA`, `MAF`, `SPM`, `VCT`, `SMR`, `STP`, `SAU`, `SEN`, `SRB`, `SYC`, `SLE`, `SGP`, `SVK`, `VNM`, `SVN`, `SOM`, `ZAF`, `ZWE`, `ESP`, `SSD`, `ESH`, `SDN`, `SUR`, `SJM`, `SWZ`, `SWE`, `CHE`, `SYR`, `TJK`, `THA`, `TGO`, `TKL`, `TON`, `TTO`, `ARE`, `TUN`, `TUR`, `TKM`, `TCA`, `TUV`, `UGA`, `UKR`, `MKD`, `EGY`, `GBR`, `GGY`, `JEY`, `IMN`, `TZA`, `USA`, `VIR`, `BFA`, `URY`, `UZB`, `VEN`, `WLF`, `WSM`, `YEM`, `ZMB`
     */
    country?: string;
}

export interface PolicyObjectSecurityIdentityListEntry {
    user?: string;
    userGroup?: string;
}

export interface PolicyObjectSecurityIpsSignatureEntry {
    generatorId?: string;
    signatureId?: string;
}

export interface PolicyObjectSecurityLocalApplicationListEntry {
    app?: string;
    appFamily?: string;
}

export interface PolicyObjectSecurityLocalDomainListEntry {
    localDomain?: string;
}

export interface PolicyObjectSecurityPortListEntry {
    /**
     * can be single port or port range
     */
    port?: string;
}

export interface PolicyObjectSecurityScalableGroupTagListEntry {
    sgtName?: string;
    tag?: string;
}

export interface PolicyObjectSecurityUrlAllowListEntry {
    /**
     * valid url pattern
     */
    pattern?: string;
}

export interface PolicyObjectSecurityUrlBlockListEntry {
    /**
     * valid url pattern
     */
    pattern?: string;
}

export interface PolicyObjectSlaClassListEntry {
    appProbeClassListId?: string;
    /**
     * - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
     */
    fallbackBestTunnelCriteria?: string;
    /**
     * - Range: `1`-`1000`
     */
    fallbackBestTunnelJitterVariance?: number;
    /**
     * - Range: `1`-`1000`
     */
    fallbackBestTunnelLatencyVariance?: number;
    /**
     * - Range: `0`-`100`
     */
    fallbackBestTunnelLossVariance?: number;
    /**
     * - Range: `1`-`1000`
     */
    jitter?: number;
    /**
     * - Range: `1`-`1000`
     */
    latency?: number;
    /**
     * - Range: `0`-`100`
     */
    loss?: number;
}

export interface PolicyObjectStandardCommunityListEntry {
    /**
     * Standard Community
     */
    standardCommunity?: string;
}

export interface PolicyObjectTlocListEntry {
    /**
     * color
     *   - Choices: `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `default`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
     */
    color?: string;
    /**
     * encapsulation
     *   - Choices: `ipsec`, `gre`
     */
    encapsulation?: string;
    /**
     * Preference
     */
    preference?: string;
    /**
     * tloc
     */
    tlocIp?: string;
}

export interface PolicyObjectVpnGroupEntry {
    /**
     * can be single vpn id or vpn id range
     */
    vpn?: number;
}

export interface PortListPolicyObjectEntry {
    /**
     * Port number
     *   - Range: `1`-`65535`
     */
    port?: number;
}

export interface ProtocolListPolicyObjectEntry {
    /**
     * Protocol name
     */
    protocol?: string;
}

export interface QosMapPolicyDefinitionQosScheduler {
    /**
     * Bandwidth percent
     *   - Range: `0`-`100`
     */
    bandwidthPercent: number;
    /**
     * Buffer percent
     *   - Range: `0`-`100`
     */
    bufferPercent: number;
    /**
     * Burst size
     *   - Range: `5000`-`10000000`
     */
    burst?: number;
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion?: number;
    /**
     * Drop type
     *   - Choices: `tail-drop`, `red-drop`
     */
    dropType: string;
    /**
     * Queue number
     *   - Range: `0`-`7`
     */
    queue: number;
    /**
     * Scheduling type
     *   - Choices: `llq`, `wrr`
     */
    schedulingType: string;
}

export interface RegionListPolicyObjectEntry {
    /**
     * Region ID or range of Region IDs e.g., `2` or `3-6`
     */
    regionId: string;
}

export interface RewriteRulePolicyDefinitionRule {
    /**
     * Class map ID
     */
    classMapId: string;
    /**
     * Class map version
     */
    classMapVersion?: number;
    /**
     * DSCP
     *   - Range: `0`-`63`
     */
    dscp: number;
    /**
     * Layer2 CoS
     *   - Range: `0`-`7`
     */
    layer2Cos?: number;
    /**
     * Priority
     *   - Choices: `high`, `low`
     */
    priority: string;
}

export interface RoutePolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.RoutePolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `reject`
     *   - Choices: `accept`, `reject`
     */
    baseAction?: string;
    /**
     * Sequence ID
     *   - Range: `1`-`65534`
     */
    id: number;
    /**
     * IP version, either `ipv4` or `ipv6`
     *   - Choices: `ipv4`, `ipv6`
     */
    ipType?: string;
    /**
     * List of match entries
     */
    matchEntries?: outputs.RoutePolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
}

export interface RoutePolicyDefinitionSequenceActionEntry {
    /**
     * Aggregator, Attribute conditional on `type` being equal to `aggregator`
     *   - Range: `0`-`4294967295`
     */
    aggregator?: number;
    /**
     * IP address, Attribute conditional on `type` being equal to `aggregator`
     */
    aggregatorIpAddress?: string;
    /**
     * Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
     */
    asPathExclude?: string;
    /**
     * Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
     */
    asPathPrepend?: string;
    /**
     * Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
     */
    atomicAggregate?: boolean;
    /**
     * Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     */
    community?: string;
    /**
     * Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     */
    communityAdditive?: boolean;
    /**
     * Local preference, Attribute conditional on `type` being equal to `localPreference`
     *   - Range: `0`-`4294967295`
     */
    localPreference?: number;
    /**
     * Metric, Attribute conditional on `type` being equal to `metric`
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Metric type, Attribute conditional on `type` being equal to `metricType`
     *   - Choices: `type1`, `type2`
     */
    metricType?: string;
    /**
     * Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     */
    nextHop?: string;
    /**
     * OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`
     */
    origin?: string;
    /**
     * Originator IP, Attribute conditional on `type` being equal to `originator`
     */
    originator?: string;
    /**
     * OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
     *   - Range: `0`-`4294967295`
     */
    ospfTag?: number;
    /**
     * Type of action entry
     *   - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
     */
    type: string;
    /**
     * Weight, Attribute conditional on `type` being equal to `weight`
     *   - Range: `0`-`4294967295`
     */
    weight?: number;
}

export interface RoutePolicyDefinitionSequenceMatchEntry {
    /**
     * AS path list ID, Attribute conditional on `type` being equal to `asPath`
     */
    asPathListId?: string;
    /**
     * AS path list version
     */
    asPathListVersion?: number;
    /**
     * Community list IDs, Attribute conditional on `type` being equal to `advancedCommunity`
     */
    communityListIds?: string[];
    /**
     * Community list match flag, Attribute conditional on `type` being equal to `advancedCommunity`
     *   - Choices: `and`, `or`, `exact`
     */
    communityListMatchFlag?: string;
    /**
     * Community list versions
     */
    communityListVersions?: string[];
    /**
     * Expanded community list ID, Attribute conditional on `type` being equal to `expandedCommunity`
     */
    expandedCommunityListId?: string;
    /**
     * Expanded community list version
     */
    expandedCommunityListVersion?: number;
    /**
     * Extended community list ID, Attribute conditional on `type` being equal to `extCommunity`
     */
    extendedCommunityListId?: string;
    /**
     * Extended community list version
     */
    extendedCommunityListVersion?: number;
    /**
     * Local preference, Attribute conditional on `type` being equal to `localPreference`
     *   - Range: `0`-`4294967295`
     */
    localPreference?: number;
    /**
     * Metric, Attribute conditional on `type` being equal to `metric`
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Next hop prefix list ID, Attribute conditional on `type` being equal to `nextHop`
     */
    nextHopPrefixListId?: string;
    /**
     * Next hop prefix list version
     */
    nextHopPrefixListVersion?: number;
    /**
     * OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`
     */
    origin?: string;
    /**
     * OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
     *   - Range: `0`-`4294967295`
     */
    ospfTag?: number;
    /**
     * Peer IP, Attribute conditional on `type` being equal to `peer`
     */
    peer?: string;
    /**
     * Prefix list ID, Attribute conditional on `type` being equal to `address`
     */
    prefixListId?: string;
    /**
     * Prefix list version
     */
    prefixListVersion?: number;
    /**
     * Type of match entry
     *   - Choices: `address`, `asPath`, `advancedCommunity`, `expandedCommunity`, `extCommunity`, `localPreference`, `metric`, `nextHop`, `origin`, `peer`, `ompTag`, `ospfTag`
     */
    type: string;
}

export interface RuleSetPolicyDefinitionRule {
    /**
     * Destination data FQDN prefix list ID
     */
    destinationDataFqdnPrefixListId?: string;
    /**
     * Destination data FQDN prefix list version
     */
    destinationDataFqdnPrefixListVersion?: number;
    /**
     * Destination data IPv4 prefix list ID
     */
    destinationDataIpv4PrefixListId?: string;
    /**
     * Destination data IPv4 prefix list version
     */
    destinationDataIpv4PrefixListVersion?: number;
    /**
     * Destination fully qualified domain name
     */
    destinationFqdn?: string;
    /**
     * Destination geo location
     */
    destinationGeoLocation?: string;
    /**
     * Destination geo location list ID
     */
    destinationGeoLocationListId?: string;
    /**
     * Destination geo location list version
     */
    destinationGeoLocationListVersion?: number;
    /**
     * Destination IPv4 prefix
     */
    destinationIpv4Prefix?: string;
    /**
     * Destination IPv4 prefix variable name
     */
    destinationIpv4PrefixVariable?: string;
    /**
     * Destination object group ID
     */
    destinationObjectGroupId?: string;
    /**
     * Destination object group version
     */
    destinationObjectGroupVersion?: number;
    /**
     * Destination port or range of ports
     */
    destinationPort?: string;
    /**
     * Destination port list ID
     */
    destinationPortListId?: string;
    /**
     * Destination port list version
     */
    destinationPortListVersion?: number;
    /**
     * The name of the rule
     */
    name: string;
    /**
     * The order of the rule
     */
    order: number;
    /**
     * Protocol name
     */
    protocol?: string;
    /**
     * Protocol list ID
     */
    protocolListId?: string;
    /**
     * Protocol list version
     */
    protocolListVersion?: number;
    /**
     * Protocol number
     *   - Range: `0`-`255`
     */
    protocolNumber?: number;
    /**
     * Source data FQDN prefix list ID
     */
    sourceDataFqdnPrefixListId?: string;
    /**
     * Source data FQDN prefix list version
     */
    sourceDataFqdnPrefixListVersion?: number;
    /**
     * Source data IPv4 prefix list ID
     */
    sourceDataIpv4PrefixListId?: string;
    /**
     * Source data IPv4 prefix list version
     */
    sourceDataIpv4PrefixListVersion?: number;
    /**
     * Source fully qualified domain name
     */
    sourceFqdn?: string;
    /**
     * Source geo location
     */
    sourceGeoLocation?: string;
    /**
     * Source geo location list ID
     */
    sourceGeoLocationListId?: string;
    /**
     * Source geo location list version
     */
    sourceGeoLocationListVersion?: number;
    /**
     * Source IPv4 prefix
     */
    sourceIpv4Prefix?: string;
    /**
     * Source IPv4 prefix variable name
     */
    sourceIpv4PrefixVariable?: string;
    /**
     * Source object group ID
     */
    sourceObjectGroupId?: string;
    /**
     * Source object group version
     */
    sourceObjectGroupVersion?: number;
    /**
     * Source port or range of ports
     */
    sourcePort?: string;
    /**
     * Source port list ID
     */
    sourcePortListId?: string;
    /**
     * Source port list version
     */
    sourcePortListVersion?: number;
}

export interface SecurityAppHostingFeatureTemplateVirtualApplication {
    /**
     * List of Virtual applications
     *   - Choices: `utd`
     *   - Default value: `utd`
     */
    applicationType?: string;
    /**
     * Data Gateway IP 
     *   - Default value: `192.0.2.1/24`
     */
    dataGatewayIp?: string;
    /**
     * Variable name
     */
    dataGatewayIpVariable?: string;
    /**
     * Data Service IP
     *   - Default value: `192.0.2.2/24`
     */
    dataServiceIp?: string;
    /**
     * Variable name
     */
    dataServiceIpVariable?: string;
    /**
     * Download URL Database on Device
     *   - Default value: `false`
     */
    databaseUrl?: boolean;
    /**
     * Variable name
     */
    databaseUrlVariable?: string;
    /**
     * List of Virtual applications
     *   - Default value: `1`
     */
    instanceId?: string;
    /**
     * Is Nat enabled
     *   - Default value: `true`
     */
    nat?: boolean;
    /**
     * Variable name
     */
    natVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Resource Profile
     *   - Choices: `low`, `medium`, `high`
     *   - Default value: `low`
     */
    resourceProfile?: string;
    /**
     * Variable name
     */
    resourceProfileVariable?: string;
    /**
     * Service Gateway IP (Management interface)
     */
    serviceGatewayIp?: string;
    /**
     * Variable name
     */
    serviceGatewayIpVariable?: string;
    /**
     * Service IP
     */
    serviceIp?: string;
    /**
     * Variable name
     */
    serviceIpVariable?: string;
}

export interface SecurityPolicyDefinition {
    /**
     * Destination Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
     */
    destinationZone?: string;
    /**
     * Policy definition ID
     */
    id: string;
    /**
     * Source Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
     */
    sourceZone?: string;
    /**
     * Policy definition type
     *   - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
     */
    type: string;
    /**
     * Policy definition version
     */
    version?: number;
}

export interface SecurityPolicyLogging {
    /**
     * External Syslog Server IP
     */
    externalSyslogServerIp?: string;
    /**
     * External Syslog Server Source Interface
     */
    externalSyslogServerSourceInterface?: string;
    /**
     * External Syslog Server VPN
     */
    externalSyslogServerVpn?: string;
}

export interface ServiceDhcpServerFeatureOptionCode {
    /**
     * Set ASCII value
     */
    ascii?: string;
    /**
     * Variable name
     */
    asciiVariable?: string;
    /**
     * Set Option Code
     *   - Range: `1`-`254`
     */
    code?: number;
    /**
     * Variable name
     */
    codeVariable?: string;
    /**
     * Set HEX value
     */
    hex?: string;
    /**
     * Variable name
     */
    hexVariable?: string;
    /**
     * Variable name
     */
    ipVariable?: string;
    /**
     * Set ip address
     */
    ips?: string[];
}

export interface ServiceDhcpServerFeatureStaticLease {
    /**
     * Set client’s static IP address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Set MAC address of client
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
}

export interface ServiceIpv4AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions?: outputs.ServiceIpv4AclFeatureSequenceAction[];
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     *   - Default value: `accept`
     */
    baseAction?: string;
    /**
     * Define match conditions
     */
    matchEntries?: outputs.ServiceIpv4AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    sequenceId?: number;
    /**
     * Sequence Name
     */
    sequenceName?: string;
}

export interface ServiceIpv4AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    acceptLog?: boolean;
    acceptMirrorListId?: string;
    acceptPolicerId?: string;
    /**
     * DSCP number
     *   - Range: `0`-`63`
     */
    acceptSetDscp?: number;
    /**
     * Set Next Hop (IPV4 address)
     */
    acceptSetNextHop?: string;
    /**
     * Counter Name
     */
    dropCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    dropLog?: boolean;
}

export interface ServiceIpv4AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix?: string;
    destinationDataPrefixListId?: string;
    /**
     * Variable name
     */
    destinationDataPrefixVariable?: string;
    /**
     * Destination Port List
     */
    destinationPorts?: outputs.ServiceIpv4AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * DSCP number
     */
    dscps?: number[];
    /**
     * ICMP Message
     */
    icmpMessages?: string[];
    /**
     * Packet Length
     */
    packetLength?: string;
    /**
     * protocol number list with at least one item
     */
    protocols?: number[];
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix?: string;
    sourceDataPrefixListId?: string;
    /**
     * Variable name
     */
    sourceDataPrefixVariable?: string;
    /**
     * Source Port List
     */
    sourcePorts?: outputs.ServiceIpv4AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     *   - Choices: `syn`
     */
    tcpState?: string;
}

export interface ServiceIpv4AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port?: string;
}

export interface ServiceIpv4AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port?: string;
}

export interface ServiceIpv6AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions?: outputs.ServiceIpv6AclFeatureSequenceAction[];
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     *   - Default value: `accept`
     */
    baseAction?: string;
    /**
     * Define match conditions
     */
    matchEntries?: outputs.ServiceIpv6AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    sequenceId?: number;
    /**
     * Sequence Name
     */
    sequenceName?: string;
}

export interface ServiceIpv6AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    acceptLog?: boolean;
    acceptMirrorListId?: string;
    acceptPolicerId?: string;
    /**
     * Set Next Hop (IPV6 address)
     */
    acceptSetNextHop?: string;
    /**
     * set traffic class number
     *   - Range: `0`-`63`
     */
    acceptTrafficClass?: number;
    /**
     * Counter Name
     */
    dropCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    dropLog?: boolean;
}

export interface ServiceIpv6AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix?: string;
    destinationDataPrefixListId?: string;
    /**
     * Destination Port List
     */
    destinationPorts?: outputs.ServiceIpv6AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * ICMP6 Message
     */
    icmpMessages?: string[];
    /**
     * next header number
     *   - Range: `0`-`255`
     */
    nextHeader?: number;
    /**
     * Packet Length
     */
    packetLength?: string;
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix?: string;
    sourceDataPrefixListId?: string;
    /**
     * Source Port List
     */
    sourcePorts?: outputs.ServiceIpv6AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     *   - Choices: `syn`
     */
    tcpState?: string;
    /**
     * Select Traffic Class
     */
    trafficClasses?: number[];
}

export interface ServiceIpv6AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port?: string;
}

export interface ServiceIpv6AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port?: string;
}

export interface ServiceLanVpnFeatureAdvertiseOmpIpv4 {
    /**
     * IPv4 Prefix List
     */
    prefixes?: outputs.ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix[];
    /**
     * Protocol
     *   - Choices: `bgp`, `ospf`, `ospfv3`, `connected`, `static`, `network`, `aggregate`, `eigrp`, `lisp`, `isis`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceLanVpnFeatureAdvertiseOmpIpv4Prefix {
    /**
     * Aggregate Only
     *   - Default value: `false`
     */
    aggregateOnly?: boolean;
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * Applied to Region
     *   - Choices: `core-and-access`, `core`, `access`
     *   - Default value: `core-and-access`
     */
    region?: string;
    /**
     * Variable name
     */
    regionVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceLanVpnFeatureAdvertiseOmpIpv6 {
    /**
     * IPv6 Prefix List
     */
    prefixes?: outputs.ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix[];
    /**
     * Protocol
     *   - Choices: `BGP`, `OSPF`, `Connected`, `Static`, `Network`, `Aggregate`
     */
    protocol?: string;
    /**
     * Protocol Sub Type
     *   - Choices: `External`
     */
    protocolSubType?: string;
    /**
     * Variable name
     */
    protocolSubTypeVariable?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceLanVpnFeatureAdvertiseOmpIpv6Prefix {
    /**
     * Aggregate Only
     *   - Default value: `false`
     */
    aggregateOnly?: boolean;
    /**
     * IPv6 Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface ServiceLanVpnFeatureGreRoute {
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * Interface
     */
    interfaces?: string[];
    /**
     * IP Address
     */
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
    /**
     * Service
     */
    vpn?: number;
}

export interface ServiceLanVpnFeatureHostMapping {
    /**
     * Hostname
     */
    hostName?: string;
    /**
     * Variable name
     */
    hostNameVariable?: string;
    /**
     * List of IP
     */
    listOfIps?: string[];
    /**
     * Variable name
     */
    listOfIpsVariable?: string;
}

export interface ServiceLanVpnFeatureIpsecRoute {
    /**
     * Variable name
     */
    interfaceVariable?: string;
    /**
     * Interface
     */
    interfaces?: string[];
    /**
     * IP Address
     */
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceLanVpnFeatureIpv4ExportRouteTarget {
    /**
     * Route target
     */
    routeTarget?: string;
    /**
     * Variable name
     */
    routeTargetVariable?: string;
}

export interface ServiceLanVpnFeatureIpv4ImportRouteTarget {
    /**
     * Route target
     */
    routeTarget?: string;
    /**
     * Variable name
     */
    routeTargetVariable?: string;
}

export interface ServiceLanVpnFeatureIpv4StaticRoute {
    /**
     * IPv4 Route Gateway DHCP
     */
    gatewayDhcp?: boolean;
    /**
     * IP Address
     */
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * IPv4 Route Gateway Next Hop with Tracker
     */
    nextHopWithTrackers?: outputs.ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker[];
    /**
     * IPv4 Route Gateway Next Hop
     */
    nextHops?: outputs.ServiceLanVpnFeatureIpv4StaticRouteNextHop[];
    /**
     * IPv4 Route Gateway Next Hop
     */
    null0?: boolean;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
    /**
     * IPv4 Route Gateway VPN
     */
    vpn?: boolean;
}

export interface ServiceLanVpnFeatureIpv4StaticRouteNextHop {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
}

export interface ServiceLanVpnFeatureIpv4StaticRouteNextHopWithTracker {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
    trackerId?: string;
}

export interface ServiceLanVpnFeatureIpv6ExportRouteTarget {
    /**
     * Route target
     */
    routeTarget?: string;
    /**
     * Variable name
     */
    routeTargetVariable?: string;
}

export interface ServiceLanVpnFeatureIpv6ImportRouteTarget {
    /**
     * Route target
     */
    routeTarget?: string;
    /**
     * Variable name
     */
    routeTargetVariable?: string;
}

export interface ServiceLanVpnFeatureIpv6StaticRoute {
    /**
     * IPv6 Nat
     *   - Choices: `NAT64`, `NAT66`
     */
    nat?: string;
    /**
     * Variable name
     */
    natVariable?: string;
    /**
     * IPv6 Route Gateway Next Hop
     */
    nextHops?: outputs.ServiceLanVpnFeatureIpv6StaticRouteNextHop[];
    /**
     * IPv6 Route Gateway Next Hop
     */
    null0?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface ServiceLanVpnFeatureIpv6StaticRouteNextHop {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`254`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
}

export interface ServiceLanVpnFeatureNat64V4Pool {
    /**
     * NAT64 v4 Pool Name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * NAT64 Overload
     *   - Default value: `false`
     */
    overload?: boolean;
    /**
     * Variable name
     */
    overloadVariable?: string;
    /**
     * NAT64 Pool Range End
     */
    rangeEnd?: string;
    /**
     * Variable name
     */
    rangeEndVariable?: string;
    /**
     * NAT64 Pool Range Start
     */
    rangeStart?: string;
    /**
     * Variable name
     */
    rangeStartVariable?: string;
}

export interface ServiceLanVpnFeatureNatPool {
    /**
     * NAT Direction
     *   - Choices: `inside`, `outside`
     */
    direction?: string;
    /**
     * Variable name
     */
    directionVariable?: string;
    /**
     * NAT Pool Name
     *   - Range: `1`-`32`
     */
    natPoolName?: number;
    /**
     * Variable name
     */
    natPoolNameVariable?: string;
    /**
     * NAT Overload
     *   - Default value: `true`
     */
    overload?: boolean;
    /**
     * Variable name
     */
    overloadVariable?: string;
    /**
     * NAT Pool Prefix Length
     *   - Range: `1`-`32`
     */
    prefixLength?: number;
    /**
     * Variable name
     */
    prefixLengthVariable?: string;
    /**
     * NAT Pool Range End
     */
    rangeEnd?: string;
    /**
     * Variable name
     */
    rangeEndVariable?: string;
    /**
     * NAT Pool Range Start
     */
    rangeStart?: string;
    /**
     * Variable name
     */
    rangeStartVariable?: string;
    trackerObjectId?: string;
}

export interface ServiceLanVpnFeatureNatPortForward {
    /**
     * NAT Pool Name
     *   - Range: `1`-`32`
     */
    natPoolName?: number;
    /**
     * Variable name
     */
    natPoolNameVariable?: string;
    /**
     * Protocol
     *   - Choices: `TCP`, `UDP`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    /**
     * Source IP Address
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Source Port
     */
    sourcePort?: number;
    /**
     * Variable name
     */
    sourcePortVariable?: string;
    /**
     * Translate Port
     */
    translatePort?: number;
    /**
     * Variable name
     */
    translatePortVariable?: string;
    /**
     * Translated Source IP Address
     */
    translatedSourceIp?: string;
    /**
     * Variable name
     */
    translatedSourceIpVariable?: string;
}

export interface ServiceLanVpnFeatureRouteLeakFromGlobalVpn {
    /**
     * Redistribute Routes to specific Protocol on Service VPN
     */
    redistributions?: outputs.ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution[];
    routePolicyId?: string;
    /**
     * Leak Routes of particular protocol from Global to Service VPN
     *   - Choices: `static`, `connected`, `bgp`, `ospf`
     */
    routeProtocol?: string;
    /**
     * Variable name
     */
    routeProtocolVariable?: string;
}

export interface ServiceLanVpnFeatureRouteLeakFromGlobalVpnRedistribution {
    /**
     * Protocol to restributed leaked routes
     *   - Choices: `bgp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    redistributionPolicyId?: string;
}

export interface ServiceLanVpnFeatureRouteLeakFromOtherService {
    /**
     * Redistribute Route to specific Protocol on Current Service VPN
     */
    redistributions?: outputs.ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution[];
    routePolicyId?: string;
    /**
     * Leak Route of particular protocol from Source Service VPN
     *   - Choices: `static`, `connected`, `bgp`, `ospf`
     */
    routeProtocol?: string;
    /**
     * Variable name
     */
    routeProtocolVariable?: string;
    /**
     * Source Service VPN from where route are to be leaked
     *   - Range: `1`-`65530`
     */
    sourceVpn?: number;
    /**
     * Variable name
     */
    sourceVpnVariable?: string;
}

export interface ServiceLanVpnFeatureRouteLeakFromOtherServiceRedistribution {
    /**
     * Protocol to restributed leaked routes
     *   - Choices: `bgp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    redistributionPolicyId?: string;
}

export interface ServiceLanVpnFeatureRouteLeakToGlobalVpn {
    /**
     * Redistribute Routes to specific Protocol on Global VPN
     */
    redistributions?: outputs.ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution[];
    routePolicyId?: string;
    /**
     * Leak Routes of particular protocol from Service to Global VPN
     *   - Choices: `static`, `connected`, `bgp`, `ospf`
     */
    routeProtocol?: string;
    /**
     * Variable name
     */
    routeProtocolVariable?: string;
}

export interface ServiceLanVpnFeatureRouteLeakToGlobalVpnRedistribution {
    /**
     * Protocol to restributed leaked routes
     *   - Choices: `bgp`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    redistributionPolicyId?: string;
}

export interface ServiceLanVpnFeatureService {
    /**
     * IPv4 Addresses (Maximum: 4)
     */
    ipv4Addresses?: string[];
    /**
     * Variable name
     */
    ipv4AddressesVariable?: string;
    /**
     * Service Type
     *   - Choices: `FW`, `IDS`, `IDP`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `TE`, `appqoe`
     */
    serviceType?: string;
    /**
     * Variable name
     */
    serviceTypeVariable?: string;
    /**
     * Tracking
     *   - Default value: `true`
     */
    tracking?: boolean;
    /**
     * Variable name
     */
    trackingVariable?: string;
}

export interface ServiceLanVpnFeatureServiceRoute {
    /**
     * IP Address
     */
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * Service
     *   - Choices: `SIG`
     *   - Default value: `SIG`
     */
    service?: string;
    /**
     * Variable name
     */
    serviceVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
    /**
     * Service
     */
    vpn?: number;
}

export interface ServiceLanVpnFeatureStaticNat {
    /**
     * NAT Pool Name
     *   - Range: `1`-`32`
     */
    natPoolName?: number;
    /**
     * Variable name
     */
    natPoolNameVariable?: string;
    /**
     * Source IP Address
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Static NAT Direction
     *   - Choices: `inside`, `outside`
     */
    staticNatDirection?: string;
    /**
     * Variable name
     */
    staticNatDirectionVariable?: string;
    trackerObjectId?: string;
    /**
     * Translated Source IP Address
     */
    translatedSourceIp?: string;
    /**
     * Variable name
     */
    translatedSourceIpVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureArp {
    /**
     * IPV4 Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC Address
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp {
    /**
     * VRRP Ip Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * VRRP Secondary Ip Addresses
     */
    secondaryAddresses?: outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress[];
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `1000`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`4294967295`
     */
    tlocPrefChangeValue?: number;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Default value: `false`
     */
    tlocPrefixChange?: boolean;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Tracking object for VRRP configuration
     */
    trackingObjects?: outputs.ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject[];
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpSecondaryAddress {
    /**
     * Ip Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     *   - Range: `1`-`255`
     */
    decrementValue?: number;
    /**
     * Variable name
     */
    decrementValueVariable?: string;
    /**
     * Track Action
     *   - Choices: `Decrement`, `Shutdown`
     */
    trackerAction?: string;
    /**
     * Variable name
     */
    trackerActionVariable?: string;
    trackerId?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * DHCPv6 Helper VPN
     *   - Range: `1`-`65536`
     */
    dhcpv6HelperVpn?: number;
    /**
     * Variable name
     */
    dhcpv6HelperVpnVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp {
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * IPv6 VRRP
     */
    ipv6Addresses?: outputs.ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address[];
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `1000`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
}

export interface ServiceLanVpnInterfaceEthernetFeatureIpv6VrrpIpv6Address {
    /**
     * Assign Global IPv6 Prefix
     */
    globalAddress?: string;
    /**
     * Variable name
     */
    globalAddressVariable?: string;
    /**
     * Use link-local IPv6 Address
     */
    linkLocalAddress?: string;
    /**
     * Variable name
     */
    linkLocalAddressVariable?: string;
}

export interface ServiceLanVpnInterfaceEthernetFeatureStaticNat {
    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     *   - Default value: `inside`
     */
    direction?: string;
    /**
     * Source IP address to be translated
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Source VPN ID
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    sourceVpn?: number;
    /**
     * Variable name
     */
    sourceVpnVariable?: string;
    /**
     * Statically translated source IP address
     */
    translateIp?: string;
    /**
     * Variable name
     */
    translateIpVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureArp {
    /**
     * IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC address
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    ipv4SubnetMask?: string;
    /**
     * Variable name
     */
    ipv4SubnetMaskVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv4Vrrp {
    /**
     * Assign IPV4 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * Track Prefix List
     */
    prefixList?: string;
    /**
     * Variable name
     */
    prefixListVariable?: string;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * VRRP Secondary IPV4 address
     */
    secondaryAddresses?: outputs.ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress[];
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `1000`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * change TLOC preference
     *   - Default value: `false`
     */
    tlocPrefixChange?: boolean;
    /**
     * Set tloc preference change value
     *   - Range: `1`-`4294967295`
     */
    tlocPrefixChangeValue?: number;
    /**
     * Variable name
     */
    tlocPrefixChangeValueVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Variable name
     */
    trackOmpVariable?: string;
    /**
     * tracking object for VRRP configuration
     */
    trackingObjects?: outputs.ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject[];
}

export interface ServiceLanVpnInterfaceSviFeatureIpv4VrrpSecondaryAddress {
    /**
     * VRRP Secondary IPV4 address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     *   - Range: `1`-`255`
     */
    decrementValue?: number;
    /**
     * Variable name
     */
    decrementValueVariable?: string;
    /**
     * Track Action
     *   - Choices: `decrement`, `shutdown`
     */
    trackAction?: string;
    /**
     * Variable name
     */
    trackActionVariable?: string;
    trackerId?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * DHCPv6 Helper VPN
     *   - Range: `1`-`65536`
     */
    vpn?: number;
    /**
     * Variable name
     */
    vpnVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress {
    /**
     * IPv6 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv6Vrrp {
    /**
     * IPv6 VRRP
     */
    addresses?: outputs.ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress[];
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * IPv6 Secondary IP address
     */
    secondaryAddresses?: outputs.ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress[];
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `1000`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Variable name
     */
    trackOmpVariable?: string;
    /**
     * Track Prefix List
     */
    trackPrefixList?: string;
    /**
     * Variable name
     */
    trackPrefixListVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv6VrrpAddress {
    /**
     * Assign Global IPv6 Prefix
     */
    globalAddress?: string;
    /**
     * Variable name
     */
    globalAddressVariable?: string;
    /**
     * Use link-local IPv6 Address
     */
    linkLocalAddress?: string;
    /**
     * Variable name
     */
    linkLocalAddressVariable?: string;
}

export interface ServiceLanVpnInterfaceSviFeatureIpv6VrrpSecondaryAddress {
    /**
     * IPv6 Secondary IP address
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface ServiceMulticastFeatureAutoRpAnnounce {
    /**
     * Set RP Announce Interface Name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set RP Announce Scope
     *   - Range: `1`-`255`
     */
    scope?: number;
    /**
     * Variable name
     */
    scopeVariable?: string;
}

export interface ServiceMulticastFeatureAutoRpDiscovery {
    /**
     * Set RP Discovery Interface Name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set RP Discovery Scope
     *   - Range: `1`-`255`
     */
    scope?: number;
    /**
     * Variable name
     */
    scopeVariable?: string;
}

export interface ServiceMulticastFeatureIgmpInterface {
    /**
     * Set interface name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Configure static joins
     */
    joinGroups?: outputs.ServiceMulticastFeatureIgmpInterfaceJoinGroup[];
    /**
     * igmp Version <1..3>
     *   - Range: `1`-`3`
     *   - Default value: `2`
     */
    version?: number;
}

export interface ServiceMulticastFeatureIgmpInterfaceJoinGroup {
    /**
     * Set group address
     */
    groupAddress?: string;
    /**
     * Variable name
     */
    groupAddressVariable?: string;
    /**
     * Set source address
     */
    sourceAddress?: string;
    /**
     * Variable name
     */
    sourceAddressVariable?: string;
}

export interface ServiceMulticastFeatureMsdpGroup {
    /**
     * Set MSDP mesh group
     */
    meshGroupName?: string;
    /**
     * Variable name
     */
    meshGroupNameVariable?: string;
    /**
     * Configure peer
     */
    peers?: outputs.ServiceMulticastFeatureMsdpGroupPeer[];
}

export interface ServiceMulticastFeatureMsdpGroupPeer {
    /**
     * Set MSDP peer ip connect-source interface
     */
    connectionSourceInterface?: string;
    /**
     * Variable name
     */
    connectionSourceInterfaceVariable?: string;
    /**
     * Set MSDP default peer
     */
    defaultPeer?: boolean;
    /**
     * Set MSDP peer ip keepalive hold time
     *   - Range: `1`-`75`
     */
    keepaliveHoldTime?: number;
    /**
     * Variable name
     */
    keepaliveHoldTimeVariable?: string;
    /**
     * Set MSDP peer ip keepalive interval
     *   - Range: `1`-`60`
     */
    keepaliveInterval?: number;
    /**
     * Variable name
     */
    keepaliveIntervalVariable?: string;
    /**
     * Set MSDP peer ip password
     */
    peerAuthenticationPassword?: string;
    /**
     * Variable name
     */
    peerAuthenticationPasswordVariable?: string;
    /**
     * Set MSDP peer ip
     */
    peerIp?: string;
    /**
     * Variable name
     */
    peerIpVariable?: string;
    prefixListId?: string;
    /**
     * Set MSDP peer ip remote autonomous system number
     *   - Range: `1`-`65535`
     */
    remoteAs?: number;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Set MSDP peer ip SA limit message number
     *   - Range: `1`-`2147483646`
     */
    saLimit?: number;
    /**
     * Variable name
     */
    saLimitVariable?: string;
}

export interface ServiceMulticastFeaturePimBsrCandidate {
    /**
     * Set BSR RP candidate filter
     */
    acceptCandidateAccessList?: string;
    /**
     * Variable name
     */
    acceptCandidateAccessListVariable?: string;
    /**
     * Hash Mask length for RP selection
     *   - Range: `0`-`32`
     */
    hashMaskLength?: number;
    /**
     * Variable name
     */
    hashMaskLengthVariable?: string;
    /**
     * Set Autonomic-Networking virtual interface
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set RP candidate priority
     *   - Range: `0`-`255`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
}

export interface ServiceMulticastFeaturePimBsrRpCandidate {
    /**
     * Set IP Access List for PIM RP Candidate
     */
    accessListId?: string;
    /**
     * Variable name
     */
    accessListIdVariable?: string;
    /**
     * Set Autonomic-Networking virtual interface
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set RP candidate advertisement interval
     *   - Range: `1`-`16383`
     */
    interval?: number;
    /**
     * Variable name
     */
    intervalVariable?: string;
    /**
     * Set RP candidate priority
     *   - Range: `0`-`255`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
}

export interface ServiceMulticastFeaturePimInterface {
    /**
     * Set interface name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set interval at which PIM multicast traffic can join or be removed from RPT or SPT
     *   - Range: `10`-`600`
     *   - Default value: `60`
     */
    joinPruneInterval?: number;
    /**
     * Variable name
     */
    joinPruneIntervalVariable?: string;
    /**
     * Set PIM query interval
     *   - Range: `1`-`18725`
     *   - Default value: `30`
     */
    queryInterval?: number;
    /**
     * Variable name
     */
    queryIntervalVariable?: string;
}

export interface ServiceMulticastFeatureStaticRpAddress {
    /**
     * Set Static RP Access List
     */
    accessList?: string;
    /**
     * Variable name
     */
    accessListVariable?: string;
    /**
     * Set Static RP IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Set override flag
     *   - Default value: `false`
     */
    override?: boolean;
    /**
     * Variable name
     */
    overrideVariable?: string;
}

export interface ServiceObjectTrackerGroupFeatureTrackerElement {
    objectTrackerId?: string;
}

export interface ServiceRoutePolicyFeatureSequence {
    /**
     * Define list of actions
     */
    actions?: outputs.ServiceRoutePolicyFeatureSequenceAction[];
    /**
     * Base Action
     *   - Choices: `reject`, `accept`
     *   - Default value: `reject`
     */
    baseAction?: string;
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    id?: number;
    /**
     * Define match conditions
     */
    matchEntries?: outputs.ServiceRoutePolicyFeatureSequenceMatchEntry[];
    /**
     * Sequence Name
     */
    name?: string;
    /**
     * protocol such as IPV4, IPV6, or BOTH
     *   - Choices: `IPV4`, `IPV6`, `BOTH`
     *   - Default value: `IPV4`
     */
    protocol?: string;
}

export interface ServiceRoutePolicyFeatureSequenceAction {
    asPathPrepends?: number[];
    communities?: string[];
    /**
     * - Default value: `false`
     */
    communityAdditive?: boolean;
    /**
     * Variable name
     */
    communityVariable?: string;
    /**
     * Set Ipv4 Next Hop
     */
    ipv4NextHop?: string;
    /**
     * Set Ipv6 Next Hop
     */
    ipv6NextHop?: string;
    /**
     * Set Local Preference
     *   - Range: `0`-`4294967295`
     */
    localPreference?: number;
    /**
     * Set Metric
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Set Metric Type
     *   - Choices: `type1`, `type2`
     */
    metricType?: string;
    /**
     * Set OMP Tag
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Set Origin
     *   - Choices: `EGP`, `IGP`, `Incomplete`
     */
    origin?: string;
    /**
     * Set OSPF Tag
     *   - Range: `0`-`4294967295`
     */
    ospfTag?: number;
    /**
     * Set Weight
     *   - Range: `0`-`65535`
     */
    weight?: number;
}

export interface ServiceRoutePolicyFeatureSequenceMatchEntry {
    asPathListId?: string;
    /**
     * BGP Local Preference
     *   - Range: `0`-`4294967295`
     */
    bgpLocalPreference?: number;
    expandedCommunityListId?: string;
    extendedCommunityListId?: string;
    ipv4AddressPrefixListId?: string;
    ipv4NextHopPrefixListId?: string;
    ipv6AddressPrefixListId?: string;
    ipv6NextHopPrefixListId?: string;
    /**
     * Select Metric
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Select OMP Tag
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Select OSPF Tag
     *   - Range: `0`-`4294967295`
     */
    ospfTag?: number;
    /**
     * Select a condition such as OR, AND or EXACT
     *   - Choices: `OR`, `AND`, `EXACT`
     */
    standardCommunityListCriteria?: string;
    /**
     * Select a standard community list
     */
    standardCommunityLists?: outputs.ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList[];
}

export interface ServiceRoutePolicyFeatureSequenceMatchEntryStandardCommunityList {
    id?: string;
}

export interface ServiceRoutingBgpFeatureIpv4AggregateAddress {
    /**
     * Set AS set path information
     *   - Default value: `false`
     */
    asSetPath?: boolean;
    /**
     * Variable name
     */
    asSetPathVariable?: string;
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
    /**
     * Filter out more specific routes from updates
     *   - Default value: `false`
     */
    summaryOnly?: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv4Neighbor {
    /**
     * Set neighbor address
     */
    address?: string;
    /**
     * Set BGP address family
     */
    addressFamilies?: outputs.ServiceRoutingBgpFeatureIpv4NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * The number of accept as-path with my AS present in it
     *   - Range: `1`-`10`
     */
    allowasInNumber?: number;
    /**
     * Variable name
     */
    allowasInNumberVariable?: string;
    /**
     * Override matching AS-number while sending update
     *   - Default value: `false`
     */
    asOverride?: boolean;
    /**
     * Variable name
     */
    asOverrideVariable?: string;
    /**
     * Set description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Set TTL value for peers that are not directly connected
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    ebgpMultihop?: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable?: string;
    /**
     * Interval (seconds) not receiving a keepalive message declares a BGP peer down
     *   - Range: `0`-`65535`
     *   - Default value: `180`
     */
    holdTime?: number;
    /**
     * Variable name
     */
    holdTimeVariable?: string;
    /**
     * Interval (seconds) of keepalive messages sent to its BGP peer
     *   - Range: `0`-`65535`
     *   - Default value: `60`
     */
    keepaliveTime?: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable?: string;
    /**
     * Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs?: number;
    /**
     * Variable name
     */
    localAsVariable?: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     *   - Default value: `false`
     */
    nextHopSelf?: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable?: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs?: number;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Send community attribute
     *   - Default value: `true`
     */
    sendCommunity?: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable?: string;
    /**
     * Send extended community attribute
     *   - Default value: `true`
     */
    sendExtendedCommunity?: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable?: string;
    /**
     * Send label
     *   - Default value: `false`
     */
    sendLabel?: boolean;
    /**
     * Variable name
     */
    sendLabelVariable?: string;
    /**
     * Enable or disable a BGP neighbor
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface?: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv4NeighborAddressFamily {
    /**
     * Set IPv4 unicast address family
     */
    familyType?: string;
    inRoutePolicyId?: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     *   - Range: `1`-`4294967295`
     */
    maxNumberOfPrefixes?: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable?: string;
    outRoutePolicyId?: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType?: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     *   - Range: `1`-`65535`
     */
    restartInterval?: number;
    /**
     * Variable name
     */
    restartIntervalVariable?: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     *   - Range: `1`-`100`
     *   - Default value: `75`
     */
    threshold?: number;
    /**
     * Variable name
     */
    thresholdVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv4Network {
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv4Redistribute {
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `static`, `connected`, `omp`, `nat`, `ospf`, `ospfv3`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceRoutingBgpFeatureIpv6AggregateAddress {
    /**
     * Configure the IPv6 prefixes to aggregate
     */
    aggregatePrefix?: string;
    /**
     * Variable name
     */
    aggregatePrefixVariable?: string;
    /**
     * Set AS set path information
     *   - Default value: `false`
     */
    asSetPath?: boolean;
    /**
     * Variable name
     */
    asSetPathVariable?: string;
    /**
     * Filter out more specific routes from updates
     *   - Default value: `false`
     */
    summaryOnly?: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv6Neighbor {
    /**
     * Set IPv6 neighbor address
     */
    address?: string;
    /**
     * Set IPv6 BGP address family
     */
    addressFamilies?: outputs.ServiceRoutingBgpFeatureIpv6NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * The number of accept as-path with my AS present in it
     *   - Range: `1`-`10`
     */
    allowasInNumber?: number;
    /**
     * Variable name
     */
    allowasInNumberVariable?: string;
    /**
     * Override matching AS-number while sending update
     *   - Default value: `false`
     */
    asOverride?: boolean;
    /**
     * Variable name
     */
    asOverrideVariable?: string;
    /**
     * Set description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Set TTL value for peers that are not directly connected
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    ebgpMultihop?: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable?: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     *   - Range: `0`-`65535`
     *   - Default value: `180`
     */
    holdTime?: number;
    /**
     * Variable name
     */
    holdTimeVariable?: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     *   - Range: `0`-`65535`
     *   - Default value: `60`
     */
    keepaliveTime?: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable?: string;
    /**
     * Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs?: number;
    /**
     * Variable name
     */
    localAsVariable?: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     *   - Default value: `false`
     */
    nextHopSelf?: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable?: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs?: number;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Send community attribute
     *   - Default value: `true`
     */
    sendCommunity?: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable?: string;
    /**
     * Send extended community attribute
     *   - Default value: `true`
     */
    sendExtendedCommunity?: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable?: string;
    /**
     * Enable or disable a BGP neighbor
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface?: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv6NeighborAddressFamily {
    /**
     * Set IPv6 unicast address family
     */
    familyType?: string;
    inRoutePolicyId?: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     *   - Range: `1`-`4294967295`
     */
    maxNumberOfPrefixes?: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable?: string;
    outRoutePolicyId?: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType?: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     *   - Range: `1`-`65535`
     */
    restartInterval?: number;
    /**
     * Variable name
     */
    restartIntervalVariable?: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     *   - Range: `1`-`100`
     *   - Default value: `75`
     */
    threshold?: number;
    /**
     * Variable name
     */
    thresholdVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv6Network {
    /**
     * Configure the prefixes for BGP to announce
     */
    networkPrefix?: string;
    /**
     * Variable name
     */
    networkPrefixVariable?: string;
}

export interface ServiceRoutingBgpFeatureIpv6Redistribute {
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `static`, `connected`, `ospf`, `omp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceRoutingEigrpFeatureInterface {
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Enable/disable EIGRP
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Set summary addresses
     */
    summaryAddresses?: outputs.ServiceRoutingEigrpFeatureInterfaceSummaryAddress[];
}

export interface ServiceRoutingEigrpFeatureInterfaceSummaryAddress {
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    mask?: string;
    /**
     * Variable name
     */
    maskVariable?: string;
}

export interface ServiceRoutingEigrpFeatureMd5Key {
    /**
     * Set MD5 key ID
     *   - Range: `1`-`255`
     */
    keyId?: number;
    /**
     * Variable name
     */
    keyIdVariable?: string;
    /**
     * Set MD5 key
     */
    keyString?: string;
    /**
     * Variable name
     */
    keyStringVariable?: string;
}

export interface ServiceRoutingEigrpFeatureNetwork {
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    mask?: string;
    /**
     * Variable name
     */
    maskVariable?: string;
}

export interface ServiceRoutingEigrpFeatureRedistribute {
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `bgp`, `connected`, `nat-route`, `omp`, `ospf`, `ospfv3`, `static`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceRoutingOspfFeatureArea {
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * set the area type
     *   - Choices: `stub`, `nssa`
     */
    areaType?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.ServiceRoutingOspfFeatureAreaInterface[];
    /**
     * Do not inject interarea routes into STUB or NSSA
     *   - Default value: `false`
     */
    noSummary?: boolean;
    /**
     * Variable name
     */
    noSummaryVariable?: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.ServiceRoutingOspfFeatureAreaRange[];
}

export interface ServiceRoutingOspfFeatureAreaInterface {
    /**
     * Set OSPF interface authentication type
     *   - Choices: `message-digest`
     */
    authenticationType?: string;
    /**
     * Variable name
     */
    authenticationTypeVariable?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set router’s priority to be elected as designated router
     *   - Range: `0`-`255`
     *   - Default value: `1`
     */
    designatedRouterPriority?: number;
    /**
     * Variable name
     */
    designatedRouterPriorityVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    lsaRetransmitInterval?: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable?: string;
    /**
     * Set MD5 authentication key
     */
    messageDigestKey?: string;
    /**
     * Set MD5 message digest key
     *   - Range: `1`-`255`
     */
    messageDigestKeyId?: number;
    /**
     * Variable name
     */
    messageDigestKeyIdVariable?: string;
    /**
     * Variable name
     */
    messageDigestKeyVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     *   - Default value: `broadcast`
     */
    networkType?: string;
    /**
     * Variable name
     */
    networkTypeVariable?: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
}

export interface ServiceRoutingOspfFeatureAreaRange {
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceRoutingOspfFeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     *   - Default value: `true`
     */
    natDia?: boolean;
    /**
     * Variable name
     */
    natDiaVariable?: string;
    /**
     * Set the protocol
     *   - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceRoutingOspfFeatureRouterLsa {
    /**
     * Set how long to advertise maximum metric after router starts up
     *   - Range: `5`-`86400`
     */
    time?: number;
    /**
     * Variable name
     */
    timeVariable?: string;
    /**
     * Set the router LSA advertisement type
     *   - Choices: `administrative`, `on-startup`
     */
    type?: string;
}

export interface ServiceRoutingOspfv3Ipv4FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate?: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable?: string;
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * stub area type
     *   - Choices: `stub`
     */
    areaType?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.ServiceRoutingOspfv3Ipv4FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary?: boolean;
    /**
     * Variable name
     */
    noSummaryVariable?: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.ServiceRoutingOspfv3Ipv4FeatureAreaRange[];
}

export interface ServiceRoutingOspfv3Ipv4FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey?: string;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     *   - Range: `256`-`4294967295`
     */
    authenticationSpi?: number;
    /**
     * Variable name
     */
    authenticationSpiVariable?: string;
    /**
     * No Authentication by default
     *   - Choices: `no-auth`
     */
    authenticationType?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    lsaRetransmitInterval?: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     */
    networkType?: string;
    /**
     * Variable name
     */
    networkTypeVariable?: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
}

export interface ServiceRoutingOspfv3Ipv4FeatureAreaRange {
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface ServiceRoutingOspfv3Ipv4FeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     *   - Default value: `true`
     */
    natDia?: boolean;
    /**
     * Variable name
     */
    natDiaVariable?: string;
    /**
     * Set the protocol
     *   - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceRoutingOspfv3Ipv6FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate?: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable?: string;
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * stub area type
     *   - Choices: `stub`
     */
    areaType?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.ServiceRoutingOspfv3Ipv6FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary?: boolean;
    /**
     * Variable name
     */
    noSummaryVariable?: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.ServiceRoutingOspfv3Ipv6FeatureAreaRange[];
}

export interface ServiceRoutingOspfv3Ipv6FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey?: string;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     *   - Range: `256`-`4294967295`
     */
    authenticationSpi?: number;
    /**
     * Variable name
     */
    authenticationSpiVariable?: string;
    /**
     * No Authentication by default
     *   - Choices: `no-auth`
     */
    authenticationType?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    lsaRetransmitInterval?: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     */
    networkType?: string;
    /**
     * Variable name
     */
    networkTypeVariable?: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
}

export interface ServiceRoutingOspfv3Ipv6FeatureAreaRange {
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * IPv6 prefix,for example 2001::/64
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface ServiceRoutingOspfv3Ipv6FeatureRedistribute {
    /**
     * Set the protocol
     *   - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface ServiceSwitchportFeatureInterface {
    /**
     * Set uni or bi directional authorization mode
     *   - Choices: `both`, `in`
     */
    controlDirection?: string;
    /**
     * Variable name
     */
    controlDirectionVariable?: string;
    /**
     * Set Critical VLAN
     *   - Range: `1`-`4094`
     */
    criticalVlan?: number;
    /**
     * Variable name
     */
    criticalVlanVariable?: string;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`
     */
    duplex?: string;
    /**
     * Variable name
     */
    duplexVariable?: string;
    /**
     * Enable Periodic Reauthentication
     */
    enablePeriodicReauth?: boolean;
    /**
     * Variable name
     */
    enablePeriodicReauthVariable?: string;
    /**
     * Enable Critical Voice VLAN
     */
    enableVoice?: boolean;
    /**
     * Variable name
     */
    enableVoiceVariable?: string;
    /**
     * Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
     *   - Range: `1`-`4094`
     */
    guestVlan?: number;
    /**
     * Variable name
     */
    guestVlanVariable?: string;
    /**
     * Set host mode
     *   - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
     */
    hostMode?: string;
    /**
     * Variable name
     */
    hostModeVariable?: string;
    /**
     * Periodic Reauthentication Inactivity Timeout (in seconds)
     *   - Range: `1`-`65535`
     */
    inactivity?: number;
    /**
     * Variable name
     */
    inactivityVariable?: string;
    /**
     * Set Interface name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * MAC Authentication Bypass
     */
    macAuthenticationBypass?: boolean;
    /**
     * Variable name
     */
    macAuthenticationBypassVariable?: string;
    /**
     * Set type of switch port: access/trunk
     *   - Choices: `access`, `trunk`
     */
    mode?: string;
    /**
     * Set 802.1x Interface Pae Type
     */
    paeEnable?: boolean;
    /**
     * Variable name
     */
    paeEnableVariable?: string;
    /**
     * Set Port-Control Mode
     *   - Choices: `auto`, `force-unauthorized`, `force-authorized`
     */
    portControl?: string;
    /**
     * Variable name
     */
    portControlVariable?: string;
    /**
     * Periodic Reauthentication Interval (in seconds)
     *   - Range: `1`-`1073741823`
     *   - Default value: `3600`
     */
    reauthentication?: number;
    /**
     * Variable name
     */
    reauthenticationVariable?: string;
    /**
     * Set Restricted VLAN ID
     *   - Range: `1`-`4094`
     */
    restrictedVlan?: number;
    /**
     * Variable name
     */
    restrictedVlanVariable?: string;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    speed?: string;
    /**
     * Variable name
     */
    speedVariable?: string;
    /**
     * Set VLAN identifier associated with bridging domain
     *   - Range: `1`-`4094`
     */
    switchportAccessVlan?: number;
    /**
     * Variable name
     */
    switchportAccessVlanVariable?: string;
    /**
     * Configure VLAN IDs used with the trunk
     */
    switchportTrunkAllowedVlans?: string;
    /**
     * Variable name
     */
    switchportTrunkAllowedVlansVariable?: string;
    /**
     * Configure VLAN ID used for native VLAN
     *   - Range: `1`-`4094`
     */
    switchportTrunkNativeVlan?: number;
    /**
     * Variable name
     */
    switchportTrunkNativeVlanVariable?: string;
    /**
     * Configure Voice Vlan
     *   - Range: `1`-`4094`
     */
    voiceVlan?: number;
    /**
     * Variable name
     */
    voiceVlanVariable?: string;
}

export interface ServiceSwitchportFeatureStaticMacAddress {
    /**
     * Interface name: GigabitEthernet0/<>/<>
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * Set MAC address in xxxx.xxxx.xxxx format
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
    /**
     * Configure VLAN ID used with the mac and interface
     *   - Range: `1`-`4094`
     */
    vlanId?: number;
    /**
     * Variable name
     */
    vlanIdVariable?: string;
}

export interface ServiceTrackerGroupFeatureTrackerElement {
    trackerId?: string;
}

export interface ServiceWirelessLanFeatureSsid {
    /**
     * Set admin state
     *   - Default value: `true`
     */
    adminState?: boolean;
    /**
     * Variable name
     */
    adminStateVariable?: string;
    /**
     * Enable broadcast SSID
     *   - Default value: `true`
     */
    broadcastSsid?: boolean;
    /**
     * Variable name
     */
    broadcastSsidVariable?: string;
    /**
     * Set passphrase, Attribute conditional on `securityType` being equal to `personal`
     */
    passphrase?: string;
    /**
     * Variable name, Attribute conditional on `securityType` being equal to `personal`
     */
    passphraseVariable?: string;
    /**
     * Select QoS profile
     *   - Choices: `platinum`, `gold`, `silver`, `bronze`
     *   - Default value: `silver`
     */
    qosProfile?: string;
    /**
     * Variable name
     */
    qosProfileVariable?: string;
    /**
     * Select radio type
     *   - Choices: `24ghz`, `5ghz`, `all`
     *   - Default value: `all`
     */
    radioType?: string;
    /**
     * Variable name
     */
    radioTypeVariable?: string;
    /**
     * Set RADIUS server IP, Attribute conditional on `securityType` being equal to `enterprise`
     */
    radiusServerIp?: string;
    /**
     * Variable name, Attribute conditional on `securityType` being equal to `enterprise`
     */
    radiusServerIpVariable?: string;
    /**
     * Set RADIUS server authentication port, Attribute conditional on `securityType` being equal to `enterprise`
     *   - Range: `1`-`65535`
     *   - Default value: `1812`
     */
    radiusServerPort?: number;
    /**
     * Variable name, Attribute conditional on `securityType` being equal to `enterprise`
     */
    radiusServerPortVariable?: string;
    /**
     * Set RADIUS server shared secret, Attribute conditional on `securityType` being equal to `enterprise`
     */
    radiusServerSecret?: string;
    /**
     * Variable name, Attribute conditional on `securityType` being equal to `enterprise`
     */
    radiusServerSecretVariable?: string;
    /**
     * Select security type
     *   - Choices: `enterprise`, `personal`, `open`
     */
    securityType?: string;
    /**
     * Configure wlan SSID
     */
    ssidName?: string;
    /**
     * Set VLAN ID
     *   - Range: `1`-`4094`
     */
    vlanId?: number;
    /**
     * Variable name
     */
    vlanIdVariable?: string;
}

export interface SiteListPolicyObjectEntry {
    /**
     * Site ID or range of Site IDs e.g., `100` or `200-300`
     */
    siteId: string;
}

export interface StandardCommunityListPolicyObjectEntry {
    /**
     * Standard community value, e.g. `100:1000`, `internet`, `local-AS`, `no-advertise` or `no-export`
     */
    community: string;
}

export interface SwitchportFeatureTemplateInterface {
    /**
     * Variable name
     */
    dot1xAuthenticationOrderVariable?: string;
    /**
     * Specify authentication methods in the order of preference
     */
    dot1xAuthenticationOrders?: string[];
    /**
     * Set uni or bi directional authorization mode
     *   - Choices: `both`, `in`
     *   - Default value: `both`
     */
    dot1xControlDirection?: string;
    /**
     * Variable name
     */
    dot1xControlDirectionVariable?: string;
    /**
     * Set Critical VLAN
     *   - Range: `1`-`4094`
     */
    dot1xCriticalVlan?: number;
    /**
     * Variable name
     */
    dot1xCriticalVlanVariable?: string;
    /**
     * Set 802.1x on off
     *   - Default value: `true`
     */
    dot1xEnable?: boolean;
    /**
     * Enable Critical Voice VLAN
     *   - Default value: `false`
     */
    dot1xEnableCriticialVoiceVlan?: boolean;
    /**
     * Variable name
     */
    dot1xEnableCriticialVoiceVlanVariable?: string;
    /**
     * Enable Periodic Reauthentication
     *   - Default value: `false`
     */
    dot1xEnablePeriodicReauth?: boolean;
    /**
     * Variable name
     */
    dot1xEnablePeriodicReauthVariable?: string;
    /**
     * Variable name
     */
    dot1xEnableVariable?: string;
    /**
     * Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
     *   - Range: `1`-`4094`
     */
    dot1xGuestVlan?: number;
    /**
     * Variable name
     */
    dot1xGuestVlanVariable?: string;
    /**
     * Set host mode
     *   - Choices: `single-host`, `multi-auth`, `multi-host`, `multi-domain`
     *   - Default value: `single-host`
     */
    dot1xHostMode?: string;
    /**
     * Variable name
     */
    dot1xHostModeVariable?: string;
    /**
     * MAC Authentication Bypass
     *   - Default value: `false`
     */
    dot1xMacAuthenticationBypass?: boolean;
    /**
     * Variable name
     */
    dot1xMacAuthenticationBypassVariable?: string;
    /**
     * Set 802.1x Interface Pae Type
     *   - Default value: `true`
     */
    dot1xPaeEnable?: boolean;
    /**
     * Variable name
     */
    dot1xPaeEnableVariable?: string;
    /**
     * Periodic Reauthentication Inactivity Timeout (in seconds)
     *   - Range: `1`-`1440`
     *   - Default value: `60`
     */
    dot1xPeriodicReauthInactivityTimeout?: number;
    /**
     * Variable name
     */
    dot1xPeriodicReauthInactivityTimeoutVariable?: string;
    /**
     * Periodic Reauthentication Interval (in seconds)
     *   - Range: `0`-`1440`
     *   - Default value: `0`
     */
    dot1xPeriodicReauthInterval?: number;
    /**
     * Variable name
     */
    dot1xPeriodicReauthIntervalVariable?: string;
    /**
     * Set Port-Control Mode
     *   - Choices: `auto`, `force-unauthorized`, `force-authorized`
     *   - Default value: `auto`
     */
    dot1xPortControl?: string;
    /**
     * Variable name
     */
    dot1xPortControlVariable?: string;
    /**
     * Set Restricted VLAN ID
     *   - Range: `1`-`4094`
     */
    dot1xRestrictedVlan?: number;
    /**
     * Variable name
     */
    dot1xRestrictedVlanVariable?: string;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`
     */
    duplex?: string;
    /**
     * Variable name
     */
    duplexVariable?: string;
    /**
     * Set Interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    speed?: string;
    /**
     * Variable name
     */
    speedVariable?: string;
    /**
     * Set VLAN identifier associated with bridging domain
     *   - Range: `1`-`4094`
     */
    switchportAccessVlan?: number;
    /**
     * Variable name
     */
    switchportAccessVlanVariable?: string;
    /**
     * Set type of switch port: access/trunk
     *   - Choices: `access`, `trunk`
     */
    switchportMode?: string;
    /**
     * Configure VLAN IDs used with the trunk
     */
    switchportTrunkAllowedVlans?: string;
    /**
     * Variable name
     */
    switchportTrunkAllowedVlansVariable?: string;
    /**
     * Configure VLAN ID used for native VLAN
     *   - Range: `1`-`4094`
     */
    switchportTrunkNativeVlan?: number;
    /**
     * Variable name
     */
    switchportTrunkNativeVlanVariable?: string;
    /**
     * Configure Voice Vlan
     *   - Range: `1`-`4094`
     */
    voiceVlan?: number;
    /**
     * Variable name
     */
    voiceVlanVariable?: string;
}

export interface SwitchportFeatureTemplateStaticMacAddress {
    /**
     * Interface name: GigabitEthernet0/<>/<>
     */
    ifName?: string;
    /**
     * Variable name
     */
    ifNameVariable?: string;
    /**
     * Set MAC address in xxxx.xxxx.xxxx format
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Configure VLAN ID used with the mac and interface
     *   - Range: `1`-`4094`
     */
    vlan?: number;
    /**
     * Variable name
     */
    vlanVariable?: string;
}

export interface SystemAaaFeatureAccountingRule {
    /**
     * Use Server-group
     */
    groups?: string[];
    /**
     * Privilege level when method is commands
     *   - Choices: `1`, `15`
     */
    level?: string;
    /**
     * Configure Accounting Method
     *   - Choices: `commands`, `exec`, `network`, `system`
     */
    method?: string;
    /**
     * Configure Accounting Rule ID
     */
    ruleId?: string;
    /**
     * Record start and stop without waiting
     *   - Default value: `true`
     */
    startStop?: boolean;
    /**
     * Variable name
     */
    startStopVariable?: string;
}

export interface SystemAaaFeatureAuthorizationRule {
    /**
     * Use Server-group
     */
    groups?: string[];
    /**
     * Succeed if user has authenticated
     *   - Default value: `false`
     */
    ifAuthenticated?: boolean;
    /**
     * Privilege level when method is commands
     *   - Choices: `1`, `15`
     */
    level?: string;
    /**
     * Method
     *   - Choices: `commands`
     */
    method?: string;
    /**
     * Configure Authorization Rule ID
     */
    ruleId?: string;
}

export interface SystemAaaFeatureRadiusGroup {
    /**
     * Set Radius server Group Name
     */
    groupName?: string;
    /**
     * Configure the Radius server
     */
    servers?: outputs.SystemAaaFeatureRadiusGroupServer[];
    /**
     * Set interface to use to reach Radius server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which Radius server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpn?: number;
}

export interface SystemAaaFeatureRadiusGroupServer {
    /**
     * Set Accounting port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1813`
     */
    acctPort?: number;
    /**
     * Variable name
     */
    acctPortVariable?: string;
    /**
     * Set IP address of Radius server
     */
    address?: string;
    /**
     * Set Authentication port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1812`
     */
    authPort?: number;
    /**
     * Variable name
     */
    authPortVariable?: string;
    /**
     * Set the Radius server shared key
     */
    key?: string;
    /**
     * Type of encyption. To be used for type 6
     *   - Choices: `6`, `7`
     */
    keyEnum?: string;
    /**
     * key type
     *   - Choices: `key`, `pac`
     *   - Default value: `key`
     */
    keyType?: string;
    /**
     * Variable name
     */
    keyTypeVariable?: string;
    /**
     * Configure how many times to contact this Radius server
     *   - Range: `1`-`100`
     *   - Default value: `3`
     */
    retransmit?: number;
    /**
     * Variable name
     */
    retransmitVariable?: string;
    /**
     * Set the Radius server shared type 7 encrypted key
     */
    secretKey?: string;
    /**
     * Variable name
     */
    secretKeyVariable?: string;
    /**
     * Configure how long to wait for replies from the Radius server
     *   - Range: `1`-`1000`
     *   - Default value: `5`
     */
    timeout?: number;
    /**
     * Variable name
     */
    timeoutVariable?: string;
}

export interface SystemAaaFeatureTacacsGroup {
    /**
     * Set TACACS server Group Name
     */
    groupName?: string;
    /**
     * Configure the TACACS server
     */
    servers?: outputs.SystemAaaFeatureTacacsGroupServer[];
    /**
     * Set interface to use to reach TACACS server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which TACACS server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpn?: number;
}

export interface SystemAaaFeatureTacacsGroupServer {
    /**
     * Set IP address of TACACS server
     */
    address?: string;
    /**
     * Set the TACACS server shared key
     */
    key?: string;
    /**
     * Type of encyption. To be used for type 6
     *   - Choices: `6`, `7`
     */
    keyEnum?: string;
    /**
     * TACACS Port
     *   - Range: `1`-`65535`
     *   - Default value: `49`
     */
    port?: number;
    /**
     * Variable name
     */
    portVariable?: string;
    /**
     * Set the TACACS server shared type 7 encrypted key
     */
    secretKey?: string;
    /**
     * Variable name
     */
    secretKeyVariable?: string;
    /**
     * Configure how long to wait for replies from the TACACS server
     *   - Range: `1`-`1000`
     *   - Default value: `5`
     */
    timeout?: number;
    /**
     * Variable name
     */
    timeoutVariable?: string;
}

export interface SystemAaaFeatureUser {
    /**
     * Set the username
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the user password
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set Privilege Level for this user
     *   - Choices: `1`, `15`
     *   - Default value: `15`
     */
    privilege?: string;
    /**
     * Variable name
     */
    privilegeVariable?: string;
    /**
     * List of RSA public-keys per user
     */
    publicKeys?: outputs.SystemAaaFeatureUserPublicKey[];
}

export interface SystemAaaFeatureUserPublicKey {
    /**
     * Set the RSA key string
     */
    keyString?: string;
    /**
     * Only RSA is supported
     */
    keyType?: string;
    /**
     * Variable name
     */
    keyTypeVariable?: string;
}

export interface SystemBasicFeatureAffinityPerVrf {
    /**
     * Affinity Group Number
     *   - Range: `1`-`63`
     */
    affinityGroupNumber?: number;
    /**
     * Variable name
     */
    affinityGroupNumberVariable?: string;
    /**
     * Range of VRFs
     */
    vrfRange?: string;
    /**
     * Variable name
     */
    vrfRangeVariable?: string;
}

export interface SystemBasicFeatureGpsSmsMobileNumber {
    /**
     * Mobile number, ex: 1231234414
     */
    number?: string;
    /**
     * Variable name
     */
    numberVariable?: string;
}

export interface SystemBfdFeatureColor {
    /**
     * Color that identifies the WAN transport tunnel
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     */
    color?: string;
    /**
     * Variable name
     */
    colorVariable?: string;
    /**
     * BFD Default DSCP value for tloc color
     *   - Range: `0`-`63`
     *   - Default value: `48`
     */
    dscp?: number;
    /**
     * Variable name
     */
    dscpVariable?: string;
    /**
     * Hello Interval (milliseconds)
     *   - Range: `100`-`300000`
     *   - Default value: `1000`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Multiplier
     *   - Range: `1`-`60`
     *   - Default value: `7`
     */
    multiplier?: number;
    /**
     * Variable name
     */
    multiplierVariable?: string;
    /**
     * Path MTU Discovery
     *   - Default value: `true`
     */
    pmtuDiscovery?: boolean;
    /**
     * Variable name
     */
    pmtuDiscoveryVariable?: string;
}

export interface SystemIpv4DeviceAccessFeatureSequence {
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     */
    baseAction?: string;
    destinationDataPrefixListId?: string;
    /**
     * Variable name
     */
    destinationIpPrefixListVariable?: string;
    /**
     * Destination Data IP Prefix List
     */
    destinationIpPrefixLists?: string[];
    /**
     * device access protocol
     */
    deviceAccessPort?: number;
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    id?: number;
    /**
     * Sequence Name
     */
    name?: string;
    sourceDataPrefixListId?: string;
    /**
     * Variable name
     */
    sourceIpPrefixListVariable?: string;
    /**
     * Source Data IP Prefix List
     */
    sourceIpPrefixLists?: string[];
    /**
     * Source Port List
     */
    sourcePorts?: number[];
}

export interface SystemIpv6DeviceAccessFeatureSequence {
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     *   - Default value: `accept`
     */
    baseAction?: string;
    destinationDataPrefixListId?: string;
    /**
     * Variable name
     */
    destinationIpPrefixListVariable?: string;
    /**
     * Destination Data IP Prefix List
     */
    destinationIpPrefixLists?: string[];
    /**
     * device access protocol
     */
    deviceAccessPort?: number;
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    id?: number;
    /**
     * Sequence Name
     */
    name?: string;
    sourceDataPrefixListId?: string;
    /**
     * Variable name
     */
    sourceIpPrefixListVariable?: string;
    /**
     * Source Data IP Prefix List
     */
    sourceIpPrefixLists?: string[];
    /**
     * Source Port List
     */
    sourcePorts?: number[];
}

export interface SystemLoggingFeatureIpv4Server {
    /**
     * Set hostname or IPv4 address of server
     */
    hostnameIp?: string;
    /**
     * Variable name
     */
    hostnameIpVariable?: string;
    /**
     * Set logging level for messages logged to server
     *   - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `informational`
     */
    priority?: string;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Enable TLS Profile
     *   - Default value: `false`
     */
    tlsEnable?: boolean;
    /**
     * Variable name
     */
    tlsEnableVariable?: string;
    /**
     * Define custom profile
     *   - Default value: `false`
     */
    tlsPropertiesCustomProfile?: boolean;
    /**
     * Variable name
     */
    tlsPropertiesCustomProfileVariable?: string;
    /**
     * Configure a TLS profile
     */
    tlsPropertiesProfile?: string;
    /**
     * Variable name
     */
    tlsPropertiesProfileVariable?: string;
    /**
     * Set hostname or IPv4 address of server
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpn?: number;
    /**
     * Variable name
     */
    vpnVariable?: string;
}

export interface SystemLoggingFeatureIpv6Server {
    /**
     * Set IPv6 hostname or IPv6 address of server
     */
    hostnameIp?: string;
    /**
     * Variable name
     */
    hostnameIpVariable?: string;
    /**
     * Set logging level for messages logged to server
     *   - Choices: `informational`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `informational`
     */
    priority?: string;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Set interface to use to reach syslog server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Enable TLS Profile
     *   - Default value: `false`
     */
    tlsEnable?: boolean;
    /**
     * Variable name
     */
    tlsEnableVariable?: string;
    /**
     * Define custom profile
     *   - Default value: `false`
     */
    tlsPropertiesCustomProfile?: boolean;
    /**
     * Variable name
     */
    tlsPropertiesCustomProfileVariable?: string;
    /**
     * Configure a TLS profile
     */
    tlsPropertiesProfile?: string;
    /**
     * Variable name
     */
    tlsPropertiesProfileVariable?: string;
    /**
     * Set hostname or IPv4 address of server
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpn?: number;
    /**
     * Variable name
     */
    vpnVariable?: string;
}

export interface SystemLoggingFeatureTlsProfile {
    /**
     * Syslog secure server ciphersuites
     */
    cipherSuites?: string[];
    /**
     * Variable name
     */
    cipherSuitesVariable?: string;
    /**
     * Specify the name of the TLS profile
     */
    profile?: string;
    /**
     * Variable name
     */
    profileVariable?: string;
    /**
     * TLS Version
     *   - Choices: `TLSv1.1`, `TLSv1.2`
     *   - Default value: `TLSv1.1`
     */
    tlsVersion?: string;
    /**
     * Variable name
     */
    tlsVersionVariable?: string;
}

export interface SystemNtpFeatureAuthenticationKey {
    /**
     * MD5 authentication key ID
     *   - Range: `1`-`65535`
     */
    keyId?: number;
    /**
     * Variable name
     */
    keyIdVariable?: string;
    /**
     * Enter cleartext or AES-encrypted MD5 authentication key
     */
    md5Value?: string;
    /**
     * Variable name
     */
    md5ValueVariable?: string;
}

export interface SystemNtpFeatureServer {
    /**
     * Set authentication key for the server
     *   - Range: `1`-`65535`
     */
    authenticationKey?: number;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set hostname or IP address of server
     */
    hostnameIpAddress?: string;
    /**
     * Variable name
     */
    hostnameIpAddressVariable?: string;
    /**
     * Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     */
    ntpVersion?: number;
    /**
     * Variable name
     */
    ntpVersionVariable?: string;
    /**
     * Prefer this NTP server
     *   - Default value: `false`
     */
    preferThisNtpServer?: boolean;
    /**
     * Variable name
     */
    preferThisNtpServerVariable?: string;
    /**
     * Set interface to use to reach NTP server
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    vpn?: number;
    /**
     * Variable name
     */
    vpnVariable?: string;
}

export interface SystemSecurityFeatureKey {
    /**
     * Configure Accept AO Mismatch
     *   - Default value: `false`
     */
    acceptAoMismatch?: boolean;
    /**
     * Variable name
     */
    acceptAoMismatchVariable?: string;
    /**
     * Send lifetime Duration (seconds)
     *   - Range: `1`-`2147483646`
     */
    acceptLifeTimeDuration?: number;
    /**
     * Variable name
     */
    acceptLifeTimeDurationVariable?: string;
    /**
     * Configure Key lifetime end time
     */
    acceptLifeTimeExact?: number;
    /**
     * Infinite lifetime
     */
    acceptLifeTimeInfinite?: boolean;
    /**
     * Variable name
     */
    acceptLifeTimeInfiniteVariable?: string;
    /**
     * Configure Send lifetime Local
     *   - Default value: `false`
     */
    acceptLifeTimeLocal?: boolean;
    /**
     * Variable name
     */
    acceptLifeTimeLocalVariable?: string;
    /**
     * Configure Key lifetime start time
     */
    acceptLifeTimeStartEpoch?: number;
    /**
     * Crypto Algorithm
     *   - Choices: `aes-128-cmac`, `hmac-sha-1`, `hmac-sha-256`
     */
    cryptoAlgorithm?: string;
    /**
     * Select the Key ID
     */
    id?: number;
    /**
     * Configure Include TCP Options
     *   - Default value: `false`
     */
    includeTcpOptions?: boolean;
    /**
     * Variable name
     */
    includeTcpOptionsVariable?: string;
    /**
     * Specify the Key String
     */
    keyString?: string;
    /**
     * Variable name
     */
    keyStringVariable?: string;
    /**
     * Select the chain name
     */
    name?: string;
    /**
     * Specify the Receiver ID
     *   - Range: `0`-`255`
     */
    receiverId?: number;
    /**
     * Variable name
     */
    receiverIdVariable?: string;
    /**
     * Specify the Send ID
     *   - Range: `0`-`255`
     */
    sendId?: number;
    /**
     * Variable name
     */
    sendIdVariable?: string;
    /**
     * Send lifetime Duration (seconds)
     *   - Range: `1`-`2147483646`
     */
    sendLifeTimeDuration?: number;
    /**
     * Variable name
     */
    sendLifeTimeDurationVariable?: string;
    /**
     * Configure Key lifetime end time
     */
    sendLifeTimeExact?: number;
    /**
     * Infinite lifetime
     */
    sendLifeTimeInfinite?: boolean;
    /**
     * Variable name
     */
    sendLifeTimeInfiniteVariable?: string;
    /**
     * Configure Send lifetime Local
     *   - Default value: `false`
     */
    sendLifeTimeLocal?: boolean;
    /**
     * Variable name
     */
    sendLifeTimeLocalVariable?: string;
    /**
     * Configure Key lifetime start time
     */
    sendLifeTimeStartEpoch?: number;
}

export interface SystemSecurityFeatureKeychain {
    /**
     * Specify the name of the Keychain
     */
    keyChainName?: string;
    /**
     * Specify the Key ID
     *   - Range: `0`-`2147483647`
     */
    keyId?: number;
}

export interface SystemSnmpFeatureCommunity {
    /**
     * Configure access permissions
     *   - Choices: `read-only`, `read-write`
     */
    authorization?: string;
    /**
     * Variable name
     */
    authorizationVariable?: string;
    /**
     * Set name of the SNMP community
     */
    name?: string;
    /**
     * Set user label of the SNMP community
     */
    userLabel?: string;
    /**
     * Set name of the SNMP view
     */
    view?: string;
    /**
     * Variable name
     */
    viewVariable?: string;
}

export interface SystemSnmpFeatureGroup {
    /**
     * Name of the SNMP group
     */
    name?: string;
    /**
     * Configure security level
     *   - Choices: `no-auth-no-priv`, `auth-no-priv`, `auth-priv`
     */
    securityLevel?: string;
    /**
     * Name of the SNMP view
     */
    view?: string;
    /**
     * Variable name
     */
    viewVariable?: string;
}

export interface SystemSnmpFeatureTrapTargetServer {
    /**
     * Set IPv4/IPv6 address of SNMP server
     */
    ip?: string;
    /**
     * Variable name
     */
    ipVariable?: string;
    /**
     * Set UDP port number to connect to SNMP server
     *   - Range: `1`-`65535`
     */
    port?: number;
    /**
     * Variable name
     */
    portVariable?: string;
    /**
     * Source interface for outgoing SNMP traps
     */
    sourceInterface?: string;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: string;
    /**
     * Set name of the SNMP user
     */
    user?: string;
    /**
     * Set user label of the SNMP community
     */
    userLabel?: string;
    /**
     * Variable name
     */
    userVariable?: string;
    /**
     * Set VPN in which SNMP server is located
     *   - Range: `0`-`65530`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface SystemSnmpFeatureUser {
    /**
     * Specify authentication protocol password
     */
    authenticationPassword?: string;
    /**
     * Variable name
     */
    authenticationPasswordVariable?: string;
    /**
     * Configure authentication protocol
     *   - Choices: `sha`
     */
    authenticationProtocol?: string;
    /**
     * Variable name
     */
    authenticationProtocolVariable?: string;
    /**
     * Name of the SNMP group
     */
    group?: string;
    /**
     * Variable name
     */
    groupVariable?: string;
    /**
     * Name of the SNMP user
     */
    name?: string;
    /**
     * Specify privacy protocol password
     */
    privacyPassword?: string;
    /**
     * Variable name
     */
    privacyPasswordVariable?: string;
    /**
     * Configure privacy protocol
     *   - Choices: `aes-cfb-128`, `aes-256-cfb-128`
     */
    privacyProtocol?: string;
    /**
     * Variable name
     */
    privacyProtocolVariable?: string;
}

export interface SystemSnmpFeatureView {
    /**
     * Set the name of the SNMP view
     */
    name?: string;
    /**
     * Configure SNMP object identifier
     */
    oids?: outputs.SystemSnmpFeatureViewOid[];
}

export interface SystemSnmpFeatureViewOid {
    /**
     * Exclude the OID
     *   - Default value: `false`
     */
    exclude?: boolean;
    /**
     * Variable name
     */
    excludeVariable?: string;
    /**
     * Configure identifier of subtree of MIB objects
     */
    id?: string;
    /**
     * Variable name
     */
    idVariable?: string;
}

export interface TlocListPolicyObjectEntry {
    /**
     * Color
     *   - Choices: `default`, `3g`, `biz-internet`, `blue`, `bronze`, `custom1`, `custom2`, `custom3`, `gold`, `green`, `lte`, `metro-ethernet`, `mpls`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`, `public-internet`, `red`, `silver`
     */
    color: string;
    /**
     * Encapsulation
     *   - Choices: `ipsec`, `gre`
     */
    encapsulation: string;
    /**
     * Preference
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * TLOC IP
     */
    tlocIp: string;
}

export interface TlsSslDecryptionPolicyDefinitionNetworkRule {
    /**
     * Rule base action
     *   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
     */
    baseAction?: string;
    /**
     * Rule ID
     */
    ruleId?: number;
    /**
     * Rule name
     */
    ruleName?: string;
    /**
     * Rule type
     */
    ruleType?: string;
    /**
     * List of network source / destination configuration
     */
    sourceAndDestinationConfigurations?: outputs.TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration[];
}

export interface TlsSslDecryptionPolicyDefinitionNetworkRuleSourceAndDestinationConfiguration {
    /**
     * source / destination option
     *   - Choices: `sourceIp`, `sourcePort`, `destinationVpn`, `destinationIp`, `destinationPort`
     */
    option?: string;
    /**
     * source / destination option target
     */
    value?: string;
}

export interface TlsSslDecryptionPolicyDefinitionUrlRule {
    /**
     * Country
     */
    ruleName?: string;
    /**
     * List of VPN IDs
     */
    targetVpns?: string[];
    /**
     * TLS SSL Profile Policy ID
     */
    tlsSslProfilePolicyId?: string;
    /**
     * TLS SSL Profile Policy version
     */
    tlsSslProfileVersion?: number;
}

export interface TrafficDataPolicyDefinitionSequence {
    /**
     * List of action entries
     */
    actionEntries?: outputs.TrafficDataPolicyDefinitionSequenceActionEntry[];
    /**
     * Base action, either `accept` or `drop`
     *   - Choices: `accept`, `drop`
     */
    baseAction?: string;
    /**
     * Sequence ID
     */
    id: number;
    /**
     * Sequence IP type, either `ipv4`, `ipv6` or `all`
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    ipType?: string;
    /**
     * List of match entries
     */
    matchEntries?: outputs.TrafficDataPolicyDefinitionSequenceMatchEntry[];
    /**
     * Sequence name
     */
    name: string;
    /**
     * Sequence type
     *   - Choices: `applicationFirewall`, `qos`, `serviceChaining`, `trafficEngineering`, `data`
     */
    type: string;
}

export interface TrafficDataPolicyDefinitionSequenceActionEntry {
    /**
     * Enable cflowd, Attribute conditional on `type` being equal to `cflowd`
     */
    cflowd?: boolean;
    /**
     * Counter name, Attribute conditional on `type` being equal to `count`
     */
    counter?: string;
    /**
     * Enable DRE optimization, Attribute conditional on `type` being equal to `dreOptimization`
     */
    dreOptimization?: boolean;
    /**
     * Enable fallback to routing, Attribute conditional on `type` being equal to `fallbackToRouting`
     */
    fallbackToRouting?: boolean;
    /**
     * Enable logging, Attribute conditional on `type` being equal to `log`
     */
    log?: boolean;
    /**
     * Loss correction, Attribute conditional on `type` being equal to `lossProtect`
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     */
    lossCorrection?: string;
    /**
     * Loss correction FEC, Attribute conditional on `type` being equal to `lossProtectFec`
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     */
    lossCorrectionFec?: string;
    /**
     * Loss correction FEC threshold, Attribute conditional on `type` being equal to `lossProtectFec`
     */
    lossCorrectionFecThreshold?: string;
    /**
     * Loss correction packet duplication, Attribute conditional on `type` being equal to `lossProtectPktDup`
     *   - Choices: `fecAdaptive`, `fecAlways`, `packetDuplication`
     */
    lossCorrectionPacketDuplication?: string;
    /**
     * List of NAT parameters, Attribute conditional on `type` being equal to `nat`
     */
    natParameters?: outputs.TrafficDataPolicyDefinitionSequenceActionEntryNatParameter[];
    /**
     * NAT pool, Attribute conditional on `type` being equal to `nat`
     *   - Choices: `pool`
     */
    natPool?: string;
    /**
     * NAT pool ID, Attribute conditional on `type` being equal to `nat`
     *   - Range: `1`-`31`
     */
    natPoolId?: number;
    /**
     * Redirect DNS, Attribute conditional on `type` being equal to `redirectDns`
     *   - Choices: `dnsType`, `ipAddress`
     */
    redirectDns?: string;
    /**
     * Redirect DNS IP address, Attribute conditional on `redirectDns` being equal to `ipAddress`
     */
    redirectDnsAddress?: string;
    /**
     * Redirect DNS type, Attribute conditional on `redirectDns` being equal to `dnsType`
     *   - Choices: `host`, `umbrella`
     */
    redirectDnsType?: string;
    /**
     * Enable secure internet gateway, Attribute conditional on `type` being equal to `sig`
     */
    secureInternetGateway?: boolean;
    /**
     * Service node group, Attribute conditional on `type` being equal to `serviceNodeGroup`
     */
    serviceNodeGroup?: string;
    /**
     * List of set parameters, Attribute conditional on `type` being equal to `set`
     */
    setParameters?: outputs.TrafficDataPolicyDefinitionSequenceActionEntrySetParameter[];
    /**
     * Enable TCP optimization, Attribute conditional on `type` being equal to `tcpOptimization`
     */
    tcpOptimization?: boolean;
    /**
     * Type of action entry
     *   - Choices: `cflowd`, `count`, `dreOptimization`, `fallbackToRouting`, `log`, `lossProtect`, `lossProtectPktDup`, `lossProtectFec`, `nat`, `redirectDns`, `serviceNodeGroup`, `set`, `sig`, `tcpOptimization`
     */
    type: string;
}

export interface TrafficDataPolicyDefinitionSequenceActionEntryNatParameter {
    /**
     * Fallback, Attribute conditional on `type` being equal to `fallback`
     */
    fallback?: boolean;
    /**
     * Type of NAT parameter
     *   - Choices: `useVpn`, `fallback`
     */
    type: string;
    /**
     * DSCP, Attribute conditional on `type` being equal to `useVpn`
     */
    vpnId?: number;
}

export interface TrafficDataPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * DSCP, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     */
    dscp?: number;
    /**
     * Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
     */
    forwardingClass?: string;
    /**
     * Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
     */
    localTlocListColor?: string;
    /**
     * Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     */
    localTlocListEncap?: string;
    /**
     * Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
     */
    localTlocListRestrict?: boolean;
    /**
     * Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     */
    nextHop?: string;
    /**
     * Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
     */
    nextHopLoose?: boolean;
    /**
     * Policer list ID, Attribute conditional on `type` being equal to `policer`
     */
    policerListId?: string;
    /**
     * Policer list version
     */
    policerListVersion?: number;
    /**
     * Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     */
    preferredColorGroupList?: string;
    /**
     * Preferred color group list version
     */
    preferredColorGroupListVersion?: number;
    /**
     * Service TLOC color, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocColor?: string;
    /**
     * Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     */
    serviceTlocEncapsulation?: string;
    /**
     * Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocIp?: string;
    /**
     * Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocListId?: string;
    /**
     * Service TLOC list version
     */
    serviceTlocListVersion?: number;
    /**
     * Service TLOC Local, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocLocal?: boolean;
    /**
     * Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
     */
    serviceTlocRestrict?: boolean;
    /**
     * Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     */
    serviceType?: string;
    /**
     * Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     */
    serviceVpnId?: number;
    /**
     * TLOC color, Attribute conditional on `type` being equal to `tloc`
     */
    tlocColor?: string;
    /**
     * TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     */
    tlocEncapsulation?: string;
    /**
     * TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     */
    tlocIp?: string;
    /**
     * TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     */
    tlocListId?: string;
    /**
     * TLOC list version
     */
    tlocListVersion?: number;
    /**
     * Type of set parameter
     *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
     */
    type: string;
    /**
     * DSCP, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65530`
     */
    vpnId?: number;
}

export interface TrafficDataPolicyDefinitionSequenceMatchEntry {
    /**
     * Application list ID, Attribute conditional on `type` being equal to `appList`
     */
    applicationListId?: string;
    /**
     * Application list version
     */
    applicationListVersion?: number;
    /**
     * Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     */
    destinationDataPrefixListId?: string;
    /**
     * Destination Data Prefix list version
     */
    destinationDataPrefixListVersion?: number;
    /**
     * Destination IP, Attribute conditional on `type` being equal to `destinationIp`
     */
    destinationIp?: string;
    /**
     * Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
     */
    destinationPort?: string;
    /**
     * Destination region, Attribute conditional on `type` being equal to `destinationRegion`
     *   - Choices: `primary-region`, `secondary-region`, `other-region`
     */
    destinationRegion?: string;
    /**
     * DNS request or response, Attribute conditional on `type` being equal to `dns`
     *   - Choices: `request`, `response`
     */
    dns?: string;
    /**
     * DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
     */
    dnsApplicationListId?: string;
    /**
     * DNS Application list version
     */
    dnsApplicationListVersion?: number;
    /**
     * DSCP value, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     */
    dscp?: number;
    /**
     * ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     */
    icmpMessage?: string;
    /**
     * Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     */
    packetLength?: number;
    /**
     * PLP, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `low`, `high`
     */
    plp?: string;
    /**
     * IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
     */
    protocol?: string;
    /**
     * Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     */
    sourceDataPrefixListId?: string;
    /**
     * Source Data Prefix list version
     */
    sourceDataPrefixListVersion?: number;
    /**
     * Source IP, Attribute conditional on `type` being equal to `sourceIp`
     */
    sourceIp?: string;
    /**
     * Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
     */
    sourcePort?: string;
    /**
     * TCP flags, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     */
    tcp?: string;
    /**
     * Traffic to, Attribute conditional on `type` being equal to `trafficTo`
     *   - Choices: `access`, `core`, `service`
     */
    trafficTo?: string;
    /**
     * Type of match entry
     *   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
     */
    type: string;
}

export interface TransportIpv4AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions?: outputs.TransportIpv4AclFeatureSequenceAction[];
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     *   - Default value: `accept`
     */
    baseAction?: string;
    /**
     * Define match conditions
     */
    matchEntries?: outputs.TransportIpv4AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    sequenceId?: number;
    /**
     * Sequence Name
     */
    sequenceName?: string;
}

export interface TransportIpv4AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    acceptLog?: boolean;
    acceptMirrorListId?: string;
    acceptPolicerId?: string;
    /**
     * DSCP number
     *   - Range: `0`-`63`
     */
    acceptSetDscp?: number;
    /**
     * Set Next Hop (IPV4 address)
     */
    acceptSetNextHop?: string;
    /**
     * Counter Name
     */
    dropCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    dropLog?: boolean;
}

export interface TransportIpv4AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix?: string;
    destinationDataPrefixListId?: string;
    /**
     * Variable name
     */
    destinationDataPrefixVariable?: string;
    /**
     * Destination Port List
     */
    destinationPorts?: outputs.TransportIpv4AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * DSCP number
     */
    dscps?: number[];
    /**
     * ICMP Message
     */
    icmpMessages?: string[];
    /**
     * Packet Length
     */
    packetLength?: string;
    /**
     * protocol number list with at least one item
     */
    protocols?: number[];
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix?: string;
    sourceDataPrefixListId?: string;
    /**
     * Variable name
     */
    sourceDataPrefixVariable?: string;
    /**
     * Source Port List
     */
    sourcePorts?: outputs.TransportIpv4AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     *   - Choices: `syn`
     */
    tcpState?: string;
}

export interface TransportIpv4AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port?: string;
}

export interface TransportIpv4AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port?: string;
}

export interface TransportIpv6AclFeatureSequence {
    /**
     * Define list of actions
     */
    actions?: outputs.TransportIpv6AclFeatureSequenceAction[];
    /**
     * Base Action
     *   - Choices: `drop`, `accept`
     *   - Default value: `accept`
     */
    baseAction?: string;
    /**
     * Define match conditions
     */
    matchEntries?: outputs.TransportIpv6AclFeatureSequenceMatchEntry[];
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    sequenceId?: number;
    /**
     * Sequence Name
     */
    sequenceName?: string;
}

export interface TransportIpv6AclFeatureSequenceAction {
    /**
     * Counter Name
     */
    acceptCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    acceptLog?: boolean;
    acceptMirrorListId?: string;
    acceptPolicerId?: string;
    /**
     * Set Next Hop (IPV6 address)
     */
    acceptSetNextHop?: string;
    /**
     * set traffic class number
     *   - Range: `0`-`63`
     */
    acceptTrafficClass?: number;
    /**
     * Counter Name
     */
    dropCounterName?: string;
    /**
     * Enable Log
     *   - Default value: `false`
     */
    dropLog?: boolean;
}

export interface TransportIpv6AclFeatureSequenceMatchEntry {
    /**
     * Destination Data IP Prefix
     */
    destinationDataPrefix?: string;
    destinationDataPrefixListId?: string;
    /**
     * Destination Port List
     */
    destinationPorts?: outputs.TransportIpv6AclFeatureSequenceMatchEntryDestinationPort[];
    /**
     * ICMP6 Message
     */
    icmpMessages?: string[];
    /**
     * next header number
     *   - Range: `0`-`255`
     */
    nextHeader?: number;
    /**
     * Packet Length
     */
    packetLength?: string;
    /**
     * Source Data IP Prefix
     */
    sourceDataPrefix?: string;
    sourceDataPrefixListId?: string;
    /**
     * Source Port List
     */
    sourcePorts?: outputs.TransportIpv6AclFeatureSequenceMatchEntrySourcePort[];
    /**
     * TCP States
     *   - Choices: `syn`
     */
    tcpState?: string;
    /**
     * Select Traffic Class
     */
    trafficClasses?: number[];
}

export interface TransportIpv6AclFeatureSequenceMatchEntryDestinationPort {
    /**
     * destination port range or individual port number
     */
    port?: string;
}

export interface TransportIpv6AclFeatureSequenceMatchEntrySourcePort {
    /**
     * source port range or individual port number
     */
    port?: string;
}

export interface TransportIpv6TrackerGroupFeatureTrackerElement {
    trackerId?: string;
}

export interface TransportManagementVpnFeatureIpv4StaticRoute {
    /**
     * Administrative distance, Attribute conditional on `gateway` being equal to `null0`
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    administrativeDistance?: number;
    /**
     * Variable name, Attribute conditional on `gateway` being equal to `null0`
     */
    administrativeDistanceVariable?: string;
    /**
     * Gateway
     *   - Choices: `nextHop`, `dhcp`, `null0`
     *   - Default value: `nextHop`
     */
    gateway?: string;
    /**
     * IP Address
     */
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
     */
    nextHops?: outputs.TransportManagementVpnFeatureIpv4StaticRouteNextHop[];
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportManagementVpnFeatureIpv4StaticRouteNextHop {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
}

export interface TransportManagementVpnFeatureIpv6StaticRoute {
    /**
     * Gateway
     *   - Choices: `nextHop`, `null0`, `nat`
     */
    gateway?: string;
    /**
     * IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
     *   - Choices: `NAT64`, `NAT66`
     */
    nat?: string;
    /**
     * Variable name, Attribute conditional on `gateway` being equal to `nat`
     */
    natVariable?: string;
    /**
     * IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
     */
    nextHops?: outputs.TransportManagementVpnFeatureIpv6StaticRouteNextHop[];
    /**
     * IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
     */
    null0?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface TransportManagementVpnFeatureIpv6StaticRouteNextHop {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`254`
     *   - Default value: `1`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
}

export interface TransportManagementVpnFeatureNewHostMapping {
    /**
     * Hostname
     */
    hostName?: string;
    /**
     * Variable name
     */
    hostNameVariable?: string;
    /**
     * List of IP
     */
    listOfIpAddresses?: string[];
    /**
     * Variable name
     */
    listOfIpAddressesVariable?: string;
}

export interface TransportManagementVpnInterfaceEthernetFeatureArpEntry {
    /**
     * IPV4 Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC Address
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
}

export interface TransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportRoutePolicyFeatureSequence {
    /**
     * Define list of actions
     */
    actions?: outputs.TransportRoutePolicyFeatureSequenceAction[];
    /**
     * Base Action
     *   - Choices: `reject`, `accept`
     *   - Default value: `reject`
     */
    baseAction?: string;
    /**
     * Sequence Id
     *   - Range: `1`-`65536`
     */
    id?: number;
    /**
     * Define match conditions
     */
    matchEntries?: outputs.TransportRoutePolicyFeatureSequenceMatchEntry[];
    /**
     * Sequence Name
     */
    name?: string;
    /**
     * protocol such as IPV4, IPV6, or BOTH
     *   - Choices: `IPV4`, `IPV6`, `BOTH`
     *   - Default value: `IPV4`
     */
    protocol?: string;
}

export interface TransportRoutePolicyFeatureSequenceAction {
    asPathPrepends?: number[];
    communities?: string[];
    /**
     * - Default value: `false`
     */
    communityAdditive?: boolean;
    /**
     * Variable name
     */
    communityVariable?: string;
    /**
     * Set Ipv4 Next Hop
     */
    ipv4NextHop?: string;
    /**
     * Set Ipv6 Next Hop
     */
    ipv6NextHop?: string;
    /**
     * Set Local Preference
     *   - Range: `0`-`4294967295`
     */
    localPreference?: number;
    /**
     * Set Metric
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Set Metric Type
     *   - Choices: `type1`, `type2`
     */
    metricType?: string;
    /**
     * Set OMP Tag
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Set Origin
     *   - Choices: `EGP`, `IGP`, `Incomplete`
     */
    origin?: string;
    /**
     * Set OSPF Tag
     *   - Range: `0`-`4294967295`
     */
    ospfTag?: number;
    /**
     * Set Weight
     *   - Range: `0`-`65535`
     */
    weight?: number;
}

export interface TransportRoutePolicyFeatureSequenceMatchEntry {
    asPathListId?: string;
    /**
     * BGP Local Preference
     *   - Range: `0`-`4294967295`
     */
    bgpLocalPreference?: number;
    expandedCommunityListId?: string;
    extendedCommunityListId?: string;
    ipv4AddressPrefixListId?: string;
    ipv4NextHopPrefixListId?: string;
    ipv6AddressPrefixListId?: string;
    ipv6NextHopPrefixListId?: string;
    /**
     * Select Metric
     *   - Range: `0`-`4294967295`
     */
    metric?: number;
    /**
     * Select OMP Tag
     *   - Range: `0`-`4294967295`
     */
    ompTag?: number;
    /**
     * Select OSPF Tag
     *   - Range: `0`-`4294967295`
     */
    ospfTag?: number;
    /**
     * Select a condition such as OR, AND or EXACT
     *   - Choices: `OR`, `AND`, `EXACT`
     */
    standardCommunityListCriteria?: string;
    /**
     * Select a standard community list
     */
    standardCommunityLists?: outputs.TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList[];
}

export interface TransportRoutePolicyFeatureSequenceMatchEntryStandardCommunityList {
    id?: string;
}

export interface TransportRoutingBgpFeatureIpv4AggregateAddress {
    /**
     * Set AS set path information
     *   - Default value: `false`
     */
    asSetPath?: boolean;
    /**
     * Variable name
     */
    asSetPathVariable?: string;
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
    /**
     * Filter out more specific routes from updates
     *   - Default value: `false`
     */
    summaryOnly?: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv4Neighbor {
    /**
     * Set neighbor address
     */
    address?: string;
    /**
     * Set BGP address family
     */
    addressFamilies?: outputs.TransportRoutingBgpFeatureIpv4NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * The number of accept as-path with my AS present in it
     *   - Range: `1`-`10`
     */
    allowasInNumber?: number;
    /**
     * Variable name
     */
    allowasInNumberVariable?: string;
    /**
     * Override matching AS-number while sending update
     *   - Default value: `false`
     */
    asOverride?: boolean;
    /**
     * Variable name
     */
    asOverrideVariable?: string;
    /**
     * Set description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Set TTL value for peers that are not directly connected
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    ebgpMultihop?: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable?: string;
    /**
     * Send explicit null label
     *   - Default value: `false`
     */
    explicitNull?: boolean;
    /**
     * Variable name
     */
    explicitNullVariable?: string;
    /**
     * Set how long to wait since receiving a keepalive message to consider BGP peer unavailable
     *   - Range: `0`-`65535`
     *   - Default value: `180`
     */
    holdTime?: number;
    /**
     * Variable name
     */
    holdTimeVariable?: string;
    /**
     * Set how often to advertise keepalive messages to BGP peer
     *   - Range: `0`-`65535`
     *   - Default value: `60`
     */
    keepaliveTime?: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable?: string;
    /**
     * Set local autonomous number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs?: number;
    /**
     * Variable name
     */
    localAsVariable?: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     *   - Default value: `false`
     */
    nextHopSelf?: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable?: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs?: number;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Send community attribute
     *   - Default value: `true`
     */
    sendCommunity?: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable?: string;
    /**
     * Send extended community attribute
     *   - Default value: `true`
     */
    sendExtendedCommunity?: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable?: string;
    /**
     * Send label
     *   - Default value: `false`
     */
    sendLabel?: boolean;
    /**
     * Enable or disable a BGP neighbor
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface?: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv4NeighborAddressFamily {
    /**
     * Set IPv4 unicast address family
     *   - Choices: `ipv4-unicast`, `vpnv4-unicast`, `vpnv6-unicast`
     */
    familyType?: string;
    inRoutePolicyId?: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     *   - Range: `1`-`4294967295`
     */
    maxNumberOfPrefixes?: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable?: string;
    outRoutePolicyId?: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType?: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     *   - Range: `1`-`65535`
     */
    restartInterval?: number;
    /**
     * Variable name
     */
    restartIntervalVariable?: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     *   - Range: `1`-`100`
     *   - Default value: `75`
     */
    threshold?: number;
    /**
     * Variable name
     */
    thresholdVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv4Network {
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv4Redistribute {
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `static`, `connected`, `ospf`, `ospfv3`, `nat`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface TransportRoutingBgpFeatureIpv6AggregateAddress {
    /**
     * Configure the IPv6 prefixes to aggregate
     */
    aggregatePrefix?: string;
    /**
     * Variable name
     */
    aggregatePrefixVariable?: string;
    /**
     * Set AS set path information
     *   - Default value: `false`
     */
    asSetPath?: boolean;
    /**
     * Variable name
     */
    asSetPathVariable?: string;
    /**
     * Filter out more specific routes from updates
     *   - Default value: `false`
     */
    summaryOnly?: boolean;
    /**
     * Variable name
     */
    summaryOnlyVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv6Neighbor {
    /**
     * Set IPv6 neighbor address
     */
    address?: string;
    /**
     * Set IPv6 BGP address family
     */
    addressFamilies?: outputs.TransportRoutingBgpFeatureIpv6NeighborAddressFamily[];
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * The number of accept as-path with my AS present in it
     *   - Range: `1`-`10`
     */
    allowasInNumber?: number;
    /**
     * Variable name
     */
    allowasInNumberVariable?: string;
    /**
     * Override matching AS-number while sending update
     *   - Default value: `false`
     */
    asOverride?: boolean;
    /**
     * Variable name
     */
    asOverrideVariable?: string;
    /**
     * Set description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Set TTL value for peers that are not directly connected
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    ebgpMultihop?: number;
    /**
     * Variable name
     */
    ebgpMultihopVariable?: string;
    /**
     * Interval (seconds) not receiving a keepalive message declares a BGP peer down
     *   - Range: `0`-`65535`
     *   - Default value: `180`
     */
    holdTime?: number;
    /**
     * Variable name
     */
    holdTimeVariable?: string;
    /**
     * Interval (seconds) of keepalive messages sent to its BGP peer
     *   - Range: `0`-`65535`
     *   - Default value: `60`
     */
    keepaliveTime?: number;
    /**
     * Variable name
     */
    keepaliveTimeVariable?: string;
    /**
     * Set local autonomous system number,Local-AS cannot have the local BGP protocol AS number or the AS number of the remote peer.The local-as is valid only if the peer is a true eBGP peer. It does not work for two peers in different sub-ASs in a confederation.
     */
    localAs?: number;
    /**
     * Variable name
     */
    localAsVariable?: string;
    /**
     * Set router to be next hop for routes advertised to neighbor
     *   - Default value: `false`
     */
    nextHopSelf?: boolean;
    /**
     * Variable name
     */
    nextHopSelfVariable?: string;
    /**
     * Set MD5 password on TCP connection with BGP peer
     */
    password?: string;
    /**
     * Variable name
     */
    passwordVariable?: string;
    /**
     * Set remote autonomous system number
     */
    remoteAs?: number;
    /**
     * Variable name
     */
    remoteAsVariable?: string;
    /**
     * Send community attribute
     *   - Default value: `true`
     */
    sendCommunity?: boolean;
    /**
     * Variable name
     */
    sendCommunityVariable?: string;
    /**
     * Send extended community attribute
     *   - Default value: `true`
     */
    sendExtendedCommunity?: boolean;
    /**
     * Variable name
     */
    sendExtendedCommunityVariable?: string;
    /**
     * Enable or disable a BGP neighbor
     *   - Default value: `false`
     */
    shutdown?: boolean;
    /**
     * Variable name
     */
    shutdownVariable?: string;
    /**
     * Source interface name for BGP neighbor
     */
    updateSourceInterface?: string;
    /**
     * Variable name
     */
    updateSourceInterfaceVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv6NeighborAddressFamily {
    /**
     * Set IPv6 unicast address family
     *   - Choices: `ipv6-unicast`, `vpnv6-unicast`
     */
    familyType?: string;
    inRoutePolicyId?: string;
    /**
     * Set maximum number of prefixes accepted from BGP peer
     *   - Range: `1`-`4294967295`
     */
    maxNumberOfPrefixes?: number;
    /**
     * Variable name
     */
    maxNumberOfPrefixesVariable?: string;
    outRoutePolicyId?: string;
    /**
     * Neighbor received maximum prefix policy is disabled.
     */
    policyType?: string;
    /**
     * Set the restart interval(minutes) when to restart BGP connection if threshold is exceeded
     *   - Range: `1`-`65535`
     */
    restartInterval?: number;
    /**
     * Variable name
     */
    restartIntervalVariable?: string;
    /**
     * Set threshold(1 to 100) at which to generate a warning message
     *   - Range: `1`-`100`
     *   - Default value: `75`
     */
    threshold?: number;
    /**
     * Variable name
     */
    thresholdVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv6Network {
    /**
     * Configure the prefixes for BGP to announce
     */
    networkPrefix?: string;
    /**
     * Variable name
     */
    networkPrefixVariable?: string;
}

export interface TransportRoutingBgpFeatureIpv6Redistribute {
    /**
     * Set the protocol to redistribute routes from
     *   - Choices: `static`, `connected`, `ospf`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface TransportRoutingBgpFeatureMplsInterface {
    /**
     * Interface Name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
}

export interface TransportRoutingOspfFeatureArea {
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * set the area type
     *   - Choices: `stub`, `nssa`
     */
    areaType?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.TransportRoutingOspfFeatureAreaInterface[];
    /**
     * Do not inject interarea routes into STUB or NSSA
     *   - Default value: `false`
     */
    noSummary?: boolean;
    /**
     * Variable name
     */
    noSummaryVariable?: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.TransportRoutingOspfFeatureAreaRange[];
}

export interface TransportRoutingOspfFeatureAreaInterface {
    /**
     * Set OSPF interface authentication type
     *   - Choices: `message-digest`
     */
    authenticationType?: string;
    /**
     * Variable name
     */
    authenticationTypeVariable?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set router’s priority to be elected as designated router
     *   - Range: `0`-`255`
     *   - Default value: `1`
     */
    designatedRouterPriority?: number;
    /**
     * Variable name
     */
    designatedRouterPriorityVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    lsaRetransmitInterval?: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable?: string;
    /**
     * Set MD5 authentication key
     */
    messageDigestKey?: string;
    /**
     * Set MD5 message digest key
     *   - Range: `1`-`255`
     */
    messageDigestKeyId?: number;
    /**
     * Variable name
     */
    messageDigestKeyIdVariable?: string;
    /**
     * Variable name
     */
    messageDigestKeyVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     *   - Default value: `broadcast`
     */
    networkType?: string;
    /**
     * Variable name
     */
    networkTypeVariable?: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
}

export interface TransportRoutingOspfFeatureAreaRange {
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportRoutingOspfFeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     *   - Default value: `true`
     */
    natDia?: boolean;
    /**
     * Variable name
     */
    natDiaVariable?: string;
    /**
     * Set the protocol
     *   - Choices: `static`, `connected`, `bgp`, `omp`, `nat`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface TransportRoutingOspfFeatureRouterLsa {
    /**
     * Set how long to advertise maximum metric after router starts up
     *   - Range: `5`-`86400`
     */
    time?: number;
    /**
     * Variable name
     */
    timeVariable?: string;
    /**
     * Set the router LSA advertisement type
     *   - Choices: `administrative`, `on-startup`
     */
    type?: string;
}

export interface TransportRoutingOspfv3Ipv4FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate?: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable?: string;
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * stub area type
     *   - Choices: `stub`
     */
    areaType?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.TransportRoutingOspfv3Ipv4FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary?: boolean;
    /**
     * Variable name
     */
    noSummaryVariable?: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.TransportRoutingOspfv3Ipv4FeatureAreaRange[];
}

export interface TransportRoutingOspfv3Ipv4FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey?: string;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     *   - Range: `256`-`4294967295`
     */
    authenticationSpi?: number;
    /**
     * Variable name
     */
    authenticationSpiVariable?: string;
    /**
     * No Authentication by default
     *   - Choices: `no-auth`
     */
    authenticationType?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    lsaRetransmitInterval?: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     */
    networkType?: string;
    /**
     * Variable name
     */
    networkTypeVariable?: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
}

export interface TransportRoutingOspfv3Ipv4FeatureAreaRange {
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportRoutingOspfv3Ipv4FeatureRedistribute {
    /**
     * Enable NAT DIA for redistributed routes
     *   - Default value: `true`
     */
    natDia?: boolean;
    /**
     * Variable name
     */
    natDiaVariable?: string;
    /**
     * Set the protocol
     *   - Choices: `connected`, `static`, `omp`, `nat-route`, `bgp`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface TransportRoutingOspfv3Ipv6FeatureArea {
    /**
     * Always translate type7 LSAs
     */
    alwaysTranslate?: boolean;
    /**
     * Variable name
     */
    alwaysTranslateVariable?: string;
    /**
     * Set OSPF area number
     *   - Range: `0`-`4294967295`
     */
    areaNumber?: number;
    /**
     * Variable name
     */
    areaNumberVariable?: string;
    /**
     * stub area type
     *   - Choices: `stub`
     */
    areaType?: string;
    /**
     * Set OSPF interface parameters
     */
    interfaces?: outputs.TransportRoutingOspfv3Ipv6FeatureAreaInterface[];
    /**
     * Do not inject inter-area routes
     */
    noSummary?: boolean;
    /**
     * Variable name
     */
    noSummaryVariable?: string;
    /**
     * Summarize OSPF routes at an area boundary
     */
    ranges?: outputs.TransportRoutingOspfv3Ipv6FeatureAreaRange[];
}

export interface TransportRoutingOspfv3Ipv6FeatureAreaInterface {
    /**
     * Set OSPF interface authentication IPSEC key
     */
    authenticationKey?: string;
    /**
     * Variable name
     */
    authenticationKeyVariable?: string;
    /**
     * Set OSPF interface authentication IPSec SPI, range 256..4294967295
     *   - Range: `256`-`4294967295`
     */
    authenticationSpi?: number;
    /**
     * Variable name
     */
    authenticationSpiVariable?: string;
    /**
     * No Authentication by default
     *   - Choices: `no-auth`
     */
    authenticationType?: string;
    /**
     * Set cost of OSPF interface
     *   - Range: `1`-`65535`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Set interval after which neighbor is declared to be down
     *   - Range: `1`-`65535`
     *   - Default value: `40`
     */
    deadInterval?: number;
    /**
     * Variable name
     */
    deadIntervalVariable?: string;
    /**
     * Set interval between OSPF hello packets
     *   - Range: `1`-`65535`
     *   - Default value: `10`
     */
    helloInterval?: number;
    /**
     * Variable name
     */
    helloIntervalVariable?: string;
    /**
     * Set time between retransmitting LSAs
     *   - Range: `1`-`65535`
     *   - Default value: `5`
     */
    lsaRetransmitInterval?: number;
    /**
     * Variable name
     */
    lsaRetransmitIntervalVariable?: string;
    /**
     * Set interface name
     */
    name?: string;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Set the OSPF network type
     *   - Choices: `broadcast`, `point-to-point`, `non-broadcast`, `point-to-multipoint`
     */
    networkType?: string;
    /**
     * Variable name
     */
    networkTypeVariable?: string;
    /**
     * Set the interface to advertise its address, but not to actively run OSPF
     *   - Default value: `false`
     */
    passiveInterface?: boolean;
    /**
     * Variable name
     */
    passiveInterfaceVariable?: string;
}

export interface TransportRoutingOspfv3Ipv6FeatureAreaRange {
    /**
     * Set cost for this range
     *   - Range: `0`-`16777214`
     */
    cost?: number;
    /**
     * Variable name
     */
    costVariable?: string;
    /**
     * Do not advertise this range
     *   - Default value: `false`
     */
    noAdvertise?: boolean;
    /**
     * Variable name
     */
    noAdvertiseVariable?: string;
    /**
     * IPv6 prefix,for example 2001::/64
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface TransportRoutingOspfv3Ipv6FeatureRedistribute {
    /**
     * Set the protocol
     *   - Choices: `connected`, `static`, `omp`, `bgp`, `eigrp`
     */
    protocol?: string;
    /**
     * Variable name
     */
    protocolVariable?: string;
    routePolicyId?: string;
}

export interface TransportT1E1ControllerFeatureEntry {
    /**
     * Cable Config
     *   - Choices: `short`, `long`
     */
    cableLength?: string;
    /**
     * Channel Group List
     */
    channelGroups?: outputs.TransportT1E1ControllerFeatureEntryChannelGroup[];
    /**
     * Clock Source
     *   - Choices: `line`, `internal`, `loop-timed`, `network`
     */
    clockSource?: string;
    /**
     * Description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Card Type
     *   - Choices: `E1`
     */
    e1Description?: string;
    /**
     * Framing
     *   - Choices: `crc4`, `no-crc4`
     */
    e1Framing?: string;
    /**
     * Variable name
     */
    e1FramingVariable?: string;
    /**
     * LineCode
     *   - Choices: `ami`, `hdb3`
     */
    e1Linecode?: string;
    /**
     * Variable name
     */
    e1LinecodeVariable?: string;
    /**
     * length, Attribute conditional on `cableLength` being equal to `long`
     *   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
     */
    lengthLong?: string;
    /**
     * Variable name, Attribute conditional on `cableLength` being equal to `long`
     */
    lengthLongVariable?: string;
    /**
     * length, Attribute conditional on `cableLength` being equal to `short`
     *   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
     */
    lengthShort?: string;
    /**
     * Variable name, Attribute conditional on `cableLength` being equal to `short`
     */
    lengthShortVariable?: string;
    /**
     * Line Mode
     *   - Choices: `secondary`, `primary`
     */
    lineMode?: string;
    /**
     * Variable name
     */
    lineModeVariable?: string;
    /**
     * Card Type
     *   - Choices: `T1`
     */
    t1Description?: string;
    /**
     * Framing
     *   - Choices: `esf`, `sf`
     */
    t1Framing?: string;
    /**
     * Variable name
     */
    t1FramingVariable?: string;
    /**
     * LineCode
     *   - Choices: `ami`, `b8zs`
     */
    t1Linecode?: string;
    /**
     * Variable name
     */
    t1LinecodeVariable?: string;
}

export interface TransportT1E1ControllerFeatureEntryChannelGroup {
    /**
     * Number
     *   - Range: `0`-`23`
     */
    channelGroup?: number;
    /**
     * Variable name
     */
    channelGroupVariable?: string;
    /**
     * Time slots
     */
    timeSlot?: string;
    /**
     * Variable name
     */
    timeSlotVariable?: string;
}

export interface TransportTrackerGroupFeatureTrackerElement {
    trackerId?: string;
}

export interface TransportWanVpnFeatureIpv4StaticRoute {
    /**
     * Administrative distance, Attribute conditional on `gateway` being equal to `null0`
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    administrativeDistance?: number;
    /**
     * Variable name, Attribute conditional on `gateway` being equal to `null0`
     */
    administrativeDistanceVariable?: string;
    /**
     * Gateway
     *   - Choices: `nextHop`, `dhcp`, `null0`
     *   - Default value: `nextHop`
     */
    gateway?: string;
    /**
     * IP Address
     */
    networkAddress?: string;
    /**
     * Variable name
     */
    networkAddressVariable?: string;
    /**
     * IPv4 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
     */
    nextHops?: outputs.TransportWanVpnFeatureIpv4StaticRouteNextHop[];
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportWanVpnFeatureIpv4StaticRouteNextHop {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
}

export interface TransportWanVpnFeatureIpv6StaticRoute {
    /**
     * Gateway
     *   - Choices: `nextHop`, `null0`, `nat`
     */
    gateway?: string;
    /**
     * IPv6 Nat, Attribute conditional on `gateway` being equal to `nat`
     *   - Choices: `NAT64`, `NAT66`
     */
    nat?: string;
    /**
     * Variable name, Attribute conditional on `gateway` being equal to `nat`
     */
    natVariable?: string;
    /**
     * IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `nextHop`
     */
    nextHops?: outputs.TransportWanVpnFeatureIpv6StaticRouteNextHop[];
    /**
     * IPv6 Route Gateway Next Hop, Attribute conditional on `gateway` being equal to `null0`
     */
    null0?: boolean;
    /**
     * Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface TransportWanVpnFeatureIpv6StaticRouteNextHop {
    /**
     * Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Administrative distance
     *   - Range: `1`-`254`
     */
    administrativeDistance?: number;
    /**
     * Variable name
     */
    administrativeDistanceVariable?: string;
}

export interface TransportWanVpnFeatureNat64V4Pool {
    /**
     * NAT64 v4 Pool Name
     */
    nat64V4PoolName?: string;
    /**
     * Variable name
     */
    nat64V4PoolNameVariable?: string;
    /**
     * NAT64 Overload
     *   - Default value: `false`
     */
    nat64V4PoolOverload?: boolean;
    /**
     * Variable name
     */
    nat64V4PoolOverloadVariable?: string;
    /**
     * NAT64 Pool Range End
     */
    nat64V4PoolRangeEnd?: string;
    /**
     * Variable name
     */
    nat64V4PoolRangeEndVariable?: string;
    /**
     * NAT64 Pool Range Start
     */
    nat64V4PoolRangeStart?: string;
    /**
     * Variable name
     */
    nat64V4PoolRangeStartVariable?: string;
}

export interface TransportWanVpnFeatureNewHostMapping {
    /**
     * Hostname
     */
    hostName?: string;
    /**
     * Variable name
     */
    hostNameVariable?: string;
    /**
     * List of IP
     */
    listOfIpAddresses?: string[];
    /**
     * Variable name
     */
    listOfIpAddressesVariable?: string;
}

export interface TransportWanVpnFeatureService {
    /**
     * Service Type
     *   - Choices: `TE`
     */
    serviceType?: string;
}

export interface TransportWanVpnInterfaceCellularFeatureArp {
    /**
     * IP V4 Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC Address
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
}

export interface TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureArp {
    /**
     * IP V4 Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC Address
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress {
    /**
     * IpV4 Address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: string;
    /**
     * Variable name
     */
    subnetMaskVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress {
    /**
     * IPv6 Address Secondary
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureNewStaticNat {
    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     *   - Default value: `inside`
     */
    direction?: string;
    /**
     * Source IP address to be translated
     */
    sourceIp?: string;
    /**
     * Variable name
     */
    sourceIpVariable?: string;
    /**
     * Source VPN ID
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     */
    sourceVpn?: number;
    /**
     * Variable name
     */
    sourceVpnVariable?: string;
    /**
     * Statically translated source IP address
     */
    translatedIp?: string;
    /**
     * Variable name
     */
    translatedIpVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureStaticNat66 {
    /**
     * Source Prefix
     */
    sourcePrefix?: string;
    /**
     * Variable name
     */
    sourcePrefixVariable?: string;
    /**
     * Source VPN ID
     *   - Range: `0`-`65530`
     */
    sourceVpnId?: number;
    /**
     * Variable name
     */
    sourceVpnIdVariable?: string;
    /**
     * Translated Source Prefix
     */
    translatedSourcePrefix?: string;
    /**
     * Variable name
     */
    translatedSourcePrefixVariable?: string;
}

export interface TransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface UrlFilteringPolicyDefinitionLogging {
    /**
     * External Syslog Server IP
     */
    externalSyslogServerIp?: string;
    /**
     * External Syslog Server VPN
     */
    externalSyslogServerVpn?: string;
}

export interface VpnInterfaceCellularFeatureTemplateIpv4AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceCellularFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceCellularFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Ending port of port range
     *   - Range: `0`-`65535`
     */
    portEndRange?: number;
    /**
     * Starting port of port range
     *   - Range: `0`-`65535`
     */
    portStartRange?: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress?: string;
    /**
     * Variable name
     */
    privateIpAddressVariable?: string;
    /**
     * VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     */
    privateVpn?: number;
    /**
     * Variable name
     */
    privateVpnVariable?: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
}

export interface VpnInterfaceCellularFeatureTemplatePolicer {
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of policer
     */
    policerName?: string;
}

export interface VpnInterfaceCellularFeatureTemplateStaticArp {
    /**
     * IP Address
     */
    ipAddress?: string;
    /**
     * Variable name
     */
    ipAddressVariable?: string;
    /**
     * MAC address
     */
    mac?: string;
    /**
     * Variable name
     */
    macVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceCellularFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnInterfaceDslIpoeFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceDslIpoeFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Ending port of port range
     *   - Range: `0`-`65535`
     */
    portEndRange?: number;
    /**
     * Starting port of port range
     *   - Range: `0`-`65535`
     */
    portStartRange?: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress?: string;
    /**
     * Variable name
     */
    privateIpAddressVariable?: string;
    /**
     * VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     */
    privateVpn?: number;
    /**
     * Variable name
     */
    privateVpnVariable?: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
}

export interface VpnInterfaceDslIpoeFeatureTemplatePolicer {
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of policer
     */
    policerName?: string;
}

export interface VpnInterfaceDslIpoeFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnInterfaceDslIpoeFeatureTemplateVdslConfiguration {
    /**
     * Set module slot/subslot/port number
     */
    controllerVdslSlot?: string;
    /**
     * Variable name
     */
    controllerVdslSlotVariable?: string;
    /**
     * Set VDSL operating mode to adsl1
     *   - Default value: `false`
     */
    modeAdsl1?: boolean;
    /**
     * Set VDSL operating mode to adsl2
     *   - Default value: `false`
     */
    modeAdsl2?: boolean;
    /**
     * Set VDSL operating mode to adsl2plus
     *   - Default value: `false`
     */
    modeAdsl2plus?: boolean;
    /**
     * Set VDSL operating mode to ansi
     *   - Default value: `false`
     */
    modeAnsi?: boolean;
    /**
     * Set VDSL operating mode to vdsl2
     *   - Default value: `false`
     */
    modeVdsl2?: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Seamless rate adaption
     *   - Default value: `true`
     */
    sra?: boolean;
    /**
     * Set module slot/subslot/port number
     */
    vdslModemConfiguration?: string;
    /**
     * Variable name
     */
    vdslModemConfigurationVariable?: string;
}

export interface VpnInterfaceDslPppoaFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceDslPppoaFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Ending port of port range
     *   - Range: `0`-`65535`
     */
    portEndRange?: number;
    /**
     * Starting port of port range
     *   - Range: `0`-`65535`
     */
    portStartRange?: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress?: string;
    /**
     * Variable name
     */
    privateIpAddressVariable?: string;
    /**
     * VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     */
    privateVpn?: number;
    /**
     * Variable name
     */
    privateVpnVariable?: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
}

export interface VpnInterfaceDslPppoaFeatureTemplatePolicer {
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of policer
     */
    policerName?: string;
}

export interface VpnInterfaceDslPppoaFeatureTemplatePvc {
    /**
     * Dialer Pool corresponding to this pvc
     *   - Range: `1`-`255`
     */
    atmDialerPoolMember?: number;
    /**
     * Variable name
     */
    atmDialerPoolMemberVariable?: string;
    /**
     * dialer
     */
    atmEncapsulationAal5mux?: boolean;
    /**
     * aal5nlpid
     */
    atmEncapsulationAal5nlpid?: boolean;
    /**
     * aal5snap
     */
    atmEncapsulationAal5snap?: boolean;
    /**
     * Maximum Burst Size in Cells
     *   - Range: `1`-`65535`
     */
    atmVbrNrtMaximumBurstSize?: number;
    /**
     * Variable name
     */
    atmVbrNrtMaximumBurstSizeVariable?: string;
    /**
     * Peak Cell Rate in Kbps
     *   - Range: `48`-`1015`
     */
    atmVbrNrtPeakCellRate?: number;
    /**
     * Variable name
     */
    atmVbrNrtPeakCellRateVariable?: string;
    /**
     * Peak Cell Rate in Kbps
     */
    atmVbrNrtSustainableCellRate?: number;
    /**
     * Variable name
     */
    atmVbrNrtSustainableCellRateVariable?: string;
    /**
     * Average Cell Rate in Kbps
     */
    atmVbrRtAverageCellRate?: number;
    /**
     * Variable name
     */
    atmVbrRtAverageCellRateVariable?: string;
    /**
     * Maximum Burst Size in number of Cells
     *   - Range: `1`-`65535`
     */
    atmVbrRtMaximumBurstSize?: number;
    /**
     * Variable name
     */
    atmVbrRtMaximumBurstSizeVariable?: string;
    /**
     * Peak Cell Rate in Kbps
     *   - Range: `48`-`25000`
     */
    atmVbrRtPeakCellRate?: number;
    /**
     * Variable name
     */
    atmVbrRtPeakCellRateVariable?: string;
    /**
     * VPI/VCI
     */
    atmVpiAndVci?: string;
    /**
     * Variable name
     */
    atmVpiAndVciVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnInterfaceDslPppoaFeatureTemplateVdslConfiguration {
    /**
     * Set module slot/subslot/port number
     */
    controllerVdslSlot?: string;
    /**
     * Variable name
     */
    controllerVdslSlotVariable?: string;
    /**
     * Set VDSL operating mode to adsl1
     *   - Default value: `false`
     */
    modeAdsl1?: boolean;
    /**
     * Set VDSL operating mode to adsl2
     *   - Default value: `false`
     */
    modeAdsl2?: boolean;
    /**
     * Set VDSL operating mode to adsl2plus
     *   - Default value: `false`
     */
    modeAdsl2plus?: boolean;
    /**
     * Set VDSL operating mode to ansi
     *   - Default value: `false`
     */
    modeAnsi?: boolean;
    /**
     * Set VDSL operating mode to vdsl2
     *   - Default value: `false`
     */
    modeVdsl2?: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Seamless rate adaption
     *   - Default value: `true`
     */
    sra?: boolean;
    /**
     * Set module slot/subslot/port number
     */
    vdslModemConfiguration?: string;
    /**
     * Variable name
     */
    vdslModemConfigurationVariable?: string;
}

export interface VpnInterfaceDslPppoeFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceDslPppoeFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Ending port of port range
     *   - Range: `0`-`65535`
     */
    portEndRange?: number;
    /**
     * Starting port of port range
     *   - Range: `0`-`65535`
     */
    portStartRange?: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress?: string;
    /**
     * Variable name
     */
    privateIpAddressVariable?: string;
    /**
     * VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     */
    privateVpn?: number;
    /**
     * Variable name
     */
    privateVpnVariable?: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
}

export interface VpnInterfaceDslPppoeFeatureTemplatePolicer {
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of policer
     */
    policerName?: string;
}

export interface VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration {
    /**
     * Set module slot/subslot/port number
     */
    controllerVdslSlot?: string;
    /**
     * Variable name
     */
    controllerVdslSlotVariable?: string;
    /**
     * Set VDSL operating mode to adsl1
     *   - Default value: `false`
     */
    modeAdsl1?: boolean;
    /**
     * Set VDSL operating mode to adsl2
     *   - Default value: `false`
     */
    modeAdsl2?: boolean;
    /**
     * Set VDSL operating mode to adsl2plus
     *   - Default value: `false`
     */
    modeAdsl2plus?: boolean;
    /**
     * Set VDSL operating mode to ansi
     *   - Default value: `false`
     */
    modeAnsi?: boolean;
    /**
     * Set VDSL operating mode to vdsl2
     *   - Default value: `false`
     */
    modeVdsl2?: boolean;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Seamless rate adaption
     *   - Default value: `true`
     */
    sra?: boolean;
    /**
     * Set module slot/subslot/port number
     */
    vdslModemConfiguration?: string;
    /**
     * Variable name
     */
    vdslModemConfigurationVariable?: string;
}

export interface VpnInterfaceEthernetPppoeFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceEthernetPppoeFeatureTemplateNatPortForward {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Ending port of port range
     *   - Range: `0`-`65535`
     */
    portEndRange?: number;
    /**
     * Starting port of port range
     *   - Range: `0`-`65535`
     */
    portStartRange?: number;
    /**
     * Private IP Address to translate to
     */
    privateIpAddress?: string;
    /**
     * Variable name
     */
    privateIpAddressVariable?: string;
    /**
     * VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     */
    privateVpn?: number;
    /**
     * Variable name
     */
    privateVpnVariable?: string;
    /**
     * Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     */
    protocol?: string;
}

export interface VpnInterfaceEthernetPppoeFeatureTemplatePolicer {
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of policer
     */
    policerName?: string;
}

export interface VpnInterfaceEthernetPppoeFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnInterfaceMultilinkFeatureTemplateAccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceMultilinkFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceMultilinkFeatureTemplateMultilinkInterface {
    /**
     * Channel Group List
     */
    channelGroupLists?: outputs.VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList[];
    /**
     * Description
     */
    description?: string;
    /**
     * Variable name
     */
    descriptionVariable?: string;
    /**
     * Framing
     */
    framing?: string;
    /**
     * Variable name
     */
    framingVariable?: string;
    /**
     * Card Type
     *   - Choices: `E1`, `T1`, `NIM-2T`, `NIM-4T`
     */
    interfaceType?: string;
    /**
     * Internal
     *   - Default value: `false`
     */
    internal?: boolean;
    /**
     * Line Mode
     *   - Choices: `secondary`, `primary`
     */
    lineMode?: string;
    /**
     * Variable name
     */
    lineModeVariable?: string;
    /**
     * LineCode
     *   - Choices: `ami`, `b8zs`, `hdb3`
     */
    linecode?: string;
    /**
     * Variable name
     */
    linecodeVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set length for long
     */
    setLengthForLong?: string;
    /**
     * Set Length for short
     */
    setLengthForShort?: string;
    /**
     * Slot number
     */
    slot?: string;
}

export interface VpnInterfaceMultilinkFeatureTemplateMultilinkInterfaceChannelGroupList {
    /**
     * Number
     *   - Range: `0`-`30`
     */
    channelGroup?: number;
    /**
     * Variable name
     */
    channelGroupVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Variable name
     */
    timeSlotVariable?: string;
    /**
     * Time slots
     */
    timeSlots?: string[];
}

export interface VpnInterfaceMultilinkFeatureTemplateNimInterfaceList {
    /**
     * Interface bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidth?: number;
    /**
     * Variable name
     */
    bandwidthVariable?: string;
    /**
     * Set preference for interface Clock speed
     *   - Range: `1200`-`8000000`
     */
    clockRate?: number;
    /**
     * Variable name
     */
    clockRateVariable?: string;
    /**
     * Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`
     */
    encapsulationSerial?: string;
    /**
     * Variable name
     */
    encapsulationSerialVariable?: string;
    /**
     * Interface description
     */
    interfaceDescription?: string;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: string;
    /**
     * Interface Name
     */
    interfaceName?: string;
    /**
     * Variable name
     */
    interfaceNameVariable?: string;
    /**
     * NIM Serial interface type
     *   - Choices: `2t`, `4t`, `2T`, `4T`
     */
    nimSerialInterfaceType?: string;
    /**
     * Variable name
     */
    nimSerialInterfaceTypeVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceMultilinkFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnInterfaceSviFeatureTemplateIpv4AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceSviFeatureTemplateIpv4SecondaryAddress {
    /**
     * IP Address
     */
    ipv4Address?: string;
    /**
     * Variable name
     */
    ipv4AddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceSviFeatureTemplateIpv4Vrrp {
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * Assign IP Address
     */
    ipv4Address?: string;
    /**
     * Variable name
     */
    ipv4AddressVariable?: string;
    /**
     * VRRP Secondary IP address
     */
    ipv4SecondaryAddresses?: outputs.VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `100`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * change TLOC preference
     *   - Default value: `false`
     */
    tlocPreferenceChange?: boolean;
    /**
     * Set tloc preference change value
     *   - Range: `1`-`4294967295`
     */
    tlocPreferenceChangeValue?: number;
    /**
     * Variable name
     */
    tlocPreferenceChangeValueVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Variable name
     */
    trackOmpVariable?: string;
    /**
     * Track Prefix List
     */
    trackPrefixList?: string;
    /**
     * Variable name
     */
    trackPrefixListVariable?: string;
    /**
     * tracking object for VRRP configuration
     */
    trackingObjects?: outputs.VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject[];
}

export interface VpnInterfaceSviFeatureTemplateIpv4VrrpIpv4SecondaryAddress {
    /**
     * VRRP Secondary IP address
     */
    ipv4Address?: string;
    /**
     * Variable name
     */
    ipv4AddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceSviFeatureTemplateIpv4VrrpTrackingObject {
    /**
     * Decrement Value for VRRP priority
     *   - Range: `1`-`255`
     */
    decrementValue?: number;
    /**
     * Variable name
     */
    decrementValueVariable?: string;
    /**
     * Tracker ID
     *   - Range: `1`-`1000`
     */
    name?: number;
    /**
     * Variable name
     */
    nameVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Track Action
     *   - Choices: `decrement`, `shutdown`
     *   - Default value: `decrement`
     */
    trackAction?: string;
    /**
     * Variable name
     */
    trackActionVariable?: string;
}

export interface VpnInterfaceSviFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceSviFeatureTemplateIpv6DhcpHelper {
    /**
     * DHCPv6 Helper address
     */
    address?: string;
    /**
     * Variable name
     */
    addressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * DHCPv6 Helper VPN
     *   - Range: `1`-`65536`
     */
    vpnId?: number;
    /**
     * Variable name
     */
    vpnIdVariable?: string;
}

export interface VpnInterfaceSviFeatureTemplateIpv6SecondaryAddress {
    /**
     * IPv6 Address
     */
    ipv6Address?: string;
    /**
     * Variable name
     */
    ipv6AddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceSviFeatureTemplateIpv6Vrrp {
    /**
     * Group ID
     *   - Range: `1`-`255`
     */
    groupId?: number;
    /**
     * Variable name
     */
    groupIdVariable?: string;
    /**
     * IPv6 VRRP
     */
    ipv6Addresses?: outputs.VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address[];
    /**
     * IPv6 Secondary IP address
     */
    ipv6SecondaryAddresses?: outputs.VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress[];
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set priority
     *   - Range: `1`-`254`
     *   - Default value: `100`
     */
    priority?: number;
    /**
     * Variable name
     */
    priorityVariable?: string;
    /**
     * Timer interval for successive advertisements, in milliseconds
     *   - Range: `100`-`40950`
     *   - Default value: `100`
     */
    timer?: number;
    /**
     * Variable name
     */
    timerVariable?: string;
    /**
     * Track OMP status
     *   - Default value: `false`
     */
    trackOmp?: boolean;
    /**
     * Variable name
     */
    trackOmpVariable?: string;
    /**
     * Track Prefix List
     */
    trackPrefixList?: string;
    /**
     * Variable name
     */
    trackPrefixListVariable?: string;
}

export interface VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6Address {
    /**
     * Use link-local IPv6 Address
     */
    linkLocalAddress?: string;
    /**
     * Variable name
     */
    linkLocalAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Assign Global IPv6 Prefix
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6SecondaryAddress {
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * IPv6 Secondary IP address
     */
    prefix?: string;
    /**
     * Variable name
     */
    prefixVariable?: string;
}

export interface VpnInterfaceSviFeatureTemplatePolicer {
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Name of policer
     */
    policerName?: string;
}

export interface VpnInterfaceSviFeatureTemplateStaticArpEntry {
    /**
     * IP Address
     */
    ipv4Address?: string;
    /**
     * Variable name
     */
    ipv4AddressVariable?: string;
    /**
     * MAC address
     */
    macAddress?: string;
    /**
     * Variable name
     */
    macAddressVariable?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessList {
    /**
     * Name of access list
     */
    aclName?: string;
    /**
     * Variable name
     */
    aclNameVariable?: string;
    /**
     * Direction
     *   - Choices: `in`, `out`
     */
    direction?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
}

export interface VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulation {
    /**
     * Encapsulation
     *   - Choices: `gre`, `ipsec`
     */
    encapsulation?: string;
    /**
     * Indicates if list item is considered optional.
     */
    optional?: boolean;
    /**
     * Set preference for TLOC
     *   - Range: `0`-`4294967295`
     */
    preference?: number;
    /**
     * Variable name
     */
    preferenceVariable?: string;
    /**
     * Set weight for TLOC
     *   - Range: `1`-`255`
     *   - Default value: `1`
     */
    weight?: number;
    /**
     * Variable name
     */
    weightVariable?: string;
}

export interface VpnListPolicyObjectEntry {
    /**
     * VPN ID or range of VPN IDs e.g., `100` or `200-300`
     */
    vpnId: string;
}

export interface VpnMembershipPolicyDefinitionSite {
    /**
     * Site list ID
     */
    siteListId?: string;
    /**
     * Site list version
     */
    siteListVersion?: number;
    /**
     * VPN list IDs
     */
    vpnListIds?: string[];
    /**
     * VPN list versions
     */
    vpnListVersions?: string[];
}

export interface ZoneBasedFirewallPolicyDefinitionApplyZonePair {
    /**
     * Destination Zone
     */
    destinationZone?: string;
    /**
     * Source Zone
     */
    sourceZone?: string;
}

export interface ZoneBasedFirewallPolicyDefinitionRule {
    /**
     * List of actions entries
     */
    actionEntries?: outputs.ZoneBasedFirewallPolicyDefinitionRuleActionEntry[];
    /**
     * Base action
     *   - Choices: `pass`, `drop`, `inspect`
     */
    baseAction: string;
    /**
     * List of match entries
     */
    matchEntries?: outputs.ZoneBasedFirewallPolicyDefinitionRuleMatchEntry[];
    /**
     * Rule name
     */
    ruleName: string;
    /**
     * Rule
     */
    ruleOrder: number;
}

export interface ZoneBasedFirewallPolicyDefinitionRuleActionEntry {
    /**
     * Type of action entry
     *   - Choices: `log`, `connectionEvents`, `advancedInspectionProfile`
     */
    type?: string;
}

export interface ZoneBasedFirewallPolicyDefinitionRuleMatchEntry {
    /**
     * policy id for selected match entry
     */
    policyId?: string;
    /**
     * Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
     */
    protocolType?: string;
    /**
     * Type of match entry
     *   - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
     */
    type: string;
    /**
     * value for selected match entry
     */
    value?: string;
    /**
     * variable value for selected match entry if it has variable option (sourceIp & destinationIp)
     */
    valueVariable?: string;
}

export interface ZoneListPolicyObjectEntry {
    /**
     * Interface name
     */
    interface?: string;
    /**
     * VPN ID
     */
    vpn?: string;
}

