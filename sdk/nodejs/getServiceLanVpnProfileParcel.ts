// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Service LAN VPN profile parcel.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceLanVpnProfileParcel({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 * });
 * ```
 */
export function getServiceLanVpnProfileParcel(args: GetServiceLanVpnProfileParcelArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLanVpnProfileParcelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getServiceLanVpnProfileParcel:getServiceLanVpnProfileParcel", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceLanVpnProfileParcel.
 */
export interface GetServiceLanVpnProfileParcelArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the profile parcel
     */
    id: string;
}

/**
 * A collection of values returned by getServiceLanVpnProfileParcel.
 */
export interface GetServiceLanVpnProfileParcelResult {
    /**
     * OMP Advertise IPv4
     */
    readonly advertiseOmpIpv4s: outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv4[];
    /**
     * OMP Advertise IPv6
     */
    readonly advertiseOmpIpv6s: outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv6[];
    /**
     * Name
     */
    readonly configDescription: string;
    /**
     * Variable name
     */
    readonly configDescriptionVariable: string;
    /**
     * The description of the profile parcel
     */
    readonly description: string;
    /**
     * Enable SDWAN Remote Access
     */
    readonly enableSdwanRemoteAccess: boolean;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * IPv4 Static GRE Route
     */
    readonly greRoutes: outputs.GetServiceLanVpnProfileParcelGreRoute[];
    readonly hostMappings: outputs.GetServiceLanVpnProfileParcelHostMapping[];
    /**
     * The id of the profile parcel
     */
    readonly id: string;
    /**
     * IPv4 Static IPSEC Route
     */
    readonly ipsecRoutes: outputs.GetServiceLanVpnProfileParcelIpsecRoute[];
    readonly ipv4ExportRouteTargets: outputs.GetServiceLanVpnProfileParcelIpv4ExportRouteTarget[];
    readonly ipv4ImportRouteTargets: outputs.GetServiceLanVpnProfileParcelIpv4ImportRouteTarget[];
    /**
     * IPv4 Static Route
     */
    readonly ipv4StaticRoutes: outputs.GetServiceLanVpnProfileParcelIpv4StaticRoute[];
    readonly ipv6ExportRouteTargets: outputs.GetServiceLanVpnProfileParcelIpv6ExportRouteTarget[];
    readonly ipv6ImportRouteTargets: outputs.GetServiceLanVpnProfileParcelIpv6ImportRouteTarget[];
    /**
     * IPv6 Static Route
     */
    readonly ipv6StaticRoutes: outputs.GetServiceLanVpnProfileParcelIpv6StaticRoute[];
    /**
     * The name of the profile parcel
     */
    readonly name: string;
    /**
     * NAT64 V4 Pool
     */
    readonly nat64V4Pools: outputs.GetServiceLanVpnProfileParcelNat64V4Pool[];
    /**
     * NAT Pool
     */
    readonly natPools: outputs.GetServiceLanVpnProfileParcelNatPool[];
    /**
     * NAT Port Forward
     */
    readonly natPortForwards: outputs.GetServiceLanVpnProfileParcelNatPortForward[];
    /**
     * OMP Admin Distance IPv4
     */
    readonly ompAdminDistanceIpv4: number;
    /**
     * Variable name
     */
    readonly ompAdminDistanceIpv4Variable: string;
    /**
     * OMP Admin Distance IPv6
     */
    readonly ompAdminDistanceIpv6: number;
    /**
     * Variable name
     */
    readonly ompAdminDistanceIpv6Variable: string;
    /**
     * Primary DNS Address (IPv4)
     */
    readonly primaryDnsAddressIpv4: string;
    /**
     * Variable name
     */
    readonly primaryDnsAddressIpv4Variable: string;
    /**
     * Primary DNS Address (IPv6)
     */
    readonly primaryDnsAddressIpv6: string;
    /**
     * Variable name
     */
    readonly primaryDnsAddressIpv6Variable: string;
    /**
     * Enable route leaking from Global to Service VPN
     */
    readonly routeLeakFromGlobalVpns: outputs.GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn[];
    /**
     * Enable route leak from another Service VPN to current Service VPN
     */
    readonly routeLeakFromOtherServices: outputs.GetServiceLanVpnProfileParcelRouteLeakFromOtherService[];
    /**
     * Enable route leaking from Service to Global VPN
     */
    readonly routeLeakToGlobalVpns: outputs.GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn[];
    /**
     * Secondary DNS Address (IPv4)
     */
    readonly secondaryDnsAddressIpv4: string;
    /**
     * Variable name
     */
    readonly secondaryDnsAddressIpv4Variable: string;
    /**
     * Secondary DNS Address (IPv6)
     */
    readonly secondaryDnsAddressIpv6: string;
    /**
     * Variable name
     */
    readonly secondaryDnsAddressIpv6Variable: string;
    /**
     * Service
     */
    readonly serviceRoutes: outputs.GetServiceLanVpnProfileParcelServiceRoute[];
    /**
     * Service
     */
    readonly services: outputs.GetServiceLanVpnProfileParcelService[];
    /**
     * Static NAT Rules
     */
    readonly staticNats: outputs.GetServiceLanVpnProfileParcelStaticNat[];
    /**
     * The version of the profile parcel
     */
    readonly version: number;
    /**
     * VPN
     */
    readonly vpn: number;
    /**
     * Variable name
     */
    readonly vpnVariable: string;
}
/**
 * This data source can read the Service LAN VPN profile parcel.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceLanVpnProfileParcel({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 * });
 * ```
 */
export function getServiceLanVpnProfileParcelOutput(args: GetServiceLanVpnProfileParcelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLanVpnProfileParcelResult> {
    return pulumi.output(args).apply((a: any) => getServiceLanVpnProfileParcel(a, opts))
}

/**
 * A collection of arguments for invoking getServiceLanVpnProfileParcel.
 */
export interface GetServiceLanVpnProfileParcelOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the profile parcel
     */
    id: pulumi.Input<string>;
}
