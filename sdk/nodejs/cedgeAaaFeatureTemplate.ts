// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a cEdge AAA feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CedgeAaaFeatureTemplate("example", {
 *     name: "Example",
 *     description: "My Example",
 *     deviceTypes: ["vedge-C8000V"],
 *     dot1xAuthentication: true,
 *     dot1xAccounting: true,
 *     serverGroupsPriorityOrder: "100",
 *     users: [{
 *         name: "user1",
 *         password: "password123",
 *         secret: "secret123",
 *         privilege_level: "15",
 *         ssh_pubkeys: [{
 *             keyString: "abc123",
 *             keyType: "rsa",
 *         }],
 *     }],
 *     radiusServerGroups: [{
 *         group_name: "GROUP1",
 *         vpn_id: 1,
 *         source_interface: "e1",
 *         servers: [{
 *             address: "1.1.1.1",
 *             authenticationPort: 1812,
 *             accountingPort: 1813,
 *             timeout: 5,
 *             retransmit: 3,
 *             key: "key123",
 *             secretKey: "1234567",
 *             encryptionType: "7",
 *             keyType: "pac",
 *         }],
 *     }],
 *     radiusClients: [{
 *         client_ip: "2.2.2.2",
 *         vpn_configurations: [{
 *             vpnId: 1,
 *             serverKey: "key123",
 *         }],
 *     }],
 *     radiusDynamicAuthorServerKey: "key123",
 *     radiusDynamicAuthorDomainStripping: "yes",
 *     radiusDynamicAuthorAuthenticationType: "all",
 *     radiusDynamicAuthorPort: 1700,
 *     radiusTrustsecCtsAuthorizationList: "ALIST1",
 *     radiusTrustsecGroup: "GROUP1",
 *     tacacsServerGroups: [{
 *         group_name: "GROUP1",
 *         vpn_id: 1,
 *         source_interface: "e1",
 *         servers: [{
 *             address: "1.1.1.1",
 *             port: 49,
 *             timeout: 5,
 *             key: "key123",
 *             secretKey: "1234567",
 *             encryptionType: "7",
 *         }],
 *     }],
 *     accountingRules: [{
 *         name: "RULE1",
 *         method: "exec",
 *         privilege_level: "15",
 *         start_stop: true,
 *         groups: "GROUP1",
 *     }],
 *     authorizationConsole: true,
 *     authorizationConfigCommands: true,
 *     authorizationRules: [{
 *         name: "RULE1",
 *         method: "commands",
 *         privilege_level: "15",
 *         groups: "GROUP1",
 *         authenticated: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/cedgeAaaFeatureTemplate:CedgeAaaFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CedgeAaaFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CedgeAaaFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CedgeAaaFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CedgeAaaFeatureTemplate {
        return new CedgeAaaFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/cedgeAaaFeatureTemplate:CedgeAaaFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CedgeAaaFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CedgeAaaFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CedgeAaaFeatureTemplate.__pulumiType;
    }

    /**
     * Configure the accounting rules
     */
    declare public readonly accountingRules: pulumi.Output<outputs.CedgeAaaFeatureTemplateAccountingRule[] | undefined>;
    /**
     * For configuration mode commands.
     *   - Default value: `false`
     */
    declare public readonly authorizationConfigCommands: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly authorizationConfigCommandsVariable: pulumi.Output<string | undefined>;
    /**
     * For enabling console authorization
     *   - Default value: `false`
     */
    declare public readonly authorizationConsole: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly authorizationConsoleVariable: pulumi.Output<string | undefined>;
    /**
     * Configure the Authorization Rules
     */
    declare public readonly authorizationRules: pulumi.Output<outputs.CedgeAaaFeatureTemplateAuthorizationRule[] | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Accounting configurations parameters
     *   - Default value: `false`
     */
    declare public readonly dot1xAccounting: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly dot1xAccountingVariable: pulumi.Output<string | undefined>;
    /**
     * Authentication configurations parameters
     *   - Default value: `false`
     */
    declare public readonly dot1xAuthentication: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly dot1xAuthenticationVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Specify a RADIUS client
     */
    declare public readonly radiusClients: pulumi.Output<outputs.CedgeAaaFeatureTemplateRadiusClient[] | undefined>;
    /**
     * Authentication Type
     *   - Choices: `any`, `all`, `session-key`
     *   - Default value: `any`
     */
    declare public readonly radiusDynamicAuthorAuthenticationType: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly radiusDynamicAuthorAuthenticationTypeVariable: pulumi.Output<string | undefined>;
    /**
     * Domain Stripping
     *   - Choices: `yes`, `no`, `right-to-left`
     *   - Default value: `no`
     */
    declare public readonly radiusDynamicAuthorDomainStripping: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly radiusDynamicAuthorDomainStrippingVariable: pulumi.Output<string | undefined>;
    /**
     * Specify Radius Dynamic Author Port
     *   - Range: `0`-`65535`
     *   - Default value: `1700`
     */
    declare public readonly radiusDynamicAuthorPort: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly radiusDynamicAuthorPortVariable: pulumi.Output<string | undefined>;
    /**
     * Specify a radius dynamic author server-key
     */
    declare public readonly radiusDynamicAuthorServerKey: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly radiusDynamicAuthorServerKeyVariable: pulumi.Output<string | undefined>;
    /**
     * Configure the Radius serverGroup
     */
    declare public readonly radiusServerGroups: pulumi.Output<outputs.CedgeAaaFeatureTemplateRadiusServerGroup[] | undefined>;
    /**
     * CTS Authorization List
     */
    declare public readonly radiusTrustsecCtsAuthorizationList: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly radiusTrustsecCtsAuthorizationListVariable: pulumi.Output<string | undefined>;
    /**
     * RADIUS trustsec group
     */
    declare public readonly radiusTrustsecGroup: pulumi.Output<string | undefined>;
    /**
     * ServerGroups priority order
     *   - Default value: `local`
     */
    declare public readonly serverGroupsPriorityOrder: pulumi.Output<string | undefined>;
    /**
     * Configure the TACACS serverGroup
     */
    declare public readonly tacacsServerGroups: pulumi.Output<outputs.CedgeAaaFeatureTemplateTacacsServerGroup[] | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Create local login account
     */
    declare public readonly users: pulumi.Output<outputs.CedgeAaaFeatureTemplateUser[] | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a CedgeAaaFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CedgeAaaFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CedgeAaaFeatureTemplateArgs | CedgeAaaFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CedgeAaaFeatureTemplateState | undefined;
            resourceInputs["accountingRules"] = state?.accountingRules;
            resourceInputs["authorizationConfigCommands"] = state?.authorizationConfigCommands;
            resourceInputs["authorizationConfigCommandsVariable"] = state?.authorizationConfigCommandsVariable;
            resourceInputs["authorizationConsole"] = state?.authorizationConsole;
            resourceInputs["authorizationConsoleVariable"] = state?.authorizationConsoleVariable;
            resourceInputs["authorizationRules"] = state?.authorizationRules;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["dot1xAccounting"] = state?.dot1xAccounting;
            resourceInputs["dot1xAccountingVariable"] = state?.dot1xAccountingVariable;
            resourceInputs["dot1xAuthentication"] = state?.dot1xAuthentication;
            resourceInputs["dot1xAuthenticationVariable"] = state?.dot1xAuthenticationVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["radiusClients"] = state?.radiusClients;
            resourceInputs["radiusDynamicAuthorAuthenticationType"] = state?.radiusDynamicAuthorAuthenticationType;
            resourceInputs["radiusDynamicAuthorAuthenticationTypeVariable"] = state?.radiusDynamicAuthorAuthenticationTypeVariable;
            resourceInputs["radiusDynamicAuthorDomainStripping"] = state?.radiusDynamicAuthorDomainStripping;
            resourceInputs["radiusDynamicAuthorDomainStrippingVariable"] = state?.radiusDynamicAuthorDomainStrippingVariable;
            resourceInputs["radiusDynamicAuthorPort"] = state?.radiusDynamicAuthorPort;
            resourceInputs["radiusDynamicAuthorPortVariable"] = state?.radiusDynamicAuthorPortVariable;
            resourceInputs["radiusDynamicAuthorServerKey"] = state?.radiusDynamicAuthorServerKey;
            resourceInputs["radiusDynamicAuthorServerKeyVariable"] = state?.radiusDynamicAuthorServerKeyVariable;
            resourceInputs["radiusServerGroups"] = state?.radiusServerGroups;
            resourceInputs["radiusTrustsecCtsAuthorizationList"] = state?.radiusTrustsecCtsAuthorizationList;
            resourceInputs["radiusTrustsecCtsAuthorizationListVariable"] = state?.radiusTrustsecCtsAuthorizationListVariable;
            resourceInputs["radiusTrustsecGroup"] = state?.radiusTrustsecGroup;
            resourceInputs["serverGroupsPriorityOrder"] = state?.serverGroupsPriorityOrder;
            resourceInputs["tacacsServerGroups"] = state?.tacacsServerGroups;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["users"] = state?.users;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CedgeAaaFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["accountingRules"] = args?.accountingRules;
            resourceInputs["authorizationConfigCommands"] = args?.authorizationConfigCommands;
            resourceInputs["authorizationConfigCommandsVariable"] = args?.authorizationConfigCommandsVariable;
            resourceInputs["authorizationConsole"] = args?.authorizationConsole;
            resourceInputs["authorizationConsoleVariable"] = args?.authorizationConsoleVariable;
            resourceInputs["authorizationRules"] = args?.authorizationRules;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["dot1xAccounting"] = args?.dot1xAccounting;
            resourceInputs["dot1xAccountingVariable"] = args?.dot1xAccountingVariable;
            resourceInputs["dot1xAuthentication"] = args?.dot1xAuthentication;
            resourceInputs["dot1xAuthenticationVariable"] = args?.dot1xAuthenticationVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["radiusClients"] = args?.radiusClients;
            resourceInputs["radiusDynamicAuthorAuthenticationType"] = args?.radiusDynamicAuthorAuthenticationType;
            resourceInputs["radiusDynamicAuthorAuthenticationTypeVariable"] = args?.radiusDynamicAuthorAuthenticationTypeVariable;
            resourceInputs["radiusDynamicAuthorDomainStripping"] = args?.radiusDynamicAuthorDomainStripping;
            resourceInputs["radiusDynamicAuthorDomainStrippingVariable"] = args?.radiusDynamicAuthorDomainStrippingVariable;
            resourceInputs["radiusDynamicAuthorPort"] = args?.radiusDynamicAuthorPort;
            resourceInputs["radiusDynamicAuthorPortVariable"] = args?.radiusDynamicAuthorPortVariable;
            resourceInputs["radiusDynamicAuthorServerKey"] = args?.radiusDynamicAuthorServerKey;
            resourceInputs["radiusDynamicAuthorServerKeyVariable"] = args?.radiusDynamicAuthorServerKeyVariable;
            resourceInputs["radiusServerGroups"] = args?.radiusServerGroups;
            resourceInputs["radiusTrustsecCtsAuthorizationList"] = args?.radiusTrustsecCtsAuthorizationList;
            resourceInputs["radiusTrustsecCtsAuthorizationListVariable"] = args?.radiusTrustsecCtsAuthorizationListVariable;
            resourceInputs["radiusTrustsecGroup"] = args?.radiusTrustsecGroup;
            resourceInputs["serverGroupsPriorityOrder"] = args?.serverGroupsPriorityOrder;
            resourceInputs["tacacsServerGroups"] = args?.tacacsServerGroups;
            resourceInputs["users"] = args?.users;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CedgeAaaFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CedgeAaaFeatureTemplate resources.
 */
export interface CedgeAaaFeatureTemplateState {
    /**
     * Configure the accounting rules
     */
    accountingRules?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateAccountingRule>[]>;
    /**
     * For configuration mode commands.
     *   - Default value: `false`
     */
    authorizationConfigCommands?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    authorizationConfigCommandsVariable?: pulumi.Input<string>;
    /**
     * For enabling console authorization
     *   - Default value: `false`
     */
    authorizationConsole?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    authorizationConsoleVariable?: pulumi.Input<string>;
    /**
     * Configure the Authorization Rules
     */
    authorizationRules?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateAuthorizationRule>[]>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Accounting configurations parameters
     *   - Default value: `false`
     */
    dot1xAccounting?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    dot1xAccountingVariable?: pulumi.Input<string>;
    /**
     * Authentication configurations parameters
     *   - Default value: `false`
     */
    dot1xAuthentication?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    dot1xAuthenticationVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Specify a RADIUS client
     */
    radiusClients?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateRadiusClient>[]>;
    /**
     * Authentication Type
     *   - Choices: `any`, `all`, `session-key`
     *   - Default value: `any`
     */
    radiusDynamicAuthorAuthenticationType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusDynamicAuthorAuthenticationTypeVariable?: pulumi.Input<string>;
    /**
     * Domain Stripping
     *   - Choices: `yes`, `no`, `right-to-left`
     *   - Default value: `no`
     */
    radiusDynamicAuthorDomainStripping?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusDynamicAuthorDomainStrippingVariable?: pulumi.Input<string>;
    /**
     * Specify Radius Dynamic Author Port
     *   - Range: `0`-`65535`
     *   - Default value: `1700`
     */
    radiusDynamicAuthorPort?: pulumi.Input<number>;
    /**
     * Variable name
     */
    radiusDynamicAuthorPortVariable?: pulumi.Input<string>;
    /**
     * Specify a radius dynamic author server-key
     */
    radiusDynamicAuthorServerKey?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusDynamicAuthorServerKeyVariable?: pulumi.Input<string>;
    /**
     * Configure the Radius serverGroup
     */
    radiusServerGroups?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateRadiusServerGroup>[]>;
    /**
     * CTS Authorization List
     */
    radiusTrustsecCtsAuthorizationList?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusTrustsecCtsAuthorizationListVariable?: pulumi.Input<string>;
    /**
     * RADIUS trustsec group
     */
    radiusTrustsecGroup?: pulumi.Input<string>;
    /**
     * ServerGroups priority order
     *   - Default value: `local`
     */
    serverGroupsPriorityOrder?: pulumi.Input<string>;
    /**
     * Configure the TACACS serverGroup
     */
    tacacsServerGroups?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateTacacsServerGroup>[]>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Create local login account
     */
    users?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateUser>[]>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CedgeAaaFeatureTemplate resource.
 */
export interface CedgeAaaFeatureTemplateArgs {
    /**
     * Configure the accounting rules
     */
    accountingRules?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateAccountingRule>[]>;
    /**
     * For configuration mode commands.
     *   - Default value: `false`
     */
    authorizationConfigCommands?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    authorizationConfigCommandsVariable?: pulumi.Input<string>;
    /**
     * For enabling console authorization
     *   - Default value: `false`
     */
    authorizationConsole?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    authorizationConsoleVariable?: pulumi.Input<string>;
    /**
     * Configure the Authorization Rules
     */
    authorizationRules?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateAuthorizationRule>[]>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Accounting configurations parameters
     *   - Default value: `false`
     */
    dot1xAccounting?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    dot1xAccountingVariable?: pulumi.Input<string>;
    /**
     * Authentication configurations parameters
     *   - Default value: `false`
     */
    dot1xAuthentication?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    dot1xAuthenticationVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Specify a RADIUS client
     */
    radiusClients?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateRadiusClient>[]>;
    /**
     * Authentication Type
     *   - Choices: `any`, `all`, `session-key`
     *   - Default value: `any`
     */
    radiusDynamicAuthorAuthenticationType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusDynamicAuthorAuthenticationTypeVariable?: pulumi.Input<string>;
    /**
     * Domain Stripping
     *   - Choices: `yes`, `no`, `right-to-left`
     *   - Default value: `no`
     */
    radiusDynamicAuthorDomainStripping?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusDynamicAuthorDomainStrippingVariable?: pulumi.Input<string>;
    /**
     * Specify Radius Dynamic Author Port
     *   - Range: `0`-`65535`
     *   - Default value: `1700`
     */
    radiusDynamicAuthorPort?: pulumi.Input<number>;
    /**
     * Variable name
     */
    radiusDynamicAuthorPortVariable?: pulumi.Input<string>;
    /**
     * Specify a radius dynamic author server-key
     */
    radiusDynamicAuthorServerKey?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusDynamicAuthorServerKeyVariable?: pulumi.Input<string>;
    /**
     * Configure the Radius serverGroup
     */
    radiusServerGroups?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateRadiusServerGroup>[]>;
    /**
     * CTS Authorization List
     */
    radiusTrustsecCtsAuthorizationList?: pulumi.Input<string>;
    /**
     * Variable name
     */
    radiusTrustsecCtsAuthorizationListVariable?: pulumi.Input<string>;
    /**
     * RADIUS trustsec group
     */
    radiusTrustsecGroup?: pulumi.Input<string>;
    /**
     * ServerGroups priority order
     *   - Default value: `local`
     */
    serverGroupsPriorityOrder?: pulumi.Input<string>;
    /**
     * Configure the TACACS serverGroup
     */
    tacacsServerGroups?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateTacacsServerGroup>[]>;
    /**
     * Create local login account
     */
    users?: pulumi.Input<pulumi.Input<inputs.CedgeAaaFeatureTemplateUser>[]>;
}
