// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Transport WAN VPN Interface Ethernet Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getTransportWanVpnInterfaceEthernetFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getTransportWanVpnInterfaceEthernetFeature(args: GetTransportWanVpnInterfaceEthernetFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetTransportWanVpnInterfaceEthernetFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getTransportWanVpnInterfaceEthernetFeature:getTransportWanVpnInterfaceEthernetFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportWanVpnFeatureId": args.transportWanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceEthernetFeature.
 */
export interface GetTransportWanVpnInterfaceEthernetFeatureArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the Feature
     */
    id: string;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: string;
}

/**
 * A collection of values returned by getTransportWanVpnInterfaceEthernetFeature.
 */
export interface GetTransportWanVpnInterfaceEthernetFeatureResult {
    readonly aclIpv4EgressFeatureId: string;
    readonly aclIpv4IngressFeatureId: string;
    readonly aclIpv6EgressFeatureId: string;
    readonly aclIpv6IngressFeatureId: string;
    /**
     * Timeout value for dynamically learned ARP entries, \n\n seconds
     */
    readonly arpTimeout: number;
    /**
     * Variable name
     */
    readonly arpTimeoutVariable: string;
    /**
     * Configure ARP entries
     */
    readonly arps: outputs.GetTransportWanVpnInterfaceEthernetFeatureArp[];
    /**
     * Interface auto detect bandwidth
     */
    readonly autoDetectBandwidth: boolean;
    /**
     * Variable name
     */
    readonly autoDetectBandwidthVariable: string;
    /**
     * Link autonegotiation
     */
    readonly autonegotiate: boolean;
    /**
     * Variable name
     */
    readonly autonegotiateVariable: string;
    /**
     * Interface downstream bandwidth capacity, in kbps
     */
    readonly bandwidthDownstream: number;
    /**
     * Variable name
     */
    readonly bandwidthDownstreamVariable: string;
    /**
     * Interface upstream bandwidth capacity, in kbps
     */
    readonly bandwidthUpstream: number;
    /**
     * Variable name
     */
    readonly bandwidthUpstreamVariable: string;
    /**
     * Block packets originating from IP address that is not from this source
     */
    readonly blockNonSourceIp: boolean;
    /**
     * Variable name
     */
    readonly blockNonSourceIpVariable: string;
    /**
     * The description of the Feature
     */
    readonly description: string;
    /**
     * Duplex mode
     */
    readonly duplex: string;
    /**
     * Variable name
     */
    readonly duplexVariable: string;
    /**
     * Enable DHCPv6
     */
    readonly enableDhcpv6: boolean;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * GRE tunnel source IP
     */
    readonly greTunnelSourceIp: string;
    /**
     * Variable name
     */
    readonly greTunnelSourceIpVariable: string;
    /**
     * ICMP/ICMPv6 Redirect Disable
     */
    readonly icmpRedirectDisable: boolean;
    /**
     * Variable name
     */
    readonly icmpRedirectDisableVariable: string;
    /**
     * The id of the Feature
     */
    readonly id: string;
    readonly interfaceDescription: string;
    /**
     * Variable name
     */
    readonly interfaceDescriptionVariable: string;
    /**
     * Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
     */
    readonly interfaceMtu: number;
    /**
     * Variable name
     */
    readonly interfaceMtuVariable: string;
    readonly interfaceName: string;
    /**
     * Variable name
     */
    readonly interfaceNameVariable: string;
    /**
     * IP Directed-Broadcast
     */
    readonly ipDirectedBroadcast: boolean;
    /**
     * Variable name
     */
    readonly ipDirectedBroadcastVariable: string;
    /**
     * IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * Iperf server for auto bandwidth detect
     */
    readonly iperfServer: string;
    /**
     * Variable name
     */
    readonly iperfServerVariable: string;
    /**
     * IP Address
     */
    readonly ipv4Address: string;
    /**
     * Variable name
     */
    readonly ipv4AddressVariable: string;
    /**
     * IPv4 Configuration Type
     */
    readonly ipv4ConfigurationType: string;
    /**
     * DHCP Distance
     */
    readonly ipv4DhcpDistance: number;
    /**
     * Variable name
     */
    readonly ipv4DhcpDistanceVariable: string;
    /**
     * Variable name
     */
    readonly ipv4DhcpHelperVariable: string;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    readonly ipv4DhcpHelpers: string[];
    /**
     * Secondary IpV4 Addresses
     */
    readonly ipv4SecondaryAddresses: outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress[];
    /**
     * Subnet Mask
     */
    readonly ipv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly ipv4SubnetMaskVariable: string;
    /**
     * IPv6 Address Secondary
     */
    readonly ipv6Address: string;
    /**
     * Variable name
     */
    readonly ipv6AddressVariable: string;
    /**
     * IPv6 Configuration Type
     */
    readonly ipv6ConfigurationType: string;
    /**
     * secondary IPv6 addresses
     */
    readonly ipv6DhcpSecondaryAddresses: outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress[];
    /**
     * Static secondary IPv6 addresses
     */
    readonly ipv6SecondaryAddresses: outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress[];
    /**
     * Interval for interface load calculation
     */
    readonly loadInterval: number;
    /**
     * Variable name
     */
    readonly loadIntervalVariable: string;
    /**
     * MAC Address
     */
    readonly macAddress: string;
    /**
     * Variable name
     */
    readonly macAddressVariable: string;
    /**
     * Media type
     */
    readonly mediaType: string;
    /**
     * Variable name
     */
    readonly mediaTypeVariable: string;
    /**
     * The name of the Feature
     */
    readonly name: string;
    /**
     * NAT64 on this interface
     */
    readonly nat64: boolean;
    /**
     * NAT66 on this interface
     */
    readonly nat66: boolean;
    /**
     * enable Network Address Translation on this interface
     */
    readonly natIpv4: boolean;
    /**
     * Variable name
     */
    readonly natIpv4Variable: string;
    /**
     * enable Network Address Translation ipv6 on this interface
     */
    readonly natIpv6: boolean;
    /**
     * Variable name
     */
    readonly natIpv6Variable: string;
    /**
     * NAT Inside Source Loopback Interface
     */
    readonly natLoopback: string;
    /**
     * Variable name
     */
    readonly natLoopbackVariable: string;
    /**
     * NAT Overload
     */
    readonly natOverload: boolean;
    /**
     * Variable name
     */
    readonly natOverloadVariable: string;
    /**
     * NAT Pool Prefix Length
     */
    readonly natPrefixLength: number;
    /**
     * Variable name
     */
    readonly natPrefixLengthVariable: string;
    /**
     * NAT Pool Range End
     */
    readonly natRangeEnd: string;
    /**
     * Variable name
     */
    readonly natRangeEndVariable: string;
    /**
     * NAT Pool Range Start
     */
    readonly natRangeStart: string;
    /**
     * Variable name
     */
    readonly natRangeStartVariable: string;
    /**
     * Set NAT TCP session timeout, in minutes
     */
    readonly natTcpTimeout: number;
    /**
     * Variable name
     */
    readonly natTcpTimeoutVariable: string;
    /**
     * NAT Type
     */
    readonly natType: string;
    /**
     * Variable name
     */
    readonly natTypeVariable: string;
    /**
     * Set NAT UDP session timeout, in minutes
     */
    readonly natUdpTimeout: number;
    /**
     * Variable name
     */
    readonly natUdpTimeoutVariable: string;
    /**
     * static NAT
     */
    readonly newStaticNats: outputs.GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat[];
    /**
     * Per-tunnel Qos
     */
    readonly perTunnelQos: boolean;
    /**
     * Variable name
     */
    readonly perTunnelQosVariable: string;
    /**
     * Adaptive QoS
     */
    readonly qosAdaptive: boolean;
    /**
     * Shaping Rate Downstream
     */
    readonly qosAdaptiveBandwidthDownstream: boolean;
    /**
     * Shaping Rate Upstream
     */
    readonly qosAdaptiveBandwidthUpstream: boolean;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     */
    readonly qosAdaptiveDefaultDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveDefaultDownstreamVariable: string;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     */
    readonly qosAdaptiveDefaultUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveDefaultUpstreamVariable: string;
    /**
     * Downstream max bandwidth limit (kbps)
     */
    readonly qosAdaptiveMaxDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMaxDownstreamVariable: string;
    /**
     * Upstream max bandwidth limit (kbps)
     */
    readonly qosAdaptiveMaxUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMaxUpstreamVariable: string;
    /**
     * Downstream min bandwidth limit (kbps)
     */
    readonly qosAdaptiveMinDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMinDownstreamVariable: string;
    /**
     * Upstream min bandwidth limit (kbps)
     */
    readonly qosAdaptiveMinUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMinUpstreamVariable: string;
    /**
     * Adapt Period(Minutes)
     */
    readonly qosAdaptivePeriod: number;
    /**
     * Variable name
     */
    readonly qosAdaptivePeriodVariable: string;
    /**
     * Shaping Rate (Kbps)
     */
    readonly qosShapingRate: number;
    /**
     * Variable name
     */
    readonly qosShapingRateVariable: string;
    /**
     * Service Provider Name
     */
    readonly serviceProvider: string;
    /**
     * Variable name
     */
    readonly serviceProviderVariable: string;
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * Set interface speed
     */
    readonly speed: string;
    /**
     * Variable name
     */
    readonly speedVariable: string;
    /**
     * static NAT66
     */
    readonly staticNat66s: outputs.GetTransportWanVpnInterfaceEthernetFeatureStaticNat66[];
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMss: number;
    /**
     * Variable name
     */
    readonly tcpMssVariable: string;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    readonly tlocExtension: string;
    /**
     * Variable name
     */
    readonly tlocExtensionVariable: string;
    /**
     * Enable tracker for this interface
     */
    readonly tracker: string;
    /**
     * Variable name
     */
    readonly trackerVariable: string;
    /**
     * Transport WAN VPN Feature ID
     */
    readonly transportWanVpnFeatureId: string;
    /**
     * Tunnels Bandwidth Percent
     */
    readonly tunnelBandwidthPercent: number;
    /**
     * Variable name
     */
    readonly tunnelBandwidthPercentVariable: string;
    /**
     * Tunnel Interface on/off
     */
    readonly tunnelInterface: boolean;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     */
    readonly tunnelInterfaceAllowAll: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowAllVariable: string;
    /**
     * Allow/Deny BFD
     */
    readonly tunnelInterfaceAllowBfd: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowBfdVariable: string;
    /**
     * Allow/deny BGP
     */
    readonly tunnelInterfaceAllowBgp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowBgpVariable: string;
    /**
     * Allow/Deny DHCP
     */
    readonly tunnelInterfaceAllowDhcp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowDhcpVariable: string;
    /**
     * Allow/Deny DNS
     */
    readonly tunnelInterfaceAllowDns: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowDnsVariable: string;
    /**
     * Allow/Deny HTTPS
     */
    readonly tunnelInterfaceAllowHttps: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowHttpsVariable: string;
    /**
     * Allow/Deny ICMP
     */
    readonly tunnelInterfaceAllowIcmp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowIcmpVariable: string;
    /**
     * Allow/Deny NETCONF
     */
    readonly tunnelInterfaceAllowNetconf: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowNetconfVariable: string;
    /**
     * Allow/Deny NTP
     */
    readonly tunnelInterfaceAllowNtp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowNtpVariable: string;
    /**
     * Allow/Deny OSPF
     */
    readonly tunnelInterfaceAllowOspf: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowOspfVariable: string;
    /**
     * Allow/Deny SNMP
     */
    readonly tunnelInterfaceAllowSnmp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowSnmpVariable: string;
    /**
     * Allow/Deny SSH
     */
    readonly tunnelInterfaceAllowSsh: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowSshVariable: string;
    /**
     * Allow/Deny STUN
     */
    readonly tunnelInterfaceAllowStun: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowStunVariable: string;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    readonly tunnelInterfaceBindLoopbackTunnel: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceBindLoopbackTunnelVariable: string;
    /**
     * Set TLOC as border TLOC
     */
    readonly tunnelInterfaceBorder: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceBorderVariable: string;
    /**
     * Set carrier for TLOC
     */
    readonly tunnelInterfaceCarrier: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceCarrierVariable: string;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     */
    readonly tunnelInterfaceClearDontFragment: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceClearDontFragmentVariable: string;
    /**
     * Set color for TLOC
     */
    readonly tunnelInterfaceColor: string;
    /**
     * Restrict this TLOC behavior
     */
    readonly tunnelInterfaceColorRestrict: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceColorRestrictVariable: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceColorVariable: string;
    /**
     * CTS SGT Propagation configuration
     */
    readonly tunnelInterfaceCtsSgtPropagation: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceCtsSgtPropagationVariable: string;
    /**
     * Encapsulation for TLOC
     */
    readonly tunnelInterfaceEncapsulations: outputs.GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation[];
    /**
     * Variable name
     */
    readonly tunnelInterfaceExcludeControllerGroupListVariable: string;
    /**
     * Exclude the following controller groups defined in this list.
     */
    readonly tunnelInterfaceExcludeControllerGroupLists: number[];
    /**
     * GRE tunnel destination IP
     */
    readonly tunnelInterfaceGreTunnelDestinationIp: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceGreTunnelDestinationIpVariable: string;
    /**
     * List of groups
     */
    readonly tunnelInterfaceGroups: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceGroupsVariable: string;
    /**
     * Set time period of control hello packets \n\n milli seconds
     */
    readonly tunnelInterfaceHelloInterval: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceHelloIntervalVariable: string;
    /**
     * Set tolerance of control hello packets \n\n seconds
     */
    readonly tunnelInterfaceHelloTolerance: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceHelloToleranceVariable: string;
    /**
     * Set TLOC as last resort
     */
    readonly tunnelInterfaceLastResortCircuit: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceLastResortCircuitVariable: string;
    /**
     * Set the interface as a low-bandwidth circuit
     */
    readonly tunnelInterfaceLowBandwidthLink: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceLowBandwidthLinkVariable: string;
    /**
     * Maximum Control Connections
     */
    readonly tunnelInterfaceMaxControlConnections: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceMaxControlConnectionsVariable: string;
    /**
     * Set time period of nat refresh packets \n\n seconds
     */
    readonly tunnelInterfaceNatRefreshInterval: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceNatRefreshIntervalVariable: string;
    /**
     * Accept and respond to network-prefix-directed broadcasts
     */
    readonly tunnelInterfaceNetworkBroadcast: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceNetworkBroadcastVariable: string;
    /**
     * Disallow port hopping on the tunnel interface
     */
    readonly tunnelInterfacePortHop: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfacePortHopVariable: string;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     */
    readonly tunnelInterfaceTunnelTcpMss: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceTunnelTcpMssVariable: string;
    /**
     * Put this wan interface in STUN mode only
     */
    readonly tunnelInterfaceVbondAsStunServer: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceVbondAsStunServerVariable: string;
    /**
     * Set interface preference for control connection to vManage \n\n
     */
    readonly tunnelInterfaceVmanageConnectionPreference: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceVmanageConnectionPreferenceVariable: string;
    /**
     * Set tunnel QoS mode
     */
    readonly tunnelQosMode: string;
    /**
     * Variable name
     */
    readonly tunnelQosModeVariable: string;
    /**
     * The version of the Feature
     */
    readonly version: number;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    readonly xconnect: string;
    /**
     * Variable name
     */
    readonly xconnectVariable: string;
}
/**
 * This data source can read the Transport WAN VPN Interface Ethernet Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getTransportWanVpnInterfaceEthernetFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getTransportWanVpnInterfaceEthernetFeatureOutput(args: GetTransportWanVpnInterfaceEthernetFeatureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransportWanVpnInterfaceEthernetFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getTransportWanVpnInterfaceEthernetFeature:getTransportWanVpnInterfaceEthernetFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportWanVpnFeatureId": args.transportWanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceEthernetFeature.
 */
export interface GetTransportWanVpnInterfaceEthernetFeatureOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the Feature
     */
    id: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: pulumi.Input<string>;
}
