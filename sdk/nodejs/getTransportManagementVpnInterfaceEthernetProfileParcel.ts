// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Transport Management VPN Interface Ethernet profile parcel.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getTransportManagementVpnInterfaceEthernetProfileParcel({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportManagementVpnProfileParcelId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getTransportManagementVpnInterfaceEthernetProfileParcel(args: GetTransportManagementVpnInterfaceEthernetProfileParcelArgs, opts?: pulumi.InvokeOptions): Promise<GetTransportManagementVpnInterfaceEthernetProfileParcelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getTransportManagementVpnInterfaceEthernetProfileParcel:getTransportManagementVpnInterfaceEthernetProfileParcel", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportManagementVpnProfileParcelId": args.transportManagementVpnProfileParcelId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTransportManagementVpnInterfaceEthernetProfileParcel.
 */
export interface GetTransportManagementVpnInterfaceEthernetProfileParcelArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the profile parcel
     */
    id: string;
    /**
     * Transport Management VPN Profile Parcel ID
     */
    transportManagementVpnProfileParcelId: string;
}

/**
 * A collection of values returned by getTransportManagementVpnInterfaceEthernetProfileParcel.
 */
export interface GetTransportManagementVpnInterfaceEthernetProfileParcelResult {
    /**
     * Configure ARP entries
     */
    readonly arpEntries: outputs.GetTransportManagementVpnInterfaceEthernetProfileParcelArpEntry[];
    /**
     * Timeout value for dynamically learned ARP entries, \n\n seconds
     */
    readonly arpTimeout: number;
    /**
     * Variable name
     */
    readonly arpTimeoutVariable: string;
    /**
     * Link autonegotiation
     */
    readonly autonegotiate: boolean;
    /**
     * Variable name
     */
    readonly autonegotiateVariable: string;
    readonly basicConfigurationDescription: string;
    /**
     * Variable name
     */
    readonly basicConfigurationDescriptionVariable: string;
    /**
     * The description of the profile parcel
     */
    readonly description: string;
    /**
     * Duplex mode
     */
    readonly duplex: string;
    /**
     * Variable name
     */
    readonly duplexVariable: string;
    /**
     * Enable DHCPv6
     */
    readonly enableDhcpv6: boolean;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * ICMP/ICMPv6 Redirect Disable
     */
    readonly icmpRedirectDisable: boolean;
    /**
     * Variable name
     */
    readonly icmpRedirectDisableVariable: string;
    /**
     * The id of the profile parcel
     */
    readonly id: string;
    /**
     * Interface MTU
     */
    readonly interfaceMtu: number;
    /**
     * Variable name
     */
    readonly interfaceMtuVariable: string;
    readonly interfaceName: string;
    /**
     * Variable name
     */
    readonly interfaceNameVariable: string;
    /**
     * IP Directed-Broadcast
     */
    readonly ipDirectedBroadcast: boolean;
    /**
     * Variable name
     */
    readonly ipDirectedBroadcastVariable: string;
    /**
     * IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * IP Address
     */
    readonly ipv4Address: string;
    /**
     * Variable name
     */
    readonly ipv4AddressVariable: string;
    /**
     * Interface auto detect bandwidth
     */
    readonly ipv4AutoDetectBandwidth: boolean;
    /**
     * Variable name
     */
    readonly ipv4AutoDetectBandwidthVariable: string;
    /**
     * DHCP Distance
     */
    readonly ipv4DhcpDistance: number;
    /**
     * Variable name
     */
    readonly ipv4DhcpDistanceVariable: string;
    /**
     * Variable name
     */
    readonly ipv4DhcpHelperVariable: string;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    readonly ipv4DhcpHelpers: string[];
    /**
     * Iperf server for auto bandwidth detect
     */
    readonly ipv4IperfServer: string;
    /**
     * Variable name
     */
    readonly ipv4IperfServerVariable: string;
    /**
     * Secondary IpV4 Addresses
     */
    readonly ipv4SecondaryAddresses: outputs.GetTransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddress[];
    /**
     * Subnet Mask
     */
    readonly ipv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly ipv4SubnetMaskVariable: string;
    /**
     * IPv6 Address Secondary
     */
    readonly ipv6Address: string;
    /**
     * Variable name
     */
    readonly ipv6AddressVariable: string;
    /**
     * Interval for interface load calculation
     */
    readonly loadInterval: number;
    /**
     * Variable name
     */
    readonly loadIntervalVariable: string;
    /**
     * MAC Address
     */
    readonly macAddress: string;
    /**
     * Variable name
     */
    readonly macAddressVariable: string;
    /**
     * Media type
     */
    readonly mediaType: string;
    /**
     * Variable name
     */
    readonly mediaTypeVariable: string;
    /**
     * The name of the profile parcel
     */
    readonly name: string;
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * Set interface speed
     */
    readonly speed: string;
    /**
     * Variable name
     */
    readonly speedVariable: string;
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMss: number;
    /**
     * Variable name
     */
    readonly tcpMssVariable: string;
    /**
     * Transport Management VPN Profile Parcel ID
     */
    readonly transportManagementVpnProfileParcelId: string;
    /**
     * The version of the profile parcel
     */
    readonly version: number;
}
/**
 * This data source can read the Transport Management VPN Interface Ethernet profile parcel.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getTransportManagementVpnInterfaceEthernetProfileParcel({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportManagementVpnProfileParcelId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getTransportManagementVpnInterfaceEthernetProfileParcelOutput(args: GetTransportManagementVpnInterfaceEthernetProfileParcelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTransportManagementVpnInterfaceEthernetProfileParcelResult> {
    return pulumi.output(args).apply((a: any) => getTransportManagementVpnInterfaceEthernetProfileParcel(a, opts))
}

/**
 * A collection of arguments for invoking getTransportManagementVpnInterfaceEthernetProfileParcel.
 */
export interface GetTransportManagementVpnInterfaceEthernetProfileParcelOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the profile parcel
     */
    id: pulumi.Input<string>;
    /**
     * Transport Management VPN Profile Parcel ID
     */
    transportManagementVpnProfileParcelId: pulumi.Input<string>;
}
