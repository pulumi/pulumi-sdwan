// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Cisco Logging feature template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getCiscoLoggingFeatureTemplate({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 * });
 * ```
 */
export function getCiscoLoggingFeatureTemplate(args?: GetCiscoLoggingFeatureTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetCiscoLoggingFeatureTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getCiscoLoggingFeatureTemplate:getCiscoLoggingFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCiscoLoggingFeatureTemplate.
 */
export interface GetCiscoLoggingFeatureTemplateArgs {
    /**
     * The id of the feature template
     */
    id?: string;
    /**
     * The name of the feature template
     */
    name?: string;
}

/**
 * A collection of values returned by getCiscoLoggingFeatureTemplate.
 */
export interface GetCiscoLoggingFeatureTemplateResult {
    /**
     * The description of the feature template
     */
    readonly description: string;
    /**
     * List of supported device types
     */
    readonly deviceTypes: string[];
    /**
     * Enable logging to local disk
     */
    readonly diskLogging: boolean;
    /**
     * Variable name
     */
    readonly diskLoggingVariable: string;
    /**
     * The id of the feature template
     */
    readonly id: string;
    /**
     * Enable logging to remote server
     */
    readonly ipv4Servers: outputs.GetCiscoLoggingFeatureTemplateIpv4Server[];
    /**
     * Enable logging to remote IPv6 server
     */
    readonly ipv6Servers: outputs.GetCiscoLoggingFeatureTemplateIpv6Server[];
    /**
     * Set number of syslog files to create before discarding oldest files
     */
    readonly logRotations: number;
    /**
     * Variable name
     */
    readonly logRotationsVariable: string;
    /**
     * Set maximum size of file before it is rotated
     */
    readonly maxSize: number;
    /**
     * Variable name
     */
    readonly maxSizeVariable: string;
    /**
     * The name of the feature template
     */
    readonly name: string;
    /**
     * The template type
     */
    readonly templateType: string;
    /**
     * Configure a TLS profile
     */
    readonly tlsProfiles: outputs.GetCiscoLoggingFeatureTemplateTlsProfile[];
    /**
     * The version of the feature template
     */
    readonly version: number;
}
/**
 * This data source can read the Cisco Logging feature template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getCiscoLoggingFeatureTemplate({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 * });
 * ```
 */
export function getCiscoLoggingFeatureTemplateOutput(args?: GetCiscoLoggingFeatureTemplateOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetCiscoLoggingFeatureTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getCiscoLoggingFeatureTemplate:getCiscoLoggingFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCiscoLoggingFeatureTemplate.
 */
export interface GetCiscoLoggingFeatureTemplateOutputArgs {
    /**
     * The id of the feature template
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
}
