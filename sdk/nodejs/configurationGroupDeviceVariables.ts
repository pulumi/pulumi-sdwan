// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Configuration Group Device Variables .
 *   - Minimum SD-WAN Manager version: `20.12.0`
 */
export class ConfigurationGroupDeviceVariables extends pulumi.CustomResource {
    /**
     * Get an existing ConfigurationGroupDeviceVariables resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConfigurationGroupDeviceVariablesState, opts?: pulumi.CustomResourceOptions): ConfigurationGroupDeviceVariables {
        return new ConfigurationGroupDeviceVariables(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/configurationGroupDeviceVariables:ConfigurationGroupDeviceVariables';

    /**
     * Returns true if the given object is an instance of ConfigurationGroupDeviceVariables.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConfigurationGroupDeviceVariables {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationGroupDeviceVariables.__pulumiType;
    }

    /**
     * Configuration Group ID
     */
    public readonly configurationGroupId!: pulumi.Output<string>;
    /**
     * List of devices
     */
    public readonly devices!: pulumi.Output<outputs.ConfigurationGroupDeviceVariablesDevice[]>;
    /**
     * List of device groups
     */
    public readonly groups!: pulumi.Output<outputs.ConfigurationGroupDeviceVariablesGroup[] | undefined>;
    /**
     * Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
     */
    public readonly solution!: pulumi.Output<string>;

    /**
     * Create a ConfigurationGroupDeviceVariables resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConfigurationGroupDeviceVariablesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConfigurationGroupDeviceVariablesArgs | ConfigurationGroupDeviceVariablesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConfigurationGroupDeviceVariablesState | undefined;
            resourceInputs["configurationGroupId"] = state ? state.configurationGroupId : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["solution"] = state ? state.solution : undefined;
        } else {
            const args = argsOrState as ConfigurationGroupDeviceVariablesArgs | undefined;
            if ((!args || args.configurationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationGroupId'");
            }
            if ((!args || args.devices === undefined) && !opts.urn) {
                throw new Error("Missing required property 'devices'");
            }
            if ((!args || args.solution === undefined) && !opts.urn) {
                throw new Error("Missing required property 'solution'");
            }
            resourceInputs["configurationGroupId"] = args ? args.configurationGroupId : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["solution"] = args ? args.solution : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConfigurationGroupDeviceVariables.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConfigurationGroupDeviceVariables resources.
 */
export interface ConfigurationGroupDeviceVariablesState {
    /**
     * Configuration Group ID
     */
    configurationGroupId?: pulumi.Input<string>;
    /**
     * List of devices
     */
    devices?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupDeviceVariablesDevice>[]>;
    /**
     * List of device groups
     */
    groups?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupDeviceVariablesGroup>[]>;
    /**
     * Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
     */
    solution?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConfigurationGroupDeviceVariables resource.
 */
export interface ConfigurationGroupDeviceVariablesArgs {
    /**
     * Configuration Group ID
     */
    configurationGroupId: pulumi.Input<string>;
    /**
     * List of devices
     */
    devices: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupDeviceVariablesDevice>[]>;
    /**
     * List of device groups
     */
    groups?: pulumi.Input<pulumi.Input<inputs.ConfigurationGroupDeviceVariablesGroup>[]>;
    /**
     * Type of solution - Choices: `mobility`, `sdwan`, `nfvirtual`
     */
    solution: pulumi.Input<string>;
}
