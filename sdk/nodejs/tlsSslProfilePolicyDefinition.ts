// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a TLS SSL Profile Policy Definition .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.TlsSslProfilePolicyDefinition("example", {
 *     name: "Example",
 *     description: "My description",
 *     mode: "security",
 *     decryptCategories: ["alcohol-and-tobacco"],
 *     neverDecryptCategories: ["auctions"],
 *     skipDecryptCategories: ["cdns"],
 *     decryptThreshold: "high-risk",
 *     reputation: false,
 *     failDecrypt: true,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class TlsSslProfilePolicyDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TlsSslProfilePolicyDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsSslProfilePolicyDefinitionState, opts?: pulumi.CustomResourceOptions): TlsSslProfilePolicyDefinition {
        return new TlsSslProfilePolicyDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition';

    /**
     * Returns true if the given object is an instance of TlsSslProfilePolicyDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsSslProfilePolicyDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsSslProfilePolicyDefinition.__pulumiType;
    }

    /**
     * Allow URL list ID
     */
    public readonly allowUrlListId!: pulumi.Output<string | undefined>;
    /**
     * Allow URL list version
     */
    public readonly allowUrlListVersion!: pulumi.Output<number | undefined>;
    /**
     * Block URL list ID
     */
    public readonly blockUrlListId!: pulumi.Output<string | undefined>;
    /**
     * Block URL list version
     */
    public readonly blockUrlListVersion!: pulumi.Output<number | undefined>;
    /**
     * Categories that should be decrypted
     */
    public readonly decryptCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Decrypt threshold - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
     */
    public readonly decryptThreshold!: pulumi.Output<string | undefined>;
    /**
     * The description of the policy definition.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Fail decrypt enabled
     */
    public readonly failDecrypt!: pulumi.Output<boolean | undefined>;
    /**
     * The policy mode - Choices: `security`, `unified`
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name of the policy definition.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Categories that should never be decrypted
     */
    public readonly neverDecryptCategories!: pulumi.Output<string[] | undefined>;
    /**
     * Reputation enabled
     */
    public readonly reputation!: pulumi.Output<boolean | undefined>;
    /**
     * Categories that should skipped
     */
    public readonly skipDecryptCategories!: pulumi.Output<string[] | undefined>;
    /**
     * The version of the object
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a TlsSslProfilePolicyDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsSslProfilePolicyDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsSslProfilePolicyDefinitionArgs | TlsSslProfilePolicyDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsSslProfilePolicyDefinitionState | undefined;
            resourceInputs["allowUrlListId"] = state ? state.allowUrlListId : undefined;
            resourceInputs["allowUrlListVersion"] = state ? state.allowUrlListVersion : undefined;
            resourceInputs["blockUrlListId"] = state ? state.blockUrlListId : undefined;
            resourceInputs["blockUrlListVersion"] = state ? state.blockUrlListVersion : undefined;
            resourceInputs["decryptCategories"] = state ? state.decryptCategories : undefined;
            resourceInputs["decryptThreshold"] = state ? state.decryptThreshold : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["failDecrypt"] = state ? state.failDecrypt : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["neverDecryptCategories"] = state ? state.neverDecryptCategories : undefined;
            resourceInputs["reputation"] = state ? state.reputation : undefined;
            resourceInputs["skipDecryptCategories"] = state ? state.skipDecryptCategories : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TlsSslProfilePolicyDefinitionArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["allowUrlListId"] = args ? args.allowUrlListId : undefined;
            resourceInputs["allowUrlListVersion"] = args ? args.allowUrlListVersion : undefined;
            resourceInputs["blockUrlListId"] = args ? args.blockUrlListId : undefined;
            resourceInputs["blockUrlListVersion"] = args ? args.blockUrlListVersion : undefined;
            resourceInputs["decryptCategories"] = args ? args.decryptCategories : undefined;
            resourceInputs["decryptThreshold"] = args ? args.decryptThreshold : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["failDecrypt"] = args ? args.failDecrypt : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["neverDecryptCategories"] = args ? args.neverDecryptCategories : undefined;
            resourceInputs["reputation"] = args ? args.reputation : undefined;
            resourceInputs["skipDecryptCategories"] = args ? args.skipDecryptCategories : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsSslProfilePolicyDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsSslProfilePolicyDefinition resources.
 */
export interface TlsSslProfilePolicyDefinitionState {
    /**
     * Allow URL list ID
     */
    allowUrlListId?: pulumi.Input<string>;
    /**
     * Allow URL list version
     */
    allowUrlListVersion?: pulumi.Input<number>;
    /**
     * Block URL list ID
     */
    blockUrlListId?: pulumi.Input<string>;
    /**
     * Block URL list version
     */
    blockUrlListVersion?: pulumi.Input<number>;
    /**
     * Categories that should be decrypted
     */
    decryptCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Decrypt threshold - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
     */
    decryptThreshold?: pulumi.Input<string>;
    /**
     * The description of the policy definition.
     */
    description?: pulumi.Input<string>;
    /**
     * Fail decrypt enabled
     */
    failDecrypt?: pulumi.Input<boolean>;
    /**
     * The policy mode - Choices: `security`, `unified`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy definition.
     */
    name?: pulumi.Input<string>;
    /**
     * Categories that should never be decrypted
     */
    neverDecryptCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reputation enabled
     */
    reputation?: pulumi.Input<boolean>;
    /**
     * Categories that should skipped
     */
    skipDecryptCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version of the object
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TlsSslProfilePolicyDefinition resource.
 */
export interface TlsSslProfilePolicyDefinitionArgs {
    /**
     * Allow URL list ID
     */
    allowUrlListId?: pulumi.Input<string>;
    /**
     * Allow URL list version
     */
    allowUrlListVersion?: pulumi.Input<number>;
    /**
     * Block URL list ID
     */
    blockUrlListId?: pulumi.Input<string>;
    /**
     * Block URL list version
     */
    blockUrlListVersion?: pulumi.Input<number>;
    /**
     * Categories that should be decrypted
     */
    decryptCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Decrypt threshold - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
     */
    decryptThreshold?: pulumi.Input<string>;
    /**
     * The description of the policy definition.
     */
    description: pulumi.Input<string>;
    /**
     * Fail decrypt enabled
     */
    failDecrypt?: pulumi.Input<boolean>;
    /**
     * The policy mode - Choices: `security`, `unified`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy definition.
     */
    name?: pulumi.Input<string>;
    /**
     * Categories that should never be decrypted
     */
    neverDecryptCategories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Reputation enabled
     */
    reputation?: pulumi.Input<boolean>;
    /**
     * Categories that should skipped
     */
    skipDecryptCategories?: pulumi.Input<pulumi.Input<string>[]>;
}
