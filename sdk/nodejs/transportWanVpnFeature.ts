// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport WAN VPN Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "transport_wan_vpn_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnFeature:TransportWanVpnFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class TransportWanVpnFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportWanVpnFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportWanVpnFeatureState, opts?: pulumi.CustomResourceOptions): TransportWanVpnFeature {
        return new TransportWanVpnFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportWanVpnFeature:TransportWanVpnFeature';

    /**
     * Returns true if the given object is an instance of TransportWanVpnFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportWanVpnFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportWanVpnFeature.__pulumiType;
    }

    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Enhance ECMP Keying
     *   - Default value: `false`
     */
    declare public readonly enhanceEcmpKeying: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly enhanceEcmpKeyingVariable: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    /**
     * IPv4 Static Route
     */
    declare public readonly ipv4StaticRoutes: pulumi.Output<outputs.TransportWanVpnFeatureIpv4StaticRoute[] | undefined>;
    /**
     * IPv6 Static Route
     */
    declare public readonly ipv6StaticRoutes: pulumi.Output<outputs.TransportWanVpnFeatureIpv6StaticRoute[] | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * NAT64 V4 Pool
     */
    declare public readonly nat64V4Pools: pulumi.Output<outputs.TransportWanVpnFeatureNat64V4Pool[] | undefined>;
    declare public readonly newHostMappings: pulumi.Output<outputs.TransportWanVpnFeatureNewHostMapping[] | undefined>;
    /**
     * Primary DNS Address (IPv4)
     */
    declare public readonly primaryDnsAddressIpv4: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly primaryDnsAddressIpv4Variable: pulumi.Output<string | undefined>;
    /**
     * Primary DNS Address (IPv6)
     */
    declare public readonly primaryDnsAddressIpv6: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly primaryDnsAddressIpv6Variable: pulumi.Output<string | undefined>;
    /**
     * Secondary DNS Address (IPv4)
     */
    declare public readonly secondaryDnsAddressIpv4: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly secondaryDnsAddressIpv4Variable: pulumi.Output<string | undefined>;
    /**
     * Secondary DNS Address (IPv6)
     */
    declare public readonly secondaryDnsAddressIpv6: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly secondaryDnsAddressIpv6Variable: pulumi.Output<string | undefined>;
    /**
     * Service
     */
    declare public readonly services: pulumi.Output<outputs.TransportWanVpnFeatureService[] | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * VPN
     *   - Default value: `0`
     */
    declare public readonly vpn: pulumi.Output<number | undefined>;

    /**
     * Create a TransportWanVpnFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportWanVpnFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportWanVpnFeatureArgs | TransportWanVpnFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportWanVpnFeatureState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["enhanceEcmpKeying"] = state?.enhanceEcmpKeying;
            resourceInputs["enhanceEcmpKeyingVariable"] = state?.enhanceEcmpKeyingVariable;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["ipv4StaticRoutes"] = state?.ipv4StaticRoutes;
            resourceInputs["ipv6StaticRoutes"] = state?.ipv6StaticRoutes;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat64V4Pools"] = state?.nat64V4Pools;
            resourceInputs["newHostMappings"] = state?.newHostMappings;
            resourceInputs["primaryDnsAddressIpv4"] = state?.primaryDnsAddressIpv4;
            resourceInputs["primaryDnsAddressIpv4Variable"] = state?.primaryDnsAddressIpv4Variable;
            resourceInputs["primaryDnsAddressIpv6"] = state?.primaryDnsAddressIpv6;
            resourceInputs["primaryDnsAddressIpv6Variable"] = state?.primaryDnsAddressIpv6Variable;
            resourceInputs["secondaryDnsAddressIpv4"] = state?.secondaryDnsAddressIpv4;
            resourceInputs["secondaryDnsAddressIpv4Variable"] = state?.secondaryDnsAddressIpv4Variable;
            resourceInputs["secondaryDnsAddressIpv6"] = state?.secondaryDnsAddressIpv6;
            resourceInputs["secondaryDnsAddressIpv6Variable"] = state?.secondaryDnsAddressIpv6Variable;
            resourceInputs["services"] = state?.services;
            resourceInputs["version"] = state?.version;
            resourceInputs["vpn"] = state?.vpn;
        } else {
            const args = argsOrState as TransportWanVpnFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["enhanceEcmpKeying"] = args?.enhanceEcmpKeying;
            resourceInputs["enhanceEcmpKeyingVariable"] = args?.enhanceEcmpKeyingVariable;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["ipv4StaticRoutes"] = args?.ipv4StaticRoutes;
            resourceInputs["ipv6StaticRoutes"] = args?.ipv6StaticRoutes;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat64V4Pools"] = args?.nat64V4Pools;
            resourceInputs["newHostMappings"] = args?.newHostMappings;
            resourceInputs["primaryDnsAddressIpv4"] = args?.primaryDnsAddressIpv4;
            resourceInputs["primaryDnsAddressIpv4Variable"] = args?.primaryDnsAddressIpv4Variable;
            resourceInputs["primaryDnsAddressIpv6"] = args?.primaryDnsAddressIpv6;
            resourceInputs["primaryDnsAddressIpv6Variable"] = args?.primaryDnsAddressIpv6Variable;
            resourceInputs["secondaryDnsAddressIpv4"] = args?.secondaryDnsAddressIpv4;
            resourceInputs["secondaryDnsAddressIpv4Variable"] = args?.secondaryDnsAddressIpv4Variable;
            resourceInputs["secondaryDnsAddressIpv6"] = args?.secondaryDnsAddressIpv6;
            resourceInputs["secondaryDnsAddressIpv6Variable"] = args?.secondaryDnsAddressIpv6Variable;
            resourceInputs["services"] = args?.services;
            resourceInputs["vpn"] = args?.vpn;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportWanVpnFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportWanVpnFeature resources.
 */
export interface TransportWanVpnFeatureState {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Enhance ECMP Keying
     *   - Default value: `false`
     */
    enhanceEcmpKeying?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    enhanceEcmpKeyingVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * IPv4 Static Route
     */
    ipv4StaticRoutes?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureIpv4StaticRoute>[]>;
    /**
     * IPv6 Static Route
     */
    ipv6StaticRoutes?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureIpv6StaticRoute>[]>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * NAT64 V4 Pool
     */
    nat64V4Pools?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureNat64V4Pool>[]>;
    newHostMappings?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureNewHostMapping>[]>;
    /**
     * Primary DNS Address (IPv4)
     */
    primaryDnsAddressIpv4?: pulumi.Input<string>;
    /**
     * Variable name
     */
    primaryDnsAddressIpv4Variable?: pulumi.Input<string>;
    /**
     * Primary DNS Address (IPv6)
     */
    primaryDnsAddressIpv6?: pulumi.Input<string>;
    /**
     * Variable name
     */
    primaryDnsAddressIpv6Variable?: pulumi.Input<string>;
    /**
     * Secondary DNS Address (IPv4)
     */
    secondaryDnsAddressIpv4?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryDnsAddressIpv4Variable?: pulumi.Input<string>;
    /**
     * Secondary DNS Address (IPv6)
     */
    secondaryDnsAddressIpv6?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryDnsAddressIpv6Variable?: pulumi.Input<string>;
    /**
     * Service
     */
    services?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureService>[]>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
    /**
     * VPN
     *   - Default value: `0`
     */
    vpn?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransportWanVpnFeature resource.
 */
export interface TransportWanVpnFeatureArgs {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Enhance ECMP Keying
     *   - Default value: `false`
     */
    enhanceEcmpKeying?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    enhanceEcmpKeyingVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * IPv4 Static Route
     */
    ipv4StaticRoutes?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureIpv4StaticRoute>[]>;
    /**
     * IPv6 Static Route
     */
    ipv6StaticRoutes?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureIpv6StaticRoute>[]>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * NAT64 V4 Pool
     */
    nat64V4Pools?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureNat64V4Pool>[]>;
    newHostMappings?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureNewHostMapping>[]>;
    /**
     * Primary DNS Address (IPv4)
     */
    primaryDnsAddressIpv4?: pulumi.Input<string>;
    /**
     * Variable name
     */
    primaryDnsAddressIpv4Variable?: pulumi.Input<string>;
    /**
     * Primary DNS Address (IPv6)
     */
    primaryDnsAddressIpv6?: pulumi.Input<string>;
    /**
     * Variable name
     */
    primaryDnsAddressIpv6Variable?: pulumi.Input<string>;
    /**
     * Secondary DNS Address (IPv4)
     */
    secondaryDnsAddressIpv4?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryDnsAddressIpv4Variable?: pulumi.Input<string>;
    /**
     * Secondary DNS Address (IPv6)
     */
    secondaryDnsAddressIpv6?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryDnsAddressIpv6Variable?: pulumi.Input<string>;
    /**
     * Service
     */
    services?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnFeatureService>[]>;
    /**
     * VPN
     *   - Default value: `0`
     */
    vpn?: pulumi.Input<number>;
}
