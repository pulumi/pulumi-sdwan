// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Policy Group .
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.PolicyGroup("example", {
 *     name: "PG_1",
 *     description: "My policy group 1",
 *     solution: "sdwan",
 *     featureProfileIds: ["f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"],
 *     devices: [{
 *         id: "C8K-40C0CCFD-9EA8-2B2E-E73B-32C5924EC79B",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/policyGroup:PolicyGroup example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class PolicyGroup extends pulumi.CustomResource {
    /**
     * Get an existing PolicyGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyGroupState, opts?: pulumi.CustomResourceOptions): PolicyGroup {
        return new PolicyGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/policyGroup:PolicyGroup';

    /**
     * Returns true if the given object is an instance of PolicyGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PolicyGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PolicyGroup.__pulumiType;
    }

    /**
     * Description
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of devices
     */
    public readonly devices!: pulumi.Output<outputs.PolicyGroupDevice[] | undefined>;
    /**
     * List of feature profile IDs
     */
    public readonly featureProfileIds!: pulumi.Output<string[] | undefined>;
    /**
     * The name of the policy group
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of all associated policy versions
     */
    public readonly policyVersions!: pulumi.Output<string[] | undefined>;
    /**
     * Type of solution - Choices: `sdwan`
     */
    public readonly solution!: pulumi.Output<string>;

    /**
     * Create a PolicyGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyGroupArgs | PolicyGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["featureProfileIds"] = state ? state.featureProfileIds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policyVersions"] = state ? state.policyVersions : undefined;
            resourceInputs["solution"] = state ? state.solution : undefined;
        } else {
            const args = argsOrState as PolicyGroupArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.solution === undefined) && !opts.urn) {
                throw new Error("Missing required property 'solution'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["featureProfileIds"] = args ? args.featureProfileIds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policyVersions"] = args ? args.policyVersions : undefined;
            resourceInputs["solution"] = args ? args.solution : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PolicyGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PolicyGroup resources.
 */
export interface PolicyGroupState {
    /**
     * Description
     */
    description?: pulumi.Input<string>;
    /**
     * List of devices
     */
    devices?: pulumi.Input<pulumi.Input<inputs.PolicyGroupDevice>[]>;
    /**
     * List of feature profile IDs
     */
    featureProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the policy group
     */
    name?: pulumi.Input<string>;
    /**
     * List of all associated policy versions
     */
    policyVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of solution - Choices: `sdwan`
     */
    solution?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PolicyGroup resource.
 */
export interface PolicyGroupArgs {
    /**
     * Description
     */
    description: pulumi.Input<string>;
    /**
     * List of devices
     */
    devices?: pulumi.Input<pulumi.Input<inputs.PolicyGroupDevice>[]>;
    /**
     * List of feature profile IDs
     */
    featureProfileIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the policy group
     */
    name?: pulumi.Input<string>;
    /**
     * List of all associated policy versions
     */
    policyVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of solution - Choices: `sdwan`
     */
    solution: pulumi.Input<string>;
}
