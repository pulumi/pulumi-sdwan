// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the VPN Interface DSL PPPoA feature template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getVpnInterfaceDslPppoaFeatureTemplate({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 * });
 * ```
 */
export function getVpnInterfaceDslPppoaFeatureTemplate(args?: GetVpnInterfaceDslPppoaFeatureTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetVpnInterfaceDslPppoaFeatureTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getVpnInterfaceDslPppoaFeatureTemplate:getVpnInterfaceDslPppoaFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpnInterfaceDslPppoaFeatureTemplate.
 */
export interface GetVpnInterfaceDslPppoaFeatureTemplateArgs {
    /**
     * The id of the feature template
     */
    id?: string;
    /**
     * The name of the feature template
     */
    name?: string;
}

/**
 * A collection of values returned by getVpnInterfaceDslPppoaFeatureTemplate.
 */
export interface GetVpnInterfaceDslPppoaFeatureTemplateResult {
    /**
     * Apply ACL
     */
    readonly accessLists: outputs.GetVpnInterfaceDslPppoaFeatureTemplateAccessList[];
    /**
     * Interface description
     */
    readonly atmDescription: string;
    /**
     * Variable name
     */
    readonly atmDescriptionVariable: string;
    /**
     * ATM Sub interface Name
     */
    readonly atmSubInterfaceName: string;
    /**
     * Variable name
     */
    readonly atmSubInterfaceNameVariable: string;
    /**
     * Interface downstream bandwidth capacity, in kbps
     */
    readonly bandwidthDownstream: number;
    /**
     * Variable name
     */
    readonly bandwidthDownstreamVariable: string;
    /**
     * Interface upstream bandwidth capacity, in kbps
     */
    readonly bandwidthUpstream: number;
    /**
     * Variable name
     */
    readonly bandwidthUpstreamVariable: string;
    /**
     * CHAP Hostname
     */
    readonly chapHostname: string;
    /**
     * Variable name
     */
    readonly chapHostnameVariable: string;
    /**
     * Specify ppp authentication Password
     */
    readonly chapPppAuthPassword: string;
    /**
     * Variable name
     */
    readonly chapPppAuthPasswordVariable: string;
    /**
     * Enable core region
     */
    readonly coreRegion: string;
    /**
     * Variable name
     */
    readonly coreRegionVariable: string;
    /**
     * The description of the feature template
     */
    readonly description: string;
    /**
     * List of supported device types
     */
    readonly deviceTypes: string[];
    /**
     * Enable core region
     */
    readonly enableCoreRegion: boolean;
    /**
     * Variable name
     */
    readonly enableCoreRegionVariable: string;
    /**
     * The id of the feature template
     */
    readonly id: string;
    /**
     * IP Directed-Broadcast
     */
    readonly ipDirectedBroadcast: boolean;
    /**
     * Variable name
     */
    readonly ipDirectedBroadcastVariable: string;
    /**
     * Interface MTU \n\n, in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * The name of the feature template
     */
    readonly name: string;
    /**
     * Network Address Translation on this interface
     */
    readonly nat: boolean;
    /**
     * Block inbound ICMP error messages
     */
    readonly natBlockIcmpError: boolean;
    /**
     * Variable name
     */
    readonly natBlockIcmpErrorVariable: string;
    /**
     * Set port-forwarding rules for NAT on this interface
     */
    readonly natPortForwards: outputs.GetVpnInterfaceDslPppoaFeatureTemplateNatPortForward[];
    /**
     * Set NAT refresh mode
     */
    readonly natRefreshMode: string;
    /**
     * Variable name
     */
    readonly natRefreshModeVariable: string;
    /**
     * Respond to ping requests to NAT interface ip address from the public side
     */
    readonly natResponseToPing: boolean;
    /**
     * Variable name
     */
    readonly natResponseToPingVariable: string;
    /**
     * Set NAT TCP session timeout, in minutes
     */
    readonly natTcpTimeout: number;
    /**
     * Variable name
     */
    readonly natTcpTimeoutVariable: string;
    /**
     * Set NAT UDP session timeout, in minutes
     */
    readonly natUdpTimeout: number;
    /**
     * Variable name
     */
    readonly natUdpTimeoutVariable: string;
    /**
     * PAP outbound Password
     */
    readonly papPassword: boolean;
    /**
     * Specify ppp authentication Password
     */
    readonly papPppAuthPassword: string;
    /**
     * Variable name
     */
    readonly papPppAuthPasswordVariable: string;
    /**
     * PAP outbound Sent Username
     */
    readonly papUsername: string;
    /**
     * Variable name
     */
    readonly papUsernameVariable: string;
    /**
     * Per-tunnel Qos
     */
    readonly perTunnelQos: boolean;
    /**
     * Per-tunnel QoS Aggregator
     */
    readonly perTunnelQosAggregator: boolean;
    /**
     * Variable name
     */
    readonly perTunnelQosAggregatorVariable: string;
    /**
     * Variable name
     */
    readonly perTunnelQosVariable: string;
    /**
     * Enable policer
     */
    readonly policers: outputs.GetVpnInterfaceDslPppoaFeatureTemplatePolicer[];
    /**
     * PPP Link Authentication Protocol
     */
    readonly pppAuthenticationProtocol: string;
    /**
     * PPP Authentication Protocol PAP
     */
    readonly pppAuthenticationProtocolPap: boolean;
    /**
     * Variable name
     */
    readonly pppAuthenticationProtocolVariable: string;
    /**
     * Authenticate remote on incoming call only
     */
    readonly pppAuthenticationType: string;
    /**
     * pvc
     */
    readonly pvcs: outputs.GetVpnInterfaceDslPppoaFeatureTemplatePvc[];
    /**
     * Adaptive QoS default downstream bandwidth
     */
    readonly qosAdaptiveBandwidthDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveBandwidthDownstreamVariable: string;
    /**
     * Adaptive QoS default upstream bandwidth
     */
    readonly qosAdaptiveBandwidthUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveBandwidthUpstreamVariable: string;
    /**
     * Downstream max bandwidth limit
     */
    readonly qosAdaptiveMaxDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMaxDownstreamVariable: string;
    /**
     * Upstream max bandwidth limit
     */
    readonly qosAdaptiveMaxUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMaxUpstreamVariable: string;
    /**
     * Downstream min bandwidth limit
     */
    readonly qosAdaptiveMinDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMinDownstreamVariable: string;
    /**
     * Upstream min bandwidth limit
     */
    readonly qosAdaptiveMinUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMinUpstreamVariable: string;
    /**
     * Periodic timer for adaptive QoS in minutes
     */
    readonly qosAdaptivePeriod: number;
    /**
     * Variable name
     */
    readonly qosAdaptivePeriodVariable: string;
    /**
     * Name of QoS map
     */
    readonly qosMap: string;
    /**
     * Variable name
     */
    readonly qosMapVariable: string;
    /**
     * Name of VPN QoS map
     */
    readonly qosMapVpn: string;
    /**
     * Variable name
     */
    readonly qosMapVpnVariable: string;
    /**
     * Enable secondary region
     */
    readonly secondaryRegion: string;
    /**
     * Variable name
     */
    readonly secondaryRegionVariable: string;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     */
    readonly shapingRate: number;
    /**
     * Variable name
     */
    readonly shapingRateVariable: string;
    /**
     * Administrative state
     */
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMss: number;
    /**
     * Variable name
     */
    readonly tcpMssVariable: string;
    /**
     * The template type
     */
    readonly templateType: string;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    readonly tlocExtension: string;
    /**
     * Variable name
     */
    readonly tlocExtensionVariable: string;
    /**
     * Variable name
     */
    readonly trackerVariable: string;
    /**
     * Enable tracker for this interface
     */
    readonly trackers: string[];
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     */
    readonly tunnelInterfaceAllowAll: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowAllVariable: string;
    /**
     * Allow/deny BGP
     */
    readonly tunnelInterfaceAllowBgp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowBgpVariable: string;
    /**
     * Allow/Deny DHCP
     */
    readonly tunnelInterfaceAllowDhcp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowDhcpVariable: string;
    /**
     * Allow/Deny DNS
     */
    readonly tunnelInterfaceAllowDns: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowDnsVariable: string;
    /**
     * Allow/Deny Https
     */
    readonly tunnelInterfaceAllowHttps: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowHttpsVariable: string;
    /**
     * Allow/Deny ICMP
     */
    readonly tunnelInterfaceAllowIcmp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowIcmpVariable: string;
    /**
     * Allow/Deny NETCONF
     */
    readonly tunnelInterfaceAllowNetconf: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowNetconfVariable: string;
    /**
     * Allow/Deny NTP
     */
    readonly tunnelInterfaceAllowNtp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowNtpVariable: string;
    /**
     * Allow/Deny OSPF
     */
    readonly tunnelInterfaceAllowOspf: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowOspfVariable: string;
    /**
     * Allow/Deny SNMP
     */
    readonly tunnelInterfaceAllowSnmp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowSnmpVariable: string;
    /**
     * Allow/Deny SSH
     */
    readonly tunnelInterfaceAllowSsh: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowSshVariable: string;
    /**
     * Allow/Deny STUN
     */
    readonly tunnelInterfaceAllowStun: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowStunVariable: string;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    readonly tunnelInterfaceBindLoopbackTunnel: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceBindLoopbackTunnelVariable: string;
    /**
     * Set TLOC as border TLOC
     */
    readonly tunnelInterfaceBorder: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceBorderVariable: string;
    /**
     * Set carrier for TLOC
     */
    readonly tunnelInterfaceCarrier: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceCarrierVariable: string;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     */
    readonly tunnelInterfaceClearDontFragment: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceClearDontFragmentVariable: string;
    /**
     * Set color for TLOC
     */
    readonly tunnelInterfaceColor: string;
    /**
     * Restrict this TLOC behavior
     */
    readonly tunnelInterfaceColorRestrict: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceColorVariable: string;
    /**
     * Allow Control Connection
     */
    readonly tunnelInterfaceControlConnections: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceControlConnectionsVariable: string;
    /**
     * Encapsulation for TLOC
     */
    readonly tunnelInterfaceEncapsulations: outputs.GetVpnInterfaceDslPppoaFeatureTemplateTunnelInterfaceEncapsulation[];
    /**
     * Variable name
     */
    readonly tunnelInterfaceExcludeControllerGroupListVariable: string;
    /**
     * Exclude the following controller groups defined in this list
     */
    readonly tunnelInterfaceExcludeControllerGroupLists: number[];
    /**
     * List of groups
     */
    readonly tunnelInterfaceGroups: number[];
    /**
     * Variable name
     */
    readonly tunnelInterfaceGroupsVariable: string;
    /**
     * Set time period of control hello packets \n\n milli seconds
     */
    readonly tunnelInterfaceHelloInterval: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceHelloIntervalVariable: string;
    /**
     * Set tolerance of control hello packets \n\n seconds
     */
    readonly tunnelInterfaceHelloTolerance: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceHelloToleranceVariable: string;
    /**
     * Set TLOC as last resort
     */
    readonly tunnelInterfaceLastResortCircuit: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceLastResortCircuitVariable: string;
    /**
     * Set the interface as a low-bandwidth circuit
     */
    readonly tunnelInterfaceLowBandwidthLink: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceLowBandwidthLinkVariable: string;
    /**
     * Set the maximum number of control connections for this TLOC
     */
    readonly tunnelInterfaceMaxControlConnections: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceMaxControlConnectionsVariable: string;
    /**
     * Set time period of nat refresh packets \n\n seconds
     */
    readonly tunnelInterfaceNatRefreshInterval: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceNatRefreshIntervalVariable: string;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     */
    readonly tunnelInterfaceNetworkBroadcast: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceNetworkBroadcastVariable: string;
    /**
     * Disallow port hopping on the tunnel interface
     */
    readonly tunnelInterfacePortHop: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfacePortHopVariable: string;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     */
    readonly tunnelInterfaceTunnelTcpMss: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceTunnelTcpMssVariable: string;
    /**
     * Put this wan interface in STUN mode only
     */
    readonly tunnelInterfaceVbondAsStunServer: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceVbondAsStunServerVariable: string;
    /**
     * Set interface preference for control connection to vManage \n\n
     */
    readonly tunnelInterfaceVmanageConnectionPreference: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceVmanageConnectionPreferenceVariable: string;
    /**
     * Set tunnel QoS mode
     */
    readonly tunnelQosMode: string;
    /**
     * Variable name
     */
    readonly tunnelQosModeVariable: string;
    /**
     * vdsl
     */
    readonly vdslConfigurations: outputs.GetVpnInterfaceDslPppoaFeatureTemplateVdslConfiguration[];
    /**
     * The version of the feature template
     */
    readonly version: number;
    /**
     * Name of rewrite rule
     */
    readonly writeRule: string;
    /**
     * Variable name
     */
    readonly writeRuleVariable: string;
}
/**
 * This data source can read the VPN Interface DSL PPPoA feature template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getVpnInterfaceDslPppoaFeatureTemplate({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 * });
 * ```
 */
export function getVpnInterfaceDslPppoaFeatureTemplateOutput(args?: GetVpnInterfaceDslPppoaFeatureTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVpnInterfaceDslPppoaFeatureTemplateResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getVpnInterfaceDslPppoaFeatureTemplate:getVpnInterfaceDslPppoaFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getVpnInterfaceDslPppoaFeatureTemplate.
 */
export interface GetVpnInterfaceDslPppoaFeatureTemplateOutputArgs {
    /**
     * The id of the feature template
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
}
