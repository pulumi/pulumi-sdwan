// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a System SNMP Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "system_snmp_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/systemSnmpFeature:SystemSnmpFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class SystemSnmpFeature extends pulumi.CustomResource {
    /**
     * Get an existing SystemSnmpFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemSnmpFeatureState, opts?: pulumi.CustomResourceOptions): SystemSnmpFeature {
        return new SystemSnmpFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/systemSnmpFeature:SystemSnmpFeature';

    /**
     * Returns true if the given object is an instance of SystemSnmpFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemSnmpFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemSnmpFeature.__pulumiType;
    }

    /**
     * Configure SNMP community
     */
    declare public readonly communities: pulumi.Output<outputs.SystemSnmpFeatureCommunity[] | undefined>;
    /**
     * Set the contact for this managed node
     */
    declare public readonly contactPerson: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly contactPersonVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    /**
     * Configure an SNMP group
     */
    declare public readonly groups: pulumi.Output<outputs.SystemSnmpFeatureGroup[] | undefined>;
    /**
     * Set the physical location of this managed node
     */
    declare public readonly locationOfDevice: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly locationOfDeviceVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Enable or disable SNMP
     *   - Default value: `false`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * Configure SNMP server to receive SNMP traps
     */
    declare public readonly trapTargetServers: pulumi.Output<outputs.SystemSnmpFeatureTrapTargetServer[] | undefined>;
    /**
     * Configure an SNMP user
     */
    declare public readonly users: pulumi.Output<outputs.SystemSnmpFeatureUser[] | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * Configure a view record
     */
    declare public readonly views: pulumi.Output<outputs.SystemSnmpFeatureView[] | undefined>;

    /**
     * Create a SystemSnmpFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SystemSnmpFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemSnmpFeatureArgs | SystemSnmpFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemSnmpFeatureState | undefined;
            resourceInputs["communities"] = state?.communities;
            resourceInputs["contactPerson"] = state?.contactPerson;
            resourceInputs["contactPersonVariable"] = state?.contactPersonVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["groups"] = state?.groups;
            resourceInputs["locationOfDevice"] = state?.locationOfDevice;
            resourceInputs["locationOfDeviceVariable"] = state?.locationOfDeviceVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["trapTargetServers"] = state?.trapTargetServers;
            resourceInputs["users"] = state?.users;
            resourceInputs["version"] = state?.version;
            resourceInputs["views"] = state?.views;
        } else {
            const args = argsOrState as SystemSnmpFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["communities"] = args?.communities;
            resourceInputs["contactPerson"] = args?.contactPerson;
            resourceInputs["contactPersonVariable"] = args?.contactPersonVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["groups"] = args?.groups;
            resourceInputs["locationOfDevice"] = args?.locationOfDevice;
            resourceInputs["locationOfDeviceVariable"] = args?.locationOfDeviceVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["trapTargetServers"] = args?.trapTargetServers;
            resourceInputs["users"] = args?.users;
            resourceInputs["views"] = args?.views;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemSnmpFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemSnmpFeature resources.
 */
export interface SystemSnmpFeatureState {
    /**
     * Configure SNMP community
     */
    communities?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureCommunity>[]>;
    /**
     * Set the contact for this managed node
     */
    contactPerson?: pulumi.Input<string>;
    /**
     * Variable name
     */
    contactPersonVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Configure an SNMP group
     */
    groups?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureGroup>[]>;
    /**
     * Set the physical location of this managed node
     */
    locationOfDevice?: pulumi.Input<string>;
    /**
     * Variable name
     */
    locationOfDeviceVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable SNMP
     *   - Default value: `false`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Configure SNMP server to receive SNMP traps
     */
    trapTargetServers?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureTrapTargetServer>[]>;
    /**
     * Configure an SNMP user
     */
    users?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureUser>[]>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
    /**
     * Configure a view record
     */
    views?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureView>[]>;
}

/**
 * The set of arguments for constructing a SystemSnmpFeature resource.
 */
export interface SystemSnmpFeatureArgs {
    /**
     * Configure SNMP community
     */
    communities?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureCommunity>[]>;
    /**
     * Set the contact for this managed node
     */
    contactPerson?: pulumi.Input<string>;
    /**
     * Variable name
     */
    contactPersonVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Configure an SNMP group
     */
    groups?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureGroup>[]>;
    /**
     * Set the physical location of this managed node
     */
    locationOfDevice?: pulumi.Input<string>;
    /**
     * Variable name
     */
    locationOfDeviceVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable SNMP
     *   - Default value: `false`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Configure SNMP server to receive SNMP traps
     */
    trapTargetServers?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureTrapTargetServer>[]>;
    /**
     * Configure an SNMP user
     */
    users?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureUser>[]>;
    /**
     * Configure a view record
     */
    views?: pulumi.Input<pulumi.Input<inputs.SystemSnmpFeatureView>[]>;
}
