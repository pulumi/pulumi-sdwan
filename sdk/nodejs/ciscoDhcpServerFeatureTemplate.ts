// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco DHCP Server feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoDhcpServerFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoDhcpServerFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoDhcpServerFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoDhcpServerFeatureTemplate {
        return new CiscoDhcpServerFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoDhcpServerFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoDhcpServerFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoDhcpServerFeatureTemplate.__pulumiType;
    }

    /**
     * Configure IPv4 prefix range of the DHCP address pool
     */
    declare public readonly addressPool: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly addressPoolVariable: pulumi.Output<string | undefined>;
    /**
     * Set IP address of default gateway
     */
    declare public readonly defaultGateway: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly defaultGatewayVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Configure one or more DNS server IP addresses
     */
    declare public readonly dnsServers: pulumi.Output<string[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly dnsServersVariable: pulumi.Output<string | undefined>;
    /**
     * Set domain name client uses to resolve hostnames
     */
    declare public readonly domainName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly domainNameVariable: pulumi.Output<string | undefined>;
    /**
     * Configure IPv4 address to exclude from DHCP address pool
     */
    declare public readonly excludeAddresses: pulumi.Output<string[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly excludeAddressesVariable: pulumi.Output<string | undefined>;
    /**
     * Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     */
    declare public readonly interfaceMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceMtuVariable: pulumi.Output<string | undefined>;
    /**
     * Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     */
    declare public readonly leaseTime: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly leaseTimeVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Configure Options Code
     */
    declare public readonly options: pulumi.Output<outputs.CiscoDhcpServerFeatureTemplateOption[] | undefined>;
    /**
     * Configure static IP addresses
     */
    declare public readonly staticLeases: pulumi.Output<outputs.CiscoDhcpServerFeatureTemplateStaticLease[] | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Configure TFTP server IP addresses
     */
    declare public readonly tftpServers: pulumi.Output<string[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tftpServersVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a CiscoDhcpServerFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoDhcpServerFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoDhcpServerFeatureTemplateArgs | CiscoDhcpServerFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoDhcpServerFeatureTemplateState | undefined;
            resourceInputs["addressPool"] = state?.addressPool;
            resourceInputs["addressPoolVariable"] = state?.addressPoolVariable;
            resourceInputs["defaultGateway"] = state?.defaultGateway;
            resourceInputs["defaultGatewayVariable"] = state?.defaultGatewayVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["dnsServers"] = state?.dnsServers;
            resourceInputs["dnsServersVariable"] = state?.dnsServersVariable;
            resourceInputs["domainName"] = state?.domainName;
            resourceInputs["domainNameVariable"] = state?.domainNameVariable;
            resourceInputs["excludeAddresses"] = state?.excludeAddresses;
            resourceInputs["excludeAddressesVariable"] = state?.excludeAddressesVariable;
            resourceInputs["interfaceMtu"] = state?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = state?.interfaceMtuVariable;
            resourceInputs["leaseTime"] = state?.leaseTime;
            resourceInputs["leaseTimeVariable"] = state?.leaseTimeVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["options"] = state?.options;
            resourceInputs["staticLeases"] = state?.staticLeases;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["tftpServers"] = state?.tftpServers;
            resourceInputs["tftpServersVariable"] = state?.tftpServersVariable;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CiscoDhcpServerFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["addressPool"] = args?.addressPool;
            resourceInputs["addressPoolVariable"] = args?.addressPoolVariable;
            resourceInputs["defaultGateway"] = args?.defaultGateway;
            resourceInputs["defaultGatewayVariable"] = args?.defaultGatewayVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["dnsServers"] = args?.dnsServers;
            resourceInputs["dnsServersVariable"] = args?.dnsServersVariable;
            resourceInputs["domainName"] = args?.domainName;
            resourceInputs["domainNameVariable"] = args?.domainNameVariable;
            resourceInputs["excludeAddresses"] = args?.excludeAddresses;
            resourceInputs["excludeAddressesVariable"] = args?.excludeAddressesVariable;
            resourceInputs["interfaceMtu"] = args?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = args?.interfaceMtuVariable;
            resourceInputs["leaseTime"] = args?.leaseTime;
            resourceInputs["leaseTimeVariable"] = args?.leaseTimeVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["options"] = args?.options;
            resourceInputs["staticLeases"] = args?.staticLeases;
            resourceInputs["tftpServers"] = args?.tftpServers;
            resourceInputs["tftpServersVariable"] = args?.tftpServersVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoDhcpServerFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoDhcpServerFeatureTemplate resources.
 */
export interface CiscoDhcpServerFeatureTemplateState {
    /**
     * Configure IPv4 prefix range of the DHCP address pool
     */
    addressPool?: pulumi.Input<string>;
    /**
     * Variable name
     */
    addressPoolVariable?: pulumi.Input<string>;
    /**
     * Set IP address of default gateway
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * Variable name
     */
    defaultGatewayVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure one or more DNS server IP addresses
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    dnsServersVariable?: pulumi.Input<string>;
    /**
     * Set domain name client uses to resolve hostnames
     */
    domainName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    domainNameVariable?: pulumi.Input<string>;
    /**
     * Configure IPv4 address to exclude from DHCP address pool
     */
    excludeAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    excludeAddressesVariable?: pulumi.Input<string>;
    /**
     * Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    /**
     * Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * Variable name
     */
    leaseTimeVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Configure Options Code
     */
    options?: pulumi.Input<pulumi.Input<inputs.CiscoDhcpServerFeatureTemplateOption>[]>;
    /**
     * Configure static IP addresses
     */
    staticLeases?: pulumi.Input<pulumi.Input<inputs.CiscoDhcpServerFeatureTemplateStaticLease>[]>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Configure TFTP server IP addresses
     */
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    tftpServersVariable?: pulumi.Input<string>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CiscoDhcpServerFeatureTemplate resource.
 */
export interface CiscoDhcpServerFeatureTemplateArgs {
    /**
     * Configure IPv4 prefix range of the DHCP address pool
     */
    addressPool?: pulumi.Input<string>;
    /**
     * Variable name
     */
    addressPoolVariable?: pulumi.Input<string>;
    /**
     * Set IP address of default gateway
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * Variable name
     */
    defaultGatewayVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure one or more DNS server IP addresses
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    dnsServersVariable?: pulumi.Input<string>;
    /**
     * Set domain name client uses to resolve hostnames
     */
    domainName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    domainNameVariable?: pulumi.Input<string>;
    /**
     * Configure IPv4 address to exclude from DHCP address pool
     */
    excludeAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    excludeAddressesVariable?: pulumi.Input<string>;
    /**
     * Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    /**
     * Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * Variable name
     */
    leaseTimeVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Configure Options Code
     */
    options?: pulumi.Input<pulumi.Input<inputs.CiscoDhcpServerFeatureTemplateOption>[]>;
    /**
     * Configure static IP addresses
     */
    staticLeases?: pulumi.Input<pulumi.Input<inputs.CiscoDhcpServerFeatureTemplateStaticLease>[]>;
    /**
     * Configure TFTP server IP addresses
     */
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    tftpServersVariable?: pulumi.Input<string>;
}
