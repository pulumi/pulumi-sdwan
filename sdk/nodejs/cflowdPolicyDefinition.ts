// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cflowd Policy Definition .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CflowdPolicyDefinition("example", {
 *     name: "Example",
 *     description: "My description",
 *     activeFlowTimeout: 100,
 *     inactiveFlowTimeout: 10,
 *     samplingInterval: 10,
 *     flowRefresh: 120,
 *     protocol: "ipv4",
 *     tos: true,
 *     remarkedDscp: true,
 *     collectors: [{
 *         vpn_id: 1,
 *         ip_address: "10.0.0.1",
 *         port: 12345,
 *         transport: "transport_tcp",
 *         source_interface: "Ethernet1",
 *         export_spreading: "enable",
 *         bfd_metrics_exporting: true,
 *         exporting_interval: 86400,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CflowdPolicyDefinition extends pulumi.CustomResource {
    /**
     * Get an existing CflowdPolicyDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CflowdPolicyDefinitionState, opts?: pulumi.CustomResourceOptions): CflowdPolicyDefinition {
        return new CflowdPolicyDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition';

    /**
     * Returns true if the given object is an instance of CflowdPolicyDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CflowdPolicyDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CflowdPolicyDefinition.__pulumiType;
    }

    /**
     * Active flow timeout in seconds
     *   - Range: `30`-`3600`
     */
    declare public readonly activeFlowTimeout: pulumi.Output<number | undefined>;
    /**
     * List of collectors
     */
    declare public readonly collectors: pulumi.Output<outputs.CflowdPolicyDefinitionCollector[]>;
    /**
     * The description of the policy definition
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Flow refresh in seconds
     *   - Range: `60`-`86400`
     */
    declare public readonly flowRefresh: pulumi.Output<number | undefined>;
    /**
     * Inactive flow timeout in seconds
     *   - Range: `1`-`3600`
     */
    declare public readonly inactiveFlowTimeout: pulumi.Output<number | undefined>;
    /**
     * The name of the policy definition
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Protocol, either `ipv4`, `ipv6` or `all`
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * Collect remarked DSCP
     */
    declare public readonly remarkedDscp: pulumi.Output<boolean | undefined>;
    /**
     * Flow sampling interval
     *   - Range: `1`-`65536`
     */
    declare public readonly samplingInterval: pulumi.Output<number | undefined>;
    /**
     * Collect TOS record field
     */
    declare public readonly tos: pulumi.Output<boolean | undefined>;
    /**
     * Type
     */
    declare public /*out*/ readonly type: pulumi.Output<string>;
    /**
     * The version of the object
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a CflowdPolicyDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CflowdPolicyDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CflowdPolicyDefinitionArgs | CflowdPolicyDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CflowdPolicyDefinitionState | undefined;
            resourceInputs["activeFlowTimeout"] = state?.activeFlowTimeout;
            resourceInputs["collectors"] = state?.collectors;
            resourceInputs["description"] = state?.description;
            resourceInputs["flowRefresh"] = state?.flowRefresh;
            resourceInputs["inactiveFlowTimeout"] = state?.inactiveFlowTimeout;
            resourceInputs["name"] = state?.name;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["remarkedDscp"] = state?.remarkedDscp;
            resourceInputs["samplingInterval"] = state?.samplingInterval;
            resourceInputs["tos"] = state?.tos;
            resourceInputs["type"] = state?.type;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CflowdPolicyDefinitionArgs | undefined;
            if (args?.collectors === undefined && !opts.urn) {
                throw new Error("Missing required property 'collectors'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["activeFlowTimeout"] = args?.activeFlowTimeout;
            resourceInputs["collectors"] = args?.collectors;
            resourceInputs["description"] = args?.description;
            resourceInputs["flowRefresh"] = args?.flowRefresh;
            resourceInputs["inactiveFlowTimeout"] = args?.inactiveFlowTimeout;
            resourceInputs["name"] = args?.name;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["remarkedDscp"] = args?.remarkedDscp;
            resourceInputs["samplingInterval"] = args?.samplingInterval;
            resourceInputs["tos"] = args?.tos;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CflowdPolicyDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CflowdPolicyDefinition resources.
 */
export interface CflowdPolicyDefinitionState {
    /**
     * Active flow timeout in seconds
     *   - Range: `30`-`3600`
     */
    activeFlowTimeout?: pulumi.Input<number>;
    /**
     * List of collectors
     */
    collectors?: pulumi.Input<pulumi.Input<inputs.CflowdPolicyDefinitionCollector>[]>;
    /**
     * The description of the policy definition
     */
    description?: pulumi.Input<string>;
    /**
     * Flow refresh in seconds
     *   - Range: `60`-`86400`
     */
    flowRefresh?: pulumi.Input<number>;
    /**
     * Inactive flow timeout in seconds
     *   - Range: `1`-`3600`
     */
    inactiveFlowTimeout?: pulumi.Input<number>;
    /**
     * The name of the policy definition
     */
    name?: pulumi.Input<string>;
    /**
     * Protocol, either `ipv4`, `ipv6` or `all`
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    protocol?: pulumi.Input<string>;
    /**
     * Collect remarked DSCP
     */
    remarkedDscp?: pulumi.Input<boolean>;
    /**
     * Flow sampling interval
     *   - Range: `1`-`65536`
     */
    samplingInterval?: pulumi.Input<number>;
    /**
     * Collect TOS record field
     */
    tos?: pulumi.Input<boolean>;
    /**
     * Type
     */
    type?: pulumi.Input<string>;
    /**
     * The version of the object
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CflowdPolicyDefinition resource.
 */
export interface CflowdPolicyDefinitionArgs {
    /**
     * Active flow timeout in seconds
     *   - Range: `30`-`3600`
     */
    activeFlowTimeout?: pulumi.Input<number>;
    /**
     * List of collectors
     */
    collectors: pulumi.Input<pulumi.Input<inputs.CflowdPolicyDefinitionCollector>[]>;
    /**
     * The description of the policy definition
     */
    description: pulumi.Input<string>;
    /**
     * Flow refresh in seconds
     *   - Range: `60`-`86400`
     */
    flowRefresh?: pulumi.Input<number>;
    /**
     * Inactive flow timeout in seconds
     *   - Range: `1`-`3600`
     */
    inactiveFlowTimeout?: pulumi.Input<number>;
    /**
     * The name of the policy definition
     */
    name?: pulumi.Input<string>;
    /**
     * Protocol, either `ipv4`, `ipv6` or `all`
     *   - Choices: `ipv4`, `ipv6`, `all`
     */
    protocol?: pulumi.Input<string>;
    /**
     * Collect remarked DSCP
     */
    remarkedDscp?: pulumi.Input<boolean>;
    /**
     * Flow sampling interval
     *   - Range: `1`-`65536`
     */
    samplingInterval?: pulumi.Input<number>;
    /**
     * Collect TOS record field
     */
    tos?: pulumi.Input<boolean>;
}
