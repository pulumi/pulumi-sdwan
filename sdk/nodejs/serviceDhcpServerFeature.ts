// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Service DHCP Server Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Import
 *
 * Expected import identifier with the format: "service_dhcp_server_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class ServiceDhcpServerFeature extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDhcpServerFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDhcpServerFeatureState, opts?: pulumi.CustomResourceOptions): ServiceDhcpServerFeature {
        return new ServiceDhcpServerFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature';

    /**
     * Returns true if the given object is an instance of ServiceDhcpServerFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDhcpServerFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDhcpServerFeature.__pulumiType;
    }

    /**
     * Set IP address of default gateway
     */
    public readonly defaultGateway!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly defaultGatewayVariable!: pulumi.Output<string | undefined>;
    /**
     * The description of the Feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Configure one or more DNS server IP addresses
     */
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    /**
     * Variable name
     */
    public readonly dnsServersVariable!: pulumi.Output<string | undefined>;
    /**
     * Set domain name client uses to resolve hostnames
     */
    public readonly domainName!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly domainNameVariable!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly excludeVariable!: pulumi.Output<string | undefined>;
    /**
     * Configure IPv4 address to exclude from DHCP address pool
     */
    public readonly excludes!: pulumi.Output<string[] | undefined>;
    /**
     * Feature Profile ID
     */
    public readonly featureProfileId!: pulumi.Output<string>;
    /**
     * Set MTU on interface to DHCP client - Range: `68`-`65535`
     */
    public readonly interfaceMtu!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly interfaceMtuVariable!: pulumi.Output<string | undefined>;
    /**
     * Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
     */
    public readonly leaseTime!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly leaseTimeVariable!: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Network Address
     */
    public readonly networkAddress!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly networkAddressVariable!: pulumi.Output<string | undefined>;
    /**
     * Configure Options Code
     */
    public readonly optionCodes!: pulumi.Output<outputs.ServiceDhcpServerFeatureOptionCode[] | undefined>;
    /**
     * Configure static IP addresses
     */
    public readonly staticLeases!: pulumi.Output<outputs.ServiceDhcpServerFeatureStaticLease[] | undefined>;
    /**
     * Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    public readonly subnetMask!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly subnetMaskVariable!: pulumi.Output<string | undefined>;
    /**
     * Configure TFTP server IP addresses
     */
    public readonly tftpServers!: pulumi.Output<string[] | undefined>;
    /**
     * Variable name
     */
    public readonly tftpServersVariable!: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a ServiceDhcpServerFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDhcpServerFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDhcpServerFeatureArgs | ServiceDhcpServerFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDhcpServerFeatureState | undefined;
            resourceInputs["defaultGateway"] = state ? state.defaultGateway : undefined;
            resourceInputs["defaultGatewayVariable"] = state ? state.defaultGatewayVariable : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["dnsServersVariable"] = state ? state.dnsServersVariable : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["domainNameVariable"] = state ? state.domainNameVariable : undefined;
            resourceInputs["excludeVariable"] = state ? state.excludeVariable : undefined;
            resourceInputs["excludes"] = state ? state.excludes : undefined;
            resourceInputs["featureProfileId"] = state ? state.featureProfileId : undefined;
            resourceInputs["interfaceMtu"] = state ? state.interfaceMtu : undefined;
            resourceInputs["interfaceMtuVariable"] = state ? state.interfaceMtuVariable : undefined;
            resourceInputs["leaseTime"] = state ? state.leaseTime : undefined;
            resourceInputs["leaseTimeVariable"] = state ? state.leaseTimeVariable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAddress"] = state ? state.networkAddress : undefined;
            resourceInputs["networkAddressVariable"] = state ? state.networkAddressVariable : undefined;
            resourceInputs["optionCodes"] = state ? state.optionCodes : undefined;
            resourceInputs["staticLeases"] = state ? state.staticLeases : undefined;
            resourceInputs["subnetMask"] = state ? state.subnetMask : undefined;
            resourceInputs["subnetMaskVariable"] = state ? state.subnetMaskVariable : undefined;
            resourceInputs["tftpServers"] = state ? state.tftpServers : undefined;
            resourceInputs["tftpServersVariable"] = state ? state.tftpServersVariable : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as ServiceDhcpServerFeatureArgs | undefined;
            if ((!args || args.featureProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["defaultGateway"] = args ? args.defaultGateway : undefined;
            resourceInputs["defaultGatewayVariable"] = args ? args.defaultGatewayVariable : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["dnsServersVariable"] = args ? args.dnsServersVariable : undefined;
            resourceInputs["domainName"] = args ? args.domainName : undefined;
            resourceInputs["domainNameVariable"] = args ? args.domainNameVariable : undefined;
            resourceInputs["excludeVariable"] = args ? args.excludeVariable : undefined;
            resourceInputs["excludes"] = args ? args.excludes : undefined;
            resourceInputs["featureProfileId"] = args ? args.featureProfileId : undefined;
            resourceInputs["interfaceMtu"] = args ? args.interfaceMtu : undefined;
            resourceInputs["interfaceMtuVariable"] = args ? args.interfaceMtuVariable : undefined;
            resourceInputs["leaseTime"] = args ? args.leaseTime : undefined;
            resourceInputs["leaseTimeVariable"] = args ? args.leaseTimeVariable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAddress"] = args ? args.networkAddress : undefined;
            resourceInputs["networkAddressVariable"] = args ? args.networkAddressVariable : undefined;
            resourceInputs["optionCodes"] = args ? args.optionCodes : undefined;
            resourceInputs["staticLeases"] = args ? args.staticLeases : undefined;
            resourceInputs["subnetMask"] = args ? args.subnetMask : undefined;
            resourceInputs["subnetMaskVariable"] = args ? args.subnetMaskVariable : undefined;
            resourceInputs["tftpServers"] = args ? args.tftpServers : undefined;
            resourceInputs["tftpServersVariable"] = args ? args.tftpServersVariable : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDhcpServerFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDhcpServerFeature resources.
 */
export interface ServiceDhcpServerFeatureState {
    /**
     * Set IP address of default gateway
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * Variable name
     */
    defaultGatewayVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Configure one or more DNS server IP addresses
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    dnsServersVariable?: pulumi.Input<string>;
    /**
     * Set domain name client uses to resolve hostnames
     */
    domainName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    domainNameVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    excludeVariable?: pulumi.Input<string>;
    /**
     * Configure IPv4 address to exclude from DHCP address pool
     */
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Set MTU on interface to DHCP client - Range: `68`-`65535`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    /**
     * Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * Variable name
     */
    leaseTimeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address
     */
    networkAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    networkAddressVariable?: pulumi.Input<string>;
    /**
     * Configure Options Code
     */
    optionCodes?: pulumi.Input<pulumi.Input<inputs.ServiceDhcpServerFeatureOptionCode>[]>;
    /**
     * Configure static IP addresses
     */
    staticLeases?: pulumi.Input<pulumi.Input<inputs.ServiceDhcpServerFeatureStaticLease>[]>;
    /**
     * Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * Variable name
     */
    subnetMaskVariable?: pulumi.Input<string>;
    /**
     * Configure TFTP server IP addresses
     */
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    tftpServersVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ServiceDhcpServerFeature resource.
 */
export interface ServiceDhcpServerFeatureArgs {
    /**
     * Set IP address of default gateway
     */
    defaultGateway?: pulumi.Input<string>;
    /**
     * Variable name
     */
    defaultGatewayVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Configure one or more DNS server IP addresses
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    dnsServersVariable?: pulumi.Input<string>;
    /**
     * Set domain name client uses to resolve hostnames
     */
    domainName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    domainNameVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    excludeVariable?: pulumi.Input<string>;
    /**
     * Configure IPv4 address to exclude from DHCP address pool
     */
    excludes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Set MTU on interface to DHCP client - Range: `68`-`65535`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    /**
     * Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
     */
    leaseTime?: pulumi.Input<number>;
    /**
     * Variable name
     */
    leaseTimeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address
     */
    networkAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    networkAddressVariable?: pulumi.Input<string>;
    /**
     * Configure Options Code
     */
    optionCodes?: pulumi.Input<pulumi.Input<inputs.ServiceDhcpServerFeatureOptionCode>[]>;
    /**
     * Configure static IP addresses
     */
    staticLeases?: pulumi.Input<pulumi.Input<inputs.ServiceDhcpServerFeatureStaticLease>[]>;
    /**
     * Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     */
    subnetMask?: pulumi.Input<string>;
    /**
     * Variable name
     */
    subnetMaskVariable?: pulumi.Input<string>;
    /**
     * Configure TFTP server IP addresses
     */
    tftpServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Variable name
     */
    tftpServersVariable?: pulumi.Input<string>;
}
