// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Service LAN VPN Interface Ethernet Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceLanVpnInterfaceEthernetFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     serviceLanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getServiceLanVpnInterfaceEthernetFeature(args: GetServiceLanVpnInterfaceEthernetFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLanVpnInterfaceEthernetFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getServiceLanVpnInterfaceEthernetFeature:getServiceLanVpnInterfaceEthernetFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "serviceLanVpnFeatureId": args.serviceLanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceEthernetFeature.
 */
export interface GetServiceLanVpnInterfaceEthernetFeatureArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the Feature
     */
    id: string;
    /**
     * Service LAN VPN Feature ID
     */
    serviceLanVpnFeatureId: string;
}

/**
 * A collection of values returned by getServiceLanVpnInterfaceEthernetFeature.
 */
export interface GetServiceLanVpnInterfaceEthernetFeatureResult {
    readonly aclIpv4EgressPolicyId: string;
    readonly aclIpv4IngressPolicyId: string;
    readonly aclIpv6EgressPolicyId: string;
    readonly aclIpv6IngressPolicyId: string;
    /**
     * Shaping Rate (Kbps)
     */
    readonly aclShapingRate: number;
    /**
     * Variable name
     */
    readonly aclShapingRateVariable: string;
    /**
     * Timeout value for dynamically learned ARP entries, \n\n seconds
     */
    readonly arpTimeout: number;
    /**
     * Variable name
     */
    readonly arpTimeoutVariable: string;
    /**
     * Configure ARP entries
     */
    readonly arps: outputs.GetServiceLanVpnInterfaceEthernetFeatureArp[];
    /**
     * Link autonegotiation
     */
    readonly autonegotiate: boolean;
    /**
     * Variable name
     */
    readonly autonegotiateVariable: string;
    /**
     * The description of the Feature
     */
    readonly description: string;
    /**
     * Duplex mode
     */
    readonly duplex: string;
    /**
     * Variable name
     */
    readonly duplexVariable: string;
    /**
     * Enable DHCPv6
     */
    readonly enableDhcpv6: boolean;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * ICMP/ICMPv6 Redirect Disable
     */
    readonly icmpRedirectDisable: boolean;
    /**
     * Variable name
     */
    readonly icmpRedirectDisableVariable: string;
    /**
     * The id of the Feature
     */
    readonly id: string;
    readonly interfaceDescription: string;
    /**
     * Variable name
     */
    readonly interfaceDescriptionVariable: string;
    /**
     * Interface MTU
     */
    readonly interfaceMtu: number;
    /**
     * Variable name
     */
    readonly interfaceMtuVariable: string;
    readonly interfaceName: string;
    /**
     * Variable name
     */
    readonly interfaceNameVariable: string;
    /**
     * IP Directed-Broadcast
     */
    readonly ipDirectedBroadcast: boolean;
    /**
     * Variable name
     */
    readonly ipDirectedBroadcastVariable: string;
    /**
     * IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * IP Address
     */
    readonly ipv4Address: string;
    /**
     * Variable name
     */
    readonly ipv4AddressVariable: string;
    /**
     * DHCP Distance
     */
    readonly ipv4DhcpDistance: number;
    /**
     * Variable name
     */
    readonly ipv4DhcpDistanceVariable: string;
    /**
     * Variable name
     */
    readonly ipv4DhcpHelperVariable: string;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    readonly ipv4DhcpHelpers: string[];
    /**
     * enable Network Address Translation on this interface
     */
    readonly ipv4Nat: boolean;
    /**
     * NAT Inside Source Loopback Interface
     */
    readonly ipv4NatLoopback: string;
    /**
     * Variable name
     */
    readonly ipv4NatLoopbackVariable: string;
    /**
     * NAT Overload
     */
    readonly ipv4NatOverload: boolean;
    /**
     * Variable name
     */
    readonly ipv4NatOverloadVariable: string;
    /**
     * NAT Pool Prefix Length
     */
    readonly ipv4NatPrefixLength: number;
    /**
     * Variable name
     */
    readonly ipv4NatPrefixLengthVariable: string;
    /**
     * NAT Pool Range End
     */
    readonly ipv4NatRangeEnd: string;
    /**
     * Variable name
     */
    readonly ipv4NatRangeEndVariable: string;
    /**
     * NAT Pool Range Start
     */
    readonly ipv4NatRangeStart: string;
    /**
     * Variable name
     */
    readonly ipv4NatRangeStartVariable: string;
    /**
     * Set NAT TCP session timeout, in minutes
     */
    readonly ipv4NatTcpTimeout: number;
    /**
     * Variable name
     */
    readonly ipv4NatTcpTimeoutVariable: string;
    /**
     * NAT Type
     */
    readonly ipv4NatType: string;
    /**
     * Variable name
     */
    readonly ipv4NatTypeVariable: string;
    /**
     * Set NAT UDP session timeout, in minutes
     */
    readonly ipv4NatUdpTimeout: number;
    /**
     * Variable name
     */
    readonly ipv4NatUdpTimeoutVariable: string;
    /**
     * Secondary IpV4 Addresses
     */
    readonly ipv4SecondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress[];
    /**
     * Subnet Mask
     */
    readonly ipv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly ipv4SubnetMaskVariable: string;
    /**
     * Enable VRRP
     */
    readonly ipv4Vrrps: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp[];
    /**
     * IPv6 Address Secondary
     */
    readonly ipv6Address: string;
    /**
     * Variable name
     */
    readonly ipv6AddressVariable: string;
    /**
     * DHCPv6 Helper
     */
    readonly ipv6DhcpHelpers: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper[];
    /**
     * secondary IPv6 addresses
     */
    readonly ipv6DhcpSecondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress[];
    /**
     * enable Network Address Translation ipv6 on this interface
     */
    readonly ipv6Nat: boolean;
    /**
     * Static secondary IPv6 addresses
     */
    readonly ipv6SecondaryAddresses: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress[];
    /**
     * Enable VRRP Ipv6
     */
    readonly ipv6Vrrps: outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp[];
    /**
     * Interval for interface load calculation
     */
    readonly loadInterval: number;
    /**
     * Variable name
     */
    readonly loadIntervalVariable: string;
    /**
     * MAC Address
     */
    readonly macAddress: string;
    /**
     * Variable name
     */
    readonly macAddressVariable: string;
    /**
     * Media type
     */
    readonly mediaType: string;
    /**
     * Variable name
     */
    readonly mediaTypeVariable: string;
    /**
     * The name of the Feature
     */
    readonly name: string;
    /**
     * NAT64 on this interface
     */
    readonly nat64: boolean;
    /**
     * Service LAN VPN Feature ID
     */
    readonly serviceLanVpnFeatureId: string;
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * Set interface speed
     */
    readonly speed: string;
    /**
     * Variable name
     */
    readonly speedVariable: string;
    /**
     * static NAT
     */
    readonly staticNats: outputs.GetServiceLanVpnInterfaceEthernetFeatureStaticNat[];
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMss: number;
    /**
     * Variable name
     */
    readonly tcpMssVariable: string;
    /**
     * Enable tracker for this interface
     */
    readonly tracker: string;
    /**
     * Variable name
     */
    readonly trackerVariable: string;
    /**
     * Enable/Disable SGT Enforcement on an interface
     */
    readonly trustsecEnableEnforcedPropogation: boolean;
    /**
     * Indicates that the interface is trustworthy for CTS
     */
    readonly trustsecEnableSgtPropogation: boolean;
    /**
     * SGT value between 2 and 65519
     */
    readonly trustsecEnforcedSecurityGroupTag: number;
    /**
     * Variable name
     */
    readonly trustsecEnforcedSecurityGroupTagVariable: string;
    /**
     * Enables the interface for CTS SGT authorization and forwarding
     */
    readonly trustsecPropogate: boolean;
    /**
     * SGT value between 2 and 65519
     */
    readonly trustsecSecurityGroupTag: number;
    /**
     * Variable name
     */
    readonly trustsecSecurityGroupTagVariable: string;
    /**
     * The version of the Feature
     */
    readonly version: number;
    /**
     * Extend remote TLOC over a GRE tunnel to a local LAN interface
     */
    readonly xconnect: string;
    /**
     * Variable name
     */
    readonly xconnectVariable: string;
}
/**
 * This data source can read the Service LAN VPN Interface Ethernet Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceLanVpnInterfaceEthernetFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     serviceLanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getServiceLanVpnInterfaceEthernetFeatureOutput(args: GetServiceLanVpnInterfaceEthernetFeatureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceLanVpnInterfaceEthernetFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getServiceLanVpnInterfaceEthernetFeature:getServiceLanVpnInterfaceEthernetFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "serviceLanVpnFeatureId": args.serviceLanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceEthernetFeature.
 */
export interface GetServiceLanVpnInterfaceEthernetFeatureOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the Feature
     */
    id: pulumi.Input<string>;
    /**
     * Service LAN VPN Feature ID
     */
    serviceLanVpnFeatureId: pulumi.Input<string>;
}
