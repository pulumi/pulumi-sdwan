// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can attach a feature device template. Due to limitations of the API, once a device template is attached to a device, only one change can be applied per `pulumi up` operation. More information is available here.
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * One feature device template ID and a comma separated list containing at least one device ID must be included:
 *
 * ```sh
 * $ pulumi import sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd,[C8K-83E4B5EE-52AC-075F-B5E4-0050110680F3,C8K-C38D156C-34E4-909A-15BB-96D0E9D0E808]"
 * ```
 */
export class AttachFeatureDeviceTemplate extends pulumi.CustomResource {
    /**
     * Get an existing AttachFeatureDeviceTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AttachFeatureDeviceTemplateState, opts?: pulumi.CustomResourceOptions): AttachFeatureDeviceTemplate {
        return new AttachFeatureDeviceTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate';

    /**
     * Returns true if the given object is an instance of AttachFeatureDeviceTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AttachFeatureDeviceTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AttachFeatureDeviceTemplate.__pulumiType;
    }

    /**
     * Devices
     */
    declare public readonly devices: pulumi.Output<outputs.AttachFeatureDeviceTemplateDevice[]>;
    /**
     * The version of the device template
     */
    declare public readonly version: pulumi.Output<number | undefined>;

    /**
     * Create a AttachFeatureDeviceTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AttachFeatureDeviceTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AttachFeatureDeviceTemplateArgs | AttachFeatureDeviceTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AttachFeatureDeviceTemplateState | undefined;
            resourceInputs["devices"] = state?.devices;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as AttachFeatureDeviceTemplateArgs | undefined;
            if (args?.devices === undefined && !opts.urn) {
                throw new Error("Missing required property 'devices'");
            }
            resourceInputs["devices"] = args?.devices;
            resourceInputs["version"] = args?.version;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AttachFeatureDeviceTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AttachFeatureDeviceTemplate resources.
 */
export interface AttachFeatureDeviceTemplateState {
    /**
     * Devices
     */
    devices?: pulumi.Input<pulumi.Input<inputs.AttachFeatureDeviceTemplateDevice>[]>;
    /**
     * The version of the device template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AttachFeatureDeviceTemplate resource.
 */
export interface AttachFeatureDeviceTemplateArgs {
    /**
     * Devices
     */
    devices: pulumi.Input<pulumi.Input<inputs.AttachFeatureDeviceTemplateDevice>[]>;
    /**
     * The version of the device template
     */
    version?: pulumi.Input<number>;
}
