// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco VPN feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CiscoVpnFeatureTemplate("example", {
 *     name: "Example",
 *     description: "My Example",
 *     deviceTypes: ["vedge-C8000V"],
 *     vpnId: 1,
 *     vpnName: "VPN1",
 *     tenantVpnId: 1,
 *     organizationName: "org1",
 *     ompAdminDistanceIpv4: 10,
 *     ompAdminDistanceIpv6: 10,
 *     enhanceEcmpKeying: true,
 *     dnsIpv4Servers: [{
 *         address: "9.9.9.9",
 *         role: "primary",
 *     }],
 *     dnsIpv6Servers: [{
 *         address: "2001::9",
 *         role: "primary",
 *     }],
 *     dnsHosts: [{
 *         hostname: "abc1",
 *         ip: ["7.7.7.7"],
 *     }],
 *     services: [{
 *         service_types: "FW",
 *         address: ["8.8.8.8"],
 *         "interface": "e1",
 *         track_enable: true,
 *     }],
 *     ipv4StaticServiceRoutes: [{
 *         prefix: "2.2.2.0/24",
 *         vpn_id: 2,
 *         service: "sig",
 *     }],
 *     ipv4StaticRoutes: [{
 *         prefix: "3.3.3.0/24",
 *         null0: false,
 *         distance: 10,
 *         vpn_id: 5,
 *         dhcp: false,
 *         next_hops: [{
 *             address: "11.1.1.1",
 *             distance: 20,
 *         }],
 *         track_next_hops: [{
 *             address: "12.1.1.1",
 *             distance: 20,
 *             tracker: "tracker1",
 *         }],
 *     }],
 *     ipv6StaticRoutes: [{
 *         prefix: "2001::/48",
 *         null0: false,
 *         vpn_id: 5,
 *         nat: "NAT64",
 *         next_hops: [{
 *             address: "2001::11",
 *             distance: 20,
 *         }],
 *     }],
 *     ipv4StaticGreRoutes: [{
 *         prefix: "3.3.3.0/24",
 *         vpn_id: 2,
 *         interfaces: ["e1"],
 *     }],
 *     ipv4StaticIpsecRoutes: [{
 *         prefix: "4.4.4.0/24",
 *         vpn_id: 2,
 *         interfaces: ["e1"],
 *     }],
 *     ompAdvertiseIpv4Routes: [{
 *         protocol: "bgp",
 *         route_policy: "rp1",
 *         protocol_sub_type: ["external"],
 *         prefixes: [{
 *             prefixEntry: "1.1.1.0/24",
 *             aggregateOnly: true,
 *         }],
 *     }],
 *     ompAdvertiseIpv6Routes: [{
 *         protocol: "bgp",
 *         route_policy: "rp1",
 *         protocol_sub_type: ["external"],
 *         prefixes: [{
 *             prefixEntry: "2001:2::/48",
 *             aggregateOnly: true,
 *         }],
 *     }],
 *     nat64Pools: [{
 *         name: "POOL1",
 *         start_address: "100.1.1.1",
 *         end_address: "100.1.2.255",
 *         overload: true,
 *         leak_from_global: true,
 *         leak_from_global_protocol: "rip",
 *         leak_to_global: true,
 *     }],
 *     natPools: [{
 *         name: 1,
 *         prefix_length: 24,
 *         range_start: "101.1.1.1",
 *         range_end: "101.1.2.255",
 *         overload: true,
 *         direction: "inside",
 *         tracker_id: 10,
 *     }],
 *     staticNatRules: [{
 *         pool_name: 1,
 *         source_ip: "10.1.1.1",
 *         translate_ip: "105.1.1.1",
 *         static_nat_direction: "inside",
 *         tracker_id: 10,
 *     }],
 *     staticNatSubnetRules: [{
 *         source_ip_subnet: "10.2.1.0",
 *         translate_ip_subnet: "105.2.1.0",
 *         prefix_length: 24,
 *         static_nat_direction: "inside",
 *         tracker_id: 10,
 *     }],
 *     portForwardRules: [{
 *         pool_name: 1,
 *         source_port: 5000,
 *         translate_port: 6000,
 *         source_ip: "10.3.1.1",
 *         translate_ip: "120.3.1.1",
 *         protocol: "tcp",
 *     }],
 *     routeGlobalImports: [{
 *         protocol: "ospf",
 *         protocol_sub_type: ["external"],
 *         route_policy: "policy1",
 *         redistributes: [{
 *             protocol: "bgp",
 *             routePolicy: "policy1",
 *         }],
 *     }],
 *     routeVpnImports: [{
 *         source_vpn_id: 5,
 *         protocol: "ospf",
 *         protocol_sub_type: ["external"],
 *         route_policy: "policy1",
 *         redistributes: [{
 *             protocol: "bgp",
 *             routePolicy: "policy1",
 *         }],
 *     }],
 *     routeGlobalExports: [{
 *         protocol: "ospf",
 *         protocol_sub_type: ["external"],
 *         route_policy: "policy1",
 *         redistributes: [{
 *             protocol: "bgp",
 *             routePolicy: "policy1",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoVpnFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoVpnFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoVpnFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoVpnFeatureTemplate {
        return new CiscoVpnFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoVpnFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoVpnFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoVpnFeatureTemplate.__pulumiType;
    }

    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Static DNS mapping
     */
    declare public readonly dnsHosts: pulumi.Output<outputs.CiscoVpnFeatureTemplateDnsHost[] | undefined>;
    /**
     * DNS
     */
    declare public readonly dnsIpv4Servers: pulumi.Output<outputs.CiscoVpnFeatureTemplateDnsIpv4Server[] | undefined>;
    /**
     * DNS
     */
    declare public readonly dnsIpv6Servers: pulumi.Output<outputs.CiscoVpnFeatureTemplateDnsIpv6Server[] | undefined>;
    /**
     * Optional packet fields for ECMP keying
     *   - Default value: `false`
     */
    declare public readonly enhanceEcmpKeying: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly enhanceEcmpKeyingVariable: pulumi.Output<string | undefined>;
    /**
     * Configure routes pointing to a GRE tunnel
     */
    declare public readonly ipv4StaticGreRoutes: pulumi.Output<outputs.CiscoVpnFeatureTemplateIpv4StaticGreRoute[] | undefined>;
    /**
     * Configure routes pointing to a IPSEC tunnel
     */
    declare public readonly ipv4StaticIpsecRoutes: pulumi.Output<outputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRoute[] | undefined>;
    /**
     * Configure IPv4 Static Routes
     */
    declare public readonly ipv4StaticRoutes: pulumi.Output<outputs.CiscoVpnFeatureTemplateIpv4StaticRoute[] | undefined>;
    /**
     * Configure IPv4 Static Service Routes
     */
    declare public readonly ipv4StaticServiceRoutes: pulumi.Output<outputs.CiscoVpnFeatureTemplateIpv4StaticServiceRoute[] | undefined>;
    /**
     * Configure IPv6 Static Routes
     */
    declare public readonly ipv6StaticRoutes: pulumi.Output<outputs.CiscoVpnFeatureTemplateIpv6StaticRoute[] | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Set NAT64 v4 pool range
     */
    declare public readonly nat64Pools: pulumi.Output<outputs.CiscoVpnFeatureTemplateNat64Pool[] | undefined>;
    /**
     * Configure NAT Pool entries
     */
    declare public readonly natPools: pulumi.Output<outputs.CiscoVpnFeatureTemplateNatPool[] | undefined>;
    /**
     * omp-admin-distance-ipv4
     *   - Range: `1`-`255`
     */
    declare public readonly ompAdminDistanceIpv4: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ompAdminDistanceIpv4Variable: pulumi.Output<string | undefined>;
    /**
     * omp-admin-distance-ipv6
     *   - Range: `1`-`255`
     */
    declare public readonly ompAdminDistanceIpv6: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ompAdminDistanceIpv6Variable: pulumi.Output<string | undefined>;
    /**
     * Advertise routes to OMP
     */
    declare public readonly ompAdvertiseIpv4Routes: pulumi.Output<outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route[] | undefined>;
    /**
     * Advertise routes to OMP
     */
    declare public readonly ompAdvertiseIpv6Routes: pulumi.Output<outputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route[] | undefined>;
    /**
     * Org Name selected
     */
    declare public readonly organizationName: pulumi.Output<string | undefined>;
    /**
     * Configure Port Forward entries
     */
    declare public readonly portForwardRules: pulumi.Output<outputs.CiscoVpnFeatureTemplatePortForwardRule[] | undefined>;
    /**
     * Enable route leaking to Global VPN from this Service VPN
     */
    declare public readonly routeGlobalExports: pulumi.Output<outputs.CiscoVpnFeatureTemplateRouteGlobalExport[] | undefined>;
    /**
     * Enable route leaking from Global VPN to this Service VPN
     */
    declare public readonly routeGlobalImports: pulumi.Output<outputs.CiscoVpnFeatureTemplateRouteGlobalImport[] | undefined>;
    /**
     * Enable route leak from Service VPN to current VPN
     */
    declare public readonly routeVpnImports: pulumi.Output<outputs.CiscoVpnFeatureTemplateRouteVpnImport[] | undefined>;
    /**
     * Configure services
     */
    declare public readonly services: pulumi.Output<outputs.CiscoVpnFeatureTemplateService[] | undefined>;
    /**
     * Configure static NAT entries
     */
    declare public readonly staticNatRules: pulumi.Output<outputs.CiscoVpnFeatureTemplateStaticNatRule[] | undefined>;
    /**
     * Configure static NAT Subnet entries
     */
    declare public readonly staticNatSubnetRules: pulumi.Output<outputs.CiscoVpnFeatureTemplateStaticNatSubnetRule[] | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Tenant VPN
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    declare public readonly tenantVpnId: pulumi.Output<number | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * List of VPN instances
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    declare public readonly vpnId: pulumi.Output<number | undefined>;
    /**
     * Name
     */
    declare public readonly vpnName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly vpnNameVariable: pulumi.Output<string | undefined>;

    /**
     * Create a CiscoVpnFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoVpnFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoVpnFeatureTemplateArgs | CiscoVpnFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoVpnFeatureTemplateState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["dnsHosts"] = state?.dnsHosts;
            resourceInputs["dnsIpv4Servers"] = state?.dnsIpv4Servers;
            resourceInputs["dnsIpv6Servers"] = state?.dnsIpv6Servers;
            resourceInputs["enhanceEcmpKeying"] = state?.enhanceEcmpKeying;
            resourceInputs["enhanceEcmpKeyingVariable"] = state?.enhanceEcmpKeyingVariable;
            resourceInputs["ipv4StaticGreRoutes"] = state?.ipv4StaticGreRoutes;
            resourceInputs["ipv4StaticIpsecRoutes"] = state?.ipv4StaticIpsecRoutes;
            resourceInputs["ipv4StaticRoutes"] = state?.ipv4StaticRoutes;
            resourceInputs["ipv4StaticServiceRoutes"] = state?.ipv4StaticServiceRoutes;
            resourceInputs["ipv6StaticRoutes"] = state?.ipv6StaticRoutes;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat64Pools"] = state?.nat64Pools;
            resourceInputs["natPools"] = state?.natPools;
            resourceInputs["ompAdminDistanceIpv4"] = state?.ompAdminDistanceIpv4;
            resourceInputs["ompAdminDistanceIpv4Variable"] = state?.ompAdminDistanceIpv4Variable;
            resourceInputs["ompAdminDistanceIpv6"] = state?.ompAdminDistanceIpv6;
            resourceInputs["ompAdminDistanceIpv6Variable"] = state?.ompAdminDistanceIpv6Variable;
            resourceInputs["ompAdvertiseIpv4Routes"] = state?.ompAdvertiseIpv4Routes;
            resourceInputs["ompAdvertiseIpv6Routes"] = state?.ompAdvertiseIpv6Routes;
            resourceInputs["organizationName"] = state?.organizationName;
            resourceInputs["portForwardRules"] = state?.portForwardRules;
            resourceInputs["routeGlobalExports"] = state?.routeGlobalExports;
            resourceInputs["routeGlobalImports"] = state?.routeGlobalImports;
            resourceInputs["routeVpnImports"] = state?.routeVpnImports;
            resourceInputs["services"] = state?.services;
            resourceInputs["staticNatRules"] = state?.staticNatRules;
            resourceInputs["staticNatSubnetRules"] = state?.staticNatSubnetRules;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["tenantVpnId"] = state?.tenantVpnId;
            resourceInputs["version"] = state?.version;
            resourceInputs["vpnId"] = state?.vpnId;
            resourceInputs["vpnName"] = state?.vpnName;
            resourceInputs["vpnNameVariable"] = state?.vpnNameVariable;
        } else {
            const args = argsOrState as CiscoVpnFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["dnsHosts"] = args?.dnsHosts;
            resourceInputs["dnsIpv4Servers"] = args?.dnsIpv4Servers;
            resourceInputs["dnsIpv6Servers"] = args?.dnsIpv6Servers;
            resourceInputs["enhanceEcmpKeying"] = args?.enhanceEcmpKeying;
            resourceInputs["enhanceEcmpKeyingVariable"] = args?.enhanceEcmpKeyingVariable;
            resourceInputs["ipv4StaticGreRoutes"] = args?.ipv4StaticGreRoutes;
            resourceInputs["ipv4StaticIpsecRoutes"] = args?.ipv4StaticIpsecRoutes;
            resourceInputs["ipv4StaticRoutes"] = args?.ipv4StaticRoutes;
            resourceInputs["ipv4StaticServiceRoutes"] = args?.ipv4StaticServiceRoutes;
            resourceInputs["ipv6StaticRoutes"] = args?.ipv6StaticRoutes;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat64Pools"] = args?.nat64Pools;
            resourceInputs["natPools"] = args?.natPools;
            resourceInputs["ompAdminDistanceIpv4"] = args?.ompAdminDistanceIpv4;
            resourceInputs["ompAdminDistanceIpv4Variable"] = args?.ompAdminDistanceIpv4Variable;
            resourceInputs["ompAdminDistanceIpv6"] = args?.ompAdminDistanceIpv6;
            resourceInputs["ompAdminDistanceIpv6Variable"] = args?.ompAdminDistanceIpv6Variable;
            resourceInputs["ompAdvertiseIpv4Routes"] = args?.ompAdvertiseIpv4Routes;
            resourceInputs["ompAdvertiseIpv6Routes"] = args?.ompAdvertiseIpv6Routes;
            resourceInputs["organizationName"] = args?.organizationName;
            resourceInputs["portForwardRules"] = args?.portForwardRules;
            resourceInputs["routeGlobalExports"] = args?.routeGlobalExports;
            resourceInputs["routeGlobalImports"] = args?.routeGlobalImports;
            resourceInputs["routeVpnImports"] = args?.routeVpnImports;
            resourceInputs["services"] = args?.services;
            resourceInputs["staticNatRules"] = args?.staticNatRules;
            resourceInputs["staticNatSubnetRules"] = args?.staticNatSubnetRules;
            resourceInputs["tenantVpnId"] = args?.tenantVpnId;
            resourceInputs["vpnId"] = args?.vpnId;
            resourceInputs["vpnName"] = args?.vpnName;
            resourceInputs["vpnNameVariable"] = args?.vpnNameVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoVpnFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoVpnFeatureTemplate resources.
 */
export interface CiscoVpnFeatureTemplateState {
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Static DNS mapping
     */
    dnsHosts?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateDnsHost>[]>;
    /**
     * DNS
     */
    dnsIpv4Servers?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateDnsIpv4Server>[]>;
    /**
     * DNS
     */
    dnsIpv6Servers?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateDnsIpv6Server>[]>;
    /**
     * Optional packet fields for ECMP keying
     *   - Default value: `false`
     */
    enhanceEcmpKeying?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    enhanceEcmpKeyingVariable?: pulumi.Input<string>;
    /**
     * Configure routes pointing to a GRE tunnel
     */
    ipv4StaticGreRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticGreRoute>[]>;
    /**
     * Configure routes pointing to a IPSEC tunnel
     */
    ipv4StaticIpsecRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRoute>[]>;
    /**
     * Configure IPv4 Static Routes
     */
    ipv4StaticRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticRoute>[]>;
    /**
     * Configure IPv4 Static Service Routes
     */
    ipv4StaticServiceRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRoute>[]>;
    /**
     * Configure IPv6 Static Routes
     */
    ipv6StaticRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv6StaticRoute>[]>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Set NAT64 v4 pool range
     */
    nat64Pools?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateNat64Pool>[]>;
    /**
     * Configure NAT Pool entries
     */
    natPools?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateNatPool>[]>;
    /**
     * omp-admin-distance-ipv4
     *   - Range: `1`-`255`
     */
    ompAdminDistanceIpv4?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ompAdminDistanceIpv4Variable?: pulumi.Input<string>;
    /**
     * omp-admin-distance-ipv6
     *   - Range: `1`-`255`
     */
    ompAdminDistanceIpv6?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ompAdminDistanceIpv6Variable?: pulumi.Input<string>;
    /**
     * Advertise routes to OMP
     */
    ompAdvertiseIpv4Routes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route>[]>;
    /**
     * Advertise routes to OMP
     */
    ompAdvertiseIpv6Routes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route>[]>;
    /**
     * Org Name selected
     */
    organizationName?: pulumi.Input<string>;
    /**
     * Configure Port Forward entries
     */
    portForwardRules?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplatePortForwardRule>[]>;
    /**
     * Enable route leaking to Global VPN from this Service VPN
     */
    routeGlobalExports?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateRouteGlobalExport>[]>;
    /**
     * Enable route leaking from Global VPN to this Service VPN
     */
    routeGlobalImports?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateRouteGlobalImport>[]>;
    /**
     * Enable route leak from Service VPN to current VPN
     */
    routeVpnImports?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateRouteVpnImport>[]>;
    /**
     * Configure services
     */
    services?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateService>[]>;
    /**
     * Configure static NAT entries
     */
    staticNatRules?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateStaticNatRule>[]>;
    /**
     * Configure static NAT Subnet entries
     */
    staticNatSubnetRules?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateStaticNatSubnetRule>[]>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Tenant VPN
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    tenantVpnId?: pulumi.Input<number>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
    /**
     * List of VPN instances
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    vpnId?: pulumi.Input<number>;
    /**
     * Name
     */
    vpnName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    vpnNameVariable?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CiscoVpnFeatureTemplate resource.
 */
export interface CiscoVpnFeatureTemplateArgs {
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Static DNS mapping
     */
    dnsHosts?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateDnsHost>[]>;
    /**
     * DNS
     */
    dnsIpv4Servers?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateDnsIpv4Server>[]>;
    /**
     * DNS
     */
    dnsIpv6Servers?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateDnsIpv6Server>[]>;
    /**
     * Optional packet fields for ECMP keying
     *   - Default value: `false`
     */
    enhanceEcmpKeying?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    enhanceEcmpKeyingVariable?: pulumi.Input<string>;
    /**
     * Configure routes pointing to a GRE tunnel
     */
    ipv4StaticGreRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticGreRoute>[]>;
    /**
     * Configure routes pointing to a IPSEC tunnel
     */
    ipv4StaticIpsecRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRoute>[]>;
    /**
     * Configure IPv4 Static Routes
     */
    ipv4StaticRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticRoute>[]>;
    /**
     * Configure IPv4 Static Service Routes
     */
    ipv4StaticServiceRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRoute>[]>;
    /**
     * Configure IPv6 Static Routes
     */
    ipv6StaticRoutes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateIpv6StaticRoute>[]>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Set NAT64 v4 pool range
     */
    nat64Pools?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateNat64Pool>[]>;
    /**
     * Configure NAT Pool entries
     */
    natPools?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateNatPool>[]>;
    /**
     * omp-admin-distance-ipv4
     *   - Range: `1`-`255`
     */
    ompAdminDistanceIpv4?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ompAdminDistanceIpv4Variable?: pulumi.Input<string>;
    /**
     * omp-admin-distance-ipv6
     *   - Range: `1`-`255`
     */
    ompAdminDistanceIpv6?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ompAdminDistanceIpv6Variable?: pulumi.Input<string>;
    /**
     * Advertise routes to OMP
     */
    ompAdvertiseIpv4Routes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route>[]>;
    /**
     * Advertise routes to OMP
     */
    ompAdvertiseIpv6Routes?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route>[]>;
    /**
     * Org Name selected
     */
    organizationName?: pulumi.Input<string>;
    /**
     * Configure Port Forward entries
     */
    portForwardRules?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplatePortForwardRule>[]>;
    /**
     * Enable route leaking to Global VPN from this Service VPN
     */
    routeGlobalExports?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateRouteGlobalExport>[]>;
    /**
     * Enable route leaking from Global VPN to this Service VPN
     */
    routeGlobalImports?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateRouteGlobalImport>[]>;
    /**
     * Enable route leak from Service VPN to current VPN
     */
    routeVpnImports?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateRouteVpnImport>[]>;
    /**
     * Configure services
     */
    services?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateService>[]>;
    /**
     * Configure static NAT entries
     */
    staticNatRules?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateStaticNatRule>[]>;
    /**
     * Configure static NAT Subnet entries
     */
    staticNatSubnetRules?: pulumi.Input<pulumi.Input<inputs.CiscoVpnFeatureTemplateStaticNatSubnetRule>[]>;
    /**
     * Tenant VPN
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    tenantVpnId?: pulumi.Input<number>;
    /**
     * List of VPN instances
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     */
    vpnId?: pulumi.Input<number>;
    /**
     * Name
     */
    vpnName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    vpnNameVariable?: pulumi.Input<string>;
}
