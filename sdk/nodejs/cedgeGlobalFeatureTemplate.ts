// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a cEdge Global feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CedgeGlobalFeatureTemplate("example", {
 *     name: "Example",
 *     description: "My Example",
 *     deviceTypes: ["vedge-C8000V"],
 *     nat64UdpTimeout: 300,
 *     nat64TcpTimeout: 3600,
 *     httpAuthentication: "local",
 *     sshVersion: 2,
 *     httpServer: true,
 *     httpsServer: true,
 *     sourceInterface: "e1",
 *     ipSourceRouting: true,
 *     arpProxy: true,
 *     ftpPassive: true,
 *     rshRcp: true,
 *     bootp: true,
 *     domainLookup: true,
 *     tcpKeepalivesOut: true,
 *     tcpKeepalivesIn: true,
 *     tcpSmallServers: true,
 *     udpSmallServers: true,
 *     lldp: true,
 *     cdp: true,
 *     snmpIfindexPersist: true,
 *     consoleLogging: true,
 *     vtyLogging: true,
 *     lineVty: true,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CedgeGlobalFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CedgeGlobalFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CedgeGlobalFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CedgeGlobalFeatureTemplate {
        return new CedgeGlobalFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CedgeGlobalFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CedgeGlobalFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CedgeGlobalFeatureTemplate.__pulumiType;
    }

    /**
     * Set ARP Proxy
     *   - Default value: `false`
     */
    declare public readonly arpProxy: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly arpProxyVariable: pulumi.Output<string | undefined>;
    /**
     * Configure Ignore BOOTP
     *   - Default value: `true`
     */
    declare public readonly bootp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly bootpVariable: pulumi.Output<string | undefined>;
    /**
     * Configure CDP
     *   - Default value: `true`
     */
    declare public readonly cdp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly cdpVariable: pulumi.Output<string | undefined>;
    /**
     * Configure Console Logging
     *   - Default value: `true`
     */
    declare public readonly consoleLogging: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly consoleLoggingVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Configure Domain-Lookup
     *   - Default value: `false`
     */
    declare public readonly domainLookup: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly domainLookupVariable: pulumi.Output<string | undefined>;
    /**
     * Set Passive FTP
     *   - Default value: `false`
     */
    declare public readonly ftpPassive: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ftpPassiveVariable: pulumi.Output<string | undefined>;
    /**
     * Set preference for HTTP Authentication
     *   - Choices: `local`, `aaa`
     */
    declare public readonly httpAuthentication: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly httpAuthenticationVariable: pulumi.Output<string | undefined>;
    /**
     * Set HTTP Server
     *   - Default value: `false`
     */
    declare public readonly httpServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly httpServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set HTTPS Server
     *   - Default value: `false`
     */
    declare public readonly httpsServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly httpsServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set Source Route
     *   - Default value: `false`
     */
    declare public readonly ipSourceRouting: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipSourceRoutingVariable: pulumi.Output<string | undefined>;
    /**
     * Configure Telnet (Outbound)
     *   - Default value: `false`
     */
    declare public readonly lineVty: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly lineVtyVariable: pulumi.Output<string | undefined>;
    /**
     * Configure LLDP
     *   - Default value: `true`
     */
    declare public readonly lldp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly lldpVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Set NAT64 TCP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `3600`
     */
    declare public readonly nat64TcpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly nat64TcpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT64 UDP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `300`
     */
    declare public readonly nat64UdpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly nat64UdpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Set RSH/RCP
     *   - Default value: `false`
     */
    declare public readonly rshRcp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly rshRcpVariable: pulumi.Output<string | undefined>;
    /**
     * Configure SNMP Ifindex Persist
     *   - Default value: `true`
     */
    declare public readonly snmpIfindexPersist: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly snmpIfindexPersistVariable: pulumi.Output<string | undefined>;
    /**
     * Specify interface for source address in all HTTP(S) client connections
     */
    declare public readonly sourceInterface: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly sourceInterfaceVariable: pulumi.Output<string | undefined>;
    /**
     * Set SSH version
     *   - Range: `1`-`2`
     */
    declare public readonly sshVersion: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly sshVersionVariable: pulumi.Output<string | undefined>;
    /**
     * Configure tcp-keepalives-in
     *   - Default value: `true`
     */
    declare public readonly tcpKeepalivesIn: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpKeepalivesInVariable: pulumi.Output<string | undefined>;
    /**
     * Configure tcp-keepalives-out
     *   - Default value: `true`
     */
    declare public readonly tcpKeepalivesOut: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpKeepalivesOutVariable: pulumi.Output<string | undefined>;
    /**
     * Configure tcp-small-servers
     *   - Default value: `false`
     */
    declare public readonly tcpSmallServers: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpSmallServersVariable: pulumi.Output<string | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Configure udp-small-servers
     *   - Default value: `false`
     */
    declare public readonly udpSmallServers: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly udpSmallServersVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;
    /**
     * Configure VTY Line Logging
     *   - Default value: `false`
     */
    declare public readonly vtyLogging: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly vtyLoggingVariable: pulumi.Output<string | undefined>;

    /**
     * Create a CedgeGlobalFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CedgeGlobalFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CedgeGlobalFeatureTemplateArgs | CedgeGlobalFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CedgeGlobalFeatureTemplateState | undefined;
            resourceInputs["arpProxy"] = state?.arpProxy;
            resourceInputs["arpProxyVariable"] = state?.arpProxyVariable;
            resourceInputs["bootp"] = state?.bootp;
            resourceInputs["bootpVariable"] = state?.bootpVariable;
            resourceInputs["cdp"] = state?.cdp;
            resourceInputs["cdpVariable"] = state?.cdpVariable;
            resourceInputs["consoleLogging"] = state?.consoleLogging;
            resourceInputs["consoleLoggingVariable"] = state?.consoleLoggingVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["domainLookup"] = state?.domainLookup;
            resourceInputs["domainLookupVariable"] = state?.domainLookupVariable;
            resourceInputs["ftpPassive"] = state?.ftpPassive;
            resourceInputs["ftpPassiveVariable"] = state?.ftpPassiveVariable;
            resourceInputs["httpAuthentication"] = state?.httpAuthentication;
            resourceInputs["httpAuthenticationVariable"] = state?.httpAuthenticationVariable;
            resourceInputs["httpServer"] = state?.httpServer;
            resourceInputs["httpServerVariable"] = state?.httpServerVariable;
            resourceInputs["httpsServer"] = state?.httpsServer;
            resourceInputs["httpsServerVariable"] = state?.httpsServerVariable;
            resourceInputs["ipSourceRouting"] = state?.ipSourceRouting;
            resourceInputs["ipSourceRoutingVariable"] = state?.ipSourceRoutingVariable;
            resourceInputs["lineVty"] = state?.lineVty;
            resourceInputs["lineVtyVariable"] = state?.lineVtyVariable;
            resourceInputs["lldp"] = state?.lldp;
            resourceInputs["lldpVariable"] = state?.lldpVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat64TcpTimeout"] = state?.nat64TcpTimeout;
            resourceInputs["nat64TcpTimeoutVariable"] = state?.nat64TcpTimeoutVariable;
            resourceInputs["nat64UdpTimeout"] = state?.nat64UdpTimeout;
            resourceInputs["nat64UdpTimeoutVariable"] = state?.nat64UdpTimeoutVariable;
            resourceInputs["rshRcp"] = state?.rshRcp;
            resourceInputs["rshRcpVariable"] = state?.rshRcpVariable;
            resourceInputs["snmpIfindexPersist"] = state?.snmpIfindexPersist;
            resourceInputs["snmpIfindexPersistVariable"] = state?.snmpIfindexPersistVariable;
            resourceInputs["sourceInterface"] = state?.sourceInterface;
            resourceInputs["sourceInterfaceVariable"] = state?.sourceInterfaceVariable;
            resourceInputs["sshVersion"] = state?.sshVersion;
            resourceInputs["sshVersionVariable"] = state?.sshVersionVariable;
            resourceInputs["tcpKeepalivesIn"] = state?.tcpKeepalivesIn;
            resourceInputs["tcpKeepalivesInVariable"] = state?.tcpKeepalivesInVariable;
            resourceInputs["tcpKeepalivesOut"] = state?.tcpKeepalivesOut;
            resourceInputs["tcpKeepalivesOutVariable"] = state?.tcpKeepalivesOutVariable;
            resourceInputs["tcpSmallServers"] = state?.tcpSmallServers;
            resourceInputs["tcpSmallServersVariable"] = state?.tcpSmallServersVariable;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["udpSmallServers"] = state?.udpSmallServers;
            resourceInputs["udpSmallServersVariable"] = state?.udpSmallServersVariable;
            resourceInputs["version"] = state?.version;
            resourceInputs["vtyLogging"] = state?.vtyLogging;
            resourceInputs["vtyLoggingVariable"] = state?.vtyLoggingVariable;
        } else {
            const args = argsOrState as CedgeGlobalFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["arpProxy"] = args?.arpProxy;
            resourceInputs["arpProxyVariable"] = args?.arpProxyVariable;
            resourceInputs["bootp"] = args?.bootp;
            resourceInputs["bootpVariable"] = args?.bootpVariable;
            resourceInputs["cdp"] = args?.cdp;
            resourceInputs["cdpVariable"] = args?.cdpVariable;
            resourceInputs["consoleLogging"] = args?.consoleLogging;
            resourceInputs["consoleLoggingVariable"] = args?.consoleLoggingVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["domainLookup"] = args?.domainLookup;
            resourceInputs["domainLookupVariable"] = args?.domainLookupVariable;
            resourceInputs["ftpPassive"] = args?.ftpPassive;
            resourceInputs["ftpPassiveVariable"] = args?.ftpPassiveVariable;
            resourceInputs["httpAuthentication"] = args?.httpAuthentication;
            resourceInputs["httpAuthenticationVariable"] = args?.httpAuthenticationVariable;
            resourceInputs["httpServer"] = args?.httpServer;
            resourceInputs["httpServerVariable"] = args?.httpServerVariable;
            resourceInputs["httpsServer"] = args?.httpsServer;
            resourceInputs["httpsServerVariable"] = args?.httpsServerVariable;
            resourceInputs["ipSourceRouting"] = args?.ipSourceRouting;
            resourceInputs["ipSourceRoutingVariable"] = args?.ipSourceRoutingVariable;
            resourceInputs["lineVty"] = args?.lineVty;
            resourceInputs["lineVtyVariable"] = args?.lineVtyVariable;
            resourceInputs["lldp"] = args?.lldp;
            resourceInputs["lldpVariable"] = args?.lldpVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat64TcpTimeout"] = args?.nat64TcpTimeout;
            resourceInputs["nat64TcpTimeoutVariable"] = args?.nat64TcpTimeoutVariable;
            resourceInputs["nat64UdpTimeout"] = args?.nat64UdpTimeout;
            resourceInputs["nat64UdpTimeoutVariable"] = args?.nat64UdpTimeoutVariable;
            resourceInputs["rshRcp"] = args?.rshRcp;
            resourceInputs["rshRcpVariable"] = args?.rshRcpVariable;
            resourceInputs["snmpIfindexPersist"] = args?.snmpIfindexPersist;
            resourceInputs["snmpIfindexPersistVariable"] = args?.snmpIfindexPersistVariable;
            resourceInputs["sourceInterface"] = args?.sourceInterface;
            resourceInputs["sourceInterfaceVariable"] = args?.sourceInterfaceVariable;
            resourceInputs["sshVersion"] = args?.sshVersion;
            resourceInputs["sshVersionVariable"] = args?.sshVersionVariable;
            resourceInputs["tcpKeepalivesIn"] = args?.tcpKeepalivesIn;
            resourceInputs["tcpKeepalivesInVariable"] = args?.tcpKeepalivesInVariable;
            resourceInputs["tcpKeepalivesOut"] = args?.tcpKeepalivesOut;
            resourceInputs["tcpKeepalivesOutVariable"] = args?.tcpKeepalivesOutVariable;
            resourceInputs["tcpSmallServers"] = args?.tcpSmallServers;
            resourceInputs["tcpSmallServersVariable"] = args?.tcpSmallServersVariable;
            resourceInputs["udpSmallServers"] = args?.udpSmallServers;
            resourceInputs["udpSmallServersVariable"] = args?.udpSmallServersVariable;
            resourceInputs["vtyLogging"] = args?.vtyLogging;
            resourceInputs["vtyLoggingVariable"] = args?.vtyLoggingVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CedgeGlobalFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CedgeGlobalFeatureTemplate resources.
 */
export interface CedgeGlobalFeatureTemplateState {
    /**
     * Set ARP Proxy
     *   - Default value: `false`
     */
    arpProxy?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    arpProxyVariable?: pulumi.Input<string>;
    /**
     * Configure Ignore BOOTP
     *   - Default value: `true`
     */
    bootp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    bootpVariable?: pulumi.Input<string>;
    /**
     * Configure CDP
     *   - Default value: `true`
     */
    cdp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    cdpVariable?: pulumi.Input<string>;
    /**
     * Configure Console Logging
     *   - Default value: `true`
     */
    consoleLogging?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    consoleLoggingVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure Domain-Lookup
     *   - Default value: `false`
     */
    domainLookup?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    domainLookupVariable?: pulumi.Input<string>;
    /**
     * Set Passive FTP
     *   - Default value: `false`
     */
    ftpPassive?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ftpPassiveVariable?: pulumi.Input<string>;
    /**
     * Set preference for HTTP Authentication
     *   - Choices: `local`, `aaa`
     */
    httpAuthentication?: pulumi.Input<string>;
    /**
     * Variable name
     */
    httpAuthenticationVariable?: pulumi.Input<string>;
    /**
     * Set HTTP Server
     *   - Default value: `false`
     */
    httpServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    httpServerVariable?: pulumi.Input<string>;
    /**
     * Set HTTPS Server
     *   - Default value: `false`
     */
    httpsServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    httpsServerVariable?: pulumi.Input<string>;
    /**
     * Set Source Route
     *   - Default value: `false`
     */
    ipSourceRouting?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipSourceRoutingVariable?: pulumi.Input<string>;
    /**
     * Configure Telnet (Outbound)
     *   - Default value: `false`
     */
    lineVty?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    lineVtyVariable?: pulumi.Input<string>;
    /**
     * Configure LLDP
     *   - Default value: `true`
     */
    lldp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    lldpVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Set NAT64 TCP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `3600`
     */
    nat64TcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nat64TcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set NAT64 UDP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `300`
     */
    nat64UdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nat64UdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set RSH/RCP
     *   - Default value: `false`
     */
    rshRcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    rshRcpVariable?: pulumi.Input<string>;
    /**
     * Configure SNMP Ifindex Persist
     *   - Default value: `true`
     */
    snmpIfindexPersist?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    snmpIfindexPersistVariable?: pulumi.Input<string>;
    /**
     * Specify interface for source address in all HTTP(S) client connections
     */
    sourceInterface?: pulumi.Input<string>;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: pulumi.Input<string>;
    /**
     * Set SSH version
     *   - Range: `1`-`2`
     */
    sshVersion?: pulumi.Input<number>;
    /**
     * Variable name
     */
    sshVersionVariable?: pulumi.Input<string>;
    /**
     * Configure tcp-keepalives-in
     *   - Default value: `true`
     */
    tcpKeepalivesIn?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tcpKeepalivesInVariable?: pulumi.Input<string>;
    /**
     * Configure tcp-keepalives-out
     *   - Default value: `true`
     */
    tcpKeepalivesOut?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tcpKeepalivesOutVariable?: pulumi.Input<string>;
    /**
     * Configure tcp-small-servers
     *   - Default value: `false`
     */
    tcpSmallServers?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tcpSmallServersVariable?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Configure udp-small-servers
     *   - Default value: `false`
     */
    udpSmallServers?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    udpSmallServersVariable?: pulumi.Input<string>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
    /**
     * Configure VTY Line Logging
     *   - Default value: `false`
     */
    vtyLogging?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    vtyLoggingVariable?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CedgeGlobalFeatureTemplate resource.
 */
export interface CedgeGlobalFeatureTemplateArgs {
    /**
     * Set ARP Proxy
     *   - Default value: `false`
     */
    arpProxy?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    arpProxyVariable?: pulumi.Input<string>;
    /**
     * Configure Ignore BOOTP
     *   - Default value: `true`
     */
    bootp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    bootpVariable?: pulumi.Input<string>;
    /**
     * Configure CDP
     *   - Default value: `true`
     */
    cdp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    cdpVariable?: pulumi.Input<string>;
    /**
     * Configure Console Logging
     *   - Default value: `true`
     */
    consoleLogging?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    consoleLoggingVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure Domain-Lookup
     *   - Default value: `false`
     */
    domainLookup?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    domainLookupVariable?: pulumi.Input<string>;
    /**
     * Set Passive FTP
     *   - Default value: `false`
     */
    ftpPassive?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ftpPassiveVariable?: pulumi.Input<string>;
    /**
     * Set preference for HTTP Authentication
     *   - Choices: `local`, `aaa`
     */
    httpAuthentication?: pulumi.Input<string>;
    /**
     * Variable name
     */
    httpAuthenticationVariable?: pulumi.Input<string>;
    /**
     * Set HTTP Server
     *   - Default value: `false`
     */
    httpServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    httpServerVariable?: pulumi.Input<string>;
    /**
     * Set HTTPS Server
     *   - Default value: `false`
     */
    httpsServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    httpsServerVariable?: pulumi.Input<string>;
    /**
     * Set Source Route
     *   - Default value: `false`
     */
    ipSourceRouting?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipSourceRoutingVariable?: pulumi.Input<string>;
    /**
     * Configure Telnet (Outbound)
     *   - Default value: `false`
     */
    lineVty?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    lineVtyVariable?: pulumi.Input<string>;
    /**
     * Configure LLDP
     *   - Default value: `true`
     */
    lldp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    lldpVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Set NAT64 TCP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `3600`
     */
    nat64TcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nat64TcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set NAT64 UDP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `300`
     */
    nat64UdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nat64UdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set RSH/RCP
     *   - Default value: `false`
     */
    rshRcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    rshRcpVariable?: pulumi.Input<string>;
    /**
     * Configure SNMP Ifindex Persist
     *   - Default value: `true`
     */
    snmpIfindexPersist?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    snmpIfindexPersistVariable?: pulumi.Input<string>;
    /**
     * Specify interface for source address in all HTTP(S) client connections
     */
    sourceInterface?: pulumi.Input<string>;
    /**
     * Variable name
     */
    sourceInterfaceVariable?: pulumi.Input<string>;
    /**
     * Set SSH version
     *   - Range: `1`-`2`
     */
    sshVersion?: pulumi.Input<number>;
    /**
     * Variable name
     */
    sshVersionVariable?: pulumi.Input<string>;
    /**
     * Configure tcp-keepalives-in
     *   - Default value: `true`
     */
    tcpKeepalivesIn?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tcpKeepalivesInVariable?: pulumi.Input<string>;
    /**
     * Configure tcp-keepalives-out
     *   - Default value: `true`
     */
    tcpKeepalivesOut?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tcpKeepalivesOutVariable?: pulumi.Input<string>;
    /**
     * Configure tcp-small-servers
     *   - Default value: `false`
     */
    tcpSmallServers?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tcpSmallServersVariable?: pulumi.Input<string>;
    /**
     * Configure udp-small-servers
     *   - Default value: `false`
     */
    udpSmallServers?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    udpSmallServersVariable?: pulumi.Input<string>;
    /**
     * Configure VTY Line Logging
     *   - Default value: `false`
     */
    vtyLogging?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    vtyLoggingVariable?: pulumi.Input<string>;
}
