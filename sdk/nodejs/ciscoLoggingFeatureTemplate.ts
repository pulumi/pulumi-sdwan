// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco Logging feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoLoggingFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoLoggingFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoLoggingFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoLoggingFeatureTemplate {
        return new CiscoLoggingFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoLoggingFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoLoggingFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoLoggingFeatureTemplate.__pulumiType;
    }

    /**
     * The description of the feature template
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    public readonly deviceTypes!: pulumi.Output<string[]>;
    /**
     * Enable logging to local disk - Default value: `true`
     */
    public readonly diskLogging!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly diskLoggingVariable!: pulumi.Output<string | undefined>;
    /**
     * Enable logging to remote server
     */
    public readonly ipv4Servers!: pulumi.Output<outputs.CiscoLoggingFeatureTemplateIpv4Server[] | undefined>;
    /**
     * Enable logging to remote IPv6 server
     */
    public readonly ipv6Servers!: pulumi.Output<outputs.CiscoLoggingFeatureTemplateIpv6Server[] | undefined>;
    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     */
    public readonly logRotations!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly logRotationsVariable!: pulumi.Output<string | undefined>;
    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     */
    public readonly maxSize!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly maxSizeVariable!: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template type
     */
    public /*out*/ readonly templateType!: pulumi.Output<string>;
    /**
     * Configure a TLS profile
     */
    public readonly tlsProfiles!: pulumi.Output<outputs.CiscoLoggingFeatureTemplateTlsProfile[] | undefined>;
    /**
     * The version of the feature template
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a CiscoLoggingFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoLoggingFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoLoggingFeatureTemplateArgs | CiscoLoggingFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoLoggingFeatureTemplateState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceTypes"] = state ? state.deviceTypes : undefined;
            resourceInputs["diskLogging"] = state ? state.diskLogging : undefined;
            resourceInputs["diskLoggingVariable"] = state ? state.diskLoggingVariable : undefined;
            resourceInputs["ipv4Servers"] = state ? state.ipv4Servers : undefined;
            resourceInputs["ipv6Servers"] = state ? state.ipv6Servers : undefined;
            resourceInputs["logRotations"] = state ? state.logRotations : undefined;
            resourceInputs["logRotationsVariable"] = state ? state.logRotationsVariable : undefined;
            resourceInputs["maxSize"] = state ? state.maxSize : undefined;
            resourceInputs["maxSizeVariable"] = state ? state.maxSizeVariable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["templateType"] = state ? state.templateType : undefined;
            resourceInputs["tlsProfiles"] = state ? state.tlsProfiles : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as CiscoLoggingFeatureTemplateArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.deviceTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceTypes"] = args ? args.deviceTypes : undefined;
            resourceInputs["diskLogging"] = args ? args.diskLogging : undefined;
            resourceInputs["diskLoggingVariable"] = args ? args.diskLoggingVariable : undefined;
            resourceInputs["ipv4Servers"] = args ? args.ipv4Servers : undefined;
            resourceInputs["ipv6Servers"] = args ? args.ipv6Servers : undefined;
            resourceInputs["logRotations"] = args ? args.logRotations : undefined;
            resourceInputs["logRotationsVariable"] = args ? args.logRotationsVariable : undefined;
            resourceInputs["maxSize"] = args ? args.maxSize : undefined;
            resourceInputs["maxSizeVariable"] = args ? args.maxSizeVariable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tlsProfiles"] = args ? args.tlsProfiles : undefined;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoLoggingFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoLoggingFeatureTemplate resources.
 */
export interface CiscoLoggingFeatureTemplateState {
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable logging to local disk - Default value: `true`
     */
    diskLogging?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    diskLoggingVariable?: pulumi.Input<string>;
    /**
     * Enable logging to remote server
     */
    ipv4Servers?: pulumi.Input<pulumi.Input<inputs.CiscoLoggingFeatureTemplateIpv4Server>[]>;
    /**
     * Enable logging to remote IPv6 server
     */
    ipv6Servers?: pulumi.Input<pulumi.Input<inputs.CiscoLoggingFeatureTemplateIpv6Server>[]>;
    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     */
    logRotations?: pulumi.Input<number>;
    /**
     * Variable name
     */
    logRotationsVariable?: pulumi.Input<string>;
    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Variable name
     */
    maxSizeVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Configure a TLS profile
     */
    tlsProfiles?: pulumi.Input<pulumi.Input<inputs.CiscoLoggingFeatureTemplateTlsProfile>[]>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CiscoLoggingFeatureTemplate resource.
 */
export interface CiscoLoggingFeatureTemplateArgs {
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable logging to local disk - Default value: `true`
     */
    diskLogging?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    diskLoggingVariable?: pulumi.Input<string>;
    /**
     * Enable logging to remote server
     */
    ipv4Servers?: pulumi.Input<pulumi.Input<inputs.CiscoLoggingFeatureTemplateIpv4Server>[]>;
    /**
     * Enable logging to remote IPv6 server
     */
    ipv6Servers?: pulumi.Input<pulumi.Input<inputs.CiscoLoggingFeatureTemplateIpv6Server>[]>;
    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     */
    logRotations?: pulumi.Input<number>;
    /**
     * Variable name
     */
    logRotationsVariable?: pulumi.Input<string>;
    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     */
    maxSize?: pulumi.Input<number>;
    /**
     * Variable name
     */
    maxSizeVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Configure a TLS profile
     */
    tlsProfiles?: pulumi.Input<pulumi.Input<inputs.CiscoLoggingFeatureTemplateTlsProfile>[]>;
}
