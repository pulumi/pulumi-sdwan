// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a System Performance Monitoring Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.SystemPerformanceMonitoringFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     appPerfMonitorEnabled: true,
 *     appPerfMonitorAppGroups: ["amazon-group"],
 *     monitoringConfigEnabled: true,
 *     monitoringConfigInterval: "30",
 *     eventDrivenConfigEnabled: true,
 *     eventDrivenEvents: ["SLA_CHANGE"],
 * });
 * ```
 *
 * ## Import
 *
 * Expected import identifier with the format: "system_performance_monitoring_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/systemPerformanceMonitoringFeature:SystemPerformanceMonitoringFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class SystemPerformanceMonitoringFeature extends pulumi.CustomResource {
    /**
     * Get an existing SystemPerformanceMonitoringFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemPerformanceMonitoringFeatureState, opts?: pulumi.CustomResourceOptions): SystemPerformanceMonitoringFeature {
        return new SystemPerformanceMonitoringFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/systemPerformanceMonitoringFeature:SystemPerformanceMonitoringFeature';

    /**
     * Returns true if the given object is an instance of SystemPerformanceMonitoringFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemPerformanceMonitoringFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemPerformanceMonitoringFeature.__pulumiType;
    }

    /**
     * Application groups to be monitored
     */
    public readonly appPerfMonitorAppGroups!: pulumi.Output<string[] | undefined>;
    /**
     * Application performance monitoring enable or disable - Default value: `false`
     */
    public readonly appPerfMonitorEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the Feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * UMTS event driven monitoring enable or disable - Default value: `false`
     */
    public readonly eventDrivenConfigEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * UMTS events
     */
    public readonly eventDrivenEvents!: pulumi.Output<string[] | undefined>;
    /**
     * Feature Profile ID
     */
    public readonly featureProfileId!: pulumi.Output<string | undefined>;
    /**
     * UMTS monitoring enable or disable - Default value: `false`
     */
    public readonly monitoringConfigEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * UMTS monitoring interval(Minutes) - Choices: `30`, `60`
     */
    public readonly monitoringConfigInterval!: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The version of the Feature
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a SystemPerformanceMonitoringFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemPerformanceMonitoringFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemPerformanceMonitoringFeatureArgs | SystemPerformanceMonitoringFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemPerformanceMonitoringFeatureState | undefined;
            resourceInputs["appPerfMonitorAppGroups"] = state ? state.appPerfMonitorAppGroups : undefined;
            resourceInputs["appPerfMonitorEnabled"] = state ? state.appPerfMonitorEnabled : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["eventDrivenConfigEnabled"] = state ? state.eventDrivenConfigEnabled : undefined;
            resourceInputs["eventDrivenEvents"] = state ? state.eventDrivenEvents : undefined;
            resourceInputs["featureProfileId"] = state ? state.featureProfileId : undefined;
            resourceInputs["monitoringConfigEnabled"] = state ? state.monitoringConfigEnabled : undefined;
            resourceInputs["monitoringConfigInterval"] = state ? state.monitoringConfigInterval : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SystemPerformanceMonitoringFeatureArgs | undefined;
            resourceInputs["appPerfMonitorAppGroups"] = args ? args.appPerfMonitorAppGroups : undefined;
            resourceInputs["appPerfMonitorEnabled"] = args ? args.appPerfMonitorEnabled : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["eventDrivenConfigEnabled"] = args ? args.eventDrivenConfigEnabled : undefined;
            resourceInputs["eventDrivenEvents"] = args ? args.eventDrivenEvents : undefined;
            resourceInputs["featureProfileId"] = args ? args.featureProfileId : undefined;
            resourceInputs["monitoringConfigEnabled"] = args ? args.monitoringConfigEnabled : undefined;
            resourceInputs["monitoringConfigInterval"] = args ? args.monitoringConfigInterval : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemPerformanceMonitoringFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemPerformanceMonitoringFeature resources.
 */
export interface SystemPerformanceMonitoringFeatureState {
    /**
     * Application groups to be monitored
     */
    appPerfMonitorAppGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Application performance monitoring enable or disable - Default value: `false`
     */
    appPerfMonitorEnabled?: pulumi.Input<boolean>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * UMTS event driven monitoring enable or disable - Default value: `false`
     */
    eventDrivenConfigEnabled?: pulumi.Input<boolean>;
    /**
     * UMTS events
     */
    eventDrivenEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * UMTS monitoring enable or disable - Default value: `false`
     */
    monitoringConfigEnabled?: pulumi.Input<boolean>;
    /**
     * UMTS monitoring interval(Minutes) - Choices: `30`, `60`
     */
    monitoringConfigInterval?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemPerformanceMonitoringFeature resource.
 */
export interface SystemPerformanceMonitoringFeatureArgs {
    /**
     * Application groups to be monitored
     */
    appPerfMonitorAppGroups?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Application performance monitoring enable or disable - Default value: `false`
     */
    appPerfMonitorEnabled?: pulumi.Input<boolean>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * UMTS event driven monitoring enable or disable - Default value: `false`
     */
    eventDrivenConfigEnabled?: pulumi.Input<boolean>;
    /**
     * UMTS events
     */
    eventDrivenEvents?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * UMTS monitoring enable or disable - Default value: `false`
     */
    monitoringConfigEnabled?: pulumi.Input<boolean>;
    /**
     * UMTS monitoring interval(Minutes) - Choices: `30`, `60`
     */
    monitoringConfigInterval?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
}
