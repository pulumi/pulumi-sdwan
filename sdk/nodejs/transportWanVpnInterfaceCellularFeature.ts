// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport WAN VPN Interface Cellular Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "transport_wan_vpn_interface_cellular_feature_id,feature_profile_id,transport_wan_vpn_feature_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037"
 * ```
 */
export class TransportWanVpnInterfaceCellularFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportWanVpnInterfaceCellularFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportWanVpnInterfaceCellularFeatureState, opts?: pulumi.CustomResourceOptions): TransportWanVpnInterfaceCellularFeature {
        return new TransportWanVpnInterfaceCellularFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature';

    /**
     * Returns true if the given object is an instance of TransportWanVpnInterfaceCellularFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportWanVpnInterfaceCellularFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportWanVpnInterfaceCellularFeature.__pulumiType;
    }

    declare public readonly aclIpv4EgressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv4IngressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv6EgressFeatureId: pulumi.Output<string | undefined>;
    declare public readonly aclIpv6IngressFeatureId: pulumi.Output<string | undefined>;
    /**
     * Configure ARP entries
     */
    declare public readonly arps: pulumi.Output<outputs.TransportWanVpnInterfaceCellularFeatureArp[] | undefined>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    declare public readonly interfaceDescription: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceDescriptionVariable: pulumi.Output<string | undefined>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly interfaceMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceMtuVariable: pulumi.Output<string | undefined>;
    declare public readonly interfaceName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceNameVariable: pulumi.Output<string | undefined>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    declare public readonly ipDirectedBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipDirectedBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly ipMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipMtuVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv4DhcpHelperVariable: pulumi.Output<string | undefined>;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    declare public readonly ipv4DhcpHelpers: pulumi.Output<string[] | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    declare public readonly natIpv4: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly natIpv4Variable: pulumi.Output<string | undefined>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    declare public readonly natTcpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly natTcpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    declare public readonly natUdpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly natUdpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    declare public readonly perTunnelQos: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly perTunnelQosVariable: pulumi.Output<string | undefined>;
    /**
     * Adaptive QoS
     *   - Default value: `false`
     */
    declare public readonly qosAdaptive: pulumi.Output<boolean | undefined>;
    /**
     * Shaping Rate Downstream
     *   - Default value: `false`
     */
    declare public readonly qosAdaptiveBandwidthDownstream: pulumi.Output<boolean | undefined>;
    /**
     * Shaping Rate Upstream
     *   - Default value: `false`
     */
    declare public readonly qosAdaptiveBandwidthUpstream: pulumi.Output<boolean | undefined>;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveDefaultDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveDefaultDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveDefaultUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveDefaultUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Adapt Period(Minutes)
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    declare public readonly qosAdaptivePeriod: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptivePeriodVariable: pulumi.Output<string | undefined>;
    /**
     * Shaping Rate (Kbps)
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosShapingRate: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosShapingRateVariable: pulumi.Output<string | undefined>;
    /**
     * Service Provider Name
     */
    declare public readonly serviceProvider: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly serviceProviderVariable: pulumi.Output<string | undefined>;
    /**
     * - Default value: `true`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    declare public readonly tlocExtension: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tlocExtensionVariable: pulumi.Output<string | undefined>;
    /**
     * Enable tracker for this interface
     */
    declare public readonly tracker: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly trackerVariable: pulumi.Output<string | undefined>;
    /**
     * Transport WAN VPN Feature ID
     */
    declare public readonly transportWanVpnFeatureId: pulumi.Output<string>;
    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`100`
     *   - Default value: `50`
     */
    declare public readonly tunnelBandwidthPercent: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelBandwidthPercentVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel Interface on/off
     *   - Default value: `false`
     */
    declare public readonly tunnelInterface: pulumi.Output<boolean | undefined>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowAll: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowAllVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBfd: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBfdVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBgp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBgpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDhcp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDhcpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDns: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDnsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny HTTPS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowHttps: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowHttpsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowIcmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowIcmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNetconf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNetconfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NTP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowNtp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNtpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowOspf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowOspfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSnmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSnmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SSH
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowSsh: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSshVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowStun: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowStunVariable: pulumi.Output<string | undefined>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnel: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnelVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceBorder: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBorderVariable: pulumi.Output<string | undefined>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceCarrier: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceCarrierVariable: pulumi.Output<string | undefined>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceClearDontFragment: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceClearDontFragmentVariable: pulumi.Output<string | undefined>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro ethernet`, `biz internet`, `public internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `mpls`
     */
    declare public readonly tunnelInterfaceColor: pulumi.Output<string | undefined>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceColorRestrict: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorRestrictVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorVariable: pulumi.Output<string | undefined>;
    /**
     * Encapsulation for TLOC
     */
    declare public readonly tunnelInterfaceEncapsulations: pulumi.Output<outputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupListVariable: pulumi.Output<string | undefined>;
    /**
     * Exclude the following controller groups defined in this list.
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupLists: pulumi.Output<number[] | undefined>;
    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     */
    declare public readonly tunnelInterfaceGroups: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceGroupsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    declare public readonly tunnelInterfaceHelloInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    declare public readonly tunnelInterfaceHelloTolerance: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloToleranceVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLastResortCircuit: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLastResortCircuitVariable: pulumi.Output<string | undefined>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLowBandwidthLink: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLowBandwidthLinkVariable: pulumi.Output<string | undefined>;
    /**
     * Maximum Control Connections
     *   - Range: `0`-`100`
     */
    declare public readonly tunnelInterfaceMaxControlConnections: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceMaxControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceNatRefreshInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNatRefreshIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Accept and respond to network-prefix-directed broadcasts
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceNetworkBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNetworkBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfacePortHop: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfacePortHopVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tunnelInterfaceTunnelTcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceTunnelTcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceVbondAsStunServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVbondAsStunServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreference: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreferenceVariable: pulumi.Output<string | undefined>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    declare public readonly tunnelQosMode: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelQosModeVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a TransportWanVpnInterfaceCellularFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportWanVpnInterfaceCellularFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportWanVpnInterfaceCellularFeatureArgs | TransportWanVpnInterfaceCellularFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportWanVpnInterfaceCellularFeatureState | undefined;
            resourceInputs["aclIpv4EgressFeatureId"] = state?.aclIpv4EgressFeatureId;
            resourceInputs["aclIpv4IngressFeatureId"] = state?.aclIpv4IngressFeatureId;
            resourceInputs["aclIpv6EgressFeatureId"] = state?.aclIpv6EgressFeatureId;
            resourceInputs["aclIpv6IngressFeatureId"] = state?.aclIpv6IngressFeatureId;
            resourceInputs["arps"] = state?.arps;
            resourceInputs["bandwidthDownstream"] = state?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = state?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = state?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = state?.bandwidthUpstreamVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["interfaceDescription"] = state?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = state?.interfaceDescriptionVariable;
            resourceInputs["interfaceMtu"] = state?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = state?.interfaceMtuVariable;
            resourceInputs["interfaceName"] = state?.interfaceName;
            resourceInputs["interfaceNameVariable"] = state?.interfaceNameVariable;
            resourceInputs["ipDirectedBroadcast"] = state?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = state?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = state?.ipMtu;
            resourceInputs["ipMtuVariable"] = state?.ipMtuVariable;
            resourceInputs["ipv4DhcpHelperVariable"] = state?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = state?.ipv4DhcpHelpers;
            resourceInputs["name"] = state?.name;
            resourceInputs["natIpv4"] = state?.natIpv4;
            resourceInputs["natIpv4Variable"] = state?.natIpv4Variable;
            resourceInputs["natTcpTimeout"] = state?.natTcpTimeout;
            resourceInputs["natTcpTimeoutVariable"] = state?.natTcpTimeoutVariable;
            resourceInputs["natUdpTimeout"] = state?.natUdpTimeout;
            resourceInputs["natUdpTimeoutVariable"] = state?.natUdpTimeoutVariable;
            resourceInputs["perTunnelQos"] = state?.perTunnelQos;
            resourceInputs["perTunnelQosVariable"] = state?.perTunnelQosVariable;
            resourceInputs["qosAdaptive"] = state?.qosAdaptive;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = state?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = state?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveDefaultDownstream"] = state?.qosAdaptiveDefaultDownstream;
            resourceInputs["qosAdaptiveDefaultDownstreamVariable"] = state?.qosAdaptiveDefaultDownstreamVariable;
            resourceInputs["qosAdaptiveDefaultUpstream"] = state?.qosAdaptiveDefaultUpstream;
            resourceInputs["qosAdaptiveDefaultUpstreamVariable"] = state?.qosAdaptiveDefaultUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = state?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = state?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = state?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = state?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = state?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = state?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = state?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = state?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = state?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = state?.qosAdaptivePeriodVariable;
            resourceInputs["qosShapingRate"] = state?.qosShapingRate;
            resourceInputs["qosShapingRateVariable"] = state?.qosShapingRateVariable;
            resourceInputs["serviceProvider"] = state?.serviceProvider;
            resourceInputs["serviceProviderVariable"] = state?.serviceProviderVariable;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["tcpMss"] = state?.tcpMss;
            resourceInputs["tcpMssVariable"] = state?.tcpMssVariable;
            resourceInputs["tlocExtension"] = state?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = state?.tlocExtensionVariable;
            resourceInputs["tracker"] = state?.tracker;
            resourceInputs["trackerVariable"] = state?.trackerVariable;
            resourceInputs["transportWanVpnFeatureId"] = state?.transportWanVpnFeatureId;
            resourceInputs["tunnelBandwidthPercent"] = state?.tunnelBandwidthPercent;
            resourceInputs["tunnelBandwidthPercentVariable"] = state?.tunnelBandwidthPercentVariable;
            resourceInputs["tunnelInterface"] = state?.tunnelInterface;
            resourceInputs["tunnelInterfaceAllowAll"] = state?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = state?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBfd"] = state?.tunnelInterfaceAllowBfd;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = state?.tunnelInterfaceAllowBfdVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = state?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = state?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = state?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = state?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = state?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = state?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = state?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = state?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = state?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = state?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = state?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = state?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = state?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = state?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = state?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = state?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = state?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = state?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = state?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = state?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = state?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = state?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = state?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = state?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = state?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = state?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = state?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = state?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = state?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = state?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = state?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = state?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = state?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = state?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = state?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = state?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = state?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGroups"] = state?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = state?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = state?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = state?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = state?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = state?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = state?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = state?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = state?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = state?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = state?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = state?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = state?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = state?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = state?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = state?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = state?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = state?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = state?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = state?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = state?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = state?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = state?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = state?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = state?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = state?.tunnelQosModeVariable;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as TransportWanVpnInterfaceCellularFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            if (args?.transportWanVpnFeatureId === undefined && !opts.urn) {
                throw new Error("Missing required property 'transportWanVpnFeatureId'");
            }
            resourceInputs["aclIpv4EgressFeatureId"] = args?.aclIpv4EgressFeatureId;
            resourceInputs["aclIpv4IngressFeatureId"] = args?.aclIpv4IngressFeatureId;
            resourceInputs["aclIpv6EgressFeatureId"] = args?.aclIpv6EgressFeatureId;
            resourceInputs["aclIpv6IngressFeatureId"] = args?.aclIpv6IngressFeatureId;
            resourceInputs["arps"] = args?.arps;
            resourceInputs["bandwidthDownstream"] = args?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = args?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = args?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = args?.bandwidthUpstreamVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["interfaceDescription"] = args?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = args?.interfaceDescriptionVariable;
            resourceInputs["interfaceMtu"] = args?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = args?.interfaceMtuVariable;
            resourceInputs["interfaceName"] = args?.interfaceName;
            resourceInputs["interfaceNameVariable"] = args?.interfaceNameVariable;
            resourceInputs["ipDirectedBroadcast"] = args?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = args?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = args?.ipMtu;
            resourceInputs["ipMtuVariable"] = args?.ipMtuVariable;
            resourceInputs["ipv4DhcpHelperVariable"] = args?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = args?.ipv4DhcpHelpers;
            resourceInputs["name"] = args?.name;
            resourceInputs["natIpv4"] = args?.natIpv4;
            resourceInputs["natIpv4Variable"] = args?.natIpv4Variable;
            resourceInputs["natTcpTimeout"] = args?.natTcpTimeout;
            resourceInputs["natTcpTimeoutVariable"] = args?.natTcpTimeoutVariable;
            resourceInputs["natUdpTimeout"] = args?.natUdpTimeout;
            resourceInputs["natUdpTimeoutVariable"] = args?.natUdpTimeoutVariable;
            resourceInputs["perTunnelQos"] = args?.perTunnelQos;
            resourceInputs["perTunnelQosVariable"] = args?.perTunnelQosVariable;
            resourceInputs["qosAdaptive"] = args?.qosAdaptive;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = args?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = args?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveDefaultDownstream"] = args?.qosAdaptiveDefaultDownstream;
            resourceInputs["qosAdaptiveDefaultDownstreamVariable"] = args?.qosAdaptiveDefaultDownstreamVariable;
            resourceInputs["qosAdaptiveDefaultUpstream"] = args?.qosAdaptiveDefaultUpstream;
            resourceInputs["qosAdaptiveDefaultUpstreamVariable"] = args?.qosAdaptiveDefaultUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = args?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = args?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = args?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = args?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = args?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = args?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = args?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = args?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = args?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = args?.qosAdaptivePeriodVariable;
            resourceInputs["qosShapingRate"] = args?.qosShapingRate;
            resourceInputs["qosShapingRateVariable"] = args?.qosShapingRateVariable;
            resourceInputs["serviceProvider"] = args?.serviceProvider;
            resourceInputs["serviceProviderVariable"] = args?.serviceProviderVariable;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["tcpMss"] = args?.tcpMss;
            resourceInputs["tcpMssVariable"] = args?.tcpMssVariable;
            resourceInputs["tlocExtension"] = args?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = args?.tlocExtensionVariable;
            resourceInputs["tracker"] = args?.tracker;
            resourceInputs["trackerVariable"] = args?.trackerVariable;
            resourceInputs["transportWanVpnFeatureId"] = args?.transportWanVpnFeatureId;
            resourceInputs["tunnelBandwidthPercent"] = args?.tunnelBandwidthPercent;
            resourceInputs["tunnelBandwidthPercentVariable"] = args?.tunnelBandwidthPercentVariable;
            resourceInputs["tunnelInterface"] = args?.tunnelInterface;
            resourceInputs["tunnelInterfaceAllowAll"] = args?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = args?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBfd"] = args?.tunnelInterfaceAllowBfd;
            resourceInputs["tunnelInterfaceAllowBfdVariable"] = args?.tunnelInterfaceAllowBfdVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = args?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = args?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = args?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = args?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = args?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = args?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = args?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = args?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = args?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = args?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = args?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = args?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = args?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = args?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = args?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = args?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = args?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = args?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = args?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = args?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = args?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = args?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = args?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = args?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = args?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = args?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = args?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = args?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = args?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = args?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = args?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = args?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = args?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = args?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = args?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = args?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = args?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGroups"] = args?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = args?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = args?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = args?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = args?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = args?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = args?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = args?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = args?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = args?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = args?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = args?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = args?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = args?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = args?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = args?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = args?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = args?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = args?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = args?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = args?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = args?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = args?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = args?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = args?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = args?.tunnelQosModeVariable;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportWanVpnInterfaceCellularFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportWanVpnInterfaceCellularFeature resources.
 */
export interface TransportWanVpnInterfaceCellularFeatureState {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Configure ARP entries
     */
    arps?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceCellularFeatureArp>[]>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    natIpv4?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natIpv4Variable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    natTcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natTcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    natUdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natUdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS
     *   - Default value: `false`
     */
    qosAdaptive?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Downstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Upstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<boolean>;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Adapt Period(Minutes)
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Shaping Rate (Kbps)
     *   - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Service Provider Name
     */
    serviceProvider?: pulumi.Input<string>;
    /**
     * Variable name
     */
    serviceProviderVariable?: pulumi.Input<string>;
    /**
     * - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    tracker?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId?: pulumi.Input<string>;
    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`100`
     *   - Default value: `50`
     */
    tunnelBandwidthPercent?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelBandwidthPercentVariable?: pulumi.Input<string>;
    /**
     * Tunnel Interface on/off
     *   - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny HTTPS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `true`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro ethernet`, `biz internet`, `public internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `mpls`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list.
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Maximum Control Connections
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransportWanVpnInterfaceCellularFeature resource.
 */
export interface TransportWanVpnInterfaceCellularFeatureArgs {
    aclIpv4EgressFeatureId?: pulumi.Input<string>;
    aclIpv4IngressFeatureId?: pulumi.Input<string>;
    aclIpv6EgressFeatureId?: pulumi.Input<string>;
    aclIpv6IngressFeatureId?: pulumi.Input<string>;
    /**
     * Configure ARP entries
     */
    arps?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceCellularFeatureArp>[]>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    natIpv4?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natIpv4Variable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    natTcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natTcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    natUdpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natUdpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     */
    perTunnelQos?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    perTunnelQosVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS
     *   - Default value: `false`
     */
    qosAdaptive?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Downstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<boolean>;
    /**
     * Shaping Rate Upstream
     *   - Default value: `false`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<boolean>;
    /**
     * Adaptive QoS default downstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveDefaultUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveDefaultUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit (kbps)
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Adapt Period(Minutes)
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Shaping Rate (Kbps)
     *   - Range: `8`-`100000000`
     */
    qosShapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosShapingRateVariable?: pulumi.Input<string>;
    /**
     * Service Provider Name
     */
    serviceProvider?: pulumi.Input<string>;
    /**
     * Variable name
     */
    serviceProviderVariable?: pulumi.Input<string>;
    /**
     * - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    tracker?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: pulumi.Input<string>;
    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`100`
     *   - Default value: `50`
     */
    tunnelBandwidthPercent?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelBandwidthPercentVariable?: pulumi.Input<string>;
    /**
     * Tunnel Interface on/off
     *   - Default value: `false`
     */
    tunnelInterface?: pulumi.Input<boolean>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBfd?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBfdVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny HTTPS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `true`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro ethernet`, `biz internet`, `public internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `mpls`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.TransportWanVpnInterfaceCellularFeatureTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list.
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     */
    tunnelInterfaceGroups?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Maximum Control Connections
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
}
