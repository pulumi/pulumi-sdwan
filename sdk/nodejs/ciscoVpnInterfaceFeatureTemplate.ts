// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco VPN Interface feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoVpnInterfaceFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoVpnInterfaceFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoVpnInterfaceFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoVpnInterfaceFeatureTemplate {
        return new CiscoVpnInterfaceFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoVpnInterfaceFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoVpnInterfaceFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoVpnInterfaceFeatureTemplate.__pulumiType;
    }

    /**
     * Apply ACL
     */
    declare public readonly accessLists: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateAccessList[] | undefined>;
    /**
     * Assign IPv4 address
     */
    declare public readonly address: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly addressVariable: pulumi.Output<string | undefined>;
    /**
     * Timeout value for dynamically learned ARP entries, <0..2678400> seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     */
    declare public readonly arpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly arpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     */
    declare public readonly autoBandwidthDetect: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly autoBandwidthDetectVariable: pulumi.Output<string | undefined>;
    /**
     * Link autonegotiation
     */
    declare public readonly autonegotiate: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly autonegotiateVariable: pulumi.Output<string | undefined>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    declare public readonly bandwidthUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly bandwidthUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     */
    declare public readonly blockNonSourceIp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly blockNonSourceIpVariable: pulumi.Output<string | undefined>;
    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     */
    declare public readonly coreRegion: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly coreRegionVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Enable DHCP
     *   - Default value: `false`
     */
    declare public readonly dhcp: pulumi.Output<boolean | undefined>;
    /**
     * Set administrative distance for DHCP default route
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     */
    declare public readonly dhcpDistance: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly dhcpDistanceVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly dhcpVariable: pulumi.Output<string | undefined>;
    /**
     * Enable DHCPv6
     *   - Default value: `false`
     */
    declare public readonly dhcpv6: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly dhcpv6Variable: pulumi.Output<string | undefined>;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     */
    declare public readonly duplex: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly duplexVariable: pulumi.Output<string | undefined>;
    /**
     * Enable core region
     *   - Default value: `false`
     */
    declare public readonly enableCoreRegion: pulumi.Output<boolean | undefined>;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     */
    declare public readonly enableSgt: pulumi.Output<boolean | undefined>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    declare public readonly greTunnelSourceIp: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly greTunnelSourceIpVariable: pulumi.Output<string | undefined>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    declare public readonly greTunnelXconnect: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly greTunnelXconnectVariable: pulumi.Output<string | undefined>;
    /**
     * Set this option to disable the icmp/icmpv6 redirect packets
     *   - Default value: `true`
     */
    declare public readonly icmpRedirectDisable: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly icmpRedirectDisableVariable: pulumi.Output<string | undefined>;
    /**
     * Interface description
     */
    declare public readonly interfaceDescription: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceDescriptionVariable: pulumi.Output<string | undefined>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly interfaceMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceMtuVariable: pulumi.Output<string | undefined>;
    /**
     * Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
     */
    declare public readonly interfaceName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly interfaceNameVariable: pulumi.Output<string | undefined>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    declare public readonly ipDirectedBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipDirectedBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    declare public readonly ipMtu: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipMtuVariable: pulumi.Output<string | undefined>;
    /**
     * Iperf server for auto bandwidth detect
     */
    declare public readonly iperfServer: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly iperfServerVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv4DhcpHelperVariable: pulumi.Output<string | undefined>;
    /**
     * List of DHCP IPv4 helper addresses
     */
    declare public readonly ipv4DhcpHelpers: pulumi.Output<string[] | undefined>;
    /**
     * Assign secondary IP addresses
     */
    declare public readonly ipv4SecondaryAddresses: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress[] | undefined>;
    /**
     * Enable VRRP
     */
    declare public readonly ipv4Vrrps: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateIpv4Vrrp[] | undefined>;
    /**
     * Apply IPv6 access list
     */
    declare public readonly ipv6AccessLists: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessList[] | undefined>;
    /**
     * Assign IPv6 address
     */
    declare public readonly ipv6Address: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv6AddressVariable: pulumi.Output<string | undefined>;
    /**
     * DHCPv6 Helper
     */
    declare public readonly ipv6DhcpHelpers: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper[] | undefined>;
    /**
     * NAT64 on this interface
     *   - Default value: `false`
     */
    declare public readonly ipv6Nat: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly ipv6NatVariable: pulumi.Output<string | undefined>;
    /**
     * Assign secondary IPv6 addresses
     */
    declare public readonly ipv6SecondaryAddresses: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress[] | undefined>;
    /**
     * Enable VRRP
     */
    declare public readonly ipv6Vrrps: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateIpv6Vrrp[] | undefined>;
    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     */
    declare public readonly loadInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly loadIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set MAC-layer address
     */
    declare public readonly macAddress: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly macAddressVariable: pulumi.Output<string | undefined>;
    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     */
    declare public readonly mediaType: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly mediaTypeVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    declare public readonly nat: pulumi.Output<boolean | undefined>;
    /**
     * NAT64 on this interface
     *   - Default value: `false`
     */
    declare public readonly nat64Interface: pulumi.Output<boolean | undefined>;
    /**
     * NAT66 on this interface
     *   - Default value: `false`
     */
    declare public readonly nat66Interface: pulumi.Output<boolean | undefined>;
    /**
     * Configure NAT Inside Loopback Interface
     */
    declare public readonly natInsideSourceLoopbackInterface: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly natInsideSourceLoopbackInterfaceVariable: pulumi.Output<string | undefined>;
    /**
     * Enable port translation(PAT)
     *   - Default value: `true`
     */
    declare public readonly natOverload: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly natOverloadVariable: pulumi.Output<string | undefined>;
    /**
     * Ending IP address of NAT Pool Prefix Length
     */
    declare public readonly natPoolPrefixLength: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly natPoolPrefixLengthVariable: pulumi.Output<string | undefined>;
    /**
     * Ending IP address of NAT pool range
     */
    declare public readonly natPoolRangeEnd: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly natPoolRangeEndVariable: pulumi.Output<string | undefined>;
    /**
     * Starting IP address of NAT pool range
     */
    declare public readonly natPoolRangeStart: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly natPoolRangeStartVariable: pulumi.Output<string | undefined>;
    /**
     * NAT type
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     */
    declare public readonly natType: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly natTypeVariable: pulumi.Output<string | undefined>;
    /**
     * Configure interface as Power-over-Ethernet source
     *   - Default value: `false`
     */
    declare public readonly poe: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly poeVariable: pulumi.Output<string | undefined>;
    /**
     * Enable/Disable CTS SGT propagation on an interface.
     *   - Default value: `true`
     */
    declare public readonly propagateSgt: pulumi.Output<boolean | undefined>;
    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveBandwidthDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveBandwidthDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveBandwidthUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveBandwidthUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMaxUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMaxUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinDownstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinDownstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    declare public readonly qosAdaptiveMinUpstream: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptiveMinUpstreamVariable: pulumi.Output<string | undefined>;
    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    declare public readonly qosAdaptivePeriod: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosAdaptivePeriodVariable: pulumi.Output<string | undefined>;
    /**
     * Name of QoS map
     */
    declare public readonly qosMap: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosMapVariable: pulumi.Output<string | undefined>;
    /**
     * Name of VPN QoS map
     */
    declare public readonly qosMapVpn: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly qosMapVpnVariable: pulumi.Output<string | undefined>;
    /**
     * Name of rewrite rule
     */
    declare public readonly rewriteRuleName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly rewriteRuleNameVariable: pulumi.Output<string | undefined>;
    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     */
    declare public readonly secondaryRegion: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly secondaryRegionVariable: pulumi.Output<string | undefined>;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     */
    declare public readonly sgtEnforcement: pulumi.Output<boolean | undefined>;
    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     */
    declare public readonly sgtEnforcementSgt: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly sgtEnforcementSgtVariable: pulumi.Output<string | undefined>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    declare public readonly shapingRate: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly shapingRateVariable: pulumi.Output<string | undefined>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    declare public readonly shutdown: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly shutdownVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    declare public readonly speed: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly speedVariable: pulumi.Output<string | undefined>;
    /**
     * Configure static ARP entries
     */
    declare public readonly staticArps: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateStaticArp[] | undefined>;
    /**
     * static NAT
     */
    declare public readonly staticNat66Entries: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateStaticNat66Entry[] | undefined>;
    /**
     * Configure static NAT entries
     */
    declare public readonly staticNatEntries: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntry[] | undefined>;
    /**
     * Configure Port Forward entries
     */
    declare public readonly staticPortForwardEntries: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry[] | undefined>;
    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     */
    declare public readonly staticSgt: pulumi.Output<number | undefined>;
    /**
     * Indicates that the interface is trustworthy for CTS.
     *   - Default value: `false`
     */
    declare public readonly staticSgtTrusted: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly staticSgtVariable: pulumi.Output<string | undefined>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tcpMssAdjust: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpMssAdjustVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    declare public readonly tcpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tcpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    declare public readonly tlocExtension: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tlocExtensionVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly trackerVariable: pulumi.Output<string | undefined>;
    /**
     * Enable tracker for this interface
     */
    declare public readonly trackers: pulumi.Output<string[] | undefined>;
    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`99`
     *   - Default value: `50`
     */
    declare public readonly tunnelBandwidth: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelBandwidthVariable: pulumi.Output<string | undefined>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowAll: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowAllVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowBgp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowBgpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDhcp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDhcpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowDns: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowDnsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowHttps: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowHttpsVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceAllowIcmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowIcmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNetconf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNetconfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowNtp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowNtpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowOspf: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowOspfVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSnmp: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSnmpVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowSsh: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowSshVariable: pulumi.Output<string | undefined>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceAllowStun: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceAllowStunVariable: pulumi.Output<string | undefined>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnel: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBindLoopbackTunnelVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceBorder: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceBorderVariable: pulumi.Output<string | undefined>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceCarrier: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceCarrierVariable: pulumi.Output<string | undefined>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceClearDontFragment: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceClearDontFragmentVariable: pulumi.Output<string | undefined>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    declare public readonly tunnelInterfaceColor: pulumi.Output<string | undefined>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceColorRestrict: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorRestrictVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceColorVariable: pulumi.Output<string | undefined>;
    /**
     * Allow Control Connection
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfaceControlConnections: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Encapsulation for TLOC
     */
    declare public readonly tunnelInterfaceEncapsulations: pulumi.Output<outputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupListVariable: pulumi.Output<string | undefined>;
    /**
     * Exclude the following controller groups defined in this list
     */
    declare public readonly tunnelInterfaceExcludeControllerGroupLists: pulumi.Output<number[] | undefined>;
    /**
     * Extend the TLOC to a remote node over GRE tunnel
     */
    declare public readonly tunnelInterfaceGreTunnelDestinationIp: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceGreTunnelDestinationIpVariable: pulumi.Output<string | undefined>;
    /**
     * List of groups
     */
    declare public readonly tunnelInterfaceGroups: pulumi.Output<number[] | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceGroupsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    declare public readonly tunnelInterfaceHelloInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    declare public readonly tunnelInterfaceHelloTolerance: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceHelloToleranceVariable: pulumi.Output<string | undefined>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLastResortCircuit: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLastResortCircuitVariable: pulumi.Output<string | undefined>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceLowBandwidthLink: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceLowBandwidthLinkVariable: pulumi.Output<string | undefined>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     */
    declare public readonly tunnelInterfaceMaxControlConnections: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceMaxControlConnectionsVariable: pulumi.Output<string | undefined>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceNatRefreshInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNatRefreshIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceNetworkBroadcast: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceNetworkBroadcastVariable: pulumi.Output<string | undefined>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    declare public readonly tunnelInterfacePortHop: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfacePortHopVariable: pulumi.Output<string | undefined>;
    /**
     * CTS SGT Propagation configuration
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfacePropagateSgt: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfacePropagateSgtVariable: pulumi.Output<string | undefined>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    declare public readonly tunnelInterfaceTunnelTcpMss: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceTunnelTcpMssVariable: pulumi.Output<string | undefined>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    declare public readonly tunnelInterfaceVbondAsStunServer: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVbondAsStunServerVariable: pulumi.Output<string | undefined>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreference: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelInterfaceVmanageConnectionPreferenceVariable: pulumi.Output<string | undefined>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    declare public readonly tunnelQosMode: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly tunnelQosModeVariable: pulumi.Output<string | undefined>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    declare public readonly udpTimeout: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly udpTimeoutVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a CiscoVpnInterfaceFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoVpnInterfaceFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoVpnInterfaceFeatureTemplateArgs | CiscoVpnInterfaceFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoVpnInterfaceFeatureTemplateState | undefined;
            resourceInputs["accessLists"] = state?.accessLists;
            resourceInputs["address"] = state?.address;
            resourceInputs["addressVariable"] = state?.addressVariable;
            resourceInputs["arpTimeout"] = state?.arpTimeout;
            resourceInputs["arpTimeoutVariable"] = state?.arpTimeoutVariable;
            resourceInputs["autoBandwidthDetect"] = state?.autoBandwidthDetect;
            resourceInputs["autoBandwidthDetectVariable"] = state?.autoBandwidthDetectVariable;
            resourceInputs["autonegotiate"] = state?.autonegotiate;
            resourceInputs["autonegotiateVariable"] = state?.autonegotiateVariable;
            resourceInputs["bandwidthDownstream"] = state?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = state?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = state?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = state?.bandwidthUpstreamVariable;
            resourceInputs["blockNonSourceIp"] = state?.blockNonSourceIp;
            resourceInputs["blockNonSourceIpVariable"] = state?.blockNonSourceIpVariable;
            resourceInputs["coreRegion"] = state?.coreRegion;
            resourceInputs["coreRegionVariable"] = state?.coreRegionVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["dhcp"] = state?.dhcp;
            resourceInputs["dhcpDistance"] = state?.dhcpDistance;
            resourceInputs["dhcpDistanceVariable"] = state?.dhcpDistanceVariable;
            resourceInputs["dhcpVariable"] = state?.dhcpVariable;
            resourceInputs["dhcpv6"] = state?.dhcpv6;
            resourceInputs["dhcpv6Variable"] = state?.dhcpv6Variable;
            resourceInputs["duplex"] = state?.duplex;
            resourceInputs["duplexVariable"] = state?.duplexVariable;
            resourceInputs["enableCoreRegion"] = state?.enableCoreRegion;
            resourceInputs["enableSgt"] = state?.enableSgt;
            resourceInputs["greTunnelSourceIp"] = state?.greTunnelSourceIp;
            resourceInputs["greTunnelSourceIpVariable"] = state?.greTunnelSourceIpVariable;
            resourceInputs["greTunnelXconnect"] = state?.greTunnelXconnect;
            resourceInputs["greTunnelXconnectVariable"] = state?.greTunnelXconnectVariable;
            resourceInputs["icmpRedirectDisable"] = state?.icmpRedirectDisable;
            resourceInputs["icmpRedirectDisableVariable"] = state?.icmpRedirectDisableVariable;
            resourceInputs["interfaceDescription"] = state?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = state?.interfaceDescriptionVariable;
            resourceInputs["interfaceMtu"] = state?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = state?.interfaceMtuVariable;
            resourceInputs["interfaceName"] = state?.interfaceName;
            resourceInputs["interfaceNameVariable"] = state?.interfaceNameVariable;
            resourceInputs["ipDirectedBroadcast"] = state?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = state?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = state?.ipMtu;
            resourceInputs["ipMtuVariable"] = state?.ipMtuVariable;
            resourceInputs["iperfServer"] = state?.iperfServer;
            resourceInputs["iperfServerVariable"] = state?.iperfServerVariable;
            resourceInputs["ipv4DhcpHelperVariable"] = state?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = state?.ipv4DhcpHelpers;
            resourceInputs["ipv4SecondaryAddresses"] = state?.ipv4SecondaryAddresses;
            resourceInputs["ipv4Vrrps"] = state?.ipv4Vrrps;
            resourceInputs["ipv6AccessLists"] = state?.ipv6AccessLists;
            resourceInputs["ipv6Address"] = state?.ipv6Address;
            resourceInputs["ipv6AddressVariable"] = state?.ipv6AddressVariable;
            resourceInputs["ipv6DhcpHelpers"] = state?.ipv6DhcpHelpers;
            resourceInputs["ipv6Nat"] = state?.ipv6Nat;
            resourceInputs["ipv6NatVariable"] = state?.ipv6NatVariable;
            resourceInputs["ipv6SecondaryAddresses"] = state?.ipv6SecondaryAddresses;
            resourceInputs["ipv6Vrrps"] = state?.ipv6Vrrps;
            resourceInputs["loadInterval"] = state?.loadInterval;
            resourceInputs["loadIntervalVariable"] = state?.loadIntervalVariable;
            resourceInputs["macAddress"] = state?.macAddress;
            resourceInputs["macAddressVariable"] = state?.macAddressVariable;
            resourceInputs["mediaType"] = state?.mediaType;
            resourceInputs["mediaTypeVariable"] = state?.mediaTypeVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["nat"] = state?.nat;
            resourceInputs["nat64Interface"] = state?.nat64Interface;
            resourceInputs["nat66Interface"] = state?.nat66Interface;
            resourceInputs["natInsideSourceLoopbackInterface"] = state?.natInsideSourceLoopbackInterface;
            resourceInputs["natInsideSourceLoopbackInterfaceVariable"] = state?.natInsideSourceLoopbackInterfaceVariable;
            resourceInputs["natOverload"] = state?.natOverload;
            resourceInputs["natOverloadVariable"] = state?.natOverloadVariable;
            resourceInputs["natPoolPrefixLength"] = state?.natPoolPrefixLength;
            resourceInputs["natPoolPrefixLengthVariable"] = state?.natPoolPrefixLengthVariable;
            resourceInputs["natPoolRangeEnd"] = state?.natPoolRangeEnd;
            resourceInputs["natPoolRangeEndVariable"] = state?.natPoolRangeEndVariable;
            resourceInputs["natPoolRangeStart"] = state?.natPoolRangeStart;
            resourceInputs["natPoolRangeStartVariable"] = state?.natPoolRangeStartVariable;
            resourceInputs["natType"] = state?.natType;
            resourceInputs["natTypeVariable"] = state?.natTypeVariable;
            resourceInputs["poe"] = state?.poe;
            resourceInputs["poeVariable"] = state?.poeVariable;
            resourceInputs["propagateSgt"] = state?.propagateSgt;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = state?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthDownstreamVariable"] = state?.qosAdaptiveBandwidthDownstreamVariable;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = state?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveBandwidthUpstreamVariable"] = state?.qosAdaptiveBandwidthUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = state?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = state?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = state?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = state?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = state?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = state?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = state?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = state?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = state?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = state?.qosAdaptivePeriodVariable;
            resourceInputs["qosMap"] = state?.qosMap;
            resourceInputs["qosMapVariable"] = state?.qosMapVariable;
            resourceInputs["qosMapVpn"] = state?.qosMapVpn;
            resourceInputs["qosMapVpnVariable"] = state?.qosMapVpnVariable;
            resourceInputs["rewriteRuleName"] = state?.rewriteRuleName;
            resourceInputs["rewriteRuleNameVariable"] = state?.rewriteRuleNameVariable;
            resourceInputs["secondaryRegion"] = state?.secondaryRegion;
            resourceInputs["secondaryRegionVariable"] = state?.secondaryRegionVariable;
            resourceInputs["sgtEnforcement"] = state?.sgtEnforcement;
            resourceInputs["sgtEnforcementSgt"] = state?.sgtEnforcementSgt;
            resourceInputs["sgtEnforcementSgtVariable"] = state?.sgtEnforcementSgtVariable;
            resourceInputs["shapingRate"] = state?.shapingRate;
            resourceInputs["shapingRateVariable"] = state?.shapingRateVariable;
            resourceInputs["shutdown"] = state?.shutdown;
            resourceInputs["shutdownVariable"] = state?.shutdownVariable;
            resourceInputs["speed"] = state?.speed;
            resourceInputs["speedVariable"] = state?.speedVariable;
            resourceInputs["staticArps"] = state?.staticArps;
            resourceInputs["staticNat66Entries"] = state?.staticNat66Entries;
            resourceInputs["staticNatEntries"] = state?.staticNatEntries;
            resourceInputs["staticPortForwardEntries"] = state?.staticPortForwardEntries;
            resourceInputs["staticSgt"] = state?.staticSgt;
            resourceInputs["staticSgtTrusted"] = state?.staticSgtTrusted;
            resourceInputs["staticSgtVariable"] = state?.staticSgtVariable;
            resourceInputs["tcpMssAdjust"] = state?.tcpMssAdjust;
            resourceInputs["tcpMssAdjustVariable"] = state?.tcpMssAdjustVariable;
            resourceInputs["tcpTimeout"] = state?.tcpTimeout;
            resourceInputs["tcpTimeoutVariable"] = state?.tcpTimeoutVariable;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["tlocExtension"] = state?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = state?.tlocExtensionVariable;
            resourceInputs["trackerVariable"] = state?.trackerVariable;
            resourceInputs["trackers"] = state?.trackers;
            resourceInputs["tunnelBandwidth"] = state?.tunnelBandwidth;
            resourceInputs["tunnelBandwidthVariable"] = state?.tunnelBandwidthVariable;
            resourceInputs["tunnelInterfaceAllowAll"] = state?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = state?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = state?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = state?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = state?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = state?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = state?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = state?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = state?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = state?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = state?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = state?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = state?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = state?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = state?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = state?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = state?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = state?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = state?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = state?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = state?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = state?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = state?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = state?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = state?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = state?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = state?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = state?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = state?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = state?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = state?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = state?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = state?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = state?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = state?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = state?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceControlConnections"] = state?.tunnelInterfaceControlConnections;
            resourceInputs["tunnelInterfaceControlConnectionsVariable"] = state?.tunnelInterfaceControlConnectionsVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = state?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = state?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = state?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIp"] = state?.tunnelInterfaceGreTunnelDestinationIp;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIpVariable"] = state?.tunnelInterfaceGreTunnelDestinationIpVariable;
            resourceInputs["tunnelInterfaceGroups"] = state?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = state?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = state?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = state?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = state?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = state?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = state?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = state?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = state?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = state?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = state?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = state?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = state?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = state?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = state?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = state?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = state?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = state?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfacePropagateSgt"] = state?.tunnelInterfacePropagateSgt;
            resourceInputs["tunnelInterfacePropagateSgtVariable"] = state?.tunnelInterfacePropagateSgtVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = state?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = state?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = state?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = state?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = state?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = state?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = state?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = state?.tunnelQosModeVariable;
            resourceInputs["udpTimeout"] = state?.udpTimeout;
            resourceInputs["udpTimeoutVariable"] = state?.udpTimeoutVariable;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CiscoVpnInterfaceFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["accessLists"] = args?.accessLists;
            resourceInputs["address"] = args?.address;
            resourceInputs["addressVariable"] = args?.addressVariable;
            resourceInputs["arpTimeout"] = args?.arpTimeout;
            resourceInputs["arpTimeoutVariable"] = args?.arpTimeoutVariable;
            resourceInputs["autoBandwidthDetect"] = args?.autoBandwidthDetect;
            resourceInputs["autoBandwidthDetectVariable"] = args?.autoBandwidthDetectVariable;
            resourceInputs["autonegotiate"] = args?.autonegotiate;
            resourceInputs["autonegotiateVariable"] = args?.autonegotiateVariable;
            resourceInputs["bandwidthDownstream"] = args?.bandwidthDownstream;
            resourceInputs["bandwidthDownstreamVariable"] = args?.bandwidthDownstreamVariable;
            resourceInputs["bandwidthUpstream"] = args?.bandwidthUpstream;
            resourceInputs["bandwidthUpstreamVariable"] = args?.bandwidthUpstreamVariable;
            resourceInputs["blockNonSourceIp"] = args?.blockNonSourceIp;
            resourceInputs["blockNonSourceIpVariable"] = args?.blockNonSourceIpVariable;
            resourceInputs["coreRegion"] = args?.coreRegion;
            resourceInputs["coreRegionVariable"] = args?.coreRegionVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["dhcp"] = args?.dhcp;
            resourceInputs["dhcpDistance"] = args?.dhcpDistance;
            resourceInputs["dhcpDistanceVariable"] = args?.dhcpDistanceVariable;
            resourceInputs["dhcpVariable"] = args?.dhcpVariable;
            resourceInputs["dhcpv6"] = args?.dhcpv6;
            resourceInputs["dhcpv6Variable"] = args?.dhcpv6Variable;
            resourceInputs["duplex"] = args?.duplex;
            resourceInputs["duplexVariable"] = args?.duplexVariable;
            resourceInputs["enableCoreRegion"] = args?.enableCoreRegion;
            resourceInputs["enableSgt"] = args?.enableSgt;
            resourceInputs["greTunnelSourceIp"] = args?.greTunnelSourceIp;
            resourceInputs["greTunnelSourceIpVariable"] = args?.greTunnelSourceIpVariable;
            resourceInputs["greTunnelXconnect"] = args?.greTunnelXconnect;
            resourceInputs["greTunnelXconnectVariable"] = args?.greTunnelXconnectVariable;
            resourceInputs["icmpRedirectDisable"] = args?.icmpRedirectDisable;
            resourceInputs["icmpRedirectDisableVariable"] = args?.icmpRedirectDisableVariable;
            resourceInputs["interfaceDescription"] = args?.interfaceDescription;
            resourceInputs["interfaceDescriptionVariable"] = args?.interfaceDescriptionVariable;
            resourceInputs["interfaceMtu"] = args?.interfaceMtu;
            resourceInputs["interfaceMtuVariable"] = args?.interfaceMtuVariable;
            resourceInputs["interfaceName"] = args?.interfaceName;
            resourceInputs["interfaceNameVariable"] = args?.interfaceNameVariable;
            resourceInputs["ipDirectedBroadcast"] = args?.ipDirectedBroadcast;
            resourceInputs["ipDirectedBroadcastVariable"] = args?.ipDirectedBroadcastVariable;
            resourceInputs["ipMtu"] = args?.ipMtu;
            resourceInputs["ipMtuVariable"] = args?.ipMtuVariable;
            resourceInputs["iperfServer"] = args?.iperfServer;
            resourceInputs["iperfServerVariable"] = args?.iperfServerVariable;
            resourceInputs["ipv4DhcpHelperVariable"] = args?.ipv4DhcpHelperVariable;
            resourceInputs["ipv4DhcpHelpers"] = args?.ipv4DhcpHelpers;
            resourceInputs["ipv4SecondaryAddresses"] = args?.ipv4SecondaryAddresses;
            resourceInputs["ipv4Vrrps"] = args?.ipv4Vrrps;
            resourceInputs["ipv6AccessLists"] = args?.ipv6AccessLists;
            resourceInputs["ipv6Address"] = args?.ipv6Address;
            resourceInputs["ipv6AddressVariable"] = args?.ipv6AddressVariable;
            resourceInputs["ipv6DhcpHelpers"] = args?.ipv6DhcpHelpers;
            resourceInputs["ipv6Nat"] = args?.ipv6Nat;
            resourceInputs["ipv6NatVariable"] = args?.ipv6NatVariable;
            resourceInputs["ipv6SecondaryAddresses"] = args?.ipv6SecondaryAddresses;
            resourceInputs["ipv6Vrrps"] = args?.ipv6Vrrps;
            resourceInputs["loadInterval"] = args?.loadInterval;
            resourceInputs["loadIntervalVariable"] = args?.loadIntervalVariable;
            resourceInputs["macAddress"] = args?.macAddress;
            resourceInputs["macAddressVariable"] = args?.macAddressVariable;
            resourceInputs["mediaType"] = args?.mediaType;
            resourceInputs["mediaTypeVariable"] = args?.mediaTypeVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["nat"] = args?.nat;
            resourceInputs["nat64Interface"] = args?.nat64Interface;
            resourceInputs["nat66Interface"] = args?.nat66Interface;
            resourceInputs["natInsideSourceLoopbackInterface"] = args?.natInsideSourceLoopbackInterface;
            resourceInputs["natInsideSourceLoopbackInterfaceVariable"] = args?.natInsideSourceLoopbackInterfaceVariable;
            resourceInputs["natOverload"] = args?.natOverload;
            resourceInputs["natOverloadVariable"] = args?.natOverloadVariable;
            resourceInputs["natPoolPrefixLength"] = args?.natPoolPrefixLength;
            resourceInputs["natPoolPrefixLengthVariable"] = args?.natPoolPrefixLengthVariable;
            resourceInputs["natPoolRangeEnd"] = args?.natPoolRangeEnd;
            resourceInputs["natPoolRangeEndVariable"] = args?.natPoolRangeEndVariable;
            resourceInputs["natPoolRangeStart"] = args?.natPoolRangeStart;
            resourceInputs["natPoolRangeStartVariable"] = args?.natPoolRangeStartVariable;
            resourceInputs["natType"] = args?.natType;
            resourceInputs["natTypeVariable"] = args?.natTypeVariable;
            resourceInputs["poe"] = args?.poe;
            resourceInputs["poeVariable"] = args?.poeVariable;
            resourceInputs["propagateSgt"] = args?.propagateSgt;
            resourceInputs["qosAdaptiveBandwidthDownstream"] = args?.qosAdaptiveBandwidthDownstream;
            resourceInputs["qosAdaptiveBandwidthDownstreamVariable"] = args?.qosAdaptiveBandwidthDownstreamVariable;
            resourceInputs["qosAdaptiveBandwidthUpstream"] = args?.qosAdaptiveBandwidthUpstream;
            resourceInputs["qosAdaptiveBandwidthUpstreamVariable"] = args?.qosAdaptiveBandwidthUpstreamVariable;
            resourceInputs["qosAdaptiveMaxDownstream"] = args?.qosAdaptiveMaxDownstream;
            resourceInputs["qosAdaptiveMaxDownstreamVariable"] = args?.qosAdaptiveMaxDownstreamVariable;
            resourceInputs["qosAdaptiveMaxUpstream"] = args?.qosAdaptiveMaxUpstream;
            resourceInputs["qosAdaptiveMaxUpstreamVariable"] = args?.qosAdaptiveMaxUpstreamVariable;
            resourceInputs["qosAdaptiveMinDownstream"] = args?.qosAdaptiveMinDownstream;
            resourceInputs["qosAdaptiveMinDownstreamVariable"] = args?.qosAdaptiveMinDownstreamVariable;
            resourceInputs["qosAdaptiveMinUpstream"] = args?.qosAdaptiveMinUpstream;
            resourceInputs["qosAdaptiveMinUpstreamVariable"] = args?.qosAdaptiveMinUpstreamVariable;
            resourceInputs["qosAdaptivePeriod"] = args?.qosAdaptivePeriod;
            resourceInputs["qosAdaptivePeriodVariable"] = args?.qosAdaptivePeriodVariable;
            resourceInputs["qosMap"] = args?.qosMap;
            resourceInputs["qosMapVariable"] = args?.qosMapVariable;
            resourceInputs["qosMapVpn"] = args?.qosMapVpn;
            resourceInputs["qosMapVpnVariable"] = args?.qosMapVpnVariable;
            resourceInputs["rewriteRuleName"] = args?.rewriteRuleName;
            resourceInputs["rewriteRuleNameVariable"] = args?.rewriteRuleNameVariable;
            resourceInputs["secondaryRegion"] = args?.secondaryRegion;
            resourceInputs["secondaryRegionVariable"] = args?.secondaryRegionVariable;
            resourceInputs["sgtEnforcement"] = args?.sgtEnforcement;
            resourceInputs["sgtEnforcementSgt"] = args?.sgtEnforcementSgt;
            resourceInputs["sgtEnforcementSgtVariable"] = args?.sgtEnforcementSgtVariable;
            resourceInputs["shapingRate"] = args?.shapingRate;
            resourceInputs["shapingRateVariable"] = args?.shapingRateVariable;
            resourceInputs["shutdown"] = args?.shutdown;
            resourceInputs["shutdownVariable"] = args?.shutdownVariable;
            resourceInputs["speed"] = args?.speed;
            resourceInputs["speedVariable"] = args?.speedVariable;
            resourceInputs["staticArps"] = args?.staticArps;
            resourceInputs["staticNat66Entries"] = args?.staticNat66Entries;
            resourceInputs["staticNatEntries"] = args?.staticNatEntries;
            resourceInputs["staticPortForwardEntries"] = args?.staticPortForwardEntries;
            resourceInputs["staticSgt"] = args?.staticSgt;
            resourceInputs["staticSgtTrusted"] = args?.staticSgtTrusted;
            resourceInputs["staticSgtVariable"] = args?.staticSgtVariable;
            resourceInputs["tcpMssAdjust"] = args?.tcpMssAdjust;
            resourceInputs["tcpMssAdjustVariable"] = args?.tcpMssAdjustVariable;
            resourceInputs["tcpTimeout"] = args?.tcpTimeout;
            resourceInputs["tcpTimeoutVariable"] = args?.tcpTimeoutVariable;
            resourceInputs["tlocExtension"] = args?.tlocExtension;
            resourceInputs["tlocExtensionVariable"] = args?.tlocExtensionVariable;
            resourceInputs["trackerVariable"] = args?.trackerVariable;
            resourceInputs["trackers"] = args?.trackers;
            resourceInputs["tunnelBandwidth"] = args?.tunnelBandwidth;
            resourceInputs["tunnelBandwidthVariable"] = args?.tunnelBandwidthVariable;
            resourceInputs["tunnelInterfaceAllowAll"] = args?.tunnelInterfaceAllowAll;
            resourceInputs["tunnelInterfaceAllowAllVariable"] = args?.tunnelInterfaceAllowAllVariable;
            resourceInputs["tunnelInterfaceAllowBgp"] = args?.tunnelInterfaceAllowBgp;
            resourceInputs["tunnelInterfaceAllowBgpVariable"] = args?.tunnelInterfaceAllowBgpVariable;
            resourceInputs["tunnelInterfaceAllowDhcp"] = args?.tunnelInterfaceAllowDhcp;
            resourceInputs["tunnelInterfaceAllowDhcpVariable"] = args?.tunnelInterfaceAllowDhcpVariable;
            resourceInputs["tunnelInterfaceAllowDns"] = args?.tunnelInterfaceAllowDns;
            resourceInputs["tunnelInterfaceAllowDnsVariable"] = args?.tunnelInterfaceAllowDnsVariable;
            resourceInputs["tunnelInterfaceAllowHttps"] = args?.tunnelInterfaceAllowHttps;
            resourceInputs["tunnelInterfaceAllowHttpsVariable"] = args?.tunnelInterfaceAllowHttpsVariable;
            resourceInputs["tunnelInterfaceAllowIcmp"] = args?.tunnelInterfaceAllowIcmp;
            resourceInputs["tunnelInterfaceAllowIcmpVariable"] = args?.tunnelInterfaceAllowIcmpVariable;
            resourceInputs["tunnelInterfaceAllowNetconf"] = args?.tunnelInterfaceAllowNetconf;
            resourceInputs["tunnelInterfaceAllowNetconfVariable"] = args?.tunnelInterfaceAllowNetconfVariable;
            resourceInputs["tunnelInterfaceAllowNtp"] = args?.tunnelInterfaceAllowNtp;
            resourceInputs["tunnelInterfaceAllowNtpVariable"] = args?.tunnelInterfaceAllowNtpVariable;
            resourceInputs["tunnelInterfaceAllowOspf"] = args?.tunnelInterfaceAllowOspf;
            resourceInputs["tunnelInterfaceAllowOspfVariable"] = args?.tunnelInterfaceAllowOspfVariable;
            resourceInputs["tunnelInterfaceAllowSnmp"] = args?.tunnelInterfaceAllowSnmp;
            resourceInputs["tunnelInterfaceAllowSnmpVariable"] = args?.tunnelInterfaceAllowSnmpVariable;
            resourceInputs["tunnelInterfaceAllowSsh"] = args?.tunnelInterfaceAllowSsh;
            resourceInputs["tunnelInterfaceAllowSshVariable"] = args?.tunnelInterfaceAllowSshVariable;
            resourceInputs["tunnelInterfaceAllowStun"] = args?.tunnelInterfaceAllowStun;
            resourceInputs["tunnelInterfaceAllowStunVariable"] = args?.tunnelInterfaceAllowStunVariable;
            resourceInputs["tunnelInterfaceBindLoopbackTunnel"] = args?.tunnelInterfaceBindLoopbackTunnel;
            resourceInputs["tunnelInterfaceBindLoopbackTunnelVariable"] = args?.tunnelInterfaceBindLoopbackTunnelVariable;
            resourceInputs["tunnelInterfaceBorder"] = args?.tunnelInterfaceBorder;
            resourceInputs["tunnelInterfaceBorderVariable"] = args?.tunnelInterfaceBorderVariable;
            resourceInputs["tunnelInterfaceCarrier"] = args?.tunnelInterfaceCarrier;
            resourceInputs["tunnelInterfaceCarrierVariable"] = args?.tunnelInterfaceCarrierVariable;
            resourceInputs["tunnelInterfaceClearDontFragment"] = args?.tunnelInterfaceClearDontFragment;
            resourceInputs["tunnelInterfaceClearDontFragmentVariable"] = args?.tunnelInterfaceClearDontFragmentVariable;
            resourceInputs["tunnelInterfaceColor"] = args?.tunnelInterfaceColor;
            resourceInputs["tunnelInterfaceColorRestrict"] = args?.tunnelInterfaceColorRestrict;
            resourceInputs["tunnelInterfaceColorRestrictVariable"] = args?.tunnelInterfaceColorRestrictVariable;
            resourceInputs["tunnelInterfaceColorVariable"] = args?.tunnelInterfaceColorVariable;
            resourceInputs["tunnelInterfaceControlConnections"] = args?.tunnelInterfaceControlConnections;
            resourceInputs["tunnelInterfaceControlConnectionsVariable"] = args?.tunnelInterfaceControlConnectionsVariable;
            resourceInputs["tunnelInterfaceEncapsulations"] = args?.tunnelInterfaceEncapsulations;
            resourceInputs["tunnelInterfaceExcludeControllerGroupListVariable"] = args?.tunnelInterfaceExcludeControllerGroupListVariable;
            resourceInputs["tunnelInterfaceExcludeControllerGroupLists"] = args?.tunnelInterfaceExcludeControllerGroupLists;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIp"] = args?.tunnelInterfaceGreTunnelDestinationIp;
            resourceInputs["tunnelInterfaceGreTunnelDestinationIpVariable"] = args?.tunnelInterfaceGreTunnelDestinationIpVariable;
            resourceInputs["tunnelInterfaceGroups"] = args?.tunnelInterfaceGroups;
            resourceInputs["tunnelInterfaceGroupsVariable"] = args?.tunnelInterfaceGroupsVariable;
            resourceInputs["tunnelInterfaceHelloInterval"] = args?.tunnelInterfaceHelloInterval;
            resourceInputs["tunnelInterfaceHelloIntervalVariable"] = args?.tunnelInterfaceHelloIntervalVariable;
            resourceInputs["tunnelInterfaceHelloTolerance"] = args?.tunnelInterfaceHelloTolerance;
            resourceInputs["tunnelInterfaceHelloToleranceVariable"] = args?.tunnelInterfaceHelloToleranceVariable;
            resourceInputs["tunnelInterfaceLastResortCircuit"] = args?.tunnelInterfaceLastResortCircuit;
            resourceInputs["tunnelInterfaceLastResortCircuitVariable"] = args?.tunnelInterfaceLastResortCircuitVariable;
            resourceInputs["tunnelInterfaceLowBandwidthLink"] = args?.tunnelInterfaceLowBandwidthLink;
            resourceInputs["tunnelInterfaceLowBandwidthLinkVariable"] = args?.tunnelInterfaceLowBandwidthLinkVariable;
            resourceInputs["tunnelInterfaceMaxControlConnections"] = args?.tunnelInterfaceMaxControlConnections;
            resourceInputs["tunnelInterfaceMaxControlConnectionsVariable"] = args?.tunnelInterfaceMaxControlConnectionsVariable;
            resourceInputs["tunnelInterfaceNatRefreshInterval"] = args?.tunnelInterfaceNatRefreshInterval;
            resourceInputs["tunnelInterfaceNatRefreshIntervalVariable"] = args?.tunnelInterfaceNatRefreshIntervalVariable;
            resourceInputs["tunnelInterfaceNetworkBroadcast"] = args?.tunnelInterfaceNetworkBroadcast;
            resourceInputs["tunnelInterfaceNetworkBroadcastVariable"] = args?.tunnelInterfaceNetworkBroadcastVariable;
            resourceInputs["tunnelInterfacePortHop"] = args?.tunnelInterfacePortHop;
            resourceInputs["tunnelInterfacePortHopVariable"] = args?.tunnelInterfacePortHopVariable;
            resourceInputs["tunnelInterfacePropagateSgt"] = args?.tunnelInterfacePropagateSgt;
            resourceInputs["tunnelInterfacePropagateSgtVariable"] = args?.tunnelInterfacePropagateSgtVariable;
            resourceInputs["tunnelInterfaceTunnelTcpMss"] = args?.tunnelInterfaceTunnelTcpMss;
            resourceInputs["tunnelInterfaceTunnelTcpMssVariable"] = args?.tunnelInterfaceTunnelTcpMssVariable;
            resourceInputs["tunnelInterfaceVbondAsStunServer"] = args?.tunnelInterfaceVbondAsStunServer;
            resourceInputs["tunnelInterfaceVbondAsStunServerVariable"] = args?.tunnelInterfaceVbondAsStunServerVariable;
            resourceInputs["tunnelInterfaceVmanageConnectionPreference"] = args?.tunnelInterfaceVmanageConnectionPreference;
            resourceInputs["tunnelInterfaceVmanageConnectionPreferenceVariable"] = args?.tunnelInterfaceVmanageConnectionPreferenceVariable;
            resourceInputs["tunnelQosMode"] = args?.tunnelQosMode;
            resourceInputs["tunnelQosModeVariable"] = args?.tunnelQosModeVariable;
            resourceInputs["udpTimeout"] = args?.udpTimeout;
            resourceInputs["udpTimeoutVariable"] = args?.udpTimeoutVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoVpnInterfaceFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoVpnInterfaceFeatureTemplate resources.
 */
export interface CiscoVpnInterfaceFeatureTemplateState {
    /**
     * Apply ACL
     */
    accessLists?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateAccessList>[]>;
    /**
     * Assign IPv4 address
     */
    address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    addressVariable?: pulumi.Input<string>;
    /**
     * Timeout value for dynamically learned ARP entries, <0..2678400> seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     */
    arpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    arpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     */
    autoBandwidthDetect?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autoBandwidthDetectVariable?: pulumi.Input<string>;
    /**
     * Link autonegotiation
     */
    autonegotiate?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autonegotiateVariable?: pulumi.Input<string>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     */
    blockNonSourceIp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    blockNonSourceIpVariable?: pulumi.Input<string>;
    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     */
    coreRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    coreRegionVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable DHCP
     *   - Default value: `false`
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * Set administrative distance for DHCP default route
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     */
    dhcpDistance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    dhcpDistanceVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    dhcpVariable?: pulumi.Input<string>;
    /**
     * Enable DHCPv6
     *   - Default value: `false`
     */
    dhcpv6?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    dhcpv6Variable?: pulumi.Input<string>;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     */
    duplex?: pulumi.Input<string>;
    /**
     * Variable name
     */
    duplexVariable?: pulumi.Input<string>;
    /**
     * Enable core region
     *   - Default value: `false`
     */
    enableCoreRegion?: pulumi.Input<boolean>;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     */
    enableSgt?: pulumi.Input<boolean>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    greTunnelSourceIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    greTunnelSourceIpVariable?: pulumi.Input<string>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    greTunnelXconnect?: pulumi.Input<string>;
    /**
     * Variable name
     */
    greTunnelXconnectVariable?: pulumi.Input<string>;
    /**
     * Set this option to disable the icmp/icmpv6 redirect packets
     *   - Default value: `true`
     */
    icmpRedirectDisable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    icmpRedirectDisableVariable?: pulumi.Input<string>;
    /**
     * Interface description
     */
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    /**
     * Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Iperf server for auto bandwidth detect
     */
    iperfServer?: pulumi.Input<string>;
    /**
     * Variable name
     */
    iperfServerVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP IPv4 helper addresses
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Assign secondary IP addresses
     */
    ipv4SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress>[]>;
    /**
     * Enable VRRP
     */
    ipv4Vrrps?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv4Vrrp>[]>;
    /**
     * Apply IPv6 access list
     */
    ipv6AccessLists?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessList>[]>;
    /**
     * Assign IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * DHCPv6 Helper
     */
    ipv6DhcpHelpers?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper>[]>;
    /**
     * NAT64 on this interface
     *   - Default value: `false`
     */
    ipv6Nat?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipv6NatVariable?: pulumi.Input<string>;
    /**
     * Assign secondary IPv6 addresses
     */
    ipv6SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress>[]>;
    /**
     * Enable VRRP
     */
    ipv6Vrrps?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6Vrrp>[]>;
    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    loadIntervalVariable?: pulumi.Input<string>;
    /**
     * Set MAC-layer address
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    macAddressVariable?: pulumi.Input<string>;
    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     */
    mediaType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    mediaTypeVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    nat?: pulumi.Input<boolean>;
    /**
     * NAT64 on this interface
     *   - Default value: `false`
     */
    nat64Interface?: pulumi.Input<boolean>;
    /**
     * NAT66 on this interface
     *   - Default value: `false`
     */
    nat66Interface?: pulumi.Input<boolean>;
    /**
     * Configure NAT Inside Loopback Interface
     */
    natInsideSourceLoopbackInterface?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natInsideSourceLoopbackInterfaceVariable?: pulumi.Input<string>;
    /**
     * Enable port translation(PAT)
     *   - Default value: `true`
     */
    natOverload?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natOverloadVariable?: pulumi.Input<string>;
    /**
     * Ending IP address of NAT Pool Prefix Length
     */
    natPoolPrefixLength?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natPoolPrefixLengthVariable?: pulumi.Input<string>;
    /**
     * Ending IP address of NAT pool range
     */
    natPoolRangeEnd?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natPoolRangeEndVariable?: pulumi.Input<string>;
    /**
     * Starting IP address of NAT pool range
     */
    natPoolRangeStart?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natPoolRangeStartVariable?: pulumi.Input<string>;
    /**
     * NAT type
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     */
    natType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natTypeVariable?: pulumi.Input<string>;
    /**
     * Configure interface as Power-over-Ethernet source
     *   - Default value: `false`
     */
    poe?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    poeVariable?: pulumi.Input<string>;
    /**
     * Enable/Disable CTS SGT propagation on an interface.
     *   - Default value: `true`
     */
    propagateSgt?: pulumi.Input<boolean>;
    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Name of QoS map
     */
    qosMap?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVariable?: pulumi.Input<string>;
    /**
     * Name of VPN QoS map
     */
    qosMapVpn?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVpnVariable?: pulumi.Input<string>;
    /**
     * Name of rewrite rule
     */
    rewriteRuleName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    rewriteRuleNameVariable?: pulumi.Input<string>;
    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     */
    secondaryRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryRegionVariable?: pulumi.Input<string>;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     */
    sgtEnforcement?: pulumi.Input<boolean>;
    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     */
    sgtEnforcementSgt?: pulumi.Input<number>;
    /**
     * Variable name
     */
    sgtEnforcementSgtVariable?: pulumi.Input<string>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    shapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    shapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    speed?: pulumi.Input<string>;
    /**
     * Variable name
     */
    speedVariable?: pulumi.Input<string>;
    /**
     * Configure static ARP entries
     */
    staticArps?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticArp>[]>;
    /**
     * static NAT
     */
    staticNat66Entries?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66Entry>[]>;
    /**
     * Configure static NAT entries
     */
    staticNatEntries?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntry>[]>;
    /**
     * Configure Port Forward entries
     */
    staticPortForwardEntries?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry>[]>;
    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     */
    staticSgt?: pulumi.Input<number>;
    /**
     * Indicates that the interface is trustworthy for CTS.
     *   - Default value: `false`
     */
    staticSgtTrusted?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    staticSgtVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMssAdjust?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssAdjustVariable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    tcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    trackers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`99`
     *   - Default value: `50`
     */
    tunnelBandwidth?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelBandwidthVariable?: pulumi.Input<string>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Allow Control Connection
     *   - Default value: `true`
     */
    tunnelInterfaceControlConnections?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Extend the TLOC to a remote node over GRE tunnel
     */
    tunnelInterfaceGreTunnelDestinationIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceGreTunnelDestinationIpVariable?: pulumi.Input<string>;
    /**
     * List of groups
     */
    tunnelInterfaceGroups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * CTS SGT Propagation configuration
     *   - Default value: `false`
     */
    tunnelInterfacePropagateSgt?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePropagateSgtVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    udpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    udpTimeoutVariable?: pulumi.Input<string>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CiscoVpnInterfaceFeatureTemplate resource.
 */
export interface CiscoVpnInterfaceFeatureTemplateArgs {
    /**
     * Apply ACL
     */
    accessLists?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateAccessList>[]>;
    /**
     * Assign IPv4 address
     */
    address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    addressVariable?: pulumi.Input<string>;
    /**
     * Timeout value for dynamically learned ARP entries, <0..2678400> seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     */
    arpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    arpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     */
    autoBandwidthDetect?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autoBandwidthDetectVariable?: pulumi.Input<string>;
    /**
     * Link autonegotiation
     */
    autonegotiate?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    autonegotiateVariable?: pulumi.Input<string>;
    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     */
    bandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    bandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     */
    blockNonSourceIp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    blockNonSourceIpVariable?: pulumi.Input<string>;
    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     */
    coreRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    coreRegionVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Enable DHCP
     *   - Default value: `false`
     */
    dhcp?: pulumi.Input<boolean>;
    /**
     * Set administrative distance for DHCP default route
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     */
    dhcpDistance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    dhcpDistanceVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    dhcpVariable?: pulumi.Input<string>;
    /**
     * Enable DHCPv6
     *   - Default value: `false`
     */
    dhcpv6?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    dhcpv6Variable?: pulumi.Input<string>;
    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     */
    duplex?: pulumi.Input<string>;
    /**
     * Variable name
     */
    duplexVariable?: pulumi.Input<string>;
    /**
     * Enable core region
     *   - Default value: `false`
     */
    enableCoreRegion?: pulumi.Input<boolean>;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     */
    enableSgt?: pulumi.Input<boolean>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    greTunnelSourceIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    greTunnelSourceIpVariable?: pulumi.Input<string>;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    greTunnelXconnect?: pulumi.Input<string>;
    /**
     * Variable name
     */
    greTunnelXconnectVariable?: pulumi.Input<string>;
    /**
     * Set this option to disable the icmp/icmpv6 redirect packets
     *   - Default value: `true`
     */
    icmpRedirectDisable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    icmpRedirectDisableVariable?: pulumi.Input<string>;
    /**
     * Interface description
     */
    interfaceDescription?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceDescriptionVariable?: pulumi.Input<string>;
    /**
     * Interface MTU GigabitEthernet0 <1500..1518>, Other GigabitEthernet <1500..9216> in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     */
    interfaceMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    interfaceMtuVariable?: pulumi.Input<string>;
    /**
     * Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when present
     */
    interfaceName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    interfaceNameVariable?: pulumi.Input<string>;
    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     */
    ipDirectedBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipDirectedBroadcastVariable?: pulumi.Input<string>;
    /**
     * IP MTU for GigabitEthernet main <576..Interface MTU>, GigabitEthernet subinterface <576..9216>, Other Interfaces <576..2000> in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     */
    ipMtu?: pulumi.Input<number>;
    /**
     * Variable name
     */
    ipMtuVariable?: pulumi.Input<string>;
    /**
     * Iperf server for auto bandwidth detect
     */
    iperfServer?: pulumi.Input<string>;
    /**
     * Variable name
     */
    iperfServerVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv4DhcpHelperVariable?: pulumi.Input<string>;
    /**
     * List of DHCP IPv4 helper addresses
     */
    ipv4DhcpHelpers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Assign secondary IP addresses
     */
    ipv4SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress>[]>;
    /**
     * Enable VRRP
     */
    ipv4Vrrps?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv4Vrrp>[]>;
    /**
     * Apply IPv6 access list
     */
    ipv6AccessLists?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessList>[]>;
    /**
     * Assign IPv6 address
     */
    ipv6Address?: pulumi.Input<string>;
    /**
     * Variable name
     */
    ipv6AddressVariable?: pulumi.Input<string>;
    /**
     * DHCPv6 Helper
     */
    ipv6DhcpHelpers?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper>[]>;
    /**
     * NAT64 on this interface
     *   - Default value: `false`
     */
    ipv6Nat?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    ipv6NatVariable?: pulumi.Input<string>;
    /**
     * Assign secondary IPv6 addresses
     */
    ipv6SecondaryAddresses?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress>[]>;
    /**
     * Enable VRRP
     */
    ipv6Vrrps?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateIpv6Vrrp>[]>;
    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     */
    loadInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    loadIntervalVariable?: pulumi.Input<string>;
    /**
     * Set MAC-layer address
     */
    macAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    macAddressVariable?: pulumi.Input<string>;
    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     */
    mediaType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    mediaTypeVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     */
    nat?: pulumi.Input<boolean>;
    /**
     * NAT64 on this interface
     *   - Default value: `false`
     */
    nat64Interface?: pulumi.Input<boolean>;
    /**
     * NAT66 on this interface
     *   - Default value: `false`
     */
    nat66Interface?: pulumi.Input<boolean>;
    /**
     * Configure NAT Inside Loopback Interface
     */
    natInsideSourceLoopbackInterface?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natInsideSourceLoopbackInterfaceVariable?: pulumi.Input<string>;
    /**
     * Enable port translation(PAT)
     *   - Default value: `true`
     */
    natOverload?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    natOverloadVariable?: pulumi.Input<string>;
    /**
     * Ending IP address of NAT Pool Prefix Length
     */
    natPoolPrefixLength?: pulumi.Input<number>;
    /**
     * Variable name
     */
    natPoolPrefixLengthVariable?: pulumi.Input<string>;
    /**
     * Ending IP address of NAT pool range
     */
    natPoolRangeEnd?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natPoolRangeEndVariable?: pulumi.Input<string>;
    /**
     * Starting IP address of NAT pool range
     */
    natPoolRangeStart?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natPoolRangeStartVariable?: pulumi.Input<string>;
    /**
     * NAT type
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     */
    natType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    natTypeVariable?: pulumi.Input<string>;
    /**
     * Configure interface as Power-over-Ethernet source
     *   - Default value: `false`
     */
    poe?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    poeVariable?: pulumi.Input<string>;
    /**
     * Enable/Disable CTS SGT propagation on an interface.
     *   - Default value: `true`
     */
    propagateSgt?: pulumi.Input<boolean>;
    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthDownstreamVariable?: pulumi.Input<string>;
    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveBandwidthUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveBandwidthUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMaxUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMaxUpstreamVariable?: pulumi.Input<string>;
    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinDownstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinDownstreamVariable?: pulumi.Input<string>;
    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     */
    qosAdaptiveMinUpstream?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptiveMinUpstreamVariable?: pulumi.Input<string>;
    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     */
    qosAdaptivePeriod?: pulumi.Input<number>;
    /**
     * Variable name
     */
    qosAdaptivePeriodVariable?: pulumi.Input<string>;
    /**
     * Name of QoS map
     */
    qosMap?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVariable?: pulumi.Input<string>;
    /**
     * Name of VPN QoS map
     */
    qosMapVpn?: pulumi.Input<string>;
    /**
     * Variable name
     */
    qosMapVpnVariable?: pulumi.Input<string>;
    /**
     * Name of rewrite rule
     */
    rewriteRuleName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    rewriteRuleNameVariable?: pulumi.Input<string>;
    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     */
    secondaryRegion?: pulumi.Input<string>;
    /**
     * Variable name
     */
    secondaryRegionVariable?: pulumi.Input<string>;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     */
    sgtEnforcement?: pulumi.Input<boolean>;
    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     */
    sgtEnforcementSgt?: pulumi.Input<number>;
    /**
     * Variable name
     */
    sgtEnforcementSgtVariable?: pulumi.Input<string>;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     */
    shapingRate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    shapingRateVariable?: pulumi.Input<string>;
    /**
     * Administrative state
     *   - Default value: `true`
     */
    shutdown?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    shutdownVariable?: pulumi.Input<string>;
    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     */
    speed?: pulumi.Input<string>;
    /**
     * Variable name
     */
    speedVariable?: pulumi.Input<string>;
    /**
     * Configure static ARP entries
     */
    staticArps?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticArp>[]>;
    /**
     * static NAT
     */
    staticNat66Entries?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66Entry>[]>;
    /**
     * Configure static NAT entries
     */
    staticNatEntries?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntry>[]>;
    /**
     * Configure Port Forward entries
     */
    staticPortForwardEntries?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry>[]>;
    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     */
    staticSgt?: pulumi.Input<number>;
    /**
     * Indicates that the interface is trustworthy for CTS.
     *   - Default value: `false`
     */
    staticSgtTrusted?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    staticSgtVariable?: pulumi.Input<string>;
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tcpMssAdjust?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpMssAdjustVariable?: pulumi.Input<string>;
    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     */
    tcpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tcpTimeoutVariable?: pulumi.Input<string>;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    tlocExtension?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tlocExtensionVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerVariable?: pulumi.Input<string>;
    /**
     * Enable tracker for this interface
     */
    trackers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`99`
     *   - Default value: `50`
     */
    tunnelBandwidth?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelBandwidthVariable?: pulumi.Input<string>;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     */
    tunnelInterfaceAllowAll?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowAllVariable?: pulumi.Input<string>;
    /**
     * Allow/deny BGP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowBgp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowBgpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDhcp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDhcpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     */
    tunnelInterfaceAllowDns?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowDnsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny Https
     *   - Default value: `true`
     */
    tunnelInterfaceAllowHttps?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowHttpsVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     */
    tunnelInterfaceAllowIcmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowIcmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNetconf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNetconfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowNtp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowNtpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     */
    tunnelInterfaceAllowOspf?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowOspfVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSnmp?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSnmpVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     */
    tunnelInterfaceAllowSsh?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowSshVariable?: pulumi.Input<string>;
    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     */
    tunnelInterfaceAllowStun?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceAllowStunVariable?: pulumi.Input<string>;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    tunnelInterfaceBindLoopbackTunnel?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceBindLoopbackTunnelVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     */
    tunnelInterfaceBorder?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceBorderVariable?: pulumi.Input<string>;
    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     */
    tunnelInterfaceCarrier?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceCarrierVariable?: pulumi.Input<string>;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     */
    tunnelInterfaceClearDontFragment?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceClearDontFragmentVariable?: pulumi.Input<string>;
    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     */
    tunnelInterfaceColor?: pulumi.Input<string>;
    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     */
    tunnelInterfaceColorRestrict?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceColorRestrictVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceColorVariable?: pulumi.Input<string>;
    /**
     * Allow Control Connection
     *   - Default value: `true`
     */
    tunnelInterfaceControlConnections?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Encapsulation for TLOC
     */
    tunnelInterfaceEncapsulations?: pulumi.Input<pulumi.Input<inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceExcludeControllerGroupListVariable?: pulumi.Input<string>;
    /**
     * Exclude the following controller groups defined in this list
     */
    tunnelInterfaceExcludeControllerGroupLists?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Extend the TLOC to a remote node over GRE tunnel
     */
    tunnelInterfaceGreTunnelDestinationIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelInterfaceGreTunnelDestinationIpVariable?: pulumi.Input<string>;
    /**
     * List of groups
     */
    tunnelInterfaceGroups?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Variable name
     */
    tunnelInterfaceGroupsVariable?: pulumi.Input<string>;
    /**
     * Set time period of control hello packets <100..600000> milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     */
    tunnelInterfaceHelloInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloIntervalVariable?: pulumi.Input<string>;
    /**
     * Set tolerance of control hello packets <12..6000> seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     */
    tunnelInterfaceHelloTolerance?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceHelloToleranceVariable?: pulumi.Input<string>;
    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     */
    tunnelInterfaceLastResortCircuit?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLastResortCircuitVariable?: pulumi.Input<string>;
    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     */
    tunnelInterfaceLowBandwidthLink?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceLowBandwidthLinkVariable?: pulumi.Input<string>;
    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     */
    tunnelInterfaceMaxControlConnections?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceMaxControlConnectionsVariable?: pulumi.Input<string>;
    /**
     * Set time period of nat refresh packets <1...60> seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     */
    tunnelInterfaceNatRefreshInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceNatRefreshIntervalVariable?: pulumi.Input<string>;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     */
    tunnelInterfaceNetworkBroadcast?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceNetworkBroadcastVariable?: pulumi.Input<string>;
    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     */
    tunnelInterfacePortHop?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePortHopVariable?: pulumi.Input<string>;
    /**
     * CTS SGT Propagation configuration
     *   - Default value: `false`
     */
    tunnelInterfacePropagateSgt?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfacePropagateSgtVariable?: pulumi.Input<string>;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     */
    tunnelInterfaceTunnelTcpMss?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceTunnelTcpMssVariable?: pulumi.Input<string>;
    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     */
    tunnelInterfaceVbondAsStunServer?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    tunnelInterfaceVbondAsStunServerVariable?: pulumi.Input<string>;
    /**
     * Set interface preference for control connection to vManage <0..8>
     *   - Range: `0`-`8`
     *   - Default value: `5`
     */
    tunnelInterfaceVmanageConnectionPreference?: pulumi.Input<number>;
    /**
     * Variable name
     */
    tunnelInterfaceVmanageConnectionPreferenceVariable?: pulumi.Input<string>;
    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     */
    tunnelQosMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    tunnelQosModeVariable?: pulumi.Input<string>;
    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     */
    udpTimeout?: pulumi.Input<number>;
    /**
     * Variable name
     */
    udpTimeoutVariable?: pulumi.Input<string>;
}
