// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco Security feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CiscoSecurityFeatureTemplate("example", {
 *     name: "Example",
 *     description: "My Example",
 *     deviceTypes: ["vedge-C8000V"],
 *     rekeyInterval: 86400,
 *     replayWindow: "64",
 *     extendedArWindow: 256,
 *     authenticationTypes: ["none"],
 *     integrityTypes: ["none"],
 *     pairwiseKeying: true,
 *     keychains: [{
 *         name: "CHAIN1",
 *         key_id: 1,
 *     }],
 *     keys: [{
 *         id: "1",
 *         chain_name: "CHAIN1",
 *         send_id: 0,
 *         receive_id: 0,
 *         crypto_algorithm: "hmac-sha-256",
 *         key_string: "abc123",
 *         send_lifetime_local: true,
 *         send_lifetime_start_time: "2022-12-31T23:59",
 *         send_lifetime_end_time_format: "infinite",
 *         send_lifetime_duration: 1000,
 *         send_lifetime_end_time: "2032-12-31T23:59",
 *         send_lifetime_infinite: true,
 *         accept_lifetime_local: true,
 *         accept_lifetime_start_time: "2022-12-31T23:59",
 *         accept_lifetime_end_time_format: "infinite",
 *         accept_lifetime_duration: 1000,
 *         accept_lifetime_end_time: "2032-12-31T23:59",
 *         accept_lifetime_infinite: true,
 *         include_tcp_options: false,
 *         accept_ao_mismatch: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoSecurityFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoSecurityFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoSecurityFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoSecurityFeatureTemplate {
        return new CiscoSecurityFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoSecurityFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoSecurityFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoSecurityFeatureTemplate.__pulumiType;
    }

    /**
     * Variable name
     */
    declare public readonly authenticationTypeVariable: pulumi.Output<string | undefined>;
    /**
     * Set the authentication type for DTLS connections
     */
    declare public readonly authenticationTypes: pulumi.Output<string[] | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Extended Anti-Replay Window
     *   - Range: `10`-`2048`
     *   - Default value: `256`
     */
    declare public readonly extendedArWindow: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly extendedArWindowVariable: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly integrityTypeVariable: pulumi.Output<string | undefined>;
    /**
     * Set the authentication type for DTLS connections
     */
    declare public readonly integrityTypes: pulumi.Output<string[] | undefined>;
    /**
     * Configure a Keychain
     */
    declare public readonly keychains: pulumi.Output<outputs.CiscoSecurityFeatureTemplateKeychain[] | undefined>;
    /**
     * Configure a Key
     */
    declare public readonly keys: pulumi.Output<outputs.CiscoSecurityFeatureTemplateKey[] | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Enable or disable IPsec pairwise-keying
     *   - Default value: `false`
     */
    declare public readonly pairwiseKeying: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly pairwiseKeyingVariable: pulumi.Output<string | undefined>;
    /**
     * Set how often to change the AES key for DTLS connections
     *   - Range: `10`-`1209600`
     *   - Default value: `86400`
     */
    declare public readonly rekeyInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly rekeyIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * Set the sliding replay window size
     *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
     *   - Default value: `512`
     */
    declare public readonly replayWindow: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly replayWindowVariable: pulumi.Output<string | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a CiscoSecurityFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoSecurityFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoSecurityFeatureTemplateArgs | CiscoSecurityFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoSecurityFeatureTemplateState | undefined;
            resourceInputs["authenticationTypeVariable"] = state?.authenticationTypeVariable;
            resourceInputs["authenticationTypes"] = state?.authenticationTypes;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["extendedArWindow"] = state?.extendedArWindow;
            resourceInputs["extendedArWindowVariable"] = state?.extendedArWindowVariable;
            resourceInputs["integrityTypeVariable"] = state?.integrityTypeVariable;
            resourceInputs["integrityTypes"] = state?.integrityTypes;
            resourceInputs["keychains"] = state?.keychains;
            resourceInputs["keys"] = state?.keys;
            resourceInputs["name"] = state?.name;
            resourceInputs["pairwiseKeying"] = state?.pairwiseKeying;
            resourceInputs["pairwiseKeyingVariable"] = state?.pairwiseKeyingVariable;
            resourceInputs["rekeyInterval"] = state?.rekeyInterval;
            resourceInputs["rekeyIntervalVariable"] = state?.rekeyIntervalVariable;
            resourceInputs["replayWindow"] = state?.replayWindow;
            resourceInputs["replayWindowVariable"] = state?.replayWindowVariable;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CiscoSecurityFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["authenticationTypeVariable"] = args?.authenticationTypeVariable;
            resourceInputs["authenticationTypes"] = args?.authenticationTypes;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["extendedArWindow"] = args?.extendedArWindow;
            resourceInputs["extendedArWindowVariable"] = args?.extendedArWindowVariable;
            resourceInputs["integrityTypeVariable"] = args?.integrityTypeVariable;
            resourceInputs["integrityTypes"] = args?.integrityTypes;
            resourceInputs["keychains"] = args?.keychains;
            resourceInputs["keys"] = args?.keys;
            resourceInputs["name"] = args?.name;
            resourceInputs["pairwiseKeying"] = args?.pairwiseKeying;
            resourceInputs["pairwiseKeyingVariable"] = args?.pairwiseKeyingVariable;
            resourceInputs["rekeyInterval"] = args?.rekeyInterval;
            resourceInputs["rekeyIntervalVariable"] = args?.rekeyIntervalVariable;
            resourceInputs["replayWindow"] = args?.replayWindow;
            resourceInputs["replayWindowVariable"] = args?.replayWindowVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoSecurityFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoSecurityFeatureTemplate resources.
 */
export interface CiscoSecurityFeatureTemplateState {
    /**
     * Variable name
     */
    authenticationTypeVariable?: pulumi.Input<string>;
    /**
     * Set the authentication type for DTLS connections
     */
    authenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Extended Anti-Replay Window
     *   - Range: `10`-`2048`
     *   - Default value: `256`
     */
    extendedArWindow?: pulumi.Input<number>;
    /**
     * Variable name
     */
    extendedArWindowVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    integrityTypeVariable?: pulumi.Input<string>;
    /**
     * Set the authentication type for DTLS connections
     */
    integrityTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure a Keychain
     */
    keychains?: pulumi.Input<pulumi.Input<inputs.CiscoSecurityFeatureTemplateKeychain>[]>;
    /**
     * Configure a Key
     */
    keys?: pulumi.Input<pulumi.Input<inputs.CiscoSecurityFeatureTemplateKey>[]>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable IPsec pairwise-keying
     *   - Default value: `false`
     */
    pairwiseKeying?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    pairwiseKeyingVariable?: pulumi.Input<string>;
    /**
     * Set how often to change the AES key for DTLS connections
     *   - Range: `10`-`1209600`
     *   - Default value: `86400`
     */
    rekeyInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    rekeyIntervalVariable?: pulumi.Input<string>;
    /**
     * Set the sliding replay window size
     *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
     *   - Default value: `512`
     */
    replayWindow?: pulumi.Input<string>;
    /**
     * Variable name
     */
    replayWindowVariable?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CiscoSecurityFeatureTemplate resource.
 */
export interface CiscoSecurityFeatureTemplateArgs {
    /**
     * Variable name
     */
    authenticationTypeVariable?: pulumi.Input<string>;
    /**
     * Set the authentication type for DTLS connections
     */
    authenticationTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Extended Anti-Replay Window
     *   - Range: `10`-`2048`
     *   - Default value: `256`
     */
    extendedArWindow?: pulumi.Input<number>;
    /**
     * Variable name
     */
    extendedArWindowVariable?: pulumi.Input<string>;
    /**
     * Variable name
     */
    integrityTypeVariable?: pulumi.Input<string>;
    /**
     * Set the authentication type for DTLS connections
     */
    integrityTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Configure a Keychain
     */
    keychains?: pulumi.Input<pulumi.Input<inputs.CiscoSecurityFeatureTemplateKeychain>[]>;
    /**
     * Configure a Key
     */
    keys?: pulumi.Input<pulumi.Input<inputs.CiscoSecurityFeatureTemplateKey>[]>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Enable or disable IPsec pairwise-keying
     *   - Default value: `false`
     */
    pairwiseKeying?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    pairwiseKeyingVariable?: pulumi.Input<string>;
    /**
     * Set how often to change the AES key for DTLS connections
     *   - Range: `10`-`1209600`
     *   - Default value: `86400`
     */
    rekeyInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    rekeyIntervalVariable?: pulumi.Input<string>;
    /**
     * Set the sliding replay window size
     *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
     *   - Default value: `512`
     */
    replayWindow?: pulumi.Input<string>;
    /**
     * Variable name
     */
    replayWindowVariable?: pulumi.Input<string>;
}
