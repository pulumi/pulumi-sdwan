// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a Cisco BFD feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.CiscoBfdFeatureTemplate("example", {
 *     name: "Example",
 *     description: "My Example",
 *     deviceTypes: ["vedge-C8000V"],
 *     multiplier: 3,
 *     pollInterval: 800000,
 *     defaultDscp: 48,
 *     colors: [{
 *         color: "private5",
 *         hello_interval: 1000,
 *         multiplier: 7,
 *         pmtu_discovery: true,
 *         dscp: 46,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class CiscoBfdFeatureTemplate extends pulumi.CustomResource {
    /**
     * Get an existing CiscoBfdFeatureTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CiscoBfdFeatureTemplateState, opts?: pulumi.CustomResourceOptions): CiscoBfdFeatureTemplate {
        return new CiscoBfdFeatureTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate';

    /**
     * Returns true if the given object is an instance of CiscoBfdFeatureTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CiscoBfdFeatureTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CiscoBfdFeatureTemplate.__pulumiType;
    }

    /**
     * Set color that identifies the WAN transport tunnel
     */
    declare public readonly colors: pulumi.Output<outputs.CiscoBfdFeatureTemplateColor[] | undefined>;
    /**
     * Set default DSCP value for BFD packets
     *   - Range: `0`-`63`
     *   - Default value: `48`
     */
    declare public readonly defaultDscp: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly defaultDscpVariable: pulumi.Output<string | undefined>;
    /**
     * The description of the feature template
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    declare public readonly deviceTypes: pulumi.Output<string[]>;
    /**
     * Set the number of polling intervals used to determine tunnel SLA class
     *   - Range: `1`-`6`
     *   - Default value: `6`
     */
    declare public readonly multiplier: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly multiplierVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the feature template
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Set how often BFD polls tunnels to collect packet latency, loss, and statistics
     *   - Range: `1`-`4294967295`
     *   - Default value: `600000`
     */
    declare public readonly pollInterval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly pollIntervalVariable: pulumi.Output<string | undefined>;
    /**
     * The template type
     */
    declare public /*out*/ readonly templateType: pulumi.Output<string>;
    /**
     * The version of the feature template
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a CiscoBfdFeatureTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CiscoBfdFeatureTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CiscoBfdFeatureTemplateArgs | CiscoBfdFeatureTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CiscoBfdFeatureTemplateState | undefined;
            resourceInputs["colors"] = state?.colors;
            resourceInputs["defaultDscp"] = state?.defaultDscp;
            resourceInputs["defaultDscpVariable"] = state?.defaultDscpVariable;
            resourceInputs["description"] = state?.description;
            resourceInputs["deviceTypes"] = state?.deviceTypes;
            resourceInputs["multiplier"] = state?.multiplier;
            resourceInputs["multiplierVariable"] = state?.multiplierVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["pollInterval"] = state?.pollInterval;
            resourceInputs["pollIntervalVariable"] = state?.pollIntervalVariable;
            resourceInputs["templateType"] = state?.templateType;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as CiscoBfdFeatureTemplateArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.deviceTypes === undefined && !opts.urn) {
                throw new Error("Missing required property 'deviceTypes'");
            }
            resourceInputs["colors"] = args?.colors;
            resourceInputs["defaultDscp"] = args?.defaultDscp;
            resourceInputs["defaultDscpVariable"] = args?.defaultDscpVariable;
            resourceInputs["description"] = args?.description;
            resourceInputs["deviceTypes"] = args?.deviceTypes;
            resourceInputs["multiplier"] = args?.multiplier;
            resourceInputs["multiplierVariable"] = args?.multiplierVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["pollInterval"] = args?.pollInterval;
            resourceInputs["pollIntervalVariable"] = args?.pollIntervalVariable;
            resourceInputs["templateType"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CiscoBfdFeatureTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CiscoBfdFeatureTemplate resources.
 */
export interface CiscoBfdFeatureTemplateState {
    /**
     * Set color that identifies the WAN transport tunnel
     */
    colors?: pulumi.Input<pulumi.Input<inputs.CiscoBfdFeatureTemplateColor>[]>;
    /**
     * Set default DSCP value for BFD packets
     *   - Range: `0`-`63`
     *   - Default value: `48`
     */
    defaultDscp?: pulumi.Input<number>;
    /**
     * Variable name
     */
    defaultDscpVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description?: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set the number of polling intervals used to determine tunnel SLA class
     *   - Range: `1`-`6`
     *   - Default value: `6`
     */
    multiplier?: pulumi.Input<number>;
    /**
     * Variable name
     */
    multiplierVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Set how often BFD polls tunnels to collect packet latency, loss, and statistics
     *   - Range: `1`-`4294967295`
     *   - Default value: `600000`
     */
    pollInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    pollIntervalVariable?: pulumi.Input<string>;
    /**
     * The template type
     */
    templateType?: pulumi.Input<string>;
    /**
     * The version of the feature template
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CiscoBfdFeatureTemplate resource.
 */
export interface CiscoBfdFeatureTemplateArgs {
    /**
     * Set color that identifies the WAN transport tunnel
     */
    colors?: pulumi.Input<pulumi.Input<inputs.CiscoBfdFeatureTemplateColor>[]>;
    /**
     * Set default DSCP value for BFD packets
     *   - Range: `0`-`63`
     *   - Default value: `48`
     */
    defaultDscp?: pulumi.Input<number>;
    /**
     * Variable name
     */
    defaultDscpVariable?: pulumi.Input<string>;
    /**
     * The description of the feature template
     */
    description: pulumi.Input<string>;
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     */
    deviceTypes: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Set the number of polling intervals used to determine tunnel SLA class
     *   - Range: `1`-`6`
     *   - Default value: `6`
     */
    multiplier?: pulumi.Input<number>;
    /**
     * Variable name
     */
    multiplierVariable?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
    /**
     * Set how often BFD polls tunnels to collect packet latency, loss, and statistics
     *   - Range: `1`-`4294967295`
     *   - Default value: `600000`
     */
    pollInterval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    pollIntervalVariable?: pulumi.Input<string>;
}
