// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Service Routing BGP Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceRoutingBgpFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 * });
 * ```
 */
export function getServiceRoutingBgpFeature(args: GetServiceRoutingBgpFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceRoutingBgpFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getServiceRoutingBgpFeature:getServiceRoutingBgpFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceRoutingBgpFeature.
 */
export interface GetServiceRoutingBgpFeatureArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the Feature
     */
    id: string;
}

/**
 * A collection of values returned by getServiceRoutingBgpFeature.
 */
export interface GetServiceRoutingBgpFeatureResult {
    /**
     * Compare MEDs from all ASs when selecting active BGP paths
     */
    readonly alwaysCompareMed: boolean;
    /**
     * Variable name
     */
    readonly alwaysCompareMedVariable: string;
    /**
     * Set autonomous system number \n\n or \n\n
     */
    readonly asNumber: number;
    /**
     * Variable name
     */
    readonly asNumberVariable: string;
    /**
     * Compare router IDs when selecting active BGP paths
     */
    readonly compareRouterId: boolean;
    /**
     * Variable name
     */
    readonly compareRouterIdVariable: string;
    /**
     * The description of the Feature
     */
    readonly description: string;
    /**
     * Compare MEDs from all routes from same AS when selecting active BGP paths
     */
    readonly deterministicMed: boolean;
    /**
     * Variable name
     */
    readonly deterministicMedVariable: string;
    /**
     * Set administrative distance for external BGP routes
     */
    readonly externalRoutesDistance: number;
    /**
     * Variable name
     */
    readonly externalRoutesDistanceVariable: string;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * Interval (seconds) not receiving a keepalive message declares a BGP peer down
     */
    readonly holdTime: number;
    /**
     * Variable name
     */
    readonly holdTimeVariable: string;
    /**
     * The id of the Feature
     */
    readonly id: string;
    /**
     * Set administrative distance for internal BGP routes
     */
    readonly internalRoutesDistance: number;
    /**
     * Variable name
     */
    readonly internalRoutesDistanceVariable: string;
    /**
     * Aggregate prefixes in specific range
     */
    readonly ipv4AggregateAddresses: outputs.GetServiceRoutingBgpFeatureIpv4AggregateAddress[];
    /**
     * Set maximum number of parallel IBGP paths for multipath load sharing
     */
    readonly ipv4EibgpMaximumPaths: number;
    /**
     * Variable name
     */
    readonly ipv4EibgpMaximumPathsVariable: string;
    /**
     * Set BGP IPv4 neighbors
     */
    readonly ipv4Neighbors: outputs.GetServiceRoutingBgpFeatureIpv4Neighbor[];
    /**
     * Configure the networks for BGP to advertise
     */
    readonly ipv4Networks: outputs.GetServiceRoutingBgpFeatureIpv4Network[];
    /**
     * BGP Default Information Originate
     */
    readonly ipv4Originate: boolean;
    /**
     * Variable name
     */
    readonly ipv4OriginateVariable: string;
    /**
     * Redistribute routes into BGP
     */
    readonly ipv4Redistributes: outputs.GetServiceRoutingBgpFeatureIpv4Redistribute[];
    /**
     * Table map filtered or not
     */
    readonly ipv4TableMapFilter: boolean;
    /**
     * Variable name
     */
    readonly ipv4TableMapFilterVariable: string;
    readonly ipv4TableMapRoutePolicyId: string;
    /**
     * IPv6 Aggregate prefixes in specific range
     */
    readonly ipv6AggregateAddresses: outputs.GetServiceRoutingBgpFeatureIpv6AggregateAddress[];
    /**
     * Set maximum number of parallel IBGP paths for multipath load sharing
     */
    readonly ipv6EibgpMaximumPaths: number;
    /**
     * Variable name
     */
    readonly ipv6EibgpMaximumPathsVariable: string;
    /**
     * Set BGP IPv6 neighbors
     */
    readonly ipv6Neighbors: outputs.GetServiceRoutingBgpFeatureIpv6Neighbor[];
    /**
     * Configure the networks for BGP to advertise
     */
    readonly ipv6Networks: outputs.GetServiceRoutingBgpFeatureIpv6Network[];
    /**
     * BGP Default Information Originate
     */
    readonly ipv6Originate: boolean;
    /**
     * Variable name
     */
    readonly ipv6OriginateVariable: string;
    /**
     * Redistribute routes into BGP
     */
    readonly ipv6Redistributes: outputs.GetServiceRoutingBgpFeatureIpv6Redistribute[];
    /**
     * Table map filtered or not
     */
    readonly ipv6TableMapFilter: boolean;
    /**
     * Variable name
     */
    readonly ipv6TableMapFilterVariable: string;
    readonly ipv6TableMapRoutePolicyId: string;
    /**
     * Interval (seconds) of keepalive messages sent to its BGP peer
     */
    readonly keepaliveTime: number;
    /**
     * Variable name
     */
    readonly keepaliveTimeVariable: string;
    /**
     * Set administrative distance for local BGP routes
     */
    readonly localRoutesDistance: number;
    /**
     * Variable name
     */
    readonly localRoutesDistanceVariable: string;
    /**
     * If path has no MED, consider it to be worst path when selecting active BGP paths
     */
    readonly missingMedAsWorst: boolean;
    /**
     * Variable name
     */
    readonly missingMedAsWorstVariable: string;
    /**
     * Ignore AS for multipath selection
     */
    readonly multipathRelax: boolean;
    /**
     * Variable name
     */
    readonly multipathRelaxVariable: string;
    /**
     * The name of the Feature
     */
    readonly name: string;
    /**
     * Propagate AS Path
     */
    readonly propagateAsPath: boolean;
    /**
     * Variable name
     */
    readonly propagateAsPathVariable: string;
    /**
     * Propagate Community
     */
    readonly propagateCommunity: boolean;
    /**
     * Variable name
     */
    readonly propagateCommunityVariable: string;
    /**
     * Configure BGP router identifier
     */
    readonly routerId: string;
    /**
     * Variable name
     */
    readonly routerIdVariable: string;
    /**
     * The version of the Feature
     */
    readonly version: number;
}
/**
 * This data source can read the Service Routing BGP Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceRoutingBgpFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 * });
 * ```
 */
export function getServiceRoutingBgpFeatureOutput(args: GetServiceRoutingBgpFeatureOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServiceRoutingBgpFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getServiceRoutingBgpFeature:getServiceRoutingBgpFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceRoutingBgpFeature.
 */
export interface GetServiceRoutingBgpFeatureOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the Feature
     */
    id: pulumi.Input<string>;
}
