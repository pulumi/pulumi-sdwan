// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport GPS Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.TransportGpsFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     gpsEnable: false,
 *     gpsMode: "ms-based",
 *     nmeaEnable: false,
 *     nmeaSourceAddress: "1.2.3.4",
 *     nmeaDestinationAddress: "2.3.4.5",
 *     nmeaDestinationPort: 22,
 * });
 * ```
 *
 * ## Import
 *
 * Expected import identifier with the format: "transport_gps_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportGpsFeature:TransportGpsFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class TransportGpsFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportGpsFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportGpsFeatureState, opts?: pulumi.CustomResourceOptions): TransportGpsFeature {
        return new TransportGpsFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportGpsFeature:TransportGpsFeature';

    /**
     * Returns true if the given object is an instance of TransportGpsFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportGpsFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportGpsFeature.__pulumiType;
    }

    /**
     * The description of the Feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    public readonly featureProfileId!: pulumi.Output<string>;
    /**
     * Enable/disable GPS - Default value: `false`
     */
    public readonly gpsEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly gpsEnableVariable!: pulumi.Output<string | undefined>;
    /**
     * Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
     */
    public readonly gpsMode!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly gpsModeVariable!: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Destination address
     */
    public readonly nmeaDestinationAddress!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly nmeaDestinationAddressVariable!: pulumi.Output<string | undefined>;
    /**
     * Destination port - Range: `1`-`65535`
     */
    public readonly nmeaDestinationPort!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly nmeaDestinationPortVariable!: pulumi.Output<string | undefined>;
    /**
     * Enable/disable NMEA data - Default value: `false`
     */
    public readonly nmeaEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly nmeaEnableVariable!: pulumi.Output<string | undefined>;
    /**
     * Source address
     */
    public readonly nmeaSourceAddress!: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    public readonly nmeaSourceAddressVariable!: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a TransportGpsFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportGpsFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportGpsFeatureArgs | TransportGpsFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportGpsFeatureState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["featureProfileId"] = state ? state.featureProfileId : undefined;
            resourceInputs["gpsEnable"] = state ? state.gpsEnable : undefined;
            resourceInputs["gpsEnableVariable"] = state ? state.gpsEnableVariable : undefined;
            resourceInputs["gpsMode"] = state ? state.gpsMode : undefined;
            resourceInputs["gpsModeVariable"] = state ? state.gpsModeVariable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nmeaDestinationAddress"] = state ? state.nmeaDestinationAddress : undefined;
            resourceInputs["nmeaDestinationAddressVariable"] = state ? state.nmeaDestinationAddressVariable : undefined;
            resourceInputs["nmeaDestinationPort"] = state ? state.nmeaDestinationPort : undefined;
            resourceInputs["nmeaDestinationPortVariable"] = state ? state.nmeaDestinationPortVariable : undefined;
            resourceInputs["nmeaEnable"] = state ? state.nmeaEnable : undefined;
            resourceInputs["nmeaEnableVariable"] = state ? state.nmeaEnableVariable : undefined;
            resourceInputs["nmeaSourceAddress"] = state ? state.nmeaSourceAddress : undefined;
            resourceInputs["nmeaSourceAddressVariable"] = state ? state.nmeaSourceAddressVariable : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TransportGpsFeatureArgs | undefined;
            if ((!args || args.featureProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["featureProfileId"] = args ? args.featureProfileId : undefined;
            resourceInputs["gpsEnable"] = args ? args.gpsEnable : undefined;
            resourceInputs["gpsEnableVariable"] = args ? args.gpsEnableVariable : undefined;
            resourceInputs["gpsMode"] = args ? args.gpsMode : undefined;
            resourceInputs["gpsModeVariable"] = args ? args.gpsModeVariable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nmeaDestinationAddress"] = args ? args.nmeaDestinationAddress : undefined;
            resourceInputs["nmeaDestinationAddressVariable"] = args ? args.nmeaDestinationAddressVariable : undefined;
            resourceInputs["nmeaDestinationPort"] = args ? args.nmeaDestinationPort : undefined;
            resourceInputs["nmeaDestinationPortVariable"] = args ? args.nmeaDestinationPortVariable : undefined;
            resourceInputs["nmeaEnable"] = args ? args.nmeaEnable : undefined;
            resourceInputs["nmeaEnableVariable"] = args ? args.nmeaEnableVariable : undefined;
            resourceInputs["nmeaSourceAddress"] = args ? args.nmeaSourceAddress : undefined;
            resourceInputs["nmeaSourceAddressVariable"] = args ? args.nmeaSourceAddressVariable : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportGpsFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportGpsFeature resources.
 */
export interface TransportGpsFeatureState {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Enable/disable GPS - Default value: `false`
     */
    gpsEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    gpsEnableVariable?: pulumi.Input<string>;
    /**
     * Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
     */
    gpsMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    gpsModeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Destination address
     */
    nmeaDestinationAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaDestinationAddressVariable?: pulumi.Input<string>;
    /**
     * Destination port - Range: `1`-`65535`
     */
    nmeaDestinationPort?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nmeaDestinationPortVariable?: pulumi.Input<string>;
    /**
     * Enable/disable NMEA data - Default value: `false`
     */
    nmeaEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    nmeaEnableVariable?: pulumi.Input<string>;
    /**
     * Source address
     */
    nmeaSourceAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaSourceAddressVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransportGpsFeature resource.
 */
export interface TransportGpsFeatureArgs {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Enable/disable GPS - Default value: `false`
     */
    gpsEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    gpsEnableVariable?: pulumi.Input<string>;
    /**
     * Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
     */
    gpsMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    gpsModeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Destination address
     */
    nmeaDestinationAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaDestinationAddressVariable?: pulumi.Input<string>;
    /**
     * Destination port - Range: `1`-`65535`
     */
    nmeaDestinationPort?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nmeaDestinationPortVariable?: pulumi.Input<string>;
    /**
     * Enable/disable NMEA data - Default value: `false`
     */
    nmeaEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    nmeaEnableVariable?: pulumi.Input<string>;
    /**
     * Source address
     */
    nmeaSourceAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaSourceAddressVariable?: pulumi.Input<string>;
}
