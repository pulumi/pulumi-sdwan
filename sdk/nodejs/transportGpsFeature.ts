// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a Transport GPS Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.TransportGpsFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     gpsEnable: false,
 *     gpsMode: "ms-based",
 *     nmeaEnable: false,
 *     nmeaSourceAddress: "1.2.3.4",
 *     nmeaDestinationAddress: "2.3.4.5",
 *     nmeaDestinationPort: 22,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "transport_gps_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/transportGpsFeature:TransportGpsFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class TransportGpsFeature extends pulumi.CustomResource {
    /**
     * Get an existing TransportGpsFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TransportGpsFeatureState, opts?: pulumi.CustomResourceOptions): TransportGpsFeature {
        return new TransportGpsFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/transportGpsFeature:TransportGpsFeature';

    /**
     * Returns true if the given object is an instance of TransportGpsFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TransportGpsFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TransportGpsFeature.__pulumiType;
    }

    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    /**
     * Enable/disable GPS
     *   - Default value: `false`
     */
    declare public readonly gpsEnable: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly gpsEnableVariable: pulumi.Output<string | undefined>;
    /**
     * Select GPS mode
     *   - Choices: `ms-based`, `standalone`
     *   - Default value: `ms-based`
     */
    declare public readonly gpsMode: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly gpsModeVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Destination address
     */
    declare public readonly nmeaDestinationAddress: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly nmeaDestinationAddressVariable: pulumi.Output<string | undefined>;
    /**
     * Destination port
     *   - Range: `1`-`65535`
     */
    declare public readonly nmeaDestinationPort: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly nmeaDestinationPortVariable: pulumi.Output<string | undefined>;
    /**
     * Enable/disable NMEA data
     *   - Default value: `false`
     */
    declare public readonly nmeaEnable: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    declare public readonly nmeaEnableVariable: pulumi.Output<string | undefined>;
    /**
     * Source address
     */
    declare public readonly nmeaSourceAddress: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly nmeaSourceAddressVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a TransportGpsFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TransportGpsFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TransportGpsFeatureArgs | TransportGpsFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TransportGpsFeatureState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["gpsEnable"] = state?.gpsEnable;
            resourceInputs["gpsEnableVariable"] = state?.gpsEnableVariable;
            resourceInputs["gpsMode"] = state?.gpsMode;
            resourceInputs["gpsModeVariable"] = state?.gpsModeVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["nmeaDestinationAddress"] = state?.nmeaDestinationAddress;
            resourceInputs["nmeaDestinationAddressVariable"] = state?.nmeaDestinationAddressVariable;
            resourceInputs["nmeaDestinationPort"] = state?.nmeaDestinationPort;
            resourceInputs["nmeaDestinationPortVariable"] = state?.nmeaDestinationPortVariable;
            resourceInputs["nmeaEnable"] = state?.nmeaEnable;
            resourceInputs["nmeaEnableVariable"] = state?.nmeaEnableVariable;
            resourceInputs["nmeaSourceAddress"] = state?.nmeaSourceAddress;
            resourceInputs["nmeaSourceAddressVariable"] = state?.nmeaSourceAddressVariable;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as TransportGpsFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["gpsEnable"] = args?.gpsEnable;
            resourceInputs["gpsEnableVariable"] = args?.gpsEnableVariable;
            resourceInputs["gpsMode"] = args?.gpsMode;
            resourceInputs["gpsModeVariable"] = args?.gpsModeVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["nmeaDestinationAddress"] = args?.nmeaDestinationAddress;
            resourceInputs["nmeaDestinationAddressVariable"] = args?.nmeaDestinationAddressVariable;
            resourceInputs["nmeaDestinationPort"] = args?.nmeaDestinationPort;
            resourceInputs["nmeaDestinationPortVariable"] = args?.nmeaDestinationPortVariable;
            resourceInputs["nmeaEnable"] = args?.nmeaEnable;
            resourceInputs["nmeaEnableVariable"] = args?.nmeaEnableVariable;
            resourceInputs["nmeaSourceAddress"] = args?.nmeaSourceAddress;
            resourceInputs["nmeaSourceAddressVariable"] = args?.nmeaSourceAddressVariable;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TransportGpsFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TransportGpsFeature resources.
 */
export interface TransportGpsFeatureState {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Enable/disable GPS
     *   - Default value: `false`
     */
    gpsEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    gpsEnableVariable?: pulumi.Input<string>;
    /**
     * Select GPS mode
     *   - Choices: `ms-based`, `standalone`
     *   - Default value: `ms-based`
     */
    gpsMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    gpsModeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Destination address
     */
    nmeaDestinationAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaDestinationAddressVariable?: pulumi.Input<string>;
    /**
     * Destination port
     *   - Range: `1`-`65535`
     */
    nmeaDestinationPort?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nmeaDestinationPortVariable?: pulumi.Input<string>;
    /**
     * Enable/disable NMEA data
     *   - Default value: `false`
     */
    nmeaEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    nmeaEnableVariable?: pulumi.Input<string>;
    /**
     * Source address
     */
    nmeaSourceAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaSourceAddressVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TransportGpsFeature resource.
 */
export interface TransportGpsFeatureArgs {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Enable/disable GPS
     *   - Default value: `false`
     */
    gpsEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    gpsEnableVariable?: pulumi.Input<string>;
    /**
     * Select GPS mode
     *   - Choices: `ms-based`, `standalone`
     *   - Default value: `ms-based`
     */
    gpsMode?: pulumi.Input<string>;
    /**
     * Variable name
     */
    gpsModeVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Destination address
     */
    nmeaDestinationAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaDestinationAddressVariable?: pulumi.Input<string>;
    /**
     * Destination port
     *   - Range: `1`-`65535`
     */
    nmeaDestinationPort?: pulumi.Input<number>;
    /**
     * Variable name
     */
    nmeaDestinationPortVariable?: pulumi.Input<string>;
    /**
     * Enable/disable NMEA data
     *   - Default value: `false`
     */
    nmeaEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    nmeaEnableVariable?: pulumi.Input<string>;
    /**
     * Source address
     */
    nmeaSourceAddress?: pulumi.Input<string>;
    /**
     * Variable name
     */
    nmeaSourceAddressVariable?: pulumi.Input<string>;
}
