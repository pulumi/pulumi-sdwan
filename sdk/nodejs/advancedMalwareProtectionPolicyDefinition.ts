// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a Advanced Malware Protection Policy Definition .
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.AdvancedMalwareProtectionPolicyDefinition("example", {
 *     name: "Example",
 *     description: "My description",
 *     mode: "security",
 *     matchAllVpn: false,
 *     targetVpns: ["1"],
 *     alertLogLevel: "critical",
 *     ampCloudRegion: "apjc",
 *     ampCloudRegionEstServer: "apjc",
 *     fileAnalysis: false,
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * ```sh
 * $ pulumi import sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class AdvancedMalwareProtectionPolicyDefinition extends pulumi.CustomResource {
    /**
     * Get an existing AdvancedMalwareProtectionPolicyDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdvancedMalwareProtectionPolicyDefinitionState, opts?: pulumi.CustomResourceOptions): AdvancedMalwareProtectionPolicyDefinition {
        return new AdvancedMalwareProtectionPolicyDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition';

    /**
     * Returns true if the given object is an instance of AdvancedMalwareProtectionPolicyDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdvancedMalwareProtectionPolicyDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdvancedMalwareProtectionPolicyDefinition.__pulumiType;
    }

    /**
     * File reputation alerts Log level
     *   - Choices: `critical`, `warning`, `info`
     */
    declare public readonly alertLogLevel: pulumi.Output<string | undefined>;
    /**
     * AMP Cloud Region
     *   - Choices: `nam`, `eu`, `apjc`
     */
    declare public readonly ampCloudRegion: pulumi.Output<string | undefined>;
    /**
     * AMP Cloud Region
     *   - Choices: `nam`, `eu`, `apjc`
     */
    declare public readonly ampCloudRegionEstServer: pulumi.Output<string | undefined>;
    /**
     * The description of the policy definition
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Should file analysis be enabled
     */
    declare public readonly fileAnalysis: pulumi.Output<boolean | undefined>;
    /**
     * File analysis alerts Log level
     *   - Choices: `critical`, `warning`, `info`
     */
    declare public readonly fileAnalysisAlertLogLevel: pulumi.Output<string | undefined>;
    /**
     * TG Cloud Region
     *   - Choices: `nam`, `eu`
     */
    declare public readonly fileAnalysisCloudRegion: pulumi.Output<string | undefined>;
    /**
     * List of file type
     */
    declare public readonly fileAnalysisFileTypes: pulumi.Output<string[] | undefined>;
    /**
     * Should match all VPNs
     */
    declare public readonly matchAllVpn: pulumi.Output<boolean | undefined>;
    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     *   - Default value: `security`
     */
    declare public readonly mode: pulumi.Output<string>;
    /**
     * The name of the policy definition
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of VPN IDs
     */
    declare public readonly targetVpns: pulumi.Output<string[] | undefined>;
    /**
     * The version of the object
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a AdvancedMalwareProtectionPolicyDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdvancedMalwareProtectionPolicyDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdvancedMalwareProtectionPolicyDefinitionArgs | AdvancedMalwareProtectionPolicyDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdvancedMalwareProtectionPolicyDefinitionState | undefined;
            resourceInputs["alertLogLevel"] = state?.alertLogLevel;
            resourceInputs["ampCloudRegion"] = state?.ampCloudRegion;
            resourceInputs["ampCloudRegionEstServer"] = state?.ampCloudRegionEstServer;
            resourceInputs["description"] = state?.description;
            resourceInputs["fileAnalysis"] = state?.fileAnalysis;
            resourceInputs["fileAnalysisAlertLogLevel"] = state?.fileAnalysisAlertLogLevel;
            resourceInputs["fileAnalysisCloudRegion"] = state?.fileAnalysisCloudRegion;
            resourceInputs["fileAnalysisFileTypes"] = state?.fileAnalysisFileTypes;
            resourceInputs["matchAllVpn"] = state?.matchAllVpn;
            resourceInputs["mode"] = state?.mode;
            resourceInputs["name"] = state?.name;
            resourceInputs["targetVpns"] = state?.targetVpns;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as AdvancedMalwareProtectionPolicyDefinitionArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["alertLogLevel"] = args?.alertLogLevel;
            resourceInputs["ampCloudRegion"] = args?.ampCloudRegion;
            resourceInputs["ampCloudRegionEstServer"] = args?.ampCloudRegionEstServer;
            resourceInputs["description"] = args?.description;
            resourceInputs["fileAnalysis"] = args?.fileAnalysis;
            resourceInputs["fileAnalysisAlertLogLevel"] = args?.fileAnalysisAlertLogLevel;
            resourceInputs["fileAnalysisCloudRegion"] = args?.fileAnalysisCloudRegion;
            resourceInputs["fileAnalysisFileTypes"] = args?.fileAnalysisFileTypes;
            resourceInputs["matchAllVpn"] = args?.matchAllVpn;
            resourceInputs["mode"] = args?.mode;
            resourceInputs["name"] = args?.name;
            resourceInputs["targetVpns"] = args?.targetVpns;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdvancedMalwareProtectionPolicyDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdvancedMalwareProtectionPolicyDefinition resources.
 */
export interface AdvancedMalwareProtectionPolicyDefinitionState {
    /**
     * File reputation alerts Log level
     *   - Choices: `critical`, `warning`, `info`
     */
    alertLogLevel?: pulumi.Input<string>;
    /**
     * AMP Cloud Region
     *   - Choices: `nam`, `eu`, `apjc`
     */
    ampCloudRegion?: pulumi.Input<string>;
    /**
     * AMP Cloud Region
     *   - Choices: `nam`, `eu`, `apjc`
     */
    ampCloudRegionEstServer?: pulumi.Input<string>;
    /**
     * The description of the policy definition
     */
    description?: pulumi.Input<string>;
    /**
     * Should file analysis be enabled
     */
    fileAnalysis?: pulumi.Input<boolean>;
    /**
     * File analysis alerts Log level
     *   - Choices: `critical`, `warning`, `info`
     */
    fileAnalysisAlertLogLevel?: pulumi.Input<string>;
    /**
     * TG Cloud Region
     *   - Choices: `nam`, `eu`
     */
    fileAnalysisCloudRegion?: pulumi.Input<string>;
    /**
     * List of file type
     */
    fileAnalysisFileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should match all VPNs
     */
    matchAllVpn?: pulumi.Input<boolean>;
    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     *   - Default value: `security`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy definition
     */
    name?: pulumi.Input<string>;
    /**
     * List of VPN IDs
     */
    targetVpns?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The version of the object
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a AdvancedMalwareProtectionPolicyDefinition resource.
 */
export interface AdvancedMalwareProtectionPolicyDefinitionArgs {
    /**
     * File reputation alerts Log level
     *   - Choices: `critical`, `warning`, `info`
     */
    alertLogLevel?: pulumi.Input<string>;
    /**
     * AMP Cloud Region
     *   - Choices: `nam`, `eu`, `apjc`
     */
    ampCloudRegion?: pulumi.Input<string>;
    /**
     * AMP Cloud Region
     *   - Choices: `nam`, `eu`, `apjc`
     */
    ampCloudRegionEstServer?: pulumi.Input<string>;
    /**
     * The description of the policy definition
     */
    description: pulumi.Input<string>;
    /**
     * Should file analysis be enabled
     */
    fileAnalysis?: pulumi.Input<boolean>;
    /**
     * File analysis alerts Log level
     *   - Choices: `critical`, `warning`, `info`
     */
    fileAnalysisAlertLogLevel?: pulumi.Input<string>;
    /**
     * TG Cloud Region
     *   - Choices: `nam`, `eu`
     */
    fileAnalysisCloudRegion?: pulumi.Input<string>;
    /**
     * List of file type
     */
    fileAnalysisFileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Should match all VPNs
     */
    matchAllVpn?: pulumi.Input<boolean>;
    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     *   - Default value: `security`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy definition
     */
    name?: pulumi.Input<string>;
    /**
     * List of VPN IDs
     */
    targetVpns?: pulumi.Input<pulumi.Input<string>[]>;
}
