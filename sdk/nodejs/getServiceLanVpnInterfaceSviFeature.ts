// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Service LAN VPN Interface SVI Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceLanVpnInterfaceSviFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     serviceLanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getServiceLanVpnInterfaceSviFeature(args: GetServiceLanVpnInterfaceSviFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetServiceLanVpnInterfaceSviFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getServiceLanVpnInterfaceSviFeature:getServiceLanVpnInterfaceSviFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "serviceLanVpnFeatureId": args.serviceLanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceSviFeature.
 */
export interface GetServiceLanVpnInterfaceSviFeatureArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the Feature
     */
    id: string;
    /**
     * Service LAN VPN Feature ID
     */
    serviceLanVpnFeatureId: string;
}

/**
 * A collection of values returned by getServiceLanVpnInterfaceSviFeature.
 */
export interface GetServiceLanVpnInterfaceSviFeatureResult {
    readonly aclIpv4EgressFeatureId: string;
    readonly aclIpv4IngressFeatureId: string;
    readonly aclIpv6EgressFeatureId: string;
    readonly aclIpv6IngressFeatureId: string;
    /**
     * Timeout value for dynamically learned ARP entries, \n\n seconds
     */
    readonly arpTimeout: number;
    /**
     * Variable name
     */
    readonly arpTimeoutVariable: string;
    /**
     * Configure static ARP entries
     */
    readonly arps: outputs.GetServiceLanVpnInterfaceSviFeatureArp[];
    /**
     * The description of the Feature
     */
    readonly description: string;
    /**
     * Enable DHCPv6
     */
    readonly enableDhcpv6: boolean;
    /**
     * Variable name
     */
    readonly enableDhcpv6Variable: string;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * ICMP/ICMPv6 Redirect Disable
     */
    readonly icmpRedirectDisable: boolean;
    /**
     * Variable name
     */
    readonly icmpRedirectDisableVariable: string;
    /**
     * The id of the Feature
     */
    readonly id: string;
    /**
     * Interface description
     */
    readonly interfaceDescription: string;
    /**
     * Variable name
     */
    readonly interfaceDescriptionVariable: string;
    /**
     * Interface MTU \n\n in bytes
     */
    readonly interfaceMtu: number;
    /**
     * Variable name
     */
    readonly interfaceMtuVariable: string;
    /**
     * Interface name: VLAN 1 - VLAN 4094 when present
     */
    readonly interfaceName: string;
    /**
     * Variable name
     */
    readonly interfaceNameVariable: string;
    /**
     * IP Directed-Broadcast
     */
    readonly ipDirectedBroadcast: boolean;
    /**
     * Variable name
     */
    readonly ipDirectedBroadcastVariable: string;
    /**
     * IP MTU \n\n, in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * IP Address
     */
    readonly ipv4Address: string;
    /**
     * Variable name
     */
    readonly ipv4AddressVariable: string;
    /**
     * List of DHCP helper addresses
     */
    readonly ipv4DhcpHelpers: string[];
    /**
     * Variable name
     */
    readonly ipv4DhcpHelpersVariable: string;
    /**
     * Assign secondary IP addresses
     */
    readonly ipv4SecondaryAddresses: outputs.GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress[];
    /**
     * Subnet Mask
     */
    readonly ipv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly ipv4SubnetMaskVariable: string;
    /**
     * Enable ipv4 VRRP
     */
    readonly ipv4Vrrps: outputs.GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp[];
    /**
     * Assign IPv6 address
     */
    readonly ipv6Address: string;
    /**
     * Variable name
     */
    readonly ipv6AddressVariable: string;
    /**
     * DHCPv6 Helper
     */
    readonly ipv6DhcpHelpers: outputs.GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper[];
    /**
     * Assign secondary IPv6 addresses
     */
    readonly ipv6SecondaryAddresses: outputs.GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress[];
    /**
     * Enable ipv6 VRRP
     */
    readonly ipv6Vrrps: outputs.GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp[];
    /**
     * The name of the Feature
     */
    readonly name: string;
    /**
     * Service LAN VPN Feature ID
     */
    readonly serviceLanVpnFeatureId: string;
    /**
     * Administrative state
     */
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMss: number;
    /**
     * Variable name
     */
    readonly tcpMssVariable: string;
    /**
     * The version of the Feature
     */
    readonly version: number;
}
/**
 * This data source can read the Service LAN VPN Interface SVI Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getServiceLanVpnInterfaceSviFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     serviceLanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getServiceLanVpnInterfaceSviFeatureOutput(args: GetServiceLanVpnInterfaceSviFeatureOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetServiceLanVpnInterfaceSviFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getServiceLanVpnInterfaceSviFeature:getServiceLanVpnInterfaceSviFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "serviceLanVpnFeatureId": args.serviceLanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServiceLanVpnInterfaceSviFeature.
 */
export interface GetServiceLanVpnInterfaceSviFeatureOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the Feature
     */
    id: pulumi.Input<string>;
    /**
     * Service LAN VPN Feature ID
     */
    serviceLanVpnFeatureId: pulumi.Input<string>;
}
