// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Cisco VPN Interface feature template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getCiscoVpnInterfaceFeatureTemplate({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 * });
 * ```
 */
export function getCiscoVpnInterfaceFeatureTemplate(args?: GetCiscoVpnInterfaceFeatureTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetCiscoVpnInterfaceFeatureTemplateResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getCiscoVpnInterfaceFeatureTemplate:getCiscoVpnInterfaceFeatureTemplate", {
        "id": args.id,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCiscoVpnInterfaceFeatureTemplate.
 */
export interface GetCiscoVpnInterfaceFeatureTemplateArgs {
    /**
     * The id of the feature template
     */
    id?: string;
    /**
     * The name of the feature template
     */
    name?: string;
}

/**
 * A collection of values returned by getCiscoVpnInterfaceFeatureTemplate.
 */
export interface GetCiscoVpnInterfaceFeatureTemplateResult {
    /**
     * Apply ACL
     */
    readonly accessLists: outputs.GetCiscoVpnInterfaceFeatureTemplateAccessList[];
    /**
     * Assign IPv4 address
     */
    readonly address: string;
    /**
     * Variable name
     */
    readonly addressVariable: string;
    /**
     * Timeout value for dynamically learned ARP entries, \n\n seconds
     */
    readonly arpTimeout: number;
    /**
     * Variable name
     */
    readonly arpTimeoutVariable: string;
    /**
     * Interface auto detect bandwidth
     */
    readonly autoBandwidthDetect: boolean;
    /**
     * Variable name
     */
    readonly autoBandwidthDetectVariable: string;
    /**
     * Link autonegotiation
     */
    readonly autonegotiate: boolean;
    /**
     * Variable name
     */
    readonly autonegotiateVariable: string;
    /**
     * Interface downstream bandwidth capacity, in kbps
     */
    readonly bandwidthDownstream: number;
    /**
     * Variable name
     */
    readonly bandwidthDownstreamVariable: string;
    /**
     * Interface upstream bandwidth capacity, in kbps
     */
    readonly bandwidthUpstream: number;
    /**
     * Variable name
     */
    readonly bandwidthUpstreamVariable: string;
    /**
     * Block packets originating from IP address that is not from this source
     */
    readonly blockNonSourceIp: boolean;
    /**
     * Variable name
     */
    readonly blockNonSourceIpVariable: string;
    /**
     * Enable core region
     */
    readonly coreRegion: string;
    /**
     * Variable name
     */
    readonly coreRegionVariable: string;
    /**
     * The description of the feature template
     */
    readonly description: string;
    /**
     * List of supported device types
     */
    readonly deviceTypes: string[];
    /**
     * Enable DHCP
     */
    readonly dhcp: boolean;
    /**
     * Set administrative distance for DHCP default route
     */
    readonly dhcpDistance: number;
    /**
     * Variable name
     */
    readonly dhcpDistanceVariable: string;
    /**
     * Variable name
     */
    readonly dhcpVariable: string;
    /**
     * Enable DHCPv6
     */
    readonly dhcpv6: boolean;
    /**
     * Variable name
     */
    readonly dhcpv6Variable: string;
    /**
     * Duplex mode
     */
    readonly duplex: string;
    /**
     * Variable name
     */
    readonly duplexVariable: string;
    /**
     * Enable core region
     */
    readonly enableCoreRegion: boolean;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     */
    readonly enableSgt: boolean;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    readonly greTunnelSourceIp: string;
    /**
     * Variable name
     */
    readonly greTunnelSourceIpVariable: string;
    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     */
    readonly greTunnelXconnect: string;
    /**
     * Variable name
     */
    readonly greTunnelXconnectVariable: string;
    /**
     * Set this option to disable the icmp/icmpv6 redirect packets
     */
    readonly icmpRedirectDisable: boolean;
    /**
     * Variable name
     */
    readonly icmpRedirectDisableVariable: string;
    /**
     * The id of the feature template
     */
    readonly id: string;
    /**
     * Interface description
     */
    readonly interfaceDescription: string;
    /**
     * Variable name
     */
    readonly interfaceDescriptionVariable: string;
    /**
     * Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
     */
    readonly interfaceMtu: number;
    /**
     * Variable name
     */
    readonly interfaceMtuVariable: string;
    /**
     * Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
     */
    readonly interfaceName: string;
    /**
     * Variable name
     */
    readonly interfaceNameVariable: string;
    /**
     * IP Directed-Broadcast
     */
    readonly ipDirectedBroadcast: boolean;
    /**
     * Variable name
     */
    readonly ipDirectedBroadcastVariable: string;
    /**
     * IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * Iperf server for auto bandwidth detect
     */
    readonly iperfServer: string;
    /**
     * Variable name
     */
    readonly iperfServerVariable: string;
    /**
     * Variable name
     */
    readonly ipv4DhcpHelperVariable: string;
    /**
     * List of DHCP IPv4 helper addresses
     */
    readonly ipv4DhcpHelpers: string[];
    /**
     * Assign secondary IP addresses
     */
    readonly ipv4SecondaryAddresses: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress[];
    /**
     * Enable VRRP
     */
    readonly ipv4Vrrps: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp[];
    /**
     * Apply IPv6 access list
     */
    readonly ipv6AccessLists: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList[];
    /**
     * Assign IPv6 address
     */
    readonly ipv6Address: string;
    /**
     * Variable name
     */
    readonly ipv6AddressVariable: string;
    /**
     * DHCPv6 Helper
     */
    readonly ipv6DhcpHelpers: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper[];
    /**
     * NAT64 on this interface
     */
    readonly ipv6Nat: boolean;
    /**
     * Variable name
     */
    readonly ipv6NatVariable: string;
    /**
     * Assign secondary IPv6 addresses
     */
    readonly ipv6SecondaryAddresses: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress[];
    /**
     * Enable VRRP
     */
    readonly ipv6Vrrps: outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp[];
    /**
     * Interval for interface load calculation
     */
    readonly loadInterval: number;
    /**
     * Variable name
     */
    readonly loadIntervalVariable: string;
    /**
     * Set MAC-layer address
     */
    readonly macAddress: string;
    /**
     * Variable name
     */
    readonly macAddressVariable: string;
    /**
     * Media type
     */
    readonly mediaType: string;
    /**
     * Variable name
     */
    readonly mediaTypeVariable: string;
    /**
     * The name of the feature template
     */
    readonly name: string;
    /**
     * Network Address Translation on this interface
     */
    readonly nat: boolean;
    /**
     * NAT64 on this interface
     */
    readonly nat64Interface: boolean;
    /**
     * NAT66 on this interface
     */
    readonly nat66Interface: boolean;
    /**
     * Configure NAT Inside Loopback Interface
     */
    readonly natInsideSourceLoopbackInterface: string;
    /**
     * Variable name
     */
    readonly natInsideSourceLoopbackInterfaceVariable: string;
    /**
     * Enable port translation(PAT)
     */
    readonly natOverload: boolean;
    /**
     * Variable name
     */
    readonly natOverloadVariable: string;
    /**
     * Ending IP address of NAT Pool Prefix Length
     */
    readonly natPoolPrefixLength: number;
    /**
     * Variable name
     */
    readonly natPoolPrefixLengthVariable: string;
    /**
     * Ending IP address of NAT pool range
     */
    readonly natPoolRangeEnd: string;
    /**
     * Variable name
     */
    readonly natPoolRangeEndVariable: string;
    /**
     * Starting IP address of NAT pool range
     */
    readonly natPoolRangeStart: string;
    /**
     * Variable name
     */
    readonly natPoolRangeStartVariable: string;
    /**
     * NAT type
     */
    readonly natType: string;
    /**
     * Variable name
     */
    readonly natTypeVariable: string;
    /**
     * Configure interface as Power-over-Ethernet source
     */
    readonly poe: boolean;
    /**
     * Variable name
     */
    readonly poeVariable: string;
    /**
     * Enable/Disable CTS SGT propagation on an interface.
     */
    readonly propagateSgt: boolean;
    /**
     * Adaptive QoS default downstream bandwidth
     */
    readonly qosAdaptiveBandwidthDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveBandwidthDownstreamVariable: string;
    /**
     * Adaptive QoS default upstream bandwidth
     */
    readonly qosAdaptiveBandwidthUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveBandwidthUpstreamVariable: string;
    /**
     * Downstream max bandwidth limit
     */
    readonly qosAdaptiveMaxDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMaxDownstreamVariable: string;
    /**
     * Upstream max bandwidth limit
     */
    readonly qosAdaptiveMaxUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMaxUpstreamVariable: string;
    /**
     * Downstream min bandwidth limit
     */
    readonly qosAdaptiveMinDownstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMinDownstreamVariable: string;
    /**
     * Upstream min bandwidth limit
     */
    readonly qosAdaptiveMinUpstream: number;
    /**
     * Variable name
     */
    readonly qosAdaptiveMinUpstreamVariable: string;
    /**
     * Periodic timer for adaptive QoS in minutes
     */
    readonly qosAdaptivePeriod: number;
    /**
     * Variable name
     */
    readonly qosAdaptivePeriodVariable: string;
    /**
     * Name of QoS map
     */
    readonly qosMap: string;
    /**
     * Variable name
     */
    readonly qosMapVariable: string;
    /**
     * Name of VPN QoS map
     */
    readonly qosMapVpn: string;
    /**
     * Variable name
     */
    readonly qosMapVpnVariable: string;
    /**
     * Name of rewrite rule
     */
    readonly rewriteRuleName: string;
    /**
     * Variable name
     */
    readonly rewriteRuleNameVariable: string;
    /**
     * Enable secondary region
     */
    readonly secondaryRegion: string;
    /**
     * Variable name
     */
    readonly secondaryRegionVariable: string;
    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     */
    readonly sgtEnforcement: boolean;
    /**
     * SGT value between 2 and 65519.
     */
    readonly sgtEnforcementSgt: number;
    /**
     * Variable name
     */
    readonly sgtEnforcementSgtVariable: string;
    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     */
    readonly shapingRate: number;
    /**
     * Variable name
     */
    readonly shapingRateVariable: string;
    /**
     * Administrative state
     */
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * Set interface speed
     */
    readonly speed: string;
    /**
     * Variable name
     */
    readonly speedVariable: string;
    /**
     * Configure static ARP entries
     */
    readonly staticArps: outputs.GetCiscoVpnInterfaceFeatureTemplateStaticArp[];
    /**
     * static NAT
     */
    readonly staticNat66Entries: outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry[];
    /**
     * Configure static NAT entries
     */
    readonly staticNatEntries: outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry[];
    /**
     * Configure Port Forward entries
     */
    readonly staticPortForwardEntries: outputs.GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry[];
    /**
     * SGT value between 2 and 65519.
     */
    readonly staticSgt: number;
    /**
     * Indicates that the interface is trustworthy for CTS.
     */
    readonly staticSgtTrusted: boolean;
    /**
     * Variable name
     */
    readonly staticSgtVariable: string;
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMssAdjust: number;
    /**
     * Variable name
     */
    readonly tcpMssAdjustVariable: string;
    /**
     * Set NAT TCP session timeout, in minutes
     */
    readonly tcpTimeout: number;
    /**
     * Variable name
     */
    readonly tcpTimeoutVariable: string;
    /**
     * The template type
     */
    readonly templateType: string;
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     */
    readonly tlocExtension: string;
    /**
     * Variable name
     */
    readonly tlocExtensionVariable: string;
    /**
     * Variable name
     */
    readonly trackerVariable: string;
    /**
     * Enable tracker for this interface
     */
    readonly trackers: string[];
    /**
     * Tunnels Bandwidth Percent
     */
    readonly tunnelBandwidth: number;
    /**
     * Variable name
     */
    readonly tunnelBandwidthVariable: string;
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     */
    readonly tunnelInterfaceAllowAll: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowAllVariable: string;
    /**
     * Allow/deny BGP
     */
    readonly tunnelInterfaceAllowBgp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowBgpVariable: string;
    /**
     * Allow/Deny DHCP
     */
    readonly tunnelInterfaceAllowDhcp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowDhcpVariable: string;
    /**
     * Allow/Deny DNS
     */
    readonly tunnelInterfaceAllowDns: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowDnsVariable: string;
    /**
     * Allow/Deny Https
     */
    readonly tunnelInterfaceAllowHttps: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowHttpsVariable: string;
    /**
     * Allow/Deny ICMP
     */
    readonly tunnelInterfaceAllowIcmp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowIcmpVariable: string;
    /**
     * Allow/Deny NETCONF
     */
    readonly tunnelInterfaceAllowNetconf: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowNetconfVariable: string;
    /**
     * Allow/Deny NTP
     */
    readonly tunnelInterfaceAllowNtp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowNtpVariable: string;
    /**
     * Allow/Deny OSPF
     */
    readonly tunnelInterfaceAllowOspf: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowOspfVariable: string;
    /**
     * Allow/Deny SNMP
     */
    readonly tunnelInterfaceAllowSnmp: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowSnmpVariable: string;
    /**
     * Allow/Deny SSH
     */
    readonly tunnelInterfaceAllowSsh: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowSshVariable: string;
    /**
     * Allow/Deny STUN
     */
    readonly tunnelInterfaceAllowStun: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceAllowStunVariable: string;
    /**
     * Bind loopback tunnel interface to a physical interface
     */
    readonly tunnelInterfaceBindLoopbackTunnel: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceBindLoopbackTunnelVariable: string;
    /**
     * Set TLOC as border TLOC
     */
    readonly tunnelInterfaceBorder: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceBorderVariable: string;
    /**
     * Set carrier for TLOC
     */
    readonly tunnelInterfaceCarrier: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceCarrierVariable: string;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     */
    readonly tunnelInterfaceClearDontFragment: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceClearDontFragmentVariable: string;
    /**
     * Set color for TLOC
     */
    readonly tunnelInterfaceColor: string;
    /**
     * Restrict this TLOC behavior
     */
    readonly tunnelInterfaceColorRestrict: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceColorRestrictVariable: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceColorVariable: string;
    /**
     * Allow Control Connection
     */
    readonly tunnelInterfaceControlConnections: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceControlConnectionsVariable: string;
    /**
     * Encapsulation for TLOC
     */
    readonly tunnelInterfaceEncapsulations: outputs.GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation[];
    /**
     * Variable name
     */
    readonly tunnelInterfaceExcludeControllerGroupListVariable: string;
    /**
     * Exclude the following controller groups defined in this list
     */
    readonly tunnelInterfaceExcludeControllerGroupLists: number[];
    /**
     * Extend the TLOC to a remote node over GRE tunnel
     */
    readonly tunnelInterfaceGreTunnelDestinationIp: string;
    /**
     * Variable name
     */
    readonly tunnelInterfaceGreTunnelDestinationIpVariable: string;
    /**
     * List of groups
     */
    readonly tunnelInterfaceGroups: number[];
    /**
     * Variable name
     */
    readonly tunnelInterfaceGroupsVariable: string;
    /**
     * Set time period of control hello packets \n\n milli seconds
     */
    readonly tunnelInterfaceHelloInterval: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceHelloIntervalVariable: string;
    /**
     * Set tolerance of control hello packets \n\n seconds
     */
    readonly tunnelInterfaceHelloTolerance: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceHelloToleranceVariable: string;
    /**
     * Set TLOC as last resort
     */
    readonly tunnelInterfaceLastResortCircuit: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceLastResortCircuitVariable: string;
    /**
     * Set the interface as a low-bandwidth circuit
     */
    readonly tunnelInterfaceLowBandwidthLink: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceLowBandwidthLinkVariable: string;
    /**
     * Set the maximum number of control connections for this TLOC
     */
    readonly tunnelInterfaceMaxControlConnections: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceMaxControlConnectionsVariable: string;
    /**
     * Set time period of nat refresh packets \n\n seconds
     */
    readonly tunnelInterfaceNatRefreshInterval: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceNatRefreshIntervalVariable: string;
    /**
     * Accept and respond to network-prefix-directed broadcasts)
     */
    readonly tunnelInterfaceNetworkBroadcast: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceNetworkBroadcastVariable: string;
    /**
     * Disallow port hopping on the tunnel interface
     */
    readonly tunnelInterfacePortHop: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfacePortHopVariable: string;
    /**
     * CTS SGT Propagation configuration
     */
    readonly tunnelInterfacePropagateSgt: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfacePropagateSgtVariable: string;
    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     */
    readonly tunnelInterfaceTunnelTcpMss: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceTunnelTcpMssVariable: string;
    /**
     * Put this wan interface in STUN mode only
     */
    readonly tunnelInterfaceVbondAsStunServer: boolean;
    /**
     * Variable name
     */
    readonly tunnelInterfaceVbondAsStunServerVariable: string;
    /**
     * Set interface preference for control connection to vManage \n\n
     */
    readonly tunnelInterfaceVmanageConnectionPreference: number;
    /**
     * Variable name
     */
    readonly tunnelInterfaceVmanageConnectionPreferenceVariable: string;
    /**
     * Set tunnel QoS mode
     */
    readonly tunnelQosMode: string;
    /**
     * Variable name
     */
    readonly tunnelQosModeVariable: string;
    /**
     * Set NAT UDP session timeout, in minutes
     */
    readonly udpTimeout: number;
    /**
     * Variable name
     */
    readonly udpTimeoutVariable: string;
    /**
     * The version of the feature template
     */
    readonly version: number;
}
/**
 * This data source can read the Cisco VPN Interface feature template.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getCiscoVpnInterfaceFeatureTemplate({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 * });
 * ```
 */
export function getCiscoVpnInterfaceFeatureTemplateOutput(args?: GetCiscoVpnInterfaceFeatureTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCiscoVpnInterfaceFeatureTemplateResult> {
    return pulumi.output(args).apply((a: any) => getCiscoVpnInterfaceFeatureTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getCiscoVpnInterfaceFeatureTemplate.
 */
export interface GetCiscoVpnInterfaceFeatureTemplateOutputArgs {
    /**
     * The id of the feature template
     */
    id?: pulumi.Input<string>;
    /**
     * The name of the feature template
     */
    name?: pulumi.Input<string>;
}
