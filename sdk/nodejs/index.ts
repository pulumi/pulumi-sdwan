// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActivateCentralizedPolicyArgs, ActivateCentralizedPolicyState } from "./activateCentralizedPolicy";
export type ActivateCentralizedPolicy = import("./activateCentralizedPolicy").ActivateCentralizedPolicy;
export const ActivateCentralizedPolicy: typeof import("./activateCentralizedPolicy").ActivateCentralizedPolicy = null as any;
utilities.lazyLoad(exports, ["ActivateCentralizedPolicy"], () => require("./activateCentralizedPolicy"));

export { AdvancedInspectionProfilePolicyDefinitionArgs, AdvancedInspectionProfilePolicyDefinitionState } from "./advancedInspectionProfilePolicyDefinition";
export type AdvancedInspectionProfilePolicyDefinition = import("./advancedInspectionProfilePolicyDefinition").AdvancedInspectionProfilePolicyDefinition;
export const AdvancedInspectionProfilePolicyDefinition: typeof import("./advancedInspectionProfilePolicyDefinition").AdvancedInspectionProfilePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["AdvancedInspectionProfilePolicyDefinition"], () => require("./advancedInspectionProfilePolicyDefinition"));

export { AdvancedMalwareProtectionPolicyDefinitionArgs, AdvancedMalwareProtectionPolicyDefinitionState } from "./advancedMalwareProtectionPolicyDefinition";
export type AdvancedMalwareProtectionPolicyDefinition = import("./advancedMalwareProtectionPolicyDefinition").AdvancedMalwareProtectionPolicyDefinition;
export const AdvancedMalwareProtectionPolicyDefinition: typeof import("./advancedMalwareProtectionPolicyDefinition").AdvancedMalwareProtectionPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["AdvancedMalwareProtectionPolicyDefinition"], () => require("./advancedMalwareProtectionPolicyDefinition"));

export { AllowUrlListPolicyObjectArgs, AllowUrlListPolicyObjectState } from "./allowUrlListPolicyObject";
export type AllowUrlListPolicyObject = import("./allowUrlListPolicyObject").AllowUrlListPolicyObject;
export const AllowUrlListPolicyObject: typeof import("./allowUrlListPolicyObject").AllowUrlListPolicyObject = null as any;
utilities.lazyLoad(exports, ["AllowUrlListPolicyObject"], () => require("./allowUrlListPolicyObject"));

export { AppProbeClassPolicyObjectArgs, AppProbeClassPolicyObjectState } from "./appProbeClassPolicyObject";
export type AppProbeClassPolicyObject = import("./appProbeClassPolicyObject").AppProbeClassPolicyObject;
export const AppProbeClassPolicyObject: typeof import("./appProbeClassPolicyObject").AppProbeClassPolicyObject = null as any;
utilities.lazyLoad(exports, ["AppProbeClassPolicyObject"], () => require("./appProbeClassPolicyObject"));

export { ApplicationAwareRoutingPolicyDefinitionArgs, ApplicationAwareRoutingPolicyDefinitionState } from "./applicationAwareRoutingPolicyDefinition";
export type ApplicationAwareRoutingPolicyDefinition = import("./applicationAwareRoutingPolicyDefinition").ApplicationAwareRoutingPolicyDefinition;
export const ApplicationAwareRoutingPolicyDefinition: typeof import("./applicationAwareRoutingPolicyDefinition").ApplicationAwareRoutingPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["ApplicationAwareRoutingPolicyDefinition"], () => require("./applicationAwareRoutingPolicyDefinition"));

export { ApplicationListPolicyObjectArgs, ApplicationListPolicyObjectState } from "./applicationListPolicyObject";
export type ApplicationListPolicyObject = import("./applicationListPolicyObject").ApplicationListPolicyObject;
export const ApplicationListPolicyObject: typeof import("./applicationListPolicyObject").ApplicationListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ApplicationListPolicyObject"], () => require("./applicationListPolicyObject"));

export { ApplicationPriorityFeatureProfileArgs, ApplicationPriorityFeatureProfileState } from "./applicationPriorityFeatureProfile";
export type ApplicationPriorityFeatureProfile = import("./applicationPriorityFeatureProfile").ApplicationPriorityFeatureProfile;
export const ApplicationPriorityFeatureProfile: typeof import("./applicationPriorityFeatureProfile").ApplicationPriorityFeatureProfile = null as any;
utilities.lazyLoad(exports, ["ApplicationPriorityFeatureProfile"], () => require("./applicationPriorityFeatureProfile"));

export { ApplicationPriorityQosPolicyArgs, ApplicationPriorityQosPolicyState } from "./applicationPriorityQosPolicy";
export type ApplicationPriorityQosPolicy = import("./applicationPriorityQosPolicy").ApplicationPriorityQosPolicy;
export const ApplicationPriorityQosPolicy: typeof import("./applicationPriorityQosPolicy").ApplicationPriorityQosPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationPriorityQosPolicy"], () => require("./applicationPriorityQosPolicy"));

export { ApplicationPriorityTrafficPolicyPolicyArgs, ApplicationPriorityTrafficPolicyPolicyState } from "./applicationPriorityTrafficPolicyPolicy";
export type ApplicationPriorityTrafficPolicyPolicy = import("./applicationPriorityTrafficPolicyPolicy").ApplicationPriorityTrafficPolicyPolicy;
export const ApplicationPriorityTrafficPolicyPolicy: typeof import("./applicationPriorityTrafficPolicyPolicy").ApplicationPriorityTrafficPolicyPolicy = null as any;
utilities.lazyLoad(exports, ["ApplicationPriorityTrafficPolicyPolicy"], () => require("./applicationPriorityTrafficPolicyPolicy"));

export { AsPathListPolicyObjectArgs, AsPathListPolicyObjectState } from "./asPathListPolicyObject";
export type AsPathListPolicyObject = import("./asPathListPolicyObject").AsPathListPolicyObject;
export const AsPathListPolicyObject: typeof import("./asPathListPolicyObject").AsPathListPolicyObject = null as any;
utilities.lazyLoad(exports, ["AsPathListPolicyObject"], () => require("./asPathListPolicyObject"));

export { AttachFeatureDeviceTemplateArgs, AttachFeatureDeviceTemplateState } from "./attachFeatureDeviceTemplate";
export type AttachFeatureDeviceTemplate = import("./attachFeatureDeviceTemplate").AttachFeatureDeviceTemplate;
export const AttachFeatureDeviceTemplate: typeof import("./attachFeatureDeviceTemplate").AttachFeatureDeviceTemplate = null as any;
utilities.lazyLoad(exports, ["AttachFeatureDeviceTemplate"], () => require("./attachFeatureDeviceTemplate"));

export { BlockUrlListPolicyObjectArgs, BlockUrlListPolicyObjectState } from "./blockUrlListPolicyObject";
export type BlockUrlListPolicyObject = import("./blockUrlListPolicyObject").BlockUrlListPolicyObject;
export const BlockUrlListPolicyObject: typeof import("./blockUrlListPolicyObject").BlockUrlListPolicyObject = null as any;
utilities.lazyLoad(exports, ["BlockUrlListPolicyObject"], () => require("./blockUrlListPolicyObject"));

export { CedgeAaaFeatureTemplateArgs, CedgeAaaFeatureTemplateState } from "./cedgeAaaFeatureTemplate";
export type CedgeAaaFeatureTemplate = import("./cedgeAaaFeatureTemplate").CedgeAaaFeatureTemplate;
export const CedgeAaaFeatureTemplate: typeof import("./cedgeAaaFeatureTemplate").CedgeAaaFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeAaaFeatureTemplate"], () => require("./cedgeAaaFeatureTemplate"));

export { CedgeGlobalFeatureTemplateArgs, CedgeGlobalFeatureTemplateState } from "./cedgeGlobalFeatureTemplate";
export type CedgeGlobalFeatureTemplate = import("./cedgeGlobalFeatureTemplate").CedgeGlobalFeatureTemplate;
export const CedgeGlobalFeatureTemplate: typeof import("./cedgeGlobalFeatureTemplate").CedgeGlobalFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeGlobalFeatureTemplate"], () => require("./cedgeGlobalFeatureTemplate"));

export { CedgeIgmpFeatureTemplateArgs, CedgeIgmpFeatureTemplateState } from "./cedgeIgmpFeatureTemplate";
export type CedgeIgmpFeatureTemplate = import("./cedgeIgmpFeatureTemplate").CedgeIgmpFeatureTemplate;
export const CedgeIgmpFeatureTemplate: typeof import("./cedgeIgmpFeatureTemplate").CedgeIgmpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeIgmpFeatureTemplate"], () => require("./cedgeIgmpFeatureTemplate"));

export { CedgeMulticastFeatureTemplateArgs, CedgeMulticastFeatureTemplateState } from "./cedgeMulticastFeatureTemplate";
export type CedgeMulticastFeatureTemplate = import("./cedgeMulticastFeatureTemplate").CedgeMulticastFeatureTemplate;
export const CedgeMulticastFeatureTemplate: typeof import("./cedgeMulticastFeatureTemplate").CedgeMulticastFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeMulticastFeatureTemplate"], () => require("./cedgeMulticastFeatureTemplate"));

export { CedgePimFeatureTemplateArgs, CedgePimFeatureTemplateState } from "./cedgePimFeatureTemplate";
export type CedgePimFeatureTemplate = import("./cedgePimFeatureTemplate").CedgePimFeatureTemplate;
export const CedgePimFeatureTemplate: typeof import("./cedgePimFeatureTemplate").CedgePimFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgePimFeatureTemplate"], () => require("./cedgePimFeatureTemplate"));

export { CellularCedgeProfileFeatureTemplateArgs, CellularCedgeProfileFeatureTemplateState } from "./cellularCedgeProfileFeatureTemplate";
export type CellularCedgeProfileFeatureTemplate = import("./cellularCedgeProfileFeatureTemplate").CellularCedgeProfileFeatureTemplate;
export const CellularCedgeProfileFeatureTemplate: typeof import("./cellularCedgeProfileFeatureTemplate").CellularCedgeProfileFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CellularCedgeProfileFeatureTemplate"], () => require("./cellularCedgeProfileFeatureTemplate"));

export { CellularControllerFeatureTemplateArgs, CellularControllerFeatureTemplateState } from "./cellularControllerFeatureTemplate";
export type CellularControllerFeatureTemplate = import("./cellularControllerFeatureTemplate").CellularControllerFeatureTemplate;
export const CellularControllerFeatureTemplate: typeof import("./cellularControllerFeatureTemplate").CellularControllerFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CellularControllerFeatureTemplate"], () => require("./cellularControllerFeatureTemplate"));

export { CellularProfileFeatureTemplateArgs, CellularProfileFeatureTemplateState } from "./cellularProfileFeatureTemplate";
export type CellularProfileFeatureTemplate = import("./cellularProfileFeatureTemplate").CellularProfileFeatureTemplate;
export const CellularProfileFeatureTemplate: typeof import("./cellularProfileFeatureTemplate").CellularProfileFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CellularProfileFeatureTemplate"], () => require("./cellularProfileFeatureTemplate"));

export { CentralizedPolicyArgs, CentralizedPolicyState } from "./centralizedPolicy";
export type CentralizedPolicy = import("./centralizedPolicy").CentralizedPolicy;
export const CentralizedPolicy: typeof import("./centralizedPolicy").CentralizedPolicy = null as any;
utilities.lazyLoad(exports, ["CentralizedPolicy"], () => require("./centralizedPolicy"));

export { CflowdPolicyDefinitionArgs, CflowdPolicyDefinitionState } from "./cflowdPolicyDefinition";
export type CflowdPolicyDefinition = import("./cflowdPolicyDefinition").CflowdPolicyDefinition;
export const CflowdPolicyDefinition: typeof import("./cflowdPolicyDefinition").CflowdPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["CflowdPolicyDefinition"], () => require("./cflowdPolicyDefinition"));

export { CiscoBannerFeatureTemplateArgs, CiscoBannerFeatureTemplateState } from "./ciscoBannerFeatureTemplate";
export type CiscoBannerFeatureTemplate = import("./ciscoBannerFeatureTemplate").CiscoBannerFeatureTemplate;
export const CiscoBannerFeatureTemplate: typeof import("./ciscoBannerFeatureTemplate").CiscoBannerFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoBannerFeatureTemplate"], () => require("./ciscoBannerFeatureTemplate"));

export { CiscoBfdFeatureTemplateArgs, CiscoBfdFeatureTemplateState } from "./ciscoBfdFeatureTemplate";
export type CiscoBfdFeatureTemplate = import("./ciscoBfdFeatureTemplate").CiscoBfdFeatureTemplate;
export const CiscoBfdFeatureTemplate: typeof import("./ciscoBfdFeatureTemplate").CiscoBfdFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoBfdFeatureTemplate"], () => require("./ciscoBfdFeatureTemplate"));

export { CiscoBgpFeatureTemplateArgs, CiscoBgpFeatureTemplateState } from "./ciscoBgpFeatureTemplate";
export type CiscoBgpFeatureTemplate = import("./ciscoBgpFeatureTemplate").CiscoBgpFeatureTemplate;
export const CiscoBgpFeatureTemplate: typeof import("./ciscoBgpFeatureTemplate").CiscoBgpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoBgpFeatureTemplate"], () => require("./ciscoBgpFeatureTemplate"));

export { CiscoDhcpServerFeatureTemplateArgs, CiscoDhcpServerFeatureTemplateState } from "./ciscoDhcpServerFeatureTemplate";
export type CiscoDhcpServerFeatureTemplate = import("./ciscoDhcpServerFeatureTemplate").CiscoDhcpServerFeatureTemplate;
export const CiscoDhcpServerFeatureTemplate: typeof import("./ciscoDhcpServerFeatureTemplate").CiscoDhcpServerFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoDhcpServerFeatureTemplate"], () => require("./ciscoDhcpServerFeatureTemplate"));

export { CiscoLoggingFeatureTemplateArgs, CiscoLoggingFeatureTemplateState } from "./ciscoLoggingFeatureTemplate";
export type CiscoLoggingFeatureTemplate = import("./ciscoLoggingFeatureTemplate").CiscoLoggingFeatureTemplate;
export const CiscoLoggingFeatureTemplate: typeof import("./ciscoLoggingFeatureTemplate").CiscoLoggingFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoLoggingFeatureTemplate"], () => require("./ciscoLoggingFeatureTemplate"));

export { CiscoNtpFeatureTemplateArgs, CiscoNtpFeatureTemplateState } from "./ciscoNtpFeatureTemplate";
export type CiscoNtpFeatureTemplate = import("./ciscoNtpFeatureTemplate").CiscoNtpFeatureTemplate;
export const CiscoNtpFeatureTemplate: typeof import("./ciscoNtpFeatureTemplate").CiscoNtpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoNtpFeatureTemplate"], () => require("./ciscoNtpFeatureTemplate"));

export { CiscoOmpFeatureTemplateArgs, CiscoOmpFeatureTemplateState } from "./ciscoOmpFeatureTemplate";
export type CiscoOmpFeatureTemplate = import("./ciscoOmpFeatureTemplate").CiscoOmpFeatureTemplate;
export const CiscoOmpFeatureTemplate: typeof import("./ciscoOmpFeatureTemplate").CiscoOmpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoOmpFeatureTemplate"], () => require("./ciscoOmpFeatureTemplate"));

export { CiscoOspfFeatureTemplateArgs, CiscoOspfFeatureTemplateState } from "./ciscoOspfFeatureTemplate";
export type CiscoOspfFeatureTemplate = import("./ciscoOspfFeatureTemplate").CiscoOspfFeatureTemplate;
export const CiscoOspfFeatureTemplate: typeof import("./ciscoOspfFeatureTemplate").CiscoOspfFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoOspfFeatureTemplate"], () => require("./ciscoOspfFeatureTemplate"));

export { CiscoOspfv3FeatureTemplateArgs, CiscoOspfv3FeatureTemplateState } from "./ciscoOspfv3FeatureTemplate";
export type CiscoOspfv3FeatureTemplate = import("./ciscoOspfv3FeatureTemplate").CiscoOspfv3FeatureTemplate;
export const CiscoOspfv3FeatureTemplate: typeof import("./ciscoOspfv3FeatureTemplate").CiscoOspfv3FeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoOspfv3FeatureTemplate"], () => require("./ciscoOspfv3FeatureTemplate"));

export { CiscoSecureInternetGatewayFeatureTemplateArgs, CiscoSecureInternetGatewayFeatureTemplateState } from "./ciscoSecureInternetGatewayFeatureTemplate";
export type CiscoSecureInternetGatewayFeatureTemplate = import("./ciscoSecureInternetGatewayFeatureTemplate").CiscoSecureInternetGatewayFeatureTemplate;
export const CiscoSecureInternetGatewayFeatureTemplate: typeof import("./ciscoSecureInternetGatewayFeatureTemplate").CiscoSecureInternetGatewayFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSecureInternetGatewayFeatureTemplate"], () => require("./ciscoSecureInternetGatewayFeatureTemplate"));

export { CiscoSecurityFeatureTemplateArgs, CiscoSecurityFeatureTemplateState } from "./ciscoSecurityFeatureTemplate";
export type CiscoSecurityFeatureTemplate = import("./ciscoSecurityFeatureTemplate").CiscoSecurityFeatureTemplate;
export const CiscoSecurityFeatureTemplate: typeof import("./ciscoSecurityFeatureTemplate").CiscoSecurityFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSecurityFeatureTemplate"], () => require("./ciscoSecurityFeatureTemplate"));

export { CiscoSigCredentialsFeatureTemplateArgs, CiscoSigCredentialsFeatureTemplateState } from "./ciscoSigCredentialsFeatureTemplate";
export type CiscoSigCredentialsFeatureTemplate = import("./ciscoSigCredentialsFeatureTemplate").CiscoSigCredentialsFeatureTemplate;
export const CiscoSigCredentialsFeatureTemplate: typeof import("./ciscoSigCredentialsFeatureTemplate").CiscoSigCredentialsFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSigCredentialsFeatureTemplate"], () => require("./ciscoSigCredentialsFeatureTemplate"));

export { CiscoSnmpFeatureTemplateArgs, CiscoSnmpFeatureTemplateState } from "./ciscoSnmpFeatureTemplate";
export type CiscoSnmpFeatureTemplate = import("./ciscoSnmpFeatureTemplate").CiscoSnmpFeatureTemplate;
export const CiscoSnmpFeatureTemplate: typeof import("./ciscoSnmpFeatureTemplate").CiscoSnmpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSnmpFeatureTemplate"], () => require("./ciscoSnmpFeatureTemplate"));

export { CiscoSystemFeatureTemplateArgs, CiscoSystemFeatureTemplateState } from "./ciscoSystemFeatureTemplate";
export type CiscoSystemFeatureTemplate = import("./ciscoSystemFeatureTemplate").CiscoSystemFeatureTemplate;
export const CiscoSystemFeatureTemplate: typeof import("./ciscoSystemFeatureTemplate").CiscoSystemFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSystemFeatureTemplate"], () => require("./ciscoSystemFeatureTemplate"));

export { CiscoThousandeyesFeatureTemplateArgs, CiscoThousandeyesFeatureTemplateState } from "./ciscoThousandeyesFeatureTemplate";
export type CiscoThousandeyesFeatureTemplate = import("./ciscoThousandeyesFeatureTemplate").CiscoThousandeyesFeatureTemplate;
export const CiscoThousandeyesFeatureTemplate: typeof import("./ciscoThousandeyesFeatureTemplate").CiscoThousandeyesFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoThousandeyesFeatureTemplate"], () => require("./ciscoThousandeyesFeatureTemplate"));

export { CiscoTrustsecFeatureTemplateArgs, CiscoTrustsecFeatureTemplateState } from "./ciscoTrustsecFeatureTemplate";
export type CiscoTrustsecFeatureTemplate = import("./ciscoTrustsecFeatureTemplate").CiscoTrustsecFeatureTemplate;
export const CiscoTrustsecFeatureTemplate: typeof import("./ciscoTrustsecFeatureTemplate").CiscoTrustsecFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoTrustsecFeatureTemplate"], () => require("./ciscoTrustsecFeatureTemplate"));

export { CiscoVpnFeatureTemplateArgs, CiscoVpnFeatureTemplateState } from "./ciscoVpnFeatureTemplate";
export type CiscoVpnFeatureTemplate = import("./ciscoVpnFeatureTemplate").CiscoVpnFeatureTemplate;
export const CiscoVpnFeatureTemplate: typeof import("./ciscoVpnFeatureTemplate").CiscoVpnFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnFeatureTemplate"], () => require("./ciscoVpnFeatureTemplate"));

export { CiscoVpnInterfaceFeatureTemplateArgs, CiscoVpnInterfaceFeatureTemplateState } from "./ciscoVpnInterfaceFeatureTemplate";
export type CiscoVpnInterfaceFeatureTemplate = import("./ciscoVpnInterfaceFeatureTemplate").CiscoVpnInterfaceFeatureTemplate;
export const CiscoVpnInterfaceFeatureTemplate: typeof import("./ciscoVpnInterfaceFeatureTemplate").CiscoVpnInterfaceFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnInterfaceFeatureTemplate"], () => require("./ciscoVpnInterfaceFeatureTemplate"));

export { CiscoVpnInterfaceGreFeatureTemplateArgs, CiscoVpnInterfaceGreFeatureTemplateState } from "./ciscoVpnInterfaceGreFeatureTemplate";
export type CiscoVpnInterfaceGreFeatureTemplate = import("./ciscoVpnInterfaceGreFeatureTemplate").CiscoVpnInterfaceGreFeatureTemplate;
export const CiscoVpnInterfaceGreFeatureTemplate: typeof import("./ciscoVpnInterfaceGreFeatureTemplate").CiscoVpnInterfaceGreFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnInterfaceGreFeatureTemplate"], () => require("./ciscoVpnInterfaceGreFeatureTemplate"));

export { CiscoVpnInterfaceIpsecFeatureTemplateArgs, CiscoVpnInterfaceIpsecFeatureTemplateState } from "./ciscoVpnInterfaceIpsecFeatureTemplate";
export type CiscoVpnInterfaceIpsecFeatureTemplate = import("./ciscoVpnInterfaceIpsecFeatureTemplate").CiscoVpnInterfaceIpsecFeatureTemplate;
export const CiscoVpnInterfaceIpsecFeatureTemplate: typeof import("./ciscoVpnInterfaceIpsecFeatureTemplate").CiscoVpnInterfaceIpsecFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnInterfaceIpsecFeatureTemplate"], () => require("./ciscoVpnInterfaceIpsecFeatureTemplate"));

export { CiscoWirelessLanFeatureTemplateArgs, CiscoWirelessLanFeatureTemplateState } from "./ciscoWirelessLanFeatureTemplate";
export type CiscoWirelessLanFeatureTemplate = import("./ciscoWirelessLanFeatureTemplate").CiscoWirelessLanFeatureTemplate;
export const CiscoWirelessLanFeatureTemplate: typeof import("./ciscoWirelessLanFeatureTemplate").CiscoWirelessLanFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoWirelessLanFeatureTemplate"], () => require("./ciscoWirelessLanFeatureTemplate"));

export { ClassMapPolicyObjectArgs, ClassMapPolicyObjectState } from "./classMapPolicyObject";
export type ClassMapPolicyObject = import("./classMapPolicyObject").ClassMapPolicyObject;
export const ClassMapPolicyObject: typeof import("./classMapPolicyObject").ClassMapPolicyObject = null as any;
utilities.lazyLoad(exports, ["ClassMapPolicyObject"], () => require("./classMapPolicyObject"));

export { CliConfigFeatureArgs, CliConfigFeatureState } from "./cliConfigFeature";
export type CliConfigFeature = import("./cliConfigFeature").CliConfigFeature;
export const CliConfigFeature: typeof import("./cliConfigFeature").CliConfigFeature = null as any;
utilities.lazyLoad(exports, ["CliConfigFeature"], () => require("./cliConfigFeature"));

export { CliDeviceTemplateArgs, CliDeviceTemplateState } from "./cliDeviceTemplate";
export type CliDeviceTemplate = import("./cliDeviceTemplate").CliDeviceTemplate;
export const CliDeviceTemplate: typeof import("./cliDeviceTemplate").CliDeviceTemplate = null as any;
utilities.lazyLoad(exports, ["CliDeviceTemplate"], () => require("./cliDeviceTemplate"));

export { CliFeatureProfileArgs, CliFeatureProfileState } from "./cliFeatureProfile";
export type CliFeatureProfile = import("./cliFeatureProfile").CliFeatureProfile;
export const CliFeatureProfile: typeof import("./cliFeatureProfile").CliFeatureProfile = null as any;
utilities.lazyLoad(exports, ["CliFeatureProfile"], () => require("./cliFeatureProfile"));

export { CliTemplateFeatureTemplateArgs, CliTemplateFeatureTemplateState } from "./cliTemplateFeatureTemplate";
export type CliTemplateFeatureTemplate = import("./cliTemplateFeatureTemplate").CliTemplateFeatureTemplate;
export const CliTemplateFeatureTemplate: typeof import("./cliTemplateFeatureTemplate").CliTemplateFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CliTemplateFeatureTemplate"], () => require("./cliTemplateFeatureTemplate"));

export { ColorListPolicyObjectArgs, ColorListPolicyObjectState } from "./colorListPolicyObject";
export type ColorListPolicyObject = import("./colorListPolicyObject").ColorListPolicyObject;
export const ColorListPolicyObject: typeof import("./colorListPolicyObject").ColorListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ColorListPolicyObject"], () => require("./colorListPolicyObject"));

export { ConfigurationGroupArgs, ConfigurationGroupState } from "./configurationGroup";
export type ConfigurationGroup = import("./configurationGroup").ConfigurationGroup;
export const ConfigurationGroup: typeof import("./configurationGroup").ConfigurationGroup = null as any;
utilities.lazyLoad(exports, ["ConfigurationGroup"], () => require("./configurationGroup"));

export { CustomControlTopologyPolicyDefinitionArgs, CustomControlTopologyPolicyDefinitionState } from "./customControlTopologyPolicyDefinition";
export type CustomControlTopologyPolicyDefinition = import("./customControlTopologyPolicyDefinition").CustomControlTopologyPolicyDefinition;
export const CustomControlTopologyPolicyDefinition: typeof import("./customControlTopologyPolicyDefinition").CustomControlTopologyPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["CustomControlTopologyPolicyDefinition"], () => require("./customControlTopologyPolicyDefinition"));

export { DataFqdnPrefixListPolicyObjectArgs, DataFqdnPrefixListPolicyObjectState } from "./dataFqdnPrefixListPolicyObject";
export type DataFqdnPrefixListPolicyObject = import("./dataFqdnPrefixListPolicyObject").DataFqdnPrefixListPolicyObject;
export const DataFqdnPrefixListPolicyObject: typeof import("./dataFqdnPrefixListPolicyObject").DataFqdnPrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DataFqdnPrefixListPolicyObject"], () => require("./dataFqdnPrefixListPolicyObject"));

export { DataIpv4PrefixListPolicyObjectArgs, DataIpv4PrefixListPolicyObjectState } from "./dataIpv4PrefixListPolicyObject";
export type DataIpv4PrefixListPolicyObject = import("./dataIpv4PrefixListPolicyObject").DataIpv4PrefixListPolicyObject;
export const DataIpv4PrefixListPolicyObject: typeof import("./dataIpv4PrefixListPolicyObject").DataIpv4PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DataIpv4PrefixListPolicyObject"], () => require("./dataIpv4PrefixListPolicyObject"));

export { DataIpv6PrefixListPolicyObjectArgs, DataIpv6PrefixListPolicyObjectState } from "./dataIpv6PrefixListPolicyObject";
export type DataIpv6PrefixListPolicyObject = import("./dataIpv6PrefixListPolicyObject").DataIpv6PrefixListPolicyObject;
export const DataIpv6PrefixListPolicyObject: typeof import("./dataIpv6PrefixListPolicyObject").DataIpv6PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DataIpv6PrefixListPolicyObject"], () => require("./dataIpv6PrefixListPolicyObject"));

export { DnsSecurityFeatureProfileArgs, DnsSecurityFeatureProfileState } from "./dnsSecurityFeatureProfile";
export type DnsSecurityFeatureProfile = import("./dnsSecurityFeatureProfile").DnsSecurityFeatureProfile;
export const DnsSecurityFeatureProfile: typeof import("./dnsSecurityFeatureProfile").DnsSecurityFeatureProfile = null as any;
utilities.lazyLoad(exports, ["DnsSecurityFeatureProfile"], () => require("./dnsSecurityFeatureProfile"));

export { DnsSecurityPolicyDefinitionArgs, DnsSecurityPolicyDefinitionState } from "./dnsSecurityPolicyDefinition";
export type DnsSecurityPolicyDefinition = import("./dnsSecurityPolicyDefinition").DnsSecurityPolicyDefinition;
export const DnsSecurityPolicyDefinition: typeof import("./dnsSecurityPolicyDefinition").DnsSecurityPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["DnsSecurityPolicyDefinition"], () => require("./dnsSecurityPolicyDefinition"));

export { DomainListPolicyObjectArgs, DomainListPolicyObjectState } from "./domainListPolicyObject";
export type DomainListPolicyObject = import("./domainListPolicyObject").DomainListPolicyObject;
export const DomainListPolicyObject: typeof import("./domainListPolicyObject").DomainListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DomainListPolicyObject"], () => require("./domainListPolicyObject"));

export { EigrpFeatureTemplateArgs, EigrpFeatureTemplateState } from "./eigrpFeatureTemplate";
export type EigrpFeatureTemplate = import("./eigrpFeatureTemplate").EigrpFeatureTemplate;
export const EigrpFeatureTemplate: typeof import("./eigrpFeatureTemplate").EigrpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["EigrpFeatureTemplate"], () => require("./eigrpFeatureTemplate"));

export { EmbeddedSecurityFeatureProfileArgs, EmbeddedSecurityFeatureProfileState } from "./embeddedSecurityFeatureProfile";
export type EmbeddedSecurityFeatureProfile = import("./embeddedSecurityFeatureProfile").EmbeddedSecurityFeatureProfile;
export const EmbeddedSecurityFeatureProfile: typeof import("./embeddedSecurityFeatureProfile").EmbeddedSecurityFeatureProfile = null as any;
utilities.lazyLoad(exports, ["EmbeddedSecurityFeatureProfile"], () => require("./embeddedSecurityFeatureProfile"));

export { ExpandedCommunityListPolicyObjectArgs, ExpandedCommunityListPolicyObjectState } from "./expandedCommunityListPolicyObject";
export type ExpandedCommunityListPolicyObject = import("./expandedCommunityListPolicyObject").ExpandedCommunityListPolicyObject;
export const ExpandedCommunityListPolicyObject: typeof import("./expandedCommunityListPolicyObject").ExpandedCommunityListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ExpandedCommunityListPolicyObject"], () => require("./expandedCommunityListPolicyObject"));

export { ExtendedCommunityListPolicyObjectArgs, ExtendedCommunityListPolicyObjectState } from "./extendedCommunityListPolicyObject";
export type ExtendedCommunityListPolicyObject = import("./extendedCommunityListPolicyObject").ExtendedCommunityListPolicyObject;
export const ExtendedCommunityListPolicyObject: typeof import("./extendedCommunityListPolicyObject").ExtendedCommunityListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ExtendedCommunityListPolicyObject"], () => require("./extendedCommunityListPolicyObject"));

export { FeatureDeviceTemplateArgs, FeatureDeviceTemplateState } from "./featureDeviceTemplate";
export type FeatureDeviceTemplate = import("./featureDeviceTemplate").FeatureDeviceTemplate;
export const FeatureDeviceTemplate: typeof import("./featureDeviceTemplate").FeatureDeviceTemplate = null as any;
utilities.lazyLoad(exports, ["FeatureDeviceTemplate"], () => require("./featureDeviceTemplate"));

export { GeoLocationListPolicyObjectArgs, GeoLocationListPolicyObjectState } from "./geoLocationListPolicyObject";
export type GeoLocationListPolicyObject = import("./geoLocationListPolicyObject").GeoLocationListPolicyObject;
export const GeoLocationListPolicyObject: typeof import("./geoLocationListPolicyObject").GeoLocationListPolicyObject = null as any;
utilities.lazyLoad(exports, ["GeoLocationListPolicyObject"], () => require("./geoLocationListPolicyObject"));

export { GetAdvancedInspectionProfilePolicyDefinitionArgs, GetAdvancedInspectionProfilePolicyDefinitionResult, GetAdvancedInspectionProfilePolicyDefinitionOutputArgs } from "./getAdvancedInspectionProfilePolicyDefinition";
export const getAdvancedInspectionProfilePolicyDefinition: typeof import("./getAdvancedInspectionProfilePolicyDefinition").getAdvancedInspectionProfilePolicyDefinition = null as any;
export const getAdvancedInspectionProfilePolicyDefinitionOutput: typeof import("./getAdvancedInspectionProfilePolicyDefinition").getAdvancedInspectionProfilePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedInspectionProfilePolicyDefinition","getAdvancedInspectionProfilePolicyDefinitionOutput"], () => require("./getAdvancedInspectionProfilePolicyDefinition"));

export { GetAdvancedMalwareProtectionPolicyDefinitionArgs, GetAdvancedMalwareProtectionPolicyDefinitionResult, GetAdvancedMalwareProtectionPolicyDefinitionOutputArgs } from "./getAdvancedMalwareProtectionPolicyDefinition";
export const getAdvancedMalwareProtectionPolicyDefinition: typeof import("./getAdvancedMalwareProtectionPolicyDefinition").getAdvancedMalwareProtectionPolicyDefinition = null as any;
export const getAdvancedMalwareProtectionPolicyDefinitionOutput: typeof import("./getAdvancedMalwareProtectionPolicyDefinition").getAdvancedMalwareProtectionPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedMalwareProtectionPolicyDefinition","getAdvancedMalwareProtectionPolicyDefinitionOutput"], () => require("./getAdvancedMalwareProtectionPolicyDefinition"));

export { GetAllowUrlListPolicyObjectArgs, GetAllowUrlListPolicyObjectResult, GetAllowUrlListPolicyObjectOutputArgs } from "./getAllowUrlListPolicyObject";
export const getAllowUrlListPolicyObject: typeof import("./getAllowUrlListPolicyObject").getAllowUrlListPolicyObject = null as any;
export const getAllowUrlListPolicyObjectOutput: typeof import("./getAllowUrlListPolicyObject").getAllowUrlListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAllowUrlListPolicyObject","getAllowUrlListPolicyObjectOutput"], () => require("./getAllowUrlListPolicyObject"));

export { GetAppProbeClassPolicyObjectArgs, GetAppProbeClassPolicyObjectResult, GetAppProbeClassPolicyObjectOutputArgs } from "./getAppProbeClassPolicyObject";
export const getAppProbeClassPolicyObject: typeof import("./getAppProbeClassPolicyObject").getAppProbeClassPolicyObject = null as any;
export const getAppProbeClassPolicyObjectOutput: typeof import("./getAppProbeClassPolicyObject").getAppProbeClassPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAppProbeClassPolicyObject","getAppProbeClassPolicyObjectOutput"], () => require("./getAppProbeClassPolicyObject"));

export { GetApplicationAwareRoutingPolicyDefinitionArgs, GetApplicationAwareRoutingPolicyDefinitionResult, GetApplicationAwareRoutingPolicyDefinitionOutputArgs } from "./getApplicationAwareRoutingPolicyDefinition";
export const getApplicationAwareRoutingPolicyDefinition: typeof import("./getApplicationAwareRoutingPolicyDefinition").getApplicationAwareRoutingPolicyDefinition = null as any;
export const getApplicationAwareRoutingPolicyDefinitionOutput: typeof import("./getApplicationAwareRoutingPolicyDefinition").getApplicationAwareRoutingPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationAwareRoutingPolicyDefinition","getApplicationAwareRoutingPolicyDefinitionOutput"], () => require("./getApplicationAwareRoutingPolicyDefinition"));

export { GetApplicationListPolicyObjectArgs, GetApplicationListPolicyObjectResult, GetApplicationListPolicyObjectOutputArgs } from "./getApplicationListPolicyObject";
export const getApplicationListPolicyObject: typeof import("./getApplicationListPolicyObject").getApplicationListPolicyObject = null as any;
export const getApplicationListPolicyObjectOutput: typeof import("./getApplicationListPolicyObject").getApplicationListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationListPolicyObject","getApplicationListPolicyObjectOutput"], () => require("./getApplicationListPolicyObject"));

export { GetApplicationPriorityFeatureProfileArgs, GetApplicationPriorityFeatureProfileResult, GetApplicationPriorityFeatureProfileOutputArgs } from "./getApplicationPriorityFeatureProfile";
export const getApplicationPriorityFeatureProfile: typeof import("./getApplicationPriorityFeatureProfile").getApplicationPriorityFeatureProfile = null as any;
export const getApplicationPriorityFeatureProfileOutput: typeof import("./getApplicationPriorityFeatureProfile").getApplicationPriorityFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationPriorityFeatureProfile","getApplicationPriorityFeatureProfileOutput"], () => require("./getApplicationPriorityFeatureProfile"));

export { GetApplicationPriorityQosPolicyArgs, GetApplicationPriorityQosPolicyResult, GetApplicationPriorityQosPolicyOutputArgs } from "./getApplicationPriorityQosPolicy";
export const getApplicationPriorityQosPolicy: typeof import("./getApplicationPriorityQosPolicy").getApplicationPriorityQosPolicy = null as any;
export const getApplicationPriorityQosPolicyOutput: typeof import("./getApplicationPriorityQosPolicy").getApplicationPriorityQosPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationPriorityQosPolicy","getApplicationPriorityQosPolicyOutput"], () => require("./getApplicationPriorityQosPolicy"));

export { GetApplicationPriorityTrafficPolicyPolicyArgs, GetApplicationPriorityTrafficPolicyPolicyResult, GetApplicationPriorityTrafficPolicyPolicyOutputArgs } from "./getApplicationPriorityTrafficPolicyPolicy";
export const getApplicationPriorityTrafficPolicyPolicy: typeof import("./getApplicationPriorityTrafficPolicyPolicy").getApplicationPriorityTrafficPolicyPolicy = null as any;
export const getApplicationPriorityTrafficPolicyPolicyOutput: typeof import("./getApplicationPriorityTrafficPolicyPolicy").getApplicationPriorityTrafficPolicyPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationPriorityTrafficPolicyPolicy","getApplicationPriorityTrafficPolicyPolicyOutput"], () => require("./getApplicationPriorityTrafficPolicyPolicy"));

export { GetAsPathListPolicyObjectArgs, GetAsPathListPolicyObjectResult, GetAsPathListPolicyObjectOutputArgs } from "./getAsPathListPolicyObject";
export const getAsPathListPolicyObject: typeof import("./getAsPathListPolicyObject").getAsPathListPolicyObject = null as any;
export const getAsPathListPolicyObjectOutput: typeof import("./getAsPathListPolicyObject").getAsPathListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAsPathListPolicyObject","getAsPathListPolicyObjectOutput"], () => require("./getAsPathListPolicyObject"));

export { GetBlockUrlListPolicyObjectArgs, GetBlockUrlListPolicyObjectResult, GetBlockUrlListPolicyObjectOutputArgs } from "./getBlockUrlListPolicyObject";
export const getBlockUrlListPolicyObject: typeof import("./getBlockUrlListPolicyObject").getBlockUrlListPolicyObject = null as any;
export const getBlockUrlListPolicyObjectOutput: typeof import("./getBlockUrlListPolicyObject").getBlockUrlListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getBlockUrlListPolicyObject","getBlockUrlListPolicyObjectOutput"], () => require("./getBlockUrlListPolicyObject"));

export { GetCedgeAaaFeatureTemplateArgs, GetCedgeAaaFeatureTemplateResult, GetCedgeAaaFeatureTemplateOutputArgs } from "./getCedgeAaaFeatureTemplate";
export const getCedgeAaaFeatureTemplate: typeof import("./getCedgeAaaFeatureTemplate").getCedgeAaaFeatureTemplate = null as any;
export const getCedgeAaaFeatureTemplateOutput: typeof import("./getCedgeAaaFeatureTemplate").getCedgeAaaFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeAaaFeatureTemplate","getCedgeAaaFeatureTemplateOutput"], () => require("./getCedgeAaaFeatureTemplate"));

export { GetCedgeGlobalFeatureTemplateArgs, GetCedgeGlobalFeatureTemplateResult, GetCedgeGlobalFeatureTemplateOutputArgs } from "./getCedgeGlobalFeatureTemplate";
export const getCedgeGlobalFeatureTemplate: typeof import("./getCedgeGlobalFeatureTemplate").getCedgeGlobalFeatureTemplate = null as any;
export const getCedgeGlobalFeatureTemplateOutput: typeof import("./getCedgeGlobalFeatureTemplate").getCedgeGlobalFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeGlobalFeatureTemplate","getCedgeGlobalFeatureTemplateOutput"], () => require("./getCedgeGlobalFeatureTemplate"));

export { GetCedgeIgmpFeatureTemplateArgs, GetCedgeIgmpFeatureTemplateResult, GetCedgeIgmpFeatureTemplateOutputArgs } from "./getCedgeIgmpFeatureTemplate";
export const getCedgeIgmpFeatureTemplate: typeof import("./getCedgeIgmpFeatureTemplate").getCedgeIgmpFeatureTemplate = null as any;
export const getCedgeIgmpFeatureTemplateOutput: typeof import("./getCedgeIgmpFeatureTemplate").getCedgeIgmpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeIgmpFeatureTemplate","getCedgeIgmpFeatureTemplateOutput"], () => require("./getCedgeIgmpFeatureTemplate"));

export { GetCedgeMulticastFeatureTemplateArgs, GetCedgeMulticastFeatureTemplateResult, GetCedgeMulticastFeatureTemplateOutputArgs } from "./getCedgeMulticastFeatureTemplate";
export const getCedgeMulticastFeatureTemplate: typeof import("./getCedgeMulticastFeatureTemplate").getCedgeMulticastFeatureTemplate = null as any;
export const getCedgeMulticastFeatureTemplateOutput: typeof import("./getCedgeMulticastFeatureTemplate").getCedgeMulticastFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeMulticastFeatureTemplate","getCedgeMulticastFeatureTemplateOutput"], () => require("./getCedgeMulticastFeatureTemplate"));

export { GetCedgePimFeatureTemplateArgs, GetCedgePimFeatureTemplateResult, GetCedgePimFeatureTemplateOutputArgs } from "./getCedgePimFeatureTemplate";
export const getCedgePimFeatureTemplate: typeof import("./getCedgePimFeatureTemplate").getCedgePimFeatureTemplate = null as any;
export const getCedgePimFeatureTemplateOutput: typeof import("./getCedgePimFeatureTemplate").getCedgePimFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgePimFeatureTemplate","getCedgePimFeatureTemplateOutput"], () => require("./getCedgePimFeatureTemplate"));

export { GetCellularCedgeProfileFeatureTemplateArgs, GetCellularCedgeProfileFeatureTemplateResult, GetCellularCedgeProfileFeatureTemplateOutputArgs } from "./getCellularCedgeProfileFeatureTemplate";
export const getCellularCedgeProfileFeatureTemplate: typeof import("./getCellularCedgeProfileFeatureTemplate").getCellularCedgeProfileFeatureTemplate = null as any;
export const getCellularCedgeProfileFeatureTemplateOutput: typeof import("./getCellularCedgeProfileFeatureTemplate").getCellularCedgeProfileFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCellularCedgeProfileFeatureTemplate","getCellularCedgeProfileFeatureTemplateOutput"], () => require("./getCellularCedgeProfileFeatureTemplate"));

export { GetCellularControllerFeatureTemplateArgs, GetCellularControllerFeatureTemplateResult, GetCellularControllerFeatureTemplateOutputArgs } from "./getCellularControllerFeatureTemplate";
export const getCellularControllerFeatureTemplate: typeof import("./getCellularControllerFeatureTemplate").getCellularControllerFeatureTemplate = null as any;
export const getCellularControllerFeatureTemplateOutput: typeof import("./getCellularControllerFeatureTemplate").getCellularControllerFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCellularControllerFeatureTemplate","getCellularControllerFeatureTemplateOutput"], () => require("./getCellularControllerFeatureTemplate"));

export { GetCellularProfileFeatureTemplateArgs, GetCellularProfileFeatureTemplateResult, GetCellularProfileFeatureTemplateOutputArgs } from "./getCellularProfileFeatureTemplate";
export const getCellularProfileFeatureTemplate: typeof import("./getCellularProfileFeatureTemplate").getCellularProfileFeatureTemplate = null as any;
export const getCellularProfileFeatureTemplateOutput: typeof import("./getCellularProfileFeatureTemplate").getCellularProfileFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCellularProfileFeatureTemplate","getCellularProfileFeatureTemplateOutput"], () => require("./getCellularProfileFeatureTemplate"));

export { GetCentralizedPolicyArgs, GetCentralizedPolicyResult, GetCentralizedPolicyOutputArgs } from "./getCentralizedPolicy";
export const getCentralizedPolicy: typeof import("./getCentralizedPolicy").getCentralizedPolicy = null as any;
export const getCentralizedPolicyOutput: typeof import("./getCentralizedPolicy").getCentralizedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCentralizedPolicy","getCentralizedPolicyOutput"], () => require("./getCentralizedPolicy"));

export { GetCflowdPolicyDefinitionArgs, GetCflowdPolicyDefinitionResult, GetCflowdPolicyDefinitionOutputArgs } from "./getCflowdPolicyDefinition";
export const getCflowdPolicyDefinition: typeof import("./getCflowdPolicyDefinition").getCflowdPolicyDefinition = null as any;
export const getCflowdPolicyDefinitionOutput: typeof import("./getCflowdPolicyDefinition").getCflowdPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCflowdPolicyDefinition","getCflowdPolicyDefinitionOutput"], () => require("./getCflowdPolicyDefinition"));

export { GetCiscoBannerFeatureTemplateArgs, GetCiscoBannerFeatureTemplateResult, GetCiscoBannerFeatureTemplateOutputArgs } from "./getCiscoBannerFeatureTemplate";
export const getCiscoBannerFeatureTemplate: typeof import("./getCiscoBannerFeatureTemplate").getCiscoBannerFeatureTemplate = null as any;
export const getCiscoBannerFeatureTemplateOutput: typeof import("./getCiscoBannerFeatureTemplate").getCiscoBannerFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoBannerFeatureTemplate","getCiscoBannerFeatureTemplateOutput"], () => require("./getCiscoBannerFeatureTemplate"));

export { GetCiscoBfdFeatureTemplateArgs, GetCiscoBfdFeatureTemplateResult, GetCiscoBfdFeatureTemplateOutputArgs } from "./getCiscoBfdFeatureTemplate";
export const getCiscoBfdFeatureTemplate: typeof import("./getCiscoBfdFeatureTemplate").getCiscoBfdFeatureTemplate = null as any;
export const getCiscoBfdFeatureTemplateOutput: typeof import("./getCiscoBfdFeatureTemplate").getCiscoBfdFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoBfdFeatureTemplate","getCiscoBfdFeatureTemplateOutput"], () => require("./getCiscoBfdFeatureTemplate"));

export { GetCiscoBgpFeatureTemplateArgs, GetCiscoBgpFeatureTemplateResult, GetCiscoBgpFeatureTemplateOutputArgs } from "./getCiscoBgpFeatureTemplate";
export const getCiscoBgpFeatureTemplate: typeof import("./getCiscoBgpFeatureTemplate").getCiscoBgpFeatureTemplate = null as any;
export const getCiscoBgpFeatureTemplateOutput: typeof import("./getCiscoBgpFeatureTemplate").getCiscoBgpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoBgpFeatureTemplate","getCiscoBgpFeatureTemplateOutput"], () => require("./getCiscoBgpFeatureTemplate"));

export { GetCiscoDhcpServerFeatureTemplateArgs, GetCiscoDhcpServerFeatureTemplateResult, GetCiscoDhcpServerFeatureTemplateOutputArgs } from "./getCiscoDhcpServerFeatureTemplate";
export const getCiscoDhcpServerFeatureTemplate: typeof import("./getCiscoDhcpServerFeatureTemplate").getCiscoDhcpServerFeatureTemplate = null as any;
export const getCiscoDhcpServerFeatureTemplateOutput: typeof import("./getCiscoDhcpServerFeatureTemplate").getCiscoDhcpServerFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoDhcpServerFeatureTemplate","getCiscoDhcpServerFeatureTemplateOutput"], () => require("./getCiscoDhcpServerFeatureTemplate"));

export { GetCiscoLoggingFeatureTemplateArgs, GetCiscoLoggingFeatureTemplateResult, GetCiscoLoggingFeatureTemplateOutputArgs } from "./getCiscoLoggingFeatureTemplate";
export const getCiscoLoggingFeatureTemplate: typeof import("./getCiscoLoggingFeatureTemplate").getCiscoLoggingFeatureTemplate = null as any;
export const getCiscoLoggingFeatureTemplateOutput: typeof import("./getCiscoLoggingFeatureTemplate").getCiscoLoggingFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoLoggingFeatureTemplate","getCiscoLoggingFeatureTemplateOutput"], () => require("./getCiscoLoggingFeatureTemplate"));

export { GetCiscoNtpFeatureTemplateArgs, GetCiscoNtpFeatureTemplateResult, GetCiscoNtpFeatureTemplateOutputArgs } from "./getCiscoNtpFeatureTemplate";
export const getCiscoNtpFeatureTemplate: typeof import("./getCiscoNtpFeatureTemplate").getCiscoNtpFeatureTemplate = null as any;
export const getCiscoNtpFeatureTemplateOutput: typeof import("./getCiscoNtpFeatureTemplate").getCiscoNtpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoNtpFeatureTemplate","getCiscoNtpFeatureTemplateOutput"], () => require("./getCiscoNtpFeatureTemplate"));

export { GetCiscoOmpFeatureTemplateArgs, GetCiscoOmpFeatureTemplateResult, GetCiscoOmpFeatureTemplateOutputArgs } from "./getCiscoOmpFeatureTemplate";
export const getCiscoOmpFeatureTemplate: typeof import("./getCiscoOmpFeatureTemplate").getCiscoOmpFeatureTemplate = null as any;
export const getCiscoOmpFeatureTemplateOutput: typeof import("./getCiscoOmpFeatureTemplate").getCiscoOmpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoOmpFeatureTemplate","getCiscoOmpFeatureTemplateOutput"], () => require("./getCiscoOmpFeatureTemplate"));

export { GetCiscoOspfFeatureTemplateArgs, GetCiscoOspfFeatureTemplateResult, GetCiscoOspfFeatureTemplateOutputArgs } from "./getCiscoOspfFeatureTemplate";
export const getCiscoOspfFeatureTemplate: typeof import("./getCiscoOspfFeatureTemplate").getCiscoOspfFeatureTemplate = null as any;
export const getCiscoOspfFeatureTemplateOutput: typeof import("./getCiscoOspfFeatureTemplate").getCiscoOspfFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoOspfFeatureTemplate","getCiscoOspfFeatureTemplateOutput"], () => require("./getCiscoOspfFeatureTemplate"));

export { GetCiscoOspfv3FeatureTemplateArgs, GetCiscoOspfv3FeatureTemplateResult, GetCiscoOspfv3FeatureTemplateOutputArgs } from "./getCiscoOspfv3FeatureTemplate";
export const getCiscoOspfv3FeatureTemplate: typeof import("./getCiscoOspfv3FeatureTemplate").getCiscoOspfv3FeatureTemplate = null as any;
export const getCiscoOspfv3FeatureTemplateOutput: typeof import("./getCiscoOspfv3FeatureTemplate").getCiscoOspfv3FeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoOspfv3FeatureTemplate","getCiscoOspfv3FeatureTemplateOutput"], () => require("./getCiscoOspfv3FeatureTemplate"));

export { GetCiscoSecureInternetGatewayFeatureTemplateArgs, GetCiscoSecureInternetGatewayFeatureTemplateResult, GetCiscoSecureInternetGatewayFeatureTemplateOutputArgs } from "./getCiscoSecureInternetGatewayFeatureTemplate";
export const getCiscoSecureInternetGatewayFeatureTemplate: typeof import("./getCiscoSecureInternetGatewayFeatureTemplate").getCiscoSecureInternetGatewayFeatureTemplate = null as any;
export const getCiscoSecureInternetGatewayFeatureTemplateOutput: typeof import("./getCiscoSecureInternetGatewayFeatureTemplate").getCiscoSecureInternetGatewayFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSecureInternetGatewayFeatureTemplate","getCiscoSecureInternetGatewayFeatureTemplateOutput"], () => require("./getCiscoSecureInternetGatewayFeatureTemplate"));

export { GetCiscoSecurityFeatureTemplateArgs, GetCiscoSecurityFeatureTemplateResult, GetCiscoSecurityFeatureTemplateOutputArgs } from "./getCiscoSecurityFeatureTemplate";
export const getCiscoSecurityFeatureTemplate: typeof import("./getCiscoSecurityFeatureTemplate").getCiscoSecurityFeatureTemplate = null as any;
export const getCiscoSecurityFeatureTemplateOutput: typeof import("./getCiscoSecurityFeatureTemplate").getCiscoSecurityFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSecurityFeatureTemplate","getCiscoSecurityFeatureTemplateOutput"], () => require("./getCiscoSecurityFeatureTemplate"));

export { GetCiscoSigCredentialsFeatureTemplateArgs, GetCiscoSigCredentialsFeatureTemplateResult, GetCiscoSigCredentialsFeatureTemplateOutputArgs } from "./getCiscoSigCredentialsFeatureTemplate";
export const getCiscoSigCredentialsFeatureTemplate: typeof import("./getCiscoSigCredentialsFeatureTemplate").getCiscoSigCredentialsFeatureTemplate = null as any;
export const getCiscoSigCredentialsFeatureTemplateOutput: typeof import("./getCiscoSigCredentialsFeatureTemplate").getCiscoSigCredentialsFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSigCredentialsFeatureTemplate","getCiscoSigCredentialsFeatureTemplateOutput"], () => require("./getCiscoSigCredentialsFeatureTemplate"));

export { GetCiscoSnmpFeatureTemplateArgs, GetCiscoSnmpFeatureTemplateResult, GetCiscoSnmpFeatureTemplateOutputArgs } from "./getCiscoSnmpFeatureTemplate";
export const getCiscoSnmpFeatureTemplate: typeof import("./getCiscoSnmpFeatureTemplate").getCiscoSnmpFeatureTemplate = null as any;
export const getCiscoSnmpFeatureTemplateOutput: typeof import("./getCiscoSnmpFeatureTemplate").getCiscoSnmpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSnmpFeatureTemplate","getCiscoSnmpFeatureTemplateOutput"], () => require("./getCiscoSnmpFeatureTemplate"));

export { GetCiscoSystemFeatureTemplateArgs, GetCiscoSystemFeatureTemplateResult, GetCiscoSystemFeatureTemplateOutputArgs } from "./getCiscoSystemFeatureTemplate";
export const getCiscoSystemFeatureTemplate: typeof import("./getCiscoSystemFeatureTemplate").getCiscoSystemFeatureTemplate = null as any;
export const getCiscoSystemFeatureTemplateOutput: typeof import("./getCiscoSystemFeatureTemplate").getCiscoSystemFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSystemFeatureTemplate","getCiscoSystemFeatureTemplateOutput"], () => require("./getCiscoSystemFeatureTemplate"));

export { GetCiscoThousandeyesFeatureTemplateArgs, GetCiscoThousandeyesFeatureTemplateResult, GetCiscoThousandeyesFeatureTemplateOutputArgs } from "./getCiscoThousandeyesFeatureTemplate";
export const getCiscoThousandeyesFeatureTemplate: typeof import("./getCiscoThousandeyesFeatureTemplate").getCiscoThousandeyesFeatureTemplate = null as any;
export const getCiscoThousandeyesFeatureTemplateOutput: typeof import("./getCiscoThousandeyesFeatureTemplate").getCiscoThousandeyesFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoThousandeyesFeatureTemplate","getCiscoThousandeyesFeatureTemplateOutput"], () => require("./getCiscoThousandeyesFeatureTemplate"));

export { GetCiscoTrustsecFeatureTemplateArgs, GetCiscoTrustsecFeatureTemplateResult, GetCiscoTrustsecFeatureTemplateOutputArgs } from "./getCiscoTrustsecFeatureTemplate";
export const getCiscoTrustsecFeatureTemplate: typeof import("./getCiscoTrustsecFeatureTemplate").getCiscoTrustsecFeatureTemplate = null as any;
export const getCiscoTrustsecFeatureTemplateOutput: typeof import("./getCiscoTrustsecFeatureTemplate").getCiscoTrustsecFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoTrustsecFeatureTemplate","getCiscoTrustsecFeatureTemplateOutput"], () => require("./getCiscoTrustsecFeatureTemplate"));

export { GetCiscoVpnFeatureTemplateArgs, GetCiscoVpnFeatureTemplateResult, GetCiscoVpnFeatureTemplateOutputArgs } from "./getCiscoVpnFeatureTemplate";
export const getCiscoVpnFeatureTemplate: typeof import("./getCiscoVpnFeatureTemplate").getCiscoVpnFeatureTemplate = null as any;
export const getCiscoVpnFeatureTemplateOutput: typeof import("./getCiscoVpnFeatureTemplate").getCiscoVpnFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnFeatureTemplate","getCiscoVpnFeatureTemplateOutput"], () => require("./getCiscoVpnFeatureTemplate"));

export { GetCiscoVpnInterfaceFeatureTemplateArgs, GetCiscoVpnInterfaceFeatureTemplateResult, GetCiscoVpnInterfaceFeatureTemplateOutputArgs } from "./getCiscoVpnInterfaceFeatureTemplate";
export const getCiscoVpnInterfaceFeatureTemplate: typeof import("./getCiscoVpnInterfaceFeatureTemplate").getCiscoVpnInterfaceFeatureTemplate = null as any;
export const getCiscoVpnInterfaceFeatureTemplateOutput: typeof import("./getCiscoVpnInterfaceFeatureTemplate").getCiscoVpnInterfaceFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnInterfaceFeatureTemplate","getCiscoVpnInterfaceFeatureTemplateOutput"], () => require("./getCiscoVpnInterfaceFeatureTemplate"));

export { GetCiscoVpnInterfaceGreFeatureTemplateArgs, GetCiscoVpnInterfaceGreFeatureTemplateResult, GetCiscoVpnInterfaceGreFeatureTemplateOutputArgs } from "./getCiscoVpnInterfaceGreFeatureTemplate";
export const getCiscoVpnInterfaceGreFeatureTemplate: typeof import("./getCiscoVpnInterfaceGreFeatureTemplate").getCiscoVpnInterfaceGreFeatureTemplate = null as any;
export const getCiscoVpnInterfaceGreFeatureTemplateOutput: typeof import("./getCiscoVpnInterfaceGreFeatureTemplate").getCiscoVpnInterfaceGreFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnInterfaceGreFeatureTemplate","getCiscoVpnInterfaceGreFeatureTemplateOutput"], () => require("./getCiscoVpnInterfaceGreFeatureTemplate"));

export { GetCiscoVpnInterfaceIpsecFeatureTemplateArgs, GetCiscoVpnInterfaceIpsecFeatureTemplateResult, GetCiscoVpnInterfaceIpsecFeatureTemplateOutputArgs } from "./getCiscoVpnInterfaceIpsecFeatureTemplate";
export const getCiscoVpnInterfaceIpsecFeatureTemplate: typeof import("./getCiscoVpnInterfaceIpsecFeatureTemplate").getCiscoVpnInterfaceIpsecFeatureTemplate = null as any;
export const getCiscoVpnInterfaceIpsecFeatureTemplateOutput: typeof import("./getCiscoVpnInterfaceIpsecFeatureTemplate").getCiscoVpnInterfaceIpsecFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnInterfaceIpsecFeatureTemplate","getCiscoVpnInterfaceIpsecFeatureTemplateOutput"], () => require("./getCiscoVpnInterfaceIpsecFeatureTemplate"));

export { GetCiscoWirelessLanFeatureTemplateArgs, GetCiscoWirelessLanFeatureTemplateResult, GetCiscoWirelessLanFeatureTemplateOutputArgs } from "./getCiscoWirelessLanFeatureTemplate";
export const getCiscoWirelessLanFeatureTemplate: typeof import("./getCiscoWirelessLanFeatureTemplate").getCiscoWirelessLanFeatureTemplate = null as any;
export const getCiscoWirelessLanFeatureTemplateOutput: typeof import("./getCiscoWirelessLanFeatureTemplate").getCiscoWirelessLanFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoWirelessLanFeatureTemplate","getCiscoWirelessLanFeatureTemplateOutput"], () => require("./getCiscoWirelessLanFeatureTemplate"));

export { GetClassMapPolicyObjectArgs, GetClassMapPolicyObjectResult, GetClassMapPolicyObjectOutputArgs } from "./getClassMapPolicyObject";
export const getClassMapPolicyObject: typeof import("./getClassMapPolicyObject").getClassMapPolicyObject = null as any;
export const getClassMapPolicyObjectOutput: typeof import("./getClassMapPolicyObject").getClassMapPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getClassMapPolicyObject","getClassMapPolicyObjectOutput"], () => require("./getClassMapPolicyObject"));

export { GetCliConfigFeatureArgs, GetCliConfigFeatureResult, GetCliConfigFeatureOutputArgs } from "./getCliConfigFeature";
export const getCliConfigFeature: typeof import("./getCliConfigFeature").getCliConfigFeature = null as any;
export const getCliConfigFeatureOutput: typeof import("./getCliConfigFeature").getCliConfigFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getCliConfigFeature","getCliConfigFeatureOutput"], () => require("./getCliConfigFeature"));

export { GetCliDeviceTemplateArgs, GetCliDeviceTemplateResult, GetCliDeviceTemplateOutputArgs } from "./getCliDeviceTemplate";
export const getCliDeviceTemplate: typeof import("./getCliDeviceTemplate").getCliDeviceTemplate = null as any;
export const getCliDeviceTemplateOutput: typeof import("./getCliDeviceTemplate").getCliDeviceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCliDeviceTemplate","getCliDeviceTemplateOutput"], () => require("./getCliDeviceTemplate"));

export { GetCliFeatureProfileArgs, GetCliFeatureProfileResult, GetCliFeatureProfileOutputArgs } from "./getCliFeatureProfile";
export const getCliFeatureProfile: typeof import("./getCliFeatureProfile").getCliFeatureProfile = null as any;
export const getCliFeatureProfileOutput: typeof import("./getCliFeatureProfile").getCliFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCliFeatureProfile","getCliFeatureProfileOutput"], () => require("./getCliFeatureProfile"));

export { GetCliTemplateFeatureTemplateArgs, GetCliTemplateFeatureTemplateResult, GetCliTemplateFeatureTemplateOutputArgs } from "./getCliTemplateFeatureTemplate";
export const getCliTemplateFeatureTemplate: typeof import("./getCliTemplateFeatureTemplate").getCliTemplateFeatureTemplate = null as any;
export const getCliTemplateFeatureTemplateOutput: typeof import("./getCliTemplateFeatureTemplate").getCliTemplateFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCliTemplateFeatureTemplate","getCliTemplateFeatureTemplateOutput"], () => require("./getCliTemplateFeatureTemplate"));

export { GetColorListPolicyObjectArgs, GetColorListPolicyObjectResult, GetColorListPolicyObjectOutputArgs } from "./getColorListPolicyObject";
export const getColorListPolicyObject: typeof import("./getColorListPolicyObject").getColorListPolicyObject = null as any;
export const getColorListPolicyObjectOutput: typeof import("./getColorListPolicyObject").getColorListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getColorListPolicyObject","getColorListPolicyObjectOutput"], () => require("./getColorListPolicyObject"));

export { GetConfigurationGroupArgs, GetConfigurationGroupResult, GetConfigurationGroupOutputArgs } from "./getConfigurationGroup";
export const getConfigurationGroup: typeof import("./getConfigurationGroup").getConfigurationGroup = null as any;
export const getConfigurationGroupOutput: typeof import("./getConfigurationGroup").getConfigurationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationGroup","getConfigurationGroupOutput"], () => require("./getConfigurationGroup"));

export { GetCustomControlTopologyPolicyDefinitionArgs, GetCustomControlTopologyPolicyDefinitionResult, GetCustomControlTopologyPolicyDefinitionOutputArgs } from "./getCustomControlTopologyPolicyDefinition";
export const getCustomControlTopologyPolicyDefinition: typeof import("./getCustomControlTopologyPolicyDefinition").getCustomControlTopologyPolicyDefinition = null as any;
export const getCustomControlTopologyPolicyDefinitionOutput: typeof import("./getCustomControlTopologyPolicyDefinition").getCustomControlTopologyPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCustomControlTopologyPolicyDefinition","getCustomControlTopologyPolicyDefinitionOutput"], () => require("./getCustomControlTopologyPolicyDefinition"));

export { GetDataFqdnPrefixListPolicyObjectArgs, GetDataFqdnPrefixListPolicyObjectResult, GetDataFqdnPrefixListPolicyObjectOutputArgs } from "./getDataFqdnPrefixListPolicyObject";
export const getDataFqdnPrefixListPolicyObject: typeof import("./getDataFqdnPrefixListPolicyObject").getDataFqdnPrefixListPolicyObject = null as any;
export const getDataFqdnPrefixListPolicyObjectOutput: typeof import("./getDataFqdnPrefixListPolicyObject").getDataFqdnPrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataFqdnPrefixListPolicyObject","getDataFqdnPrefixListPolicyObjectOutput"], () => require("./getDataFqdnPrefixListPolicyObject"));

export { GetDataIpv4PrefixListPolicyObjectArgs, GetDataIpv4PrefixListPolicyObjectResult, GetDataIpv4PrefixListPolicyObjectOutputArgs } from "./getDataIpv4PrefixListPolicyObject";
export const getDataIpv4PrefixListPolicyObject: typeof import("./getDataIpv4PrefixListPolicyObject").getDataIpv4PrefixListPolicyObject = null as any;
export const getDataIpv4PrefixListPolicyObjectOutput: typeof import("./getDataIpv4PrefixListPolicyObject").getDataIpv4PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataIpv4PrefixListPolicyObject","getDataIpv4PrefixListPolicyObjectOutput"], () => require("./getDataIpv4PrefixListPolicyObject"));

export { GetDataIpv6PrefixListPolicyObjectArgs, GetDataIpv6PrefixListPolicyObjectResult, GetDataIpv6PrefixListPolicyObjectOutputArgs } from "./getDataIpv6PrefixListPolicyObject";
export const getDataIpv6PrefixListPolicyObject: typeof import("./getDataIpv6PrefixListPolicyObject").getDataIpv6PrefixListPolicyObject = null as any;
export const getDataIpv6PrefixListPolicyObjectOutput: typeof import("./getDataIpv6PrefixListPolicyObject").getDataIpv6PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataIpv6PrefixListPolicyObject","getDataIpv6PrefixListPolicyObjectOutput"], () => require("./getDataIpv6PrefixListPolicyObject"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDnsSecurityFeatureProfileArgs, GetDnsSecurityFeatureProfileResult, GetDnsSecurityFeatureProfileOutputArgs } from "./getDnsSecurityFeatureProfile";
export const getDnsSecurityFeatureProfile: typeof import("./getDnsSecurityFeatureProfile").getDnsSecurityFeatureProfile = null as any;
export const getDnsSecurityFeatureProfileOutput: typeof import("./getDnsSecurityFeatureProfile").getDnsSecurityFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSecurityFeatureProfile","getDnsSecurityFeatureProfileOutput"], () => require("./getDnsSecurityFeatureProfile"));

export { GetDnsSecurityPolicyDefinitionArgs, GetDnsSecurityPolicyDefinitionResult, GetDnsSecurityPolicyDefinitionOutputArgs } from "./getDnsSecurityPolicyDefinition";
export const getDnsSecurityPolicyDefinition: typeof import("./getDnsSecurityPolicyDefinition").getDnsSecurityPolicyDefinition = null as any;
export const getDnsSecurityPolicyDefinitionOutput: typeof import("./getDnsSecurityPolicyDefinition").getDnsSecurityPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSecurityPolicyDefinition","getDnsSecurityPolicyDefinitionOutput"], () => require("./getDnsSecurityPolicyDefinition"));

export { GetDomainListPolicyObjectArgs, GetDomainListPolicyObjectResult, GetDomainListPolicyObjectOutputArgs } from "./getDomainListPolicyObject";
export const getDomainListPolicyObject: typeof import("./getDomainListPolicyObject").getDomainListPolicyObject = null as any;
export const getDomainListPolicyObjectOutput: typeof import("./getDomainListPolicyObject").getDomainListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDomainListPolicyObject","getDomainListPolicyObjectOutput"], () => require("./getDomainListPolicyObject"));

export { GetEigrpFeatureTemplateArgs, GetEigrpFeatureTemplateResult, GetEigrpFeatureTemplateOutputArgs } from "./getEigrpFeatureTemplate";
export const getEigrpFeatureTemplate: typeof import("./getEigrpFeatureTemplate").getEigrpFeatureTemplate = null as any;
export const getEigrpFeatureTemplateOutput: typeof import("./getEigrpFeatureTemplate").getEigrpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEigrpFeatureTemplate","getEigrpFeatureTemplateOutput"], () => require("./getEigrpFeatureTemplate"));

export { GetEmbeddedSecurityFeatureProfileArgs, GetEmbeddedSecurityFeatureProfileResult, GetEmbeddedSecurityFeatureProfileOutputArgs } from "./getEmbeddedSecurityFeatureProfile";
export const getEmbeddedSecurityFeatureProfile: typeof import("./getEmbeddedSecurityFeatureProfile").getEmbeddedSecurityFeatureProfile = null as any;
export const getEmbeddedSecurityFeatureProfileOutput: typeof import("./getEmbeddedSecurityFeatureProfile").getEmbeddedSecurityFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getEmbeddedSecurityFeatureProfile","getEmbeddedSecurityFeatureProfileOutput"], () => require("./getEmbeddedSecurityFeatureProfile"));

export { GetExpandedCommunityListPolicyObjectArgs, GetExpandedCommunityListPolicyObjectResult, GetExpandedCommunityListPolicyObjectOutputArgs } from "./getExpandedCommunityListPolicyObject";
export const getExpandedCommunityListPolicyObject: typeof import("./getExpandedCommunityListPolicyObject").getExpandedCommunityListPolicyObject = null as any;
export const getExpandedCommunityListPolicyObjectOutput: typeof import("./getExpandedCommunityListPolicyObject").getExpandedCommunityListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getExpandedCommunityListPolicyObject","getExpandedCommunityListPolicyObjectOutput"], () => require("./getExpandedCommunityListPolicyObject"));

export { GetExtendedCommunityListPolicyObjectArgs, GetExtendedCommunityListPolicyObjectResult, GetExtendedCommunityListPolicyObjectOutputArgs } from "./getExtendedCommunityListPolicyObject";
export const getExtendedCommunityListPolicyObject: typeof import("./getExtendedCommunityListPolicyObject").getExtendedCommunityListPolicyObject = null as any;
export const getExtendedCommunityListPolicyObjectOutput: typeof import("./getExtendedCommunityListPolicyObject").getExtendedCommunityListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedCommunityListPolicyObject","getExtendedCommunityListPolicyObjectOutput"], () => require("./getExtendedCommunityListPolicyObject"));

export { GetFeatureDeviceTemplateArgs, GetFeatureDeviceTemplateResult, GetFeatureDeviceTemplateOutputArgs } from "./getFeatureDeviceTemplate";
export const getFeatureDeviceTemplate: typeof import("./getFeatureDeviceTemplate").getFeatureDeviceTemplate = null as any;
export const getFeatureDeviceTemplateOutput: typeof import("./getFeatureDeviceTemplate").getFeatureDeviceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureDeviceTemplate","getFeatureDeviceTemplateOutput"], () => require("./getFeatureDeviceTemplate"));

export { GetGeoLocationListPolicyObjectArgs, GetGeoLocationListPolicyObjectResult, GetGeoLocationListPolicyObjectOutputArgs } from "./getGeoLocationListPolicyObject";
export const getGeoLocationListPolicyObject: typeof import("./getGeoLocationListPolicyObject").getGeoLocationListPolicyObject = null as any;
export const getGeoLocationListPolicyObjectOutput: typeof import("./getGeoLocationListPolicyObject").getGeoLocationListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getGeoLocationListPolicyObject","getGeoLocationListPolicyObjectOutput"], () => require("./getGeoLocationListPolicyObject"));

export { GetGpsFeatureTemplateArgs, GetGpsFeatureTemplateResult, GetGpsFeatureTemplateOutputArgs } from "./getGpsFeatureTemplate";
export const getGpsFeatureTemplate: typeof import("./getGpsFeatureTemplate").getGpsFeatureTemplate = null as any;
export const getGpsFeatureTemplateOutput: typeof import("./getGpsFeatureTemplate").getGpsFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getGpsFeatureTemplate","getGpsFeatureTemplateOutput"], () => require("./getGpsFeatureTemplate"));

export { GetHubAndSpokeTopologyPolicyDefinitionArgs, GetHubAndSpokeTopologyPolicyDefinitionResult, GetHubAndSpokeTopologyPolicyDefinitionOutputArgs } from "./getHubAndSpokeTopologyPolicyDefinition";
export const getHubAndSpokeTopologyPolicyDefinition: typeof import("./getHubAndSpokeTopologyPolicyDefinition").getHubAndSpokeTopologyPolicyDefinition = null as any;
export const getHubAndSpokeTopologyPolicyDefinitionOutput: typeof import("./getHubAndSpokeTopologyPolicyDefinition").getHubAndSpokeTopologyPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getHubAndSpokeTopologyPolicyDefinition","getHubAndSpokeTopologyPolicyDefinitionOutput"], () => require("./getHubAndSpokeTopologyPolicyDefinition"));

export { GetIntrusionPreventionPolicyDefinitionArgs, GetIntrusionPreventionPolicyDefinitionResult, GetIntrusionPreventionPolicyDefinitionOutputArgs } from "./getIntrusionPreventionPolicyDefinition";
export const getIntrusionPreventionPolicyDefinition: typeof import("./getIntrusionPreventionPolicyDefinition").getIntrusionPreventionPolicyDefinition = null as any;
export const getIntrusionPreventionPolicyDefinitionOutput: typeof import("./getIntrusionPreventionPolicyDefinition").getIntrusionPreventionPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIntrusionPreventionPolicyDefinition","getIntrusionPreventionPolicyDefinitionOutput"], () => require("./getIntrusionPreventionPolicyDefinition"));

export { GetIpsSignatureListPolicyObjectArgs, GetIpsSignatureListPolicyObjectResult, GetIpsSignatureListPolicyObjectOutputArgs } from "./getIpsSignatureListPolicyObject";
export const getIpsSignatureListPolicyObject: typeof import("./getIpsSignatureListPolicyObject").getIpsSignatureListPolicyObject = null as any;
export const getIpsSignatureListPolicyObjectOutput: typeof import("./getIpsSignatureListPolicyObject").getIpsSignatureListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getIpsSignatureListPolicyObject","getIpsSignatureListPolicyObjectOutput"], () => require("./getIpsSignatureListPolicyObject"));

export { GetIpv4AclPolicyDefinitionArgs, GetIpv4AclPolicyDefinitionResult, GetIpv4AclPolicyDefinitionOutputArgs } from "./getIpv4AclPolicyDefinition";
export const getIpv4AclPolicyDefinition: typeof import("./getIpv4AclPolicyDefinition").getIpv4AclPolicyDefinition = null as any;
export const getIpv4AclPolicyDefinitionOutput: typeof import("./getIpv4AclPolicyDefinition").getIpv4AclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AclPolicyDefinition","getIpv4AclPolicyDefinitionOutput"], () => require("./getIpv4AclPolicyDefinition"));

export { GetIpv4DeviceAclPolicyDefinitionArgs, GetIpv4DeviceAclPolicyDefinitionResult, GetIpv4DeviceAclPolicyDefinitionOutputArgs } from "./getIpv4DeviceAclPolicyDefinition";
export const getIpv4DeviceAclPolicyDefinition: typeof import("./getIpv4DeviceAclPolicyDefinition").getIpv4DeviceAclPolicyDefinition = null as any;
export const getIpv4DeviceAclPolicyDefinitionOutput: typeof import("./getIpv4DeviceAclPolicyDefinition").getIpv4DeviceAclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4DeviceAclPolicyDefinition","getIpv4DeviceAclPolicyDefinitionOutput"], () => require("./getIpv4DeviceAclPolicyDefinition"));

export { GetIpv4PrefixListPolicyObjectArgs, GetIpv4PrefixListPolicyObjectResult, GetIpv4PrefixListPolicyObjectOutputArgs } from "./getIpv4PrefixListPolicyObject";
export const getIpv4PrefixListPolicyObject: typeof import("./getIpv4PrefixListPolicyObject").getIpv4PrefixListPolicyObject = null as any;
export const getIpv4PrefixListPolicyObjectOutput: typeof import("./getIpv4PrefixListPolicyObject").getIpv4PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4PrefixListPolicyObject","getIpv4PrefixListPolicyObjectOutput"], () => require("./getIpv4PrefixListPolicyObject"));

export { GetIpv6AclPolicyDefinitionArgs, GetIpv6AclPolicyDefinitionResult, GetIpv6AclPolicyDefinitionOutputArgs } from "./getIpv6AclPolicyDefinition";
export const getIpv6AclPolicyDefinition: typeof import("./getIpv6AclPolicyDefinition").getIpv6AclPolicyDefinition = null as any;
export const getIpv6AclPolicyDefinitionOutput: typeof import("./getIpv6AclPolicyDefinition").getIpv6AclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6AclPolicyDefinition","getIpv6AclPolicyDefinitionOutput"], () => require("./getIpv6AclPolicyDefinition"));

export { GetIpv6DeviceAclPolicyDefinitionArgs, GetIpv6DeviceAclPolicyDefinitionResult, GetIpv6DeviceAclPolicyDefinitionOutputArgs } from "./getIpv6DeviceAclPolicyDefinition";
export const getIpv6DeviceAclPolicyDefinition: typeof import("./getIpv6DeviceAclPolicyDefinition").getIpv6DeviceAclPolicyDefinition = null as any;
export const getIpv6DeviceAclPolicyDefinitionOutput: typeof import("./getIpv6DeviceAclPolicyDefinition").getIpv6DeviceAclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6DeviceAclPolicyDefinition","getIpv6DeviceAclPolicyDefinitionOutput"], () => require("./getIpv6DeviceAclPolicyDefinition"));

export { GetIpv6PrefixListPolicyObjectArgs, GetIpv6PrefixListPolicyObjectResult, GetIpv6PrefixListPolicyObjectOutputArgs } from "./getIpv6PrefixListPolicyObject";
export const getIpv6PrefixListPolicyObject: typeof import("./getIpv6PrefixListPolicyObject").getIpv6PrefixListPolicyObject = null as any;
export const getIpv6PrefixListPolicyObjectOutput: typeof import("./getIpv6PrefixListPolicyObject").getIpv6PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6PrefixListPolicyObject","getIpv6PrefixListPolicyObjectOutput"], () => require("./getIpv6PrefixListPolicyObject"));

export { GetLocalApplicationListPolicyObjectArgs, GetLocalApplicationListPolicyObjectResult, GetLocalApplicationListPolicyObjectOutputArgs } from "./getLocalApplicationListPolicyObject";
export const getLocalApplicationListPolicyObject: typeof import("./getLocalApplicationListPolicyObject").getLocalApplicationListPolicyObject = null as any;
export const getLocalApplicationListPolicyObjectOutput: typeof import("./getLocalApplicationListPolicyObject").getLocalApplicationListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getLocalApplicationListPolicyObject","getLocalApplicationListPolicyObjectOutput"], () => require("./getLocalApplicationListPolicyObject"));

export { GetLocalizedPolicyArgs, GetLocalizedPolicyResult, GetLocalizedPolicyOutputArgs } from "./getLocalizedPolicy";
export const getLocalizedPolicy: typeof import("./getLocalizedPolicy").getLocalizedPolicy = null as any;
export const getLocalizedPolicyOutput: typeof import("./getLocalizedPolicy").getLocalizedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLocalizedPolicy","getLocalizedPolicyOutput"], () => require("./getLocalizedPolicy"));

export { GetMeshTopologyPolicyDefinitionArgs, GetMeshTopologyPolicyDefinitionResult, GetMeshTopologyPolicyDefinitionOutputArgs } from "./getMeshTopologyPolicyDefinition";
export const getMeshTopologyPolicyDefinition: typeof import("./getMeshTopologyPolicyDefinition").getMeshTopologyPolicyDefinition = null as any;
export const getMeshTopologyPolicyDefinitionOutput: typeof import("./getMeshTopologyPolicyDefinition").getMeshTopologyPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getMeshTopologyPolicyDefinition","getMeshTopologyPolicyDefinitionOutput"], () => require("./getMeshTopologyPolicyDefinition"));

export { GetMirrorPolicyObjectArgs, GetMirrorPolicyObjectResult, GetMirrorPolicyObjectOutputArgs } from "./getMirrorPolicyObject";
export const getMirrorPolicyObject: typeof import("./getMirrorPolicyObject").getMirrorPolicyObject = null as any;
export const getMirrorPolicyObjectOutput: typeof import("./getMirrorPolicyObject").getMirrorPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getMirrorPolicyObject","getMirrorPolicyObjectOutput"], () => require("./getMirrorPolicyObject"));

export { GetObjectGroupPolicyDefinitionArgs, GetObjectGroupPolicyDefinitionResult, GetObjectGroupPolicyDefinitionOutputArgs } from "./getObjectGroupPolicyDefinition";
export const getObjectGroupPolicyDefinition: typeof import("./getObjectGroupPolicyDefinition").getObjectGroupPolicyDefinition = null as any;
export const getObjectGroupPolicyDefinitionOutput: typeof import("./getObjectGroupPolicyDefinition").getObjectGroupPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getObjectGroupPolicyDefinition","getObjectGroupPolicyDefinitionOutput"], () => require("./getObjectGroupPolicyDefinition"));

export { GetOtherFeatureProfileArgs, GetOtherFeatureProfileResult, GetOtherFeatureProfileOutputArgs } from "./getOtherFeatureProfile";
export const getOtherFeatureProfile: typeof import("./getOtherFeatureProfile").getOtherFeatureProfile = null as any;
export const getOtherFeatureProfileOutput: typeof import("./getOtherFeatureProfile").getOtherFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getOtherFeatureProfile","getOtherFeatureProfileOutput"], () => require("./getOtherFeatureProfile"));

export { GetOtherThousandeyesFeatureArgs, GetOtherThousandeyesFeatureResult, GetOtherThousandeyesFeatureOutputArgs } from "./getOtherThousandeyesFeature";
export const getOtherThousandeyesFeature: typeof import("./getOtherThousandeyesFeature").getOtherThousandeyesFeature = null as any;
export const getOtherThousandeyesFeatureOutput: typeof import("./getOtherThousandeyesFeature").getOtherThousandeyesFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getOtherThousandeyesFeature","getOtherThousandeyesFeatureOutput"], () => require("./getOtherThousandeyesFeature"));

export { GetOtherUcseFeatureArgs, GetOtherUcseFeatureResult, GetOtherUcseFeatureOutputArgs } from "./getOtherUcseFeature";
export const getOtherUcseFeature: typeof import("./getOtherUcseFeature").getOtherUcseFeature = null as any;
export const getOtherUcseFeatureOutput: typeof import("./getOtherUcseFeature").getOtherUcseFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getOtherUcseFeature","getOtherUcseFeatureOutput"], () => require("./getOtherUcseFeature"));

export { GetPolicerPolicyObjectArgs, GetPolicerPolicyObjectResult, GetPolicerPolicyObjectOutputArgs } from "./getPolicerPolicyObject";
export const getPolicerPolicyObject: typeof import("./getPolicerPolicyObject").getPolicerPolicyObject = null as any;
export const getPolicerPolicyObjectOutput: typeof import("./getPolicerPolicyObject").getPolicerPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getPolicerPolicyObject","getPolicerPolicyObjectOutput"], () => require("./getPolicerPolicyObject"));

export { GetPolicyObjectAppProbeClassArgs, GetPolicyObjectAppProbeClassResult, GetPolicyObjectAppProbeClassOutputArgs } from "./getPolicyObjectAppProbeClass";
export const getPolicyObjectAppProbeClass: typeof import("./getPolicyObjectAppProbeClass").getPolicyObjectAppProbeClass = null as any;
export const getPolicyObjectAppProbeClassOutput: typeof import("./getPolicyObjectAppProbeClass").getPolicyObjectAppProbeClassOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectAppProbeClass","getPolicyObjectAppProbeClassOutput"], () => require("./getPolicyObjectAppProbeClass"));

export { GetPolicyObjectApplicationListArgs, GetPolicyObjectApplicationListResult, GetPolicyObjectApplicationListOutputArgs } from "./getPolicyObjectApplicationList";
export const getPolicyObjectApplicationList: typeof import("./getPolicyObjectApplicationList").getPolicyObjectApplicationList = null as any;
export const getPolicyObjectApplicationListOutput: typeof import("./getPolicyObjectApplicationList").getPolicyObjectApplicationListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectApplicationList","getPolicyObjectApplicationListOutput"], () => require("./getPolicyObjectApplicationList"));

export { GetPolicyObjectAsPathListArgs, GetPolicyObjectAsPathListResult, GetPolicyObjectAsPathListOutputArgs } from "./getPolicyObjectAsPathList";
export const getPolicyObjectAsPathList: typeof import("./getPolicyObjectAsPathList").getPolicyObjectAsPathList = null as any;
export const getPolicyObjectAsPathListOutput: typeof import("./getPolicyObjectAsPathList").getPolicyObjectAsPathListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectAsPathList","getPolicyObjectAsPathListOutput"], () => require("./getPolicyObjectAsPathList"));

export { GetPolicyObjectClassMapArgs, GetPolicyObjectClassMapResult, GetPolicyObjectClassMapOutputArgs } from "./getPolicyObjectClassMap";
export const getPolicyObjectClassMap: typeof import("./getPolicyObjectClassMap").getPolicyObjectClassMap = null as any;
export const getPolicyObjectClassMapOutput: typeof import("./getPolicyObjectClassMap").getPolicyObjectClassMapOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectClassMap","getPolicyObjectClassMapOutput"], () => require("./getPolicyObjectClassMap"));

export { GetPolicyObjectColorListArgs, GetPolicyObjectColorListResult, GetPolicyObjectColorListOutputArgs } from "./getPolicyObjectColorList";
export const getPolicyObjectColorList: typeof import("./getPolicyObjectColorList").getPolicyObjectColorList = null as any;
export const getPolicyObjectColorListOutput: typeof import("./getPolicyObjectColorList").getPolicyObjectColorListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectColorList","getPolicyObjectColorListOutput"], () => require("./getPolicyObjectColorList"));

export { GetPolicyObjectDataIpv4PrefixListArgs, GetPolicyObjectDataIpv4PrefixListResult, GetPolicyObjectDataIpv4PrefixListOutputArgs } from "./getPolicyObjectDataIpv4PrefixList";
export const getPolicyObjectDataIpv4PrefixList: typeof import("./getPolicyObjectDataIpv4PrefixList").getPolicyObjectDataIpv4PrefixList = null as any;
export const getPolicyObjectDataIpv4PrefixListOutput: typeof import("./getPolicyObjectDataIpv4PrefixList").getPolicyObjectDataIpv4PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectDataIpv4PrefixList","getPolicyObjectDataIpv4PrefixListOutput"], () => require("./getPolicyObjectDataIpv4PrefixList"));

export { GetPolicyObjectDataIpv6PrefixListArgs, GetPolicyObjectDataIpv6PrefixListResult, GetPolicyObjectDataIpv6PrefixListOutputArgs } from "./getPolicyObjectDataIpv6PrefixList";
export const getPolicyObjectDataIpv6PrefixList: typeof import("./getPolicyObjectDataIpv6PrefixList").getPolicyObjectDataIpv6PrefixList = null as any;
export const getPolicyObjectDataIpv6PrefixListOutput: typeof import("./getPolicyObjectDataIpv6PrefixList").getPolicyObjectDataIpv6PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectDataIpv6PrefixList","getPolicyObjectDataIpv6PrefixListOutput"], () => require("./getPolicyObjectDataIpv6PrefixList"));

export { GetPolicyObjectExpandedCommunityListArgs, GetPolicyObjectExpandedCommunityListResult, GetPolicyObjectExpandedCommunityListOutputArgs } from "./getPolicyObjectExpandedCommunityList";
export const getPolicyObjectExpandedCommunityList: typeof import("./getPolicyObjectExpandedCommunityList").getPolicyObjectExpandedCommunityList = null as any;
export const getPolicyObjectExpandedCommunityListOutput: typeof import("./getPolicyObjectExpandedCommunityList").getPolicyObjectExpandedCommunityListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectExpandedCommunityList","getPolicyObjectExpandedCommunityListOutput"], () => require("./getPolicyObjectExpandedCommunityList"));

export { GetPolicyObjectExtendedCommunityListArgs, GetPolicyObjectExtendedCommunityListResult, GetPolicyObjectExtendedCommunityListOutputArgs } from "./getPolicyObjectExtendedCommunityList";
export const getPolicyObjectExtendedCommunityList: typeof import("./getPolicyObjectExtendedCommunityList").getPolicyObjectExtendedCommunityList = null as any;
export const getPolicyObjectExtendedCommunityListOutput: typeof import("./getPolicyObjectExtendedCommunityList").getPolicyObjectExtendedCommunityListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectExtendedCommunityList","getPolicyObjectExtendedCommunityListOutput"], () => require("./getPolicyObjectExtendedCommunityList"));

export { GetPolicyObjectFeatureProfileArgs, GetPolicyObjectFeatureProfileResult, GetPolicyObjectFeatureProfileOutputArgs } from "./getPolicyObjectFeatureProfile";
export const getPolicyObjectFeatureProfile: typeof import("./getPolicyObjectFeatureProfile").getPolicyObjectFeatureProfile = null as any;
export const getPolicyObjectFeatureProfileOutput: typeof import("./getPolicyObjectFeatureProfile").getPolicyObjectFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectFeatureProfile","getPolicyObjectFeatureProfileOutput"], () => require("./getPolicyObjectFeatureProfile"));

export { GetPolicyObjectIpv4PrefixListArgs, GetPolicyObjectIpv4PrefixListResult, GetPolicyObjectIpv4PrefixListOutputArgs } from "./getPolicyObjectIpv4PrefixList";
export const getPolicyObjectIpv4PrefixList: typeof import("./getPolicyObjectIpv4PrefixList").getPolicyObjectIpv4PrefixList = null as any;
export const getPolicyObjectIpv4PrefixListOutput: typeof import("./getPolicyObjectIpv4PrefixList").getPolicyObjectIpv4PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectIpv4PrefixList","getPolicyObjectIpv4PrefixListOutput"], () => require("./getPolicyObjectIpv4PrefixList"));

export { GetPolicyObjectIpv6PrefixListArgs, GetPolicyObjectIpv6PrefixListResult, GetPolicyObjectIpv6PrefixListOutputArgs } from "./getPolicyObjectIpv6PrefixList";
export const getPolicyObjectIpv6PrefixList: typeof import("./getPolicyObjectIpv6PrefixList").getPolicyObjectIpv6PrefixList = null as any;
export const getPolicyObjectIpv6PrefixListOutput: typeof import("./getPolicyObjectIpv6PrefixList").getPolicyObjectIpv6PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectIpv6PrefixList","getPolicyObjectIpv6PrefixListOutput"], () => require("./getPolicyObjectIpv6PrefixList"));

export { GetPolicyObjectMirrorArgs, GetPolicyObjectMirrorResult, GetPolicyObjectMirrorOutputArgs } from "./getPolicyObjectMirror";
export const getPolicyObjectMirror: typeof import("./getPolicyObjectMirror").getPolicyObjectMirror = null as any;
export const getPolicyObjectMirrorOutput: typeof import("./getPolicyObjectMirror").getPolicyObjectMirrorOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectMirror","getPolicyObjectMirrorOutput"], () => require("./getPolicyObjectMirror"));

export { GetPolicyObjectPolicerArgs, GetPolicyObjectPolicerResult, GetPolicyObjectPolicerOutputArgs } from "./getPolicyObjectPolicer";
export const getPolicyObjectPolicer: typeof import("./getPolicyObjectPolicer").getPolicyObjectPolicer = null as any;
export const getPolicyObjectPolicerOutput: typeof import("./getPolicyObjectPolicer").getPolicyObjectPolicerOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectPolicer","getPolicyObjectPolicerOutput"], () => require("./getPolicyObjectPolicer"));

export { GetPolicyObjectPreferredColorGroupArgs, GetPolicyObjectPreferredColorGroupResult, GetPolicyObjectPreferredColorGroupOutputArgs } from "./getPolicyObjectPreferredColorGroup";
export const getPolicyObjectPreferredColorGroup: typeof import("./getPolicyObjectPreferredColorGroup").getPolicyObjectPreferredColorGroup = null as any;
export const getPolicyObjectPreferredColorGroupOutput: typeof import("./getPolicyObjectPreferredColorGroup").getPolicyObjectPreferredColorGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectPreferredColorGroup","getPolicyObjectPreferredColorGroupOutput"], () => require("./getPolicyObjectPreferredColorGroup"));

export { GetPolicyObjectSecurityDataIpv4PrefixListArgs, GetPolicyObjectSecurityDataIpv4PrefixListResult, GetPolicyObjectSecurityDataIpv4PrefixListOutputArgs } from "./getPolicyObjectSecurityDataIpv4PrefixList";
export const getPolicyObjectSecurityDataIpv4PrefixList: typeof import("./getPolicyObjectSecurityDataIpv4PrefixList").getPolicyObjectSecurityDataIpv4PrefixList = null as any;
export const getPolicyObjectSecurityDataIpv4PrefixListOutput: typeof import("./getPolicyObjectSecurityDataIpv4PrefixList").getPolicyObjectSecurityDataIpv4PrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityDataIpv4PrefixList","getPolicyObjectSecurityDataIpv4PrefixListOutput"], () => require("./getPolicyObjectSecurityDataIpv4PrefixList"));

export { GetPolicyObjectSecurityFqdnListArgs, GetPolicyObjectSecurityFqdnListResult, GetPolicyObjectSecurityFqdnListOutputArgs } from "./getPolicyObjectSecurityFqdnList";
export const getPolicyObjectSecurityFqdnList: typeof import("./getPolicyObjectSecurityFqdnList").getPolicyObjectSecurityFqdnList = null as any;
export const getPolicyObjectSecurityFqdnListOutput: typeof import("./getPolicyObjectSecurityFqdnList").getPolicyObjectSecurityFqdnListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityFqdnList","getPolicyObjectSecurityFqdnListOutput"], () => require("./getPolicyObjectSecurityFqdnList"));

export { GetPolicyObjectSecurityGeolocationListArgs, GetPolicyObjectSecurityGeolocationListResult, GetPolicyObjectSecurityGeolocationListOutputArgs } from "./getPolicyObjectSecurityGeolocationList";
export const getPolicyObjectSecurityGeolocationList: typeof import("./getPolicyObjectSecurityGeolocationList").getPolicyObjectSecurityGeolocationList = null as any;
export const getPolicyObjectSecurityGeolocationListOutput: typeof import("./getPolicyObjectSecurityGeolocationList").getPolicyObjectSecurityGeolocationListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityGeolocationList","getPolicyObjectSecurityGeolocationListOutput"], () => require("./getPolicyObjectSecurityGeolocationList"));

export { GetPolicyObjectSecurityIdentityListArgs, GetPolicyObjectSecurityIdentityListResult, GetPolicyObjectSecurityIdentityListOutputArgs } from "./getPolicyObjectSecurityIdentityList";
export const getPolicyObjectSecurityIdentityList: typeof import("./getPolicyObjectSecurityIdentityList").getPolicyObjectSecurityIdentityList = null as any;
export const getPolicyObjectSecurityIdentityListOutput: typeof import("./getPolicyObjectSecurityIdentityList").getPolicyObjectSecurityIdentityListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityIdentityList","getPolicyObjectSecurityIdentityListOutput"], () => require("./getPolicyObjectSecurityIdentityList"));

export { GetPolicyObjectSecurityIpsSignatureArgs, GetPolicyObjectSecurityIpsSignatureResult, GetPolicyObjectSecurityIpsSignatureOutputArgs } from "./getPolicyObjectSecurityIpsSignature";
export const getPolicyObjectSecurityIpsSignature: typeof import("./getPolicyObjectSecurityIpsSignature").getPolicyObjectSecurityIpsSignature = null as any;
export const getPolicyObjectSecurityIpsSignatureOutput: typeof import("./getPolicyObjectSecurityIpsSignature").getPolicyObjectSecurityIpsSignatureOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityIpsSignature","getPolicyObjectSecurityIpsSignatureOutput"], () => require("./getPolicyObjectSecurityIpsSignature"));

export { GetPolicyObjectSecurityLocalApplicationListArgs, GetPolicyObjectSecurityLocalApplicationListResult, GetPolicyObjectSecurityLocalApplicationListOutputArgs } from "./getPolicyObjectSecurityLocalApplicationList";
export const getPolicyObjectSecurityLocalApplicationList: typeof import("./getPolicyObjectSecurityLocalApplicationList").getPolicyObjectSecurityLocalApplicationList = null as any;
export const getPolicyObjectSecurityLocalApplicationListOutput: typeof import("./getPolicyObjectSecurityLocalApplicationList").getPolicyObjectSecurityLocalApplicationListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityLocalApplicationList","getPolicyObjectSecurityLocalApplicationListOutput"], () => require("./getPolicyObjectSecurityLocalApplicationList"));

export { GetPolicyObjectSecurityLocalDomainListArgs, GetPolicyObjectSecurityLocalDomainListResult, GetPolicyObjectSecurityLocalDomainListOutputArgs } from "./getPolicyObjectSecurityLocalDomainList";
export const getPolicyObjectSecurityLocalDomainList: typeof import("./getPolicyObjectSecurityLocalDomainList").getPolicyObjectSecurityLocalDomainList = null as any;
export const getPolicyObjectSecurityLocalDomainListOutput: typeof import("./getPolicyObjectSecurityLocalDomainList").getPolicyObjectSecurityLocalDomainListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityLocalDomainList","getPolicyObjectSecurityLocalDomainListOutput"], () => require("./getPolicyObjectSecurityLocalDomainList"));

export { GetPolicyObjectSecurityPortListArgs, GetPolicyObjectSecurityPortListResult, GetPolicyObjectSecurityPortListOutputArgs } from "./getPolicyObjectSecurityPortList";
export const getPolicyObjectSecurityPortList: typeof import("./getPolicyObjectSecurityPortList").getPolicyObjectSecurityPortList = null as any;
export const getPolicyObjectSecurityPortListOutput: typeof import("./getPolicyObjectSecurityPortList").getPolicyObjectSecurityPortListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityPortList","getPolicyObjectSecurityPortListOutput"], () => require("./getPolicyObjectSecurityPortList"));

export { GetPolicyObjectSecurityScalableGroupTagListArgs, GetPolicyObjectSecurityScalableGroupTagListResult, GetPolicyObjectSecurityScalableGroupTagListOutputArgs } from "./getPolicyObjectSecurityScalableGroupTagList";
export const getPolicyObjectSecurityScalableGroupTagList: typeof import("./getPolicyObjectSecurityScalableGroupTagList").getPolicyObjectSecurityScalableGroupTagList = null as any;
export const getPolicyObjectSecurityScalableGroupTagListOutput: typeof import("./getPolicyObjectSecurityScalableGroupTagList").getPolicyObjectSecurityScalableGroupTagListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityScalableGroupTagList","getPolicyObjectSecurityScalableGroupTagListOutput"], () => require("./getPolicyObjectSecurityScalableGroupTagList"));

export { GetPolicyObjectSecurityUrlAllowListArgs, GetPolicyObjectSecurityUrlAllowListResult, GetPolicyObjectSecurityUrlAllowListOutputArgs } from "./getPolicyObjectSecurityUrlAllowList";
export const getPolicyObjectSecurityUrlAllowList: typeof import("./getPolicyObjectSecurityUrlAllowList").getPolicyObjectSecurityUrlAllowList = null as any;
export const getPolicyObjectSecurityUrlAllowListOutput: typeof import("./getPolicyObjectSecurityUrlAllowList").getPolicyObjectSecurityUrlAllowListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityUrlAllowList","getPolicyObjectSecurityUrlAllowListOutput"], () => require("./getPolicyObjectSecurityUrlAllowList"));

export { GetPolicyObjectSecurityUrlBlockListArgs, GetPolicyObjectSecurityUrlBlockListResult, GetPolicyObjectSecurityUrlBlockListOutputArgs } from "./getPolicyObjectSecurityUrlBlockList";
export const getPolicyObjectSecurityUrlBlockList: typeof import("./getPolicyObjectSecurityUrlBlockList").getPolicyObjectSecurityUrlBlockList = null as any;
export const getPolicyObjectSecurityUrlBlockListOutput: typeof import("./getPolicyObjectSecurityUrlBlockList").getPolicyObjectSecurityUrlBlockListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSecurityUrlBlockList","getPolicyObjectSecurityUrlBlockListOutput"], () => require("./getPolicyObjectSecurityUrlBlockList"));

export { GetPolicyObjectSlaClassListArgs, GetPolicyObjectSlaClassListResult, GetPolicyObjectSlaClassListOutputArgs } from "./getPolicyObjectSlaClassList";
export const getPolicyObjectSlaClassList: typeof import("./getPolicyObjectSlaClassList").getPolicyObjectSlaClassList = null as any;
export const getPolicyObjectSlaClassListOutput: typeof import("./getPolicyObjectSlaClassList").getPolicyObjectSlaClassListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectSlaClassList","getPolicyObjectSlaClassListOutput"], () => require("./getPolicyObjectSlaClassList"));

export { GetPolicyObjectStandardCommunityListArgs, GetPolicyObjectStandardCommunityListResult, GetPolicyObjectStandardCommunityListOutputArgs } from "./getPolicyObjectStandardCommunityList";
export const getPolicyObjectStandardCommunityList: typeof import("./getPolicyObjectStandardCommunityList").getPolicyObjectStandardCommunityList = null as any;
export const getPolicyObjectStandardCommunityListOutput: typeof import("./getPolicyObjectStandardCommunityList").getPolicyObjectStandardCommunityListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectStandardCommunityList","getPolicyObjectStandardCommunityListOutput"], () => require("./getPolicyObjectStandardCommunityList"));

export { GetPolicyObjectTlocListArgs, GetPolicyObjectTlocListResult, GetPolicyObjectTlocListOutputArgs } from "./getPolicyObjectTlocList";
export const getPolicyObjectTlocList: typeof import("./getPolicyObjectTlocList").getPolicyObjectTlocList = null as any;
export const getPolicyObjectTlocListOutput: typeof import("./getPolicyObjectTlocList").getPolicyObjectTlocListOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectTlocList","getPolicyObjectTlocListOutput"], () => require("./getPolicyObjectTlocList"));

export { GetPolicyObjectVpnGroupArgs, GetPolicyObjectVpnGroupResult, GetPolicyObjectVpnGroupOutputArgs } from "./getPolicyObjectVpnGroup";
export const getPolicyObjectVpnGroup: typeof import("./getPolicyObjectVpnGroup").getPolicyObjectVpnGroup = null as any;
export const getPolicyObjectVpnGroupOutput: typeof import("./getPolicyObjectVpnGroup").getPolicyObjectVpnGroupOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyObjectVpnGroup","getPolicyObjectVpnGroupOutput"], () => require("./getPolicyObjectVpnGroup"));

export { GetPortListPolicyObjectArgs, GetPortListPolicyObjectResult, GetPortListPolicyObjectOutputArgs } from "./getPortListPolicyObject";
export const getPortListPolicyObject: typeof import("./getPortListPolicyObject").getPortListPolicyObject = null as any;
export const getPortListPolicyObjectOutput: typeof import("./getPortListPolicyObject").getPortListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getPortListPolicyObject","getPortListPolicyObjectOutput"], () => require("./getPortListPolicyObject"));

export { GetPreferredColorGroupPolicyObjectArgs, GetPreferredColorGroupPolicyObjectResult, GetPreferredColorGroupPolicyObjectOutputArgs } from "./getPreferredColorGroupPolicyObject";
export const getPreferredColorGroupPolicyObject: typeof import("./getPreferredColorGroupPolicyObject").getPreferredColorGroupPolicyObject = null as any;
export const getPreferredColorGroupPolicyObjectOutput: typeof import("./getPreferredColorGroupPolicyObject").getPreferredColorGroupPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getPreferredColorGroupPolicyObject","getPreferredColorGroupPolicyObjectOutput"], () => require("./getPreferredColorGroupPolicyObject"));

export { GetProtocolListPolicyObjectArgs, GetProtocolListPolicyObjectResult, GetProtocolListPolicyObjectOutputArgs } from "./getProtocolListPolicyObject";
export const getProtocolListPolicyObject: typeof import("./getProtocolListPolicyObject").getProtocolListPolicyObject = null as any;
export const getProtocolListPolicyObjectOutput: typeof import("./getProtocolListPolicyObject").getProtocolListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolListPolicyObject","getProtocolListPolicyObjectOutput"], () => require("./getProtocolListPolicyObject"));

export { GetQosMapPolicyDefinitionArgs, GetQosMapPolicyDefinitionResult, GetQosMapPolicyDefinitionOutputArgs } from "./getQosMapPolicyDefinition";
export const getQosMapPolicyDefinition: typeof import("./getQosMapPolicyDefinition").getQosMapPolicyDefinition = null as any;
export const getQosMapPolicyDefinitionOutput: typeof import("./getQosMapPolicyDefinition").getQosMapPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getQosMapPolicyDefinition","getQosMapPolicyDefinitionOutput"], () => require("./getQosMapPolicyDefinition"));

export { GetRegionListPolicyObjectArgs, GetRegionListPolicyObjectResult, GetRegionListPolicyObjectOutputArgs } from "./getRegionListPolicyObject";
export const getRegionListPolicyObject: typeof import("./getRegionListPolicyObject").getRegionListPolicyObject = null as any;
export const getRegionListPolicyObjectOutput: typeof import("./getRegionListPolicyObject").getRegionListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getRegionListPolicyObject","getRegionListPolicyObjectOutput"], () => require("./getRegionListPolicyObject"));

export { GetRewriteRulePolicyDefinitionArgs, GetRewriteRulePolicyDefinitionResult, GetRewriteRulePolicyDefinitionOutputArgs } from "./getRewriteRulePolicyDefinition";
export const getRewriteRulePolicyDefinition: typeof import("./getRewriteRulePolicyDefinition").getRewriteRulePolicyDefinition = null as any;
export const getRewriteRulePolicyDefinitionOutput: typeof import("./getRewriteRulePolicyDefinition").getRewriteRulePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRewriteRulePolicyDefinition","getRewriteRulePolicyDefinitionOutput"], () => require("./getRewriteRulePolicyDefinition"));

export { GetRoutePolicyDefinitionArgs, GetRoutePolicyDefinitionResult, GetRoutePolicyDefinitionOutputArgs } from "./getRoutePolicyDefinition";
export const getRoutePolicyDefinition: typeof import("./getRoutePolicyDefinition").getRoutePolicyDefinition = null as any;
export const getRoutePolicyDefinitionOutput: typeof import("./getRoutePolicyDefinition").getRoutePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRoutePolicyDefinition","getRoutePolicyDefinitionOutput"], () => require("./getRoutePolicyDefinition"));

export { GetRuleSetPolicyDefinitionArgs, GetRuleSetPolicyDefinitionResult, GetRuleSetPolicyDefinitionOutputArgs } from "./getRuleSetPolicyDefinition";
export const getRuleSetPolicyDefinition: typeof import("./getRuleSetPolicyDefinition").getRuleSetPolicyDefinition = null as any;
export const getRuleSetPolicyDefinitionOutput: typeof import("./getRuleSetPolicyDefinition").getRuleSetPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSetPolicyDefinition","getRuleSetPolicyDefinitionOutput"], () => require("./getRuleSetPolicyDefinition"));

export { GetSecurityAppHostingFeatureTemplateArgs, GetSecurityAppHostingFeatureTemplateResult, GetSecurityAppHostingFeatureTemplateOutputArgs } from "./getSecurityAppHostingFeatureTemplate";
export const getSecurityAppHostingFeatureTemplate: typeof import("./getSecurityAppHostingFeatureTemplate").getSecurityAppHostingFeatureTemplate = null as any;
export const getSecurityAppHostingFeatureTemplateOutput: typeof import("./getSecurityAppHostingFeatureTemplate").getSecurityAppHostingFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAppHostingFeatureTemplate","getSecurityAppHostingFeatureTemplateOutput"], () => require("./getSecurityAppHostingFeatureTemplate"));

export { GetSecurityPolicyArgs, GetSecurityPolicyResult, GetSecurityPolicyOutputArgs } from "./getSecurityPolicy";
export const getSecurityPolicy: typeof import("./getSecurityPolicy").getSecurityPolicy = null as any;
export const getSecurityPolicyOutput: typeof import("./getSecurityPolicy").getSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityPolicy","getSecurityPolicyOutput"], () => require("./getSecurityPolicy"));

export { GetServiceFeatureProfileArgs, GetServiceFeatureProfileResult, GetServiceFeatureProfileOutputArgs } from "./getServiceFeatureProfile";
export const getServiceFeatureProfile: typeof import("./getServiceFeatureProfile").getServiceFeatureProfile = null as any;
export const getServiceFeatureProfileOutput: typeof import("./getServiceFeatureProfile").getServiceFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getServiceFeatureProfile","getServiceFeatureProfileOutput"], () => require("./getServiceFeatureProfile"));

export { GetServiceIpv4AclFeatureArgs, GetServiceIpv4AclFeatureResult, GetServiceIpv4AclFeatureOutputArgs } from "./getServiceIpv4AclFeature";
export const getServiceIpv4AclFeature: typeof import("./getServiceIpv4AclFeature").getServiceIpv4AclFeature = null as any;
export const getServiceIpv4AclFeatureOutput: typeof import("./getServiceIpv4AclFeature").getServiceIpv4AclFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceIpv4AclFeature","getServiceIpv4AclFeatureOutput"], () => require("./getServiceIpv4AclFeature"));

export { GetServiceIpv6AclFeatureArgs, GetServiceIpv6AclFeatureResult, GetServiceIpv6AclFeatureOutputArgs } from "./getServiceIpv6AclFeature";
export const getServiceIpv6AclFeature: typeof import("./getServiceIpv6AclFeature").getServiceIpv6AclFeature = null as any;
export const getServiceIpv6AclFeatureOutput: typeof import("./getServiceIpv6AclFeature").getServiceIpv6AclFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceIpv6AclFeature","getServiceIpv6AclFeatureOutput"], () => require("./getServiceIpv6AclFeature"));

export { GetServiceLanVpnFeatureArgs, GetServiceLanVpnFeatureResult, GetServiceLanVpnFeatureOutputArgs } from "./getServiceLanVpnFeature";
export const getServiceLanVpnFeature: typeof import("./getServiceLanVpnFeature").getServiceLanVpnFeature = null as any;
export const getServiceLanVpnFeatureOutput: typeof import("./getServiceLanVpnFeature").getServiceLanVpnFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeature","getServiceLanVpnFeatureOutput"], () => require("./getServiceLanVpnFeature"));

export { GetServiceLanVpnFeatureAssociateMulticastFeatureArgs, GetServiceLanVpnFeatureAssociateMulticastFeatureResult, GetServiceLanVpnFeatureAssociateMulticastFeatureOutputArgs } from "./getServiceLanVpnFeatureAssociateMulticastFeature";
export const getServiceLanVpnFeatureAssociateMulticastFeature: typeof import("./getServiceLanVpnFeatureAssociateMulticastFeature").getServiceLanVpnFeatureAssociateMulticastFeature = null as any;
export const getServiceLanVpnFeatureAssociateMulticastFeatureOutput: typeof import("./getServiceLanVpnFeatureAssociateMulticastFeature").getServiceLanVpnFeatureAssociateMulticastFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeatureAssociateMulticastFeature","getServiceLanVpnFeatureAssociateMulticastFeatureOutput"], () => require("./getServiceLanVpnFeatureAssociateMulticastFeature"));

export { GetServiceLanVpnFeatureAssociateRoutingBgpFeatureArgs, GetServiceLanVpnFeatureAssociateRoutingBgpFeatureResult, GetServiceLanVpnFeatureAssociateRoutingBgpFeatureOutputArgs } from "./getServiceLanVpnFeatureAssociateRoutingBgpFeature";
export const getServiceLanVpnFeatureAssociateRoutingBgpFeature: typeof import("./getServiceLanVpnFeatureAssociateRoutingBgpFeature").getServiceLanVpnFeatureAssociateRoutingBgpFeature = null as any;
export const getServiceLanVpnFeatureAssociateRoutingBgpFeatureOutput: typeof import("./getServiceLanVpnFeatureAssociateRoutingBgpFeature").getServiceLanVpnFeatureAssociateRoutingBgpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeatureAssociateRoutingBgpFeature","getServiceLanVpnFeatureAssociateRoutingBgpFeatureOutput"], () => require("./getServiceLanVpnFeatureAssociateRoutingBgpFeature"));

export { GetServiceLanVpnFeatureAssociateRoutingEigrpFeatureArgs, GetServiceLanVpnFeatureAssociateRoutingEigrpFeatureResult, GetServiceLanVpnFeatureAssociateRoutingEigrpFeatureOutputArgs } from "./getServiceLanVpnFeatureAssociateRoutingEigrpFeature";
export const getServiceLanVpnFeatureAssociateRoutingEigrpFeature: typeof import("./getServiceLanVpnFeatureAssociateRoutingEigrpFeature").getServiceLanVpnFeatureAssociateRoutingEigrpFeature = null as any;
export const getServiceLanVpnFeatureAssociateRoutingEigrpFeatureOutput: typeof import("./getServiceLanVpnFeatureAssociateRoutingEigrpFeature").getServiceLanVpnFeatureAssociateRoutingEigrpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeatureAssociateRoutingEigrpFeature","getServiceLanVpnFeatureAssociateRoutingEigrpFeatureOutput"], () => require("./getServiceLanVpnFeatureAssociateRoutingEigrpFeature"));

export { GetServiceLanVpnFeatureAssociateRoutingOspfFeatureArgs, GetServiceLanVpnFeatureAssociateRoutingOspfFeatureResult, GetServiceLanVpnFeatureAssociateRoutingOspfFeatureOutputArgs } from "./getServiceLanVpnFeatureAssociateRoutingOspfFeature";
export const getServiceLanVpnFeatureAssociateRoutingOspfFeature: typeof import("./getServiceLanVpnFeatureAssociateRoutingOspfFeature").getServiceLanVpnFeatureAssociateRoutingOspfFeature = null as any;
export const getServiceLanVpnFeatureAssociateRoutingOspfFeatureOutput: typeof import("./getServiceLanVpnFeatureAssociateRoutingOspfFeature").getServiceLanVpnFeatureAssociateRoutingOspfFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeatureAssociateRoutingOspfFeature","getServiceLanVpnFeatureAssociateRoutingOspfFeatureOutput"], () => require("./getServiceLanVpnFeatureAssociateRoutingOspfFeature"));

export { GetServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureArgs, GetServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureResult, GetServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutputArgs } from "./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature";
export const getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature: typeof import("./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature = null as any;
export const getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutput: typeof import("./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature","getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutput"], () => require("./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature"));

export { GetServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureArgs, GetServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureResult, GetServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutputArgs } from "./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature";
export const getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature: typeof import("./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature = null as any;
export const getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutput: typeof import("./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature","getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutput"], () => require("./getServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature"));

export { GetServiceLanVpnInterfaceEthernetFeatureArgs, GetServiceLanVpnInterfaceEthernetFeatureResult, GetServiceLanVpnInterfaceEthernetFeatureOutputArgs } from "./getServiceLanVpnInterfaceEthernetFeature";
export const getServiceLanVpnInterfaceEthernetFeature: typeof import("./getServiceLanVpnInterfaceEthernetFeature").getServiceLanVpnInterfaceEthernetFeature = null as any;
export const getServiceLanVpnInterfaceEthernetFeatureOutput: typeof import("./getServiceLanVpnInterfaceEthernetFeature").getServiceLanVpnInterfaceEthernetFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnInterfaceEthernetFeature","getServiceLanVpnInterfaceEthernetFeatureOutput"], () => require("./getServiceLanVpnInterfaceEthernetFeature"));

export { GetServiceLanVpnInterfaceGreFeatureArgs, GetServiceLanVpnInterfaceGreFeatureResult, GetServiceLanVpnInterfaceGreFeatureOutputArgs } from "./getServiceLanVpnInterfaceGreFeature";
export const getServiceLanVpnInterfaceGreFeature: typeof import("./getServiceLanVpnInterfaceGreFeature").getServiceLanVpnInterfaceGreFeature = null as any;
export const getServiceLanVpnInterfaceGreFeatureOutput: typeof import("./getServiceLanVpnInterfaceGreFeature").getServiceLanVpnInterfaceGreFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnInterfaceGreFeature","getServiceLanVpnInterfaceGreFeatureOutput"], () => require("./getServiceLanVpnInterfaceGreFeature"));

export { GetServiceLanVpnInterfaceIpsecFeatureArgs, GetServiceLanVpnInterfaceIpsecFeatureResult, GetServiceLanVpnInterfaceIpsecFeatureOutputArgs } from "./getServiceLanVpnInterfaceIpsecFeature";
export const getServiceLanVpnInterfaceIpsecFeature: typeof import("./getServiceLanVpnInterfaceIpsecFeature").getServiceLanVpnInterfaceIpsecFeature = null as any;
export const getServiceLanVpnInterfaceIpsecFeatureOutput: typeof import("./getServiceLanVpnInterfaceIpsecFeature").getServiceLanVpnInterfaceIpsecFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnInterfaceIpsecFeature","getServiceLanVpnInterfaceIpsecFeatureOutput"], () => require("./getServiceLanVpnInterfaceIpsecFeature"));

export { GetServiceLanVpnInterfaceSviFeatureArgs, GetServiceLanVpnInterfaceSviFeatureResult, GetServiceLanVpnInterfaceSviFeatureOutputArgs } from "./getServiceLanVpnInterfaceSviFeature";
export const getServiceLanVpnInterfaceSviFeature: typeof import("./getServiceLanVpnInterfaceSviFeature").getServiceLanVpnInterfaceSviFeature = null as any;
export const getServiceLanVpnInterfaceSviFeatureOutput: typeof import("./getServiceLanVpnInterfaceSviFeature").getServiceLanVpnInterfaceSviFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnInterfaceSviFeature","getServiceLanVpnInterfaceSviFeatureOutput"], () => require("./getServiceLanVpnInterfaceSviFeature"));

export { GetServiceMulticastFeatureArgs, GetServiceMulticastFeatureResult, GetServiceMulticastFeatureOutputArgs } from "./getServiceMulticastFeature";
export const getServiceMulticastFeature: typeof import("./getServiceMulticastFeature").getServiceMulticastFeature = null as any;
export const getServiceMulticastFeatureOutput: typeof import("./getServiceMulticastFeature").getServiceMulticastFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceMulticastFeature","getServiceMulticastFeatureOutput"], () => require("./getServiceMulticastFeature"));

export { GetServiceObjectTrackerFeatureArgs, GetServiceObjectTrackerFeatureResult, GetServiceObjectTrackerFeatureOutputArgs } from "./getServiceObjectTrackerFeature";
export const getServiceObjectTrackerFeature: typeof import("./getServiceObjectTrackerFeature").getServiceObjectTrackerFeature = null as any;
export const getServiceObjectTrackerFeatureOutput: typeof import("./getServiceObjectTrackerFeature").getServiceObjectTrackerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceObjectTrackerFeature","getServiceObjectTrackerFeatureOutput"], () => require("./getServiceObjectTrackerFeature"));

export { GetServiceObjectTrackerGroupFeatureArgs, GetServiceObjectTrackerGroupFeatureResult, GetServiceObjectTrackerGroupFeatureOutputArgs } from "./getServiceObjectTrackerGroupFeature";
export const getServiceObjectTrackerGroupFeature: typeof import("./getServiceObjectTrackerGroupFeature").getServiceObjectTrackerGroupFeature = null as any;
export const getServiceObjectTrackerGroupFeatureOutput: typeof import("./getServiceObjectTrackerGroupFeature").getServiceObjectTrackerGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceObjectTrackerGroupFeature","getServiceObjectTrackerGroupFeatureOutput"], () => require("./getServiceObjectTrackerGroupFeature"));

export { GetServiceRoutePolicyFeatureArgs, GetServiceRoutePolicyFeatureResult, GetServiceRoutePolicyFeatureOutputArgs } from "./getServiceRoutePolicyFeature";
export const getServiceRoutePolicyFeature: typeof import("./getServiceRoutePolicyFeature").getServiceRoutePolicyFeature = null as any;
export const getServiceRoutePolicyFeatureOutput: typeof import("./getServiceRoutePolicyFeature").getServiceRoutePolicyFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRoutePolicyFeature","getServiceRoutePolicyFeatureOutput"], () => require("./getServiceRoutePolicyFeature"));

export { GetServiceRoutingBgpFeatureArgs, GetServiceRoutingBgpFeatureResult, GetServiceRoutingBgpFeatureOutputArgs } from "./getServiceRoutingBgpFeature";
export const getServiceRoutingBgpFeature: typeof import("./getServiceRoutingBgpFeature").getServiceRoutingBgpFeature = null as any;
export const getServiceRoutingBgpFeatureOutput: typeof import("./getServiceRoutingBgpFeature").getServiceRoutingBgpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRoutingBgpFeature","getServiceRoutingBgpFeatureOutput"], () => require("./getServiceRoutingBgpFeature"));

export { GetServiceRoutingEigrpFeatureArgs, GetServiceRoutingEigrpFeatureResult, GetServiceRoutingEigrpFeatureOutputArgs } from "./getServiceRoutingEigrpFeature";
export const getServiceRoutingEigrpFeature: typeof import("./getServiceRoutingEigrpFeature").getServiceRoutingEigrpFeature = null as any;
export const getServiceRoutingEigrpFeatureOutput: typeof import("./getServiceRoutingEigrpFeature").getServiceRoutingEigrpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRoutingEigrpFeature","getServiceRoutingEigrpFeatureOutput"], () => require("./getServiceRoutingEigrpFeature"));

export { GetServiceRoutingOspfFeatureArgs, GetServiceRoutingOspfFeatureResult, GetServiceRoutingOspfFeatureOutputArgs } from "./getServiceRoutingOspfFeature";
export const getServiceRoutingOspfFeature: typeof import("./getServiceRoutingOspfFeature").getServiceRoutingOspfFeature = null as any;
export const getServiceRoutingOspfFeatureOutput: typeof import("./getServiceRoutingOspfFeature").getServiceRoutingOspfFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRoutingOspfFeature","getServiceRoutingOspfFeatureOutput"], () => require("./getServiceRoutingOspfFeature"));

export { GetServiceRoutingOspfv3Ipv4FeatureArgs, GetServiceRoutingOspfv3Ipv4FeatureResult, GetServiceRoutingOspfv3Ipv4FeatureOutputArgs } from "./getServiceRoutingOspfv3Ipv4Feature";
export const getServiceRoutingOspfv3Ipv4Feature: typeof import("./getServiceRoutingOspfv3Ipv4Feature").getServiceRoutingOspfv3Ipv4Feature = null as any;
export const getServiceRoutingOspfv3Ipv4FeatureOutput: typeof import("./getServiceRoutingOspfv3Ipv4Feature").getServiceRoutingOspfv3Ipv4FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRoutingOspfv3Ipv4Feature","getServiceRoutingOspfv3Ipv4FeatureOutput"], () => require("./getServiceRoutingOspfv3Ipv4Feature"));

export { GetServiceRoutingOspfv3Ipv6FeatureArgs, GetServiceRoutingOspfv3Ipv6FeatureResult, GetServiceRoutingOspfv3Ipv6FeatureOutputArgs } from "./getServiceRoutingOspfv3Ipv6Feature";
export const getServiceRoutingOspfv3Ipv6Feature: typeof import("./getServiceRoutingOspfv3Ipv6Feature").getServiceRoutingOspfv3Ipv6Feature = null as any;
export const getServiceRoutingOspfv3Ipv6FeatureOutput: typeof import("./getServiceRoutingOspfv3Ipv6Feature").getServiceRoutingOspfv3Ipv6FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceRoutingOspfv3Ipv6Feature","getServiceRoutingOspfv3Ipv6FeatureOutput"], () => require("./getServiceRoutingOspfv3Ipv6Feature"));

export { GetServiceSwitchportFeatureArgs, GetServiceSwitchportFeatureResult, GetServiceSwitchportFeatureOutputArgs } from "./getServiceSwitchportFeature";
export const getServiceSwitchportFeature: typeof import("./getServiceSwitchportFeature").getServiceSwitchportFeature = null as any;
export const getServiceSwitchportFeatureOutput: typeof import("./getServiceSwitchportFeature").getServiceSwitchportFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceSwitchportFeature","getServiceSwitchportFeatureOutput"], () => require("./getServiceSwitchportFeature"));

export { GetServiceTrackerFeatureArgs, GetServiceTrackerFeatureResult, GetServiceTrackerFeatureOutputArgs } from "./getServiceTrackerFeature";
export const getServiceTrackerFeature: typeof import("./getServiceTrackerFeature").getServiceTrackerFeature = null as any;
export const getServiceTrackerFeatureOutput: typeof import("./getServiceTrackerFeature").getServiceTrackerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTrackerFeature","getServiceTrackerFeatureOutput"], () => require("./getServiceTrackerFeature"));

export { GetServiceTrackerGroupFeatureArgs, GetServiceTrackerGroupFeatureResult, GetServiceTrackerGroupFeatureOutputArgs } from "./getServiceTrackerGroupFeature";
export const getServiceTrackerGroupFeature: typeof import("./getServiceTrackerGroupFeature").getServiceTrackerGroupFeature = null as any;
export const getServiceTrackerGroupFeatureOutput: typeof import("./getServiceTrackerGroupFeature").getServiceTrackerGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTrackerGroupFeature","getServiceTrackerGroupFeatureOutput"], () => require("./getServiceTrackerGroupFeature"));

export { GetServiceWirelessLanFeatureArgs, GetServiceWirelessLanFeatureResult, GetServiceWirelessLanFeatureOutputArgs } from "./getServiceWirelessLanFeature";
export const getServiceWirelessLanFeature: typeof import("./getServiceWirelessLanFeature").getServiceWirelessLanFeature = null as any;
export const getServiceWirelessLanFeatureOutput: typeof import("./getServiceWirelessLanFeature").getServiceWirelessLanFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getServiceWirelessLanFeature","getServiceWirelessLanFeatureOutput"], () => require("./getServiceWirelessLanFeature"));

export { GetSigSecurityFeatureProfileArgs, GetSigSecurityFeatureProfileResult, GetSigSecurityFeatureProfileOutputArgs } from "./getSigSecurityFeatureProfile";
export const getSigSecurityFeatureProfile: typeof import("./getSigSecurityFeatureProfile").getSigSecurityFeatureProfile = null as any;
export const getSigSecurityFeatureProfileOutput: typeof import("./getSigSecurityFeatureProfile").getSigSecurityFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSigSecurityFeatureProfile","getSigSecurityFeatureProfileOutput"], () => require("./getSigSecurityFeatureProfile"));

export { GetSiteListPolicyObjectArgs, GetSiteListPolicyObjectResult, GetSiteListPolicyObjectOutputArgs } from "./getSiteListPolicyObject";
export const getSiteListPolicyObject: typeof import("./getSiteListPolicyObject").getSiteListPolicyObject = null as any;
export const getSiteListPolicyObjectOutput: typeof import("./getSiteListPolicyObject").getSiteListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getSiteListPolicyObject","getSiteListPolicyObjectOutput"], () => require("./getSiteListPolicyObject"));

export { GetSlaClassPolicyObjectArgs, GetSlaClassPolicyObjectResult, GetSlaClassPolicyObjectOutputArgs } from "./getSlaClassPolicyObject";
export const getSlaClassPolicyObject: typeof import("./getSlaClassPolicyObject").getSlaClassPolicyObject = null as any;
export const getSlaClassPolicyObjectOutput: typeof import("./getSlaClassPolicyObject").getSlaClassPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getSlaClassPolicyObject","getSlaClassPolicyObjectOutput"], () => require("./getSlaClassPolicyObject"));

export { GetStandardCommunityListPolicyObjectArgs, GetStandardCommunityListPolicyObjectResult, GetStandardCommunityListPolicyObjectOutputArgs } from "./getStandardCommunityListPolicyObject";
export const getStandardCommunityListPolicyObject: typeof import("./getStandardCommunityListPolicyObject").getStandardCommunityListPolicyObject = null as any;
export const getStandardCommunityListPolicyObjectOutput: typeof import("./getStandardCommunityListPolicyObject").getStandardCommunityListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getStandardCommunityListPolicyObject","getStandardCommunityListPolicyObjectOutput"], () => require("./getStandardCommunityListPolicyObject"));

export { GetSwitchportFeatureTemplateArgs, GetSwitchportFeatureTemplateResult, GetSwitchportFeatureTemplateOutputArgs } from "./getSwitchportFeatureTemplate";
export const getSwitchportFeatureTemplate: typeof import("./getSwitchportFeatureTemplate").getSwitchportFeatureTemplate = null as any;
export const getSwitchportFeatureTemplateOutput: typeof import("./getSwitchportFeatureTemplate").getSwitchportFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchportFeatureTemplate","getSwitchportFeatureTemplateOutput"], () => require("./getSwitchportFeatureTemplate"));

export { GetSystemAaaFeatureArgs, GetSystemAaaFeatureResult, GetSystemAaaFeatureOutputArgs } from "./getSystemAaaFeature";
export const getSystemAaaFeature: typeof import("./getSystemAaaFeature").getSystemAaaFeature = null as any;
export const getSystemAaaFeatureOutput: typeof import("./getSystemAaaFeature").getSystemAaaFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAaaFeature","getSystemAaaFeatureOutput"], () => require("./getSystemAaaFeature"));

export { GetSystemBannerFeatureArgs, GetSystemBannerFeatureResult, GetSystemBannerFeatureOutputArgs } from "./getSystemBannerFeature";
export const getSystemBannerFeature: typeof import("./getSystemBannerFeature").getSystemBannerFeature = null as any;
export const getSystemBannerFeatureOutput: typeof import("./getSystemBannerFeature").getSystemBannerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBannerFeature","getSystemBannerFeatureOutput"], () => require("./getSystemBannerFeature"));

export { GetSystemBasicFeatureArgs, GetSystemBasicFeatureResult, GetSystemBasicFeatureOutputArgs } from "./getSystemBasicFeature";
export const getSystemBasicFeature: typeof import("./getSystemBasicFeature").getSystemBasicFeature = null as any;
export const getSystemBasicFeatureOutput: typeof import("./getSystemBasicFeature").getSystemBasicFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBasicFeature","getSystemBasicFeatureOutput"], () => require("./getSystemBasicFeature"));

export { GetSystemBfdFeatureArgs, GetSystemBfdFeatureResult, GetSystemBfdFeatureOutputArgs } from "./getSystemBfdFeature";
export const getSystemBfdFeature: typeof import("./getSystemBfdFeature").getSystemBfdFeature = null as any;
export const getSystemBfdFeatureOutput: typeof import("./getSystemBfdFeature").getSystemBfdFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBfdFeature","getSystemBfdFeatureOutput"], () => require("./getSystemBfdFeature"));

export { GetSystemFeatureProfileArgs, GetSystemFeatureProfileResult, GetSystemFeatureProfileOutputArgs } from "./getSystemFeatureProfile";
export const getSystemFeatureProfile: typeof import("./getSystemFeatureProfile").getSystemFeatureProfile = null as any;
export const getSystemFeatureProfileOutput: typeof import("./getSystemFeatureProfile").getSystemFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFeatureProfile","getSystemFeatureProfileOutput"], () => require("./getSystemFeatureProfile"));

export { GetSystemFlexiblePortSpeedFeatureArgs, GetSystemFlexiblePortSpeedFeatureResult, GetSystemFlexiblePortSpeedFeatureOutputArgs } from "./getSystemFlexiblePortSpeedFeature";
export const getSystemFlexiblePortSpeedFeature: typeof import("./getSystemFlexiblePortSpeedFeature").getSystemFlexiblePortSpeedFeature = null as any;
export const getSystemFlexiblePortSpeedFeatureOutput: typeof import("./getSystemFlexiblePortSpeedFeature").getSystemFlexiblePortSpeedFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFlexiblePortSpeedFeature","getSystemFlexiblePortSpeedFeatureOutput"], () => require("./getSystemFlexiblePortSpeedFeature"));

export { GetSystemGlobalFeatureArgs, GetSystemGlobalFeatureResult, GetSystemGlobalFeatureOutputArgs } from "./getSystemGlobalFeature";
export const getSystemGlobalFeature: typeof import("./getSystemGlobalFeature").getSystemGlobalFeature = null as any;
export const getSystemGlobalFeatureOutput: typeof import("./getSystemGlobalFeature").getSystemGlobalFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGlobalFeature","getSystemGlobalFeatureOutput"], () => require("./getSystemGlobalFeature"));

export { GetSystemIpv4DeviceAccessFeatureArgs, GetSystemIpv4DeviceAccessFeatureResult, GetSystemIpv4DeviceAccessFeatureOutputArgs } from "./getSystemIpv4DeviceAccessFeature";
export const getSystemIpv4DeviceAccessFeature: typeof import("./getSystemIpv4DeviceAccessFeature").getSystemIpv4DeviceAccessFeature = null as any;
export const getSystemIpv4DeviceAccessFeatureOutput: typeof import("./getSystemIpv4DeviceAccessFeature").getSystemIpv4DeviceAccessFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv4DeviceAccessFeature","getSystemIpv4DeviceAccessFeatureOutput"], () => require("./getSystemIpv4DeviceAccessFeature"));

export { GetSystemIpv6DeviceAccessFeatureArgs, GetSystemIpv6DeviceAccessFeatureResult, GetSystemIpv6DeviceAccessFeatureOutputArgs } from "./getSystemIpv6DeviceAccessFeature";
export const getSystemIpv6DeviceAccessFeature: typeof import("./getSystemIpv6DeviceAccessFeature").getSystemIpv6DeviceAccessFeature = null as any;
export const getSystemIpv6DeviceAccessFeatureOutput: typeof import("./getSystemIpv6DeviceAccessFeature").getSystemIpv6DeviceAccessFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemIpv6DeviceAccessFeature","getSystemIpv6DeviceAccessFeatureOutput"], () => require("./getSystemIpv6DeviceAccessFeature"));

export { GetSystemLoggingFeatureArgs, GetSystemLoggingFeatureResult, GetSystemLoggingFeatureOutputArgs } from "./getSystemLoggingFeature";
export const getSystemLoggingFeature: typeof import("./getSystemLoggingFeature").getSystemLoggingFeature = null as any;
export const getSystemLoggingFeatureOutput: typeof import("./getSystemLoggingFeature").getSystemLoggingFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLoggingFeature","getSystemLoggingFeatureOutput"], () => require("./getSystemLoggingFeature"));

export { GetSystemMrfFeatureArgs, GetSystemMrfFeatureResult, GetSystemMrfFeatureOutputArgs } from "./getSystemMrfFeature";
export const getSystemMrfFeature: typeof import("./getSystemMrfFeature").getSystemMrfFeature = null as any;
export const getSystemMrfFeatureOutput: typeof import("./getSystemMrfFeature").getSystemMrfFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemMrfFeature","getSystemMrfFeatureOutput"], () => require("./getSystemMrfFeature"));

export { GetSystemNtpFeatureArgs, GetSystemNtpFeatureResult, GetSystemNtpFeatureOutputArgs } from "./getSystemNtpFeature";
export const getSystemNtpFeature: typeof import("./getSystemNtpFeature").getSystemNtpFeature = null as any;
export const getSystemNtpFeatureOutput: typeof import("./getSystemNtpFeature").getSystemNtpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNtpFeature","getSystemNtpFeatureOutput"], () => require("./getSystemNtpFeature"));

export { GetSystemOmpFeatureArgs, GetSystemOmpFeatureResult, GetSystemOmpFeatureOutputArgs } from "./getSystemOmpFeature";
export const getSystemOmpFeature: typeof import("./getSystemOmpFeature").getSystemOmpFeature = null as any;
export const getSystemOmpFeatureOutput: typeof import("./getSystemOmpFeature").getSystemOmpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemOmpFeature","getSystemOmpFeatureOutput"], () => require("./getSystemOmpFeature"));

export { GetSystemPerformanceMonitoringFeatureArgs, GetSystemPerformanceMonitoringFeatureResult, GetSystemPerformanceMonitoringFeatureOutputArgs } from "./getSystemPerformanceMonitoringFeature";
export const getSystemPerformanceMonitoringFeature: typeof import("./getSystemPerformanceMonitoringFeature").getSystemPerformanceMonitoringFeature = null as any;
export const getSystemPerformanceMonitoringFeatureOutput: typeof import("./getSystemPerformanceMonitoringFeature").getSystemPerformanceMonitoringFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPerformanceMonitoringFeature","getSystemPerformanceMonitoringFeatureOutput"], () => require("./getSystemPerformanceMonitoringFeature"));

export { GetSystemRemoteAccessFeatureArgs, GetSystemRemoteAccessFeatureResult, GetSystemRemoteAccessFeatureOutputArgs } from "./getSystemRemoteAccessFeature";
export const getSystemRemoteAccessFeature: typeof import("./getSystemRemoteAccessFeature").getSystemRemoteAccessFeature = null as any;
export const getSystemRemoteAccessFeatureOutput: typeof import("./getSystemRemoteAccessFeature").getSystemRemoteAccessFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemRemoteAccessFeature","getSystemRemoteAccessFeatureOutput"], () => require("./getSystemRemoteAccessFeature"));

export { GetSystemSecurityFeatureArgs, GetSystemSecurityFeatureResult, GetSystemSecurityFeatureOutputArgs } from "./getSystemSecurityFeature";
export const getSystemSecurityFeature: typeof import("./getSystemSecurityFeature").getSystemSecurityFeature = null as any;
export const getSystemSecurityFeatureOutput: typeof import("./getSystemSecurityFeature").getSystemSecurityFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSecurityFeature","getSystemSecurityFeatureOutput"], () => require("./getSystemSecurityFeature"));

export { GetSystemSnmpFeatureArgs, GetSystemSnmpFeatureResult, GetSystemSnmpFeatureOutputArgs } from "./getSystemSnmpFeature";
export const getSystemSnmpFeature: typeof import("./getSystemSnmpFeature").getSystemSnmpFeature = null as any;
export const getSystemSnmpFeatureOutput: typeof import("./getSystemSnmpFeature").getSystemSnmpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpFeature","getSystemSnmpFeatureOutput"], () => require("./getSystemSnmpFeature"));

export { GetTlocListPolicyObjectArgs, GetTlocListPolicyObjectResult, GetTlocListPolicyObjectOutputArgs } from "./getTlocListPolicyObject";
export const getTlocListPolicyObject: typeof import("./getTlocListPolicyObject").getTlocListPolicyObject = null as any;
export const getTlocListPolicyObjectOutput: typeof import("./getTlocListPolicyObject").getTlocListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getTlocListPolicyObject","getTlocListPolicyObjectOutput"], () => require("./getTlocListPolicyObject"));

export { GetTlsSslDecryptionPolicyDefinitionArgs, GetTlsSslDecryptionPolicyDefinitionResult, GetTlsSslDecryptionPolicyDefinitionOutputArgs } from "./getTlsSslDecryptionPolicyDefinition";
export const getTlsSslDecryptionPolicyDefinition: typeof import("./getTlsSslDecryptionPolicyDefinition").getTlsSslDecryptionPolicyDefinition = null as any;
export const getTlsSslDecryptionPolicyDefinitionOutput: typeof import("./getTlsSslDecryptionPolicyDefinition").getTlsSslDecryptionPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTlsSslDecryptionPolicyDefinition","getTlsSslDecryptionPolicyDefinitionOutput"], () => require("./getTlsSslDecryptionPolicyDefinition"));

export { GetTlsSslProfilePolicyDefinitionArgs, GetTlsSslProfilePolicyDefinitionResult, GetTlsSslProfilePolicyDefinitionOutputArgs } from "./getTlsSslProfilePolicyDefinition";
export const getTlsSslProfilePolicyDefinition: typeof import("./getTlsSslProfilePolicyDefinition").getTlsSslProfilePolicyDefinition = null as any;
export const getTlsSslProfilePolicyDefinitionOutput: typeof import("./getTlsSslProfilePolicyDefinition").getTlsSslProfilePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTlsSslProfilePolicyDefinition","getTlsSslProfilePolicyDefinitionOutput"], () => require("./getTlsSslProfilePolicyDefinition"));

export { GetTrafficDataPolicyDefinitionArgs, GetTrafficDataPolicyDefinitionResult, GetTrafficDataPolicyDefinitionOutputArgs } from "./getTrafficDataPolicyDefinition";
export const getTrafficDataPolicyDefinition: typeof import("./getTrafficDataPolicyDefinition").getTrafficDataPolicyDefinition = null as any;
export const getTrafficDataPolicyDefinitionOutput: typeof import("./getTrafficDataPolicyDefinition").getTrafficDataPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficDataPolicyDefinition","getTrafficDataPolicyDefinitionOutput"], () => require("./getTrafficDataPolicyDefinition"));

export { GetTransportCellularControllerFeatureArgs, GetTransportCellularControllerFeatureResult, GetTransportCellularControllerFeatureOutputArgs } from "./getTransportCellularControllerFeature";
export const getTransportCellularControllerFeature: typeof import("./getTransportCellularControllerFeature").getTransportCellularControllerFeature = null as any;
export const getTransportCellularControllerFeatureOutput: typeof import("./getTransportCellularControllerFeature").getTransportCellularControllerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportCellularControllerFeature","getTransportCellularControllerFeatureOutput"], () => require("./getTransportCellularControllerFeature"));

export { GetTransportCellularProfileFeatureArgs, GetTransportCellularProfileFeatureResult, GetTransportCellularProfileFeatureOutputArgs } from "./getTransportCellularProfileFeature";
export const getTransportCellularProfileFeature: typeof import("./getTransportCellularProfileFeature").getTransportCellularProfileFeature = null as any;
export const getTransportCellularProfileFeatureOutput: typeof import("./getTransportCellularProfileFeature").getTransportCellularProfileFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportCellularProfileFeature","getTransportCellularProfileFeatureOutput"], () => require("./getTransportCellularProfileFeature"));

export { GetTransportFeatureProfileArgs, GetTransportFeatureProfileResult, GetTransportFeatureProfileOutputArgs } from "./getTransportFeatureProfile";
export const getTransportFeatureProfile: typeof import("./getTransportFeatureProfile").getTransportFeatureProfile = null as any;
export const getTransportFeatureProfileOutput: typeof import("./getTransportFeatureProfile").getTransportFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTransportFeatureProfile","getTransportFeatureProfileOutput"], () => require("./getTransportFeatureProfile"));

export { GetTransportGpsFeatureArgs, GetTransportGpsFeatureResult, GetTransportGpsFeatureOutputArgs } from "./getTransportGpsFeature";
export const getTransportGpsFeature: typeof import("./getTransportGpsFeature").getTransportGpsFeature = null as any;
export const getTransportGpsFeatureOutput: typeof import("./getTransportGpsFeature").getTransportGpsFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportGpsFeature","getTransportGpsFeatureOutput"], () => require("./getTransportGpsFeature"));

export { GetTransportIpv4AclFeatureArgs, GetTransportIpv4AclFeatureResult, GetTransportIpv4AclFeatureOutputArgs } from "./getTransportIpv4AclFeature";
export const getTransportIpv4AclFeature: typeof import("./getTransportIpv4AclFeature").getTransportIpv4AclFeature = null as any;
export const getTransportIpv4AclFeatureOutput: typeof import("./getTransportIpv4AclFeature").getTransportIpv4AclFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportIpv4AclFeature","getTransportIpv4AclFeatureOutput"], () => require("./getTransportIpv4AclFeature"));

export { GetTransportIpv6AclFeatureArgs, GetTransportIpv6AclFeatureResult, GetTransportIpv6AclFeatureOutputArgs } from "./getTransportIpv6AclFeature";
export const getTransportIpv6AclFeature: typeof import("./getTransportIpv6AclFeature").getTransportIpv6AclFeature = null as any;
export const getTransportIpv6AclFeatureOutput: typeof import("./getTransportIpv6AclFeature").getTransportIpv6AclFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportIpv6AclFeature","getTransportIpv6AclFeatureOutput"], () => require("./getTransportIpv6AclFeature"));

export { GetTransportIpv6TrackerFeatureArgs, GetTransportIpv6TrackerFeatureResult, GetTransportIpv6TrackerFeatureOutputArgs } from "./getTransportIpv6TrackerFeature";
export const getTransportIpv6TrackerFeature: typeof import("./getTransportIpv6TrackerFeature").getTransportIpv6TrackerFeature = null as any;
export const getTransportIpv6TrackerFeatureOutput: typeof import("./getTransportIpv6TrackerFeature").getTransportIpv6TrackerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportIpv6TrackerFeature","getTransportIpv6TrackerFeatureOutput"], () => require("./getTransportIpv6TrackerFeature"));

export { GetTransportIpv6TrackerGroupFeatureArgs, GetTransportIpv6TrackerGroupFeatureResult, GetTransportIpv6TrackerGroupFeatureOutputArgs } from "./getTransportIpv6TrackerGroupFeature";
export const getTransportIpv6TrackerGroupFeature: typeof import("./getTransportIpv6TrackerGroupFeature").getTransportIpv6TrackerGroupFeature = null as any;
export const getTransportIpv6TrackerGroupFeatureOutput: typeof import("./getTransportIpv6TrackerGroupFeature").getTransportIpv6TrackerGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportIpv6TrackerGroupFeature","getTransportIpv6TrackerGroupFeatureOutput"], () => require("./getTransportIpv6TrackerGroupFeature"));

export { GetTransportManagementVpnFeatureArgs, GetTransportManagementVpnFeatureResult, GetTransportManagementVpnFeatureOutputArgs } from "./getTransportManagementVpnFeature";
export const getTransportManagementVpnFeature: typeof import("./getTransportManagementVpnFeature").getTransportManagementVpnFeature = null as any;
export const getTransportManagementVpnFeatureOutput: typeof import("./getTransportManagementVpnFeature").getTransportManagementVpnFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportManagementVpnFeature","getTransportManagementVpnFeatureOutput"], () => require("./getTransportManagementVpnFeature"));

export { GetTransportManagementVpnInterfaceEthernetFeatureArgs, GetTransportManagementVpnInterfaceEthernetFeatureResult, GetTransportManagementVpnInterfaceEthernetFeatureOutputArgs } from "./getTransportManagementVpnInterfaceEthernetFeature";
export const getTransportManagementVpnInterfaceEthernetFeature: typeof import("./getTransportManagementVpnInterfaceEthernetFeature").getTransportManagementVpnInterfaceEthernetFeature = null as any;
export const getTransportManagementVpnInterfaceEthernetFeatureOutput: typeof import("./getTransportManagementVpnInterfaceEthernetFeature").getTransportManagementVpnInterfaceEthernetFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportManagementVpnInterfaceEthernetFeature","getTransportManagementVpnInterfaceEthernetFeatureOutput"], () => require("./getTransportManagementVpnInterfaceEthernetFeature"));

export { GetTransportRoutePolicyFeatureArgs, GetTransportRoutePolicyFeatureResult, GetTransportRoutePolicyFeatureOutputArgs } from "./getTransportRoutePolicyFeature";
export const getTransportRoutePolicyFeature: typeof import("./getTransportRoutePolicyFeature").getTransportRoutePolicyFeature = null as any;
export const getTransportRoutePolicyFeatureOutput: typeof import("./getTransportRoutePolicyFeature").getTransportRoutePolicyFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportRoutePolicyFeature","getTransportRoutePolicyFeatureOutput"], () => require("./getTransportRoutePolicyFeature"));

export { GetTransportRoutingBgpFeatureArgs, GetTransportRoutingBgpFeatureResult, GetTransportRoutingBgpFeatureOutputArgs } from "./getTransportRoutingBgpFeature";
export const getTransportRoutingBgpFeature: typeof import("./getTransportRoutingBgpFeature").getTransportRoutingBgpFeature = null as any;
export const getTransportRoutingBgpFeatureOutput: typeof import("./getTransportRoutingBgpFeature").getTransportRoutingBgpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportRoutingBgpFeature","getTransportRoutingBgpFeatureOutput"], () => require("./getTransportRoutingBgpFeature"));

export { GetTransportRoutingOspfFeatureArgs, GetTransportRoutingOspfFeatureResult, GetTransportRoutingOspfFeatureOutputArgs } from "./getTransportRoutingOspfFeature";
export const getTransportRoutingOspfFeature: typeof import("./getTransportRoutingOspfFeature").getTransportRoutingOspfFeature = null as any;
export const getTransportRoutingOspfFeatureOutput: typeof import("./getTransportRoutingOspfFeature").getTransportRoutingOspfFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportRoutingOspfFeature","getTransportRoutingOspfFeatureOutput"], () => require("./getTransportRoutingOspfFeature"));

export { GetTransportRoutingOspfv3Ipv4FeatureArgs, GetTransportRoutingOspfv3Ipv4FeatureResult, GetTransportRoutingOspfv3Ipv4FeatureOutputArgs } from "./getTransportRoutingOspfv3Ipv4Feature";
export const getTransportRoutingOspfv3Ipv4Feature: typeof import("./getTransportRoutingOspfv3Ipv4Feature").getTransportRoutingOspfv3Ipv4Feature = null as any;
export const getTransportRoutingOspfv3Ipv4FeatureOutput: typeof import("./getTransportRoutingOspfv3Ipv4Feature").getTransportRoutingOspfv3Ipv4FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportRoutingOspfv3Ipv4Feature","getTransportRoutingOspfv3Ipv4FeatureOutput"], () => require("./getTransportRoutingOspfv3Ipv4Feature"));

export { GetTransportRoutingOspfv3Ipv6FeatureArgs, GetTransportRoutingOspfv3Ipv6FeatureResult, GetTransportRoutingOspfv3Ipv6FeatureOutputArgs } from "./getTransportRoutingOspfv3Ipv6Feature";
export const getTransportRoutingOspfv3Ipv6Feature: typeof import("./getTransportRoutingOspfv3Ipv6Feature").getTransportRoutingOspfv3Ipv6Feature = null as any;
export const getTransportRoutingOspfv3Ipv6FeatureOutput: typeof import("./getTransportRoutingOspfv3Ipv6Feature").getTransportRoutingOspfv3Ipv6FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportRoutingOspfv3Ipv6Feature","getTransportRoutingOspfv3Ipv6FeatureOutput"], () => require("./getTransportRoutingOspfv3Ipv6Feature"));

export { GetTransportT1E1ControllerFeatureArgs, GetTransportT1E1ControllerFeatureResult, GetTransportT1E1ControllerFeatureOutputArgs } from "./getTransportT1E1ControllerFeature";
export const getTransportT1E1ControllerFeature: typeof import("./getTransportT1E1ControllerFeature").getTransportT1E1ControllerFeature = null as any;
export const getTransportT1E1ControllerFeatureOutput: typeof import("./getTransportT1E1ControllerFeature").getTransportT1E1ControllerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportT1E1ControllerFeature","getTransportT1E1ControllerFeatureOutput"], () => require("./getTransportT1E1ControllerFeature"));

export { GetTransportTrackerFeatureArgs, GetTransportTrackerFeatureResult, GetTransportTrackerFeatureOutputArgs } from "./getTransportTrackerFeature";
export const getTransportTrackerFeature: typeof import("./getTransportTrackerFeature").getTransportTrackerFeature = null as any;
export const getTransportTrackerFeatureOutput: typeof import("./getTransportTrackerFeature").getTransportTrackerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportTrackerFeature","getTransportTrackerFeatureOutput"], () => require("./getTransportTrackerFeature"));

export { GetTransportTrackerGroupFeatureArgs, GetTransportTrackerGroupFeatureResult, GetTransportTrackerGroupFeatureOutputArgs } from "./getTransportTrackerGroupFeature";
export const getTransportTrackerGroupFeature: typeof import("./getTransportTrackerGroupFeature").getTransportTrackerGroupFeature = null as any;
export const getTransportTrackerGroupFeatureOutput: typeof import("./getTransportTrackerGroupFeature").getTransportTrackerGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportTrackerGroupFeature","getTransportTrackerGroupFeatureOutput"], () => require("./getTransportTrackerGroupFeature"));

export { GetTransportWanVpnFeatureArgs, GetTransportWanVpnFeatureResult, GetTransportWanVpnFeatureOutputArgs } from "./getTransportWanVpnFeature";
export const getTransportWanVpnFeature: typeof import("./getTransportWanVpnFeature").getTransportWanVpnFeature = null as any;
export const getTransportWanVpnFeatureOutput: typeof import("./getTransportWanVpnFeature").getTransportWanVpnFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnFeature","getTransportWanVpnFeatureOutput"], () => require("./getTransportWanVpnFeature"));

export { GetTransportWanVpnFeatureAssociateRoutingBgpFeatureArgs, GetTransportWanVpnFeatureAssociateRoutingBgpFeatureResult, GetTransportWanVpnFeatureAssociateRoutingBgpFeatureOutputArgs } from "./getTransportWanVpnFeatureAssociateRoutingBgpFeature";
export const getTransportWanVpnFeatureAssociateRoutingBgpFeature: typeof import("./getTransportWanVpnFeatureAssociateRoutingBgpFeature").getTransportWanVpnFeatureAssociateRoutingBgpFeature = null as any;
export const getTransportWanVpnFeatureAssociateRoutingBgpFeatureOutput: typeof import("./getTransportWanVpnFeatureAssociateRoutingBgpFeature").getTransportWanVpnFeatureAssociateRoutingBgpFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnFeatureAssociateRoutingBgpFeature","getTransportWanVpnFeatureAssociateRoutingBgpFeatureOutput"], () => require("./getTransportWanVpnFeatureAssociateRoutingBgpFeature"));

export { GetTransportWanVpnFeatureAssociateRoutingOspfFeatureArgs, GetTransportWanVpnFeatureAssociateRoutingOspfFeatureResult, GetTransportWanVpnFeatureAssociateRoutingOspfFeatureOutputArgs } from "./getTransportWanVpnFeatureAssociateRoutingOspfFeature";
export const getTransportWanVpnFeatureAssociateRoutingOspfFeature: typeof import("./getTransportWanVpnFeatureAssociateRoutingOspfFeature").getTransportWanVpnFeatureAssociateRoutingOspfFeature = null as any;
export const getTransportWanVpnFeatureAssociateRoutingOspfFeatureOutput: typeof import("./getTransportWanVpnFeatureAssociateRoutingOspfFeature").getTransportWanVpnFeatureAssociateRoutingOspfFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnFeatureAssociateRoutingOspfFeature","getTransportWanVpnFeatureAssociateRoutingOspfFeatureOutput"], () => require("./getTransportWanVpnFeatureAssociateRoutingOspfFeature"));

export { GetTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureArgs, GetTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureResult, GetTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutputArgs } from "./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature";
export const getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature: typeof import("./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature = null as any;
export const getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutput: typeof import("./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature","getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureOutput"], () => require("./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature"));

export { GetTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureArgs, GetTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureResult, GetTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutputArgs } from "./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature";
export const getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature: typeof import("./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature = null as any;
export const getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutput: typeof import("./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature","getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureOutput"], () => require("./getTransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature"));

export { GetTransportWanVpnInterfaceCellularFeatureArgs, GetTransportWanVpnInterfaceCellularFeatureResult, GetTransportWanVpnInterfaceCellularFeatureOutputArgs } from "./getTransportWanVpnInterfaceCellularFeature";
export const getTransportWanVpnInterfaceCellularFeature: typeof import("./getTransportWanVpnInterfaceCellularFeature").getTransportWanVpnInterfaceCellularFeature = null as any;
export const getTransportWanVpnInterfaceCellularFeatureOutput: typeof import("./getTransportWanVpnInterfaceCellularFeature").getTransportWanVpnInterfaceCellularFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceCellularFeature","getTransportWanVpnInterfaceCellularFeatureOutput"], () => require("./getTransportWanVpnInterfaceCellularFeature"));

export { GetTransportWanVpnInterfaceEthernetFeatureArgs, GetTransportWanVpnInterfaceEthernetFeatureResult, GetTransportWanVpnInterfaceEthernetFeatureOutputArgs } from "./getTransportWanVpnInterfaceEthernetFeature";
export const getTransportWanVpnInterfaceEthernetFeature: typeof import("./getTransportWanVpnInterfaceEthernetFeature").getTransportWanVpnInterfaceEthernetFeature = null as any;
export const getTransportWanVpnInterfaceEthernetFeatureOutput: typeof import("./getTransportWanVpnInterfaceEthernetFeature").getTransportWanVpnInterfaceEthernetFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceEthernetFeature","getTransportWanVpnInterfaceEthernetFeatureOutput"], () => require("./getTransportWanVpnInterfaceEthernetFeature"));

export { GetTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureArgs, GetTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureResult, GetTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureOutputArgs } from "./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature";
export const getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature = null as any;
export const getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureOutput: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature","getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureOutput"], () => require("./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature"));

export { GetTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureArgs, GetTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureResult, GetTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureOutputArgs } from "./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature";
export const getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature = null as any;
export const getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureOutput: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature","getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureOutput"], () => require("./getTransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature"));

export { GetTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureArgs, GetTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureResult, GetTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureOutputArgs } from "./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature";
export const getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature = null as any;
export const getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureOutput: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature","getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureOutput"], () => require("./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature"));

export { GetTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureArgs, GetTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureResult, GetTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureOutputArgs } from "./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature";
export const getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature = null as any;
export const getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureOutput: typeof import("./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature").getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature","getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureOutput"], () => require("./getTransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature"));

export { GetTransportWanVpnInterfaceGreFeatureArgs, GetTransportWanVpnInterfaceGreFeatureResult, GetTransportWanVpnInterfaceGreFeatureOutputArgs } from "./getTransportWanVpnInterfaceGreFeature";
export const getTransportWanVpnInterfaceGreFeature: typeof import("./getTransportWanVpnInterfaceGreFeature").getTransportWanVpnInterfaceGreFeature = null as any;
export const getTransportWanVpnInterfaceGreFeatureOutput: typeof import("./getTransportWanVpnInterfaceGreFeature").getTransportWanVpnInterfaceGreFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceGreFeature","getTransportWanVpnInterfaceGreFeatureOutput"], () => require("./getTransportWanVpnInterfaceGreFeature"));

export { GetTransportWanVpnInterfaceIpsecFeatureArgs, GetTransportWanVpnInterfaceIpsecFeatureResult, GetTransportWanVpnInterfaceIpsecFeatureOutputArgs } from "./getTransportWanVpnInterfaceIpsecFeature";
export const getTransportWanVpnInterfaceIpsecFeature: typeof import("./getTransportWanVpnInterfaceIpsecFeature").getTransportWanVpnInterfaceIpsecFeature = null as any;
export const getTransportWanVpnInterfaceIpsecFeatureOutput: typeof import("./getTransportWanVpnInterfaceIpsecFeature").getTransportWanVpnInterfaceIpsecFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceIpsecFeature","getTransportWanVpnInterfaceIpsecFeatureOutput"], () => require("./getTransportWanVpnInterfaceIpsecFeature"));

export { GetTransportWanVpnInterfaceT1E1SerialFeatureArgs, GetTransportWanVpnInterfaceT1E1SerialFeatureResult, GetTransportWanVpnInterfaceT1E1SerialFeatureOutputArgs } from "./getTransportWanVpnInterfaceT1E1SerialFeature";
export const getTransportWanVpnInterfaceT1E1SerialFeature: typeof import("./getTransportWanVpnInterfaceT1E1SerialFeature").getTransportWanVpnInterfaceT1E1SerialFeature = null as any;
export const getTransportWanVpnInterfaceT1E1SerialFeatureOutput: typeof import("./getTransportWanVpnInterfaceT1E1SerialFeature").getTransportWanVpnInterfaceT1E1SerialFeatureOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceT1E1SerialFeature","getTransportWanVpnInterfaceT1E1SerialFeatureOutput"], () => require("./getTransportWanVpnInterfaceT1E1SerialFeature"));

export { GetUrlFilteringPolicyDefinitionArgs, GetUrlFilteringPolicyDefinitionResult, GetUrlFilteringPolicyDefinitionOutputArgs } from "./getUrlFilteringPolicyDefinition";
export const getUrlFilteringPolicyDefinition: typeof import("./getUrlFilteringPolicyDefinition").getUrlFilteringPolicyDefinition = null as any;
export const getUrlFilteringPolicyDefinitionOutput: typeof import("./getUrlFilteringPolicyDefinition").getUrlFilteringPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getUrlFilteringPolicyDefinition","getUrlFilteringPolicyDefinitionOutput"], () => require("./getUrlFilteringPolicyDefinition"));

export { GetVedgeInventoryResult } from "./getVedgeInventory";
export const getVedgeInventory: typeof import("./getVedgeInventory").getVedgeInventory = null as any;
export const getVedgeInventoryOutput: typeof import("./getVedgeInventory").getVedgeInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVedgeInventory","getVedgeInventoryOutput"], () => require("./getVedgeInventory"));

export { GetVpnInterfaceCellularFeatureTemplateArgs, GetVpnInterfaceCellularFeatureTemplateResult, GetVpnInterfaceCellularFeatureTemplateOutputArgs } from "./getVpnInterfaceCellularFeatureTemplate";
export const getVpnInterfaceCellularFeatureTemplate: typeof import("./getVpnInterfaceCellularFeatureTemplate").getVpnInterfaceCellularFeatureTemplate = null as any;
export const getVpnInterfaceCellularFeatureTemplateOutput: typeof import("./getVpnInterfaceCellularFeatureTemplate").getVpnInterfaceCellularFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceCellularFeatureTemplate","getVpnInterfaceCellularFeatureTemplateOutput"], () => require("./getVpnInterfaceCellularFeatureTemplate"));

export { GetVpnInterfaceDslIpoeFeatureTemplateArgs, GetVpnInterfaceDslIpoeFeatureTemplateResult, GetVpnInterfaceDslIpoeFeatureTemplateOutputArgs } from "./getVpnInterfaceDslIpoeFeatureTemplate";
export const getVpnInterfaceDslIpoeFeatureTemplate: typeof import("./getVpnInterfaceDslIpoeFeatureTemplate").getVpnInterfaceDslIpoeFeatureTemplate = null as any;
export const getVpnInterfaceDslIpoeFeatureTemplateOutput: typeof import("./getVpnInterfaceDslIpoeFeatureTemplate").getVpnInterfaceDslIpoeFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceDslIpoeFeatureTemplate","getVpnInterfaceDslIpoeFeatureTemplateOutput"], () => require("./getVpnInterfaceDslIpoeFeatureTemplate"));

export { GetVpnInterfaceDslPppoaFeatureTemplateArgs, GetVpnInterfaceDslPppoaFeatureTemplateResult, GetVpnInterfaceDslPppoaFeatureTemplateOutputArgs } from "./getVpnInterfaceDslPppoaFeatureTemplate";
export const getVpnInterfaceDslPppoaFeatureTemplate: typeof import("./getVpnInterfaceDslPppoaFeatureTemplate").getVpnInterfaceDslPppoaFeatureTemplate = null as any;
export const getVpnInterfaceDslPppoaFeatureTemplateOutput: typeof import("./getVpnInterfaceDslPppoaFeatureTemplate").getVpnInterfaceDslPppoaFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceDslPppoaFeatureTemplate","getVpnInterfaceDslPppoaFeatureTemplateOutput"], () => require("./getVpnInterfaceDslPppoaFeatureTemplate"));

export { GetVpnInterfaceDslPppoeFeatureTemplateArgs, GetVpnInterfaceDslPppoeFeatureTemplateResult, GetVpnInterfaceDslPppoeFeatureTemplateOutputArgs } from "./getVpnInterfaceDslPppoeFeatureTemplate";
export const getVpnInterfaceDslPppoeFeatureTemplate: typeof import("./getVpnInterfaceDslPppoeFeatureTemplate").getVpnInterfaceDslPppoeFeatureTemplate = null as any;
export const getVpnInterfaceDslPppoeFeatureTemplateOutput: typeof import("./getVpnInterfaceDslPppoeFeatureTemplate").getVpnInterfaceDslPppoeFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceDslPppoeFeatureTemplate","getVpnInterfaceDslPppoeFeatureTemplateOutput"], () => require("./getVpnInterfaceDslPppoeFeatureTemplate"));

export { GetVpnInterfaceEthernetPppoeFeatureTemplateArgs, GetVpnInterfaceEthernetPppoeFeatureTemplateResult, GetVpnInterfaceEthernetPppoeFeatureTemplateOutputArgs } from "./getVpnInterfaceEthernetPppoeFeatureTemplate";
export const getVpnInterfaceEthernetPppoeFeatureTemplate: typeof import("./getVpnInterfaceEthernetPppoeFeatureTemplate").getVpnInterfaceEthernetPppoeFeatureTemplate = null as any;
export const getVpnInterfaceEthernetPppoeFeatureTemplateOutput: typeof import("./getVpnInterfaceEthernetPppoeFeatureTemplate").getVpnInterfaceEthernetPppoeFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceEthernetPppoeFeatureTemplate","getVpnInterfaceEthernetPppoeFeatureTemplateOutput"], () => require("./getVpnInterfaceEthernetPppoeFeatureTemplate"));

export { GetVpnInterfaceMultilinkFeatureTemplateArgs, GetVpnInterfaceMultilinkFeatureTemplateResult, GetVpnInterfaceMultilinkFeatureTemplateOutputArgs } from "./getVpnInterfaceMultilinkFeatureTemplate";
export const getVpnInterfaceMultilinkFeatureTemplate: typeof import("./getVpnInterfaceMultilinkFeatureTemplate").getVpnInterfaceMultilinkFeatureTemplate = null as any;
export const getVpnInterfaceMultilinkFeatureTemplateOutput: typeof import("./getVpnInterfaceMultilinkFeatureTemplate").getVpnInterfaceMultilinkFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceMultilinkFeatureTemplate","getVpnInterfaceMultilinkFeatureTemplateOutput"], () => require("./getVpnInterfaceMultilinkFeatureTemplate"));

export { GetVpnInterfaceSviFeatureTemplateArgs, GetVpnInterfaceSviFeatureTemplateResult, GetVpnInterfaceSviFeatureTemplateOutputArgs } from "./getVpnInterfaceSviFeatureTemplate";
export const getVpnInterfaceSviFeatureTemplate: typeof import("./getVpnInterfaceSviFeatureTemplate").getVpnInterfaceSviFeatureTemplate = null as any;
export const getVpnInterfaceSviFeatureTemplateOutput: typeof import("./getVpnInterfaceSviFeatureTemplate").getVpnInterfaceSviFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceSviFeatureTemplate","getVpnInterfaceSviFeatureTemplateOutput"], () => require("./getVpnInterfaceSviFeatureTemplate"));

export { GetVpnInterfaceT1E1SerialFeatureTemplateArgs, GetVpnInterfaceT1E1SerialFeatureTemplateResult, GetVpnInterfaceT1E1SerialFeatureTemplateOutputArgs } from "./getVpnInterfaceT1E1SerialFeatureTemplate";
export const getVpnInterfaceT1E1SerialFeatureTemplate: typeof import("./getVpnInterfaceT1E1SerialFeatureTemplate").getVpnInterfaceT1E1SerialFeatureTemplate = null as any;
export const getVpnInterfaceT1E1SerialFeatureTemplateOutput: typeof import("./getVpnInterfaceT1E1SerialFeatureTemplate").getVpnInterfaceT1E1SerialFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceT1E1SerialFeatureTemplate","getVpnInterfaceT1E1SerialFeatureTemplateOutput"], () => require("./getVpnInterfaceT1E1SerialFeatureTemplate"));

export { GetVpnListPolicyObjectArgs, GetVpnListPolicyObjectResult, GetVpnListPolicyObjectOutputArgs } from "./getVpnListPolicyObject";
export const getVpnListPolicyObject: typeof import("./getVpnListPolicyObject").getVpnListPolicyObject = null as any;
export const getVpnListPolicyObjectOutput: typeof import("./getVpnListPolicyObject").getVpnListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getVpnListPolicyObject","getVpnListPolicyObjectOutput"], () => require("./getVpnListPolicyObject"));

export { GetVpnMembershipPolicyDefinitionArgs, GetVpnMembershipPolicyDefinitionResult, GetVpnMembershipPolicyDefinitionOutputArgs } from "./getVpnMembershipPolicyDefinition";
export const getVpnMembershipPolicyDefinition: typeof import("./getVpnMembershipPolicyDefinition").getVpnMembershipPolicyDefinition = null as any;
export const getVpnMembershipPolicyDefinitionOutput: typeof import("./getVpnMembershipPolicyDefinition").getVpnMembershipPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getVpnMembershipPolicyDefinition","getVpnMembershipPolicyDefinitionOutput"], () => require("./getVpnMembershipPolicyDefinition"));

export { GetZoneBasedFirewallPolicyDefinitionArgs, GetZoneBasedFirewallPolicyDefinitionResult, GetZoneBasedFirewallPolicyDefinitionOutputArgs } from "./getZoneBasedFirewallPolicyDefinition";
export const getZoneBasedFirewallPolicyDefinition: typeof import("./getZoneBasedFirewallPolicyDefinition").getZoneBasedFirewallPolicyDefinition = null as any;
export const getZoneBasedFirewallPolicyDefinitionOutput: typeof import("./getZoneBasedFirewallPolicyDefinition").getZoneBasedFirewallPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getZoneBasedFirewallPolicyDefinition","getZoneBasedFirewallPolicyDefinitionOutput"], () => require("./getZoneBasedFirewallPolicyDefinition"));

export { GetZoneListPolicyObjectArgs, GetZoneListPolicyObjectResult, GetZoneListPolicyObjectOutputArgs } from "./getZoneListPolicyObject";
export const getZoneListPolicyObject: typeof import("./getZoneListPolicyObject").getZoneListPolicyObject = null as any;
export const getZoneListPolicyObjectOutput: typeof import("./getZoneListPolicyObject").getZoneListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getZoneListPolicyObject","getZoneListPolicyObjectOutput"], () => require("./getZoneListPolicyObject"));

export { GpsFeatureTemplateArgs, GpsFeatureTemplateState } from "./gpsFeatureTemplate";
export type GpsFeatureTemplate = import("./gpsFeatureTemplate").GpsFeatureTemplate;
export const GpsFeatureTemplate: typeof import("./gpsFeatureTemplate").GpsFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["GpsFeatureTemplate"], () => require("./gpsFeatureTemplate"));

export { HubAndSpokeTopologyPolicyDefinitionArgs, HubAndSpokeTopologyPolicyDefinitionState } from "./hubAndSpokeTopologyPolicyDefinition";
export type HubAndSpokeTopologyPolicyDefinition = import("./hubAndSpokeTopologyPolicyDefinition").HubAndSpokeTopologyPolicyDefinition;
export const HubAndSpokeTopologyPolicyDefinition: typeof import("./hubAndSpokeTopologyPolicyDefinition").HubAndSpokeTopologyPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["HubAndSpokeTopologyPolicyDefinition"], () => require("./hubAndSpokeTopologyPolicyDefinition"));

export { IntrusionPreventionPolicyDefinitionArgs, IntrusionPreventionPolicyDefinitionState } from "./intrusionPreventionPolicyDefinition";
export type IntrusionPreventionPolicyDefinition = import("./intrusionPreventionPolicyDefinition").IntrusionPreventionPolicyDefinition;
export const IntrusionPreventionPolicyDefinition: typeof import("./intrusionPreventionPolicyDefinition").IntrusionPreventionPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["IntrusionPreventionPolicyDefinition"], () => require("./intrusionPreventionPolicyDefinition"));

export { IpsSignatureListPolicyObjectArgs, IpsSignatureListPolicyObjectState } from "./ipsSignatureListPolicyObject";
export type IpsSignatureListPolicyObject = import("./ipsSignatureListPolicyObject").IpsSignatureListPolicyObject;
export const IpsSignatureListPolicyObject: typeof import("./ipsSignatureListPolicyObject").IpsSignatureListPolicyObject = null as any;
utilities.lazyLoad(exports, ["IpsSignatureListPolicyObject"], () => require("./ipsSignatureListPolicyObject"));

export { Ipv4AclPolicyDefinitionArgs, Ipv4AclPolicyDefinitionState } from "./ipv4AclPolicyDefinition";
export type Ipv4AclPolicyDefinition = import("./ipv4AclPolicyDefinition").Ipv4AclPolicyDefinition;
export const Ipv4AclPolicyDefinition: typeof import("./ipv4AclPolicyDefinition").Ipv4AclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv4AclPolicyDefinition"], () => require("./ipv4AclPolicyDefinition"));

export { Ipv4DeviceAclPolicyDefinitionArgs, Ipv4DeviceAclPolicyDefinitionState } from "./ipv4DeviceAclPolicyDefinition";
export type Ipv4DeviceAclPolicyDefinition = import("./ipv4DeviceAclPolicyDefinition").Ipv4DeviceAclPolicyDefinition;
export const Ipv4DeviceAclPolicyDefinition: typeof import("./ipv4DeviceAclPolicyDefinition").Ipv4DeviceAclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv4DeviceAclPolicyDefinition"], () => require("./ipv4DeviceAclPolicyDefinition"));

export { Ipv4PrefixListPolicyObjectArgs, Ipv4PrefixListPolicyObjectState } from "./ipv4PrefixListPolicyObject";
export type Ipv4PrefixListPolicyObject = import("./ipv4PrefixListPolicyObject").Ipv4PrefixListPolicyObject;
export const Ipv4PrefixListPolicyObject: typeof import("./ipv4PrefixListPolicyObject").Ipv4PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["Ipv4PrefixListPolicyObject"], () => require("./ipv4PrefixListPolicyObject"));

export { Ipv6AclPolicyDefinitionArgs, Ipv6AclPolicyDefinitionState } from "./ipv6AclPolicyDefinition";
export type Ipv6AclPolicyDefinition = import("./ipv6AclPolicyDefinition").Ipv6AclPolicyDefinition;
export const Ipv6AclPolicyDefinition: typeof import("./ipv6AclPolicyDefinition").Ipv6AclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv6AclPolicyDefinition"], () => require("./ipv6AclPolicyDefinition"));

export { Ipv6DeviceAclPolicyDefinitionArgs, Ipv6DeviceAclPolicyDefinitionState } from "./ipv6DeviceAclPolicyDefinition";
export type Ipv6DeviceAclPolicyDefinition = import("./ipv6DeviceAclPolicyDefinition").Ipv6DeviceAclPolicyDefinition;
export const Ipv6DeviceAclPolicyDefinition: typeof import("./ipv6DeviceAclPolicyDefinition").Ipv6DeviceAclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv6DeviceAclPolicyDefinition"], () => require("./ipv6DeviceAclPolicyDefinition"));

export { Ipv6PrefixListPolicyObjectArgs, Ipv6PrefixListPolicyObjectState } from "./ipv6PrefixListPolicyObject";
export type Ipv6PrefixListPolicyObject = import("./ipv6PrefixListPolicyObject").Ipv6PrefixListPolicyObject;
export const Ipv6PrefixListPolicyObject: typeof import("./ipv6PrefixListPolicyObject").Ipv6PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["Ipv6PrefixListPolicyObject"], () => require("./ipv6PrefixListPolicyObject"));

export { LocalApplicationListPolicyObjectArgs, LocalApplicationListPolicyObjectState } from "./localApplicationListPolicyObject";
export type LocalApplicationListPolicyObject = import("./localApplicationListPolicyObject").LocalApplicationListPolicyObject;
export const LocalApplicationListPolicyObject: typeof import("./localApplicationListPolicyObject").LocalApplicationListPolicyObject = null as any;
utilities.lazyLoad(exports, ["LocalApplicationListPolicyObject"], () => require("./localApplicationListPolicyObject"));

export { LocalizedPolicyArgs, LocalizedPolicyState } from "./localizedPolicy";
export type LocalizedPolicy = import("./localizedPolicy").LocalizedPolicy;
export const LocalizedPolicy: typeof import("./localizedPolicy").LocalizedPolicy = null as any;
utilities.lazyLoad(exports, ["LocalizedPolicy"], () => require("./localizedPolicy"));

export { MeshTopologyPolicyDefinitionArgs, MeshTopologyPolicyDefinitionState } from "./meshTopologyPolicyDefinition";
export type MeshTopologyPolicyDefinition = import("./meshTopologyPolicyDefinition").MeshTopologyPolicyDefinition;
export const MeshTopologyPolicyDefinition: typeof import("./meshTopologyPolicyDefinition").MeshTopologyPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["MeshTopologyPolicyDefinition"], () => require("./meshTopologyPolicyDefinition"));

export { MirrorPolicyObjectArgs, MirrorPolicyObjectState } from "./mirrorPolicyObject";
export type MirrorPolicyObject = import("./mirrorPolicyObject").MirrorPolicyObject;
export const MirrorPolicyObject: typeof import("./mirrorPolicyObject").MirrorPolicyObject = null as any;
utilities.lazyLoad(exports, ["MirrorPolicyObject"], () => require("./mirrorPolicyObject"));

export { ObjectGroupPolicyDefinitionArgs, ObjectGroupPolicyDefinitionState } from "./objectGroupPolicyDefinition";
export type ObjectGroupPolicyDefinition = import("./objectGroupPolicyDefinition").ObjectGroupPolicyDefinition;
export const ObjectGroupPolicyDefinition: typeof import("./objectGroupPolicyDefinition").ObjectGroupPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["ObjectGroupPolicyDefinition"], () => require("./objectGroupPolicyDefinition"));

export { OtherFeatureProfileArgs, OtherFeatureProfileState } from "./otherFeatureProfile";
export type OtherFeatureProfile = import("./otherFeatureProfile").OtherFeatureProfile;
export const OtherFeatureProfile: typeof import("./otherFeatureProfile").OtherFeatureProfile = null as any;
utilities.lazyLoad(exports, ["OtherFeatureProfile"], () => require("./otherFeatureProfile"));

export { OtherThousandeyesFeatureArgs, OtherThousandeyesFeatureState } from "./otherThousandeyesFeature";
export type OtherThousandeyesFeature = import("./otherThousandeyesFeature").OtherThousandeyesFeature;
export const OtherThousandeyesFeature: typeof import("./otherThousandeyesFeature").OtherThousandeyesFeature = null as any;
utilities.lazyLoad(exports, ["OtherThousandeyesFeature"], () => require("./otherThousandeyesFeature"));

export { OtherUcseFeatureArgs, OtherUcseFeatureState } from "./otherUcseFeature";
export type OtherUcseFeature = import("./otherUcseFeature").OtherUcseFeature;
export const OtherUcseFeature: typeof import("./otherUcseFeature").OtherUcseFeature = null as any;
utilities.lazyLoad(exports, ["OtherUcseFeature"], () => require("./otherUcseFeature"));

export { PolicerPolicyObjectArgs, PolicerPolicyObjectState } from "./policerPolicyObject";
export type PolicerPolicyObject = import("./policerPolicyObject").PolicerPolicyObject;
export const PolicerPolicyObject: typeof import("./policerPolicyObject").PolicerPolicyObject = null as any;
utilities.lazyLoad(exports, ["PolicerPolicyObject"], () => require("./policerPolicyObject"));

export { PolicyObjectAppProbeClassArgs, PolicyObjectAppProbeClassState } from "./policyObjectAppProbeClass";
export type PolicyObjectAppProbeClass = import("./policyObjectAppProbeClass").PolicyObjectAppProbeClass;
export const PolicyObjectAppProbeClass: typeof import("./policyObjectAppProbeClass").PolicyObjectAppProbeClass = null as any;
utilities.lazyLoad(exports, ["PolicyObjectAppProbeClass"], () => require("./policyObjectAppProbeClass"));

export { PolicyObjectApplicationListArgs, PolicyObjectApplicationListState } from "./policyObjectApplicationList";
export type PolicyObjectApplicationList = import("./policyObjectApplicationList").PolicyObjectApplicationList;
export const PolicyObjectApplicationList: typeof import("./policyObjectApplicationList").PolicyObjectApplicationList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectApplicationList"], () => require("./policyObjectApplicationList"));

export { PolicyObjectAsPathListArgs, PolicyObjectAsPathListState } from "./policyObjectAsPathList";
export type PolicyObjectAsPathList = import("./policyObjectAsPathList").PolicyObjectAsPathList;
export const PolicyObjectAsPathList: typeof import("./policyObjectAsPathList").PolicyObjectAsPathList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectAsPathList"], () => require("./policyObjectAsPathList"));

export { PolicyObjectClassMapArgs, PolicyObjectClassMapState } from "./policyObjectClassMap";
export type PolicyObjectClassMap = import("./policyObjectClassMap").PolicyObjectClassMap;
export const PolicyObjectClassMap: typeof import("./policyObjectClassMap").PolicyObjectClassMap = null as any;
utilities.lazyLoad(exports, ["PolicyObjectClassMap"], () => require("./policyObjectClassMap"));

export { PolicyObjectColorListArgs, PolicyObjectColorListState } from "./policyObjectColorList";
export type PolicyObjectColorList = import("./policyObjectColorList").PolicyObjectColorList;
export const PolicyObjectColorList: typeof import("./policyObjectColorList").PolicyObjectColorList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectColorList"], () => require("./policyObjectColorList"));

export { PolicyObjectDataIpv4PrefixListArgs, PolicyObjectDataIpv4PrefixListState } from "./policyObjectDataIpv4PrefixList";
export type PolicyObjectDataIpv4PrefixList = import("./policyObjectDataIpv4PrefixList").PolicyObjectDataIpv4PrefixList;
export const PolicyObjectDataIpv4PrefixList: typeof import("./policyObjectDataIpv4PrefixList").PolicyObjectDataIpv4PrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectDataIpv4PrefixList"], () => require("./policyObjectDataIpv4PrefixList"));

export { PolicyObjectDataIpv6PrefixListArgs, PolicyObjectDataIpv6PrefixListState } from "./policyObjectDataIpv6PrefixList";
export type PolicyObjectDataIpv6PrefixList = import("./policyObjectDataIpv6PrefixList").PolicyObjectDataIpv6PrefixList;
export const PolicyObjectDataIpv6PrefixList: typeof import("./policyObjectDataIpv6PrefixList").PolicyObjectDataIpv6PrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectDataIpv6PrefixList"], () => require("./policyObjectDataIpv6PrefixList"));

export { PolicyObjectExpandedCommunityListArgs, PolicyObjectExpandedCommunityListState } from "./policyObjectExpandedCommunityList";
export type PolicyObjectExpandedCommunityList = import("./policyObjectExpandedCommunityList").PolicyObjectExpandedCommunityList;
export const PolicyObjectExpandedCommunityList: typeof import("./policyObjectExpandedCommunityList").PolicyObjectExpandedCommunityList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectExpandedCommunityList"], () => require("./policyObjectExpandedCommunityList"));

export { PolicyObjectExtendedCommunityListArgs, PolicyObjectExtendedCommunityListState } from "./policyObjectExtendedCommunityList";
export type PolicyObjectExtendedCommunityList = import("./policyObjectExtendedCommunityList").PolicyObjectExtendedCommunityList;
export const PolicyObjectExtendedCommunityList: typeof import("./policyObjectExtendedCommunityList").PolicyObjectExtendedCommunityList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectExtendedCommunityList"], () => require("./policyObjectExtendedCommunityList"));

export { PolicyObjectFeatureProfileArgs, PolicyObjectFeatureProfileState } from "./policyObjectFeatureProfile";
export type PolicyObjectFeatureProfile = import("./policyObjectFeatureProfile").PolicyObjectFeatureProfile;
export const PolicyObjectFeatureProfile: typeof import("./policyObjectFeatureProfile").PolicyObjectFeatureProfile = null as any;
utilities.lazyLoad(exports, ["PolicyObjectFeatureProfile"], () => require("./policyObjectFeatureProfile"));

export { PolicyObjectIpv4PrefixListArgs, PolicyObjectIpv4PrefixListState } from "./policyObjectIpv4PrefixList";
export type PolicyObjectIpv4PrefixList = import("./policyObjectIpv4PrefixList").PolicyObjectIpv4PrefixList;
export const PolicyObjectIpv4PrefixList: typeof import("./policyObjectIpv4PrefixList").PolicyObjectIpv4PrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectIpv4PrefixList"], () => require("./policyObjectIpv4PrefixList"));

export { PolicyObjectIpv6PrefixListArgs, PolicyObjectIpv6PrefixListState } from "./policyObjectIpv6PrefixList";
export type PolicyObjectIpv6PrefixList = import("./policyObjectIpv6PrefixList").PolicyObjectIpv6PrefixList;
export const PolicyObjectIpv6PrefixList: typeof import("./policyObjectIpv6PrefixList").PolicyObjectIpv6PrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectIpv6PrefixList"], () => require("./policyObjectIpv6PrefixList"));

export { PolicyObjectMirrorArgs, PolicyObjectMirrorState } from "./policyObjectMirror";
export type PolicyObjectMirror = import("./policyObjectMirror").PolicyObjectMirror;
export const PolicyObjectMirror: typeof import("./policyObjectMirror").PolicyObjectMirror = null as any;
utilities.lazyLoad(exports, ["PolicyObjectMirror"], () => require("./policyObjectMirror"));

export { PolicyObjectPolicerArgs, PolicyObjectPolicerState } from "./policyObjectPolicer";
export type PolicyObjectPolicer = import("./policyObjectPolicer").PolicyObjectPolicer;
export const PolicyObjectPolicer: typeof import("./policyObjectPolicer").PolicyObjectPolicer = null as any;
utilities.lazyLoad(exports, ["PolicyObjectPolicer"], () => require("./policyObjectPolicer"));

export { PolicyObjectPreferredColorGroupArgs, PolicyObjectPreferredColorGroupState } from "./policyObjectPreferredColorGroup";
export type PolicyObjectPreferredColorGroup = import("./policyObjectPreferredColorGroup").PolicyObjectPreferredColorGroup;
export const PolicyObjectPreferredColorGroup: typeof import("./policyObjectPreferredColorGroup").PolicyObjectPreferredColorGroup = null as any;
utilities.lazyLoad(exports, ["PolicyObjectPreferredColorGroup"], () => require("./policyObjectPreferredColorGroup"));

export { PolicyObjectSecurityDataIpv4PrefixListArgs, PolicyObjectSecurityDataIpv4PrefixListState } from "./policyObjectSecurityDataIpv4PrefixList";
export type PolicyObjectSecurityDataIpv4PrefixList = import("./policyObjectSecurityDataIpv4PrefixList").PolicyObjectSecurityDataIpv4PrefixList;
export const PolicyObjectSecurityDataIpv4PrefixList: typeof import("./policyObjectSecurityDataIpv4PrefixList").PolicyObjectSecurityDataIpv4PrefixList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityDataIpv4PrefixList"], () => require("./policyObjectSecurityDataIpv4PrefixList"));

export { PolicyObjectSecurityFqdnListArgs, PolicyObjectSecurityFqdnListState } from "./policyObjectSecurityFqdnList";
export type PolicyObjectSecurityFqdnList = import("./policyObjectSecurityFqdnList").PolicyObjectSecurityFqdnList;
export const PolicyObjectSecurityFqdnList: typeof import("./policyObjectSecurityFqdnList").PolicyObjectSecurityFqdnList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityFqdnList"], () => require("./policyObjectSecurityFqdnList"));

export { PolicyObjectSecurityGeolocationListArgs, PolicyObjectSecurityGeolocationListState } from "./policyObjectSecurityGeolocationList";
export type PolicyObjectSecurityGeolocationList = import("./policyObjectSecurityGeolocationList").PolicyObjectSecurityGeolocationList;
export const PolicyObjectSecurityGeolocationList: typeof import("./policyObjectSecurityGeolocationList").PolicyObjectSecurityGeolocationList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityGeolocationList"], () => require("./policyObjectSecurityGeolocationList"));

export { PolicyObjectSecurityIdentityListArgs, PolicyObjectSecurityIdentityListState } from "./policyObjectSecurityIdentityList";
export type PolicyObjectSecurityIdentityList = import("./policyObjectSecurityIdentityList").PolicyObjectSecurityIdentityList;
export const PolicyObjectSecurityIdentityList: typeof import("./policyObjectSecurityIdentityList").PolicyObjectSecurityIdentityList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityIdentityList"], () => require("./policyObjectSecurityIdentityList"));

export { PolicyObjectSecurityIpsSignatureArgs, PolicyObjectSecurityIpsSignatureState } from "./policyObjectSecurityIpsSignature";
export type PolicyObjectSecurityIpsSignature = import("./policyObjectSecurityIpsSignature").PolicyObjectSecurityIpsSignature;
export const PolicyObjectSecurityIpsSignature: typeof import("./policyObjectSecurityIpsSignature").PolicyObjectSecurityIpsSignature = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityIpsSignature"], () => require("./policyObjectSecurityIpsSignature"));

export { PolicyObjectSecurityLocalApplicationListArgs, PolicyObjectSecurityLocalApplicationListState } from "./policyObjectSecurityLocalApplicationList";
export type PolicyObjectSecurityLocalApplicationList = import("./policyObjectSecurityLocalApplicationList").PolicyObjectSecurityLocalApplicationList;
export const PolicyObjectSecurityLocalApplicationList: typeof import("./policyObjectSecurityLocalApplicationList").PolicyObjectSecurityLocalApplicationList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityLocalApplicationList"], () => require("./policyObjectSecurityLocalApplicationList"));

export { PolicyObjectSecurityLocalDomainListArgs, PolicyObjectSecurityLocalDomainListState } from "./policyObjectSecurityLocalDomainList";
export type PolicyObjectSecurityLocalDomainList = import("./policyObjectSecurityLocalDomainList").PolicyObjectSecurityLocalDomainList;
export const PolicyObjectSecurityLocalDomainList: typeof import("./policyObjectSecurityLocalDomainList").PolicyObjectSecurityLocalDomainList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityLocalDomainList"], () => require("./policyObjectSecurityLocalDomainList"));

export { PolicyObjectSecurityPortListArgs, PolicyObjectSecurityPortListState } from "./policyObjectSecurityPortList";
export type PolicyObjectSecurityPortList = import("./policyObjectSecurityPortList").PolicyObjectSecurityPortList;
export const PolicyObjectSecurityPortList: typeof import("./policyObjectSecurityPortList").PolicyObjectSecurityPortList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityPortList"], () => require("./policyObjectSecurityPortList"));

export { PolicyObjectSecurityScalableGroupTagListArgs, PolicyObjectSecurityScalableGroupTagListState } from "./policyObjectSecurityScalableGroupTagList";
export type PolicyObjectSecurityScalableGroupTagList = import("./policyObjectSecurityScalableGroupTagList").PolicyObjectSecurityScalableGroupTagList;
export const PolicyObjectSecurityScalableGroupTagList: typeof import("./policyObjectSecurityScalableGroupTagList").PolicyObjectSecurityScalableGroupTagList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityScalableGroupTagList"], () => require("./policyObjectSecurityScalableGroupTagList"));

export { PolicyObjectSecurityUrlAllowListArgs, PolicyObjectSecurityUrlAllowListState } from "./policyObjectSecurityUrlAllowList";
export type PolicyObjectSecurityUrlAllowList = import("./policyObjectSecurityUrlAllowList").PolicyObjectSecurityUrlAllowList;
export const PolicyObjectSecurityUrlAllowList: typeof import("./policyObjectSecurityUrlAllowList").PolicyObjectSecurityUrlAllowList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityUrlAllowList"], () => require("./policyObjectSecurityUrlAllowList"));

export { PolicyObjectSecurityUrlBlockListArgs, PolicyObjectSecurityUrlBlockListState } from "./policyObjectSecurityUrlBlockList";
export type PolicyObjectSecurityUrlBlockList = import("./policyObjectSecurityUrlBlockList").PolicyObjectSecurityUrlBlockList;
export const PolicyObjectSecurityUrlBlockList: typeof import("./policyObjectSecurityUrlBlockList").PolicyObjectSecurityUrlBlockList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSecurityUrlBlockList"], () => require("./policyObjectSecurityUrlBlockList"));

export { PolicyObjectSlaClassListArgs, PolicyObjectSlaClassListState } from "./policyObjectSlaClassList";
export type PolicyObjectSlaClassList = import("./policyObjectSlaClassList").PolicyObjectSlaClassList;
export const PolicyObjectSlaClassList: typeof import("./policyObjectSlaClassList").PolicyObjectSlaClassList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectSlaClassList"], () => require("./policyObjectSlaClassList"));

export { PolicyObjectStandardCommunityListArgs, PolicyObjectStandardCommunityListState } from "./policyObjectStandardCommunityList";
export type PolicyObjectStandardCommunityList = import("./policyObjectStandardCommunityList").PolicyObjectStandardCommunityList;
export const PolicyObjectStandardCommunityList: typeof import("./policyObjectStandardCommunityList").PolicyObjectStandardCommunityList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectStandardCommunityList"], () => require("./policyObjectStandardCommunityList"));

export { PolicyObjectTlocListArgs, PolicyObjectTlocListState } from "./policyObjectTlocList";
export type PolicyObjectTlocList = import("./policyObjectTlocList").PolicyObjectTlocList;
export const PolicyObjectTlocList: typeof import("./policyObjectTlocList").PolicyObjectTlocList = null as any;
utilities.lazyLoad(exports, ["PolicyObjectTlocList"], () => require("./policyObjectTlocList"));

export { PolicyObjectVpnGroupArgs, PolicyObjectVpnGroupState } from "./policyObjectVpnGroup";
export type PolicyObjectVpnGroup = import("./policyObjectVpnGroup").PolicyObjectVpnGroup;
export const PolicyObjectVpnGroup: typeof import("./policyObjectVpnGroup").PolicyObjectVpnGroup = null as any;
utilities.lazyLoad(exports, ["PolicyObjectVpnGroup"], () => require("./policyObjectVpnGroup"));

export { PortListPolicyObjectArgs, PortListPolicyObjectState } from "./portListPolicyObject";
export type PortListPolicyObject = import("./portListPolicyObject").PortListPolicyObject;
export const PortListPolicyObject: typeof import("./portListPolicyObject").PortListPolicyObject = null as any;
utilities.lazyLoad(exports, ["PortListPolicyObject"], () => require("./portListPolicyObject"));

export { PreferredColorGroupPolicyObjectArgs, PreferredColorGroupPolicyObjectState } from "./preferredColorGroupPolicyObject";
export type PreferredColorGroupPolicyObject = import("./preferredColorGroupPolicyObject").PreferredColorGroupPolicyObject;
export const PreferredColorGroupPolicyObject: typeof import("./preferredColorGroupPolicyObject").PreferredColorGroupPolicyObject = null as any;
utilities.lazyLoad(exports, ["PreferredColorGroupPolicyObject"], () => require("./preferredColorGroupPolicyObject"));

export { ProtocolListPolicyObjectArgs, ProtocolListPolicyObjectState } from "./protocolListPolicyObject";
export type ProtocolListPolicyObject = import("./protocolListPolicyObject").ProtocolListPolicyObject;
export const ProtocolListPolicyObject: typeof import("./protocolListPolicyObject").ProtocolListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ProtocolListPolicyObject"], () => require("./protocolListPolicyObject"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QosMapPolicyDefinitionArgs, QosMapPolicyDefinitionState } from "./qosMapPolicyDefinition";
export type QosMapPolicyDefinition = import("./qosMapPolicyDefinition").QosMapPolicyDefinition;
export const QosMapPolicyDefinition: typeof import("./qosMapPolicyDefinition").QosMapPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["QosMapPolicyDefinition"], () => require("./qosMapPolicyDefinition"));

export { RegionListPolicyObjectArgs, RegionListPolicyObjectState } from "./regionListPolicyObject";
export type RegionListPolicyObject = import("./regionListPolicyObject").RegionListPolicyObject;
export const RegionListPolicyObject: typeof import("./regionListPolicyObject").RegionListPolicyObject = null as any;
utilities.lazyLoad(exports, ["RegionListPolicyObject"], () => require("./regionListPolicyObject"));

export { RewriteRulePolicyDefinitionArgs, RewriteRulePolicyDefinitionState } from "./rewriteRulePolicyDefinition";
export type RewriteRulePolicyDefinition = import("./rewriteRulePolicyDefinition").RewriteRulePolicyDefinition;
export const RewriteRulePolicyDefinition: typeof import("./rewriteRulePolicyDefinition").RewriteRulePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["RewriteRulePolicyDefinition"], () => require("./rewriteRulePolicyDefinition"));

export { RoutePolicyDefinitionArgs, RoutePolicyDefinitionState } from "./routePolicyDefinition";
export type RoutePolicyDefinition = import("./routePolicyDefinition").RoutePolicyDefinition;
export const RoutePolicyDefinition: typeof import("./routePolicyDefinition").RoutePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["RoutePolicyDefinition"], () => require("./routePolicyDefinition"));

export { RuleSetPolicyDefinitionArgs, RuleSetPolicyDefinitionState } from "./ruleSetPolicyDefinition";
export type RuleSetPolicyDefinition = import("./ruleSetPolicyDefinition").RuleSetPolicyDefinition;
export const RuleSetPolicyDefinition: typeof import("./ruleSetPolicyDefinition").RuleSetPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["RuleSetPolicyDefinition"], () => require("./ruleSetPolicyDefinition"));

export { SecurityAppHostingFeatureTemplateArgs, SecurityAppHostingFeatureTemplateState } from "./securityAppHostingFeatureTemplate";
export type SecurityAppHostingFeatureTemplate = import("./securityAppHostingFeatureTemplate").SecurityAppHostingFeatureTemplate;
export const SecurityAppHostingFeatureTemplate: typeof import("./securityAppHostingFeatureTemplate").SecurityAppHostingFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["SecurityAppHostingFeatureTemplate"], () => require("./securityAppHostingFeatureTemplate"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { ServiceFeatureProfileArgs, ServiceFeatureProfileState } from "./serviceFeatureProfile";
export type ServiceFeatureProfile = import("./serviceFeatureProfile").ServiceFeatureProfile;
export const ServiceFeatureProfile: typeof import("./serviceFeatureProfile").ServiceFeatureProfile = null as any;
utilities.lazyLoad(exports, ["ServiceFeatureProfile"], () => require("./serviceFeatureProfile"));

export { ServiceIpv4AclFeatureArgs, ServiceIpv4AclFeatureState } from "./serviceIpv4AclFeature";
export type ServiceIpv4AclFeature = import("./serviceIpv4AclFeature").ServiceIpv4AclFeature;
export const ServiceIpv4AclFeature: typeof import("./serviceIpv4AclFeature").ServiceIpv4AclFeature = null as any;
utilities.lazyLoad(exports, ["ServiceIpv4AclFeature"], () => require("./serviceIpv4AclFeature"));

export { ServiceIpv6AclFeatureArgs, ServiceIpv6AclFeatureState } from "./serviceIpv6AclFeature";
export type ServiceIpv6AclFeature = import("./serviceIpv6AclFeature").ServiceIpv6AclFeature;
export const ServiceIpv6AclFeature: typeof import("./serviceIpv6AclFeature").ServiceIpv6AclFeature = null as any;
utilities.lazyLoad(exports, ["ServiceIpv6AclFeature"], () => require("./serviceIpv6AclFeature"));

export { ServiceLanVpnFeatureArgs, ServiceLanVpnFeatureState } from "./serviceLanVpnFeature";
export type ServiceLanVpnFeature = import("./serviceLanVpnFeature").ServiceLanVpnFeature;
export const ServiceLanVpnFeature: typeof import("./serviceLanVpnFeature").ServiceLanVpnFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeature"], () => require("./serviceLanVpnFeature"));

export { ServiceLanVpnFeatureAssociateMulticastFeatureArgs, ServiceLanVpnFeatureAssociateMulticastFeatureState } from "./serviceLanVpnFeatureAssociateMulticastFeature";
export type ServiceLanVpnFeatureAssociateMulticastFeature = import("./serviceLanVpnFeatureAssociateMulticastFeature").ServiceLanVpnFeatureAssociateMulticastFeature;
export const ServiceLanVpnFeatureAssociateMulticastFeature: typeof import("./serviceLanVpnFeatureAssociateMulticastFeature").ServiceLanVpnFeatureAssociateMulticastFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeatureAssociateMulticastFeature"], () => require("./serviceLanVpnFeatureAssociateMulticastFeature"));

export { ServiceLanVpnFeatureAssociateRoutingBgpFeatureArgs, ServiceLanVpnFeatureAssociateRoutingBgpFeatureState } from "./serviceLanVpnFeatureAssociateRoutingBgpFeature";
export type ServiceLanVpnFeatureAssociateRoutingBgpFeature = import("./serviceLanVpnFeatureAssociateRoutingBgpFeature").ServiceLanVpnFeatureAssociateRoutingBgpFeature;
export const ServiceLanVpnFeatureAssociateRoutingBgpFeature: typeof import("./serviceLanVpnFeatureAssociateRoutingBgpFeature").ServiceLanVpnFeatureAssociateRoutingBgpFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeatureAssociateRoutingBgpFeature"], () => require("./serviceLanVpnFeatureAssociateRoutingBgpFeature"));

export { ServiceLanVpnFeatureAssociateRoutingEigrpFeatureArgs, ServiceLanVpnFeatureAssociateRoutingEigrpFeatureState } from "./serviceLanVpnFeatureAssociateRoutingEigrpFeature";
export type ServiceLanVpnFeatureAssociateRoutingEigrpFeature = import("./serviceLanVpnFeatureAssociateRoutingEigrpFeature").ServiceLanVpnFeatureAssociateRoutingEigrpFeature;
export const ServiceLanVpnFeatureAssociateRoutingEigrpFeature: typeof import("./serviceLanVpnFeatureAssociateRoutingEigrpFeature").ServiceLanVpnFeatureAssociateRoutingEigrpFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeatureAssociateRoutingEigrpFeature"], () => require("./serviceLanVpnFeatureAssociateRoutingEigrpFeature"));

export { ServiceLanVpnFeatureAssociateRoutingOspfFeatureArgs, ServiceLanVpnFeatureAssociateRoutingOspfFeatureState } from "./serviceLanVpnFeatureAssociateRoutingOspfFeature";
export type ServiceLanVpnFeatureAssociateRoutingOspfFeature = import("./serviceLanVpnFeatureAssociateRoutingOspfFeature").ServiceLanVpnFeatureAssociateRoutingOspfFeature;
export const ServiceLanVpnFeatureAssociateRoutingOspfFeature: typeof import("./serviceLanVpnFeatureAssociateRoutingOspfFeature").ServiceLanVpnFeatureAssociateRoutingOspfFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeatureAssociateRoutingOspfFeature"], () => require("./serviceLanVpnFeatureAssociateRoutingOspfFeature"));

export { ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureArgs, ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureState } from "./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature";
export type ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature = import("./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature;
export const ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature: typeof import("./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature"], () => require("./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature"));

export { ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureArgs, ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureState } from "./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature";
export type ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature = import("./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature;
export const ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature: typeof import("./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature"], () => require("./serviceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature"));

export { ServiceLanVpnInterfaceEthernetFeatureArgs, ServiceLanVpnInterfaceEthernetFeatureState } from "./serviceLanVpnInterfaceEthernetFeature";
export type ServiceLanVpnInterfaceEthernetFeature = import("./serviceLanVpnInterfaceEthernetFeature").ServiceLanVpnInterfaceEthernetFeature;
export const ServiceLanVpnInterfaceEthernetFeature: typeof import("./serviceLanVpnInterfaceEthernetFeature").ServiceLanVpnInterfaceEthernetFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnInterfaceEthernetFeature"], () => require("./serviceLanVpnInterfaceEthernetFeature"));

export { ServiceLanVpnInterfaceGreFeatureArgs, ServiceLanVpnInterfaceGreFeatureState } from "./serviceLanVpnInterfaceGreFeature";
export type ServiceLanVpnInterfaceGreFeature = import("./serviceLanVpnInterfaceGreFeature").ServiceLanVpnInterfaceGreFeature;
export const ServiceLanVpnInterfaceGreFeature: typeof import("./serviceLanVpnInterfaceGreFeature").ServiceLanVpnInterfaceGreFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnInterfaceGreFeature"], () => require("./serviceLanVpnInterfaceGreFeature"));

export { ServiceLanVpnInterfaceIpsecFeatureArgs, ServiceLanVpnInterfaceIpsecFeatureState } from "./serviceLanVpnInterfaceIpsecFeature";
export type ServiceLanVpnInterfaceIpsecFeature = import("./serviceLanVpnInterfaceIpsecFeature").ServiceLanVpnInterfaceIpsecFeature;
export const ServiceLanVpnInterfaceIpsecFeature: typeof import("./serviceLanVpnInterfaceIpsecFeature").ServiceLanVpnInterfaceIpsecFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnInterfaceIpsecFeature"], () => require("./serviceLanVpnInterfaceIpsecFeature"));

export { ServiceLanVpnInterfaceSviFeatureArgs, ServiceLanVpnInterfaceSviFeatureState } from "./serviceLanVpnInterfaceSviFeature";
export type ServiceLanVpnInterfaceSviFeature = import("./serviceLanVpnInterfaceSviFeature").ServiceLanVpnInterfaceSviFeature;
export const ServiceLanVpnInterfaceSviFeature: typeof import("./serviceLanVpnInterfaceSviFeature").ServiceLanVpnInterfaceSviFeature = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnInterfaceSviFeature"], () => require("./serviceLanVpnInterfaceSviFeature"));

export { ServiceMulticastFeatureArgs, ServiceMulticastFeatureState } from "./serviceMulticastFeature";
export type ServiceMulticastFeature = import("./serviceMulticastFeature").ServiceMulticastFeature;
export const ServiceMulticastFeature: typeof import("./serviceMulticastFeature").ServiceMulticastFeature = null as any;
utilities.lazyLoad(exports, ["ServiceMulticastFeature"], () => require("./serviceMulticastFeature"));

export { ServiceObjectTrackerFeatureArgs, ServiceObjectTrackerFeatureState } from "./serviceObjectTrackerFeature";
export type ServiceObjectTrackerFeature = import("./serviceObjectTrackerFeature").ServiceObjectTrackerFeature;
export const ServiceObjectTrackerFeature: typeof import("./serviceObjectTrackerFeature").ServiceObjectTrackerFeature = null as any;
utilities.lazyLoad(exports, ["ServiceObjectTrackerFeature"], () => require("./serviceObjectTrackerFeature"));

export { ServiceObjectTrackerGroupFeatureArgs, ServiceObjectTrackerGroupFeatureState } from "./serviceObjectTrackerGroupFeature";
export type ServiceObjectTrackerGroupFeature = import("./serviceObjectTrackerGroupFeature").ServiceObjectTrackerGroupFeature;
export const ServiceObjectTrackerGroupFeature: typeof import("./serviceObjectTrackerGroupFeature").ServiceObjectTrackerGroupFeature = null as any;
utilities.lazyLoad(exports, ["ServiceObjectTrackerGroupFeature"], () => require("./serviceObjectTrackerGroupFeature"));

export { ServiceRoutePolicyFeatureArgs, ServiceRoutePolicyFeatureState } from "./serviceRoutePolicyFeature";
export type ServiceRoutePolicyFeature = import("./serviceRoutePolicyFeature").ServiceRoutePolicyFeature;
export const ServiceRoutePolicyFeature: typeof import("./serviceRoutePolicyFeature").ServiceRoutePolicyFeature = null as any;
utilities.lazyLoad(exports, ["ServiceRoutePolicyFeature"], () => require("./serviceRoutePolicyFeature"));

export { ServiceRoutingBgpFeatureArgs, ServiceRoutingBgpFeatureState } from "./serviceRoutingBgpFeature";
export type ServiceRoutingBgpFeature = import("./serviceRoutingBgpFeature").ServiceRoutingBgpFeature;
export const ServiceRoutingBgpFeature: typeof import("./serviceRoutingBgpFeature").ServiceRoutingBgpFeature = null as any;
utilities.lazyLoad(exports, ["ServiceRoutingBgpFeature"], () => require("./serviceRoutingBgpFeature"));

export { ServiceRoutingEigrpFeatureArgs, ServiceRoutingEigrpFeatureState } from "./serviceRoutingEigrpFeature";
export type ServiceRoutingEigrpFeature = import("./serviceRoutingEigrpFeature").ServiceRoutingEigrpFeature;
export const ServiceRoutingEigrpFeature: typeof import("./serviceRoutingEigrpFeature").ServiceRoutingEigrpFeature = null as any;
utilities.lazyLoad(exports, ["ServiceRoutingEigrpFeature"], () => require("./serviceRoutingEigrpFeature"));

export { ServiceRoutingOspfFeatureArgs, ServiceRoutingOspfFeatureState } from "./serviceRoutingOspfFeature";
export type ServiceRoutingOspfFeature = import("./serviceRoutingOspfFeature").ServiceRoutingOspfFeature;
export const ServiceRoutingOspfFeature: typeof import("./serviceRoutingOspfFeature").ServiceRoutingOspfFeature = null as any;
utilities.lazyLoad(exports, ["ServiceRoutingOspfFeature"], () => require("./serviceRoutingOspfFeature"));

export { ServiceRoutingOspfv3Ipv4FeatureArgs, ServiceRoutingOspfv3Ipv4FeatureState } from "./serviceRoutingOspfv3Ipv4Feature";
export type ServiceRoutingOspfv3Ipv4Feature = import("./serviceRoutingOspfv3Ipv4Feature").ServiceRoutingOspfv3Ipv4Feature;
export const ServiceRoutingOspfv3Ipv4Feature: typeof import("./serviceRoutingOspfv3Ipv4Feature").ServiceRoutingOspfv3Ipv4Feature = null as any;
utilities.lazyLoad(exports, ["ServiceRoutingOspfv3Ipv4Feature"], () => require("./serviceRoutingOspfv3Ipv4Feature"));

export { ServiceRoutingOspfv3Ipv6FeatureArgs, ServiceRoutingOspfv3Ipv6FeatureState } from "./serviceRoutingOspfv3Ipv6Feature";
export type ServiceRoutingOspfv3Ipv6Feature = import("./serviceRoutingOspfv3Ipv6Feature").ServiceRoutingOspfv3Ipv6Feature;
export const ServiceRoutingOspfv3Ipv6Feature: typeof import("./serviceRoutingOspfv3Ipv6Feature").ServiceRoutingOspfv3Ipv6Feature = null as any;
utilities.lazyLoad(exports, ["ServiceRoutingOspfv3Ipv6Feature"], () => require("./serviceRoutingOspfv3Ipv6Feature"));

export { ServiceSwitchportFeatureArgs, ServiceSwitchportFeatureState } from "./serviceSwitchportFeature";
export type ServiceSwitchportFeature = import("./serviceSwitchportFeature").ServiceSwitchportFeature;
export const ServiceSwitchportFeature: typeof import("./serviceSwitchportFeature").ServiceSwitchportFeature = null as any;
utilities.lazyLoad(exports, ["ServiceSwitchportFeature"], () => require("./serviceSwitchportFeature"));

export { ServiceTrackerFeatureArgs, ServiceTrackerFeatureState } from "./serviceTrackerFeature";
export type ServiceTrackerFeature = import("./serviceTrackerFeature").ServiceTrackerFeature;
export const ServiceTrackerFeature: typeof import("./serviceTrackerFeature").ServiceTrackerFeature = null as any;
utilities.lazyLoad(exports, ["ServiceTrackerFeature"], () => require("./serviceTrackerFeature"));

export { ServiceTrackerGroupFeatureArgs, ServiceTrackerGroupFeatureState } from "./serviceTrackerGroupFeature";
export type ServiceTrackerGroupFeature = import("./serviceTrackerGroupFeature").ServiceTrackerGroupFeature;
export const ServiceTrackerGroupFeature: typeof import("./serviceTrackerGroupFeature").ServiceTrackerGroupFeature = null as any;
utilities.lazyLoad(exports, ["ServiceTrackerGroupFeature"], () => require("./serviceTrackerGroupFeature"));

export { ServiceWirelessLanFeatureArgs, ServiceWirelessLanFeatureState } from "./serviceWirelessLanFeature";
export type ServiceWirelessLanFeature = import("./serviceWirelessLanFeature").ServiceWirelessLanFeature;
export const ServiceWirelessLanFeature: typeof import("./serviceWirelessLanFeature").ServiceWirelessLanFeature = null as any;
utilities.lazyLoad(exports, ["ServiceWirelessLanFeature"], () => require("./serviceWirelessLanFeature"));

export { SigSecurityFeatureProfileArgs, SigSecurityFeatureProfileState } from "./sigSecurityFeatureProfile";
export type SigSecurityFeatureProfile = import("./sigSecurityFeatureProfile").SigSecurityFeatureProfile;
export const SigSecurityFeatureProfile: typeof import("./sigSecurityFeatureProfile").SigSecurityFeatureProfile = null as any;
utilities.lazyLoad(exports, ["SigSecurityFeatureProfile"], () => require("./sigSecurityFeatureProfile"));

export { SiteListPolicyObjectArgs, SiteListPolicyObjectState } from "./siteListPolicyObject";
export type SiteListPolicyObject = import("./siteListPolicyObject").SiteListPolicyObject;
export const SiteListPolicyObject: typeof import("./siteListPolicyObject").SiteListPolicyObject = null as any;
utilities.lazyLoad(exports, ["SiteListPolicyObject"], () => require("./siteListPolicyObject"));

export { SlaClassPolicyObjectArgs, SlaClassPolicyObjectState } from "./slaClassPolicyObject";
export type SlaClassPolicyObject = import("./slaClassPolicyObject").SlaClassPolicyObject;
export const SlaClassPolicyObject: typeof import("./slaClassPolicyObject").SlaClassPolicyObject = null as any;
utilities.lazyLoad(exports, ["SlaClassPolicyObject"], () => require("./slaClassPolicyObject"));

export { StandardCommunityListPolicyObjectArgs, StandardCommunityListPolicyObjectState } from "./standardCommunityListPolicyObject";
export type StandardCommunityListPolicyObject = import("./standardCommunityListPolicyObject").StandardCommunityListPolicyObject;
export const StandardCommunityListPolicyObject: typeof import("./standardCommunityListPolicyObject").StandardCommunityListPolicyObject = null as any;
utilities.lazyLoad(exports, ["StandardCommunityListPolicyObject"], () => require("./standardCommunityListPolicyObject"));

export { SwitchportFeatureTemplateArgs, SwitchportFeatureTemplateState } from "./switchportFeatureTemplate";
export type SwitchportFeatureTemplate = import("./switchportFeatureTemplate").SwitchportFeatureTemplate;
export const SwitchportFeatureTemplate: typeof import("./switchportFeatureTemplate").SwitchportFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["SwitchportFeatureTemplate"], () => require("./switchportFeatureTemplate"));

export { SystemAaaFeatureArgs, SystemAaaFeatureState } from "./systemAaaFeature";
export type SystemAaaFeature = import("./systemAaaFeature").SystemAaaFeature;
export const SystemAaaFeature: typeof import("./systemAaaFeature").SystemAaaFeature = null as any;
utilities.lazyLoad(exports, ["SystemAaaFeature"], () => require("./systemAaaFeature"));

export { SystemBannerFeatureArgs, SystemBannerFeatureState } from "./systemBannerFeature";
export type SystemBannerFeature = import("./systemBannerFeature").SystemBannerFeature;
export const SystemBannerFeature: typeof import("./systemBannerFeature").SystemBannerFeature = null as any;
utilities.lazyLoad(exports, ["SystemBannerFeature"], () => require("./systemBannerFeature"));

export { SystemBasicFeatureArgs, SystemBasicFeatureState } from "./systemBasicFeature";
export type SystemBasicFeature = import("./systemBasicFeature").SystemBasicFeature;
export const SystemBasicFeature: typeof import("./systemBasicFeature").SystemBasicFeature = null as any;
utilities.lazyLoad(exports, ["SystemBasicFeature"], () => require("./systemBasicFeature"));

export { SystemBfdFeatureArgs, SystemBfdFeatureState } from "./systemBfdFeature";
export type SystemBfdFeature = import("./systemBfdFeature").SystemBfdFeature;
export const SystemBfdFeature: typeof import("./systemBfdFeature").SystemBfdFeature = null as any;
utilities.lazyLoad(exports, ["SystemBfdFeature"], () => require("./systemBfdFeature"));

export { SystemFeatureProfileArgs, SystemFeatureProfileState } from "./systemFeatureProfile";
export type SystemFeatureProfile = import("./systemFeatureProfile").SystemFeatureProfile;
export const SystemFeatureProfile: typeof import("./systemFeatureProfile").SystemFeatureProfile = null as any;
utilities.lazyLoad(exports, ["SystemFeatureProfile"], () => require("./systemFeatureProfile"));

export { SystemFlexiblePortSpeedFeatureArgs, SystemFlexiblePortSpeedFeatureState } from "./systemFlexiblePortSpeedFeature";
export type SystemFlexiblePortSpeedFeature = import("./systemFlexiblePortSpeedFeature").SystemFlexiblePortSpeedFeature;
export const SystemFlexiblePortSpeedFeature: typeof import("./systemFlexiblePortSpeedFeature").SystemFlexiblePortSpeedFeature = null as any;
utilities.lazyLoad(exports, ["SystemFlexiblePortSpeedFeature"], () => require("./systemFlexiblePortSpeedFeature"));

export { SystemGlobalFeatureArgs, SystemGlobalFeatureState } from "./systemGlobalFeature";
export type SystemGlobalFeature = import("./systemGlobalFeature").SystemGlobalFeature;
export const SystemGlobalFeature: typeof import("./systemGlobalFeature").SystemGlobalFeature = null as any;
utilities.lazyLoad(exports, ["SystemGlobalFeature"], () => require("./systemGlobalFeature"));

export { SystemIpv4DeviceAccessFeatureArgs, SystemIpv4DeviceAccessFeatureState } from "./systemIpv4DeviceAccessFeature";
export type SystemIpv4DeviceAccessFeature = import("./systemIpv4DeviceAccessFeature").SystemIpv4DeviceAccessFeature;
export const SystemIpv4DeviceAccessFeature: typeof import("./systemIpv4DeviceAccessFeature").SystemIpv4DeviceAccessFeature = null as any;
utilities.lazyLoad(exports, ["SystemIpv4DeviceAccessFeature"], () => require("./systemIpv4DeviceAccessFeature"));

export { SystemIpv6DeviceAccessFeatureArgs, SystemIpv6DeviceAccessFeatureState } from "./systemIpv6DeviceAccessFeature";
export type SystemIpv6DeviceAccessFeature = import("./systemIpv6DeviceAccessFeature").SystemIpv6DeviceAccessFeature;
export const SystemIpv6DeviceAccessFeature: typeof import("./systemIpv6DeviceAccessFeature").SystemIpv6DeviceAccessFeature = null as any;
utilities.lazyLoad(exports, ["SystemIpv6DeviceAccessFeature"], () => require("./systemIpv6DeviceAccessFeature"));

export { SystemLoggingFeatureArgs, SystemLoggingFeatureState } from "./systemLoggingFeature";
export type SystemLoggingFeature = import("./systemLoggingFeature").SystemLoggingFeature;
export const SystemLoggingFeature: typeof import("./systemLoggingFeature").SystemLoggingFeature = null as any;
utilities.lazyLoad(exports, ["SystemLoggingFeature"], () => require("./systemLoggingFeature"));

export { SystemMrfFeatureArgs, SystemMrfFeatureState } from "./systemMrfFeature";
export type SystemMrfFeature = import("./systemMrfFeature").SystemMrfFeature;
export const SystemMrfFeature: typeof import("./systemMrfFeature").SystemMrfFeature = null as any;
utilities.lazyLoad(exports, ["SystemMrfFeature"], () => require("./systemMrfFeature"));

export { SystemNtpFeatureArgs, SystemNtpFeatureState } from "./systemNtpFeature";
export type SystemNtpFeature = import("./systemNtpFeature").SystemNtpFeature;
export const SystemNtpFeature: typeof import("./systemNtpFeature").SystemNtpFeature = null as any;
utilities.lazyLoad(exports, ["SystemNtpFeature"], () => require("./systemNtpFeature"));

export { SystemOmpFeatureArgs, SystemOmpFeatureState } from "./systemOmpFeature";
export type SystemOmpFeature = import("./systemOmpFeature").SystemOmpFeature;
export const SystemOmpFeature: typeof import("./systemOmpFeature").SystemOmpFeature = null as any;
utilities.lazyLoad(exports, ["SystemOmpFeature"], () => require("./systemOmpFeature"));

export { SystemPerformanceMonitoringFeatureArgs, SystemPerformanceMonitoringFeatureState } from "./systemPerformanceMonitoringFeature";
export type SystemPerformanceMonitoringFeature = import("./systemPerformanceMonitoringFeature").SystemPerformanceMonitoringFeature;
export const SystemPerformanceMonitoringFeature: typeof import("./systemPerformanceMonitoringFeature").SystemPerformanceMonitoringFeature = null as any;
utilities.lazyLoad(exports, ["SystemPerformanceMonitoringFeature"], () => require("./systemPerformanceMonitoringFeature"));

export { SystemRemoteAccessFeatureArgs, SystemRemoteAccessFeatureState } from "./systemRemoteAccessFeature";
export type SystemRemoteAccessFeature = import("./systemRemoteAccessFeature").SystemRemoteAccessFeature;
export const SystemRemoteAccessFeature: typeof import("./systemRemoteAccessFeature").SystemRemoteAccessFeature = null as any;
utilities.lazyLoad(exports, ["SystemRemoteAccessFeature"], () => require("./systemRemoteAccessFeature"));

export { SystemSecurityFeatureArgs, SystemSecurityFeatureState } from "./systemSecurityFeature";
export type SystemSecurityFeature = import("./systemSecurityFeature").SystemSecurityFeature;
export const SystemSecurityFeature: typeof import("./systemSecurityFeature").SystemSecurityFeature = null as any;
utilities.lazyLoad(exports, ["SystemSecurityFeature"], () => require("./systemSecurityFeature"));

export { SystemSnmpFeatureArgs, SystemSnmpFeatureState } from "./systemSnmpFeature";
export type SystemSnmpFeature = import("./systemSnmpFeature").SystemSnmpFeature;
export const SystemSnmpFeature: typeof import("./systemSnmpFeature").SystemSnmpFeature = null as any;
utilities.lazyLoad(exports, ["SystemSnmpFeature"], () => require("./systemSnmpFeature"));

export { TlocListPolicyObjectArgs, TlocListPolicyObjectState } from "./tlocListPolicyObject";
export type TlocListPolicyObject = import("./tlocListPolicyObject").TlocListPolicyObject;
export const TlocListPolicyObject: typeof import("./tlocListPolicyObject").TlocListPolicyObject = null as any;
utilities.lazyLoad(exports, ["TlocListPolicyObject"], () => require("./tlocListPolicyObject"));

export { TlsSslDecryptionPolicyDefinitionArgs, TlsSslDecryptionPolicyDefinitionState } from "./tlsSslDecryptionPolicyDefinition";
export type TlsSslDecryptionPolicyDefinition = import("./tlsSslDecryptionPolicyDefinition").TlsSslDecryptionPolicyDefinition;
export const TlsSslDecryptionPolicyDefinition: typeof import("./tlsSslDecryptionPolicyDefinition").TlsSslDecryptionPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["TlsSslDecryptionPolicyDefinition"], () => require("./tlsSslDecryptionPolicyDefinition"));

export { TlsSslProfilePolicyDefinitionArgs, TlsSslProfilePolicyDefinitionState } from "./tlsSslProfilePolicyDefinition";
export type TlsSslProfilePolicyDefinition = import("./tlsSslProfilePolicyDefinition").TlsSslProfilePolicyDefinition;
export const TlsSslProfilePolicyDefinition: typeof import("./tlsSslProfilePolicyDefinition").TlsSslProfilePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["TlsSslProfilePolicyDefinition"], () => require("./tlsSslProfilePolicyDefinition"));

export { TrafficDataPolicyDefinitionArgs, TrafficDataPolicyDefinitionState } from "./trafficDataPolicyDefinition";
export type TrafficDataPolicyDefinition = import("./trafficDataPolicyDefinition").TrafficDataPolicyDefinition;
export const TrafficDataPolicyDefinition: typeof import("./trafficDataPolicyDefinition").TrafficDataPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["TrafficDataPolicyDefinition"], () => require("./trafficDataPolicyDefinition"));

export { TransportCellularControllerFeatureArgs, TransportCellularControllerFeatureState } from "./transportCellularControllerFeature";
export type TransportCellularControllerFeature = import("./transportCellularControllerFeature").TransportCellularControllerFeature;
export const TransportCellularControllerFeature: typeof import("./transportCellularControllerFeature").TransportCellularControllerFeature = null as any;
utilities.lazyLoad(exports, ["TransportCellularControllerFeature"], () => require("./transportCellularControllerFeature"));

export { TransportCellularProfileFeatureArgs, TransportCellularProfileFeatureState } from "./transportCellularProfileFeature";
export type TransportCellularProfileFeature = import("./transportCellularProfileFeature").TransportCellularProfileFeature;
export const TransportCellularProfileFeature: typeof import("./transportCellularProfileFeature").TransportCellularProfileFeature = null as any;
utilities.lazyLoad(exports, ["TransportCellularProfileFeature"], () => require("./transportCellularProfileFeature"));

export { TransportFeatureProfileArgs, TransportFeatureProfileState } from "./transportFeatureProfile";
export type TransportFeatureProfile = import("./transportFeatureProfile").TransportFeatureProfile;
export const TransportFeatureProfile: typeof import("./transportFeatureProfile").TransportFeatureProfile = null as any;
utilities.lazyLoad(exports, ["TransportFeatureProfile"], () => require("./transportFeatureProfile"));

export { TransportGpsFeatureArgs, TransportGpsFeatureState } from "./transportGpsFeature";
export type TransportGpsFeature = import("./transportGpsFeature").TransportGpsFeature;
export const TransportGpsFeature: typeof import("./transportGpsFeature").TransportGpsFeature = null as any;
utilities.lazyLoad(exports, ["TransportGpsFeature"], () => require("./transportGpsFeature"));

export { TransportIpv4AclFeatureArgs, TransportIpv4AclFeatureState } from "./transportIpv4AclFeature";
export type TransportIpv4AclFeature = import("./transportIpv4AclFeature").TransportIpv4AclFeature;
export const TransportIpv4AclFeature: typeof import("./transportIpv4AclFeature").TransportIpv4AclFeature = null as any;
utilities.lazyLoad(exports, ["TransportIpv4AclFeature"], () => require("./transportIpv4AclFeature"));

export { TransportIpv6AclFeatureArgs, TransportIpv6AclFeatureState } from "./transportIpv6AclFeature";
export type TransportIpv6AclFeature = import("./transportIpv6AclFeature").TransportIpv6AclFeature;
export const TransportIpv6AclFeature: typeof import("./transportIpv6AclFeature").TransportIpv6AclFeature = null as any;
utilities.lazyLoad(exports, ["TransportIpv6AclFeature"], () => require("./transportIpv6AclFeature"));

export { TransportIpv6TrackerFeatureArgs, TransportIpv6TrackerFeatureState } from "./transportIpv6TrackerFeature";
export type TransportIpv6TrackerFeature = import("./transportIpv6TrackerFeature").TransportIpv6TrackerFeature;
export const TransportIpv6TrackerFeature: typeof import("./transportIpv6TrackerFeature").TransportIpv6TrackerFeature = null as any;
utilities.lazyLoad(exports, ["TransportIpv6TrackerFeature"], () => require("./transportIpv6TrackerFeature"));

export { TransportIpv6TrackerGroupFeatureArgs, TransportIpv6TrackerGroupFeatureState } from "./transportIpv6TrackerGroupFeature";
export type TransportIpv6TrackerGroupFeature = import("./transportIpv6TrackerGroupFeature").TransportIpv6TrackerGroupFeature;
export const TransportIpv6TrackerGroupFeature: typeof import("./transportIpv6TrackerGroupFeature").TransportIpv6TrackerGroupFeature = null as any;
utilities.lazyLoad(exports, ["TransportIpv6TrackerGroupFeature"], () => require("./transportIpv6TrackerGroupFeature"));

export { TransportManagementVpnFeatureArgs, TransportManagementVpnFeatureState } from "./transportManagementVpnFeature";
export type TransportManagementVpnFeature = import("./transportManagementVpnFeature").TransportManagementVpnFeature;
export const TransportManagementVpnFeature: typeof import("./transportManagementVpnFeature").TransportManagementVpnFeature = null as any;
utilities.lazyLoad(exports, ["TransportManagementVpnFeature"], () => require("./transportManagementVpnFeature"));

export { TransportManagementVpnInterfaceEthernetFeatureArgs, TransportManagementVpnInterfaceEthernetFeatureState } from "./transportManagementVpnInterfaceEthernetFeature";
export type TransportManagementVpnInterfaceEthernetFeature = import("./transportManagementVpnInterfaceEthernetFeature").TransportManagementVpnInterfaceEthernetFeature;
export const TransportManagementVpnInterfaceEthernetFeature: typeof import("./transportManagementVpnInterfaceEthernetFeature").TransportManagementVpnInterfaceEthernetFeature = null as any;
utilities.lazyLoad(exports, ["TransportManagementVpnInterfaceEthernetFeature"], () => require("./transportManagementVpnInterfaceEthernetFeature"));

export { TransportRoutePolicyFeatureArgs, TransportRoutePolicyFeatureState } from "./transportRoutePolicyFeature";
export type TransportRoutePolicyFeature = import("./transportRoutePolicyFeature").TransportRoutePolicyFeature;
export const TransportRoutePolicyFeature: typeof import("./transportRoutePolicyFeature").TransportRoutePolicyFeature = null as any;
utilities.lazyLoad(exports, ["TransportRoutePolicyFeature"], () => require("./transportRoutePolicyFeature"));

export { TransportRoutingBgpFeatureArgs, TransportRoutingBgpFeatureState } from "./transportRoutingBgpFeature";
export type TransportRoutingBgpFeature = import("./transportRoutingBgpFeature").TransportRoutingBgpFeature;
export const TransportRoutingBgpFeature: typeof import("./transportRoutingBgpFeature").TransportRoutingBgpFeature = null as any;
utilities.lazyLoad(exports, ["TransportRoutingBgpFeature"], () => require("./transportRoutingBgpFeature"));

export { TransportRoutingOspfFeatureArgs, TransportRoutingOspfFeatureState } from "./transportRoutingOspfFeature";
export type TransportRoutingOspfFeature = import("./transportRoutingOspfFeature").TransportRoutingOspfFeature;
export const TransportRoutingOspfFeature: typeof import("./transportRoutingOspfFeature").TransportRoutingOspfFeature = null as any;
utilities.lazyLoad(exports, ["TransportRoutingOspfFeature"], () => require("./transportRoutingOspfFeature"));

export { TransportRoutingOspfv3Ipv4FeatureArgs, TransportRoutingOspfv3Ipv4FeatureState } from "./transportRoutingOspfv3Ipv4Feature";
export type TransportRoutingOspfv3Ipv4Feature = import("./transportRoutingOspfv3Ipv4Feature").TransportRoutingOspfv3Ipv4Feature;
export const TransportRoutingOspfv3Ipv4Feature: typeof import("./transportRoutingOspfv3Ipv4Feature").TransportRoutingOspfv3Ipv4Feature = null as any;
utilities.lazyLoad(exports, ["TransportRoutingOspfv3Ipv4Feature"], () => require("./transportRoutingOspfv3Ipv4Feature"));

export { TransportRoutingOspfv3Ipv6FeatureArgs, TransportRoutingOspfv3Ipv6FeatureState } from "./transportRoutingOspfv3Ipv6Feature";
export type TransportRoutingOspfv3Ipv6Feature = import("./transportRoutingOspfv3Ipv6Feature").TransportRoutingOspfv3Ipv6Feature;
export const TransportRoutingOspfv3Ipv6Feature: typeof import("./transportRoutingOspfv3Ipv6Feature").TransportRoutingOspfv3Ipv6Feature = null as any;
utilities.lazyLoad(exports, ["TransportRoutingOspfv3Ipv6Feature"], () => require("./transportRoutingOspfv3Ipv6Feature"));

export { TransportT1E1ControllerFeatureArgs, TransportT1E1ControllerFeatureState } from "./transportT1E1ControllerFeature";
export type TransportT1E1ControllerFeature = import("./transportT1E1ControllerFeature").TransportT1E1ControllerFeature;
export const TransportT1E1ControllerFeature: typeof import("./transportT1E1ControllerFeature").TransportT1E1ControllerFeature = null as any;
utilities.lazyLoad(exports, ["TransportT1E1ControllerFeature"], () => require("./transportT1E1ControllerFeature"));

export { TransportTrackerFeatureArgs, TransportTrackerFeatureState } from "./transportTrackerFeature";
export type TransportTrackerFeature = import("./transportTrackerFeature").TransportTrackerFeature;
export const TransportTrackerFeature: typeof import("./transportTrackerFeature").TransportTrackerFeature = null as any;
utilities.lazyLoad(exports, ["TransportTrackerFeature"], () => require("./transportTrackerFeature"));

export { TransportTrackerGroupFeatureArgs, TransportTrackerGroupFeatureState } from "./transportTrackerGroupFeature";
export type TransportTrackerGroupFeature = import("./transportTrackerGroupFeature").TransportTrackerGroupFeature;
export const TransportTrackerGroupFeature: typeof import("./transportTrackerGroupFeature").TransportTrackerGroupFeature = null as any;
utilities.lazyLoad(exports, ["TransportTrackerGroupFeature"], () => require("./transportTrackerGroupFeature"));

export { TransportWanVpnFeatureArgs, TransportWanVpnFeatureState } from "./transportWanVpnFeature";
export type TransportWanVpnFeature = import("./transportWanVpnFeature").TransportWanVpnFeature;
export const TransportWanVpnFeature: typeof import("./transportWanVpnFeature").TransportWanVpnFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnFeature"], () => require("./transportWanVpnFeature"));

export { TransportWanVpnFeatureAssociateRoutingBgpFeatureArgs, TransportWanVpnFeatureAssociateRoutingBgpFeatureState } from "./transportWanVpnFeatureAssociateRoutingBgpFeature";
export type TransportWanVpnFeatureAssociateRoutingBgpFeature = import("./transportWanVpnFeatureAssociateRoutingBgpFeature").TransportWanVpnFeatureAssociateRoutingBgpFeature;
export const TransportWanVpnFeatureAssociateRoutingBgpFeature: typeof import("./transportWanVpnFeatureAssociateRoutingBgpFeature").TransportWanVpnFeatureAssociateRoutingBgpFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnFeatureAssociateRoutingBgpFeature"], () => require("./transportWanVpnFeatureAssociateRoutingBgpFeature"));

export { TransportWanVpnFeatureAssociateRoutingOspfFeatureArgs, TransportWanVpnFeatureAssociateRoutingOspfFeatureState } from "./transportWanVpnFeatureAssociateRoutingOspfFeature";
export type TransportWanVpnFeatureAssociateRoutingOspfFeature = import("./transportWanVpnFeatureAssociateRoutingOspfFeature").TransportWanVpnFeatureAssociateRoutingOspfFeature;
export const TransportWanVpnFeatureAssociateRoutingOspfFeature: typeof import("./transportWanVpnFeatureAssociateRoutingOspfFeature").TransportWanVpnFeatureAssociateRoutingOspfFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnFeatureAssociateRoutingOspfFeature"], () => require("./transportWanVpnFeatureAssociateRoutingOspfFeature"));

export { TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureArgs, TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4FeatureState } from "./transportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature";
export type TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature = import("./transportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature;
export const TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature: typeof import("./transportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature").TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature"], () => require("./transportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature"));

export { TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureArgs, TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6FeatureState } from "./transportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature";
export type TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature = import("./transportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature;
export const TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature: typeof import("./transportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature").TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature"], () => require("./transportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature"));

export { TransportWanVpnInterfaceCellularFeatureArgs, TransportWanVpnInterfaceCellularFeatureState } from "./transportWanVpnInterfaceCellularFeature";
export type TransportWanVpnInterfaceCellularFeature = import("./transportWanVpnInterfaceCellularFeature").TransportWanVpnInterfaceCellularFeature;
export const TransportWanVpnInterfaceCellularFeature: typeof import("./transportWanVpnInterfaceCellularFeature").TransportWanVpnInterfaceCellularFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceCellularFeature"], () => require("./transportWanVpnInterfaceCellularFeature"));

export { TransportWanVpnInterfaceEthernetFeatureArgs, TransportWanVpnInterfaceEthernetFeatureState } from "./transportWanVpnInterfaceEthernetFeature";
export type TransportWanVpnInterfaceEthernetFeature = import("./transportWanVpnInterfaceEthernetFeature").TransportWanVpnInterfaceEthernetFeature;
export const TransportWanVpnInterfaceEthernetFeature: typeof import("./transportWanVpnInterfaceEthernetFeature").TransportWanVpnInterfaceEthernetFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceEthernetFeature"], () => require("./transportWanVpnInterfaceEthernetFeature"));

export { TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureArgs, TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeatureState } from "./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature";
export type TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature = import("./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature").TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature;
export const TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature: typeof import("./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature").TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature"], () => require("./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature"));

export { TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureArgs, TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeatureState } from "./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature";
export type TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature = import("./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature").TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature;
export const TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature: typeof import("./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature").TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature"], () => require("./transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature"));

export { TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureArgs, TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeatureState } from "./transportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature";
export type TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature = import("./transportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature").TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature;
export const TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature: typeof import("./transportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature").TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature"], () => require("./transportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature"));

export { TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureArgs, TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeatureState } from "./transportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature";
export type TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature = import("./transportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature").TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature;
export const TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature: typeof import("./transportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature").TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature"], () => require("./transportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature"));

export { TransportWanVpnInterfaceGreFeatureArgs, TransportWanVpnInterfaceGreFeatureState } from "./transportWanVpnInterfaceGreFeature";
export type TransportWanVpnInterfaceGreFeature = import("./transportWanVpnInterfaceGreFeature").TransportWanVpnInterfaceGreFeature;
export const TransportWanVpnInterfaceGreFeature: typeof import("./transportWanVpnInterfaceGreFeature").TransportWanVpnInterfaceGreFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceGreFeature"], () => require("./transportWanVpnInterfaceGreFeature"));

export { TransportWanVpnInterfaceIpsecFeatureArgs, TransportWanVpnInterfaceIpsecFeatureState } from "./transportWanVpnInterfaceIpsecFeature";
export type TransportWanVpnInterfaceIpsecFeature = import("./transportWanVpnInterfaceIpsecFeature").TransportWanVpnInterfaceIpsecFeature;
export const TransportWanVpnInterfaceIpsecFeature: typeof import("./transportWanVpnInterfaceIpsecFeature").TransportWanVpnInterfaceIpsecFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceIpsecFeature"], () => require("./transportWanVpnInterfaceIpsecFeature"));

export { TransportWanVpnInterfaceT1E1SerialFeatureArgs, TransportWanVpnInterfaceT1E1SerialFeatureState } from "./transportWanVpnInterfaceT1E1SerialFeature";
export type TransportWanVpnInterfaceT1E1SerialFeature = import("./transportWanVpnInterfaceT1E1SerialFeature").TransportWanVpnInterfaceT1E1SerialFeature;
export const TransportWanVpnInterfaceT1E1SerialFeature: typeof import("./transportWanVpnInterfaceT1E1SerialFeature").TransportWanVpnInterfaceT1E1SerialFeature = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceT1E1SerialFeature"], () => require("./transportWanVpnInterfaceT1E1SerialFeature"));

export { UrlFilteringPolicyDefinitionArgs, UrlFilteringPolicyDefinitionState } from "./urlFilteringPolicyDefinition";
export type UrlFilteringPolicyDefinition = import("./urlFilteringPolicyDefinition").UrlFilteringPolicyDefinition;
export const UrlFilteringPolicyDefinition: typeof import("./urlFilteringPolicyDefinition").UrlFilteringPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["UrlFilteringPolicyDefinition"], () => require("./urlFilteringPolicyDefinition"));

export { VpnInterfaceCellularFeatureTemplateArgs, VpnInterfaceCellularFeatureTemplateState } from "./vpnInterfaceCellularFeatureTemplate";
export type VpnInterfaceCellularFeatureTemplate = import("./vpnInterfaceCellularFeatureTemplate").VpnInterfaceCellularFeatureTemplate;
export const VpnInterfaceCellularFeatureTemplate: typeof import("./vpnInterfaceCellularFeatureTemplate").VpnInterfaceCellularFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceCellularFeatureTemplate"], () => require("./vpnInterfaceCellularFeatureTemplate"));

export { VpnInterfaceDslIpoeFeatureTemplateArgs, VpnInterfaceDslIpoeFeatureTemplateState } from "./vpnInterfaceDslIpoeFeatureTemplate";
export type VpnInterfaceDslIpoeFeatureTemplate = import("./vpnInterfaceDslIpoeFeatureTemplate").VpnInterfaceDslIpoeFeatureTemplate;
export const VpnInterfaceDslIpoeFeatureTemplate: typeof import("./vpnInterfaceDslIpoeFeatureTemplate").VpnInterfaceDslIpoeFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceDslIpoeFeatureTemplate"], () => require("./vpnInterfaceDslIpoeFeatureTemplate"));

export { VpnInterfaceDslPppoaFeatureTemplateArgs, VpnInterfaceDslPppoaFeatureTemplateState } from "./vpnInterfaceDslPppoaFeatureTemplate";
export type VpnInterfaceDslPppoaFeatureTemplate = import("./vpnInterfaceDslPppoaFeatureTemplate").VpnInterfaceDslPppoaFeatureTemplate;
export const VpnInterfaceDslPppoaFeatureTemplate: typeof import("./vpnInterfaceDslPppoaFeatureTemplate").VpnInterfaceDslPppoaFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceDslPppoaFeatureTemplate"], () => require("./vpnInterfaceDslPppoaFeatureTemplate"));

export { VpnInterfaceDslPppoeFeatureTemplateArgs, VpnInterfaceDslPppoeFeatureTemplateState } from "./vpnInterfaceDslPppoeFeatureTemplate";
export type VpnInterfaceDslPppoeFeatureTemplate = import("./vpnInterfaceDslPppoeFeatureTemplate").VpnInterfaceDslPppoeFeatureTemplate;
export const VpnInterfaceDslPppoeFeatureTemplate: typeof import("./vpnInterfaceDslPppoeFeatureTemplate").VpnInterfaceDslPppoeFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceDslPppoeFeatureTemplate"], () => require("./vpnInterfaceDslPppoeFeatureTemplate"));

export { VpnInterfaceEthernetPppoeFeatureTemplateArgs, VpnInterfaceEthernetPppoeFeatureTemplateState } from "./vpnInterfaceEthernetPppoeFeatureTemplate";
export type VpnInterfaceEthernetPppoeFeatureTemplate = import("./vpnInterfaceEthernetPppoeFeatureTemplate").VpnInterfaceEthernetPppoeFeatureTemplate;
export const VpnInterfaceEthernetPppoeFeatureTemplate: typeof import("./vpnInterfaceEthernetPppoeFeatureTemplate").VpnInterfaceEthernetPppoeFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceEthernetPppoeFeatureTemplate"], () => require("./vpnInterfaceEthernetPppoeFeatureTemplate"));

export { VpnInterfaceMultilinkFeatureTemplateArgs, VpnInterfaceMultilinkFeatureTemplateState } from "./vpnInterfaceMultilinkFeatureTemplate";
export type VpnInterfaceMultilinkFeatureTemplate = import("./vpnInterfaceMultilinkFeatureTemplate").VpnInterfaceMultilinkFeatureTemplate;
export const VpnInterfaceMultilinkFeatureTemplate: typeof import("./vpnInterfaceMultilinkFeatureTemplate").VpnInterfaceMultilinkFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceMultilinkFeatureTemplate"], () => require("./vpnInterfaceMultilinkFeatureTemplate"));

export { VpnInterfaceSviFeatureTemplateArgs, VpnInterfaceSviFeatureTemplateState } from "./vpnInterfaceSviFeatureTemplate";
export type VpnInterfaceSviFeatureTemplate = import("./vpnInterfaceSviFeatureTemplate").VpnInterfaceSviFeatureTemplate;
export const VpnInterfaceSviFeatureTemplate: typeof import("./vpnInterfaceSviFeatureTemplate").VpnInterfaceSviFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceSviFeatureTemplate"], () => require("./vpnInterfaceSviFeatureTemplate"));

export { VpnInterfaceT1E1SerialFeatureTemplateArgs, VpnInterfaceT1E1SerialFeatureTemplateState } from "./vpnInterfaceT1E1SerialFeatureTemplate";
export type VpnInterfaceT1E1SerialFeatureTemplate = import("./vpnInterfaceT1E1SerialFeatureTemplate").VpnInterfaceT1E1SerialFeatureTemplate;
export const VpnInterfaceT1E1SerialFeatureTemplate: typeof import("./vpnInterfaceT1E1SerialFeatureTemplate").VpnInterfaceT1E1SerialFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceT1E1SerialFeatureTemplate"], () => require("./vpnInterfaceT1E1SerialFeatureTemplate"));

export { VpnListPolicyObjectArgs, VpnListPolicyObjectState } from "./vpnListPolicyObject";
export type VpnListPolicyObject = import("./vpnListPolicyObject").VpnListPolicyObject;
export const VpnListPolicyObject: typeof import("./vpnListPolicyObject").VpnListPolicyObject = null as any;
utilities.lazyLoad(exports, ["VpnListPolicyObject"], () => require("./vpnListPolicyObject"));

export { VpnMembershipPolicyDefinitionArgs, VpnMembershipPolicyDefinitionState } from "./vpnMembershipPolicyDefinition";
export type VpnMembershipPolicyDefinition = import("./vpnMembershipPolicyDefinition").VpnMembershipPolicyDefinition;
export const VpnMembershipPolicyDefinition: typeof import("./vpnMembershipPolicyDefinition").VpnMembershipPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["VpnMembershipPolicyDefinition"], () => require("./vpnMembershipPolicyDefinition"));

export { ZoneBasedFirewallPolicyDefinitionArgs, ZoneBasedFirewallPolicyDefinitionState } from "./zoneBasedFirewallPolicyDefinition";
export type ZoneBasedFirewallPolicyDefinition = import("./zoneBasedFirewallPolicyDefinition").ZoneBasedFirewallPolicyDefinition;
export const ZoneBasedFirewallPolicyDefinition: typeof import("./zoneBasedFirewallPolicyDefinition").ZoneBasedFirewallPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["ZoneBasedFirewallPolicyDefinition"], () => require("./zoneBasedFirewallPolicyDefinition"));

export { ZoneListPolicyObjectArgs, ZoneListPolicyObjectState } from "./zoneListPolicyObject";
export type ZoneListPolicyObject = import("./zoneListPolicyObject").ZoneListPolicyObject;
export const ZoneListPolicyObject: typeof import("./zoneListPolicyObject").ZoneListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ZoneListPolicyObject"], () => require("./zoneListPolicyObject"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sdwan:index/activateCentralizedPolicy:ActivateCentralizedPolicy":
                return new ActivateCentralizedPolicy(name, <any>undefined, { urn })
            case "sdwan:index/advancedInspectionProfilePolicyDefinition:AdvancedInspectionProfilePolicyDefinition":
                return new AdvancedInspectionProfilePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition":
                return new AdvancedMalwareProtectionPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/allowUrlListPolicyObject:AllowUrlListPolicyObject":
                return new AllowUrlListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/appProbeClassPolicyObject:AppProbeClassPolicyObject":
                return new AppProbeClassPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/applicationAwareRoutingPolicyDefinition:ApplicationAwareRoutingPolicyDefinition":
                return new ApplicationAwareRoutingPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/applicationListPolicyObject:ApplicationListPolicyObject":
                return new ApplicationListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/applicationPriorityFeatureProfile:ApplicationPriorityFeatureProfile":
                return new ApplicationPriorityFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/applicationPriorityQosPolicy:ApplicationPriorityQosPolicy":
                return new ApplicationPriorityQosPolicy(name, <any>undefined, { urn })
            case "sdwan:index/applicationPriorityTrafficPolicyPolicy:ApplicationPriorityTrafficPolicyPolicy":
                return new ApplicationPriorityTrafficPolicyPolicy(name, <any>undefined, { urn })
            case "sdwan:index/asPathListPolicyObject:AsPathListPolicyObject":
                return new AsPathListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate":
                return new AttachFeatureDeviceTemplate(name, <any>undefined, { urn })
            case "sdwan:index/blockUrlListPolicyObject:BlockUrlListPolicyObject":
                return new BlockUrlListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/cedgeAaaFeatureTemplate:CedgeAaaFeatureTemplate":
                return new CedgeAaaFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate":
                return new CedgeGlobalFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgeIgmpFeatureTemplate:CedgeIgmpFeatureTemplate":
                return new CedgeIgmpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgeMulticastFeatureTemplate:CedgeMulticastFeatureTemplate":
                return new CedgeMulticastFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgePimFeatureTemplate:CedgePimFeatureTemplate":
                return new CedgePimFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cellularCedgeProfileFeatureTemplate:CellularCedgeProfileFeatureTemplate":
                return new CellularCedgeProfileFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate":
                return new CellularControllerFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cellularProfileFeatureTemplate:CellularProfileFeatureTemplate":
                return new CellularProfileFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/centralizedPolicy:CentralizedPolicy":
                return new CentralizedPolicy(name, <any>undefined, { urn })
            case "sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition":
                return new CflowdPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ciscoBannerFeatureTemplate:CiscoBannerFeatureTemplate":
                return new CiscoBannerFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate":
                return new CiscoBfdFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoBgpFeatureTemplate:CiscoBgpFeatureTemplate":
                return new CiscoBgpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate":
                return new CiscoDhcpServerFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate":
                return new CiscoLoggingFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate":
                return new CiscoNtpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoOmpFeatureTemplate:CiscoOmpFeatureTemplate":
                return new CiscoOmpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoOspfFeatureTemplate:CiscoOspfFeatureTemplate":
                return new CiscoOspfFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoOspfv3FeatureTemplate:CiscoOspfv3FeatureTemplate":
                return new CiscoOspfv3FeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSecureInternetGatewayFeatureTemplate:CiscoSecureInternetGatewayFeatureTemplate":
                return new CiscoSecureInternetGatewayFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate":
                return new CiscoSecurityFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSigCredentialsFeatureTemplate:CiscoSigCredentialsFeatureTemplate":
                return new CiscoSigCredentialsFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate":
                return new CiscoSnmpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSystemFeatureTemplate:CiscoSystemFeatureTemplate":
                return new CiscoSystemFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoThousandeyesFeatureTemplate:CiscoThousandeyesFeatureTemplate":
                return new CiscoThousandeyesFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate":
                return new CiscoTrustsecFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate":
                return new CiscoVpnFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate":
                return new CiscoVpnInterfaceFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate":
                return new CiscoVpnInterfaceGreFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate":
                return new CiscoVpnInterfaceIpsecFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate":
                return new CiscoWirelessLanFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/classMapPolicyObject:ClassMapPolicyObject":
                return new ClassMapPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/cliConfigFeature:CliConfigFeature":
                return new CliConfigFeature(name, <any>undefined, { urn })
            case "sdwan:index/cliDeviceTemplate:CliDeviceTemplate":
                return new CliDeviceTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cliFeatureProfile:CliFeatureProfile":
                return new CliFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/cliTemplateFeatureTemplate:CliTemplateFeatureTemplate":
                return new CliTemplateFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/colorListPolicyObject:ColorListPolicyObject":
                return new ColorListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/configurationGroup:ConfigurationGroup":
                return new ConfigurationGroup(name, <any>undefined, { urn })
            case "sdwan:index/customControlTopologyPolicyDefinition:CustomControlTopologyPolicyDefinition":
                return new CustomControlTopologyPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/dataFqdnPrefixListPolicyObject:DataFqdnPrefixListPolicyObject":
                return new DataFqdnPrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/dataIpv4PrefixListPolicyObject:DataIpv4PrefixListPolicyObject":
                return new DataIpv4PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/dataIpv6PrefixListPolicyObject:DataIpv6PrefixListPolicyObject":
                return new DataIpv6PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/dnsSecurityFeatureProfile:DnsSecurityFeatureProfile":
                return new DnsSecurityFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition":
                return new DnsSecurityPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/domainListPolicyObject:DomainListPolicyObject":
                return new DomainListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/eigrpFeatureTemplate:EigrpFeatureTemplate":
                return new EigrpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/embeddedSecurityFeatureProfile:EmbeddedSecurityFeatureProfile":
                return new EmbeddedSecurityFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/expandedCommunityListPolicyObject:ExpandedCommunityListPolicyObject":
                return new ExpandedCommunityListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/extendedCommunityListPolicyObject:ExtendedCommunityListPolicyObject":
                return new ExtendedCommunityListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/featureDeviceTemplate:FeatureDeviceTemplate":
                return new FeatureDeviceTemplate(name, <any>undefined, { urn })
            case "sdwan:index/geoLocationListPolicyObject:GeoLocationListPolicyObject":
                return new GeoLocationListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate":
                return new GpsFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/hubAndSpokeTopologyPolicyDefinition:HubAndSpokeTopologyPolicyDefinition":
                return new HubAndSpokeTopologyPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/intrusionPreventionPolicyDefinition:IntrusionPreventionPolicyDefinition":
                return new IntrusionPreventionPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipsSignatureListPolicyObject:IpsSignatureListPolicyObject":
                return new IpsSignatureListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/ipv4AclPolicyDefinition:Ipv4AclPolicyDefinition":
                return new Ipv4AclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv4DeviceAclPolicyDefinition:Ipv4DeviceAclPolicyDefinition":
                return new Ipv4DeviceAclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv4PrefixListPolicyObject:Ipv4PrefixListPolicyObject":
                return new Ipv4PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/ipv6AclPolicyDefinition:Ipv6AclPolicyDefinition":
                return new Ipv6AclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv6DeviceAclPolicyDefinition:Ipv6DeviceAclPolicyDefinition":
                return new Ipv6DeviceAclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv6PrefixListPolicyObject:Ipv6PrefixListPolicyObject":
                return new Ipv6PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/localApplicationListPolicyObject:LocalApplicationListPolicyObject":
                return new LocalApplicationListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/localizedPolicy:LocalizedPolicy":
                return new LocalizedPolicy(name, <any>undefined, { urn })
            case "sdwan:index/meshTopologyPolicyDefinition:MeshTopologyPolicyDefinition":
                return new MeshTopologyPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/mirrorPolicyObject:MirrorPolicyObject":
                return new MirrorPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/objectGroupPolicyDefinition:ObjectGroupPolicyDefinition":
                return new ObjectGroupPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/otherFeatureProfile:OtherFeatureProfile":
                return new OtherFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/otherThousandeyesFeature:OtherThousandeyesFeature":
                return new OtherThousandeyesFeature(name, <any>undefined, { urn })
            case "sdwan:index/otherUcseFeature:OtherUcseFeature":
                return new OtherUcseFeature(name, <any>undefined, { urn })
            case "sdwan:index/policerPolicyObject:PolicerPolicyObject":
                return new PolicerPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectAppProbeClass:PolicyObjectAppProbeClass":
                return new PolicyObjectAppProbeClass(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectApplicationList:PolicyObjectApplicationList":
                return new PolicyObjectApplicationList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectAsPathList:PolicyObjectAsPathList":
                return new PolicyObjectAsPathList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectClassMap:PolicyObjectClassMap":
                return new PolicyObjectClassMap(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectColorList:PolicyObjectColorList":
                return new PolicyObjectColorList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectDataIpv4PrefixList:PolicyObjectDataIpv4PrefixList":
                return new PolicyObjectDataIpv4PrefixList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectDataIpv6PrefixList:PolicyObjectDataIpv6PrefixList":
                return new PolicyObjectDataIpv6PrefixList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectExpandedCommunityList:PolicyObjectExpandedCommunityList":
                return new PolicyObjectExpandedCommunityList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectExtendedCommunityList:PolicyObjectExtendedCommunityList":
                return new PolicyObjectExtendedCommunityList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectFeatureProfile:PolicyObjectFeatureProfile":
                return new PolicyObjectFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectIpv4PrefixList:PolicyObjectIpv4PrefixList":
                return new PolicyObjectIpv4PrefixList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectIpv6PrefixList:PolicyObjectIpv6PrefixList":
                return new PolicyObjectIpv6PrefixList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectMirror:PolicyObjectMirror":
                return new PolicyObjectMirror(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectPolicer:PolicyObjectPolicer":
                return new PolicyObjectPolicer(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectPreferredColorGroup:PolicyObjectPreferredColorGroup":
                return new PolicyObjectPreferredColorGroup(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityDataIpv4PrefixList:PolicyObjectSecurityDataIpv4PrefixList":
                return new PolicyObjectSecurityDataIpv4PrefixList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityFqdnList:PolicyObjectSecurityFqdnList":
                return new PolicyObjectSecurityFqdnList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityGeolocationList:PolicyObjectSecurityGeolocationList":
                return new PolicyObjectSecurityGeolocationList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityIdentityList:PolicyObjectSecurityIdentityList":
                return new PolicyObjectSecurityIdentityList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityIpsSignature:PolicyObjectSecurityIpsSignature":
                return new PolicyObjectSecurityIpsSignature(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityLocalApplicationList:PolicyObjectSecurityLocalApplicationList":
                return new PolicyObjectSecurityLocalApplicationList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityLocalDomainList:PolicyObjectSecurityLocalDomainList":
                return new PolicyObjectSecurityLocalDomainList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityPortList:PolicyObjectSecurityPortList":
                return new PolicyObjectSecurityPortList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityScalableGroupTagList:PolicyObjectSecurityScalableGroupTagList":
                return new PolicyObjectSecurityScalableGroupTagList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityUrlAllowList:PolicyObjectSecurityUrlAllowList":
                return new PolicyObjectSecurityUrlAllowList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSecurityUrlBlockList:PolicyObjectSecurityUrlBlockList":
                return new PolicyObjectSecurityUrlBlockList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectSlaClassList:PolicyObjectSlaClassList":
                return new PolicyObjectSlaClassList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectStandardCommunityList:PolicyObjectStandardCommunityList":
                return new PolicyObjectStandardCommunityList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectTlocList:PolicyObjectTlocList":
                return new PolicyObjectTlocList(name, <any>undefined, { urn })
            case "sdwan:index/policyObjectVpnGroup:PolicyObjectVpnGroup":
                return new PolicyObjectVpnGroup(name, <any>undefined, { urn })
            case "sdwan:index/portListPolicyObject:PortListPolicyObject":
                return new PortListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/preferredColorGroupPolicyObject:PreferredColorGroupPolicyObject":
                return new PreferredColorGroupPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/protocolListPolicyObject:ProtocolListPolicyObject":
                return new ProtocolListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/qosMapPolicyDefinition:QosMapPolicyDefinition":
                return new QosMapPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/regionListPolicyObject:RegionListPolicyObject":
                return new RegionListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/rewriteRulePolicyDefinition:RewriteRulePolicyDefinition":
                return new RewriteRulePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/routePolicyDefinition:RoutePolicyDefinition":
                return new RoutePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ruleSetPolicyDefinition:RuleSetPolicyDefinition":
                return new RuleSetPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/securityAppHostingFeatureTemplate:SecurityAppHostingFeatureTemplate":
                return new SecurityAppHostingFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "sdwan:index/serviceFeatureProfile:ServiceFeatureProfile":
                return new ServiceFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/serviceIpv4AclFeature:ServiceIpv4AclFeature":
                return new ServiceIpv4AclFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceIpv6AclFeature:ServiceIpv6AclFeature":
                return new ServiceIpv6AclFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeature:ServiceLanVpnFeature":
                return new ServiceLanVpnFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeatureAssociateMulticastFeature:ServiceLanVpnFeatureAssociateMulticastFeature":
                return new ServiceLanVpnFeatureAssociateMulticastFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeatureAssociateRoutingBgpFeature:ServiceLanVpnFeatureAssociateRoutingBgpFeature":
                return new ServiceLanVpnFeatureAssociateRoutingBgpFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeatureAssociateRoutingEigrpFeature:ServiceLanVpnFeatureAssociateRoutingEigrpFeature":
                return new ServiceLanVpnFeatureAssociateRoutingEigrpFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeatureAssociateRoutingOspfFeature:ServiceLanVpnFeatureAssociateRoutingOspfFeature":
                return new ServiceLanVpnFeatureAssociateRoutingOspfFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature:ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature":
                return new ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature:ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature":
                return new ServiceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnInterfaceEthernetFeature:ServiceLanVpnInterfaceEthernetFeature":
                return new ServiceLanVpnInterfaceEthernetFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnInterfaceGreFeature:ServiceLanVpnInterfaceGreFeature":
                return new ServiceLanVpnInterfaceGreFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnInterfaceIpsecFeature:ServiceLanVpnInterfaceIpsecFeature":
                return new ServiceLanVpnInterfaceIpsecFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnInterfaceSviFeature:ServiceLanVpnInterfaceSviFeature":
                return new ServiceLanVpnInterfaceSviFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceMulticastFeature:ServiceMulticastFeature":
                return new ServiceMulticastFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceObjectTrackerFeature:ServiceObjectTrackerFeature":
                return new ServiceObjectTrackerFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceObjectTrackerGroupFeature:ServiceObjectTrackerGroupFeature":
                return new ServiceObjectTrackerGroupFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceRoutePolicyFeature:ServiceRoutePolicyFeature":
                return new ServiceRoutePolicyFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceRoutingBgpFeature:ServiceRoutingBgpFeature":
                return new ServiceRoutingBgpFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceRoutingEigrpFeature:ServiceRoutingEigrpFeature":
                return new ServiceRoutingEigrpFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceRoutingOspfFeature:ServiceRoutingOspfFeature":
                return new ServiceRoutingOspfFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceRoutingOspfv3Ipv4Feature:ServiceRoutingOspfv3Ipv4Feature":
                return new ServiceRoutingOspfv3Ipv4Feature(name, <any>undefined, { urn })
            case "sdwan:index/serviceRoutingOspfv3Ipv6Feature:ServiceRoutingOspfv3Ipv6Feature":
                return new ServiceRoutingOspfv3Ipv6Feature(name, <any>undefined, { urn })
            case "sdwan:index/serviceSwitchportFeature:ServiceSwitchportFeature":
                return new ServiceSwitchportFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceTrackerFeature:ServiceTrackerFeature":
                return new ServiceTrackerFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceTrackerGroupFeature:ServiceTrackerGroupFeature":
                return new ServiceTrackerGroupFeature(name, <any>undefined, { urn })
            case "sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature":
                return new ServiceWirelessLanFeature(name, <any>undefined, { urn })
            case "sdwan:index/sigSecurityFeatureProfile:SigSecurityFeatureProfile":
                return new SigSecurityFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/siteListPolicyObject:SiteListPolicyObject":
                return new SiteListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/slaClassPolicyObject:SlaClassPolicyObject":
                return new SlaClassPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/standardCommunityListPolicyObject:StandardCommunityListPolicyObject":
                return new StandardCommunityListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/switchportFeatureTemplate:SwitchportFeatureTemplate":
                return new SwitchportFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/systemAaaFeature:SystemAaaFeature":
                return new SystemAaaFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemBannerFeature:SystemBannerFeature":
                return new SystemBannerFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemBasicFeature:SystemBasicFeature":
                return new SystemBasicFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemBfdFeature:SystemBfdFeature":
                return new SystemBfdFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemFeatureProfile:SystemFeatureProfile":
                return new SystemFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/systemFlexiblePortSpeedFeature:SystemFlexiblePortSpeedFeature":
                return new SystemFlexiblePortSpeedFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemGlobalFeature:SystemGlobalFeature":
                return new SystemGlobalFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemIpv4DeviceAccessFeature:SystemIpv4DeviceAccessFeature":
                return new SystemIpv4DeviceAccessFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemIpv6DeviceAccessFeature:SystemIpv6DeviceAccessFeature":
                return new SystemIpv6DeviceAccessFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemLoggingFeature:SystemLoggingFeature":
                return new SystemLoggingFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemMrfFeature:SystemMrfFeature":
                return new SystemMrfFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemNtpFeature:SystemNtpFeature":
                return new SystemNtpFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemOmpFeature:SystemOmpFeature":
                return new SystemOmpFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemPerformanceMonitoringFeature:SystemPerformanceMonitoringFeature":
                return new SystemPerformanceMonitoringFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemRemoteAccessFeature:SystemRemoteAccessFeature":
                return new SystemRemoteAccessFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemSecurityFeature:SystemSecurityFeature":
                return new SystemSecurityFeature(name, <any>undefined, { urn })
            case "sdwan:index/systemSnmpFeature:SystemSnmpFeature":
                return new SystemSnmpFeature(name, <any>undefined, { urn })
            case "sdwan:index/tlocListPolicyObject:TlocListPolicyObject":
                return new TlocListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition":
                return new TlsSslDecryptionPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition":
                return new TlsSslProfilePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/trafficDataPolicyDefinition:TrafficDataPolicyDefinition":
                return new TrafficDataPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/transportCellularControllerFeature:TransportCellularControllerFeature":
                return new TransportCellularControllerFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportCellularProfileFeature:TransportCellularProfileFeature":
                return new TransportCellularProfileFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportFeatureProfile:TransportFeatureProfile":
                return new TransportFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/transportGpsFeature:TransportGpsFeature":
                return new TransportGpsFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportIpv4AclFeature:TransportIpv4AclFeature":
                return new TransportIpv4AclFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportIpv6AclFeature:TransportIpv6AclFeature":
                return new TransportIpv6AclFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportIpv6TrackerFeature:TransportIpv6TrackerFeature":
                return new TransportIpv6TrackerFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportIpv6TrackerGroupFeature:TransportIpv6TrackerGroupFeature":
                return new TransportIpv6TrackerGroupFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportManagementVpnFeature:TransportManagementVpnFeature":
                return new TransportManagementVpnFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportManagementVpnInterfaceEthernetFeature:TransportManagementVpnInterfaceEthernetFeature":
                return new TransportManagementVpnInterfaceEthernetFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportRoutePolicyFeature:TransportRoutePolicyFeature":
                return new TransportRoutePolicyFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportRoutingBgpFeature:TransportRoutingBgpFeature":
                return new TransportRoutingBgpFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportRoutingOspfFeature:TransportRoutingOspfFeature":
                return new TransportRoutingOspfFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportRoutingOspfv3Ipv4Feature:TransportRoutingOspfv3Ipv4Feature":
                return new TransportRoutingOspfv3Ipv4Feature(name, <any>undefined, { urn })
            case "sdwan:index/transportRoutingOspfv3Ipv6Feature:TransportRoutingOspfv3Ipv6Feature":
                return new TransportRoutingOspfv3Ipv6Feature(name, <any>undefined, { urn })
            case "sdwan:index/transportT1E1ControllerFeature:TransportT1E1ControllerFeature":
                return new TransportT1E1ControllerFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportTrackerFeature:TransportTrackerFeature":
                return new TransportTrackerFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportTrackerGroupFeature:TransportTrackerGroupFeature":
                return new TransportTrackerGroupFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnFeature:TransportWanVpnFeature":
                return new TransportWanVpnFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnFeatureAssociateRoutingBgpFeature:TransportWanVpnFeatureAssociateRoutingBgpFeature":
                return new TransportWanVpnFeatureAssociateRoutingBgpFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnFeatureAssociateRoutingOspfFeature:TransportWanVpnFeatureAssociateRoutingOspfFeature":
                return new TransportWanVpnFeatureAssociateRoutingOspfFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature:TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature":
                return new TransportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature:TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature":
                return new TransportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceCellularFeature:TransportWanVpnInterfaceCellularFeature":
                return new TransportWanVpnInterfaceCellularFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceEthernetFeature:TransportWanVpnInterfaceEthernetFeature":
                return new TransportWanVpnInterfaceEthernetFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature:TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature":
                return new TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature:TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature":
                return new TransportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature:TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature":
                return new TransportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature:TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature":
                return new TransportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceGreFeature:TransportWanVpnInterfaceGreFeature":
                return new TransportWanVpnInterfaceGreFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceIpsecFeature:TransportWanVpnInterfaceIpsecFeature":
                return new TransportWanVpnInterfaceIpsecFeature(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature":
                return new TransportWanVpnInterfaceT1E1SerialFeature(name, <any>undefined, { urn })
            case "sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition":
                return new UrlFilteringPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceCellularFeatureTemplate:VpnInterfaceCellularFeatureTemplate":
                return new VpnInterfaceCellularFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceDslIpoeFeatureTemplate:VpnInterfaceDslIpoeFeatureTemplate":
                return new VpnInterfaceDslIpoeFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceDslPppoaFeatureTemplate:VpnInterfaceDslPppoaFeatureTemplate":
                return new VpnInterfaceDslPppoaFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate":
                return new VpnInterfaceDslPppoeFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceEthernetPppoeFeatureTemplate:VpnInterfaceEthernetPppoeFeatureTemplate":
                return new VpnInterfaceEthernetPppoeFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceMultilinkFeatureTemplate:VpnInterfaceMultilinkFeatureTemplate":
                return new VpnInterfaceMultilinkFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceSviFeatureTemplate:VpnInterfaceSviFeatureTemplate":
                return new VpnInterfaceSviFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceT1E1SerialFeatureTemplate:VpnInterfaceT1E1SerialFeatureTemplate":
                return new VpnInterfaceT1E1SerialFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnListPolicyObject:VpnListPolicyObject":
                return new VpnListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/vpnMembershipPolicyDefinition:VpnMembershipPolicyDefinition":
                return new VpnMembershipPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/zoneBasedFirewallPolicyDefinition:ZoneBasedFirewallPolicyDefinition":
                return new ZoneBasedFirewallPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/zoneListPolicyObject:ZoneListPolicyObject":
                return new ZoneListPolicyObject(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sdwan", "index/activateCentralizedPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/advancedInspectionProfilePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/advancedMalwareProtectionPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/allowUrlListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/appProbeClassPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationAwareRoutingPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationPriorityFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationPriorityQosPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationPriorityTrafficPolicyPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/asPathListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/attachFeatureDeviceTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/blockUrlListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeAaaFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeGlobalFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeIgmpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeMulticastFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgePimFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cellularCedgeProfileFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cellularControllerFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cellularProfileFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/centralizedPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cflowdPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoBannerFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoBfdFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoBgpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoDhcpServerFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoLoggingFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoNtpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoOmpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoOspfFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoOspfv3FeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSecureInternetGatewayFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSecurityFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSigCredentialsFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSnmpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSystemFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoThousandeyesFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoTrustsecFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnInterfaceFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnInterfaceGreFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnInterfaceIpsecFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoWirelessLanFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/classMapPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliConfigFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliDeviceTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliTemplateFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/colorListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/configurationGroup", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/customControlTopologyPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dataFqdnPrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dataIpv4PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dataIpv6PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dnsSecurityFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dnsSecurityPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/domainListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/eigrpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/embeddedSecurityFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/expandedCommunityListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/extendedCommunityListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/featureDeviceTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/geoLocationListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/gpsFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/hubAndSpokeTopologyPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/intrusionPreventionPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipsSignatureListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv4AclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv4DeviceAclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv4PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv6AclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv6DeviceAclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv6PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/localApplicationListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/localizedPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/meshTopologyPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/mirrorPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/objectGroupPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/otherFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/otherThousandeyesFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/otherUcseFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policerPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectAppProbeClass", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectApplicationList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectAsPathList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectClassMap", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectColorList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectDataIpv4PrefixList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectDataIpv6PrefixList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectExpandedCommunityList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectExtendedCommunityList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectIpv4PrefixList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectIpv6PrefixList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectMirror", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectPolicer", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectPreferredColorGroup", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityDataIpv4PrefixList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityFqdnList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityGeolocationList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityIdentityList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityIpsSignature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityLocalApplicationList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityLocalDomainList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityPortList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityScalableGroupTagList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityUrlAllowList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSecurityUrlBlockList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectSlaClassList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectStandardCommunityList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectTlocList", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policyObjectVpnGroup", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/portListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/preferredColorGroupPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/protocolListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/qosMapPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/regionListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/rewriteRulePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/routePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ruleSetPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/securityAppHostingFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/securityPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceIpv4AclFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceIpv6AclFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeatureAssociateMulticastFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeatureAssociateRoutingBgpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeatureAssociateRoutingEigrpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeatureAssociateRoutingOspfFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeatureAssociateRoutingOspfv3Ipv4Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnFeatureAssociateRoutingOspfv3Ipv6Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnInterfaceEthernetFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnInterfaceGreFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnInterfaceIpsecFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnInterfaceSviFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceMulticastFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceObjectTrackerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceObjectTrackerGroupFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceRoutePolicyFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceRoutingBgpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceRoutingEigrpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceRoutingOspfFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceRoutingOspfv3Ipv4Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceRoutingOspfv3Ipv6Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceSwitchportFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceTrackerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceTrackerGroupFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceWirelessLanFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/sigSecurityFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/siteListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/slaClassPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/standardCommunityListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/switchportFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemAaaFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemBannerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemBasicFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemBfdFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemFlexiblePortSpeedFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemGlobalFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemIpv4DeviceAccessFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemIpv6DeviceAccessFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemLoggingFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemMrfFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemNtpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemOmpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemPerformanceMonitoringFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemRemoteAccessFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemSecurityFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemSnmpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/tlocListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/tlsSslDecryptionPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/tlsSslProfilePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/trafficDataPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportCellularControllerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportCellularProfileFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportGpsFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportIpv4AclFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportIpv6AclFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportIpv6TrackerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportIpv6TrackerGroupFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportManagementVpnFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportManagementVpnInterfaceEthernetFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportRoutePolicyFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportRoutingBgpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportRoutingOspfFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportRoutingOspfv3Ipv4Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportRoutingOspfv3Ipv6Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportT1E1ControllerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportTrackerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportTrackerGroupFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnFeatureAssociateRoutingBgpFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnFeatureAssociateRoutingOspfFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnFeatureAssociateRoutingOspfv3Ipv4Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnFeatureAssociateRoutingOspfv3Ipv6Feature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceCellularFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceEthernetFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceEthernetFeatureAssociateIpv6TrackerGroupFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceEthernetFeatureAssociateTrackerFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceEthernetFeatureAssociateTrackerGroupFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceGreFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceIpsecFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceT1E1SerialFeature", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/urlFilteringPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceCellularFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceDslIpoeFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceDslPppoaFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceDslPppoeFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceEthernetPppoeFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceMultilinkFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceSviFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceT1E1SerialFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnMembershipPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/zoneBasedFirewallPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/zoneListPolicyObject", _module)
pulumi.runtime.registerResourcePackage("sdwan", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sdwan") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
