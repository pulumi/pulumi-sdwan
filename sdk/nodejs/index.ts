// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ActivateCentralizedPolicyArgs, ActivateCentralizedPolicyState } from "./activateCentralizedPolicy";
export type ActivateCentralizedPolicy = import("./activateCentralizedPolicy").ActivateCentralizedPolicy;
export const ActivateCentralizedPolicy: typeof import("./activateCentralizedPolicy").ActivateCentralizedPolicy = null as any;
utilities.lazyLoad(exports, ["ActivateCentralizedPolicy"], () => require("./activateCentralizedPolicy"));

export { AdvancedInspectionProfilePolicyDefinitionArgs, AdvancedInspectionProfilePolicyDefinitionState } from "./advancedInspectionProfilePolicyDefinition";
export type AdvancedInspectionProfilePolicyDefinition = import("./advancedInspectionProfilePolicyDefinition").AdvancedInspectionProfilePolicyDefinition;
export const AdvancedInspectionProfilePolicyDefinition: typeof import("./advancedInspectionProfilePolicyDefinition").AdvancedInspectionProfilePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["AdvancedInspectionProfilePolicyDefinition"], () => require("./advancedInspectionProfilePolicyDefinition"));

export { AdvancedMalwareProtectionPolicyDefinitionArgs, AdvancedMalwareProtectionPolicyDefinitionState } from "./advancedMalwareProtectionPolicyDefinition";
export type AdvancedMalwareProtectionPolicyDefinition = import("./advancedMalwareProtectionPolicyDefinition").AdvancedMalwareProtectionPolicyDefinition;
export const AdvancedMalwareProtectionPolicyDefinition: typeof import("./advancedMalwareProtectionPolicyDefinition").AdvancedMalwareProtectionPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["AdvancedMalwareProtectionPolicyDefinition"], () => require("./advancedMalwareProtectionPolicyDefinition"));

export { AllowUrlListPolicyObjectArgs, AllowUrlListPolicyObjectState } from "./allowUrlListPolicyObject";
export type AllowUrlListPolicyObject = import("./allowUrlListPolicyObject").AllowUrlListPolicyObject;
export const AllowUrlListPolicyObject: typeof import("./allowUrlListPolicyObject").AllowUrlListPolicyObject = null as any;
utilities.lazyLoad(exports, ["AllowUrlListPolicyObject"], () => require("./allowUrlListPolicyObject"));

export { AppProbeClassPolicyObjectArgs, AppProbeClassPolicyObjectState } from "./appProbeClassPolicyObject";
export type AppProbeClassPolicyObject = import("./appProbeClassPolicyObject").AppProbeClassPolicyObject;
export const AppProbeClassPolicyObject: typeof import("./appProbeClassPolicyObject").AppProbeClassPolicyObject = null as any;
utilities.lazyLoad(exports, ["AppProbeClassPolicyObject"], () => require("./appProbeClassPolicyObject"));

export { ApplicationAwareRoutingPolicyDefinitionArgs, ApplicationAwareRoutingPolicyDefinitionState } from "./applicationAwareRoutingPolicyDefinition";
export type ApplicationAwareRoutingPolicyDefinition = import("./applicationAwareRoutingPolicyDefinition").ApplicationAwareRoutingPolicyDefinition;
export const ApplicationAwareRoutingPolicyDefinition: typeof import("./applicationAwareRoutingPolicyDefinition").ApplicationAwareRoutingPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["ApplicationAwareRoutingPolicyDefinition"], () => require("./applicationAwareRoutingPolicyDefinition"));

export { ApplicationListPolicyObjectArgs, ApplicationListPolicyObjectState } from "./applicationListPolicyObject";
export type ApplicationListPolicyObject = import("./applicationListPolicyObject").ApplicationListPolicyObject;
export const ApplicationListPolicyObject: typeof import("./applicationListPolicyObject").ApplicationListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ApplicationListPolicyObject"], () => require("./applicationListPolicyObject"));

export { ApplicationPriorityFeatureProfileArgs, ApplicationPriorityFeatureProfileState } from "./applicationPriorityFeatureProfile";
export type ApplicationPriorityFeatureProfile = import("./applicationPriorityFeatureProfile").ApplicationPriorityFeatureProfile;
export const ApplicationPriorityFeatureProfile: typeof import("./applicationPriorityFeatureProfile").ApplicationPriorityFeatureProfile = null as any;
utilities.lazyLoad(exports, ["ApplicationPriorityFeatureProfile"], () => require("./applicationPriorityFeatureProfile"));

export { ApplicationPriorityQosPolicyProfileParcelArgs, ApplicationPriorityQosPolicyProfileParcelState } from "./applicationPriorityQosPolicyProfileParcel";
export type ApplicationPriorityQosPolicyProfileParcel = import("./applicationPriorityQosPolicyProfileParcel").ApplicationPriorityQosPolicyProfileParcel;
export const ApplicationPriorityQosPolicyProfileParcel: typeof import("./applicationPriorityQosPolicyProfileParcel").ApplicationPriorityQosPolicyProfileParcel = null as any;
utilities.lazyLoad(exports, ["ApplicationPriorityQosPolicyProfileParcel"], () => require("./applicationPriorityQosPolicyProfileParcel"));

export { AsPathListPolicyObjectArgs, AsPathListPolicyObjectState } from "./asPathListPolicyObject";
export type AsPathListPolicyObject = import("./asPathListPolicyObject").AsPathListPolicyObject;
export const AsPathListPolicyObject: typeof import("./asPathListPolicyObject").AsPathListPolicyObject = null as any;
utilities.lazyLoad(exports, ["AsPathListPolicyObject"], () => require("./asPathListPolicyObject"));

export { AttachFeatureDeviceTemplateArgs, AttachFeatureDeviceTemplateState } from "./attachFeatureDeviceTemplate";
export type AttachFeatureDeviceTemplate = import("./attachFeatureDeviceTemplate").AttachFeatureDeviceTemplate;
export const AttachFeatureDeviceTemplate: typeof import("./attachFeatureDeviceTemplate").AttachFeatureDeviceTemplate = null as any;
utilities.lazyLoad(exports, ["AttachFeatureDeviceTemplate"], () => require("./attachFeatureDeviceTemplate"));

export { BlockUrlListPolicyObjectArgs, BlockUrlListPolicyObjectState } from "./blockUrlListPolicyObject";
export type BlockUrlListPolicyObject = import("./blockUrlListPolicyObject").BlockUrlListPolicyObject;
export const BlockUrlListPolicyObject: typeof import("./blockUrlListPolicyObject").BlockUrlListPolicyObject = null as any;
utilities.lazyLoad(exports, ["BlockUrlListPolicyObject"], () => require("./blockUrlListPolicyObject"));

export { CedgeAaaFeatureTemplateArgs, CedgeAaaFeatureTemplateState } from "./cedgeAaaFeatureTemplate";
export type CedgeAaaFeatureTemplate = import("./cedgeAaaFeatureTemplate").CedgeAaaFeatureTemplate;
export const CedgeAaaFeatureTemplate: typeof import("./cedgeAaaFeatureTemplate").CedgeAaaFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeAaaFeatureTemplate"], () => require("./cedgeAaaFeatureTemplate"));

export { CedgeGlobalFeatureTemplateArgs, CedgeGlobalFeatureTemplateState } from "./cedgeGlobalFeatureTemplate";
export type CedgeGlobalFeatureTemplate = import("./cedgeGlobalFeatureTemplate").CedgeGlobalFeatureTemplate;
export const CedgeGlobalFeatureTemplate: typeof import("./cedgeGlobalFeatureTemplate").CedgeGlobalFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeGlobalFeatureTemplate"], () => require("./cedgeGlobalFeatureTemplate"));

export { CedgeIgmpFeatureTemplateArgs, CedgeIgmpFeatureTemplateState } from "./cedgeIgmpFeatureTemplate";
export type CedgeIgmpFeatureTemplate = import("./cedgeIgmpFeatureTemplate").CedgeIgmpFeatureTemplate;
export const CedgeIgmpFeatureTemplate: typeof import("./cedgeIgmpFeatureTemplate").CedgeIgmpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeIgmpFeatureTemplate"], () => require("./cedgeIgmpFeatureTemplate"));

export { CedgeMulticastFeatureTemplateArgs, CedgeMulticastFeatureTemplateState } from "./cedgeMulticastFeatureTemplate";
export type CedgeMulticastFeatureTemplate = import("./cedgeMulticastFeatureTemplate").CedgeMulticastFeatureTemplate;
export const CedgeMulticastFeatureTemplate: typeof import("./cedgeMulticastFeatureTemplate").CedgeMulticastFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgeMulticastFeatureTemplate"], () => require("./cedgeMulticastFeatureTemplate"));

export { CedgePimFeatureTemplateArgs, CedgePimFeatureTemplateState } from "./cedgePimFeatureTemplate";
export type CedgePimFeatureTemplate = import("./cedgePimFeatureTemplate").CedgePimFeatureTemplate;
export const CedgePimFeatureTemplate: typeof import("./cedgePimFeatureTemplate").CedgePimFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CedgePimFeatureTemplate"], () => require("./cedgePimFeatureTemplate"));

export { CellularCedgeProfileFeatureTemplateArgs, CellularCedgeProfileFeatureTemplateState } from "./cellularCedgeProfileFeatureTemplate";
export type CellularCedgeProfileFeatureTemplate = import("./cellularCedgeProfileFeatureTemplate").CellularCedgeProfileFeatureTemplate;
export const CellularCedgeProfileFeatureTemplate: typeof import("./cellularCedgeProfileFeatureTemplate").CellularCedgeProfileFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CellularCedgeProfileFeatureTemplate"], () => require("./cellularCedgeProfileFeatureTemplate"));

export { CellularControllerFeatureTemplateArgs, CellularControllerFeatureTemplateState } from "./cellularControllerFeatureTemplate";
export type CellularControllerFeatureTemplate = import("./cellularControllerFeatureTemplate").CellularControllerFeatureTemplate;
export const CellularControllerFeatureTemplate: typeof import("./cellularControllerFeatureTemplate").CellularControllerFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CellularControllerFeatureTemplate"], () => require("./cellularControllerFeatureTemplate"));

export { CellularProfileFeatureTemplateArgs, CellularProfileFeatureTemplateState } from "./cellularProfileFeatureTemplate";
export type CellularProfileFeatureTemplate = import("./cellularProfileFeatureTemplate").CellularProfileFeatureTemplate;
export const CellularProfileFeatureTemplate: typeof import("./cellularProfileFeatureTemplate").CellularProfileFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CellularProfileFeatureTemplate"], () => require("./cellularProfileFeatureTemplate"));

export { CentralizedPolicyArgs, CentralizedPolicyState } from "./centralizedPolicy";
export type CentralizedPolicy = import("./centralizedPolicy").CentralizedPolicy;
export const CentralizedPolicy: typeof import("./centralizedPolicy").CentralizedPolicy = null as any;
utilities.lazyLoad(exports, ["CentralizedPolicy"], () => require("./centralizedPolicy"));

export { CflowdPolicyDefinitionArgs, CflowdPolicyDefinitionState } from "./cflowdPolicyDefinition";
export type CflowdPolicyDefinition = import("./cflowdPolicyDefinition").CflowdPolicyDefinition;
export const CflowdPolicyDefinition: typeof import("./cflowdPolicyDefinition").CflowdPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["CflowdPolicyDefinition"], () => require("./cflowdPolicyDefinition"));

export { CiscoBannerFeatureTemplateArgs, CiscoBannerFeatureTemplateState } from "./ciscoBannerFeatureTemplate";
export type CiscoBannerFeatureTemplate = import("./ciscoBannerFeatureTemplate").CiscoBannerFeatureTemplate;
export const CiscoBannerFeatureTemplate: typeof import("./ciscoBannerFeatureTemplate").CiscoBannerFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoBannerFeatureTemplate"], () => require("./ciscoBannerFeatureTemplate"));

export { CiscoBfdFeatureTemplateArgs, CiscoBfdFeatureTemplateState } from "./ciscoBfdFeatureTemplate";
export type CiscoBfdFeatureTemplate = import("./ciscoBfdFeatureTemplate").CiscoBfdFeatureTemplate;
export const CiscoBfdFeatureTemplate: typeof import("./ciscoBfdFeatureTemplate").CiscoBfdFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoBfdFeatureTemplate"], () => require("./ciscoBfdFeatureTemplate"));

export { CiscoBgpFeatureTemplateArgs, CiscoBgpFeatureTemplateState } from "./ciscoBgpFeatureTemplate";
export type CiscoBgpFeatureTemplate = import("./ciscoBgpFeatureTemplate").CiscoBgpFeatureTemplate;
export const CiscoBgpFeatureTemplate: typeof import("./ciscoBgpFeatureTemplate").CiscoBgpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoBgpFeatureTemplate"], () => require("./ciscoBgpFeatureTemplate"));

export { CiscoDhcpServerFeatureTemplateArgs, CiscoDhcpServerFeatureTemplateState } from "./ciscoDhcpServerFeatureTemplate";
export type CiscoDhcpServerFeatureTemplate = import("./ciscoDhcpServerFeatureTemplate").CiscoDhcpServerFeatureTemplate;
export const CiscoDhcpServerFeatureTemplate: typeof import("./ciscoDhcpServerFeatureTemplate").CiscoDhcpServerFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoDhcpServerFeatureTemplate"], () => require("./ciscoDhcpServerFeatureTemplate"));

export { CiscoLoggingFeatureTemplateArgs, CiscoLoggingFeatureTemplateState } from "./ciscoLoggingFeatureTemplate";
export type CiscoLoggingFeatureTemplate = import("./ciscoLoggingFeatureTemplate").CiscoLoggingFeatureTemplate;
export const CiscoLoggingFeatureTemplate: typeof import("./ciscoLoggingFeatureTemplate").CiscoLoggingFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoLoggingFeatureTemplate"], () => require("./ciscoLoggingFeatureTemplate"));

export { CiscoNtpFeatureTemplateArgs, CiscoNtpFeatureTemplateState } from "./ciscoNtpFeatureTemplate";
export type CiscoNtpFeatureTemplate = import("./ciscoNtpFeatureTemplate").CiscoNtpFeatureTemplate;
export const CiscoNtpFeatureTemplate: typeof import("./ciscoNtpFeatureTemplate").CiscoNtpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoNtpFeatureTemplate"], () => require("./ciscoNtpFeatureTemplate"));

export { CiscoOmpFeatureTemplateArgs, CiscoOmpFeatureTemplateState } from "./ciscoOmpFeatureTemplate";
export type CiscoOmpFeatureTemplate = import("./ciscoOmpFeatureTemplate").CiscoOmpFeatureTemplate;
export const CiscoOmpFeatureTemplate: typeof import("./ciscoOmpFeatureTemplate").CiscoOmpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoOmpFeatureTemplate"], () => require("./ciscoOmpFeatureTemplate"));

export { CiscoOspfFeatureTemplateArgs, CiscoOspfFeatureTemplateState } from "./ciscoOspfFeatureTemplate";
export type CiscoOspfFeatureTemplate = import("./ciscoOspfFeatureTemplate").CiscoOspfFeatureTemplate;
export const CiscoOspfFeatureTemplate: typeof import("./ciscoOspfFeatureTemplate").CiscoOspfFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoOspfFeatureTemplate"], () => require("./ciscoOspfFeatureTemplate"));

export { CiscoOspfv3FeatureTemplateArgs, CiscoOspfv3FeatureTemplateState } from "./ciscoOspfv3FeatureTemplate";
export type CiscoOspfv3FeatureTemplate = import("./ciscoOspfv3FeatureTemplate").CiscoOspfv3FeatureTemplate;
export const CiscoOspfv3FeatureTemplate: typeof import("./ciscoOspfv3FeatureTemplate").CiscoOspfv3FeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoOspfv3FeatureTemplate"], () => require("./ciscoOspfv3FeatureTemplate"));

export { CiscoSecureInternetGatewayFeatureTemplateArgs, CiscoSecureInternetGatewayFeatureTemplateState } from "./ciscoSecureInternetGatewayFeatureTemplate";
export type CiscoSecureInternetGatewayFeatureTemplate = import("./ciscoSecureInternetGatewayFeatureTemplate").CiscoSecureInternetGatewayFeatureTemplate;
export const CiscoSecureInternetGatewayFeatureTemplate: typeof import("./ciscoSecureInternetGatewayFeatureTemplate").CiscoSecureInternetGatewayFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSecureInternetGatewayFeatureTemplate"], () => require("./ciscoSecureInternetGatewayFeatureTemplate"));

export { CiscoSecurityFeatureTemplateArgs, CiscoSecurityFeatureTemplateState } from "./ciscoSecurityFeatureTemplate";
export type CiscoSecurityFeatureTemplate = import("./ciscoSecurityFeatureTemplate").CiscoSecurityFeatureTemplate;
export const CiscoSecurityFeatureTemplate: typeof import("./ciscoSecurityFeatureTemplate").CiscoSecurityFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSecurityFeatureTemplate"], () => require("./ciscoSecurityFeatureTemplate"));

export { CiscoSigCredentialsFeatureTemplateArgs, CiscoSigCredentialsFeatureTemplateState } from "./ciscoSigCredentialsFeatureTemplate";
export type CiscoSigCredentialsFeatureTemplate = import("./ciscoSigCredentialsFeatureTemplate").CiscoSigCredentialsFeatureTemplate;
export const CiscoSigCredentialsFeatureTemplate: typeof import("./ciscoSigCredentialsFeatureTemplate").CiscoSigCredentialsFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSigCredentialsFeatureTemplate"], () => require("./ciscoSigCredentialsFeatureTemplate"));

export { CiscoSnmpFeatureTemplateArgs, CiscoSnmpFeatureTemplateState } from "./ciscoSnmpFeatureTemplate";
export type CiscoSnmpFeatureTemplate = import("./ciscoSnmpFeatureTemplate").CiscoSnmpFeatureTemplate;
export const CiscoSnmpFeatureTemplate: typeof import("./ciscoSnmpFeatureTemplate").CiscoSnmpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSnmpFeatureTemplate"], () => require("./ciscoSnmpFeatureTemplate"));

export { CiscoSystemFeatureTemplateArgs, CiscoSystemFeatureTemplateState } from "./ciscoSystemFeatureTemplate";
export type CiscoSystemFeatureTemplate = import("./ciscoSystemFeatureTemplate").CiscoSystemFeatureTemplate;
export const CiscoSystemFeatureTemplate: typeof import("./ciscoSystemFeatureTemplate").CiscoSystemFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoSystemFeatureTemplate"], () => require("./ciscoSystemFeatureTemplate"));

export { CiscoThousandeyesFeatureTemplateArgs, CiscoThousandeyesFeatureTemplateState } from "./ciscoThousandeyesFeatureTemplate";
export type CiscoThousandeyesFeatureTemplate = import("./ciscoThousandeyesFeatureTemplate").CiscoThousandeyesFeatureTemplate;
export const CiscoThousandeyesFeatureTemplate: typeof import("./ciscoThousandeyesFeatureTemplate").CiscoThousandeyesFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoThousandeyesFeatureTemplate"], () => require("./ciscoThousandeyesFeatureTemplate"));

export { CiscoTrustsecFeatureTemplateArgs, CiscoTrustsecFeatureTemplateState } from "./ciscoTrustsecFeatureTemplate";
export type CiscoTrustsecFeatureTemplate = import("./ciscoTrustsecFeatureTemplate").CiscoTrustsecFeatureTemplate;
export const CiscoTrustsecFeatureTemplate: typeof import("./ciscoTrustsecFeatureTemplate").CiscoTrustsecFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoTrustsecFeatureTemplate"], () => require("./ciscoTrustsecFeatureTemplate"));

export { CiscoVpnFeatureTemplateArgs, CiscoVpnFeatureTemplateState } from "./ciscoVpnFeatureTemplate";
export type CiscoVpnFeatureTemplate = import("./ciscoVpnFeatureTemplate").CiscoVpnFeatureTemplate;
export const CiscoVpnFeatureTemplate: typeof import("./ciscoVpnFeatureTemplate").CiscoVpnFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnFeatureTemplate"], () => require("./ciscoVpnFeatureTemplate"));

export { CiscoVpnInterfaceFeatureTemplateArgs, CiscoVpnInterfaceFeatureTemplateState } from "./ciscoVpnInterfaceFeatureTemplate";
export type CiscoVpnInterfaceFeatureTemplate = import("./ciscoVpnInterfaceFeatureTemplate").CiscoVpnInterfaceFeatureTemplate;
export const CiscoVpnInterfaceFeatureTemplate: typeof import("./ciscoVpnInterfaceFeatureTemplate").CiscoVpnInterfaceFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnInterfaceFeatureTemplate"], () => require("./ciscoVpnInterfaceFeatureTemplate"));

export { CiscoVpnInterfaceGreFeatureTemplateArgs, CiscoVpnInterfaceGreFeatureTemplateState } from "./ciscoVpnInterfaceGreFeatureTemplate";
export type CiscoVpnInterfaceGreFeatureTemplate = import("./ciscoVpnInterfaceGreFeatureTemplate").CiscoVpnInterfaceGreFeatureTemplate;
export const CiscoVpnInterfaceGreFeatureTemplate: typeof import("./ciscoVpnInterfaceGreFeatureTemplate").CiscoVpnInterfaceGreFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnInterfaceGreFeatureTemplate"], () => require("./ciscoVpnInterfaceGreFeatureTemplate"));

export { CiscoVpnInterfaceIpsecFeatureTemplateArgs, CiscoVpnInterfaceIpsecFeatureTemplateState } from "./ciscoVpnInterfaceIpsecFeatureTemplate";
export type CiscoVpnInterfaceIpsecFeatureTemplate = import("./ciscoVpnInterfaceIpsecFeatureTemplate").CiscoVpnInterfaceIpsecFeatureTemplate;
export const CiscoVpnInterfaceIpsecFeatureTemplate: typeof import("./ciscoVpnInterfaceIpsecFeatureTemplate").CiscoVpnInterfaceIpsecFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoVpnInterfaceIpsecFeatureTemplate"], () => require("./ciscoVpnInterfaceIpsecFeatureTemplate"));

export { CiscoWirelessLanFeatureTemplateArgs, CiscoWirelessLanFeatureTemplateState } from "./ciscoWirelessLanFeatureTemplate";
export type CiscoWirelessLanFeatureTemplate = import("./ciscoWirelessLanFeatureTemplate").CiscoWirelessLanFeatureTemplate;
export const CiscoWirelessLanFeatureTemplate: typeof import("./ciscoWirelessLanFeatureTemplate").CiscoWirelessLanFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CiscoWirelessLanFeatureTemplate"], () => require("./ciscoWirelessLanFeatureTemplate"));

export { ClassMapPolicyObjectArgs, ClassMapPolicyObjectState } from "./classMapPolicyObject";
export type ClassMapPolicyObject = import("./classMapPolicyObject").ClassMapPolicyObject;
export const ClassMapPolicyObject: typeof import("./classMapPolicyObject").ClassMapPolicyObject = null as any;
utilities.lazyLoad(exports, ["ClassMapPolicyObject"], () => require("./classMapPolicyObject"));

export { CliConfigProfileParcelArgs, CliConfigProfileParcelState } from "./cliConfigProfileParcel";
export type CliConfigProfileParcel = import("./cliConfigProfileParcel").CliConfigProfileParcel;
export const CliConfigProfileParcel: typeof import("./cliConfigProfileParcel").CliConfigProfileParcel = null as any;
utilities.lazyLoad(exports, ["CliConfigProfileParcel"], () => require("./cliConfigProfileParcel"));

export { CliDeviceTemplateArgs, CliDeviceTemplateState } from "./cliDeviceTemplate";
export type CliDeviceTemplate = import("./cliDeviceTemplate").CliDeviceTemplate;
export const CliDeviceTemplate: typeof import("./cliDeviceTemplate").CliDeviceTemplate = null as any;
utilities.lazyLoad(exports, ["CliDeviceTemplate"], () => require("./cliDeviceTemplate"));

export { CliFeatureProfileArgs, CliFeatureProfileState } from "./cliFeatureProfile";
export type CliFeatureProfile = import("./cliFeatureProfile").CliFeatureProfile;
export const CliFeatureProfile: typeof import("./cliFeatureProfile").CliFeatureProfile = null as any;
utilities.lazyLoad(exports, ["CliFeatureProfile"], () => require("./cliFeatureProfile"));

export { CliTemplateFeatureTemplateArgs, CliTemplateFeatureTemplateState } from "./cliTemplateFeatureTemplate";
export type CliTemplateFeatureTemplate = import("./cliTemplateFeatureTemplate").CliTemplateFeatureTemplate;
export const CliTemplateFeatureTemplate: typeof import("./cliTemplateFeatureTemplate").CliTemplateFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["CliTemplateFeatureTemplate"], () => require("./cliTemplateFeatureTemplate"));

export { ColorListPolicyObjectArgs, ColorListPolicyObjectState } from "./colorListPolicyObject";
export type ColorListPolicyObject = import("./colorListPolicyObject").ColorListPolicyObject;
export const ColorListPolicyObject: typeof import("./colorListPolicyObject").ColorListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ColorListPolicyObject"], () => require("./colorListPolicyObject"));

export { ConfigurationGroupArgs, ConfigurationGroupState } from "./configurationGroup";
export type ConfigurationGroup = import("./configurationGroup").ConfigurationGroup;
export const ConfigurationGroup: typeof import("./configurationGroup").ConfigurationGroup = null as any;
utilities.lazyLoad(exports, ["ConfigurationGroup"], () => require("./configurationGroup"));

export { ConfigurationGroupDeployArgs, ConfigurationGroupDeployState } from "./configurationGroupDeploy";
export type ConfigurationGroupDeploy = import("./configurationGroupDeploy").ConfigurationGroupDeploy;
export const ConfigurationGroupDeploy: typeof import("./configurationGroupDeploy").ConfigurationGroupDeploy = null as any;
utilities.lazyLoad(exports, ["ConfigurationGroupDeploy"], () => require("./configurationGroupDeploy"));

export { ConfigurationGroupDeviceVariablesArgs, ConfigurationGroupDeviceVariablesState } from "./configurationGroupDeviceVariables";
export type ConfigurationGroupDeviceVariables = import("./configurationGroupDeviceVariables").ConfigurationGroupDeviceVariables;
export const ConfigurationGroupDeviceVariables: typeof import("./configurationGroupDeviceVariables").ConfigurationGroupDeviceVariables = null as any;
utilities.lazyLoad(exports, ["ConfigurationGroupDeviceVariables"], () => require("./configurationGroupDeviceVariables"));

export { ConfigurationGroupDevicesArgs, ConfigurationGroupDevicesState } from "./configurationGroupDevices";
export type ConfigurationGroupDevices = import("./configurationGroupDevices").ConfigurationGroupDevices;
export const ConfigurationGroupDevices: typeof import("./configurationGroupDevices").ConfigurationGroupDevices = null as any;
utilities.lazyLoad(exports, ["ConfigurationGroupDevices"], () => require("./configurationGroupDevices"));

export { CustomControlTopologyPolicyDefinitionArgs, CustomControlTopologyPolicyDefinitionState } from "./customControlTopologyPolicyDefinition";
export type CustomControlTopologyPolicyDefinition = import("./customControlTopologyPolicyDefinition").CustomControlTopologyPolicyDefinition;
export const CustomControlTopologyPolicyDefinition: typeof import("./customControlTopologyPolicyDefinition").CustomControlTopologyPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["CustomControlTopologyPolicyDefinition"], () => require("./customControlTopologyPolicyDefinition"));

export { DataFqdnPrefixListPolicyObjectArgs, DataFqdnPrefixListPolicyObjectState } from "./dataFqdnPrefixListPolicyObject";
export type DataFqdnPrefixListPolicyObject = import("./dataFqdnPrefixListPolicyObject").DataFqdnPrefixListPolicyObject;
export const DataFqdnPrefixListPolicyObject: typeof import("./dataFqdnPrefixListPolicyObject").DataFqdnPrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DataFqdnPrefixListPolicyObject"], () => require("./dataFqdnPrefixListPolicyObject"));

export { DataIpv4PrefixListPolicyObjectArgs, DataIpv4PrefixListPolicyObjectState } from "./dataIpv4PrefixListPolicyObject";
export type DataIpv4PrefixListPolicyObject = import("./dataIpv4PrefixListPolicyObject").DataIpv4PrefixListPolicyObject;
export const DataIpv4PrefixListPolicyObject: typeof import("./dataIpv4PrefixListPolicyObject").DataIpv4PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DataIpv4PrefixListPolicyObject"], () => require("./dataIpv4PrefixListPolicyObject"));

export { DataIpv6PrefixListPolicyObjectArgs, DataIpv6PrefixListPolicyObjectState } from "./dataIpv6PrefixListPolicyObject";
export type DataIpv6PrefixListPolicyObject = import("./dataIpv6PrefixListPolicyObject").DataIpv6PrefixListPolicyObject;
export const DataIpv6PrefixListPolicyObject: typeof import("./dataIpv6PrefixListPolicyObject").DataIpv6PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DataIpv6PrefixListPolicyObject"], () => require("./dataIpv6PrefixListPolicyObject"));

export { DnsSecurityPolicyDefinitionArgs, DnsSecurityPolicyDefinitionState } from "./dnsSecurityPolicyDefinition";
export type DnsSecurityPolicyDefinition = import("./dnsSecurityPolicyDefinition").DnsSecurityPolicyDefinition;
export const DnsSecurityPolicyDefinition: typeof import("./dnsSecurityPolicyDefinition").DnsSecurityPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["DnsSecurityPolicyDefinition"], () => require("./dnsSecurityPolicyDefinition"));

export { DomainListPolicyObjectArgs, DomainListPolicyObjectState } from "./domainListPolicyObject";
export type DomainListPolicyObject = import("./domainListPolicyObject").DomainListPolicyObject;
export const DomainListPolicyObject: typeof import("./domainListPolicyObject").DomainListPolicyObject = null as any;
utilities.lazyLoad(exports, ["DomainListPolicyObject"], () => require("./domainListPolicyObject"));

export { EigrpFeatureTemplateArgs, EigrpFeatureTemplateState } from "./eigrpFeatureTemplate";
export type EigrpFeatureTemplate = import("./eigrpFeatureTemplate").EigrpFeatureTemplate;
export const EigrpFeatureTemplate: typeof import("./eigrpFeatureTemplate").EigrpFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["EigrpFeatureTemplate"], () => require("./eigrpFeatureTemplate"));

export { ExpandedCommunityListPolicyObjectArgs, ExpandedCommunityListPolicyObjectState } from "./expandedCommunityListPolicyObject";
export type ExpandedCommunityListPolicyObject = import("./expandedCommunityListPolicyObject").ExpandedCommunityListPolicyObject;
export const ExpandedCommunityListPolicyObject: typeof import("./expandedCommunityListPolicyObject").ExpandedCommunityListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ExpandedCommunityListPolicyObject"], () => require("./expandedCommunityListPolicyObject"));

export { ExtendedCommunityListPolicyObjectArgs, ExtendedCommunityListPolicyObjectState } from "./extendedCommunityListPolicyObject";
export type ExtendedCommunityListPolicyObject = import("./extendedCommunityListPolicyObject").ExtendedCommunityListPolicyObject;
export const ExtendedCommunityListPolicyObject: typeof import("./extendedCommunityListPolicyObject").ExtendedCommunityListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ExtendedCommunityListPolicyObject"], () => require("./extendedCommunityListPolicyObject"));

export { FeatureDeviceTemplateArgs, FeatureDeviceTemplateState } from "./featureDeviceTemplate";
export type FeatureDeviceTemplate = import("./featureDeviceTemplate").FeatureDeviceTemplate;
export const FeatureDeviceTemplate: typeof import("./featureDeviceTemplate").FeatureDeviceTemplate = null as any;
utilities.lazyLoad(exports, ["FeatureDeviceTemplate"], () => require("./featureDeviceTemplate"));

export { GeoLocationListPolicyObjectArgs, GeoLocationListPolicyObjectState } from "./geoLocationListPolicyObject";
export type GeoLocationListPolicyObject = import("./geoLocationListPolicyObject").GeoLocationListPolicyObject;
export const GeoLocationListPolicyObject: typeof import("./geoLocationListPolicyObject").GeoLocationListPolicyObject = null as any;
utilities.lazyLoad(exports, ["GeoLocationListPolicyObject"], () => require("./geoLocationListPolicyObject"));

export { GetAdvancedInspectionProfilePolicyDefinitionArgs, GetAdvancedInspectionProfilePolicyDefinitionResult, GetAdvancedInspectionProfilePolicyDefinitionOutputArgs } from "./getAdvancedInspectionProfilePolicyDefinition";
export const getAdvancedInspectionProfilePolicyDefinition: typeof import("./getAdvancedInspectionProfilePolicyDefinition").getAdvancedInspectionProfilePolicyDefinition = null as any;
export const getAdvancedInspectionProfilePolicyDefinitionOutput: typeof import("./getAdvancedInspectionProfilePolicyDefinition").getAdvancedInspectionProfilePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedInspectionProfilePolicyDefinition","getAdvancedInspectionProfilePolicyDefinitionOutput"], () => require("./getAdvancedInspectionProfilePolicyDefinition"));

export { GetAdvancedMalwareProtectionPolicyDefinitionArgs, GetAdvancedMalwareProtectionPolicyDefinitionResult, GetAdvancedMalwareProtectionPolicyDefinitionOutputArgs } from "./getAdvancedMalwareProtectionPolicyDefinition";
export const getAdvancedMalwareProtectionPolicyDefinition: typeof import("./getAdvancedMalwareProtectionPolicyDefinition").getAdvancedMalwareProtectionPolicyDefinition = null as any;
export const getAdvancedMalwareProtectionPolicyDefinitionOutput: typeof import("./getAdvancedMalwareProtectionPolicyDefinition").getAdvancedMalwareProtectionPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedMalwareProtectionPolicyDefinition","getAdvancedMalwareProtectionPolicyDefinitionOutput"], () => require("./getAdvancedMalwareProtectionPolicyDefinition"));

export { GetAllowUrlListPolicyObjectArgs, GetAllowUrlListPolicyObjectResult, GetAllowUrlListPolicyObjectOutputArgs } from "./getAllowUrlListPolicyObject";
export const getAllowUrlListPolicyObject: typeof import("./getAllowUrlListPolicyObject").getAllowUrlListPolicyObject = null as any;
export const getAllowUrlListPolicyObjectOutput: typeof import("./getAllowUrlListPolicyObject").getAllowUrlListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAllowUrlListPolicyObject","getAllowUrlListPolicyObjectOutput"], () => require("./getAllowUrlListPolicyObject"));

export { GetAppProbeClassPolicyObjectArgs, GetAppProbeClassPolicyObjectResult, GetAppProbeClassPolicyObjectOutputArgs } from "./getAppProbeClassPolicyObject";
export const getAppProbeClassPolicyObject: typeof import("./getAppProbeClassPolicyObject").getAppProbeClassPolicyObject = null as any;
export const getAppProbeClassPolicyObjectOutput: typeof import("./getAppProbeClassPolicyObject").getAppProbeClassPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAppProbeClassPolicyObject","getAppProbeClassPolicyObjectOutput"], () => require("./getAppProbeClassPolicyObject"));

export { GetApplicationAwareRoutingPolicyDefinitionArgs, GetApplicationAwareRoutingPolicyDefinitionResult, GetApplicationAwareRoutingPolicyDefinitionOutputArgs } from "./getApplicationAwareRoutingPolicyDefinition";
export const getApplicationAwareRoutingPolicyDefinition: typeof import("./getApplicationAwareRoutingPolicyDefinition").getApplicationAwareRoutingPolicyDefinition = null as any;
export const getApplicationAwareRoutingPolicyDefinitionOutput: typeof import("./getApplicationAwareRoutingPolicyDefinition").getApplicationAwareRoutingPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationAwareRoutingPolicyDefinition","getApplicationAwareRoutingPolicyDefinitionOutput"], () => require("./getApplicationAwareRoutingPolicyDefinition"));

export { GetApplicationListPolicyObjectArgs, GetApplicationListPolicyObjectResult, GetApplicationListPolicyObjectOutputArgs } from "./getApplicationListPolicyObject";
export const getApplicationListPolicyObject: typeof import("./getApplicationListPolicyObject").getApplicationListPolicyObject = null as any;
export const getApplicationListPolicyObjectOutput: typeof import("./getApplicationListPolicyObject").getApplicationListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationListPolicyObject","getApplicationListPolicyObjectOutput"], () => require("./getApplicationListPolicyObject"));

export { GetApplicationPriorityFeatureProfileArgs, GetApplicationPriorityFeatureProfileResult, GetApplicationPriorityFeatureProfileOutputArgs } from "./getApplicationPriorityFeatureProfile";
export const getApplicationPriorityFeatureProfile: typeof import("./getApplicationPriorityFeatureProfile").getApplicationPriorityFeatureProfile = null as any;
export const getApplicationPriorityFeatureProfileOutput: typeof import("./getApplicationPriorityFeatureProfile").getApplicationPriorityFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationPriorityFeatureProfile","getApplicationPriorityFeatureProfileOutput"], () => require("./getApplicationPriorityFeatureProfile"));

export { GetApplicationPriorityQosPolicyProfileParcelArgs, GetApplicationPriorityQosPolicyProfileParcelResult, GetApplicationPriorityQosPolicyProfileParcelOutputArgs } from "./getApplicationPriorityQosPolicyProfileParcel";
export const getApplicationPriorityQosPolicyProfileParcel: typeof import("./getApplicationPriorityQosPolicyProfileParcel").getApplicationPriorityQosPolicyProfileParcel = null as any;
export const getApplicationPriorityQosPolicyProfileParcelOutput: typeof import("./getApplicationPriorityQosPolicyProfileParcel").getApplicationPriorityQosPolicyProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getApplicationPriorityQosPolicyProfileParcel","getApplicationPriorityQosPolicyProfileParcelOutput"], () => require("./getApplicationPriorityQosPolicyProfileParcel"));

export { GetAsPathListPolicyObjectArgs, GetAsPathListPolicyObjectResult, GetAsPathListPolicyObjectOutputArgs } from "./getAsPathListPolicyObject";
export const getAsPathListPolicyObject: typeof import("./getAsPathListPolicyObject").getAsPathListPolicyObject = null as any;
export const getAsPathListPolicyObjectOutput: typeof import("./getAsPathListPolicyObject").getAsPathListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getAsPathListPolicyObject","getAsPathListPolicyObjectOutput"], () => require("./getAsPathListPolicyObject"));

export { GetBlockUrlListPolicyObjectArgs, GetBlockUrlListPolicyObjectResult, GetBlockUrlListPolicyObjectOutputArgs } from "./getBlockUrlListPolicyObject";
export const getBlockUrlListPolicyObject: typeof import("./getBlockUrlListPolicyObject").getBlockUrlListPolicyObject = null as any;
export const getBlockUrlListPolicyObjectOutput: typeof import("./getBlockUrlListPolicyObject").getBlockUrlListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getBlockUrlListPolicyObject","getBlockUrlListPolicyObjectOutput"], () => require("./getBlockUrlListPolicyObject"));

export { GetCedgeAaaFeatureTemplateArgs, GetCedgeAaaFeatureTemplateResult, GetCedgeAaaFeatureTemplateOutputArgs } from "./getCedgeAaaFeatureTemplate";
export const getCedgeAaaFeatureTemplate: typeof import("./getCedgeAaaFeatureTemplate").getCedgeAaaFeatureTemplate = null as any;
export const getCedgeAaaFeatureTemplateOutput: typeof import("./getCedgeAaaFeatureTemplate").getCedgeAaaFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeAaaFeatureTemplate","getCedgeAaaFeatureTemplateOutput"], () => require("./getCedgeAaaFeatureTemplate"));

export { GetCedgeGlobalFeatureTemplateArgs, GetCedgeGlobalFeatureTemplateResult, GetCedgeGlobalFeatureTemplateOutputArgs } from "./getCedgeGlobalFeatureTemplate";
export const getCedgeGlobalFeatureTemplate: typeof import("./getCedgeGlobalFeatureTemplate").getCedgeGlobalFeatureTemplate = null as any;
export const getCedgeGlobalFeatureTemplateOutput: typeof import("./getCedgeGlobalFeatureTemplate").getCedgeGlobalFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeGlobalFeatureTemplate","getCedgeGlobalFeatureTemplateOutput"], () => require("./getCedgeGlobalFeatureTemplate"));

export { GetCedgeIgmpFeatureTemplateArgs, GetCedgeIgmpFeatureTemplateResult, GetCedgeIgmpFeatureTemplateOutputArgs } from "./getCedgeIgmpFeatureTemplate";
export const getCedgeIgmpFeatureTemplate: typeof import("./getCedgeIgmpFeatureTemplate").getCedgeIgmpFeatureTemplate = null as any;
export const getCedgeIgmpFeatureTemplateOutput: typeof import("./getCedgeIgmpFeatureTemplate").getCedgeIgmpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeIgmpFeatureTemplate","getCedgeIgmpFeatureTemplateOutput"], () => require("./getCedgeIgmpFeatureTemplate"));

export { GetCedgeMulticastFeatureTemplateArgs, GetCedgeMulticastFeatureTemplateResult, GetCedgeMulticastFeatureTemplateOutputArgs } from "./getCedgeMulticastFeatureTemplate";
export const getCedgeMulticastFeatureTemplate: typeof import("./getCedgeMulticastFeatureTemplate").getCedgeMulticastFeatureTemplate = null as any;
export const getCedgeMulticastFeatureTemplateOutput: typeof import("./getCedgeMulticastFeatureTemplate").getCedgeMulticastFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgeMulticastFeatureTemplate","getCedgeMulticastFeatureTemplateOutput"], () => require("./getCedgeMulticastFeatureTemplate"));

export { GetCedgePimFeatureTemplateArgs, GetCedgePimFeatureTemplateResult, GetCedgePimFeatureTemplateOutputArgs } from "./getCedgePimFeatureTemplate";
export const getCedgePimFeatureTemplate: typeof import("./getCedgePimFeatureTemplate").getCedgePimFeatureTemplate = null as any;
export const getCedgePimFeatureTemplateOutput: typeof import("./getCedgePimFeatureTemplate").getCedgePimFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCedgePimFeatureTemplate","getCedgePimFeatureTemplateOutput"], () => require("./getCedgePimFeatureTemplate"));

export { GetCellularCedgeProfileFeatureTemplateArgs, GetCellularCedgeProfileFeatureTemplateResult, GetCellularCedgeProfileFeatureTemplateOutputArgs } from "./getCellularCedgeProfileFeatureTemplate";
export const getCellularCedgeProfileFeatureTemplate: typeof import("./getCellularCedgeProfileFeatureTemplate").getCellularCedgeProfileFeatureTemplate = null as any;
export const getCellularCedgeProfileFeatureTemplateOutput: typeof import("./getCellularCedgeProfileFeatureTemplate").getCellularCedgeProfileFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCellularCedgeProfileFeatureTemplate","getCellularCedgeProfileFeatureTemplateOutput"], () => require("./getCellularCedgeProfileFeatureTemplate"));

export { GetCellularControllerFeatureTemplateArgs, GetCellularControllerFeatureTemplateResult, GetCellularControllerFeatureTemplateOutputArgs } from "./getCellularControllerFeatureTemplate";
export const getCellularControllerFeatureTemplate: typeof import("./getCellularControllerFeatureTemplate").getCellularControllerFeatureTemplate = null as any;
export const getCellularControllerFeatureTemplateOutput: typeof import("./getCellularControllerFeatureTemplate").getCellularControllerFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCellularControllerFeatureTemplate","getCellularControllerFeatureTemplateOutput"], () => require("./getCellularControllerFeatureTemplate"));

export { GetCellularProfileFeatureTemplateArgs, GetCellularProfileFeatureTemplateResult, GetCellularProfileFeatureTemplateOutputArgs } from "./getCellularProfileFeatureTemplate";
export const getCellularProfileFeatureTemplate: typeof import("./getCellularProfileFeatureTemplate").getCellularProfileFeatureTemplate = null as any;
export const getCellularProfileFeatureTemplateOutput: typeof import("./getCellularProfileFeatureTemplate").getCellularProfileFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCellularProfileFeatureTemplate","getCellularProfileFeatureTemplateOutput"], () => require("./getCellularProfileFeatureTemplate"));

export { GetCentralizedPolicyArgs, GetCentralizedPolicyResult, GetCentralizedPolicyOutputArgs } from "./getCentralizedPolicy";
export const getCentralizedPolicy: typeof import("./getCentralizedPolicy").getCentralizedPolicy = null as any;
export const getCentralizedPolicyOutput: typeof import("./getCentralizedPolicy").getCentralizedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCentralizedPolicy","getCentralizedPolicyOutput"], () => require("./getCentralizedPolicy"));

export { GetCflowdPolicyDefinitionArgs, GetCflowdPolicyDefinitionResult, GetCflowdPolicyDefinitionOutputArgs } from "./getCflowdPolicyDefinition";
export const getCflowdPolicyDefinition: typeof import("./getCflowdPolicyDefinition").getCflowdPolicyDefinition = null as any;
export const getCflowdPolicyDefinitionOutput: typeof import("./getCflowdPolicyDefinition").getCflowdPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCflowdPolicyDefinition","getCflowdPolicyDefinitionOutput"], () => require("./getCflowdPolicyDefinition"));

export { GetCiscoBannerFeatureTemplateArgs, GetCiscoBannerFeatureTemplateResult, GetCiscoBannerFeatureTemplateOutputArgs } from "./getCiscoBannerFeatureTemplate";
export const getCiscoBannerFeatureTemplate: typeof import("./getCiscoBannerFeatureTemplate").getCiscoBannerFeatureTemplate = null as any;
export const getCiscoBannerFeatureTemplateOutput: typeof import("./getCiscoBannerFeatureTemplate").getCiscoBannerFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoBannerFeatureTemplate","getCiscoBannerFeatureTemplateOutput"], () => require("./getCiscoBannerFeatureTemplate"));

export { GetCiscoBfdFeatureTemplateArgs, GetCiscoBfdFeatureTemplateResult, GetCiscoBfdFeatureTemplateOutputArgs } from "./getCiscoBfdFeatureTemplate";
export const getCiscoBfdFeatureTemplate: typeof import("./getCiscoBfdFeatureTemplate").getCiscoBfdFeatureTemplate = null as any;
export const getCiscoBfdFeatureTemplateOutput: typeof import("./getCiscoBfdFeatureTemplate").getCiscoBfdFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoBfdFeatureTemplate","getCiscoBfdFeatureTemplateOutput"], () => require("./getCiscoBfdFeatureTemplate"));

export { GetCiscoBgpFeatureTemplateArgs, GetCiscoBgpFeatureTemplateResult, GetCiscoBgpFeatureTemplateOutputArgs } from "./getCiscoBgpFeatureTemplate";
export const getCiscoBgpFeatureTemplate: typeof import("./getCiscoBgpFeatureTemplate").getCiscoBgpFeatureTemplate = null as any;
export const getCiscoBgpFeatureTemplateOutput: typeof import("./getCiscoBgpFeatureTemplate").getCiscoBgpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoBgpFeatureTemplate","getCiscoBgpFeatureTemplateOutput"], () => require("./getCiscoBgpFeatureTemplate"));

export { GetCiscoDhcpServerFeatureTemplateArgs, GetCiscoDhcpServerFeatureTemplateResult, GetCiscoDhcpServerFeatureTemplateOutputArgs } from "./getCiscoDhcpServerFeatureTemplate";
export const getCiscoDhcpServerFeatureTemplate: typeof import("./getCiscoDhcpServerFeatureTemplate").getCiscoDhcpServerFeatureTemplate = null as any;
export const getCiscoDhcpServerFeatureTemplateOutput: typeof import("./getCiscoDhcpServerFeatureTemplate").getCiscoDhcpServerFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoDhcpServerFeatureTemplate","getCiscoDhcpServerFeatureTemplateOutput"], () => require("./getCiscoDhcpServerFeatureTemplate"));

export { GetCiscoLoggingFeatureTemplateArgs, GetCiscoLoggingFeatureTemplateResult, GetCiscoLoggingFeatureTemplateOutputArgs } from "./getCiscoLoggingFeatureTemplate";
export const getCiscoLoggingFeatureTemplate: typeof import("./getCiscoLoggingFeatureTemplate").getCiscoLoggingFeatureTemplate = null as any;
export const getCiscoLoggingFeatureTemplateOutput: typeof import("./getCiscoLoggingFeatureTemplate").getCiscoLoggingFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoLoggingFeatureTemplate","getCiscoLoggingFeatureTemplateOutput"], () => require("./getCiscoLoggingFeatureTemplate"));

export { GetCiscoNtpFeatureTemplateArgs, GetCiscoNtpFeatureTemplateResult, GetCiscoNtpFeatureTemplateOutputArgs } from "./getCiscoNtpFeatureTemplate";
export const getCiscoNtpFeatureTemplate: typeof import("./getCiscoNtpFeatureTemplate").getCiscoNtpFeatureTemplate = null as any;
export const getCiscoNtpFeatureTemplateOutput: typeof import("./getCiscoNtpFeatureTemplate").getCiscoNtpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoNtpFeatureTemplate","getCiscoNtpFeatureTemplateOutput"], () => require("./getCiscoNtpFeatureTemplate"));

export { GetCiscoOmpFeatureTemplateArgs, GetCiscoOmpFeatureTemplateResult, GetCiscoOmpFeatureTemplateOutputArgs } from "./getCiscoOmpFeatureTemplate";
export const getCiscoOmpFeatureTemplate: typeof import("./getCiscoOmpFeatureTemplate").getCiscoOmpFeatureTemplate = null as any;
export const getCiscoOmpFeatureTemplateOutput: typeof import("./getCiscoOmpFeatureTemplate").getCiscoOmpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoOmpFeatureTemplate","getCiscoOmpFeatureTemplateOutput"], () => require("./getCiscoOmpFeatureTemplate"));

export { GetCiscoOspfFeatureTemplateArgs, GetCiscoOspfFeatureTemplateResult, GetCiscoOspfFeatureTemplateOutputArgs } from "./getCiscoOspfFeatureTemplate";
export const getCiscoOspfFeatureTemplate: typeof import("./getCiscoOspfFeatureTemplate").getCiscoOspfFeatureTemplate = null as any;
export const getCiscoOspfFeatureTemplateOutput: typeof import("./getCiscoOspfFeatureTemplate").getCiscoOspfFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoOspfFeatureTemplate","getCiscoOspfFeatureTemplateOutput"], () => require("./getCiscoOspfFeatureTemplate"));

export { GetCiscoOspfv3FeatureTemplateArgs, GetCiscoOspfv3FeatureTemplateResult, GetCiscoOspfv3FeatureTemplateOutputArgs } from "./getCiscoOspfv3FeatureTemplate";
export const getCiscoOspfv3FeatureTemplate: typeof import("./getCiscoOspfv3FeatureTemplate").getCiscoOspfv3FeatureTemplate = null as any;
export const getCiscoOspfv3FeatureTemplateOutput: typeof import("./getCiscoOspfv3FeatureTemplate").getCiscoOspfv3FeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoOspfv3FeatureTemplate","getCiscoOspfv3FeatureTemplateOutput"], () => require("./getCiscoOspfv3FeatureTemplate"));

export { GetCiscoSecureInternetGatewayFeatureTemplateArgs, GetCiscoSecureInternetGatewayFeatureTemplateResult, GetCiscoSecureInternetGatewayFeatureTemplateOutputArgs } from "./getCiscoSecureInternetGatewayFeatureTemplate";
export const getCiscoSecureInternetGatewayFeatureTemplate: typeof import("./getCiscoSecureInternetGatewayFeatureTemplate").getCiscoSecureInternetGatewayFeatureTemplate = null as any;
export const getCiscoSecureInternetGatewayFeatureTemplateOutput: typeof import("./getCiscoSecureInternetGatewayFeatureTemplate").getCiscoSecureInternetGatewayFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSecureInternetGatewayFeatureTemplate","getCiscoSecureInternetGatewayFeatureTemplateOutput"], () => require("./getCiscoSecureInternetGatewayFeatureTemplate"));

export { GetCiscoSecurityFeatureTemplateArgs, GetCiscoSecurityFeatureTemplateResult, GetCiscoSecurityFeatureTemplateOutputArgs } from "./getCiscoSecurityFeatureTemplate";
export const getCiscoSecurityFeatureTemplate: typeof import("./getCiscoSecurityFeatureTemplate").getCiscoSecurityFeatureTemplate = null as any;
export const getCiscoSecurityFeatureTemplateOutput: typeof import("./getCiscoSecurityFeatureTemplate").getCiscoSecurityFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSecurityFeatureTemplate","getCiscoSecurityFeatureTemplateOutput"], () => require("./getCiscoSecurityFeatureTemplate"));

export { GetCiscoSigCredentialsFeatureTemplateArgs, GetCiscoSigCredentialsFeatureTemplateResult, GetCiscoSigCredentialsFeatureTemplateOutputArgs } from "./getCiscoSigCredentialsFeatureTemplate";
export const getCiscoSigCredentialsFeatureTemplate: typeof import("./getCiscoSigCredentialsFeatureTemplate").getCiscoSigCredentialsFeatureTemplate = null as any;
export const getCiscoSigCredentialsFeatureTemplateOutput: typeof import("./getCiscoSigCredentialsFeatureTemplate").getCiscoSigCredentialsFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSigCredentialsFeatureTemplate","getCiscoSigCredentialsFeatureTemplateOutput"], () => require("./getCiscoSigCredentialsFeatureTemplate"));

export { GetCiscoSnmpFeatureTemplateArgs, GetCiscoSnmpFeatureTemplateResult, GetCiscoSnmpFeatureTemplateOutputArgs } from "./getCiscoSnmpFeatureTemplate";
export const getCiscoSnmpFeatureTemplate: typeof import("./getCiscoSnmpFeatureTemplate").getCiscoSnmpFeatureTemplate = null as any;
export const getCiscoSnmpFeatureTemplateOutput: typeof import("./getCiscoSnmpFeatureTemplate").getCiscoSnmpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSnmpFeatureTemplate","getCiscoSnmpFeatureTemplateOutput"], () => require("./getCiscoSnmpFeatureTemplate"));

export { GetCiscoSystemFeatureTemplateArgs, GetCiscoSystemFeatureTemplateResult, GetCiscoSystemFeatureTemplateOutputArgs } from "./getCiscoSystemFeatureTemplate";
export const getCiscoSystemFeatureTemplate: typeof import("./getCiscoSystemFeatureTemplate").getCiscoSystemFeatureTemplate = null as any;
export const getCiscoSystemFeatureTemplateOutput: typeof import("./getCiscoSystemFeatureTemplate").getCiscoSystemFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoSystemFeatureTemplate","getCiscoSystemFeatureTemplateOutput"], () => require("./getCiscoSystemFeatureTemplate"));

export { GetCiscoThousandeyesFeatureTemplateArgs, GetCiscoThousandeyesFeatureTemplateResult, GetCiscoThousandeyesFeatureTemplateOutputArgs } from "./getCiscoThousandeyesFeatureTemplate";
export const getCiscoThousandeyesFeatureTemplate: typeof import("./getCiscoThousandeyesFeatureTemplate").getCiscoThousandeyesFeatureTemplate = null as any;
export const getCiscoThousandeyesFeatureTemplateOutput: typeof import("./getCiscoThousandeyesFeatureTemplate").getCiscoThousandeyesFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoThousandeyesFeatureTemplate","getCiscoThousandeyesFeatureTemplateOutput"], () => require("./getCiscoThousandeyesFeatureTemplate"));

export { GetCiscoTrustsecFeatureTemplateArgs, GetCiscoTrustsecFeatureTemplateResult, GetCiscoTrustsecFeatureTemplateOutputArgs } from "./getCiscoTrustsecFeatureTemplate";
export const getCiscoTrustsecFeatureTemplate: typeof import("./getCiscoTrustsecFeatureTemplate").getCiscoTrustsecFeatureTemplate = null as any;
export const getCiscoTrustsecFeatureTemplateOutput: typeof import("./getCiscoTrustsecFeatureTemplate").getCiscoTrustsecFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoTrustsecFeatureTemplate","getCiscoTrustsecFeatureTemplateOutput"], () => require("./getCiscoTrustsecFeatureTemplate"));

export { GetCiscoVpnFeatureTemplateArgs, GetCiscoVpnFeatureTemplateResult, GetCiscoVpnFeatureTemplateOutputArgs } from "./getCiscoVpnFeatureTemplate";
export const getCiscoVpnFeatureTemplate: typeof import("./getCiscoVpnFeatureTemplate").getCiscoVpnFeatureTemplate = null as any;
export const getCiscoVpnFeatureTemplateOutput: typeof import("./getCiscoVpnFeatureTemplate").getCiscoVpnFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnFeatureTemplate","getCiscoVpnFeatureTemplateOutput"], () => require("./getCiscoVpnFeatureTemplate"));

export { GetCiscoVpnInterfaceFeatureTemplateArgs, GetCiscoVpnInterfaceFeatureTemplateResult, GetCiscoVpnInterfaceFeatureTemplateOutputArgs } from "./getCiscoVpnInterfaceFeatureTemplate";
export const getCiscoVpnInterfaceFeatureTemplate: typeof import("./getCiscoVpnInterfaceFeatureTemplate").getCiscoVpnInterfaceFeatureTemplate = null as any;
export const getCiscoVpnInterfaceFeatureTemplateOutput: typeof import("./getCiscoVpnInterfaceFeatureTemplate").getCiscoVpnInterfaceFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnInterfaceFeatureTemplate","getCiscoVpnInterfaceFeatureTemplateOutput"], () => require("./getCiscoVpnInterfaceFeatureTemplate"));

export { GetCiscoVpnInterfaceGreFeatureTemplateArgs, GetCiscoVpnInterfaceGreFeatureTemplateResult, GetCiscoVpnInterfaceGreFeatureTemplateOutputArgs } from "./getCiscoVpnInterfaceGreFeatureTemplate";
export const getCiscoVpnInterfaceGreFeatureTemplate: typeof import("./getCiscoVpnInterfaceGreFeatureTemplate").getCiscoVpnInterfaceGreFeatureTemplate = null as any;
export const getCiscoVpnInterfaceGreFeatureTemplateOutput: typeof import("./getCiscoVpnInterfaceGreFeatureTemplate").getCiscoVpnInterfaceGreFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnInterfaceGreFeatureTemplate","getCiscoVpnInterfaceGreFeatureTemplateOutput"], () => require("./getCiscoVpnInterfaceGreFeatureTemplate"));

export { GetCiscoVpnInterfaceIpsecFeatureTemplateArgs, GetCiscoVpnInterfaceIpsecFeatureTemplateResult, GetCiscoVpnInterfaceIpsecFeatureTemplateOutputArgs } from "./getCiscoVpnInterfaceIpsecFeatureTemplate";
export const getCiscoVpnInterfaceIpsecFeatureTemplate: typeof import("./getCiscoVpnInterfaceIpsecFeatureTemplate").getCiscoVpnInterfaceIpsecFeatureTemplate = null as any;
export const getCiscoVpnInterfaceIpsecFeatureTemplateOutput: typeof import("./getCiscoVpnInterfaceIpsecFeatureTemplate").getCiscoVpnInterfaceIpsecFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoVpnInterfaceIpsecFeatureTemplate","getCiscoVpnInterfaceIpsecFeatureTemplateOutput"], () => require("./getCiscoVpnInterfaceIpsecFeatureTemplate"));

export { GetCiscoWirelessLanFeatureTemplateArgs, GetCiscoWirelessLanFeatureTemplateResult, GetCiscoWirelessLanFeatureTemplateOutputArgs } from "./getCiscoWirelessLanFeatureTemplate";
export const getCiscoWirelessLanFeatureTemplate: typeof import("./getCiscoWirelessLanFeatureTemplate").getCiscoWirelessLanFeatureTemplate = null as any;
export const getCiscoWirelessLanFeatureTemplateOutput: typeof import("./getCiscoWirelessLanFeatureTemplate").getCiscoWirelessLanFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCiscoWirelessLanFeatureTemplate","getCiscoWirelessLanFeatureTemplateOutput"], () => require("./getCiscoWirelessLanFeatureTemplate"));

export { GetClassMapPolicyObjectArgs, GetClassMapPolicyObjectResult, GetClassMapPolicyObjectOutputArgs } from "./getClassMapPolicyObject";
export const getClassMapPolicyObject: typeof import("./getClassMapPolicyObject").getClassMapPolicyObject = null as any;
export const getClassMapPolicyObjectOutput: typeof import("./getClassMapPolicyObject").getClassMapPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getClassMapPolicyObject","getClassMapPolicyObjectOutput"], () => require("./getClassMapPolicyObject"));

export { GetCliConfigProfileParcelArgs, GetCliConfigProfileParcelResult, GetCliConfigProfileParcelOutputArgs } from "./getCliConfigProfileParcel";
export const getCliConfigProfileParcel: typeof import("./getCliConfigProfileParcel").getCliConfigProfileParcel = null as any;
export const getCliConfigProfileParcelOutput: typeof import("./getCliConfigProfileParcel").getCliConfigProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getCliConfigProfileParcel","getCliConfigProfileParcelOutput"], () => require("./getCliConfigProfileParcel"));

export { GetCliDeviceTemplateArgs, GetCliDeviceTemplateResult, GetCliDeviceTemplateOutputArgs } from "./getCliDeviceTemplate";
export const getCliDeviceTemplate: typeof import("./getCliDeviceTemplate").getCliDeviceTemplate = null as any;
export const getCliDeviceTemplateOutput: typeof import("./getCliDeviceTemplate").getCliDeviceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCliDeviceTemplate","getCliDeviceTemplateOutput"], () => require("./getCliDeviceTemplate"));

export { GetCliFeatureProfileArgs, GetCliFeatureProfileResult, GetCliFeatureProfileOutputArgs } from "./getCliFeatureProfile";
export const getCliFeatureProfile: typeof import("./getCliFeatureProfile").getCliFeatureProfile = null as any;
export const getCliFeatureProfileOutput: typeof import("./getCliFeatureProfile").getCliFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCliFeatureProfile","getCliFeatureProfileOutput"], () => require("./getCliFeatureProfile"));

export { GetCliTemplateFeatureTemplateArgs, GetCliTemplateFeatureTemplateResult, GetCliTemplateFeatureTemplateOutputArgs } from "./getCliTemplateFeatureTemplate";
export const getCliTemplateFeatureTemplate: typeof import("./getCliTemplateFeatureTemplate").getCliTemplateFeatureTemplate = null as any;
export const getCliTemplateFeatureTemplateOutput: typeof import("./getCliTemplateFeatureTemplate").getCliTemplateFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getCliTemplateFeatureTemplate","getCliTemplateFeatureTemplateOutput"], () => require("./getCliTemplateFeatureTemplate"));

export { GetColorListPolicyObjectArgs, GetColorListPolicyObjectResult, GetColorListPolicyObjectOutputArgs } from "./getColorListPolicyObject";
export const getColorListPolicyObject: typeof import("./getColorListPolicyObject").getColorListPolicyObject = null as any;
export const getColorListPolicyObjectOutput: typeof import("./getColorListPolicyObject").getColorListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getColorListPolicyObject","getColorListPolicyObjectOutput"], () => require("./getColorListPolicyObject"));

export { GetConfigurationGroupArgs, GetConfigurationGroupResult, GetConfigurationGroupOutputArgs } from "./getConfigurationGroup";
export const getConfigurationGroup: typeof import("./getConfigurationGroup").getConfigurationGroup = null as any;
export const getConfigurationGroupOutput: typeof import("./getConfigurationGroup").getConfigurationGroupOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationGroup","getConfigurationGroupOutput"], () => require("./getConfigurationGroup"));

export { GetConfigurationGroupDeviceVariablesArgs, GetConfigurationGroupDeviceVariablesResult, GetConfigurationGroupDeviceVariablesOutputArgs } from "./getConfigurationGroupDeviceVariables";
export const getConfigurationGroupDeviceVariables: typeof import("./getConfigurationGroupDeviceVariables").getConfigurationGroupDeviceVariables = null as any;
export const getConfigurationGroupDeviceVariablesOutput: typeof import("./getConfigurationGroupDeviceVariables").getConfigurationGroupDeviceVariablesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationGroupDeviceVariables","getConfigurationGroupDeviceVariablesOutput"], () => require("./getConfigurationGroupDeviceVariables"));

export { GetConfigurationGroupDevicesArgs, GetConfigurationGroupDevicesResult, GetConfigurationGroupDevicesOutputArgs } from "./getConfigurationGroupDevices";
export const getConfigurationGroupDevices: typeof import("./getConfigurationGroupDevices").getConfigurationGroupDevices = null as any;
export const getConfigurationGroupDevicesOutput: typeof import("./getConfigurationGroupDevices").getConfigurationGroupDevicesOutput = null as any;
utilities.lazyLoad(exports, ["getConfigurationGroupDevices","getConfigurationGroupDevicesOutput"], () => require("./getConfigurationGroupDevices"));

export { GetCustomControlTopologyPolicyDefinitionArgs, GetCustomControlTopologyPolicyDefinitionResult, GetCustomControlTopologyPolicyDefinitionOutputArgs } from "./getCustomControlTopologyPolicyDefinition";
export const getCustomControlTopologyPolicyDefinition: typeof import("./getCustomControlTopologyPolicyDefinition").getCustomControlTopologyPolicyDefinition = null as any;
export const getCustomControlTopologyPolicyDefinitionOutput: typeof import("./getCustomControlTopologyPolicyDefinition").getCustomControlTopologyPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getCustomControlTopologyPolicyDefinition","getCustomControlTopologyPolicyDefinitionOutput"], () => require("./getCustomControlTopologyPolicyDefinition"));

export { GetDataFqdnPrefixListPolicyObjectArgs, GetDataFqdnPrefixListPolicyObjectResult, GetDataFqdnPrefixListPolicyObjectOutputArgs } from "./getDataFqdnPrefixListPolicyObject";
export const getDataFqdnPrefixListPolicyObject: typeof import("./getDataFqdnPrefixListPolicyObject").getDataFqdnPrefixListPolicyObject = null as any;
export const getDataFqdnPrefixListPolicyObjectOutput: typeof import("./getDataFqdnPrefixListPolicyObject").getDataFqdnPrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataFqdnPrefixListPolicyObject","getDataFqdnPrefixListPolicyObjectOutput"], () => require("./getDataFqdnPrefixListPolicyObject"));

export { GetDataIpv4PrefixListPolicyObjectArgs, GetDataIpv4PrefixListPolicyObjectResult, GetDataIpv4PrefixListPolicyObjectOutputArgs } from "./getDataIpv4PrefixListPolicyObject";
export const getDataIpv4PrefixListPolicyObject: typeof import("./getDataIpv4PrefixListPolicyObject").getDataIpv4PrefixListPolicyObject = null as any;
export const getDataIpv4PrefixListPolicyObjectOutput: typeof import("./getDataIpv4PrefixListPolicyObject").getDataIpv4PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataIpv4PrefixListPolicyObject","getDataIpv4PrefixListPolicyObjectOutput"], () => require("./getDataIpv4PrefixListPolicyObject"));

export { GetDataIpv6PrefixListPolicyObjectArgs, GetDataIpv6PrefixListPolicyObjectResult, GetDataIpv6PrefixListPolicyObjectOutputArgs } from "./getDataIpv6PrefixListPolicyObject";
export const getDataIpv6PrefixListPolicyObject: typeof import("./getDataIpv6PrefixListPolicyObject").getDataIpv6PrefixListPolicyObject = null as any;
export const getDataIpv6PrefixListPolicyObjectOutput: typeof import("./getDataIpv6PrefixListPolicyObject").getDataIpv6PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDataIpv6PrefixListPolicyObject","getDataIpv6PrefixListPolicyObjectOutput"], () => require("./getDataIpv6PrefixListPolicyObject"));

export { GetDeviceArgs, GetDeviceResult, GetDeviceOutputArgs } from "./getDevice";
export const getDevice: typeof import("./getDevice").getDevice = null as any;
export const getDeviceOutput: typeof import("./getDevice").getDeviceOutput = null as any;
utilities.lazyLoad(exports, ["getDevice","getDeviceOutput"], () => require("./getDevice"));

export { GetDnsSecurityPolicyDefinitionArgs, GetDnsSecurityPolicyDefinitionResult, GetDnsSecurityPolicyDefinitionOutputArgs } from "./getDnsSecurityPolicyDefinition";
export const getDnsSecurityPolicyDefinition: typeof import("./getDnsSecurityPolicyDefinition").getDnsSecurityPolicyDefinition = null as any;
export const getDnsSecurityPolicyDefinitionOutput: typeof import("./getDnsSecurityPolicyDefinition").getDnsSecurityPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getDnsSecurityPolicyDefinition","getDnsSecurityPolicyDefinitionOutput"], () => require("./getDnsSecurityPolicyDefinition"));

export { GetDomainListPolicyObjectArgs, GetDomainListPolicyObjectResult, GetDomainListPolicyObjectOutputArgs } from "./getDomainListPolicyObject";
export const getDomainListPolicyObject: typeof import("./getDomainListPolicyObject").getDomainListPolicyObject = null as any;
export const getDomainListPolicyObjectOutput: typeof import("./getDomainListPolicyObject").getDomainListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getDomainListPolicyObject","getDomainListPolicyObjectOutput"], () => require("./getDomainListPolicyObject"));

export { GetEigrpFeatureTemplateArgs, GetEigrpFeatureTemplateResult, GetEigrpFeatureTemplateOutputArgs } from "./getEigrpFeatureTemplate";
export const getEigrpFeatureTemplate: typeof import("./getEigrpFeatureTemplate").getEigrpFeatureTemplate = null as any;
export const getEigrpFeatureTemplateOutput: typeof import("./getEigrpFeatureTemplate").getEigrpFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getEigrpFeatureTemplate","getEigrpFeatureTemplateOutput"], () => require("./getEigrpFeatureTemplate"));

export { GetExpandedCommunityListPolicyObjectArgs, GetExpandedCommunityListPolicyObjectResult, GetExpandedCommunityListPolicyObjectOutputArgs } from "./getExpandedCommunityListPolicyObject";
export const getExpandedCommunityListPolicyObject: typeof import("./getExpandedCommunityListPolicyObject").getExpandedCommunityListPolicyObject = null as any;
export const getExpandedCommunityListPolicyObjectOutput: typeof import("./getExpandedCommunityListPolicyObject").getExpandedCommunityListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getExpandedCommunityListPolicyObject","getExpandedCommunityListPolicyObjectOutput"], () => require("./getExpandedCommunityListPolicyObject"));

export { GetExtendedCommunityListPolicyObjectArgs, GetExtendedCommunityListPolicyObjectResult, GetExtendedCommunityListPolicyObjectOutputArgs } from "./getExtendedCommunityListPolicyObject";
export const getExtendedCommunityListPolicyObject: typeof import("./getExtendedCommunityListPolicyObject").getExtendedCommunityListPolicyObject = null as any;
export const getExtendedCommunityListPolicyObjectOutput: typeof import("./getExtendedCommunityListPolicyObject").getExtendedCommunityListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getExtendedCommunityListPolicyObject","getExtendedCommunityListPolicyObjectOutput"], () => require("./getExtendedCommunityListPolicyObject"));

export { GetFeatureDeviceTemplateArgs, GetFeatureDeviceTemplateResult, GetFeatureDeviceTemplateOutputArgs } from "./getFeatureDeviceTemplate";
export const getFeatureDeviceTemplate: typeof import("./getFeatureDeviceTemplate").getFeatureDeviceTemplate = null as any;
export const getFeatureDeviceTemplateOutput: typeof import("./getFeatureDeviceTemplate").getFeatureDeviceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getFeatureDeviceTemplate","getFeatureDeviceTemplateOutput"], () => require("./getFeatureDeviceTemplate"));

export { GetGeoLocationListPolicyObjectArgs, GetGeoLocationListPolicyObjectResult, GetGeoLocationListPolicyObjectOutputArgs } from "./getGeoLocationListPolicyObject";
export const getGeoLocationListPolicyObject: typeof import("./getGeoLocationListPolicyObject").getGeoLocationListPolicyObject = null as any;
export const getGeoLocationListPolicyObjectOutput: typeof import("./getGeoLocationListPolicyObject").getGeoLocationListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getGeoLocationListPolicyObject","getGeoLocationListPolicyObjectOutput"], () => require("./getGeoLocationListPolicyObject"));

export { GetGpsFeatureTemplateArgs, GetGpsFeatureTemplateResult, GetGpsFeatureTemplateOutputArgs } from "./getGpsFeatureTemplate";
export const getGpsFeatureTemplate: typeof import("./getGpsFeatureTemplate").getGpsFeatureTemplate = null as any;
export const getGpsFeatureTemplateOutput: typeof import("./getGpsFeatureTemplate").getGpsFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getGpsFeatureTemplate","getGpsFeatureTemplateOutput"], () => require("./getGpsFeatureTemplate"));

export { GetHubAndSpokeTopologyPolicyDefinitionArgs, GetHubAndSpokeTopologyPolicyDefinitionResult, GetHubAndSpokeTopologyPolicyDefinitionOutputArgs } from "./getHubAndSpokeTopologyPolicyDefinition";
export const getHubAndSpokeTopologyPolicyDefinition: typeof import("./getHubAndSpokeTopologyPolicyDefinition").getHubAndSpokeTopologyPolicyDefinition = null as any;
export const getHubAndSpokeTopologyPolicyDefinitionOutput: typeof import("./getHubAndSpokeTopologyPolicyDefinition").getHubAndSpokeTopologyPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getHubAndSpokeTopologyPolicyDefinition","getHubAndSpokeTopologyPolicyDefinitionOutput"], () => require("./getHubAndSpokeTopologyPolicyDefinition"));

export { GetIntrusionPreventionPolicyDefinitionArgs, GetIntrusionPreventionPolicyDefinitionResult, GetIntrusionPreventionPolicyDefinitionOutputArgs } from "./getIntrusionPreventionPolicyDefinition";
export const getIntrusionPreventionPolicyDefinition: typeof import("./getIntrusionPreventionPolicyDefinition").getIntrusionPreventionPolicyDefinition = null as any;
export const getIntrusionPreventionPolicyDefinitionOutput: typeof import("./getIntrusionPreventionPolicyDefinition").getIntrusionPreventionPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIntrusionPreventionPolicyDefinition","getIntrusionPreventionPolicyDefinitionOutput"], () => require("./getIntrusionPreventionPolicyDefinition"));

export { GetIpsSignatureListPolicyObjectArgs, GetIpsSignatureListPolicyObjectResult, GetIpsSignatureListPolicyObjectOutputArgs } from "./getIpsSignatureListPolicyObject";
export const getIpsSignatureListPolicyObject: typeof import("./getIpsSignatureListPolicyObject").getIpsSignatureListPolicyObject = null as any;
export const getIpsSignatureListPolicyObjectOutput: typeof import("./getIpsSignatureListPolicyObject").getIpsSignatureListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getIpsSignatureListPolicyObject","getIpsSignatureListPolicyObjectOutput"], () => require("./getIpsSignatureListPolicyObject"));

export { GetIpv4AclPolicyDefinitionArgs, GetIpv4AclPolicyDefinitionResult, GetIpv4AclPolicyDefinitionOutputArgs } from "./getIpv4AclPolicyDefinition";
export const getIpv4AclPolicyDefinition: typeof import("./getIpv4AclPolicyDefinition").getIpv4AclPolicyDefinition = null as any;
export const getIpv4AclPolicyDefinitionOutput: typeof import("./getIpv4AclPolicyDefinition").getIpv4AclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4AclPolicyDefinition","getIpv4AclPolicyDefinitionOutput"], () => require("./getIpv4AclPolicyDefinition"));

export { GetIpv4DeviceAclPolicyDefinitionArgs, GetIpv4DeviceAclPolicyDefinitionResult, GetIpv4DeviceAclPolicyDefinitionOutputArgs } from "./getIpv4DeviceAclPolicyDefinition";
export const getIpv4DeviceAclPolicyDefinition: typeof import("./getIpv4DeviceAclPolicyDefinition").getIpv4DeviceAclPolicyDefinition = null as any;
export const getIpv4DeviceAclPolicyDefinitionOutput: typeof import("./getIpv4DeviceAclPolicyDefinition").getIpv4DeviceAclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4DeviceAclPolicyDefinition","getIpv4DeviceAclPolicyDefinitionOutput"], () => require("./getIpv4DeviceAclPolicyDefinition"));

export { GetIpv4PrefixListPolicyObjectArgs, GetIpv4PrefixListPolicyObjectResult, GetIpv4PrefixListPolicyObjectOutputArgs } from "./getIpv4PrefixListPolicyObject";
export const getIpv4PrefixListPolicyObject: typeof import("./getIpv4PrefixListPolicyObject").getIpv4PrefixListPolicyObject = null as any;
export const getIpv4PrefixListPolicyObjectOutput: typeof import("./getIpv4PrefixListPolicyObject").getIpv4PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getIpv4PrefixListPolicyObject","getIpv4PrefixListPolicyObjectOutput"], () => require("./getIpv4PrefixListPolicyObject"));

export { GetIpv6AclPolicyDefinitionArgs, GetIpv6AclPolicyDefinitionResult, GetIpv6AclPolicyDefinitionOutputArgs } from "./getIpv6AclPolicyDefinition";
export const getIpv6AclPolicyDefinition: typeof import("./getIpv6AclPolicyDefinition").getIpv6AclPolicyDefinition = null as any;
export const getIpv6AclPolicyDefinitionOutput: typeof import("./getIpv6AclPolicyDefinition").getIpv6AclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6AclPolicyDefinition","getIpv6AclPolicyDefinitionOutput"], () => require("./getIpv6AclPolicyDefinition"));

export { GetIpv6DeviceAclPolicyDefinitionArgs, GetIpv6DeviceAclPolicyDefinitionResult, GetIpv6DeviceAclPolicyDefinitionOutputArgs } from "./getIpv6DeviceAclPolicyDefinition";
export const getIpv6DeviceAclPolicyDefinition: typeof import("./getIpv6DeviceAclPolicyDefinition").getIpv6DeviceAclPolicyDefinition = null as any;
export const getIpv6DeviceAclPolicyDefinitionOutput: typeof import("./getIpv6DeviceAclPolicyDefinition").getIpv6DeviceAclPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6DeviceAclPolicyDefinition","getIpv6DeviceAclPolicyDefinitionOutput"], () => require("./getIpv6DeviceAclPolicyDefinition"));

export { GetIpv6PrefixListPolicyObjectArgs, GetIpv6PrefixListPolicyObjectResult, GetIpv6PrefixListPolicyObjectOutputArgs } from "./getIpv6PrefixListPolicyObject";
export const getIpv6PrefixListPolicyObject: typeof import("./getIpv6PrefixListPolicyObject").getIpv6PrefixListPolicyObject = null as any;
export const getIpv6PrefixListPolicyObjectOutput: typeof import("./getIpv6PrefixListPolicyObject").getIpv6PrefixListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getIpv6PrefixListPolicyObject","getIpv6PrefixListPolicyObjectOutput"], () => require("./getIpv6PrefixListPolicyObject"));

export { GetLocalApplicationListPolicyObjectArgs, GetLocalApplicationListPolicyObjectResult, GetLocalApplicationListPolicyObjectOutputArgs } from "./getLocalApplicationListPolicyObject";
export const getLocalApplicationListPolicyObject: typeof import("./getLocalApplicationListPolicyObject").getLocalApplicationListPolicyObject = null as any;
export const getLocalApplicationListPolicyObjectOutput: typeof import("./getLocalApplicationListPolicyObject").getLocalApplicationListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getLocalApplicationListPolicyObject","getLocalApplicationListPolicyObjectOutput"], () => require("./getLocalApplicationListPolicyObject"));

export { GetLocalizedPolicyArgs, GetLocalizedPolicyResult, GetLocalizedPolicyOutputArgs } from "./getLocalizedPolicy";
export const getLocalizedPolicy: typeof import("./getLocalizedPolicy").getLocalizedPolicy = null as any;
export const getLocalizedPolicyOutput: typeof import("./getLocalizedPolicy").getLocalizedPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getLocalizedPolicy","getLocalizedPolicyOutput"], () => require("./getLocalizedPolicy"));

export { GetMeshTopologyPolicyDefinitionArgs, GetMeshTopologyPolicyDefinitionResult, GetMeshTopologyPolicyDefinitionOutputArgs } from "./getMeshTopologyPolicyDefinition";
export const getMeshTopologyPolicyDefinition: typeof import("./getMeshTopologyPolicyDefinition").getMeshTopologyPolicyDefinition = null as any;
export const getMeshTopologyPolicyDefinitionOutput: typeof import("./getMeshTopologyPolicyDefinition").getMeshTopologyPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getMeshTopologyPolicyDefinition","getMeshTopologyPolicyDefinitionOutput"], () => require("./getMeshTopologyPolicyDefinition"));

export { GetMirrorPolicyObjectArgs, GetMirrorPolicyObjectResult, GetMirrorPolicyObjectOutputArgs } from "./getMirrorPolicyObject";
export const getMirrorPolicyObject: typeof import("./getMirrorPolicyObject").getMirrorPolicyObject = null as any;
export const getMirrorPolicyObjectOutput: typeof import("./getMirrorPolicyObject").getMirrorPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getMirrorPolicyObject","getMirrorPolicyObjectOutput"], () => require("./getMirrorPolicyObject"));

export { GetObjectGroupPolicyDefinitionArgs, GetObjectGroupPolicyDefinitionResult, GetObjectGroupPolicyDefinitionOutputArgs } from "./getObjectGroupPolicyDefinition";
export const getObjectGroupPolicyDefinition: typeof import("./getObjectGroupPolicyDefinition").getObjectGroupPolicyDefinition = null as any;
export const getObjectGroupPolicyDefinitionOutput: typeof import("./getObjectGroupPolicyDefinition").getObjectGroupPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getObjectGroupPolicyDefinition","getObjectGroupPolicyDefinitionOutput"], () => require("./getObjectGroupPolicyDefinition"));

export { GetPolicerPolicyObjectArgs, GetPolicerPolicyObjectResult, GetPolicerPolicyObjectOutputArgs } from "./getPolicerPolicyObject";
export const getPolicerPolicyObject: typeof import("./getPolicerPolicyObject").getPolicerPolicyObject = null as any;
export const getPolicerPolicyObjectOutput: typeof import("./getPolicerPolicyObject").getPolicerPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getPolicerPolicyObject","getPolicerPolicyObjectOutput"], () => require("./getPolicerPolicyObject"));

export { GetPortListPolicyObjectArgs, GetPortListPolicyObjectResult, GetPortListPolicyObjectOutputArgs } from "./getPortListPolicyObject";
export const getPortListPolicyObject: typeof import("./getPortListPolicyObject").getPortListPolicyObject = null as any;
export const getPortListPolicyObjectOutput: typeof import("./getPortListPolicyObject").getPortListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getPortListPolicyObject","getPortListPolicyObjectOutput"], () => require("./getPortListPolicyObject"));

export { GetPreferredColorGroupPolicyObjectArgs, GetPreferredColorGroupPolicyObjectResult, GetPreferredColorGroupPolicyObjectOutputArgs } from "./getPreferredColorGroupPolicyObject";
export const getPreferredColorGroupPolicyObject: typeof import("./getPreferredColorGroupPolicyObject").getPreferredColorGroupPolicyObject = null as any;
export const getPreferredColorGroupPolicyObjectOutput: typeof import("./getPreferredColorGroupPolicyObject").getPreferredColorGroupPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getPreferredColorGroupPolicyObject","getPreferredColorGroupPolicyObjectOutput"], () => require("./getPreferredColorGroupPolicyObject"));

export { GetProtocolListPolicyObjectArgs, GetProtocolListPolicyObjectResult, GetProtocolListPolicyObjectOutputArgs } from "./getProtocolListPolicyObject";
export const getProtocolListPolicyObject: typeof import("./getProtocolListPolicyObject").getProtocolListPolicyObject = null as any;
export const getProtocolListPolicyObjectOutput: typeof import("./getProtocolListPolicyObject").getProtocolListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getProtocolListPolicyObject","getProtocolListPolicyObjectOutput"], () => require("./getProtocolListPolicyObject"));

export { GetQosMapPolicyDefinitionArgs, GetQosMapPolicyDefinitionResult, GetQosMapPolicyDefinitionOutputArgs } from "./getQosMapPolicyDefinition";
export const getQosMapPolicyDefinition: typeof import("./getQosMapPolicyDefinition").getQosMapPolicyDefinition = null as any;
export const getQosMapPolicyDefinitionOutput: typeof import("./getQosMapPolicyDefinition").getQosMapPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getQosMapPolicyDefinition","getQosMapPolicyDefinitionOutput"], () => require("./getQosMapPolicyDefinition"));

export { GetRegionListPolicyObjectArgs, GetRegionListPolicyObjectResult, GetRegionListPolicyObjectOutputArgs } from "./getRegionListPolicyObject";
export const getRegionListPolicyObject: typeof import("./getRegionListPolicyObject").getRegionListPolicyObject = null as any;
export const getRegionListPolicyObjectOutput: typeof import("./getRegionListPolicyObject").getRegionListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getRegionListPolicyObject","getRegionListPolicyObjectOutput"], () => require("./getRegionListPolicyObject"));

export { GetRewriteRulePolicyDefinitionArgs, GetRewriteRulePolicyDefinitionResult, GetRewriteRulePolicyDefinitionOutputArgs } from "./getRewriteRulePolicyDefinition";
export const getRewriteRulePolicyDefinition: typeof import("./getRewriteRulePolicyDefinition").getRewriteRulePolicyDefinition = null as any;
export const getRewriteRulePolicyDefinitionOutput: typeof import("./getRewriteRulePolicyDefinition").getRewriteRulePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRewriteRulePolicyDefinition","getRewriteRulePolicyDefinitionOutput"], () => require("./getRewriteRulePolicyDefinition"));

export { GetRoutePolicyDefinitionArgs, GetRoutePolicyDefinitionResult, GetRoutePolicyDefinitionOutputArgs } from "./getRoutePolicyDefinition";
export const getRoutePolicyDefinition: typeof import("./getRoutePolicyDefinition").getRoutePolicyDefinition = null as any;
export const getRoutePolicyDefinitionOutput: typeof import("./getRoutePolicyDefinition").getRoutePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRoutePolicyDefinition","getRoutePolicyDefinitionOutput"], () => require("./getRoutePolicyDefinition"));

export { GetRuleSetPolicyDefinitionArgs, GetRuleSetPolicyDefinitionResult, GetRuleSetPolicyDefinitionOutputArgs } from "./getRuleSetPolicyDefinition";
export const getRuleSetPolicyDefinition: typeof import("./getRuleSetPolicyDefinition").getRuleSetPolicyDefinition = null as any;
export const getRuleSetPolicyDefinitionOutput: typeof import("./getRuleSetPolicyDefinition").getRuleSetPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getRuleSetPolicyDefinition","getRuleSetPolicyDefinitionOutput"], () => require("./getRuleSetPolicyDefinition"));

export { GetSecurityAppHostingFeatureTemplateArgs, GetSecurityAppHostingFeatureTemplateResult, GetSecurityAppHostingFeatureTemplateOutputArgs } from "./getSecurityAppHostingFeatureTemplate";
export const getSecurityAppHostingFeatureTemplate: typeof import("./getSecurityAppHostingFeatureTemplate").getSecurityAppHostingFeatureTemplate = null as any;
export const getSecurityAppHostingFeatureTemplateOutput: typeof import("./getSecurityAppHostingFeatureTemplate").getSecurityAppHostingFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAppHostingFeatureTemplate","getSecurityAppHostingFeatureTemplateOutput"], () => require("./getSecurityAppHostingFeatureTemplate"));

export { GetSecurityPolicyArgs, GetSecurityPolicyResult, GetSecurityPolicyOutputArgs } from "./getSecurityPolicy";
export const getSecurityPolicy: typeof import("./getSecurityPolicy").getSecurityPolicy = null as any;
export const getSecurityPolicyOutput: typeof import("./getSecurityPolicy").getSecurityPolicyOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityPolicy","getSecurityPolicyOutput"], () => require("./getSecurityPolicy"));

export { GetServiceFeatureProfileArgs, GetServiceFeatureProfileResult, GetServiceFeatureProfileOutputArgs } from "./getServiceFeatureProfile";
export const getServiceFeatureProfile: typeof import("./getServiceFeatureProfile").getServiceFeatureProfile = null as any;
export const getServiceFeatureProfileOutput: typeof import("./getServiceFeatureProfile").getServiceFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getServiceFeatureProfile","getServiceFeatureProfileOutput"], () => require("./getServiceFeatureProfile"));

export { GetServiceLanVpnInterfaceEthernetProfileParcelArgs, GetServiceLanVpnInterfaceEthernetProfileParcelResult, GetServiceLanVpnInterfaceEthernetProfileParcelOutputArgs } from "./getServiceLanVpnInterfaceEthernetProfileParcel";
export const getServiceLanVpnInterfaceEthernetProfileParcel: typeof import("./getServiceLanVpnInterfaceEthernetProfileParcel").getServiceLanVpnInterfaceEthernetProfileParcel = null as any;
export const getServiceLanVpnInterfaceEthernetProfileParcelOutput: typeof import("./getServiceLanVpnInterfaceEthernetProfileParcel").getServiceLanVpnInterfaceEthernetProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnInterfaceEthernetProfileParcel","getServiceLanVpnInterfaceEthernetProfileParcelOutput"], () => require("./getServiceLanVpnInterfaceEthernetProfileParcel"));

export { GetServiceLanVpnProfileParcelArgs, GetServiceLanVpnProfileParcelResult, GetServiceLanVpnProfileParcelOutputArgs } from "./getServiceLanVpnProfileParcel";
export const getServiceLanVpnProfileParcel: typeof import("./getServiceLanVpnProfileParcel").getServiceLanVpnProfileParcel = null as any;
export const getServiceLanVpnProfileParcelOutput: typeof import("./getServiceLanVpnProfileParcel").getServiceLanVpnProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getServiceLanVpnProfileParcel","getServiceLanVpnProfileParcelOutput"], () => require("./getServiceLanVpnProfileParcel"));

export { GetServiceTrackerProfileParcelArgs, GetServiceTrackerProfileParcelResult, GetServiceTrackerProfileParcelOutputArgs } from "./getServiceTrackerProfileParcel";
export const getServiceTrackerProfileParcel: typeof import("./getServiceTrackerProfileParcel").getServiceTrackerProfileParcel = null as any;
export const getServiceTrackerProfileParcelOutput: typeof import("./getServiceTrackerProfileParcel").getServiceTrackerProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTrackerProfileParcel","getServiceTrackerProfileParcelOutput"], () => require("./getServiceTrackerProfileParcel"));

export { GetSiteListPolicyObjectArgs, GetSiteListPolicyObjectResult, GetSiteListPolicyObjectOutputArgs } from "./getSiteListPolicyObject";
export const getSiteListPolicyObject: typeof import("./getSiteListPolicyObject").getSiteListPolicyObject = null as any;
export const getSiteListPolicyObjectOutput: typeof import("./getSiteListPolicyObject").getSiteListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getSiteListPolicyObject","getSiteListPolicyObjectOutput"], () => require("./getSiteListPolicyObject"));

export { GetSlaClassPolicyObjectArgs, GetSlaClassPolicyObjectResult, GetSlaClassPolicyObjectOutputArgs } from "./getSlaClassPolicyObject";
export const getSlaClassPolicyObject: typeof import("./getSlaClassPolicyObject").getSlaClassPolicyObject = null as any;
export const getSlaClassPolicyObjectOutput: typeof import("./getSlaClassPolicyObject").getSlaClassPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getSlaClassPolicyObject","getSlaClassPolicyObjectOutput"], () => require("./getSlaClassPolicyObject"));

export { GetStandardCommunityListPolicyObjectArgs, GetStandardCommunityListPolicyObjectResult, GetStandardCommunityListPolicyObjectOutputArgs } from "./getStandardCommunityListPolicyObject";
export const getStandardCommunityListPolicyObject: typeof import("./getStandardCommunityListPolicyObject").getStandardCommunityListPolicyObject = null as any;
export const getStandardCommunityListPolicyObjectOutput: typeof import("./getStandardCommunityListPolicyObject").getStandardCommunityListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getStandardCommunityListPolicyObject","getStandardCommunityListPolicyObjectOutput"], () => require("./getStandardCommunityListPolicyObject"));

export { GetSwitchportFeatureTemplateArgs, GetSwitchportFeatureTemplateResult, GetSwitchportFeatureTemplateOutputArgs } from "./getSwitchportFeatureTemplate";
export const getSwitchportFeatureTemplate: typeof import("./getSwitchportFeatureTemplate").getSwitchportFeatureTemplate = null as any;
export const getSwitchportFeatureTemplateOutput: typeof import("./getSwitchportFeatureTemplate").getSwitchportFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getSwitchportFeatureTemplate","getSwitchportFeatureTemplateOutput"], () => require("./getSwitchportFeatureTemplate"));

export { GetSystemAaaProfileParcelArgs, GetSystemAaaProfileParcelResult, GetSystemAaaProfileParcelOutputArgs } from "./getSystemAaaProfileParcel";
export const getSystemAaaProfileParcel: typeof import("./getSystemAaaProfileParcel").getSystemAaaProfileParcel = null as any;
export const getSystemAaaProfileParcelOutput: typeof import("./getSystemAaaProfileParcel").getSystemAaaProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemAaaProfileParcel","getSystemAaaProfileParcelOutput"], () => require("./getSystemAaaProfileParcel"));

export { GetSystemBannerProfileParcelArgs, GetSystemBannerProfileParcelResult, GetSystemBannerProfileParcelOutputArgs } from "./getSystemBannerProfileParcel";
export const getSystemBannerProfileParcel: typeof import("./getSystemBannerProfileParcel").getSystemBannerProfileParcel = null as any;
export const getSystemBannerProfileParcelOutput: typeof import("./getSystemBannerProfileParcel").getSystemBannerProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBannerProfileParcel","getSystemBannerProfileParcelOutput"], () => require("./getSystemBannerProfileParcel"));

export { GetSystemBasicProfileParcelArgs, GetSystemBasicProfileParcelResult, GetSystemBasicProfileParcelOutputArgs } from "./getSystemBasicProfileParcel";
export const getSystemBasicProfileParcel: typeof import("./getSystemBasicProfileParcel").getSystemBasicProfileParcel = null as any;
export const getSystemBasicProfileParcelOutput: typeof import("./getSystemBasicProfileParcel").getSystemBasicProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBasicProfileParcel","getSystemBasicProfileParcelOutput"], () => require("./getSystemBasicProfileParcel"));

export { GetSystemBfdProfileParcelArgs, GetSystemBfdProfileParcelResult, GetSystemBfdProfileParcelOutputArgs } from "./getSystemBfdProfileParcel";
export const getSystemBfdProfileParcel: typeof import("./getSystemBfdProfileParcel").getSystemBfdProfileParcel = null as any;
export const getSystemBfdProfileParcelOutput: typeof import("./getSystemBfdProfileParcel").getSystemBfdProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBfdProfileParcel","getSystemBfdProfileParcelOutput"], () => require("./getSystemBfdProfileParcel"));

export { GetSystemFeatureProfileArgs, GetSystemFeatureProfileResult, GetSystemFeatureProfileOutputArgs } from "./getSystemFeatureProfile";
export const getSystemFeatureProfile: typeof import("./getSystemFeatureProfile").getSystemFeatureProfile = null as any;
export const getSystemFeatureProfileOutput: typeof import("./getSystemFeatureProfile").getSystemFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFeatureProfile","getSystemFeatureProfileOutput"], () => require("./getSystemFeatureProfile"));

export { GetSystemFlexiblePortSpeedProfileParcelArgs, GetSystemFlexiblePortSpeedProfileParcelResult, GetSystemFlexiblePortSpeedProfileParcelOutputArgs } from "./getSystemFlexiblePortSpeedProfileParcel";
export const getSystemFlexiblePortSpeedProfileParcel: typeof import("./getSystemFlexiblePortSpeedProfileParcel").getSystemFlexiblePortSpeedProfileParcel = null as any;
export const getSystemFlexiblePortSpeedProfileParcelOutput: typeof import("./getSystemFlexiblePortSpeedProfileParcel").getSystemFlexiblePortSpeedProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemFlexiblePortSpeedProfileParcel","getSystemFlexiblePortSpeedProfileParcelOutput"], () => require("./getSystemFlexiblePortSpeedProfileParcel"));

export { GetSystemGlobalProfileParcelArgs, GetSystemGlobalProfileParcelResult, GetSystemGlobalProfileParcelOutputArgs } from "./getSystemGlobalProfileParcel";
export const getSystemGlobalProfileParcel: typeof import("./getSystemGlobalProfileParcel").getSystemGlobalProfileParcel = null as any;
export const getSystemGlobalProfileParcelOutput: typeof import("./getSystemGlobalProfileParcel").getSystemGlobalProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemGlobalProfileParcel","getSystemGlobalProfileParcelOutput"], () => require("./getSystemGlobalProfileParcel"));

export { GetSystemLoggingProfileParcelArgs, GetSystemLoggingProfileParcelResult, GetSystemLoggingProfileParcelOutputArgs } from "./getSystemLoggingProfileParcel";
export const getSystemLoggingProfileParcel: typeof import("./getSystemLoggingProfileParcel").getSystemLoggingProfileParcel = null as any;
export const getSystemLoggingProfileParcelOutput: typeof import("./getSystemLoggingProfileParcel").getSystemLoggingProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemLoggingProfileParcel","getSystemLoggingProfileParcelOutput"], () => require("./getSystemLoggingProfileParcel"));

export { GetSystemMrfProfileParcelArgs, GetSystemMrfProfileParcelResult, GetSystemMrfProfileParcelOutputArgs } from "./getSystemMrfProfileParcel";
export const getSystemMrfProfileParcel: typeof import("./getSystemMrfProfileParcel").getSystemMrfProfileParcel = null as any;
export const getSystemMrfProfileParcelOutput: typeof import("./getSystemMrfProfileParcel").getSystemMrfProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemMrfProfileParcel","getSystemMrfProfileParcelOutput"], () => require("./getSystemMrfProfileParcel"));

export { GetSystemNtpProfileParcelArgs, GetSystemNtpProfileParcelResult, GetSystemNtpProfileParcelOutputArgs } from "./getSystemNtpProfileParcel";
export const getSystemNtpProfileParcel: typeof import("./getSystemNtpProfileParcel").getSystemNtpProfileParcel = null as any;
export const getSystemNtpProfileParcelOutput: typeof import("./getSystemNtpProfileParcel").getSystemNtpProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemNtpProfileParcel","getSystemNtpProfileParcelOutput"], () => require("./getSystemNtpProfileParcel"));

export { GetSystemOmpProfileParcelArgs, GetSystemOmpProfileParcelResult, GetSystemOmpProfileParcelOutputArgs } from "./getSystemOmpProfileParcel";
export const getSystemOmpProfileParcel: typeof import("./getSystemOmpProfileParcel").getSystemOmpProfileParcel = null as any;
export const getSystemOmpProfileParcelOutput: typeof import("./getSystemOmpProfileParcel").getSystemOmpProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemOmpProfileParcel","getSystemOmpProfileParcelOutput"], () => require("./getSystemOmpProfileParcel"));

export { GetSystemPerformanceMonitoringProfileParcelArgs, GetSystemPerformanceMonitoringProfileParcelResult, GetSystemPerformanceMonitoringProfileParcelOutputArgs } from "./getSystemPerformanceMonitoringProfileParcel";
export const getSystemPerformanceMonitoringProfileParcel: typeof import("./getSystemPerformanceMonitoringProfileParcel").getSystemPerformanceMonitoringProfileParcel = null as any;
export const getSystemPerformanceMonitoringProfileParcelOutput: typeof import("./getSystemPerformanceMonitoringProfileParcel").getSystemPerformanceMonitoringProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemPerformanceMonitoringProfileParcel","getSystemPerformanceMonitoringProfileParcelOutput"], () => require("./getSystemPerformanceMonitoringProfileParcel"));

export { GetSystemRemoteAccessProfileParcelArgs, GetSystemRemoteAccessProfileParcelResult, GetSystemRemoteAccessProfileParcelOutputArgs } from "./getSystemRemoteAccessProfileParcel";
export const getSystemRemoteAccessProfileParcel: typeof import("./getSystemRemoteAccessProfileParcel").getSystemRemoteAccessProfileParcel = null as any;
export const getSystemRemoteAccessProfileParcelOutput: typeof import("./getSystemRemoteAccessProfileParcel").getSystemRemoteAccessProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemRemoteAccessProfileParcel","getSystemRemoteAccessProfileParcelOutput"], () => require("./getSystemRemoteAccessProfileParcel"));

export { GetSystemSecurityProfileParcelArgs, GetSystemSecurityProfileParcelResult, GetSystemSecurityProfileParcelOutputArgs } from "./getSystemSecurityProfileParcel";
export const getSystemSecurityProfileParcel: typeof import("./getSystemSecurityProfileParcel").getSystemSecurityProfileParcel = null as any;
export const getSystemSecurityProfileParcelOutput: typeof import("./getSystemSecurityProfileParcel").getSystemSecurityProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSecurityProfileParcel","getSystemSecurityProfileParcelOutput"], () => require("./getSystemSecurityProfileParcel"));

export { GetSystemSnmpProfileParcelArgs, GetSystemSnmpProfileParcelResult, GetSystemSnmpProfileParcelOutputArgs } from "./getSystemSnmpProfileParcel";
export const getSystemSnmpProfileParcel: typeof import("./getSystemSnmpProfileParcel").getSystemSnmpProfileParcel = null as any;
export const getSystemSnmpProfileParcelOutput: typeof import("./getSystemSnmpProfileParcel").getSystemSnmpProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getSystemSnmpProfileParcel","getSystemSnmpProfileParcelOutput"], () => require("./getSystemSnmpProfileParcel"));

export { GetTlocListPolicyObjectArgs, GetTlocListPolicyObjectResult, GetTlocListPolicyObjectOutputArgs } from "./getTlocListPolicyObject";
export const getTlocListPolicyObject: typeof import("./getTlocListPolicyObject").getTlocListPolicyObject = null as any;
export const getTlocListPolicyObjectOutput: typeof import("./getTlocListPolicyObject").getTlocListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getTlocListPolicyObject","getTlocListPolicyObjectOutput"], () => require("./getTlocListPolicyObject"));

export { GetTlsSslDecryptionPolicyDefinitionArgs, GetTlsSslDecryptionPolicyDefinitionResult, GetTlsSslDecryptionPolicyDefinitionOutputArgs } from "./getTlsSslDecryptionPolicyDefinition";
export const getTlsSslDecryptionPolicyDefinition: typeof import("./getTlsSslDecryptionPolicyDefinition").getTlsSslDecryptionPolicyDefinition = null as any;
export const getTlsSslDecryptionPolicyDefinitionOutput: typeof import("./getTlsSslDecryptionPolicyDefinition").getTlsSslDecryptionPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTlsSslDecryptionPolicyDefinition","getTlsSslDecryptionPolicyDefinitionOutput"], () => require("./getTlsSslDecryptionPolicyDefinition"));

export { GetTlsSslProfilePolicyDefinitionArgs, GetTlsSslProfilePolicyDefinitionResult, GetTlsSslProfilePolicyDefinitionOutputArgs } from "./getTlsSslProfilePolicyDefinition";
export const getTlsSslProfilePolicyDefinition: typeof import("./getTlsSslProfilePolicyDefinition").getTlsSslProfilePolicyDefinition = null as any;
export const getTlsSslProfilePolicyDefinitionOutput: typeof import("./getTlsSslProfilePolicyDefinition").getTlsSslProfilePolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTlsSslProfilePolicyDefinition","getTlsSslProfilePolicyDefinitionOutput"], () => require("./getTlsSslProfilePolicyDefinition"));

export { GetTrafficDataPolicyDefinitionArgs, GetTrafficDataPolicyDefinitionResult, GetTrafficDataPolicyDefinitionOutputArgs } from "./getTrafficDataPolicyDefinition";
export const getTrafficDataPolicyDefinition: typeof import("./getTrafficDataPolicyDefinition").getTrafficDataPolicyDefinition = null as any;
export const getTrafficDataPolicyDefinitionOutput: typeof import("./getTrafficDataPolicyDefinition").getTrafficDataPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getTrafficDataPolicyDefinition","getTrafficDataPolicyDefinitionOutput"], () => require("./getTrafficDataPolicyDefinition"));

export { GetTransportFeatureProfileArgs, GetTransportFeatureProfileResult, GetTransportFeatureProfileOutputArgs } from "./getTransportFeatureProfile";
export const getTransportFeatureProfile: typeof import("./getTransportFeatureProfile").getTransportFeatureProfile = null as any;
export const getTransportFeatureProfileOutput: typeof import("./getTransportFeatureProfile").getTransportFeatureProfileOutput = null as any;
utilities.lazyLoad(exports, ["getTransportFeatureProfile","getTransportFeatureProfileOutput"], () => require("./getTransportFeatureProfile"));

export { GetTransportIpv6TrackerProfileParcelArgs, GetTransportIpv6TrackerProfileParcelResult, GetTransportIpv6TrackerProfileParcelOutputArgs } from "./getTransportIpv6TrackerProfileParcel";
export const getTransportIpv6TrackerProfileParcel: typeof import("./getTransportIpv6TrackerProfileParcel").getTransportIpv6TrackerProfileParcel = null as any;
export const getTransportIpv6TrackerProfileParcelOutput: typeof import("./getTransportIpv6TrackerProfileParcel").getTransportIpv6TrackerProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getTransportIpv6TrackerProfileParcel","getTransportIpv6TrackerProfileParcelOutput"], () => require("./getTransportIpv6TrackerProfileParcel"));

export { GetTransportManagementVpnInterfaceEthernetProfileParcelArgs, GetTransportManagementVpnInterfaceEthernetProfileParcelResult, GetTransportManagementVpnInterfaceEthernetProfileParcelOutputArgs } from "./getTransportManagementVpnInterfaceEthernetProfileParcel";
export const getTransportManagementVpnInterfaceEthernetProfileParcel: typeof import("./getTransportManagementVpnInterfaceEthernetProfileParcel").getTransportManagementVpnInterfaceEthernetProfileParcel = null as any;
export const getTransportManagementVpnInterfaceEthernetProfileParcelOutput: typeof import("./getTransportManagementVpnInterfaceEthernetProfileParcel").getTransportManagementVpnInterfaceEthernetProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getTransportManagementVpnInterfaceEthernetProfileParcel","getTransportManagementVpnInterfaceEthernetProfileParcelOutput"], () => require("./getTransportManagementVpnInterfaceEthernetProfileParcel"));

export { GetTransportManagementVpnProfileParcelArgs, GetTransportManagementVpnProfileParcelResult, GetTransportManagementVpnProfileParcelOutputArgs } from "./getTransportManagementVpnProfileParcel";
export const getTransportManagementVpnProfileParcel: typeof import("./getTransportManagementVpnProfileParcel").getTransportManagementVpnProfileParcel = null as any;
export const getTransportManagementVpnProfileParcelOutput: typeof import("./getTransportManagementVpnProfileParcel").getTransportManagementVpnProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getTransportManagementVpnProfileParcel","getTransportManagementVpnProfileParcelOutput"], () => require("./getTransportManagementVpnProfileParcel"));

export { GetTransportRoutingBgpProfileParcelArgs, GetTransportRoutingBgpProfileParcelResult, GetTransportRoutingBgpProfileParcelOutputArgs } from "./getTransportRoutingBgpProfileParcel";
export const getTransportRoutingBgpProfileParcel: typeof import("./getTransportRoutingBgpProfileParcel").getTransportRoutingBgpProfileParcel = null as any;
export const getTransportRoutingBgpProfileParcelOutput: typeof import("./getTransportRoutingBgpProfileParcel").getTransportRoutingBgpProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getTransportRoutingBgpProfileParcel","getTransportRoutingBgpProfileParcelOutput"], () => require("./getTransportRoutingBgpProfileParcel"));

export { GetTransportWanVpnInterfaceEthernetProfileParcelArgs, GetTransportWanVpnInterfaceEthernetProfileParcelResult, GetTransportWanVpnInterfaceEthernetProfileParcelOutputArgs } from "./getTransportWanVpnInterfaceEthernetProfileParcel";
export const getTransportWanVpnInterfaceEthernetProfileParcel: typeof import("./getTransportWanVpnInterfaceEthernetProfileParcel").getTransportWanVpnInterfaceEthernetProfileParcel = null as any;
export const getTransportWanVpnInterfaceEthernetProfileParcelOutput: typeof import("./getTransportWanVpnInterfaceEthernetProfileParcel").getTransportWanVpnInterfaceEthernetProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnInterfaceEthernetProfileParcel","getTransportWanVpnInterfaceEthernetProfileParcelOutput"], () => require("./getTransportWanVpnInterfaceEthernetProfileParcel"));

export { GetTransportWanVpnProfileParcelArgs, GetTransportWanVpnProfileParcelResult, GetTransportWanVpnProfileParcelOutputArgs } from "./getTransportWanVpnProfileParcel";
export const getTransportWanVpnProfileParcel: typeof import("./getTransportWanVpnProfileParcel").getTransportWanVpnProfileParcel = null as any;
export const getTransportWanVpnProfileParcelOutput: typeof import("./getTransportWanVpnProfileParcel").getTransportWanVpnProfileParcelOutput = null as any;
utilities.lazyLoad(exports, ["getTransportWanVpnProfileParcel","getTransportWanVpnProfileParcelOutput"], () => require("./getTransportWanVpnProfileParcel"));

export { GetUrlFilteringPolicyDefinitionArgs, GetUrlFilteringPolicyDefinitionResult, GetUrlFilteringPolicyDefinitionOutputArgs } from "./getUrlFilteringPolicyDefinition";
export const getUrlFilteringPolicyDefinition: typeof import("./getUrlFilteringPolicyDefinition").getUrlFilteringPolicyDefinition = null as any;
export const getUrlFilteringPolicyDefinitionOutput: typeof import("./getUrlFilteringPolicyDefinition").getUrlFilteringPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getUrlFilteringPolicyDefinition","getUrlFilteringPolicyDefinitionOutput"], () => require("./getUrlFilteringPolicyDefinition"));

export { GetVedgeInventoryResult } from "./getVedgeInventory";
export const getVedgeInventory: typeof import("./getVedgeInventory").getVedgeInventory = null as any;
export const getVedgeInventoryOutput: typeof import("./getVedgeInventory").getVedgeInventoryOutput = null as any;
utilities.lazyLoad(exports, ["getVedgeInventory","getVedgeInventoryOutput"], () => require("./getVedgeInventory"));

export { GetVpnInterfaceCellularFeatureTemplateArgs, GetVpnInterfaceCellularFeatureTemplateResult, GetVpnInterfaceCellularFeatureTemplateOutputArgs } from "./getVpnInterfaceCellularFeatureTemplate";
export const getVpnInterfaceCellularFeatureTemplate: typeof import("./getVpnInterfaceCellularFeatureTemplate").getVpnInterfaceCellularFeatureTemplate = null as any;
export const getVpnInterfaceCellularFeatureTemplateOutput: typeof import("./getVpnInterfaceCellularFeatureTemplate").getVpnInterfaceCellularFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceCellularFeatureTemplate","getVpnInterfaceCellularFeatureTemplateOutput"], () => require("./getVpnInterfaceCellularFeatureTemplate"));

export { GetVpnInterfaceDslIpoeFeatureTemplateArgs, GetVpnInterfaceDslIpoeFeatureTemplateResult, GetVpnInterfaceDslIpoeFeatureTemplateOutputArgs } from "./getVpnInterfaceDslIpoeFeatureTemplate";
export const getVpnInterfaceDslIpoeFeatureTemplate: typeof import("./getVpnInterfaceDslIpoeFeatureTemplate").getVpnInterfaceDslIpoeFeatureTemplate = null as any;
export const getVpnInterfaceDslIpoeFeatureTemplateOutput: typeof import("./getVpnInterfaceDslIpoeFeatureTemplate").getVpnInterfaceDslIpoeFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceDslIpoeFeatureTemplate","getVpnInterfaceDslIpoeFeatureTemplateOutput"], () => require("./getVpnInterfaceDslIpoeFeatureTemplate"));

export { GetVpnInterfaceDslPppoaFeatureTemplateArgs, GetVpnInterfaceDslPppoaFeatureTemplateResult, GetVpnInterfaceDslPppoaFeatureTemplateOutputArgs } from "./getVpnInterfaceDslPppoaFeatureTemplate";
export const getVpnInterfaceDslPppoaFeatureTemplate: typeof import("./getVpnInterfaceDslPppoaFeatureTemplate").getVpnInterfaceDslPppoaFeatureTemplate = null as any;
export const getVpnInterfaceDslPppoaFeatureTemplateOutput: typeof import("./getVpnInterfaceDslPppoaFeatureTemplate").getVpnInterfaceDslPppoaFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceDslPppoaFeatureTemplate","getVpnInterfaceDslPppoaFeatureTemplateOutput"], () => require("./getVpnInterfaceDslPppoaFeatureTemplate"));

export { GetVpnInterfaceDslPppoeFeatureTemplateArgs, GetVpnInterfaceDslPppoeFeatureTemplateResult, GetVpnInterfaceDslPppoeFeatureTemplateOutputArgs } from "./getVpnInterfaceDslPppoeFeatureTemplate";
export const getVpnInterfaceDslPppoeFeatureTemplate: typeof import("./getVpnInterfaceDslPppoeFeatureTemplate").getVpnInterfaceDslPppoeFeatureTemplate = null as any;
export const getVpnInterfaceDslPppoeFeatureTemplateOutput: typeof import("./getVpnInterfaceDslPppoeFeatureTemplate").getVpnInterfaceDslPppoeFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceDslPppoeFeatureTemplate","getVpnInterfaceDslPppoeFeatureTemplateOutput"], () => require("./getVpnInterfaceDslPppoeFeatureTemplate"));

export { GetVpnInterfaceEthernetPppoeFeatureTemplateArgs, GetVpnInterfaceEthernetPppoeFeatureTemplateResult, GetVpnInterfaceEthernetPppoeFeatureTemplateOutputArgs } from "./getVpnInterfaceEthernetPppoeFeatureTemplate";
export const getVpnInterfaceEthernetPppoeFeatureTemplate: typeof import("./getVpnInterfaceEthernetPppoeFeatureTemplate").getVpnInterfaceEthernetPppoeFeatureTemplate = null as any;
export const getVpnInterfaceEthernetPppoeFeatureTemplateOutput: typeof import("./getVpnInterfaceEthernetPppoeFeatureTemplate").getVpnInterfaceEthernetPppoeFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceEthernetPppoeFeatureTemplate","getVpnInterfaceEthernetPppoeFeatureTemplateOutput"], () => require("./getVpnInterfaceEthernetPppoeFeatureTemplate"));

export { GetVpnInterfaceMultilinkFeatureTemplateArgs, GetVpnInterfaceMultilinkFeatureTemplateResult, GetVpnInterfaceMultilinkFeatureTemplateOutputArgs } from "./getVpnInterfaceMultilinkFeatureTemplate";
export const getVpnInterfaceMultilinkFeatureTemplate: typeof import("./getVpnInterfaceMultilinkFeatureTemplate").getVpnInterfaceMultilinkFeatureTemplate = null as any;
export const getVpnInterfaceMultilinkFeatureTemplateOutput: typeof import("./getVpnInterfaceMultilinkFeatureTemplate").getVpnInterfaceMultilinkFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceMultilinkFeatureTemplate","getVpnInterfaceMultilinkFeatureTemplateOutput"], () => require("./getVpnInterfaceMultilinkFeatureTemplate"));

export { GetVpnInterfaceSviFeatureTemplateArgs, GetVpnInterfaceSviFeatureTemplateResult, GetVpnInterfaceSviFeatureTemplateOutputArgs } from "./getVpnInterfaceSviFeatureTemplate";
export const getVpnInterfaceSviFeatureTemplate: typeof import("./getVpnInterfaceSviFeatureTemplate").getVpnInterfaceSviFeatureTemplate = null as any;
export const getVpnInterfaceSviFeatureTemplateOutput: typeof import("./getVpnInterfaceSviFeatureTemplate").getVpnInterfaceSviFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceSviFeatureTemplate","getVpnInterfaceSviFeatureTemplateOutput"], () => require("./getVpnInterfaceSviFeatureTemplate"));

export { GetVpnInterfaceT1E1SerialFeatureTemplateArgs, GetVpnInterfaceT1E1SerialFeatureTemplateResult, GetVpnInterfaceT1E1SerialFeatureTemplateOutputArgs } from "./getVpnInterfaceT1E1SerialFeatureTemplate";
export const getVpnInterfaceT1E1SerialFeatureTemplate: typeof import("./getVpnInterfaceT1E1SerialFeatureTemplate").getVpnInterfaceT1E1SerialFeatureTemplate = null as any;
export const getVpnInterfaceT1E1SerialFeatureTemplateOutput: typeof import("./getVpnInterfaceT1E1SerialFeatureTemplate").getVpnInterfaceT1E1SerialFeatureTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getVpnInterfaceT1E1SerialFeatureTemplate","getVpnInterfaceT1E1SerialFeatureTemplateOutput"], () => require("./getVpnInterfaceT1E1SerialFeatureTemplate"));

export { GetVpnListPolicyObjectArgs, GetVpnListPolicyObjectResult, GetVpnListPolicyObjectOutputArgs } from "./getVpnListPolicyObject";
export const getVpnListPolicyObject: typeof import("./getVpnListPolicyObject").getVpnListPolicyObject = null as any;
export const getVpnListPolicyObjectOutput: typeof import("./getVpnListPolicyObject").getVpnListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getVpnListPolicyObject","getVpnListPolicyObjectOutput"], () => require("./getVpnListPolicyObject"));

export { GetVpnMembershipPolicyDefinitionArgs, GetVpnMembershipPolicyDefinitionResult, GetVpnMembershipPolicyDefinitionOutputArgs } from "./getVpnMembershipPolicyDefinition";
export const getVpnMembershipPolicyDefinition: typeof import("./getVpnMembershipPolicyDefinition").getVpnMembershipPolicyDefinition = null as any;
export const getVpnMembershipPolicyDefinitionOutput: typeof import("./getVpnMembershipPolicyDefinition").getVpnMembershipPolicyDefinitionOutput = null as any;
utilities.lazyLoad(exports, ["getVpnMembershipPolicyDefinition","getVpnMembershipPolicyDefinitionOutput"], () => require("./getVpnMembershipPolicyDefinition"));

export { GetZoneListPolicyObjectArgs, GetZoneListPolicyObjectResult, GetZoneListPolicyObjectOutputArgs } from "./getZoneListPolicyObject";
export const getZoneListPolicyObject: typeof import("./getZoneListPolicyObject").getZoneListPolicyObject = null as any;
export const getZoneListPolicyObjectOutput: typeof import("./getZoneListPolicyObject").getZoneListPolicyObjectOutput = null as any;
utilities.lazyLoad(exports, ["getZoneListPolicyObject","getZoneListPolicyObjectOutput"], () => require("./getZoneListPolicyObject"));

export { GpsFeatureTemplateArgs, GpsFeatureTemplateState } from "./gpsFeatureTemplate";
export type GpsFeatureTemplate = import("./gpsFeatureTemplate").GpsFeatureTemplate;
export const GpsFeatureTemplate: typeof import("./gpsFeatureTemplate").GpsFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["GpsFeatureTemplate"], () => require("./gpsFeatureTemplate"));

export { HubAndSpokeTopologyPolicyDefinitionArgs, HubAndSpokeTopologyPolicyDefinitionState } from "./hubAndSpokeTopologyPolicyDefinition";
export type HubAndSpokeTopologyPolicyDefinition = import("./hubAndSpokeTopologyPolicyDefinition").HubAndSpokeTopologyPolicyDefinition;
export const HubAndSpokeTopologyPolicyDefinition: typeof import("./hubAndSpokeTopologyPolicyDefinition").HubAndSpokeTopologyPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["HubAndSpokeTopologyPolicyDefinition"], () => require("./hubAndSpokeTopologyPolicyDefinition"));

export { IntrusionPreventionPolicyDefinitionArgs, IntrusionPreventionPolicyDefinitionState } from "./intrusionPreventionPolicyDefinition";
export type IntrusionPreventionPolicyDefinition = import("./intrusionPreventionPolicyDefinition").IntrusionPreventionPolicyDefinition;
export const IntrusionPreventionPolicyDefinition: typeof import("./intrusionPreventionPolicyDefinition").IntrusionPreventionPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["IntrusionPreventionPolicyDefinition"], () => require("./intrusionPreventionPolicyDefinition"));

export { IpsSignatureListPolicyObjectArgs, IpsSignatureListPolicyObjectState } from "./ipsSignatureListPolicyObject";
export type IpsSignatureListPolicyObject = import("./ipsSignatureListPolicyObject").IpsSignatureListPolicyObject;
export const IpsSignatureListPolicyObject: typeof import("./ipsSignatureListPolicyObject").IpsSignatureListPolicyObject = null as any;
utilities.lazyLoad(exports, ["IpsSignatureListPolicyObject"], () => require("./ipsSignatureListPolicyObject"));

export { Ipv4AclPolicyDefinitionArgs, Ipv4AclPolicyDefinitionState } from "./ipv4AclPolicyDefinition";
export type Ipv4AclPolicyDefinition = import("./ipv4AclPolicyDefinition").Ipv4AclPolicyDefinition;
export const Ipv4AclPolicyDefinition: typeof import("./ipv4AclPolicyDefinition").Ipv4AclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv4AclPolicyDefinition"], () => require("./ipv4AclPolicyDefinition"));

export { Ipv4DeviceAclPolicyDefinitionArgs, Ipv4DeviceAclPolicyDefinitionState } from "./ipv4DeviceAclPolicyDefinition";
export type Ipv4DeviceAclPolicyDefinition = import("./ipv4DeviceAclPolicyDefinition").Ipv4DeviceAclPolicyDefinition;
export const Ipv4DeviceAclPolicyDefinition: typeof import("./ipv4DeviceAclPolicyDefinition").Ipv4DeviceAclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv4DeviceAclPolicyDefinition"], () => require("./ipv4DeviceAclPolicyDefinition"));

export { Ipv4PrefixListPolicyObjectArgs, Ipv4PrefixListPolicyObjectState } from "./ipv4PrefixListPolicyObject";
export type Ipv4PrefixListPolicyObject = import("./ipv4PrefixListPolicyObject").Ipv4PrefixListPolicyObject;
export const Ipv4PrefixListPolicyObject: typeof import("./ipv4PrefixListPolicyObject").Ipv4PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["Ipv4PrefixListPolicyObject"], () => require("./ipv4PrefixListPolicyObject"));

export { Ipv6AclPolicyDefinitionArgs, Ipv6AclPolicyDefinitionState } from "./ipv6AclPolicyDefinition";
export type Ipv6AclPolicyDefinition = import("./ipv6AclPolicyDefinition").Ipv6AclPolicyDefinition;
export const Ipv6AclPolicyDefinition: typeof import("./ipv6AclPolicyDefinition").Ipv6AclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv6AclPolicyDefinition"], () => require("./ipv6AclPolicyDefinition"));

export { Ipv6DeviceAclPolicyDefinitionArgs, Ipv6DeviceAclPolicyDefinitionState } from "./ipv6DeviceAclPolicyDefinition";
export type Ipv6DeviceAclPolicyDefinition = import("./ipv6DeviceAclPolicyDefinition").Ipv6DeviceAclPolicyDefinition;
export const Ipv6DeviceAclPolicyDefinition: typeof import("./ipv6DeviceAclPolicyDefinition").Ipv6DeviceAclPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["Ipv6DeviceAclPolicyDefinition"], () => require("./ipv6DeviceAclPolicyDefinition"));

export { Ipv6PrefixListPolicyObjectArgs, Ipv6PrefixListPolicyObjectState } from "./ipv6PrefixListPolicyObject";
export type Ipv6PrefixListPolicyObject = import("./ipv6PrefixListPolicyObject").Ipv6PrefixListPolicyObject;
export const Ipv6PrefixListPolicyObject: typeof import("./ipv6PrefixListPolicyObject").Ipv6PrefixListPolicyObject = null as any;
utilities.lazyLoad(exports, ["Ipv6PrefixListPolicyObject"], () => require("./ipv6PrefixListPolicyObject"));

export { LocalApplicationListPolicyObjectArgs, LocalApplicationListPolicyObjectState } from "./localApplicationListPolicyObject";
export type LocalApplicationListPolicyObject = import("./localApplicationListPolicyObject").LocalApplicationListPolicyObject;
export const LocalApplicationListPolicyObject: typeof import("./localApplicationListPolicyObject").LocalApplicationListPolicyObject = null as any;
utilities.lazyLoad(exports, ["LocalApplicationListPolicyObject"], () => require("./localApplicationListPolicyObject"));

export { LocalizedPolicyArgs, LocalizedPolicyState } from "./localizedPolicy";
export type LocalizedPolicy = import("./localizedPolicy").LocalizedPolicy;
export const LocalizedPolicy: typeof import("./localizedPolicy").LocalizedPolicy = null as any;
utilities.lazyLoad(exports, ["LocalizedPolicy"], () => require("./localizedPolicy"));

export { MeshTopologyPolicyDefinitionArgs, MeshTopologyPolicyDefinitionState } from "./meshTopologyPolicyDefinition";
export type MeshTopologyPolicyDefinition = import("./meshTopologyPolicyDefinition").MeshTopologyPolicyDefinition;
export const MeshTopologyPolicyDefinition: typeof import("./meshTopologyPolicyDefinition").MeshTopologyPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["MeshTopologyPolicyDefinition"], () => require("./meshTopologyPolicyDefinition"));

export { MirrorPolicyObjectArgs, MirrorPolicyObjectState } from "./mirrorPolicyObject";
export type MirrorPolicyObject = import("./mirrorPolicyObject").MirrorPolicyObject;
export const MirrorPolicyObject: typeof import("./mirrorPolicyObject").MirrorPolicyObject = null as any;
utilities.lazyLoad(exports, ["MirrorPolicyObject"], () => require("./mirrorPolicyObject"));

export { ObjectGroupPolicyDefinitionArgs, ObjectGroupPolicyDefinitionState } from "./objectGroupPolicyDefinition";
export type ObjectGroupPolicyDefinition = import("./objectGroupPolicyDefinition").ObjectGroupPolicyDefinition;
export const ObjectGroupPolicyDefinition: typeof import("./objectGroupPolicyDefinition").ObjectGroupPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["ObjectGroupPolicyDefinition"], () => require("./objectGroupPolicyDefinition"));

export { PolicerPolicyObjectArgs, PolicerPolicyObjectState } from "./policerPolicyObject";
export type PolicerPolicyObject = import("./policerPolicyObject").PolicerPolicyObject;
export const PolicerPolicyObject: typeof import("./policerPolicyObject").PolicerPolicyObject = null as any;
utilities.lazyLoad(exports, ["PolicerPolicyObject"], () => require("./policerPolicyObject"));

export { PortListPolicyObjectArgs, PortListPolicyObjectState } from "./portListPolicyObject";
export type PortListPolicyObject = import("./portListPolicyObject").PortListPolicyObject;
export const PortListPolicyObject: typeof import("./portListPolicyObject").PortListPolicyObject = null as any;
utilities.lazyLoad(exports, ["PortListPolicyObject"], () => require("./portListPolicyObject"));

export { PreferredColorGroupPolicyObjectArgs, PreferredColorGroupPolicyObjectState } from "./preferredColorGroupPolicyObject";
export type PreferredColorGroupPolicyObject = import("./preferredColorGroupPolicyObject").PreferredColorGroupPolicyObject;
export const PreferredColorGroupPolicyObject: typeof import("./preferredColorGroupPolicyObject").PreferredColorGroupPolicyObject = null as any;
utilities.lazyLoad(exports, ["PreferredColorGroupPolicyObject"], () => require("./preferredColorGroupPolicyObject"));

export { ProtocolListPolicyObjectArgs, ProtocolListPolicyObjectState } from "./protocolListPolicyObject";
export type ProtocolListPolicyObject = import("./protocolListPolicyObject").ProtocolListPolicyObject;
export const ProtocolListPolicyObject: typeof import("./protocolListPolicyObject").ProtocolListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ProtocolListPolicyObject"], () => require("./protocolListPolicyObject"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { QosMapPolicyDefinitionArgs, QosMapPolicyDefinitionState } from "./qosMapPolicyDefinition";
export type QosMapPolicyDefinition = import("./qosMapPolicyDefinition").QosMapPolicyDefinition;
export const QosMapPolicyDefinition: typeof import("./qosMapPolicyDefinition").QosMapPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["QosMapPolicyDefinition"], () => require("./qosMapPolicyDefinition"));

export { RegionListPolicyObjectArgs, RegionListPolicyObjectState } from "./regionListPolicyObject";
export type RegionListPolicyObject = import("./regionListPolicyObject").RegionListPolicyObject;
export const RegionListPolicyObject: typeof import("./regionListPolicyObject").RegionListPolicyObject = null as any;
utilities.lazyLoad(exports, ["RegionListPolicyObject"], () => require("./regionListPolicyObject"));

export { RewriteRulePolicyDefinitionArgs, RewriteRulePolicyDefinitionState } from "./rewriteRulePolicyDefinition";
export type RewriteRulePolicyDefinition = import("./rewriteRulePolicyDefinition").RewriteRulePolicyDefinition;
export const RewriteRulePolicyDefinition: typeof import("./rewriteRulePolicyDefinition").RewriteRulePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["RewriteRulePolicyDefinition"], () => require("./rewriteRulePolicyDefinition"));

export { RoutePolicyDefinitionArgs, RoutePolicyDefinitionState } from "./routePolicyDefinition";
export type RoutePolicyDefinition = import("./routePolicyDefinition").RoutePolicyDefinition;
export const RoutePolicyDefinition: typeof import("./routePolicyDefinition").RoutePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["RoutePolicyDefinition"], () => require("./routePolicyDefinition"));

export { RuleSetPolicyDefinitionArgs, RuleSetPolicyDefinitionState } from "./ruleSetPolicyDefinition";
export type RuleSetPolicyDefinition = import("./ruleSetPolicyDefinition").RuleSetPolicyDefinition;
export const RuleSetPolicyDefinition: typeof import("./ruleSetPolicyDefinition").RuleSetPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["RuleSetPolicyDefinition"], () => require("./ruleSetPolicyDefinition"));

export { SecurityAppHostingFeatureTemplateArgs, SecurityAppHostingFeatureTemplateState } from "./securityAppHostingFeatureTemplate";
export type SecurityAppHostingFeatureTemplate = import("./securityAppHostingFeatureTemplate").SecurityAppHostingFeatureTemplate;
export const SecurityAppHostingFeatureTemplate: typeof import("./securityAppHostingFeatureTemplate").SecurityAppHostingFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["SecurityAppHostingFeatureTemplate"], () => require("./securityAppHostingFeatureTemplate"));

export { SecurityPolicyArgs, SecurityPolicyState } from "./securityPolicy";
export type SecurityPolicy = import("./securityPolicy").SecurityPolicy;
export const SecurityPolicy: typeof import("./securityPolicy").SecurityPolicy = null as any;
utilities.lazyLoad(exports, ["SecurityPolicy"], () => require("./securityPolicy"));

export { ServiceFeatureProfileArgs, ServiceFeatureProfileState } from "./serviceFeatureProfile";
export type ServiceFeatureProfile = import("./serviceFeatureProfile").ServiceFeatureProfile;
export const ServiceFeatureProfile: typeof import("./serviceFeatureProfile").ServiceFeatureProfile = null as any;
utilities.lazyLoad(exports, ["ServiceFeatureProfile"], () => require("./serviceFeatureProfile"));

export { ServiceLanVpnInterfaceEthernetProfileParcelArgs, ServiceLanVpnInterfaceEthernetProfileParcelState } from "./serviceLanVpnInterfaceEthernetProfileParcel";
export type ServiceLanVpnInterfaceEthernetProfileParcel = import("./serviceLanVpnInterfaceEthernetProfileParcel").ServiceLanVpnInterfaceEthernetProfileParcel;
export const ServiceLanVpnInterfaceEthernetProfileParcel: typeof import("./serviceLanVpnInterfaceEthernetProfileParcel").ServiceLanVpnInterfaceEthernetProfileParcel = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnInterfaceEthernetProfileParcel"], () => require("./serviceLanVpnInterfaceEthernetProfileParcel"));

export { ServiceLanVpnProfileParcelArgs, ServiceLanVpnProfileParcelState } from "./serviceLanVpnProfileParcel";
export type ServiceLanVpnProfileParcel = import("./serviceLanVpnProfileParcel").ServiceLanVpnProfileParcel;
export const ServiceLanVpnProfileParcel: typeof import("./serviceLanVpnProfileParcel").ServiceLanVpnProfileParcel = null as any;
utilities.lazyLoad(exports, ["ServiceLanVpnProfileParcel"], () => require("./serviceLanVpnProfileParcel"));

export { ServiceTrackerProfileParcelArgs, ServiceTrackerProfileParcelState } from "./serviceTrackerProfileParcel";
export type ServiceTrackerProfileParcel = import("./serviceTrackerProfileParcel").ServiceTrackerProfileParcel;
export const ServiceTrackerProfileParcel: typeof import("./serviceTrackerProfileParcel").ServiceTrackerProfileParcel = null as any;
utilities.lazyLoad(exports, ["ServiceTrackerProfileParcel"], () => require("./serviceTrackerProfileParcel"));

export { SiteListPolicyObjectArgs, SiteListPolicyObjectState } from "./siteListPolicyObject";
export type SiteListPolicyObject = import("./siteListPolicyObject").SiteListPolicyObject;
export const SiteListPolicyObject: typeof import("./siteListPolicyObject").SiteListPolicyObject = null as any;
utilities.lazyLoad(exports, ["SiteListPolicyObject"], () => require("./siteListPolicyObject"));

export { SlaClassPolicyObjectArgs, SlaClassPolicyObjectState } from "./slaClassPolicyObject";
export type SlaClassPolicyObject = import("./slaClassPolicyObject").SlaClassPolicyObject;
export const SlaClassPolicyObject: typeof import("./slaClassPolicyObject").SlaClassPolicyObject = null as any;
utilities.lazyLoad(exports, ["SlaClassPolicyObject"], () => require("./slaClassPolicyObject"));

export { StandardCommunityListPolicyObjectArgs, StandardCommunityListPolicyObjectState } from "./standardCommunityListPolicyObject";
export type StandardCommunityListPolicyObject = import("./standardCommunityListPolicyObject").StandardCommunityListPolicyObject;
export const StandardCommunityListPolicyObject: typeof import("./standardCommunityListPolicyObject").StandardCommunityListPolicyObject = null as any;
utilities.lazyLoad(exports, ["StandardCommunityListPolicyObject"], () => require("./standardCommunityListPolicyObject"));

export { SwitchportFeatureTemplateArgs, SwitchportFeatureTemplateState } from "./switchportFeatureTemplate";
export type SwitchportFeatureTemplate = import("./switchportFeatureTemplate").SwitchportFeatureTemplate;
export const SwitchportFeatureTemplate: typeof import("./switchportFeatureTemplate").SwitchportFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["SwitchportFeatureTemplate"], () => require("./switchportFeatureTemplate"));

export { SystemAaaProfileParcelArgs, SystemAaaProfileParcelState } from "./systemAaaProfileParcel";
export type SystemAaaProfileParcel = import("./systemAaaProfileParcel").SystemAaaProfileParcel;
export const SystemAaaProfileParcel: typeof import("./systemAaaProfileParcel").SystemAaaProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemAaaProfileParcel"], () => require("./systemAaaProfileParcel"));

export { SystemBannerProfileParcelArgs, SystemBannerProfileParcelState } from "./systemBannerProfileParcel";
export type SystemBannerProfileParcel = import("./systemBannerProfileParcel").SystemBannerProfileParcel;
export const SystemBannerProfileParcel: typeof import("./systemBannerProfileParcel").SystemBannerProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemBannerProfileParcel"], () => require("./systemBannerProfileParcel"));

export { SystemBasicProfileParcelArgs, SystemBasicProfileParcelState } from "./systemBasicProfileParcel";
export type SystemBasicProfileParcel = import("./systemBasicProfileParcel").SystemBasicProfileParcel;
export const SystemBasicProfileParcel: typeof import("./systemBasicProfileParcel").SystemBasicProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemBasicProfileParcel"], () => require("./systemBasicProfileParcel"));

export { SystemBfdProfileParcelArgs, SystemBfdProfileParcelState } from "./systemBfdProfileParcel";
export type SystemBfdProfileParcel = import("./systemBfdProfileParcel").SystemBfdProfileParcel;
export const SystemBfdProfileParcel: typeof import("./systemBfdProfileParcel").SystemBfdProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemBfdProfileParcel"], () => require("./systemBfdProfileParcel"));

export { SystemFeatureProfileArgs, SystemFeatureProfileState } from "./systemFeatureProfile";
export type SystemFeatureProfile = import("./systemFeatureProfile").SystemFeatureProfile;
export const SystemFeatureProfile: typeof import("./systemFeatureProfile").SystemFeatureProfile = null as any;
utilities.lazyLoad(exports, ["SystemFeatureProfile"], () => require("./systemFeatureProfile"));

export { SystemFlexiblePortSpeedProfileParcelArgs, SystemFlexiblePortSpeedProfileParcelState } from "./systemFlexiblePortSpeedProfileParcel";
export type SystemFlexiblePortSpeedProfileParcel = import("./systemFlexiblePortSpeedProfileParcel").SystemFlexiblePortSpeedProfileParcel;
export const SystemFlexiblePortSpeedProfileParcel: typeof import("./systemFlexiblePortSpeedProfileParcel").SystemFlexiblePortSpeedProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemFlexiblePortSpeedProfileParcel"], () => require("./systemFlexiblePortSpeedProfileParcel"));

export { SystemGlobalProfileParcelArgs, SystemGlobalProfileParcelState } from "./systemGlobalProfileParcel";
export type SystemGlobalProfileParcel = import("./systemGlobalProfileParcel").SystemGlobalProfileParcel;
export const SystemGlobalProfileParcel: typeof import("./systemGlobalProfileParcel").SystemGlobalProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemGlobalProfileParcel"], () => require("./systemGlobalProfileParcel"));

export { SystemLoggingProfileParcelArgs, SystemLoggingProfileParcelState } from "./systemLoggingProfileParcel";
export type SystemLoggingProfileParcel = import("./systemLoggingProfileParcel").SystemLoggingProfileParcel;
export const SystemLoggingProfileParcel: typeof import("./systemLoggingProfileParcel").SystemLoggingProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemLoggingProfileParcel"], () => require("./systemLoggingProfileParcel"));

export { SystemMrfProfileParcelArgs, SystemMrfProfileParcelState } from "./systemMrfProfileParcel";
export type SystemMrfProfileParcel = import("./systemMrfProfileParcel").SystemMrfProfileParcel;
export const SystemMrfProfileParcel: typeof import("./systemMrfProfileParcel").SystemMrfProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemMrfProfileParcel"], () => require("./systemMrfProfileParcel"));

export { SystemNtpProfileParcelArgs, SystemNtpProfileParcelState } from "./systemNtpProfileParcel";
export type SystemNtpProfileParcel = import("./systemNtpProfileParcel").SystemNtpProfileParcel;
export const SystemNtpProfileParcel: typeof import("./systemNtpProfileParcel").SystemNtpProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemNtpProfileParcel"], () => require("./systemNtpProfileParcel"));

export { SystemOmpProfileParcelArgs, SystemOmpProfileParcelState } from "./systemOmpProfileParcel";
export type SystemOmpProfileParcel = import("./systemOmpProfileParcel").SystemOmpProfileParcel;
export const SystemOmpProfileParcel: typeof import("./systemOmpProfileParcel").SystemOmpProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemOmpProfileParcel"], () => require("./systemOmpProfileParcel"));

export { SystemPerformanceMonitoringProfileParcelArgs, SystemPerformanceMonitoringProfileParcelState } from "./systemPerformanceMonitoringProfileParcel";
export type SystemPerformanceMonitoringProfileParcel = import("./systemPerformanceMonitoringProfileParcel").SystemPerformanceMonitoringProfileParcel;
export const SystemPerformanceMonitoringProfileParcel: typeof import("./systemPerformanceMonitoringProfileParcel").SystemPerformanceMonitoringProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemPerformanceMonitoringProfileParcel"], () => require("./systemPerformanceMonitoringProfileParcel"));

export { SystemRemoteAccessProfileParcelArgs, SystemRemoteAccessProfileParcelState } from "./systemRemoteAccessProfileParcel";
export type SystemRemoteAccessProfileParcel = import("./systemRemoteAccessProfileParcel").SystemRemoteAccessProfileParcel;
export const SystemRemoteAccessProfileParcel: typeof import("./systemRemoteAccessProfileParcel").SystemRemoteAccessProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemRemoteAccessProfileParcel"], () => require("./systemRemoteAccessProfileParcel"));

export { SystemSecurityProfileParcelArgs, SystemSecurityProfileParcelState } from "./systemSecurityProfileParcel";
export type SystemSecurityProfileParcel = import("./systemSecurityProfileParcel").SystemSecurityProfileParcel;
export const SystemSecurityProfileParcel: typeof import("./systemSecurityProfileParcel").SystemSecurityProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemSecurityProfileParcel"], () => require("./systemSecurityProfileParcel"));

export { SystemSnmpProfileParcelArgs, SystemSnmpProfileParcelState } from "./systemSnmpProfileParcel";
export type SystemSnmpProfileParcel = import("./systemSnmpProfileParcel").SystemSnmpProfileParcel;
export const SystemSnmpProfileParcel: typeof import("./systemSnmpProfileParcel").SystemSnmpProfileParcel = null as any;
utilities.lazyLoad(exports, ["SystemSnmpProfileParcel"], () => require("./systemSnmpProfileParcel"));

export { TlocListPolicyObjectArgs, TlocListPolicyObjectState } from "./tlocListPolicyObject";
export type TlocListPolicyObject = import("./tlocListPolicyObject").TlocListPolicyObject;
export const TlocListPolicyObject: typeof import("./tlocListPolicyObject").TlocListPolicyObject = null as any;
utilities.lazyLoad(exports, ["TlocListPolicyObject"], () => require("./tlocListPolicyObject"));

export { TlsSslDecryptionPolicyDefinitionArgs, TlsSslDecryptionPolicyDefinitionState } from "./tlsSslDecryptionPolicyDefinition";
export type TlsSslDecryptionPolicyDefinition = import("./tlsSslDecryptionPolicyDefinition").TlsSslDecryptionPolicyDefinition;
export const TlsSslDecryptionPolicyDefinition: typeof import("./tlsSslDecryptionPolicyDefinition").TlsSslDecryptionPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["TlsSslDecryptionPolicyDefinition"], () => require("./tlsSslDecryptionPolicyDefinition"));

export { TlsSslProfilePolicyDefinitionArgs, TlsSslProfilePolicyDefinitionState } from "./tlsSslProfilePolicyDefinition";
export type TlsSslProfilePolicyDefinition = import("./tlsSslProfilePolicyDefinition").TlsSslProfilePolicyDefinition;
export const TlsSslProfilePolicyDefinition: typeof import("./tlsSslProfilePolicyDefinition").TlsSslProfilePolicyDefinition = null as any;
utilities.lazyLoad(exports, ["TlsSslProfilePolicyDefinition"], () => require("./tlsSslProfilePolicyDefinition"));

export { TrafficDataPolicyDefinitionArgs, TrafficDataPolicyDefinitionState } from "./trafficDataPolicyDefinition";
export type TrafficDataPolicyDefinition = import("./trafficDataPolicyDefinition").TrafficDataPolicyDefinition;
export const TrafficDataPolicyDefinition: typeof import("./trafficDataPolicyDefinition").TrafficDataPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["TrafficDataPolicyDefinition"], () => require("./trafficDataPolicyDefinition"));

export { TransportFeatureProfileArgs, TransportFeatureProfileState } from "./transportFeatureProfile";
export type TransportFeatureProfile = import("./transportFeatureProfile").TransportFeatureProfile;
export const TransportFeatureProfile: typeof import("./transportFeatureProfile").TransportFeatureProfile = null as any;
utilities.lazyLoad(exports, ["TransportFeatureProfile"], () => require("./transportFeatureProfile"));

export { TransportIpv6TrackerProfileParcelArgs, TransportIpv6TrackerProfileParcelState } from "./transportIpv6TrackerProfileParcel";
export type TransportIpv6TrackerProfileParcel = import("./transportIpv6TrackerProfileParcel").TransportIpv6TrackerProfileParcel;
export const TransportIpv6TrackerProfileParcel: typeof import("./transportIpv6TrackerProfileParcel").TransportIpv6TrackerProfileParcel = null as any;
utilities.lazyLoad(exports, ["TransportIpv6TrackerProfileParcel"], () => require("./transportIpv6TrackerProfileParcel"));

export { TransportManagementVpnInterfaceEthernetProfileParcelArgs, TransportManagementVpnInterfaceEthernetProfileParcelState } from "./transportManagementVpnInterfaceEthernetProfileParcel";
export type TransportManagementVpnInterfaceEthernetProfileParcel = import("./transportManagementVpnInterfaceEthernetProfileParcel").TransportManagementVpnInterfaceEthernetProfileParcel;
export const TransportManagementVpnInterfaceEthernetProfileParcel: typeof import("./transportManagementVpnInterfaceEthernetProfileParcel").TransportManagementVpnInterfaceEthernetProfileParcel = null as any;
utilities.lazyLoad(exports, ["TransportManagementVpnInterfaceEthernetProfileParcel"], () => require("./transportManagementVpnInterfaceEthernetProfileParcel"));

export { TransportManagementVpnProfileParcelArgs, TransportManagementVpnProfileParcelState } from "./transportManagementVpnProfileParcel";
export type TransportManagementVpnProfileParcel = import("./transportManagementVpnProfileParcel").TransportManagementVpnProfileParcel;
export const TransportManagementVpnProfileParcel: typeof import("./transportManagementVpnProfileParcel").TransportManagementVpnProfileParcel = null as any;
utilities.lazyLoad(exports, ["TransportManagementVpnProfileParcel"], () => require("./transportManagementVpnProfileParcel"));

export { TransportRoutingBgpProfileParcelArgs, TransportRoutingBgpProfileParcelState } from "./transportRoutingBgpProfileParcel";
export type TransportRoutingBgpProfileParcel = import("./transportRoutingBgpProfileParcel").TransportRoutingBgpProfileParcel;
export const TransportRoutingBgpProfileParcel: typeof import("./transportRoutingBgpProfileParcel").TransportRoutingBgpProfileParcel = null as any;
utilities.lazyLoad(exports, ["TransportRoutingBgpProfileParcel"], () => require("./transportRoutingBgpProfileParcel"));

export { TransportWanVpnInterfaceEthernetProfileParcelArgs, TransportWanVpnInterfaceEthernetProfileParcelState } from "./transportWanVpnInterfaceEthernetProfileParcel";
export type TransportWanVpnInterfaceEthernetProfileParcel = import("./transportWanVpnInterfaceEthernetProfileParcel").TransportWanVpnInterfaceEthernetProfileParcel;
export const TransportWanVpnInterfaceEthernetProfileParcel: typeof import("./transportWanVpnInterfaceEthernetProfileParcel").TransportWanVpnInterfaceEthernetProfileParcel = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnInterfaceEthernetProfileParcel"], () => require("./transportWanVpnInterfaceEthernetProfileParcel"));

export { TransportWanVpnProfileParcelArgs, TransportWanVpnProfileParcelState } from "./transportWanVpnProfileParcel";
export type TransportWanVpnProfileParcel = import("./transportWanVpnProfileParcel").TransportWanVpnProfileParcel;
export const TransportWanVpnProfileParcel: typeof import("./transportWanVpnProfileParcel").TransportWanVpnProfileParcel = null as any;
utilities.lazyLoad(exports, ["TransportWanVpnProfileParcel"], () => require("./transportWanVpnProfileParcel"));

export { UrlFilteringPolicyDefinitionArgs, UrlFilteringPolicyDefinitionState } from "./urlFilteringPolicyDefinition";
export type UrlFilteringPolicyDefinition = import("./urlFilteringPolicyDefinition").UrlFilteringPolicyDefinition;
export const UrlFilteringPolicyDefinition: typeof import("./urlFilteringPolicyDefinition").UrlFilteringPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["UrlFilteringPolicyDefinition"], () => require("./urlFilteringPolicyDefinition"));

export { VpnInterfaceCellularFeatureTemplateArgs, VpnInterfaceCellularFeatureTemplateState } from "./vpnInterfaceCellularFeatureTemplate";
export type VpnInterfaceCellularFeatureTemplate = import("./vpnInterfaceCellularFeatureTemplate").VpnInterfaceCellularFeatureTemplate;
export const VpnInterfaceCellularFeatureTemplate: typeof import("./vpnInterfaceCellularFeatureTemplate").VpnInterfaceCellularFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceCellularFeatureTemplate"], () => require("./vpnInterfaceCellularFeatureTemplate"));

export { VpnInterfaceDslIpoeFeatureTemplateArgs, VpnInterfaceDslIpoeFeatureTemplateState } from "./vpnInterfaceDslIpoeFeatureTemplate";
export type VpnInterfaceDslIpoeFeatureTemplate = import("./vpnInterfaceDslIpoeFeatureTemplate").VpnInterfaceDslIpoeFeatureTemplate;
export const VpnInterfaceDslIpoeFeatureTemplate: typeof import("./vpnInterfaceDslIpoeFeatureTemplate").VpnInterfaceDslIpoeFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceDslIpoeFeatureTemplate"], () => require("./vpnInterfaceDslIpoeFeatureTemplate"));

export { VpnInterfaceDslPppoaFeatureTemplateArgs, VpnInterfaceDslPppoaFeatureTemplateState } from "./vpnInterfaceDslPppoaFeatureTemplate";
export type VpnInterfaceDslPppoaFeatureTemplate = import("./vpnInterfaceDslPppoaFeatureTemplate").VpnInterfaceDslPppoaFeatureTemplate;
export const VpnInterfaceDslPppoaFeatureTemplate: typeof import("./vpnInterfaceDslPppoaFeatureTemplate").VpnInterfaceDslPppoaFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceDslPppoaFeatureTemplate"], () => require("./vpnInterfaceDslPppoaFeatureTemplate"));

export { VpnInterfaceDslPppoeFeatureTemplateArgs, VpnInterfaceDslPppoeFeatureTemplateState } from "./vpnInterfaceDslPppoeFeatureTemplate";
export type VpnInterfaceDslPppoeFeatureTemplate = import("./vpnInterfaceDslPppoeFeatureTemplate").VpnInterfaceDslPppoeFeatureTemplate;
export const VpnInterfaceDslPppoeFeatureTemplate: typeof import("./vpnInterfaceDslPppoeFeatureTemplate").VpnInterfaceDslPppoeFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceDslPppoeFeatureTemplate"], () => require("./vpnInterfaceDslPppoeFeatureTemplate"));

export { VpnInterfaceEthernetPppoeFeatureTemplateArgs, VpnInterfaceEthernetPppoeFeatureTemplateState } from "./vpnInterfaceEthernetPppoeFeatureTemplate";
export type VpnInterfaceEthernetPppoeFeatureTemplate = import("./vpnInterfaceEthernetPppoeFeatureTemplate").VpnInterfaceEthernetPppoeFeatureTemplate;
export const VpnInterfaceEthernetPppoeFeatureTemplate: typeof import("./vpnInterfaceEthernetPppoeFeatureTemplate").VpnInterfaceEthernetPppoeFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceEthernetPppoeFeatureTemplate"], () => require("./vpnInterfaceEthernetPppoeFeatureTemplate"));

export { VpnInterfaceMultilinkFeatureTemplateArgs, VpnInterfaceMultilinkFeatureTemplateState } from "./vpnInterfaceMultilinkFeatureTemplate";
export type VpnInterfaceMultilinkFeatureTemplate = import("./vpnInterfaceMultilinkFeatureTemplate").VpnInterfaceMultilinkFeatureTemplate;
export const VpnInterfaceMultilinkFeatureTemplate: typeof import("./vpnInterfaceMultilinkFeatureTemplate").VpnInterfaceMultilinkFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceMultilinkFeatureTemplate"], () => require("./vpnInterfaceMultilinkFeatureTemplate"));

export { VpnInterfaceSviFeatureTemplateArgs, VpnInterfaceSviFeatureTemplateState } from "./vpnInterfaceSviFeatureTemplate";
export type VpnInterfaceSviFeatureTemplate = import("./vpnInterfaceSviFeatureTemplate").VpnInterfaceSviFeatureTemplate;
export const VpnInterfaceSviFeatureTemplate: typeof import("./vpnInterfaceSviFeatureTemplate").VpnInterfaceSviFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceSviFeatureTemplate"], () => require("./vpnInterfaceSviFeatureTemplate"));

export { VpnInterfaceT1E1SerialFeatureTemplateArgs, VpnInterfaceT1E1SerialFeatureTemplateState } from "./vpnInterfaceT1E1SerialFeatureTemplate";
export type VpnInterfaceT1E1SerialFeatureTemplate = import("./vpnInterfaceT1E1SerialFeatureTemplate").VpnInterfaceT1E1SerialFeatureTemplate;
export const VpnInterfaceT1E1SerialFeatureTemplate: typeof import("./vpnInterfaceT1E1SerialFeatureTemplate").VpnInterfaceT1E1SerialFeatureTemplate = null as any;
utilities.lazyLoad(exports, ["VpnInterfaceT1E1SerialFeatureTemplate"], () => require("./vpnInterfaceT1E1SerialFeatureTemplate"));

export { VpnListPolicyObjectArgs, VpnListPolicyObjectState } from "./vpnListPolicyObject";
export type VpnListPolicyObject = import("./vpnListPolicyObject").VpnListPolicyObject;
export const VpnListPolicyObject: typeof import("./vpnListPolicyObject").VpnListPolicyObject = null as any;
utilities.lazyLoad(exports, ["VpnListPolicyObject"], () => require("./vpnListPolicyObject"));

export { VpnMembershipPolicyDefinitionArgs, VpnMembershipPolicyDefinitionState } from "./vpnMembershipPolicyDefinition";
export type VpnMembershipPolicyDefinition = import("./vpnMembershipPolicyDefinition").VpnMembershipPolicyDefinition;
export const VpnMembershipPolicyDefinition: typeof import("./vpnMembershipPolicyDefinition").VpnMembershipPolicyDefinition = null as any;
utilities.lazyLoad(exports, ["VpnMembershipPolicyDefinition"], () => require("./vpnMembershipPolicyDefinition"));

export { ZoneListPolicyObjectArgs, ZoneListPolicyObjectState } from "./zoneListPolicyObject";
export type ZoneListPolicyObject = import("./zoneListPolicyObject").ZoneListPolicyObject;
export const ZoneListPolicyObject: typeof import("./zoneListPolicyObject").ZoneListPolicyObject = null as any;
utilities.lazyLoad(exports, ["ZoneListPolicyObject"], () => require("./zoneListPolicyObject"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "sdwan:index/activateCentralizedPolicy:ActivateCentralizedPolicy":
                return new ActivateCentralizedPolicy(name, <any>undefined, { urn })
            case "sdwan:index/advancedInspectionProfilePolicyDefinition:AdvancedInspectionProfilePolicyDefinition":
                return new AdvancedInspectionProfilePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/advancedMalwareProtectionPolicyDefinition:AdvancedMalwareProtectionPolicyDefinition":
                return new AdvancedMalwareProtectionPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/allowUrlListPolicyObject:AllowUrlListPolicyObject":
                return new AllowUrlListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/appProbeClassPolicyObject:AppProbeClassPolicyObject":
                return new AppProbeClassPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/applicationAwareRoutingPolicyDefinition:ApplicationAwareRoutingPolicyDefinition":
                return new ApplicationAwareRoutingPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/applicationListPolicyObject:ApplicationListPolicyObject":
                return new ApplicationListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/applicationPriorityFeatureProfile:ApplicationPriorityFeatureProfile":
                return new ApplicationPriorityFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/applicationPriorityQosPolicyProfileParcel:ApplicationPriorityQosPolicyProfileParcel":
                return new ApplicationPriorityQosPolicyProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/asPathListPolicyObject:AsPathListPolicyObject":
                return new AsPathListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate":
                return new AttachFeatureDeviceTemplate(name, <any>undefined, { urn })
            case "sdwan:index/blockUrlListPolicyObject:BlockUrlListPolicyObject":
                return new BlockUrlListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/cedgeAaaFeatureTemplate:CedgeAaaFeatureTemplate":
                return new CedgeAaaFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate":
                return new CedgeGlobalFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgeIgmpFeatureTemplate:CedgeIgmpFeatureTemplate":
                return new CedgeIgmpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgeMulticastFeatureTemplate:CedgeMulticastFeatureTemplate":
                return new CedgeMulticastFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cedgePimFeatureTemplate:CedgePimFeatureTemplate":
                return new CedgePimFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cellularCedgeProfileFeatureTemplate:CellularCedgeProfileFeatureTemplate":
                return new CellularCedgeProfileFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate":
                return new CellularControllerFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cellularProfileFeatureTemplate:CellularProfileFeatureTemplate":
                return new CellularProfileFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/centralizedPolicy:CentralizedPolicy":
                return new CentralizedPolicy(name, <any>undefined, { urn })
            case "sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition":
                return new CflowdPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ciscoBannerFeatureTemplate:CiscoBannerFeatureTemplate":
                return new CiscoBannerFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate":
                return new CiscoBfdFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoBgpFeatureTemplate:CiscoBgpFeatureTemplate":
                return new CiscoBgpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate":
                return new CiscoDhcpServerFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoLoggingFeatureTemplate:CiscoLoggingFeatureTemplate":
                return new CiscoLoggingFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate":
                return new CiscoNtpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoOmpFeatureTemplate:CiscoOmpFeatureTemplate":
                return new CiscoOmpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoOspfFeatureTemplate:CiscoOspfFeatureTemplate":
                return new CiscoOspfFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoOspfv3FeatureTemplate:CiscoOspfv3FeatureTemplate":
                return new CiscoOspfv3FeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSecureInternetGatewayFeatureTemplate:CiscoSecureInternetGatewayFeatureTemplate":
                return new CiscoSecureInternetGatewayFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate":
                return new CiscoSecurityFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSigCredentialsFeatureTemplate:CiscoSigCredentialsFeatureTemplate":
                return new CiscoSigCredentialsFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate":
                return new CiscoSnmpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoSystemFeatureTemplate:CiscoSystemFeatureTemplate":
                return new CiscoSystemFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoThousandeyesFeatureTemplate:CiscoThousandeyesFeatureTemplate":
                return new CiscoThousandeyesFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate":
                return new CiscoTrustsecFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate":
                return new CiscoVpnFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnInterfaceFeatureTemplate:CiscoVpnInterfaceFeatureTemplate":
                return new CiscoVpnInterfaceFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate":
                return new CiscoVpnInterfaceGreFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate":
                return new CiscoVpnInterfaceIpsecFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate":
                return new CiscoWirelessLanFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/classMapPolicyObject:ClassMapPolicyObject":
                return new ClassMapPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/cliConfigProfileParcel:CliConfigProfileParcel":
                return new CliConfigProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/cliDeviceTemplate:CliDeviceTemplate":
                return new CliDeviceTemplate(name, <any>undefined, { urn })
            case "sdwan:index/cliFeatureProfile:CliFeatureProfile":
                return new CliFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/cliTemplateFeatureTemplate:CliTemplateFeatureTemplate":
                return new CliTemplateFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/colorListPolicyObject:ColorListPolicyObject":
                return new ColorListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/configurationGroup:ConfigurationGroup":
                return new ConfigurationGroup(name, <any>undefined, { urn })
            case "sdwan:index/configurationGroupDeploy:ConfigurationGroupDeploy":
                return new ConfigurationGroupDeploy(name, <any>undefined, { urn })
            case "sdwan:index/configurationGroupDeviceVariables:ConfigurationGroupDeviceVariables":
                return new ConfigurationGroupDeviceVariables(name, <any>undefined, { urn })
            case "sdwan:index/configurationGroupDevices:ConfigurationGroupDevices":
                return new ConfigurationGroupDevices(name, <any>undefined, { urn })
            case "sdwan:index/customControlTopologyPolicyDefinition:CustomControlTopologyPolicyDefinition":
                return new CustomControlTopologyPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/dataFqdnPrefixListPolicyObject:DataFqdnPrefixListPolicyObject":
                return new DataFqdnPrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/dataIpv4PrefixListPolicyObject:DataIpv4PrefixListPolicyObject":
                return new DataIpv4PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/dataIpv6PrefixListPolicyObject:DataIpv6PrefixListPolicyObject":
                return new DataIpv6PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition":
                return new DnsSecurityPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/domainListPolicyObject:DomainListPolicyObject":
                return new DomainListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/eigrpFeatureTemplate:EigrpFeatureTemplate":
                return new EigrpFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/expandedCommunityListPolicyObject:ExpandedCommunityListPolicyObject":
                return new ExpandedCommunityListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/extendedCommunityListPolicyObject:ExtendedCommunityListPolicyObject":
                return new ExtendedCommunityListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/featureDeviceTemplate:FeatureDeviceTemplate":
                return new FeatureDeviceTemplate(name, <any>undefined, { urn })
            case "sdwan:index/geoLocationListPolicyObject:GeoLocationListPolicyObject":
                return new GeoLocationListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate":
                return new GpsFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/hubAndSpokeTopologyPolicyDefinition:HubAndSpokeTopologyPolicyDefinition":
                return new HubAndSpokeTopologyPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/intrusionPreventionPolicyDefinition:IntrusionPreventionPolicyDefinition":
                return new IntrusionPreventionPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipsSignatureListPolicyObject:IpsSignatureListPolicyObject":
                return new IpsSignatureListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/ipv4AclPolicyDefinition:Ipv4AclPolicyDefinition":
                return new Ipv4AclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv4DeviceAclPolicyDefinition:Ipv4DeviceAclPolicyDefinition":
                return new Ipv4DeviceAclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv4PrefixListPolicyObject:Ipv4PrefixListPolicyObject":
                return new Ipv4PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/ipv6AclPolicyDefinition:Ipv6AclPolicyDefinition":
                return new Ipv6AclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv6DeviceAclPolicyDefinition:Ipv6DeviceAclPolicyDefinition":
                return new Ipv6DeviceAclPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ipv6PrefixListPolicyObject:Ipv6PrefixListPolicyObject":
                return new Ipv6PrefixListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/localApplicationListPolicyObject:LocalApplicationListPolicyObject":
                return new LocalApplicationListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/localizedPolicy:LocalizedPolicy":
                return new LocalizedPolicy(name, <any>undefined, { urn })
            case "sdwan:index/meshTopologyPolicyDefinition:MeshTopologyPolicyDefinition":
                return new MeshTopologyPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/mirrorPolicyObject:MirrorPolicyObject":
                return new MirrorPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/objectGroupPolicyDefinition:ObjectGroupPolicyDefinition":
                return new ObjectGroupPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/policerPolicyObject:PolicerPolicyObject":
                return new PolicerPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/portListPolicyObject:PortListPolicyObject":
                return new PortListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/preferredColorGroupPolicyObject:PreferredColorGroupPolicyObject":
                return new PreferredColorGroupPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/protocolListPolicyObject:ProtocolListPolicyObject":
                return new ProtocolListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/qosMapPolicyDefinition:QosMapPolicyDefinition":
                return new QosMapPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/regionListPolicyObject:RegionListPolicyObject":
                return new RegionListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/rewriteRulePolicyDefinition:RewriteRulePolicyDefinition":
                return new RewriteRulePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/routePolicyDefinition:RoutePolicyDefinition":
                return new RoutePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/ruleSetPolicyDefinition:RuleSetPolicyDefinition":
                return new RuleSetPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/securityAppHostingFeatureTemplate:SecurityAppHostingFeatureTemplate":
                return new SecurityAppHostingFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/securityPolicy:SecurityPolicy":
                return new SecurityPolicy(name, <any>undefined, { urn })
            case "sdwan:index/serviceFeatureProfile:ServiceFeatureProfile":
                return new ServiceFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnInterfaceEthernetProfileParcel:ServiceLanVpnInterfaceEthernetProfileParcel":
                return new ServiceLanVpnInterfaceEthernetProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/serviceLanVpnProfileParcel:ServiceLanVpnProfileParcel":
                return new ServiceLanVpnProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/serviceTrackerProfileParcel:ServiceTrackerProfileParcel":
                return new ServiceTrackerProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/siteListPolicyObject:SiteListPolicyObject":
                return new SiteListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/slaClassPolicyObject:SlaClassPolicyObject":
                return new SlaClassPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/standardCommunityListPolicyObject:StandardCommunityListPolicyObject":
                return new StandardCommunityListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/switchportFeatureTemplate:SwitchportFeatureTemplate":
                return new SwitchportFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/systemAaaProfileParcel:SystemAaaProfileParcel":
                return new SystemAaaProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemBannerProfileParcel:SystemBannerProfileParcel":
                return new SystemBannerProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemBasicProfileParcel:SystemBasicProfileParcel":
                return new SystemBasicProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemBfdProfileParcel:SystemBfdProfileParcel":
                return new SystemBfdProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemFeatureProfile:SystemFeatureProfile":
                return new SystemFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/systemFlexiblePortSpeedProfileParcel:SystemFlexiblePortSpeedProfileParcel":
                return new SystemFlexiblePortSpeedProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemGlobalProfileParcel:SystemGlobalProfileParcel":
                return new SystemGlobalProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemLoggingProfileParcel:SystemLoggingProfileParcel":
                return new SystemLoggingProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemMrfProfileParcel:SystemMrfProfileParcel":
                return new SystemMrfProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemNtpProfileParcel:SystemNtpProfileParcel":
                return new SystemNtpProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemOmpProfileParcel:SystemOmpProfileParcel":
                return new SystemOmpProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemPerformanceMonitoringProfileParcel:SystemPerformanceMonitoringProfileParcel":
                return new SystemPerformanceMonitoringProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemRemoteAccessProfileParcel:SystemRemoteAccessProfileParcel":
                return new SystemRemoteAccessProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemSecurityProfileParcel:SystemSecurityProfileParcel":
                return new SystemSecurityProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/systemSnmpProfileParcel:SystemSnmpProfileParcel":
                return new SystemSnmpProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/tlocListPolicyObject:TlocListPolicyObject":
                return new TlocListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition":
                return new TlsSslDecryptionPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/tlsSslProfilePolicyDefinition:TlsSslProfilePolicyDefinition":
                return new TlsSslProfilePolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/trafficDataPolicyDefinition:TrafficDataPolicyDefinition":
                return new TrafficDataPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/transportFeatureProfile:TransportFeatureProfile":
                return new TransportFeatureProfile(name, <any>undefined, { urn })
            case "sdwan:index/transportIpv6TrackerProfileParcel:TransportIpv6TrackerProfileParcel":
                return new TransportIpv6TrackerProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/transportManagementVpnInterfaceEthernetProfileParcel:TransportManagementVpnInterfaceEthernetProfileParcel":
                return new TransportManagementVpnInterfaceEthernetProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/transportManagementVpnProfileParcel:TransportManagementVpnProfileParcel":
                return new TransportManagementVpnProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/transportRoutingBgpProfileParcel:TransportRoutingBgpProfileParcel":
                return new TransportRoutingBgpProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnInterfaceEthernetProfileParcel:TransportWanVpnInterfaceEthernetProfileParcel":
                return new TransportWanVpnInterfaceEthernetProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/transportWanVpnProfileParcel:TransportWanVpnProfileParcel":
                return new TransportWanVpnProfileParcel(name, <any>undefined, { urn })
            case "sdwan:index/urlFilteringPolicyDefinition:UrlFilteringPolicyDefinition":
                return new UrlFilteringPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceCellularFeatureTemplate:VpnInterfaceCellularFeatureTemplate":
                return new VpnInterfaceCellularFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceDslIpoeFeatureTemplate:VpnInterfaceDslIpoeFeatureTemplate":
                return new VpnInterfaceDslIpoeFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceDslPppoaFeatureTemplate:VpnInterfaceDslPppoaFeatureTemplate":
                return new VpnInterfaceDslPppoaFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate":
                return new VpnInterfaceDslPppoeFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceEthernetPppoeFeatureTemplate:VpnInterfaceEthernetPppoeFeatureTemplate":
                return new VpnInterfaceEthernetPppoeFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceMultilinkFeatureTemplate:VpnInterfaceMultilinkFeatureTemplate":
                return new VpnInterfaceMultilinkFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceSviFeatureTemplate:VpnInterfaceSviFeatureTemplate":
                return new VpnInterfaceSviFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnInterfaceT1E1SerialFeatureTemplate:VpnInterfaceT1E1SerialFeatureTemplate":
                return new VpnInterfaceT1E1SerialFeatureTemplate(name, <any>undefined, { urn })
            case "sdwan:index/vpnListPolicyObject:VpnListPolicyObject":
                return new VpnListPolicyObject(name, <any>undefined, { urn })
            case "sdwan:index/vpnMembershipPolicyDefinition:VpnMembershipPolicyDefinition":
                return new VpnMembershipPolicyDefinition(name, <any>undefined, { urn })
            case "sdwan:index/zoneListPolicyObject:ZoneListPolicyObject":
                return new ZoneListPolicyObject(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("sdwan", "index/activateCentralizedPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/advancedInspectionProfilePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/advancedMalwareProtectionPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/allowUrlListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/appProbeClassPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationAwareRoutingPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationPriorityFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/applicationPriorityQosPolicyProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/asPathListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/attachFeatureDeviceTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/blockUrlListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeAaaFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeGlobalFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeIgmpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgeMulticastFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cedgePimFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cellularCedgeProfileFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cellularControllerFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cellularProfileFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/centralizedPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cflowdPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoBannerFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoBfdFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoBgpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoDhcpServerFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoLoggingFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoNtpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoOmpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoOspfFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoOspfv3FeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSecureInternetGatewayFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSecurityFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSigCredentialsFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSnmpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoSystemFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoThousandeyesFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoTrustsecFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnInterfaceFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnInterfaceGreFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoVpnInterfaceIpsecFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ciscoWirelessLanFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/classMapPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliConfigProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliDeviceTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/cliTemplateFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/colorListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/configurationGroup", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/configurationGroupDeploy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/configurationGroupDeviceVariables", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/configurationGroupDevices", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/customControlTopologyPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dataFqdnPrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dataIpv4PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dataIpv6PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/dnsSecurityPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/domainListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/eigrpFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/expandedCommunityListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/extendedCommunityListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/featureDeviceTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/geoLocationListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/gpsFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/hubAndSpokeTopologyPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/intrusionPreventionPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipsSignatureListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv4AclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv4DeviceAclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv4PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv6AclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv6DeviceAclPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ipv6PrefixListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/localApplicationListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/localizedPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/meshTopologyPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/mirrorPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/objectGroupPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/policerPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/portListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/preferredColorGroupPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/protocolListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/qosMapPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/regionListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/rewriteRulePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/routePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/ruleSetPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/securityAppHostingFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/securityPolicy", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnInterfaceEthernetProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceLanVpnProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/serviceTrackerProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/siteListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/slaClassPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/standardCommunityListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/switchportFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemAaaProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemBannerProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemBasicProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemBfdProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemFlexiblePortSpeedProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemGlobalProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemLoggingProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemMrfProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemNtpProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemOmpProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemPerformanceMonitoringProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemRemoteAccessProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemSecurityProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/systemSnmpProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/tlocListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/tlsSslDecryptionPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/tlsSslProfilePolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/trafficDataPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportFeatureProfile", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportIpv6TrackerProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportManagementVpnInterfaceEthernetProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportManagementVpnProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportRoutingBgpProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnInterfaceEthernetProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/transportWanVpnProfileParcel", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/urlFilteringPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceCellularFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceDslIpoeFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceDslPppoaFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceDslPppoeFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceEthernetPppoeFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceMultilinkFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceSviFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnInterfaceT1E1SerialFeatureTemplate", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnListPolicyObject", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/vpnMembershipPolicyDefinition", _module)
pulumi.runtime.registerResourceModule("sdwan", "index/zoneListPolicyObject", _module)
pulumi.runtime.registerResourcePackage("sdwan", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:sdwan") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
