// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a TLS SSL Decryption Policy Definition .
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
 * ```
 */
export class TlsSslDecryptionPolicyDefinition extends pulumi.CustomResource {
    /**
     * Get an existing TlsSslDecryptionPolicyDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsSslDecryptionPolicyDefinitionState, opts?: pulumi.CustomResourceOptions): TlsSslDecryptionPolicyDefinition {
        return new TlsSslDecryptionPolicyDefinition(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition';

    /**
     * Returns true if the given object is an instance of TlsSslDecryptionPolicyDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsSslDecryptionPolicyDefinition {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsSslDecryptionPolicyDefinition.__pulumiType;
    }

    /**
     * Certificate Lifetime(in Days)
     */
    public readonly certificateLifetimeInDays!: pulumi.Output<number | undefined>;
    /**
     * Certificate revocation status - Choices: `ocsp`, `none`
     */
    public readonly certificateRevocationStatus!: pulumi.Output<string | undefined>;
    /**
     * Default action (applies when `mode` set to `security`) - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
     */
    public readonly defaultAction!: pulumi.Output<string | undefined>;
    /**
     * The description of the policy definition.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * EC Key Type - Choices: `P256`, `P384`, `P521`
     */
    public readonly ecKeyType!: pulumi.Output<string | undefined>;
    /**
     * Expired certificate action - Choices: `drop`, `decrypt`
     */
    public readonly expiredCertificate!: pulumi.Output<string | undefined>;
    /**
     * Failure mode - Choices: `open`, `close`
     */
    public readonly failureMode!: pulumi.Output<string | undefined>;
    /**
     * Minimal TLS Version - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     */
    public readonly minimalTlsVersion!: pulumi.Output<string | undefined>;
    /**
     * The policy mode - Choices: `security`, `unified`
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name of the policy definition.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of network rules (applies when `mode` set to `security`)
     */
    public readonly networkRules!: pulumi.Output<outputs.TlsSslDecryptionPolicyDefinitionNetworkRule[] | undefined>;
    /**
     * RSA key pair modules - Choices: `1024`, `2048`, `4096`
     */
    public readonly rsaKeyPairModulus!: pulumi.Output<string | undefined>;
    /**
     * SSL decryption enabled
     */
    public readonly sslDecryptionEnabled!: pulumi.Output<string | undefined>;
    /**
     * Unknown revocation status action - Choices: `drop`, `decrypt`
     */
    public readonly unknownRevocationStatus!: pulumi.Output<string | undefined>;
    /**
     * Unsupported cipher suites action - Choices: `drop`, `no-decrypt`
     */
    public readonly unsupportedCipherSuites!: pulumi.Output<string | undefined>;
    /**
     * Unsupported protocol versions action - Choices: `drop`, `no-decrypt`
     */
    public readonly unsupportedProtocolVersions!: pulumi.Output<string | undefined>;
    /**
     * Untrusted certificate action - Choices: `drop`, `decrypt`
     */
    public readonly untrustedCertificate!: pulumi.Output<string | undefined>;
    /**
     * List of url rules (applies when `mode` set to `security`)
     */
    public readonly urlRules!: pulumi.Output<outputs.TlsSslDecryptionPolicyDefinitionUrlRule[] | undefined>;
    /**
     * Use default CA certificate bundle
     */
    public readonly useDefaultCaCertBundle!: pulumi.Output<boolean | undefined>;
    /**
     * The version of the object
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a TlsSslDecryptionPolicyDefinition resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsSslDecryptionPolicyDefinitionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsSslDecryptionPolicyDefinitionArgs | TlsSslDecryptionPolicyDefinitionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsSslDecryptionPolicyDefinitionState | undefined;
            resourceInputs["certificateLifetimeInDays"] = state ? state.certificateLifetimeInDays : undefined;
            resourceInputs["certificateRevocationStatus"] = state ? state.certificateRevocationStatus : undefined;
            resourceInputs["defaultAction"] = state ? state.defaultAction : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ecKeyType"] = state ? state.ecKeyType : undefined;
            resourceInputs["expiredCertificate"] = state ? state.expiredCertificate : undefined;
            resourceInputs["failureMode"] = state ? state.failureMode : undefined;
            resourceInputs["minimalTlsVersion"] = state ? state.minimalTlsVersion : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRules"] = state ? state.networkRules : undefined;
            resourceInputs["rsaKeyPairModulus"] = state ? state.rsaKeyPairModulus : undefined;
            resourceInputs["sslDecryptionEnabled"] = state ? state.sslDecryptionEnabled : undefined;
            resourceInputs["unknownRevocationStatus"] = state ? state.unknownRevocationStatus : undefined;
            resourceInputs["unsupportedCipherSuites"] = state ? state.unsupportedCipherSuites : undefined;
            resourceInputs["unsupportedProtocolVersions"] = state ? state.unsupportedProtocolVersions : undefined;
            resourceInputs["untrustedCertificate"] = state ? state.untrustedCertificate : undefined;
            resourceInputs["urlRules"] = state ? state.urlRules : undefined;
            resourceInputs["useDefaultCaCertBundle"] = state ? state.useDefaultCaCertBundle : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as TlsSslDecryptionPolicyDefinitionArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            resourceInputs["certificateLifetimeInDays"] = args ? args.certificateLifetimeInDays : undefined;
            resourceInputs["certificateRevocationStatus"] = args ? args.certificateRevocationStatus : undefined;
            resourceInputs["defaultAction"] = args ? args.defaultAction : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ecKeyType"] = args ? args.ecKeyType : undefined;
            resourceInputs["expiredCertificate"] = args ? args.expiredCertificate : undefined;
            resourceInputs["failureMode"] = args ? args.failureMode : undefined;
            resourceInputs["minimalTlsVersion"] = args ? args.minimalTlsVersion : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRules"] = args ? args.networkRules : undefined;
            resourceInputs["rsaKeyPairModulus"] = args ? args.rsaKeyPairModulus : undefined;
            resourceInputs["sslDecryptionEnabled"] = args ? args.sslDecryptionEnabled : undefined;
            resourceInputs["unknownRevocationStatus"] = args ? args.unknownRevocationStatus : undefined;
            resourceInputs["unsupportedCipherSuites"] = args ? args.unsupportedCipherSuites : undefined;
            resourceInputs["unsupportedProtocolVersions"] = args ? args.unsupportedProtocolVersions : undefined;
            resourceInputs["untrustedCertificate"] = args ? args.untrustedCertificate : undefined;
            resourceInputs["urlRules"] = args ? args.urlRules : undefined;
            resourceInputs["useDefaultCaCertBundle"] = args ? args.useDefaultCaCertBundle : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsSslDecryptionPolicyDefinition.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsSslDecryptionPolicyDefinition resources.
 */
export interface TlsSslDecryptionPolicyDefinitionState {
    /**
     * Certificate Lifetime(in Days)
     */
    certificateLifetimeInDays?: pulumi.Input<number>;
    /**
     * Certificate revocation status - Choices: `ocsp`, `none`
     */
    certificateRevocationStatus?: pulumi.Input<string>;
    /**
     * Default action (applies when `mode` set to `security`) - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
     */
    defaultAction?: pulumi.Input<string>;
    /**
     * The description of the policy definition.
     */
    description?: pulumi.Input<string>;
    /**
     * EC Key Type - Choices: `P256`, `P384`, `P521`
     */
    ecKeyType?: pulumi.Input<string>;
    /**
     * Expired certificate action - Choices: `drop`, `decrypt`
     */
    expiredCertificate?: pulumi.Input<string>;
    /**
     * Failure mode - Choices: `open`, `close`
     */
    failureMode?: pulumi.Input<string>;
    /**
     * Minimal TLS Version - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     */
    minimalTlsVersion?: pulumi.Input<string>;
    /**
     * The policy mode - Choices: `security`, `unified`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy definition.
     */
    name?: pulumi.Input<string>;
    /**
     * List of network rules (applies when `mode` set to `security`)
     */
    networkRules?: pulumi.Input<pulumi.Input<inputs.TlsSslDecryptionPolicyDefinitionNetworkRule>[]>;
    /**
     * RSA key pair modules - Choices: `1024`, `2048`, `4096`
     */
    rsaKeyPairModulus?: pulumi.Input<string>;
    /**
     * SSL decryption enabled
     */
    sslDecryptionEnabled?: pulumi.Input<string>;
    /**
     * Unknown revocation status action - Choices: `drop`, `decrypt`
     */
    unknownRevocationStatus?: pulumi.Input<string>;
    /**
     * Unsupported cipher suites action - Choices: `drop`, `no-decrypt`
     */
    unsupportedCipherSuites?: pulumi.Input<string>;
    /**
     * Unsupported protocol versions action - Choices: `drop`, `no-decrypt`
     */
    unsupportedProtocolVersions?: pulumi.Input<string>;
    /**
     * Untrusted certificate action - Choices: `drop`, `decrypt`
     */
    untrustedCertificate?: pulumi.Input<string>;
    /**
     * List of url rules (applies when `mode` set to `security`)
     */
    urlRules?: pulumi.Input<pulumi.Input<inputs.TlsSslDecryptionPolicyDefinitionUrlRule>[]>;
    /**
     * Use default CA certificate bundle
     */
    useDefaultCaCertBundle?: pulumi.Input<boolean>;
    /**
     * The version of the object
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a TlsSslDecryptionPolicyDefinition resource.
 */
export interface TlsSslDecryptionPolicyDefinitionArgs {
    /**
     * Certificate Lifetime(in Days)
     */
    certificateLifetimeInDays?: pulumi.Input<number>;
    /**
     * Certificate revocation status - Choices: `ocsp`, `none`
     */
    certificateRevocationStatus?: pulumi.Input<string>;
    /**
     * Default action (applies when `mode` set to `security`) - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
     */
    defaultAction?: pulumi.Input<string>;
    /**
     * The description of the policy definition.
     */
    description: pulumi.Input<string>;
    /**
     * EC Key Type - Choices: `P256`, `P384`, `P521`
     */
    ecKeyType?: pulumi.Input<string>;
    /**
     * Expired certificate action - Choices: `drop`, `decrypt`
     */
    expiredCertificate?: pulumi.Input<string>;
    /**
     * Failure mode - Choices: `open`, `close`
     */
    failureMode?: pulumi.Input<string>;
    /**
     * Minimal TLS Version - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     */
    minimalTlsVersion?: pulumi.Input<string>;
    /**
     * The policy mode - Choices: `security`, `unified`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the policy definition.
     */
    name?: pulumi.Input<string>;
    /**
     * List of network rules (applies when `mode` set to `security`)
     */
    networkRules?: pulumi.Input<pulumi.Input<inputs.TlsSslDecryptionPolicyDefinitionNetworkRule>[]>;
    /**
     * RSA key pair modules - Choices: `1024`, `2048`, `4096`
     */
    rsaKeyPairModulus?: pulumi.Input<string>;
    /**
     * SSL decryption enabled
     */
    sslDecryptionEnabled?: pulumi.Input<string>;
    /**
     * Unknown revocation status action - Choices: `drop`, `decrypt`
     */
    unknownRevocationStatus?: pulumi.Input<string>;
    /**
     * Unsupported cipher suites action - Choices: `drop`, `no-decrypt`
     */
    unsupportedCipherSuites?: pulumi.Input<string>;
    /**
     * Unsupported protocol versions action - Choices: `drop`, `no-decrypt`
     */
    unsupportedProtocolVersions?: pulumi.Input<string>;
    /**
     * Untrusted certificate action - Choices: `drop`, `decrypt`
     */
    untrustedCertificate?: pulumi.Input<string>;
    /**
     * List of url rules (applies when `mode` set to `security`)
     */
    urlRules?: pulumi.Input<pulumi.Input<inputs.TlsSslDecryptionPolicyDefinitionUrlRule>[]>;
    /**
     * Use default CA certificate bundle
     */
    useDefaultCaCertBundle?: pulumi.Input<boolean>;
}
