// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource can manage a Service Tracker Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = new sdwan.ServiceTrackerFeature("example", {
 *     name: "Example",
 *     description: "My Example",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     trackerName: "TRACKER_2",
 *     endpointApiUrl: "google.com",
 *     endpointDnsName: "google.com",
 *     endpointIp: "1.2.3.4",
 *     protocol: "tcp",
 *     port: 123,
 *     interval: 30,
 *     multiplier: 3,
 *     threshold: 300,
 *     endpointTrackerType: "static-route",
 *     trackerType: "endpoint",
 * });
 * ```
 *
 * ## Import
 *
 * The `pulumi import` command can be used, for example:
 *
 * Expected import identifier with the format: "service_tracker_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/serviceTrackerFeature:ServiceTrackerFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class ServiceTrackerFeature extends pulumi.CustomResource {
    /**
     * Get an existing ServiceTrackerFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceTrackerFeatureState, opts?: pulumi.CustomResourceOptions): ServiceTrackerFeature {
        return new ServiceTrackerFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/serviceTrackerFeature:ServiceTrackerFeature';

    /**
     * Returns true if the given object is an instance of ServiceTrackerFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceTrackerFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceTrackerFeature.__pulumiType;
    }

    /**
     * The description of the Feature
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * API url of endpoint
     */
    declare public readonly endpointApiUrl: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly endpointApiUrlVariable: pulumi.Output<string | undefined>;
    /**
     * Endpoint DNS Name
     */
    declare public readonly endpointDnsName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly endpointDnsNameVariable: pulumi.Output<string | undefined>;
    /**
     * Endpoint IP
     */
    declare public readonly endpointIp: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly endpointIpVariable: pulumi.Output<string | undefined>;
    /**
     * Endpoint Tracker Type
     *   - Choices: `static-route`
     *   - Default value: `static-route`
     */
    declare public readonly endpointTrackerType: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly endpointTrackerTypeVariable: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    declare public readonly featureProfileId: pulumi.Output<string>;
    /**
     * Interval
     *   - Range: `20`-`600`
     *   - Default value: `60`
     */
    declare public readonly interval: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly intervalVariable: pulumi.Output<string | undefined>;
    /**
     * Multiplier
     *   - Range: `1`-`10`
     *   - Default value: `3`
     */
    declare public readonly multiplier: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly multiplierVariable: pulumi.Output<string | undefined>;
    /**
     * The name of the Feature
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * - Range: `1`-`65535`
     */
    declare public readonly port: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly portVariable: pulumi.Output<string | undefined>;
    /**
     * - Choices: `tcp`, `udp`
     */
    declare public readonly protocol: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly protocolVariable: pulumi.Output<string | undefined>;
    /**
     * Threshold
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     */
    declare public readonly threshold: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    declare public readonly thresholdVariable: pulumi.Output<string | undefined>;
    /**
     * Tracker Name
     */
    declare public readonly trackerName: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly trackerNameVariable: pulumi.Output<string | undefined>;
    /**
     * Tracker Type
     *   - Choices: `endpoint`
     *   - Default value: `endpoint`
     */
    declare public readonly trackerType: pulumi.Output<string | undefined>;
    /**
     * Variable name
     */
    declare public readonly trackerTypeVariable: pulumi.Output<string | undefined>;
    /**
     * The version of the Feature
     */
    declare public /*out*/ readonly version: pulumi.Output<number>;

    /**
     * Create a ServiceTrackerFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceTrackerFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceTrackerFeatureArgs | ServiceTrackerFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceTrackerFeatureState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["endpointApiUrl"] = state?.endpointApiUrl;
            resourceInputs["endpointApiUrlVariable"] = state?.endpointApiUrlVariable;
            resourceInputs["endpointDnsName"] = state?.endpointDnsName;
            resourceInputs["endpointDnsNameVariable"] = state?.endpointDnsNameVariable;
            resourceInputs["endpointIp"] = state?.endpointIp;
            resourceInputs["endpointIpVariable"] = state?.endpointIpVariable;
            resourceInputs["endpointTrackerType"] = state?.endpointTrackerType;
            resourceInputs["endpointTrackerTypeVariable"] = state?.endpointTrackerTypeVariable;
            resourceInputs["featureProfileId"] = state?.featureProfileId;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["intervalVariable"] = state?.intervalVariable;
            resourceInputs["multiplier"] = state?.multiplier;
            resourceInputs["multiplierVariable"] = state?.multiplierVariable;
            resourceInputs["name"] = state?.name;
            resourceInputs["port"] = state?.port;
            resourceInputs["portVariable"] = state?.portVariable;
            resourceInputs["protocol"] = state?.protocol;
            resourceInputs["protocolVariable"] = state?.protocolVariable;
            resourceInputs["threshold"] = state?.threshold;
            resourceInputs["thresholdVariable"] = state?.thresholdVariable;
            resourceInputs["trackerName"] = state?.trackerName;
            resourceInputs["trackerNameVariable"] = state?.trackerNameVariable;
            resourceInputs["trackerType"] = state?.trackerType;
            resourceInputs["trackerTypeVariable"] = state?.trackerTypeVariable;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as ServiceTrackerFeatureArgs | undefined;
            if (args?.featureProfileId === undefined && !opts.urn) {
                throw new Error("Missing required property 'featureProfileId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["endpointApiUrl"] = args?.endpointApiUrl;
            resourceInputs["endpointApiUrlVariable"] = args?.endpointApiUrlVariable;
            resourceInputs["endpointDnsName"] = args?.endpointDnsName;
            resourceInputs["endpointDnsNameVariable"] = args?.endpointDnsNameVariable;
            resourceInputs["endpointIp"] = args?.endpointIp;
            resourceInputs["endpointIpVariable"] = args?.endpointIpVariable;
            resourceInputs["endpointTrackerType"] = args?.endpointTrackerType;
            resourceInputs["endpointTrackerTypeVariable"] = args?.endpointTrackerTypeVariable;
            resourceInputs["featureProfileId"] = args?.featureProfileId;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["intervalVariable"] = args?.intervalVariable;
            resourceInputs["multiplier"] = args?.multiplier;
            resourceInputs["multiplierVariable"] = args?.multiplierVariable;
            resourceInputs["name"] = args?.name;
            resourceInputs["port"] = args?.port;
            resourceInputs["portVariable"] = args?.portVariable;
            resourceInputs["protocol"] = args?.protocol;
            resourceInputs["protocolVariable"] = args?.protocolVariable;
            resourceInputs["threshold"] = args?.threshold;
            resourceInputs["thresholdVariable"] = args?.thresholdVariable;
            resourceInputs["trackerName"] = args?.trackerName;
            resourceInputs["trackerNameVariable"] = args?.trackerNameVariable;
            resourceInputs["trackerType"] = args?.trackerType;
            resourceInputs["trackerTypeVariable"] = args?.trackerTypeVariable;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceTrackerFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceTrackerFeature resources.
 */
export interface ServiceTrackerFeatureState {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * API url of endpoint
     */
    endpointApiUrl?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointApiUrlVariable?: pulumi.Input<string>;
    /**
     * Endpoint DNS Name
     */
    endpointDnsName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointDnsNameVariable?: pulumi.Input<string>;
    /**
     * Endpoint IP
     */
    endpointIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointIpVariable?: pulumi.Input<string>;
    /**
     * Endpoint Tracker Type
     *   - Choices: `static-route`
     *   - Default value: `static-route`
     */
    endpointTrackerType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointTrackerTypeVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Interval
     *   - Range: `20`-`600`
     *   - Default value: `60`
     */
    interval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    intervalVariable?: pulumi.Input<string>;
    /**
     * Multiplier
     *   - Range: `1`-`10`
     *   - Default value: `3`
     */
    multiplier?: pulumi.Input<number>;
    /**
     * Variable name
     */
    multiplierVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * - Range: `1`-`65535`
     */
    port?: pulumi.Input<number>;
    /**
     * Variable name
     */
    portVariable?: pulumi.Input<string>;
    /**
     * - Choices: `tcp`, `udp`
     */
    protocol?: pulumi.Input<string>;
    /**
     * Variable name
     */
    protocolVariable?: pulumi.Input<string>;
    /**
     * Threshold
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     */
    threshold?: pulumi.Input<number>;
    /**
     * Variable name
     */
    thresholdVariable?: pulumi.Input<string>;
    /**
     * Tracker Name
     */
    trackerName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerNameVariable?: pulumi.Input<string>;
    /**
     * Tracker Type
     *   - Choices: `endpoint`
     *   - Default value: `endpoint`
     */
    trackerType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerTypeVariable?: pulumi.Input<string>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ServiceTrackerFeature resource.
 */
export interface ServiceTrackerFeatureArgs {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * API url of endpoint
     */
    endpointApiUrl?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointApiUrlVariable?: pulumi.Input<string>;
    /**
     * Endpoint DNS Name
     */
    endpointDnsName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointDnsNameVariable?: pulumi.Input<string>;
    /**
     * Endpoint IP
     */
    endpointIp?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointIpVariable?: pulumi.Input<string>;
    /**
     * Endpoint Tracker Type
     *   - Choices: `static-route`
     *   - Default value: `static-route`
     */
    endpointTrackerType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    endpointTrackerTypeVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * Interval
     *   - Range: `20`-`600`
     *   - Default value: `60`
     */
    interval?: pulumi.Input<number>;
    /**
     * Variable name
     */
    intervalVariable?: pulumi.Input<string>;
    /**
     * Multiplier
     *   - Range: `1`-`10`
     *   - Default value: `3`
     */
    multiplier?: pulumi.Input<number>;
    /**
     * Variable name
     */
    multiplierVariable?: pulumi.Input<string>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * - Range: `1`-`65535`
     */
    port?: pulumi.Input<number>;
    /**
     * Variable name
     */
    portVariable?: pulumi.Input<string>;
    /**
     * - Choices: `tcp`, `udp`
     */
    protocol?: pulumi.Input<string>;
    /**
     * Variable name
     */
    protocolVariable?: pulumi.Input<string>;
    /**
     * Threshold
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     */
    threshold?: pulumi.Input<number>;
    /**
     * Variable name
     */
    thresholdVariable?: pulumi.Input<string>;
    /**
     * Tracker Name
     */
    trackerName?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerNameVariable?: pulumi.Input<string>;
    /**
     * Tracker Type
     *   - Choices: `endpoint`
     *   - Default value: `endpoint`
     */
    trackerType?: pulumi.Input<string>;
    /**
     * Variable name
     */
    trackerTypeVariable?: pulumi.Input<string>;
}
