// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This data source can read the Transport WAN VPN Interface IPSEC Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getTransportWanVpnInterfaceIpsecFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getTransportWanVpnInterfaceIpsecFeature(args: GetTransportWanVpnInterfaceIpsecFeatureArgs, opts?: pulumi.InvokeOptions): Promise<GetTransportWanVpnInterfaceIpsecFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("sdwan:index/getTransportWanVpnInterfaceIpsecFeature:getTransportWanVpnInterfaceIpsecFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportWanVpnFeatureId": args.transportWanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceIpsecFeature.
 */
export interface GetTransportWanVpnInterfaceIpsecFeatureArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: string;
    /**
     * The id of the Feature
     */
    id: string;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: string;
}

/**
 * A collection of values returned by getTransportWanVpnInterfaceIpsecFeature.
 */
export interface GetTransportWanVpnInterfaceIpsecFeatureResult {
    /**
     * Enable Application Tunnel Type
     */
    readonly applicationTunnelType: string;
    /**
     * Variable name
     */
    readonly applicationTunnelTypeVariable: string;
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     */
    readonly clearDontFragment: boolean;
    /**
     * Variable name
     */
    readonly clearDontFragmentVariable: string;
    /**
     * The description of the Feature
     */
    readonly description: string;
    /**
     * IKE keepalive interval (seconds)
     */
    readonly dpdInterval: number;
    /**
     * Variable name
     */
    readonly dpdIntervalVariable: string;
    /**
     * IKE keepalive retries
     */
    readonly dpdRetries: number;
    /**
     * Variable name
     */
    readonly dpdRetriesVariable: string;
    /**
     * Feature Profile ID
     */
    readonly featureProfileId: string;
    /**
     * The id of the Feature
     */
    readonly id: string;
    /**
     * IKE identity the IKE preshared secret belongs to
     */
    readonly ikeCiphersuite: string;
    /**
     * Variable name
     */
    readonly ikeCiphersuiteVariable: string;
    /**
     * IKE Diffie Hellman Groups
     */
    readonly ikeDiffieHellmanGroup: string;
    /**
     * Variable name
     */
    readonly ikeDiffieHellmanGroupVariable: string;
    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     */
    readonly ikeIdLocalEndPoint: string;
    /**
     * Variable name
     */
    readonly ikeIdLocalEndPointVariable: string;
    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     */
    readonly ikeIdRemoteEndPoint: string;
    /**
     * Variable name
     */
    readonly ikeIdRemoteEndPointVariable: string;
    /**
     * IKE integrity protocol
     */
    readonly ikeIntegrityProtocol: string;
    /**
     * Variable name
     */
    readonly ikeIntegrityProtocolVariable: string;
    /**
     * Use preshared key to authenticate IKE peer
     */
    readonly ikePresharedKey: string;
    /**
     * Variable name
     */
    readonly ikePresharedKeyVariable: string;
    /**
     * IKE rekey interval \n\n seconds
     */
    readonly ikeRekeyInterval: number;
    /**
     * Variable name
     */
    readonly ikeRekeyIntervalVariable: string;
    /**
     * IKE Version \n\n
     */
    readonly ikeVersion: number;
    /**
     * Interface description
     */
    readonly interfaceDescription: string;
    /**
     * Variable name
     */
    readonly interfaceDescriptionVariable: string;
    /**
     * Interface name: IPsec when present
     */
    readonly interfaceName: string;
    /**
     * Variable name
     */
    readonly interfaceNameVariable: string;
    /**
     * Interface MTU \n\n, in bytes
     */
    readonly ipMtu: number;
    /**
     * Variable name
     */
    readonly ipMtuVariable: string;
    /**
     * IPsec(ESP) encryption and integrity protocol
     */
    readonly ipsecCiphersuite: string;
    /**
     * Variable name
     */
    readonly ipsecCiphersuiteVariable: string;
    /**
     * IPsec rekey interval \n\n seconds
     */
    readonly ipsecRekeyInterval: number;
    /**
     * Variable name
     */
    readonly ipsecRekeyIntervalVariable: string;
    /**
     * Replay window size 32..8192 (must be a power of 2)
     */
    readonly ipsecReplayWindow: number;
    /**
     * Variable name
     */
    readonly ipsecReplayWindowVariable: string;
    readonly ipv4Address: string;
    /**
     * Variable name
     */
    readonly ipv4AddressVariable: string;
    readonly ipv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly ipv4SubnetMaskVariable: string;
    /**
     * The name of the Feature
     */
    readonly name: string;
    /**
     * IPsec perfect forward secrecy settings
     */
    readonly perfectForwardSecrecy: string;
    /**
     * Variable name
     */
    readonly perfectForwardSecrecyVariable: string;
    /**
     * Administrative state
     */
    readonly shutdown: boolean;
    /**
     * Variable name
     */
    readonly shutdownVariable: string;
    /**
     * TCP MSS on SYN packets, in bytes
     */
    readonly tcpMss: number;
    /**
     * Variable name
     */
    readonly tcpMssVariable: string;
    /**
     * Enable tracker for this interface
     */
    readonly trackerId: string;
    /**
     * Variable name
     */
    readonly trackerIdVariable: string;
    /**
     * Transport WAN VPN Feature ID
     */
    readonly transportWanVpnFeatureId: string;
    readonly tunnelDestinationIpv4Address: string;
    /**
     * Variable name
     */
    readonly tunnelDestinationIpv4AddressVariable: string;
    readonly tunnelDestinationIpv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly tunnelDestinationIpv4SubnetMaskVariable: string;
    /**
     * \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     */
    readonly tunnelRouteVia: string;
    /**
     * Variable name
     */
    readonly tunnelRouteViaVariable: string;
    /**
     * \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     */
    readonly tunnelSourceInterface: string;
    /**
     * Variable name
     */
    readonly tunnelSourceInterfaceVariable: string;
    readonly tunnelSourceIpv4Address: string;
    /**
     * Variable name
     */
    readonly tunnelSourceIpv4AddressVariable: string;
    readonly tunnelSourceIpv4SubnetMask: string;
    /**
     * Variable name
     */
    readonly tunnelSourceIpv4SubnetMaskVariable: string;
    /**
     * The version of the Feature
     */
    readonly version: number;
}
/**
 * This data source can read the Transport WAN VPN Interface IPSEC Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as sdwan from "@pulumi/sdwan";
 *
 * const example = sdwan.getTransportWanVpnInterfaceIpsecFeature({
 *     id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
 *     featureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
 *     transportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
 * });
 * ```
 */
export function getTransportWanVpnInterfaceIpsecFeatureOutput(args: GetTransportWanVpnInterfaceIpsecFeatureOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetTransportWanVpnInterfaceIpsecFeatureResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("sdwan:index/getTransportWanVpnInterfaceIpsecFeature:getTransportWanVpnInterfaceIpsecFeature", {
        "featureProfileId": args.featureProfileId,
        "id": args.id,
        "transportWanVpnFeatureId": args.transportWanVpnFeatureId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTransportWanVpnInterfaceIpsecFeature.
 */
export interface GetTransportWanVpnInterfaceIpsecFeatureOutputArgs {
    /**
     * Feature Profile ID
     */
    featureProfileId: pulumi.Input<string>;
    /**
     * The id of the Feature
     */
    id: pulumi.Input<string>;
    /**
     * Transport WAN VPN Feature ID
     */
    transportWanVpnFeatureId: pulumi.Input<string>;
}
