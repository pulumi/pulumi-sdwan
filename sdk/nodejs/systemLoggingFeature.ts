// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This resource can manage a System Logging Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 *
 * ## Import
 *
 * Expected import identifier with the format: "system_logging_feature_id,feature_profile_id"
 *
 * ```sh
 * $ pulumi import sdwan:index/systemLoggingFeature:SystemLoggingFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
 * ```
 */
export class SystemLoggingFeature extends pulumi.CustomResource {
    /**
     * Get an existing SystemLoggingFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SystemLoggingFeatureState, opts?: pulumi.CustomResourceOptions): SystemLoggingFeature {
        return new SystemLoggingFeature(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'sdwan:index/systemLoggingFeature:SystemLoggingFeature';

    /**
     * Returns true if the given object is an instance of SystemLoggingFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SystemLoggingFeature {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SystemLoggingFeature.__pulumiType;
    }

    /**
     * The description of the Feature
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Enable logging to local disk - Default value: `true`
     */
    public readonly diskEnable!: pulumi.Output<boolean | undefined>;
    /**
     * Variable name
     */
    public readonly diskEnableVariable!: pulumi.Output<string | undefined>;
    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     */
    public readonly diskFileRotate!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly diskFileRotateVariable!: pulumi.Output<string | undefined>;
    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     */
    public readonly diskFileSize!: pulumi.Output<number | undefined>;
    /**
     * Variable name
     */
    public readonly diskFileSizeVariable!: pulumi.Output<string | undefined>;
    /**
     * Feature Profile ID
     */
    public readonly featureProfileId!: pulumi.Output<string | undefined>;
    /**
     * Enable logging to remote server
     */
    public readonly ipv4Servers!: pulumi.Output<outputs.SystemLoggingFeatureIpv4Server[] | undefined>;
    /**
     * Enable logging to remote ipv6 server
     */
    public readonly ipv6Servers!: pulumi.Output<outputs.SystemLoggingFeatureIpv6Server[] | undefined>;
    /**
     * The name of the Feature
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Configure a TLS profile
     */
    public readonly tlsProfiles!: pulumi.Output<outputs.SystemLoggingFeatureTlsProfile[] | undefined>;
    /**
     * The version of the Feature
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a SystemLoggingFeature resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SystemLoggingFeatureArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SystemLoggingFeatureArgs | SystemLoggingFeatureState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SystemLoggingFeatureState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskEnable"] = state ? state.diskEnable : undefined;
            resourceInputs["diskEnableVariable"] = state ? state.diskEnableVariable : undefined;
            resourceInputs["diskFileRotate"] = state ? state.diskFileRotate : undefined;
            resourceInputs["diskFileRotateVariable"] = state ? state.diskFileRotateVariable : undefined;
            resourceInputs["diskFileSize"] = state ? state.diskFileSize : undefined;
            resourceInputs["diskFileSizeVariable"] = state ? state.diskFileSizeVariable : undefined;
            resourceInputs["featureProfileId"] = state ? state.featureProfileId : undefined;
            resourceInputs["ipv4Servers"] = state ? state.ipv4Servers : undefined;
            resourceInputs["ipv6Servers"] = state ? state.ipv6Servers : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tlsProfiles"] = state ? state.tlsProfiles : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as SystemLoggingFeatureArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskEnable"] = args ? args.diskEnable : undefined;
            resourceInputs["diskEnableVariable"] = args ? args.diskEnableVariable : undefined;
            resourceInputs["diskFileRotate"] = args ? args.diskFileRotate : undefined;
            resourceInputs["diskFileRotateVariable"] = args ? args.diskFileRotateVariable : undefined;
            resourceInputs["diskFileSize"] = args ? args.diskFileSize : undefined;
            resourceInputs["diskFileSizeVariable"] = args ? args.diskFileSizeVariable : undefined;
            resourceInputs["featureProfileId"] = args ? args.featureProfileId : undefined;
            resourceInputs["ipv4Servers"] = args ? args.ipv4Servers : undefined;
            resourceInputs["ipv6Servers"] = args ? args.ipv6Servers : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tlsProfiles"] = args ? args.tlsProfiles : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SystemLoggingFeature.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SystemLoggingFeature resources.
 */
export interface SystemLoggingFeatureState {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Enable logging to local disk - Default value: `true`
     */
    diskEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    diskEnableVariable?: pulumi.Input<string>;
    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     */
    diskFileRotate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    diskFileRotateVariable?: pulumi.Input<string>;
    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     */
    diskFileSize?: pulumi.Input<number>;
    /**
     * Variable name
     */
    diskFileSizeVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Enable logging to remote server
     */
    ipv4Servers?: pulumi.Input<pulumi.Input<inputs.SystemLoggingFeatureIpv4Server>[]>;
    /**
     * Enable logging to remote ipv6 server
     */
    ipv6Servers?: pulumi.Input<pulumi.Input<inputs.SystemLoggingFeatureIpv6Server>[]>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Configure a TLS profile
     */
    tlsProfiles?: pulumi.Input<pulumi.Input<inputs.SystemLoggingFeatureTlsProfile>[]>;
    /**
     * The version of the Feature
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a SystemLoggingFeature resource.
 */
export interface SystemLoggingFeatureArgs {
    /**
     * The description of the Feature
     */
    description?: pulumi.Input<string>;
    /**
     * Enable logging to local disk - Default value: `true`
     */
    diskEnable?: pulumi.Input<boolean>;
    /**
     * Variable name
     */
    diskEnableVariable?: pulumi.Input<string>;
    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     */
    diskFileRotate?: pulumi.Input<number>;
    /**
     * Variable name
     */
    diskFileRotateVariable?: pulumi.Input<string>;
    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     */
    diskFileSize?: pulumi.Input<number>;
    /**
     * Variable name
     */
    diskFileSizeVariable?: pulumi.Input<string>;
    /**
     * Feature Profile ID
     */
    featureProfileId?: pulumi.Input<string>;
    /**
     * Enable logging to remote server
     */
    ipv4Servers?: pulumi.Input<pulumi.Input<inputs.SystemLoggingFeatureIpv4Server>[]>;
    /**
     * Enable logging to remote ipv6 server
     */
    ipv6Servers?: pulumi.Input<pulumi.Input<inputs.SystemLoggingFeatureIpv6Server>[]>;
    /**
     * The name of the Feature
     */
    name?: pulumi.Input<string>;
    /**
     * Configure a TLS profile
     */
    tlsProfiles?: pulumi.Input<pulumi.Input<inputs.SystemLoggingFeatureTlsProfile>[]>;
}
