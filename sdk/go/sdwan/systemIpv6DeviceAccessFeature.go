// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a System IPv6 Device Access Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "system_ipv6_device_access_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/systemIpv6DeviceAccessFeature:SystemIpv6DeviceAccessFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type SystemIpv6DeviceAccessFeature struct {
	pulumi.CustomResourceState

	// Default Action - Choices: `drop`, `accept` - Default value: `drop`
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Device Access Control List
	Sequences SystemIpv6DeviceAccessFeatureSequenceArrayOutput `pulumi:"sequences"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSystemIpv6DeviceAccessFeature registers a new resource with the given unique name, arguments, and options.
func NewSystemIpv6DeviceAccessFeature(ctx *pulumi.Context,
	name string, args *SystemIpv6DeviceAccessFeatureArgs, opts ...pulumi.ResourceOption) (*SystemIpv6DeviceAccessFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemIpv6DeviceAccessFeature
	err := ctx.RegisterResource("sdwan:index/systemIpv6DeviceAccessFeature:SystemIpv6DeviceAccessFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemIpv6DeviceAccessFeature gets an existing SystemIpv6DeviceAccessFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemIpv6DeviceAccessFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemIpv6DeviceAccessFeatureState, opts ...pulumi.ResourceOption) (*SystemIpv6DeviceAccessFeature, error) {
	var resource SystemIpv6DeviceAccessFeature
	err := ctx.ReadResource("sdwan:index/systemIpv6DeviceAccessFeature:SystemIpv6DeviceAccessFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemIpv6DeviceAccessFeature resources.
type systemIpv6DeviceAccessFeatureState struct {
	// Default Action - Choices: `drop`, `accept` - Default value: `drop`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Device Access Control List
	Sequences []SystemIpv6DeviceAccessFeatureSequence `pulumi:"sequences"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type SystemIpv6DeviceAccessFeatureState struct {
	// Default Action - Choices: `drop`, `accept` - Default value: `drop`
	DefaultAction pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Device Access Control List
	Sequences SystemIpv6DeviceAccessFeatureSequenceArrayInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (SystemIpv6DeviceAccessFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6DeviceAccessFeatureState)(nil)).Elem()
}

type systemIpv6DeviceAccessFeatureArgs struct {
	// Default Action - Choices: `drop`, `accept` - Default value: `drop`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Device Access Control List
	Sequences []SystemIpv6DeviceAccessFeatureSequence `pulumi:"sequences"`
}

// The set of arguments for constructing a SystemIpv6DeviceAccessFeature resource.
type SystemIpv6DeviceAccessFeatureArgs struct {
	// Default Action - Choices: `drop`, `accept` - Default value: `drop`
	DefaultAction pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Device Access Control List
	Sequences SystemIpv6DeviceAccessFeatureSequenceArrayInput
}

func (SystemIpv6DeviceAccessFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemIpv6DeviceAccessFeatureArgs)(nil)).Elem()
}

type SystemIpv6DeviceAccessFeatureInput interface {
	pulumi.Input

	ToSystemIpv6DeviceAccessFeatureOutput() SystemIpv6DeviceAccessFeatureOutput
	ToSystemIpv6DeviceAccessFeatureOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureOutput
}

func (*SystemIpv6DeviceAccessFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6DeviceAccessFeature)(nil)).Elem()
}

func (i *SystemIpv6DeviceAccessFeature) ToSystemIpv6DeviceAccessFeatureOutput() SystemIpv6DeviceAccessFeatureOutput {
	return i.ToSystemIpv6DeviceAccessFeatureOutputWithContext(context.Background())
}

func (i *SystemIpv6DeviceAccessFeature) ToSystemIpv6DeviceAccessFeatureOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6DeviceAccessFeatureOutput)
}

// SystemIpv6DeviceAccessFeatureArrayInput is an input type that accepts SystemIpv6DeviceAccessFeatureArray and SystemIpv6DeviceAccessFeatureArrayOutput values.
// You can construct a concrete instance of `SystemIpv6DeviceAccessFeatureArrayInput` via:
//
//	SystemIpv6DeviceAccessFeatureArray{ SystemIpv6DeviceAccessFeatureArgs{...} }
type SystemIpv6DeviceAccessFeatureArrayInput interface {
	pulumi.Input

	ToSystemIpv6DeviceAccessFeatureArrayOutput() SystemIpv6DeviceAccessFeatureArrayOutput
	ToSystemIpv6DeviceAccessFeatureArrayOutputWithContext(context.Context) SystemIpv6DeviceAccessFeatureArrayOutput
}

type SystemIpv6DeviceAccessFeatureArray []SystemIpv6DeviceAccessFeatureInput

func (SystemIpv6DeviceAccessFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6DeviceAccessFeature)(nil)).Elem()
}

func (i SystemIpv6DeviceAccessFeatureArray) ToSystemIpv6DeviceAccessFeatureArrayOutput() SystemIpv6DeviceAccessFeatureArrayOutput {
	return i.ToSystemIpv6DeviceAccessFeatureArrayOutputWithContext(context.Background())
}

func (i SystemIpv6DeviceAccessFeatureArray) ToSystemIpv6DeviceAccessFeatureArrayOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6DeviceAccessFeatureArrayOutput)
}

// SystemIpv6DeviceAccessFeatureMapInput is an input type that accepts SystemIpv6DeviceAccessFeatureMap and SystemIpv6DeviceAccessFeatureMapOutput values.
// You can construct a concrete instance of `SystemIpv6DeviceAccessFeatureMapInput` via:
//
//	SystemIpv6DeviceAccessFeatureMap{ "key": SystemIpv6DeviceAccessFeatureArgs{...} }
type SystemIpv6DeviceAccessFeatureMapInput interface {
	pulumi.Input

	ToSystemIpv6DeviceAccessFeatureMapOutput() SystemIpv6DeviceAccessFeatureMapOutput
	ToSystemIpv6DeviceAccessFeatureMapOutputWithContext(context.Context) SystemIpv6DeviceAccessFeatureMapOutput
}

type SystemIpv6DeviceAccessFeatureMap map[string]SystemIpv6DeviceAccessFeatureInput

func (SystemIpv6DeviceAccessFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6DeviceAccessFeature)(nil)).Elem()
}

func (i SystemIpv6DeviceAccessFeatureMap) ToSystemIpv6DeviceAccessFeatureMapOutput() SystemIpv6DeviceAccessFeatureMapOutput {
	return i.ToSystemIpv6DeviceAccessFeatureMapOutputWithContext(context.Background())
}

func (i SystemIpv6DeviceAccessFeatureMap) ToSystemIpv6DeviceAccessFeatureMapOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemIpv6DeviceAccessFeatureMapOutput)
}

type SystemIpv6DeviceAccessFeatureOutput struct{ *pulumi.OutputState }

func (SystemIpv6DeviceAccessFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemIpv6DeviceAccessFeature)(nil)).Elem()
}

func (o SystemIpv6DeviceAccessFeatureOutput) ToSystemIpv6DeviceAccessFeatureOutput() SystemIpv6DeviceAccessFeatureOutput {
	return o
}

func (o SystemIpv6DeviceAccessFeatureOutput) ToSystemIpv6DeviceAccessFeatureOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureOutput {
	return o
}

// Default Action - Choices: `drop`, `accept` - Default value: `drop`
func (o SystemIpv6DeviceAccessFeatureOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpv6DeviceAccessFeature) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// The description of the Feature
func (o SystemIpv6DeviceAccessFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemIpv6DeviceAccessFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o SystemIpv6DeviceAccessFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6DeviceAccessFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o SystemIpv6DeviceAccessFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemIpv6DeviceAccessFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Device Access Control List
func (o SystemIpv6DeviceAccessFeatureOutput) Sequences() SystemIpv6DeviceAccessFeatureSequenceArrayOutput {
	return o.ApplyT(func(v *SystemIpv6DeviceAccessFeature) SystemIpv6DeviceAccessFeatureSequenceArrayOutput {
		return v.Sequences
	}).(SystemIpv6DeviceAccessFeatureSequenceArrayOutput)
}

// The version of the Feature
func (o SystemIpv6DeviceAccessFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemIpv6DeviceAccessFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SystemIpv6DeviceAccessFeatureArrayOutput struct{ *pulumi.OutputState }

func (SystemIpv6DeviceAccessFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemIpv6DeviceAccessFeature)(nil)).Elem()
}

func (o SystemIpv6DeviceAccessFeatureArrayOutput) ToSystemIpv6DeviceAccessFeatureArrayOutput() SystemIpv6DeviceAccessFeatureArrayOutput {
	return o
}

func (o SystemIpv6DeviceAccessFeatureArrayOutput) ToSystemIpv6DeviceAccessFeatureArrayOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureArrayOutput {
	return o
}

func (o SystemIpv6DeviceAccessFeatureArrayOutput) Index(i pulumi.IntInput) SystemIpv6DeviceAccessFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemIpv6DeviceAccessFeature {
		return vs[0].([]*SystemIpv6DeviceAccessFeature)[vs[1].(int)]
	}).(SystemIpv6DeviceAccessFeatureOutput)
}

type SystemIpv6DeviceAccessFeatureMapOutput struct{ *pulumi.OutputState }

func (SystemIpv6DeviceAccessFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemIpv6DeviceAccessFeature)(nil)).Elem()
}

func (o SystemIpv6DeviceAccessFeatureMapOutput) ToSystemIpv6DeviceAccessFeatureMapOutput() SystemIpv6DeviceAccessFeatureMapOutput {
	return o
}

func (o SystemIpv6DeviceAccessFeatureMapOutput) ToSystemIpv6DeviceAccessFeatureMapOutputWithContext(ctx context.Context) SystemIpv6DeviceAccessFeatureMapOutput {
	return o
}

func (o SystemIpv6DeviceAccessFeatureMapOutput) MapIndex(k pulumi.StringInput) SystemIpv6DeviceAccessFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemIpv6DeviceAccessFeature {
		return vs[0].(map[string]*SystemIpv6DeviceAccessFeature)[vs[1].(string)]
	}).(SystemIpv6DeviceAccessFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6DeviceAccessFeatureInput)(nil)).Elem(), &SystemIpv6DeviceAccessFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6DeviceAccessFeatureArrayInput)(nil)).Elem(), SystemIpv6DeviceAccessFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemIpv6DeviceAccessFeatureMapInput)(nil)).Elem(), SystemIpv6DeviceAccessFeatureMap{})
	pulumi.RegisterOutputType(SystemIpv6DeviceAccessFeatureOutput{})
	pulumi.RegisterOutputType(SystemIpv6DeviceAccessFeatureArrayOutput{})
	pulumi.RegisterOutputType(SystemIpv6DeviceAccessFeatureMapOutput{})
}
