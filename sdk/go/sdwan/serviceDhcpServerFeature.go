// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Service DHCP Server Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "service_dhcp_server_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type ServiceDhcpServerFeature struct {
	pulumi.CustomResourceState

	// Set IP address of default gateway
	DefaultGateway pulumi.StringPtrOutput `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable pulumi.StringPtrOutput `pulumi:"defaultGatewayVariable"`
	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Configure one or more DNS server IP addresses
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable pulumi.StringPtrOutput `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName pulumi.StringPtrOutput `pulumi:"domainName"`
	// Variable name
	DomainNameVariable pulumi.StringPtrOutput `pulumi:"domainNameVariable"`
	// Variable name
	ExcludeVariable pulumi.StringPtrOutput `pulumi:"excludeVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	Excludes pulumi.StringArrayOutput `pulumi:"excludes"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// Set MTU on interface to DHCP client
	//   - Range: `68`-`65535`
	InterfaceMtu pulumi.IntPtrOutput `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable pulumi.StringPtrOutput `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid
	//   - Range: `60`-`31536000`
	//   - Default value: `86400`
	LeaseTime pulumi.IntPtrOutput `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable pulumi.StringPtrOutput `pulumi:"leaseTimeVariable"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Network Address
	NetworkAddress pulumi.StringPtrOutput `pulumi:"networkAddress"`
	// Variable name
	NetworkAddressVariable pulumi.StringPtrOutput `pulumi:"networkAddressVariable"`
	// Configure Options Code
	OptionCodes ServiceDhcpServerFeatureOptionCodeArrayOutput `pulumi:"optionCodes"`
	// Configure static IP addresses
	StaticLeases ServiceDhcpServerFeatureStaticLeaseArrayOutput `pulumi:"staticLeases"`
	// Subnet Mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	SubnetMask pulumi.StringPtrOutput `pulumi:"subnetMask"`
	// Variable name
	SubnetMaskVariable pulumi.StringPtrOutput `pulumi:"subnetMaskVariable"`
	// Configure TFTP server IP addresses
	TftpServers pulumi.StringArrayOutput `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable pulumi.StringPtrOutput `pulumi:"tftpServersVariable"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewServiceDhcpServerFeature registers a new resource with the given unique name, arguments, and options.
func NewServiceDhcpServerFeature(ctx *pulumi.Context,
	name string, args *ServiceDhcpServerFeatureArgs, opts ...pulumi.ResourceOption) (*ServiceDhcpServerFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceDhcpServerFeature
	err := ctx.RegisterResource("sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDhcpServerFeature gets an existing ServiceDhcpServerFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDhcpServerFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDhcpServerFeatureState, opts ...pulumi.ResourceOption) (*ServiceDhcpServerFeature, error) {
	var resource ServiceDhcpServerFeature
	err := ctx.ReadResource("sdwan:index/serviceDhcpServerFeature:ServiceDhcpServerFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDhcpServerFeature resources.
type serviceDhcpServerFeatureState struct {
	// Set IP address of default gateway
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable *string `pulumi:"defaultGatewayVariable"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Configure one or more DNS server IP addresses
	DnsServers []string `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable *string `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName *string `pulumi:"domainName"`
	// Variable name
	DomainNameVariable *string `pulumi:"domainNameVariable"`
	// Variable name
	ExcludeVariable *string `pulumi:"excludeVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	Excludes []string `pulumi:"excludes"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Set MTU on interface to DHCP client
	//   - Range: `68`-`65535`
	InterfaceMtu *int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable *string `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid
	//   - Range: `60`-`31536000`
	//   - Default value: `86400`
	LeaseTime *int `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable *string `pulumi:"leaseTimeVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Network Address
	NetworkAddress *string `pulumi:"networkAddress"`
	// Variable name
	NetworkAddressVariable *string `pulumi:"networkAddressVariable"`
	// Configure Options Code
	OptionCodes []ServiceDhcpServerFeatureOptionCode `pulumi:"optionCodes"`
	// Configure static IP addresses
	StaticLeases []ServiceDhcpServerFeatureStaticLease `pulumi:"staticLeases"`
	// Subnet Mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	SubnetMask *string `pulumi:"subnetMask"`
	// Variable name
	SubnetMaskVariable *string `pulumi:"subnetMaskVariable"`
	// Configure TFTP server IP addresses
	TftpServers []string `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable *string `pulumi:"tftpServersVariable"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type ServiceDhcpServerFeatureState struct {
	// Set IP address of default gateway
	DefaultGateway pulumi.StringPtrInput
	// Variable name
	DefaultGatewayVariable pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Configure one or more DNS server IP addresses
	DnsServers pulumi.StringArrayInput
	// Variable name
	DnsServersVariable pulumi.StringPtrInput
	// Set domain name client uses to resolve hostnames
	DomainName pulumi.StringPtrInput
	// Variable name
	DomainNameVariable pulumi.StringPtrInput
	// Variable name
	ExcludeVariable pulumi.StringPtrInput
	// Configure IPv4 address to exclude from DHCP address pool
	Excludes pulumi.StringArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Set MTU on interface to DHCP client
	//   - Range: `68`-`65535`
	InterfaceMtu pulumi.IntPtrInput
	// Variable name
	InterfaceMtuVariable pulumi.StringPtrInput
	// Configure how long a DHCP-assigned IP address is valid
	//   - Range: `60`-`31536000`
	//   - Default value: `86400`
	LeaseTime pulumi.IntPtrInput
	// Variable name
	LeaseTimeVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Network Address
	NetworkAddress pulumi.StringPtrInput
	// Variable name
	NetworkAddressVariable pulumi.StringPtrInput
	// Configure Options Code
	OptionCodes ServiceDhcpServerFeatureOptionCodeArrayInput
	// Configure static IP addresses
	StaticLeases ServiceDhcpServerFeatureStaticLeaseArrayInput
	// Subnet Mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	SubnetMask pulumi.StringPtrInput
	// Variable name
	SubnetMaskVariable pulumi.StringPtrInput
	// Configure TFTP server IP addresses
	TftpServers pulumi.StringArrayInput
	// Variable name
	TftpServersVariable pulumi.StringPtrInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (ServiceDhcpServerFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDhcpServerFeatureState)(nil)).Elem()
}

type serviceDhcpServerFeatureArgs struct {
	// Set IP address of default gateway
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable *string `pulumi:"defaultGatewayVariable"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Configure one or more DNS server IP addresses
	DnsServers []string `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable *string `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName *string `pulumi:"domainName"`
	// Variable name
	DomainNameVariable *string `pulumi:"domainNameVariable"`
	// Variable name
	ExcludeVariable *string `pulumi:"excludeVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	Excludes []string `pulumi:"excludes"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// Set MTU on interface to DHCP client
	//   - Range: `68`-`65535`
	InterfaceMtu *int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable *string `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid
	//   - Range: `60`-`31536000`
	//   - Default value: `86400`
	LeaseTime *int `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable *string `pulumi:"leaseTimeVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Network Address
	NetworkAddress *string `pulumi:"networkAddress"`
	// Variable name
	NetworkAddressVariable *string `pulumi:"networkAddressVariable"`
	// Configure Options Code
	OptionCodes []ServiceDhcpServerFeatureOptionCode `pulumi:"optionCodes"`
	// Configure static IP addresses
	StaticLeases []ServiceDhcpServerFeatureStaticLease `pulumi:"staticLeases"`
	// Subnet Mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	SubnetMask *string `pulumi:"subnetMask"`
	// Variable name
	SubnetMaskVariable *string `pulumi:"subnetMaskVariable"`
	// Configure TFTP server IP addresses
	TftpServers []string `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable *string `pulumi:"tftpServersVariable"`
}

// The set of arguments for constructing a ServiceDhcpServerFeature resource.
type ServiceDhcpServerFeatureArgs struct {
	// Set IP address of default gateway
	DefaultGateway pulumi.StringPtrInput
	// Variable name
	DefaultGatewayVariable pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Configure one or more DNS server IP addresses
	DnsServers pulumi.StringArrayInput
	// Variable name
	DnsServersVariable pulumi.StringPtrInput
	// Set domain name client uses to resolve hostnames
	DomainName pulumi.StringPtrInput
	// Variable name
	DomainNameVariable pulumi.StringPtrInput
	// Variable name
	ExcludeVariable pulumi.StringPtrInput
	// Configure IPv4 address to exclude from DHCP address pool
	Excludes pulumi.StringArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// Set MTU on interface to DHCP client
	//   - Range: `68`-`65535`
	InterfaceMtu pulumi.IntPtrInput
	// Variable name
	InterfaceMtuVariable pulumi.StringPtrInput
	// Configure how long a DHCP-assigned IP address is valid
	//   - Range: `60`-`31536000`
	//   - Default value: `86400`
	LeaseTime pulumi.IntPtrInput
	// Variable name
	LeaseTimeVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Network Address
	NetworkAddress pulumi.StringPtrInput
	// Variable name
	NetworkAddressVariable pulumi.StringPtrInput
	// Configure Options Code
	OptionCodes ServiceDhcpServerFeatureOptionCodeArrayInput
	// Configure static IP addresses
	StaticLeases ServiceDhcpServerFeatureStaticLeaseArrayInput
	// Subnet Mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	SubnetMask pulumi.StringPtrInput
	// Variable name
	SubnetMaskVariable pulumi.StringPtrInput
	// Configure TFTP server IP addresses
	TftpServers pulumi.StringArrayInput
	// Variable name
	TftpServersVariable pulumi.StringPtrInput
}

func (ServiceDhcpServerFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDhcpServerFeatureArgs)(nil)).Elem()
}

type ServiceDhcpServerFeatureInput interface {
	pulumi.Input

	ToServiceDhcpServerFeatureOutput() ServiceDhcpServerFeatureOutput
	ToServiceDhcpServerFeatureOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureOutput
}

func (*ServiceDhcpServerFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDhcpServerFeature)(nil)).Elem()
}

func (i *ServiceDhcpServerFeature) ToServiceDhcpServerFeatureOutput() ServiceDhcpServerFeatureOutput {
	return i.ToServiceDhcpServerFeatureOutputWithContext(context.Background())
}

func (i *ServiceDhcpServerFeature) ToServiceDhcpServerFeatureOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDhcpServerFeatureOutput)
}

// ServiceDhcpServerFeatureArrayInput is an input type that accepts ServiceDhcpServerFeatureArray and ServiceDhcpServerFeatureArrayOutput values.
// You can construct a concrete instance of `ServiceDhcpServerFeatureArrayInput` via:
//
//	ServiceDhcpServerFeatureArray{ ServiceDhcpServerFeatureArgs{...} }
type ServiceDhcpServerFeatureArrayInput interface {
	pulumi.Input

	ToServiceDhcpServerFeatureArrayOutput() ServiceDhcpServerFeatureArrayOutput
	ToServiceDhcpServerFeatureArrayOutputWithContext(context.Context) ServiceDhcpServerFeatureArrayOutput
}

type ServiceDhcpServerFeatureArray []ServiceDhcpServerFeatureInput

func (ServiceDhcpServerFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDhcpServerFeature)(nil)).Elem()
}

func (i ServiceDhcpServerFeatureArray) ToServiceDhcpServerFeatureArrayOutput() ServiceDhcpServerFeatureArrayOutput {
	return i.ToServiceDhcpServerFeatureArrayOutputWithContext(context.Background())
}

func (i ServiceDhcpServerFeatureArray) ToServiceDhcpServerFeatureArrayOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDhcpServerFeatureArrayOutput)
}

// ServiceDhcpServerFeatureMapInput is an input type that accepts ServiceDhcpServerFeatureMap and ServiceDhcpServerFeatureMapOutput values.
// You can construct a concrete instance of `ServiceDhcpServerFeatureMapInput` via:
//
//	ServiceDhcpServerFeatureMap{ "key": ServiceDhcpServerFeatureArgs{...} }
type ServiceDhcpServerFeatureMapInput interface {
	pulumi.Input

	ToServiceDhcpServerFeatureMapOutput() ServiceDhcpServerFeatureMapOutput
	ToServiceDhcpServerFeatureMapOutputWithContext(context.Context) ServiceDhcpServerFeatureMapOutput
}

type ServiceDhcpServerFeatureMap map[string]ServiceDhcpServerFeatureInput

func (ServiceDhcpServerFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDhcpServerFeature)(nil)).Elem()
}

func (i ServiceDhcpServerFeatureMap) ToServiceDhcpServerFeatureMapOutput() ServiceDhcpServerFeatureMapOutput {
	return i.ToServiceDhcpServerFeatureMapOutputWithContext(context.Background())
}

func (i ServiceDhcpServerFeatureMap) ToServiceDhcpServerFeatureMapOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDhcpServerFeatureMapOutput)
}

type ServiceDhcpServerFeatureOutput struct{ *pulumi.OutputState }

func (ServiceDhcpServerFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDhcpServerFeature)(nil)).Elem()
}

func (o ServiceDhcpServerFeatureOutput) ToServiceDhcpServerFeatureOutput() ServiceDhcpServerFeatureOutput {
	return o
}

func (o ServiceDhcpServerFeatureOutput) ToServiceDhcpServerFeatureOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureOutput {
	return o
}

// Set IP address of default gateway
func (o ServiceDhcpServerFeatureOutput) DefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.DefaultGateway }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) DefaultGatewayVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.DefaultGatewayVariable }).(pulumi.StringPtrOutput)
}

// The description of the Feature
func (o ServiceDhcpServerFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Configure one or more DNS server IP addresses
func (o ServiceDhcpServerFeatureOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) DnsServersVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.DnsServersVariable }).(pulumi.StringPtrOutput)
}

// Set domain name client uses to resolve hostnames
func (o ServiceDhcpServerFeatureOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) DomainNameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.DomainNameVariable }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) ExcludeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.ExcludeVariable }).(pulumi.StringPtrOutput)
}

// Configure IPv4 address to exclude from DHCP address pool
func (o ServiceDhcpServerFeatureOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringArrayOutput { return v.Excludes }).(pulumi.StringArrayOutput)
}

// Feature Profile ID
func (o ServiceDhcpServerFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// Set MTU on interface to DHCP client
//   - Range: `68`-`65535`
func (o ServiceDhcpServerFeatureOutput) InterfaceMtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.IntPtrOutput { return v.InterfaceMtu }).(pulumi.IntPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) InterfaceMtuVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.InterfaceMtuVariable }).(pulumi.StringPtrOutput)
}

// Configure how long a DHCP-assigned IP address is valid
//   - Range: `60`-`31536000`
//   - Default value: `86400`
func (o ServiceDhcpServerFeatureOutput) LeaseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.IntPtrOutput { return v.LeaseTime }).(pulumi.IntPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) LeaseTimeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.LeaseTimeVariable }).(pulumi.StringPtrOutput)
}

// The name of the Feature
func (o ServiceDhcpServerFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Network Address
func (o ServiceDhcpServerFeatureOutput) NetworkAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.NetworkAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) NetworkAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.NetworkAddressVariable }).(pulumi.StringPtrOutput)
}

// Configure Options Code
func (o ServiceDhcpServerFeatureOutput) OptionCodes() ServiceDhcpServerFeatureOptionCodeArrayOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) ServiceDhcpServerFeatureOptionCodeArrayOutput { return v.OptionCodes }).(ServiceDhcpServerFeatureOptionCodeArrayOutput)
}

// Configure static IP addresses
func (o ServiceDhcpServerFeatureOutput) StaticLeases() ServiceDhcpServerFeatureStaticLeaseArrayOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) ServiceDhcpServerFeatureStaticLeaseArrayOutput {
		return v.StaticLeases
	}).(ServiceDhcpServerFeatureStaticLeaseArrayOutput)
}

// Subnet Mask
//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
func (o ServiceDhcpServerFeatureOutput) SubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.SubnetMask }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) SubnetMaskVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.SubnetMaskVariable }).(pulumi.StringPtrOutput)
}

// Configure TFTP server IP addresses
func (o ServiceDhcpServerFeatureOutput) TftpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringArrayOutput { return v.TftpServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o ServiceDhcpServerFeatureOutput) TftpServersVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.StringPtrOutput { return v.TftpServersVariable }).(pulumi.StringPtrOutput)
}

// The version of the Feature
func (o ServiceDhcpServerFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceDhcpServerFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ServiceDhcpServerFeatureArrayOutput struct{ *pulumi.OutputState }

func (ServiceDhcpServerFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDhcpServerFeature)(nil)).Elem()
}

func (o ServiceDhcpServerFeatureArrayOutput) ToServiceDhcpServerFeatureArrayOutput() ServiceDhcpServerFeatureArrayOutput {
	return o
}

func (o ServiceDhcpServerFeatureArrayOutput) ToServiceDhcpServerFeatureArrayOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureArrayOutput {
	return o
}

func (o ServiceDhcpServerFeatureArrayOutput) Index(i pulumi.IntInput) ServiceDhcpServerFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceDhcpServerFeature {
		return vs[0].([]*ServiceDhcpServerFeature)[vs[1].(int)]
	}).(ServiceDhcpServerFeatureOutput)
}

type ServiceDhcpServerFeatureMapOutput struct{ *pulumi.OutputState }

func (ServiceDhcpServerFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDhcpServerFeature)(nil)).Elem()
}

func (o ServiceDhcpServerFeatureMapOutput) ToServiceDhcpServerFeatureMapOutput() ServiceDhcpServerFeatureMapOutput {
	return o
}

func (o ServiceDhcpServerFeatureMapOutput) ToServiceDhcpServerFeatureMapOutputWithContext(ctx context.Context) ServiceDhcpServerFeatureMapOutput {
	return o
}

func (o ServiceDhcpServerFeatureMapOutput) MapIndex(k pulumi.StringInput) ServiceDhcpServerFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceDhcpServerFeature {
		return vs[0].(map[string]*ServiceDhcpServerFeature)[vs[1].(string)]
	}).(ServiceDhcpServerFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDhcpServerFeatureInput)(nil)).Elem(), &ServiceDhcpServerFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDhcpServerFeatureArrayInput)(nil)).Elem(), ServiceDhcpServerFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDhcpServerFeatureMapInput)(nil)).Elem(), ServiceDhcpServerFeatureMap{})
	pulumi.RegisterOutputType(ServiceDhcpServerFeatureOutput{})
	pulumi.RegisterOutputType(ServiceDhcpServerFeatureArrayOutput{})
	pulumi.RegisterOutputType(ServiceDhcpServerFeatureMapOutput{})
}
