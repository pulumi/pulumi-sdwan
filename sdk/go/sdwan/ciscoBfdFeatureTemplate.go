// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco BFD feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoBfdFeatureTemplate struct {
	pulumi.CustomResourceState

	// Set color that identifies the WAN transport tunnel
	Colors CiscoBfdFeatureTemplateColorArrayOutput `pulumi:"colors"`
	// Set default DSCP value for BFD packets - Range: `0`-`63` - Default value: `48`
	DefaultDscp pulumi.IntPtrOutput `pulumi:"defaultDscp"`
	// Variable name
	DefaultDscpVariable pulumi.StringPtrOutput `pulumi:"defaultDscpVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Set the number of polling intervals used to determine tunnel SLA class - Range: `1`-`6` - Default value: `6`
	Multiplier pulumi.IntPtrOutput `pulumi:"multiplier"`
	// Variable name
	MultiplierVariable pulumi.StringPtrOutput `pulumi:"multiplierVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Set how often BFD polls tunnels to collect packet latency, loss, and statistics - Range: `1`-`4294967295` - Default
	// value: `600000`
	PollInterval pulumi.IntPtrOutput `pulumi:"pollInterval"`
	// Variable name
	PollIntervalVariable pulumi.StringPtrOutput `pulumi:"pollIntervalVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoBfdFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoBfdFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoBfdFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoBfdFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoBfdFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoBfdFeatureTemplate gets an existing CiscoBfdFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoBfdFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoBfdFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoBfdFeatureTemplate, error) {
	var resource CiscoBfdFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoBfdFeatureTemplate:CiscoBfdFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoBfdFeatureTemplate resources.
type ciscoBfdFeatureTemplateState struct {
	// Set color that identifies the WAN transport tunnel
	Colors []CiscoBfdFeatureTemplateColor `pulumi:"colors"`
	// Set default DSCP value for BFD packets - Range: `0`-`63` - Default value: `48`
	DefaultDscp *int `pulumi:"defaultDscp"`
	// Variable name
	DefaultDscpVariable *string `pulumi:"defaultDscpVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set the number of polling intervals used to determine tunnel SLA class - Range: `1`-`6` - Default value: `6`
	Multiplier *int `pulumi:"multiplier"`
	// Variable name
	MultiplierVariable *string `pulumi:"multiplierVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set how often BFD polls tunnels to collect packet latency, loss, and statistics - Range: `1`-`4294967295` - Default
	// value: `600000`
	PollInterval *int `pulumi:"pollInterval"`
	// Variable name
	PollIntervalVariable *string `pulumi:"pollIntervalVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoBfdFeatureTemplateState struct {
	// Set color that identifies the WAN transport tunnel
	Colors CiscoBfdFeatureTemplateColorArrayInput
	// Set default DSCP value for BFD packets - Range: `0`-`63` - Default value: `48`
	DefaultDscp pulumi.IntPtrInput
	// Variable name
	DefaultDscpVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Set the number of polling intervals used to determine tunnel SLA class - Range: `1`-`6` - Default value: `6`
	Multiplier pulumi.IntPtrInput
	// Variable name
	MultiplierVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set how often BFD polls tunnels to collect packet latency, loss, and statistics - Range: `1`-`4294967295` - Default
	// value: `600000`
	PollInterval pulumi.IntPtrInput
	// Variable name
	PollIntervalVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoBfdFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoBfdFeatureTemplateState)(nil)).Elem()
}

type ciscoBfdFeatureTemplateArgs struct {
	// Set color that identifies the WAN transport tunnel
	Colors []CiscoBfdFeatureTemplateColor `pulumi:"colors"`
	// Set default DSCP value for BFD packets - Range: `0`-`63` - Default value: `48`
	DefaultDscp *int `pulumi:"defaultDscp"`
	// Variable name
	DefaultDscpVariable *string `pulumi:"defaultDscpVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set the number of polling intervals used to determine tunnel SLA class - Range: `1`-`6` - Default value: `6`
	Multiplier *int `pulumi:"multiplier"`
	// Variable name
	MultiplierVariable *string `pulumi:"multiplierVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set how often BFD polls tunnels to collect packet latency, loss, and statistics - Range: `1`-`4294967295` - Default
	// value: `600000`
	PollInterval *int `pulumi:"pollInterval"`
	// Variable name
	PollIntervalVariable *string `pulumi:"pollIntervalVariable"`
}

// The set of arguments for constructing a CiscoBfdFeatureTemplate resource.
type CiscoBfdFeatureTemplateArgs struct {
	// Set color that identifies the WAN transport tunnel
	Colors CiscoBfdFeatureTemplateColorArrayInput
	// Set default DSCP value for BFD packets - Range: `0`-`63` - Default value: `48`
	DefaultDscp pulumi.IntPtrInput
	// Variable name
	DefaultDscpVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Set the number of polling intervals used to determine tunnel SLA class - Range: `1`-`6` - Default value: `6`
	Multiplier pulumi.IntPtrInput
	// Variable name
	MultiplierVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set how often BFD polls tunnels to collect packet latency, loss, and statistics - Range: `1`-`4294967295` - Default
	// value: `600000`
	PollInterval pulumi.IntPtrInput
	// Variable name
	PollIntervalVariable pulumi.StringPtrInput
}

func (CiscoBfdFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoBfdFeatureTemplateArgs)(nil)).Elem()
}

type CiscoBfdFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoBfdFeatureTemplateOutput() CiscoBfdFeatureTemplateOutput
	ToCiscoBfdFeatureTemplateOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateOutput
}

func (*CiscoBfdFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoBfdFeatureTemplate)(nil)).Elem()
}

func (i *CiscoBfdFeatureTemplate) ToCiscoBfdFeatureTemplateOutput() CiscoBfdFeatureTemplateOutput {
	return i.ToCiscoBfdFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoBfdFeatureTemplate) ToCiscoBfdFeatureTemplateOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoBfdFeatureTemplateOutput)
}

// CiscoBfdFeatureTemplateArrayInput is an input type that accepts CiscoBfdFeatureTemplateArray and CiscoBfdFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoBfdFeatureTemplateArrayInput` via:
//
//	CiscoBfdFeatureTemplateArray{ CiscoBfdFeatureTemplateArgs{...} }
type CiscoBfdFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoBfdFeatureTemplateArrayOutput() CiscoBfdFeatureTemplateArrayOutput
	ToCiscoBfdFeatureTemplateArrayOutputWithContext(context.Context) CiscoBfdFeatureTemplateArrayOutput
}

type CiscoBfdFeatureTemplateArray []CiscoBfdFeatureTemplateInput

func (CiscoBfdFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoBfdFeatureTemplate)(nil)).Elem()
}

func (i CiscoBfdFeatureTemplateArray) ToCiscoBfdFeatureTemplateArrayOutput() CiscoBfdFeatureTemplateArrayOutput {
	return i.ToCiscoBfdFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoBfdFeatureTemplateArray) ToCiscoBfdFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoBfdFeatureTemplateArrayOutput)
}

// CiscoBfdFeatureTemplateMapInput is an input type that accepts CiscoBfdFeatureTemplateMap and CiscoBfdFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoBfdFeatureTemplateMapInput` via:
//
//	CiscoBfdFeatureTemplateMap{ "key": CiscoBfdFeatureTemplateArgs{...} }
type CiscoBfdFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoBfdFeatureTemplateMapOutput() CiscoBfdFeatureTemplateMapOutput
	ToCiscoBfdFeatureTemplateMapOutputWithContext(context.Context) CiscoBfdFeatureTemplateMapOutput
}

type CiscoBfdFeatureTemplateMap map[string]CiscoBfdFeatureTemplateInput

func (CiscoBfdFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoBfdFeatureTemplate)(nil)).Elem()
}

func (i CiscoBfdFeatureTemplateMap) ToCiscoBfdFeatureTemplateMapOutput() CiscoBfdFeatureTemplateMapOutput {
	return i.ToCiscoBfdFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoBfdFeatureTemplateMap) ToCiscoBfdFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoBfdFeatureTemplateMapOutput)
}

type CiscoBfdFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoBfdFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoBfdFeatureTemplate)(nil)).Elem()
}

func (o CiscoBfdFeatureTemplateOutput) ToCiscoBfdFeatureTemplateOutput() CiscoBfdFeatureTemplateOutput {
	return o
}

func (o CiscoBfdFeatureTemplateOutput) ToCiscoBfdFeatureTemplateOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateOutput {
	return o
}

// Set color that identifies the WAN transport tunnel
func (o CiscoBfdFeatureTemplateOutput) Colors() CiscoBfdFeatureTemplateColorArrayOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) CiscoBfdFeatureTemplateColorArrayOutput { return v.Colors }).(CiscoBfdFeatureTemplateColorArrayOutput)
}

// Set default DSCP value for BFD packets - Range: `0`-`63` - Default value: `48`
func (o CiscoBfdFeatureTemplateOutput) DefaultDscp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.IntPtrOutput { return v.DefaultDscp }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoBfdFeatureTemplateOutput) DefaultDscpVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringPtrOutput { return v.DefaultDscpVariable }).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoBfdFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoBfdFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Set the number of polling intervals used to determine tunnel SLA class - Range: `1`-`6` - Default value: `6`
func (o CiscoBfdFeatureTemplateOutput) Multiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.IntPtrOutput { return v.Multiplier }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoBfdFeatureTemplateOutput) MultiplierVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringPtrOutput { return v.MultiplierVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoBfdFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set how often BFD polls tunnels to collect packet latency, loss, and statistics - Range: `1`-`4294967295` - Default
// value: `600000`
func (o CiscoBfdFeatureTemplateOutput) PollInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.IntPtrOutput { return v.PollInterval }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoBfdFeatureTemplateOutput) PollIntervalVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringPtrOutput { return v.PollIntervalVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CiscoBfdFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CiscoBfdFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoBfdFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoBfdFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoBfdFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoBfdFeatureTemplate)(nil)).Elem()
}

func (o CiscoBfdFeatureTemplateArrayOutput) ToCiscoBfdFeatureTemplateArrayOutput() CiscoBfdFeatureTemplateArrayOutput {
	return o
}

func (o CiscoBfdFeatureTemplateArrayOutput) ToCiscoBfdFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateArrayOutput {
	return o
}

func (o CiscoBfdFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoBfdFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoBfdFeatureTemplate {
		return vs[0].([]*CiscoBfdFeatureTemplate)[vs[1].(int)]
	}).(CiscoBfdFeatureTemplateOutput)
}

type CiscoBfdFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoBfdFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoBfdFeatureTemplate)(nil)).Elem()
}

func (o CiscoBfdFeatureTemplateMapOutput) ToCiscoBfdFeatureTemplateMapOutput() CiscoBfdFeatureTemplateMapOutput {
	return o
}

func (o CiscoBfdFeatureTemplateMapOutput) ToCiscoBfdFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoBfdFeatureTemplateMapOutput {
	return o
}

func (o CiscoBfdFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoBfdFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoBfdFeatureTemplate {
		return vs[0].(map[string]*CiscoBfdFeatureTemplate)[vs[1].(string)]
	}).(CiscoBfdFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoBfdFeatureTemplateInput)(nil)).Elem(), &CiscoBfdFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoBfdFeatureTemplateArrayInput)(nil)).Elem(), CiscoBfdFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoBfdFeatureTemplateMapInput)(nil)).Elem(), CiscoBfdFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoBfdFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoBfdFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoBfdFeatureTemplateMapOutput{})
}
