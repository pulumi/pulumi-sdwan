// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco TrustSec feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoTrustsecFeatureTemplate(ctx, &sdwan.LookupCiscoTrustsecFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoTrustsecFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoTrustsecFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoTrustsecFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoTrustsecFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoTrustsecFeatureTemplate:getCiscoTrustsecFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoTrustsecFeatureTemplate.
type LookupCiscoTrustsecFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoTrustsecFeatureTemplate.
type LookupCiscoTrustsecFeatureTemplateResult struct {
	// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
	CredentialsId string `pulumi:"credentialsId"`
	// Variable name
	CredentialsIdVariable string `pulumi:"credentialsIdVariable"`
	// Set the password for the device
	CredentialsPassword string `pulumi:"credentialsPassword"`
	// Variable name
	CredentialsPasswordVariable string `pulumi:"credentialsPasswordVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// Configure Local device security group \n\n
	DeviceSgt int `pulumi:"deviceSgt"`
	// Variable name
	DeviceSgtVariable string `pulumi:"deviceSgtVariable"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable Role-based Access Control enforcement
	EnableEnforcement bool `pulumi:"enableEnforcement"`
	// Variable name
	EnableEnforcementVariable string `pulumi:"enableEnforcementVariable"`
	// Enable CTS SXP support
	EnableSxp bool `pulumi:"enableSxp"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Configure Maximum allowed hold-time for listener in seconds \n\n
	MaximumListenerHoldTime int `pulumi:"maximumListenerHoldTime"`
	// Variable name
	MaximumListenerHoldTimeVariable string `pulumi:"maximumListenerHoldTimeVariable"`
	// Configure Minimum allowed hold-time for listener in seconds \n\n
	MinimumListenerHoldTime int `pulumi:"minimumListenerHoldTime"`
	// Variable name
	MinimumListenerHoldTimeVariable string `pulumi:"minimumListenerHoldTimeVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Configure Speaker hold-time in seconds \n\n
	SpeakerHoldTime int `pulumi:"speakerHoldTime"`
	// Variable name
	SpeakerHoldTimeVariable string `pulumi:"speakerHoldTimeVariable"`
	// Configure SXP Connections
	SxpConnections []GetCiscoTrustsecFeatureTemplateSxpConnection `pulumi:"sxpConnections"`
	// Configure SXP default password
	SxpDefaultPassword string `pulumi:"sxpDefaultPassword"`
	// Variable name
	SxpDefaultPasswordVariable string `pulumi:"sxpDefaultPasswordVariable"`
	// Configure SXP key-chain
	SxpKeyChain string `pulumi:"sxpKeyChain"`
	// Variable name
	SxpKeyChainVariable string `pulumi:"sxpKeyChainVariable"`
	// Enables logging for IP-to-SGT binding changes
	SxpLogBindingChanges bool `pulumi:"sxpLogBindingChanges"`
	// Variable name
	SxpLogBindingChangesVariable string `pulumi:"sxpLogBindingChangesVariable"`
	// Configure SXP Node ID \n\n
	SxpNodeId string `pulumi:"sxpNodeId"`
	// Define SXP Node ID type \n\n
	SxpNodeIdType string `pulumi:"sxpNodeIdType"`
	// Variable name
	SxpNodeIdVariable string `pulumi:"sxpNodeIdVariable"`
	// Configure the SXP reconciliation period in seconds \n\n
	SxpReconciliationPeriod int `pulumi:"sxpReconciliationPeriod"`
	// Variable name
	SxpReconciliationPeriodVariable string `pulumi:"sxpReconciliationPeriodVariable"`
	// Configure Retry period for SXP connection in seconds \n\n
	SxpRetryPeriod int `pulumi:"sxpRetryPeriod"`
	// Variable name
	SxpRetryPeriodVariable string `pulumi:"sxpRetryPeriodVariable"`
	// SXP Source IP
	SxpSourceIp string `pulumi:"sxpSourceIp"`
	// Variable name
	SxpSourceIpVariable string `pulumi:"sxpSourceIpVariable"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoTrustsecFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoTrustsecFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoTrustsecFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCiscoTrustsecFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoTrustsecFeatureTemplateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCiscoTrustsecFeatureTemplateResult
			secret, err := ctx.InvokePackageRaw("sdwan:index/getCiscoTrustsecFeatureTemplate:getCiscoTrustsecFeatureTemplate", args, &rv, "", opts...)
			if err != nil {
				return LookupCiscoTrustsecFeatureTemplateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCiscoTrustsecFeatureTemplateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCiscoTrustsecFeatureTemplateResultOutput), nil
			}
			return output, nil
		}).(LookupCiscoTrustsecFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoTrustsecFeatureTemplate.
type LookupCiscoTrustsecFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoTrustsecFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoTrustsecFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoTrustsecFeatureTemplate.
type LookupCiscoTrustsecFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoTrustsecFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoTrustsecFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoTrustsecFeatureTemplateResultOutput) ToLookupCiscoTrustsecFeatureTemplateResultOutput() LookupCiscoTrustsecFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoTrustsecFeatureTemplateResultOutput) ToLookupCiscoTrustsecFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoTrustsecFeatureTemplateResultOutput {
	return o
}

// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) CredentialsId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.CredentialsId }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) CredentialsIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.CredentialsIdVariable }).(pulumi.StringOutput)
}

// Set the password for the device
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) CredentialsPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.CredentialsPassword }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) CredentialsPasswordVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.CredentialsPasswordVariable }).(pulumi.StringOutput)
}

// The description of the feature template
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// Configure Local device security group \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) DeviceSgt() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.DeviceSgt }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) DeviceSgtVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.DeviceSgtVariable }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Enable Role-based Access Control enforcement
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) EnableEnforcement() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) bool { return v.EnableEnforcement }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) EnableEnforcementVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.EnableEnforcementVariable }).(pulumi.StringOutput)
}

// Enable CTS SXP support
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) EnableSxp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) bool { return v.EnableSxp }).(pulumi.BoolOutput)
}

// The id of the feature template
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configure Maximum allowed hold-time for listener in seconds \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) MaximumListenerHoldTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.MaximumListenerHoldTime }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) MaximumListenerHoldTimeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.MaximumListenerHoldTimeVariable }).(pulumi.StringOutput)
}

// Configure Minimum allowed hold-time for listener in seconds \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) MinimumListenerHoldTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.MinimumListenerHoldTime }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) MinimumListenerHoldTimeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.MinimumListenerHoldTimeVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Configure Speaker hold-time in seconds \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SpeakerHoldTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.SpeakerHoldTime }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SpeakerHoldTimeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SpeakerHoldTimeVariable }).(pulumi.StringOutput)
}

// Configure SXP Connections
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpConnections() GetCiscoTrustsecFeatureTemplateSxpConnectionArrayOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) []GetCiscoTrustsecFeatureTemplateSxpConnection {
		return v.SxpConnections
	}).(GetCiscoTrustsecFeatureTemplateSxpConnectionArrayOutput)
}

// Configure SXP default password
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpDefaultPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpDefaultPassword }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpDefaultPasswordVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpDefaultPasswordVariable }).(pulumi.StringOutput)
}

// Configure SXP key-chain
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpKeyChain() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpKeyChain }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpKeyChainVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpKeyChainVariable }).(pulumi.StringOutput)
}

// Enables logging for IP-to-SGT binding changes
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpLogBindingChanges() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) bool { return v.SxpLogBindingChanges }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpLogBindingChangesVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpLogBindingChangesVariable }).(pulumi.StringOutput)
}

// Configure SXP Node ID \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpNodeId }).(pulumi.StringOutput)
}

// Define SXP Node ID type \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpNodeIdType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpNodeIdType }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpNodeIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpNodeIdVariable }).(pulumi.StringOutput)
}

// Configure the SXP reconciliation period in seconds \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpReconciliationPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.SxpReconciliationPeriod }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpReconciliationPeriodVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpReconciliationPeriodVariable }).(pulumi.StringOutput)
}

// Configure Retry period for SXP connection in seconds \n\n
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpRetryPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.SxpRetryPeriod }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpRetryPeriodVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpRetryPeriodVariable }).(pulumi.StringOutput)
}

// SXP Source IP
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpSourceIp }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) SxpSourceIpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.SxpSourceIpVariable }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoTrustsecFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoTrustsecFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoTrustsecFeatureTemplateResultOutput{})
}
