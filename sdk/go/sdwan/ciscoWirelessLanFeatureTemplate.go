// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco Wireless LAN feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoWirelessLanFeatureTemplate struct {
	pulumi.CustomResourceState

	// Set mobile express default gateway
	//   - Default value: `0.0.0.0`
	ControllerDefaultGateway pulumi.StringPtrOutput `pulumi:"controllerDefaultGateway"`
	// Variable name
	ControllerDefaultGatewayVariable pulumi.StringPtrOutput `pulumi:"controllerDefaultGatewayVariable"`
	// Set mobile express controller address
	//   - Default value: `0.0.0.0`
	ControllerIpAddress pulumi.StringPtrOutput `pulumi:"controllerIpAddress"`
	// Variable name
	ControllerIpAddressVariable pulumi.StringPtrOutput `pulumi:"controllerIpAddressVariable"`
	// Set mobile express controller subnet mask
	//   - Default value: `0.0.0.0`
	ControllerSubnetMask pulumi.StringPtrOutput `pulumi:"controllerSubnetMask"`
	// Variable name
	ControllerSubnetMaskVariable pulumi.StringPtrOutput `pulumi:"controllerSubnetMaskVariable"`
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// Variable name
	CountryVariable pulumi.StringPtrOutput `pulumi:"countryVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Set management password
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Variable name
	PasswordVariable pulumi.StringPtrOutput `pulumi:"passwordVariable"`
	// 2.4GHz Shutdown
	//   - Default value: `false`
	Shutdown24ghz pulumi.BoolPtrOutput `pulumi:"shutdown24ghz"`
	// Variable name
	Shutdown24ghzVariable pulumi.StringPtrOutput `pulumi:"shutdown24ghzVariable"`
	// 5GHz Shutdown
	//   - Default value: `false`
	Shutdown5ghz pulumi.BoolPtrOutput `pulumi:"shutdown5ghz"`
	// Variable name
	Shutdown5ghzVariable pulumi.StringPtrOutput `pulumi:"shutdown5ghzVariable"`
	// Configure Wi-Fi SSID
	Ssids CiscoWirelessLanFeatureTemplateSsidArrayOutput `pulumi:"ssids"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Set management username
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Variable name
	UsernameVariable pulumi.StringPtrOutput `pulumi:"usernameVariable"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoWirelessLanFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoWirelessLanFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoWirelessLanFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoWirelessLanFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoWirelessLanFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoWirelessLanFeatureTemplate gets an existing CiscoWirelessLanFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoWirelessLanFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoWirelessLanFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoWirelessLanFeatureTemplate, error) {
	var resource CiscoWirelessLanFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoWirelessLanFeatureTemplate:CiscoWirelessLanFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoWirelessLanFeatureTemplate resources.
type ciscoWirelessLanFeatureTemplateState struct {
	// Set mobile express default gateway
	//   - Default value: `0.0.0.0`
	ControllerDefaultGateway *string `pulumi:"controllerDefaultGateway"`
	// Variable name
	ControllerDefaultGatewayVariable *string `pulumi:"controllerDefaultGatewayVariable"`
	// Set mobile express controller address
	//   - Default value: `0.0.0.0`
	ControllerIpAddress *string `pulumi:"controllerIpAddress"`
	// Variable name
	ControllerIpAddressVariable *string `pulumi:"controllerIpAddressVariable"`
	// Set mobile express controller subnet mask
	//   - Default value: `0.0.0.0`
	ControllerSubnetMask *string `pulumi:"controllerSubnetMask"`
	// Variable name
	ControllerSubnetMaskVariable *string `pulumi:"controllerSubnetMaskVariable"`
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country *string `pulumi:"country"`
	// Variable name
	CountryVariable *string `pulumi:"countryVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set management password
	Password *string `pulumi:"password"`
	// Variable name
	PasswordVariable *string `pulumi:"passwordVariable"`
	// 2.4GHz Shutdown
	//   - Default value: `false`
	Shutdown24ghz *bool `pulumi:"shutdown24ghz"`
	// Variable name
	Shutdown24ghzVariable *string `pulumi:"shutdown24ghzVariable"`
	// 5GHz Shutdown
	//   - Default value: `false`
	Shutdown5ghz *bool `pulumi:"shutdown5ghz"`
	// Variable name
	Shutdown5ghzVariable *string `pulumi:"shutdown5ghzVariable"`
	// Configure Wi-Fi SSID
	Ssids []CiscoWirelessLanFeatureTemplateSsid `pulumi:"ssids"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Set management username
	Username *string `pulumi:"username"`
	// Variable name
	UsernameVariable *string `pulumi:"usernameVariable"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoWirelessLanFeatureTemplateState struct {
	// Set mobile express default gateway
	//   - Default value: `0.0.0.0`
	ControllerDefaultGateway pulumi.StringPtrInput
	// Variable name
	ControllerDefaultGatewayVariable pulumi.StringPtrInput
	// Set mobile express controller address
	//   - Default value: `0.0.0.0`
	ControllerIpAddress pulumi.StringPtrInput
	// Variable name
	ControllerIpAddressVariable pulumi.StringPtrInput
	// Set mobile express controller subnet mask
	//   - Default value: `0.0.0.0`
	ControllerSubnetMask pulumi.StringPtrInput
	// Variable name
	ControllerSubnetMaskVariable pulumi.StringPtrInput
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country pulumi.StringPtrInput
	// Variable name
	CountryVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set management password
	Password pulumi.StringPtrInput
	// Variable name
	PasswordVariable pulumi.StringPtrInput
	// 2.4GHz Shutdown
	//   - Default value: `false`
	Shutdown24ghz pulumi.BoolPtrInput
	// Variable name
	Shutdown24ghzVariable pulumi.StringPtrInput
	// 5GHz Shutdown
	//   - Default value: `false`
	Shutdown5ghz pulumi.BoolPtrInput
	// Variable name
	Shutdown5ghzVariable pulumi.StringPtrInput
	// Configure Wi-Fi SSID
	Ssids CiscoWirelessLanFeatureTemplateSsidArrayInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Set management username
	Username pulumi.StringPtrInput
	// Variable name
	UsernameVariable pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoWirelessLanFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoWirelessLanFeatureTemplateState)(nil)).Elem()
}

type ciscoWirelessLanFeatureTemplateArgs struct {
	// Set mobile express default gateway
	//   - Default value: `0.0.0.0`
	ControllerDefaultGateway *string `pulumi:"controllerDefaultGateway"`
	// Variable name
	ControllerDefaultGatewayVariable *string `pulumi:"controllerDefaultGatewayVariable"`
	// Set mobile express controller address
	//   - Default value: `0.0.0.0`
	ControllerIpAddress *string `pulumi:"controllerIpAddress"`
	// Variable name
	ControllerIpAddressVariable *string `pulumi:"controllerIpAddressVariable"`
	// Set mobile express controller subnet mask
	//   - Default value: `0.0.0.0`
	ControllerSubnetMask *string `pulumi:"controllerSubnetMask"`
	// Variable name
	ControllerSubnetMaskVariable *string `pulumi:"controllerSubnetMaskVariable"`
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country *string `pulumi:"country"`
	// Variable name
	CountryVariable *string `pulumi:"countryVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set management password
	Password *string `pulumi:"password"`
	// Variable name
	PasswordVariable *string `pulumi:"passwordVariable"`
	// 2.4GHz Shutdown
	//   - Default value: `false`
	Shutdown24ghz *bool `pulumi:"shutdown24ghz"`
	// Variable name
	Shutdown24ghzVariable *string `pulumi:"shutdown24ghzVariable"`
	// 5GHz Shutdown
	//   - Default value: `false`
	Shutdown5ghz *bool `pulumi:"shutdown5ghz"`
	// Variable name
	Shutdown5ghzVariable *string `pulumi:"shutdown5ghzVariable"`
	// Configure Wi-Fi SSID
	Ssids []CiscoWirelessLanFeatureTemplateSsid `pulumi:"ssids"`
	// Set management username
	Username *string `pulumi:"username"`
	// Variable name
	UsernameVariable *string `pulumi:"usernameVariable"`
}

// The set of arguments for constructing a CiscoWirelessLanFeatureTemplate resource.
type CiscoWirelessLanFeatureTemplateArgs struct {
	// Set mobile express default gateway
	//   - Default value: `0.0.0.0`
	ControllerDefaultGateway pulumi.StringPtrInput
	// Variable name
	ControllerDefaultGatewayVariable pulumi.StringPtrInput
	// Set mobile express controller address
	//   - Default value: `0.0.0.0`
	ControllerIpAddress pulumi.StringPtrInput
	// Variable name
	ControllerIpAddressVariable pulumi.StringPtrInput
	// Set mobile express controller subnet mask
	//   - Default value: `0.0.0.0`
	ControllerSubnetMask pulumi.StringPtrInput
	// Variable name
	ControllerSubnetMaskVariable pulumi.StringPtrInput
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country pulumi.StringPtrInput
	// Variable name
	CountryVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set management password
	Password pulumi.StringPtrInput
	// Variable name
	PasswordVariable pulumi.StringPtrInput
	// 2.4GHz Shutdown
	//   - Default value: `false`
	Shutdown24ghz pulumi.BoolPtrInput
	// Variable name
	Shutdown24ghzVariable pulumi.StringPtrInput
	// 5GHz Shutdown
	//   - Default value: `false`
	Shutdown5ghz pulumi.BoolPtrInput
	// Variable name
	Shutdown5ghzVariable pulumi.StringPtrInput
	// Configure Wi-Fi SSID
	Ssids CiscoWirelessLanFeatureTemplateSsidArrayInput
	// Set management username
	Username pulumi.StringPtrInput
	// Variable name
	UsernameVariable pulumi.StringPtrInput
}

func (CiscoWirelessLanFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoWirelessLanFeatureTemplateArgs)(nil)).Elem()
}

type CiscoWirelessLanFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoWirelessLanFeatureTemplateOutput() CiscoWirelessLanFeatureTemplateOutput
	ToCiscoWirelessLanFeatureTemplateOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateOutput
}

func (*CiscoWirelessLanFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoWirelessLanFeatureTemplate)(nil)).Elem()
}

func (i *CiscoWirelessLanFeatureTemplate) ToCiscoWirelessLanFeatureTemplateOutput() CiscoWirelessLanFeatureTemplateOutput {
	return i.ToCiscoWirelessLanFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoWirelessLanFeatureTemplate) ToCiscoWirelessLanFeatureTemplateOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoWirelessLanFeatureTemplateOutput)
}

// CiscoWirelessLanFeatureTemplateArrayInput is an input type that accepts CiscoWirelessLanFeatureTemplateArray and CiscoWirelessLanFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoWirelessLanFeatureTemplateArrayInput` via:
//
//	CiscoWirelessLanFeatureTemplateArray{ CiscoWirelessLanFeatureTemplateArgs{...} }
type CiscoWirelessLanFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoWirelessLanFeatureTemplateArrayOutput() CiscoWirelessLanFeatureTemplateArrayOutput
	ToCiscoWirelessLanFeatureTemplateArrayOutputWithContext(context.Context) CiscoWirelessLanFeatureTemplateArrayOutput
}

type CiscoWirelessLanFeatureTemplateArray []CiscoWirelessLanFeatureTemplateInput

func (CiscoWirelessLanFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoWirelessLanFeatureTemplate)(nil)).Elem()
}

func (i CiscoWirelessLanFeatureTemplateArray) ToCiscoWirelessLanFeatureTemplateArrayOutput() CiscoWirelessLanFeatureTemplateArrayOutput {
	return i.ToCiscoWirelessLanFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoWirelessLanFeatureTemplateArray) ToCiscoWirelessLanFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoWirelessLanFeatureTemplateArrayOutput)
}

// CiscoWirelessLanFeatureTemplateMapInput is an input type that accepts CiscoWirelessLanFeatureTemplateMap and CiscoWirelessLanFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoWirelessLanFeatureTemplateMapInput` via:
//
//	CiscoWirelessLanFeatureTemplateMap{ "key": CiscoWirelessLanFeatureTemplateArgs{...} }
type CiscoWirelessLanFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoWirelessLanFeatureTemplateMapOutput() CiscoWirelessLanFeatureTemplateMapOutput
	ToCiscoWirelessLanFeatureTemplateMapOutputWithContext(context.Context) CiscoWirelessLanFeatureTemplateMapOutput
}

type CiscoWirelessLanFeatureTemplateMap map[string]CiscoWirelessLanFeatureTemplateInput

func (CiscoWirelessLanFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoWirelessLanFeatureTemplate)(nil)).Elem()
}

func (i CiscoWirelessLanFeatureTemplateMap) ToCiscoWirelessLanFeatureTemplateMapOutput() CiscoWirelessLanFeatureTemplateMapOutput {
	return i.ToCiscoWirelessLanFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoWirelessLanFeatureTemplateMap) ToCiscoWirelessLanFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoWirelessLanFeatureTemplateMapOutput)
}

type CiscoWirelessLanFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoWirelessLanFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoWirelessLanFeatureTemplate)(nil)).Elem()
}

func (o CiscoWirelessLanFeatureTemplateOutput) ToCiscoWirelessLanFeatureTemplateOutput() CiscoWirelessLanFeatureTemplateOutput {
	return o
}

func (o CiscoWirelessLanFeatureTemplateOutput) ToCiscoWirelessLanFeatureTemplateOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateOutput {
	return o
}

// Set mobile express default gateway
//   - Default value: `0.0.0.0`
func (o CiscoWirelessLanFeatureTemplateOutput) ControllerDefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.ControllerDefaultGateway }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) ControllerDefaultGatewayVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput {
		return v.ControllerDefaultGatewayVariable
	}).(pulumi.StringPtrOutput)
}

// Set mobile express controller address
//   - Default value: `0.0.0.0`
func (o CiscoWirelessLanFeatureTemplateOutput) ControllerIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.ControllerIpAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) ControllerIpAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.ControllerIpAddressVariable }).(pulumi.StringPtrOutput)
}

// Set mobile express controller subnet mask
//   - Default value: `0.0.0.0`
func (o CiscoWirelessLanFeatureTemplateOutput) ControllerSubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.ControllerSubnetMask }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) ControllerSubnetMaskVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.ControllerSubnetMaskVariable }).(pulumi.StringPtrOutput)
}

// Select country
//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
func (o CiscoWirelessLanFeatureTemplateOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) CountryVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.CountryVariable }).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoWirelessLanFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoWirelessLanFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// The name of the feature template
func (o CiscoWirelessLanFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set management password
func (o CiscoWirelessLanFeatureTemplateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) PasswordVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.PasswordVariable }).(pulumi.StringPtrOutput)
}

// 2.4GHz Shutdown
//   - Default value: `false`
func (o CiscoWirelessLanFeatureTemplateOutput) Shutdown24ghz() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.BoolPtrOutput { return v.Shutdown24ghz }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) Shutdown24ghzVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.Shutdown24ghzVariable }).(pulumi.StringPtrOutput)
}

// 5GHz Shutdown
//   - Default value: `false`
func (o CiscoWirelessLanFeatureTemplateOutput) Shutdown5ghz() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.BoolPtrOutput { return v.Shutdown5ghz }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) Shutdown5ghzVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.Shutdown5ghzVariable }).(pulumi.StringPtrOutput)
}

// Configure Wi-Fi SSID
func (o CiscoWirelessLanFeatureTemplateOutput) Ssids() CiscoWirelessLanFeatureTemplateSsidArrayOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) CiscoWirelessLanFeatureTemplateSsidArrayOutput {
		return v.Ssids
	}).(CiscoWirelessLanFeatureTemplateSsidArrayOutput)
}

// The template type
func (o CiscoWirelessLanFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Set management username
func (o CiscoWirelessLanFeatureTemplateOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoWirelessLanFeatureTemplateOutput) UsernameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.StringPtrOutput { return v.UsernameVariable }).(pulumi.StringPtrOutput)
}

// The version of the feature template
func (o CiscoWirelessLanFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoWirelessLanFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoWirelessLanFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoWirelessLanFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoWirelessLanFeatureTemplate)(nil)).Elem()
}

func (o CiscoWirelessLanFeatureTemplateArrayOutput) ToCiscoWirelessLanFeatureTemplateArrayOutput() CiscoWirelessLanFeatureTemplateArrayOutput {
	return o
}

func (o CiscoWirelessLanFeatureTemplateArrayOutput) ToCiscoWirelessLanFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateArrayOutput {
	return o
}

func (o CiscoWirelessLanFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoWirelessLanFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoWirelessLanFeatureTemplate {
		return vs[0].([]*CiscoWirelessLanFeatureTemplate)[vs[1].(int)]
	}).(CiscoWirelessLanFeatureTemplateOutput)
}

type CiscoWirelessLanFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoWirelessLanFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoWirelessLanFeatureTemplate)(nil)).Elem()
}

func (o CiscoWirelessLanFeatureTemplateMapOutput) ToCiscoWirelessLanFeatureTemplateMapOutput() CiscoWirelessLanFeatureTemplateMapOutput {
	return o
}

func (o CiscoWirelessLanFeatureTemplateMapOutput) ToCiscoWirelessLanFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoWirelessLanFeatureTemplateMapOutput {
	return o
}

func (o CiscoWirelessLanFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoWirelessLanFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoWirelessLanFeatureTemplate {
		return vs[0].(map[string]*CiscoWirelessLanFeatureTemplate)[vs[1].(string)]
	}).(CiscoWirelessLanFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoWirelessLanFeatureTemplateInput)(nil)).Elem(), &CiscoWirelessLanFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoWirelessLanFeatureTemplateArrayInput)(nil)).Elem(), CiscoWirelessLanFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoWirelessLanFeatureTemplateMapInput)(nil)).Elem(), CiscoWirelessLanFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoWirelessLanFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoWirelessLanFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoWirelessLanFeatureTemplateMapOutput{})
}
