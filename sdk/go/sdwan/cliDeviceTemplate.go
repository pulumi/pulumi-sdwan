// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a CLI Device Template .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCliDeviceTemplate(ctx, "example", &sdwan.CliDeviceTemplateArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My description"),
//				DeviceType:       pulumi.String("vedge-ISR-4331"),
//				CliType:          pulumi.String("device"),
//				CliConfiguration: pulumi.String(" system\n host-name             R1-ISR4331-1200-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/cliDeviceTemplate:CliDeviceTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CliDeviceTemplate struct {
	pulumi.CustomResourceState

	// CLI configuration
	CliConfiguration pulumi.StringOutput `pulumi:"cliConfiguration"`
	// CLI type
	//   - Choices: `device`, `intend`
	CliType pulumi.StringOutput `pulumi:"cliType"`
	// The description of the device template
	Description pulumi.StringOutput `pulumi:"description"`
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType pulumi.StringOutput `pulumi:"deviceType"`
	// The name of the device template
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCliDeviceTemplate registers a new resource with the given unique name, arguments, and options.
func NewCliDeviceTemplate(ctx *pulumi.Context,
	name string, args *CliDeviceTemplateArgs, opts ...pulumi.ResourceOption) (*CliDeviceTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CliConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'CliConfiguration'")
	}
	if args.CliType == nil {
		return nil, errors.New("invalid value for required argument 'CliType'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceType == nil {
		return nil, errors.New("invalid value for required argument 'DeviceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CliDeviceTemplate
	err := ctx.RegisterResource("sdwan:index/cliDeviceTemplate:CliDeviceTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCliDeviceTemplate gets an existing CliDeviceTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCliDeviceTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CliDeviceTemplateState, opts ...pulumi.ResourceOption) (*CliDeviceTemplate, error) {
	var resource CliDeviceTemplate
	err := ctx.ReadResource("sdwan:index/cliDeviceTemplate:CliDeviceTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CliDeviceTemplate resources.
type cliDeviceTemplateState struct {
	// CLI configuration
	CliConfiguration *string `pulumi:"cliConfiguration"`
	// CLI type
	//   - Choices: `device`, `intend`
	CliType *string `pulumi:"cliType"`
	// The description of the device template
	Description *string `pulumi:"description"`
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType *string `pulumi:"deviceType"`
	// The name of the device template
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type CliDeviceTemplateState struct {
	// CLI configuration
	CliConfiguration pulumi.StringPtrInput
	// CLI type
	//   - Choices: `device`, `intend`
	CliType pulumi.StringPtrInput
	// The description of the device template
	Description pulumi.StringPtrInput
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType pulumi.StringPtrInput
	// The name of the device template
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (CliDeviceTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cliDeviceTemplateState)(nil)).Elem()
}

type cliDeviceTemplateArgs struct {
	// CLI configuration
	CliConfiguration string `pulumi:"cliConfiguration"`
	// CLI type
	//   - Choices: `device`, `intend`
	CliType string `pulumi:"cliType"`
	// The description of the device template
	Description string `pulumi:"description"`
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType string `pulumi:"deviceType"`
	// The name of the device template
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CliDeviceTemplate resource.
type CliDeviceTemplateArgs struct {
	// CLI configuration
	CliConfiguration pulumi.StringInput
	// CLI type
	//   - Choices: `device`, `intend`
	CliType pulumi.StringInput
	// The description of the device template
	Description pulumi.StringInput
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType pulumi.StringInput
	// The name of the device template
	Name pulumi.StringPtrInput
}

func (CliDeviceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cliDeviceTemplateArgs)(nil)).Elem()
}

type CliDeviceTemplateInput interface {
	pulumi.Input

	ToCliDeviceTemplateOutput() CliDeviceTemplateOutput
	ToCliDeviceTemplateOutputWithContext(ctx context.Context) CliDeviceTemplateOutput
}

func (*CliDeviceTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CliDeviceTemplate)(nil)).Elem()
}

func (i *CliDeviceTemplate) ToCliDeviceTemplateOutput() CliDeviceTemplateOutput {
	return i.ToCliDeviceTemplateOutputWithContext(context.Background())
}

func (i *CliDeviceTemplate) ToCliDeviceTemplateOutputWithContext(ctx context.Context) CliDeviceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliDeviceTemplateOutput)
}

// CliDeviceTemplateArrayInput is an input type that accepts CliDeviceTemplateArray and CliDeviceTemplateArrayOutput values.
// You can construct a concrete instance of `CliDeviceTemplateArrayInput` via:
//
//	CliDeviceTemplateArray{ CliDeviceTemplateArgs{...} }
type CliDeviceTemplateArrayInput interface {
	pulumi.Input

	ToCliDeviceTemplateArrayOutput() CliDeviceTemplateArrayOutput
	ToCliDeviceTemplateArrayOutputWithContext(context.Context) CliDeviceTemplateArrayOutput
}

type CliDeviceTemplateArray []CliDeviceTemplateInput

func (CliDeviceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliDeviceTemplate)(nil)).Elem()
}

func (i CliDeviceTemplateArray) ToCliDeviceTemplateArrayOutput() CliDeviceTemplateArrayOutput {
	return i.ToCliDeviceTemplateArrayOutputWithContext(context.Background())
}

func (i CliDeviceTemplateArray) ToCliDeviceTemplateArrayOutputWithContext(ctx context.Context) CliDeviceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliDeviceTemplateArrayOutput)
}

// CliDeviceTemplateMapInput is an input type that accepts CliDeviceTemplateMap and CliDeviceTemplateMapOutput values.
// You can construct a concrete instance of `CliDeviceTemplateMapInput` via:
//
//	CliDeviceTemplateMap{ "key": CliDeviceTemplateArgs{...} }
type CliDeviceTemplateMapInput interface {
	pulumi.Input

	ToCliDeviceTemplateMapOutput() CliDeviceTemplateMapOutput
	ToCliDeviceTemplateMapOutputWithContext(context.Context) CliDeviceTemplateMapOutput
}

type CliDeviceTemplateMap map[string]CliDeviceTemplateInput

func (CliDeviceTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliDeviceTemplate)(nil)).Elem()
}

func (i CliDeviceTemplateMap) ToCliDeviceTemplateMapOutput() CliDeviceTemplateMapOutput {
	return i.ToCliDeviceTemplateMapOutputWithContext(context.Background())
}

func (i CliDeviceTemplateMap) ToCliDeviceTemplateMapOutputWithContext(ctx context.Context) CliDeviceTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliDeviceTemplateMapOutput)
}

type CliDeviceTemplateOutput struct{ *pulumi.OutputState }

func (CliDeviceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CliDeviceTemplate)(nil)).Elem()
}

func (o CliDeviceTemplateOutput) ToCliDeviceTemplateOutput() CliDeviceTemplateOutput {
	return o
}

func (o CliDeviceTemplateOutput) ToCliDeviceTemplateOutputWithContext(ctx context.Context) CliDeviceTemplateOutput {
	return o
}

// CLI configuration
func (o CliDeviceTemplateOutput) CliConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *CliDeviceTemplate) pulumi.StringOutput { return v.CliConfiguration }).(pulumi.StringOutput)
}

// CLI type
//   - Choices: `device`, `intend`
func (o CliDeviceTemplateOutput) CliType() pulumi.StringOutput {
	return o.ApplyT(func(v *CliDeviceTemplate) pulumi.StringOutput { return v.CliType }).(pulumi.StringOutput)
}

// The description of the device template
func (o CliDeviceTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CliDeviceTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The device type (e.g., `vedge-ISR-4331`)
func (o CliDeviceTemplateOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *CliDeviceTemplate) pulumi.StringOutput { return v.DeviceType }).(pulumi.StringOutput)
}

// The name of the device template
func (o CliDeviceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CliDeviceTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o CliDeviceTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CliDeviceTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CliDeviceTemplateArrayOutput struct{ *pulumi.OutputState }

func (CliDeviceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliDeviceTemplate)(nil)).Elem()
}

func (o CliDeviceTemplateArrayOutput) ToCliDeviceTemplateArrayOutput() CliDeviceTemplateArrayOutput {
	return o
}

func (o CliDeviceTemplateArrayOutput) ToCliDeviceTemplateArrayOutputWithContext(ctx context.Context) CliDeviceTemplateArrayOutput {
	return o
}

func (o CliDeviceTemplateArrayOutput) Index(i pulumi.IntInput) CliDeviceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CliDeviceTemplate {
		return vs[0].([]*CliDeviceTemplate)[vs[1].(int)]
	}).(CliDeviceTemplateOutput)
}

type CliDeviceTemplateMapOutput struct{ *pulumi.OutputState }

func (CliDeviceTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliDeviceTemplate)(nil)).Elem()
}

func (o CliDeviceTemplateMapOutput) ToCliDeviceTemplateMapOutput() CliDeviceTemplateMapOutput {
	return o
}

func (o CliDeviceTemplateMapOutput) ToCliDeviceTemplateMapOutputWithContext(ctx context.Context) CliDeviceTemplateMapOutput {
	return o
}

func (o CliDeviceTemplateMapOutput) MapIndex(k pulumi.StringInput) CliDeviceTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CliDeviceTemplate {
		return vs[0].(map[string]*CliDeviceTemplate)[vs[1].(string)]
	}).(CliDeviceTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CliDeviceTemplateInput)(nil)).Elem(), &CliDeviceTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliDeviceTemplateArrayInput)(nil)).Elem(), CliDeviceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliDeviceTemplateMapInput)(nil)).Elem(), CliDeviceTemplateMap{})
	pulumi.RegisterOutputType(CliDeviceTemplateOutput{})
	pulumi.RegisterOutputType(CliDeviceTemplateArrayOutput{})
	pulumi.RegisterOutputType(CliDeviceTemplateMapOutput{})
}
