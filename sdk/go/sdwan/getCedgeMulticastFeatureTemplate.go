// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the cEdge Multicast feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCedgeMulticastFeatureTemplate(ctx, &sdwan.LookupCedgeMulticastFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCedgeMulticastFeatureTemplate(ctx *pulumi.Context, args *LookupCedgeMulticastFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCedgeMulticastFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCedgeMulticastFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCedgeMulticastFeatureTemplate:getCedgeMulticastFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCedgeMulticastFeatureTemplate.
type LookupCedgeMulticastFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCedgeMulticastFeatureTemplate.
type LookupCedgeMulticastFeatureTemplateResult struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Replicator is local to this device
	LocalReplicator bool `pulumi:"localReplicator"`
	// Variable name
	LocalReplicatorVariable string `pulumi:"localReplicatorVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Shortest Path Tree (SPT) Only Mode
	SptOnly bool `pulumi:"sptOnly"`
	// Variable name
	SptOnlyVariable string `pulumi:"sptOnlyVariable"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// Set number of joins per group the router supports
	Threshold int `pulumi:"threshold"`
	// Variable name
	ThresholdVariable string `pulumi:"thresholdVariable"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCedgeMulticastFeatureTemplateOutput(ctx *pulumi.Context, args LookupCedgeMulticastFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCedgeMulticastFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCedgeMulticastFeatureTemplateResult, error) {
			args := v.(LookupCedgeMulticastFeatureTemplateArgs)
			r, err := LookupCedgeMulticastFeatureTemplate(ctx, &args, opts...)
			var s LookupCedgeMulticastFeatureTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCedgeMulticastFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCedgeMulticastFeatureTemplate.
type LookupCedgeMulticastFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCedgeMulticastFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCedgeMulticastFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCedgeMulticastFeatureTemplate.
type LookupCedgeMulticastFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCedgeMulticastFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCedgeMulticastFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCedgeMulticastFeatureTemplateResultOutput) ToLookupCedgeMulticastFeatureTemplateResultOutput() LookupCedgeMulticastFeatureTemplateResultOutput {
	return o
}

func (o LookupCedgeMulticastFeatureTemplateResultOutput) ToLookupCedgeMulticastFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCedgeMulticastFeatureTemplateResultOutput {
	return o
}

// The description of the feature template
func (o LookupCedgeMulticastFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCedgeMulticastFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// The id of the feature template
func (o LookupCedgeMulticastFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Replicator is local to this device
func (o LookupCedgeMulticastFeatureTemplateResultOutput) LocalReplicator() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) bool { return v.LocalReplicator }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCedgeMulticastFeatureTemplateResultOutput) LocalReplicatorVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.LocalReplicatorVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCedgeMulticastFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Shortest Path Tree (SPT) Only Mode
func (o LookupCedgeMulticastFeatureTemplateResultOutput) SptOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) bool { return v.SptOnly }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCedgeMulticastFeatureTemplateResultOutput) SptOnlyVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.SptOnlyVariable }).(pulumi.StringOutput)
}

// The template type
func (o LookupCedgeMulticastFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Set number of joins per group the router supports
func (o LookupCedgeMulticastFeatureTemplateResultOutput) Threshold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) int { return v.Threshold }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCedgeMulticastFeatureTemplateResultOutput) ThresholdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) string { return v.ThresholdVariable }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCedgeMulticastFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCedgeMulticastFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCedgeMulticastFeatureTemplateResultOutput{})
}
