// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Mirror Policy Object .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewMirrorPolicyObject(ctx, "example", &sdwan.MirrorPolicyObjectArgs{
//				Name:                pulumi.String("Example"),
//				RemoteDestinationIp: pulumi.String("10.1.1.1"),
//				SourceIp:            pulumi.String("10.2.1.1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/mirrorPolicyObject:MirrorPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type MirrorPolicyObject struct {
	pulumi.CustomResourceState

	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// Remote destination IP
	RemoteDestinationIp pulumi.StringOutput `pulumi:"remoteDestinationIp"`
	// Source IP
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewMirrorPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewMirrorPolicyObject(ctx *pulumi.Context,
	name string, args *MirrorPolicyObjectArgs, opts ...pulumi.ResourceOption) (*MirrorPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RemoteDestinationIp == nil {
		return nil, errors.New("invalid value for required argument 'RemoteDestinationIp'")
	}
	if args.SourceIp == nil {
		return nil, errors.New("invalid value for required argument 'SourceIp'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MirrorPolicyObject
	err := ctx.RegisterResource("sdwan:index/mirrorPolicyObject:MirrorPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMirrorPolicyObject gets an existing MirrorPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMirrorPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MirrorPolicyObjectState, opts ...pulumi.ResourceOption) (*MirrorPolicyObject, error) {
	var resource MirrorPolicyObject
	err := ctx.ReadResource("sdwan:index/mirrorPolicyObject:MirrorPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MirrorPolicyObject resources.
type mirrorPolicyObjectState struct {
	// The name of the policy object
	Name *string `pulumi:"name"`
	// Remote destination IP
	RemoteDestinationIp *string `pulumi:"remoteDestinationIp"`
	// Source IP
	SourceIp *string `pulumi:"sourceIp"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type MirrorPolicyObjectState struct {
	// The name of the policy object
	Name pulumi.StringPtrInput
	// Remote destination IP
	RemoteDestinationIp pulumi.StringPtrInput
	// Source IP
	SourceIp pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (MirrorPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*mirrorPolicyObjectState)(nil)).Elem()
}

type mirrorPolicyObjectArgs struct {
	// The name of the policy object
	Name *string `pulumi:"name"`
	// Remote destination IP
	RemoteDestinationIp string `pulumi:"remoteDestinationIp"`
	// Source IP
	SourceIp string `pulumi:"sourceIp"`
}

// The set of arguments for constructing a MirrorPolicyObject resource.
type MirrorPolicyObjectArgs struct {
	// The name of the policy object
	Name pulumi.StringPtrInput
	// Remote destination IP
	RemoteDestinationIp pulumi.StringInput
	// Source IP
	SourceIp pulumi.StringInput
}

func (MirrorPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mirrorPolicyObjectArgs)(nil)).Elem()
}

type MirrorPolicyObjectInput interface {
	pulumi.Input

	ToMirrorPolicyObjectOutput() MirrorPolicyObjectOutput
	ToMirrorPolicyObjectOutputWithContext(ctx context.Context) MirrorPolicyObjectOutput
}

func (*MirrorPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**MirrorPolicyObject)(nil)).Elem()
}

func (i *MirrorPolicyObject) ToMirrorPolicyObjectOutput() MirrorPolicyObjectOutput {
	return i.ToMirrorPolicyObjectOutputWithContext(context.Background())
}

func (i *MirrorPolicyObject) ToMirrorPolicyObjectOutputWithContext(ctx context.Context) MirrorPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorPolicyObjectOutput)
}

// MirrorPolicyObjectArrayInput is an input type that accepts MirrorPolicyObjectArray and MirrorPolicyObjectArrayOutput values.
// You can construct a concrete instance of `MirrorPolicyObjectArrayInput` via:
//
//	MirrorPolicyObjectArray{ MirrorPolicyObjectArgs{...} }
type MirrorPolicyObjectArrayInput interface {
	pulumi.Input

	ToMirrorPolicyObjectArrayOutput() MirrorPolicyObjectArrayOutput
	ToMirrorPolicyObjectArrayOutputWithContext(context.Context) MirrorPolicyObjectArrayOutput
}

type MirrorPolicyObjectArray []MirrorPolicyObjectInput

func (MirrorPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirrorPolicyObject)(nil)).Elem()
}

func (i MirrorPolicyObjectArray) ToMirrorPolicyObjectArrayOutput() MirrorPolicyObjectArrayOutput {
	return i.ToMirrorPolicyObjectArrayOutputWithContext(context.Background())
}

func (i MirrorPolicyObjectArray) ToMirrorPolicyObjectArrayOutputWithContext(ctx context.Context) MirrorPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorPolicyObjectArrayOutput)
}

// MirrorPolicyObjectMapInput is an input type that accepts MirrorPolicyObjectMap and MirrorPolicyObjectMapOutput values.
// You can construct a concrete instance of `MirrorPolicyObjectMapInput` via:
//
//	MirrorPolicyObjectMap{ "key": MirrorPolicyObjectArgs{...} }
type MirrorPolicyObjectMapInput interface {
	pulumi.Input

	ToMirrorPolicyObjectMapOutput() MirrorPolicyObjectMapOutput
	ToMirrorPolicyObjectMapOutputWithContext(context.Context) MirrorPolicyObjectMapOutput
}

type MirrorPolicyObjectMap map[string]MirrorPolicyObjectInput

func (MirrorPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirrorPolicyObject)(nil)).Elem()
}

func (i MirrorPolicyObjectMap) ToMirrorPolicyObjectMapOutput() MirrorPolicyObjectMapOutput {
	return i.ToMirrorPolicyObjectMapOutputWithContext(context.Background())
}

func (i MirrorPolicyObjectMap) ToMirrorPolicyObjectMapOutputWithContext(ctx context.Context) MirrorPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MirrorPolicyObjectMapOutput)
}

type MirrorPolicyObjectOutput struct{ *pulumi.OutputState }

func (MirrorPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MirrorPolicyObject)(nil)).Elem()
}

func (o MirrorPolicyObjectOutput) ToMirrorPolicyObjectOutput() MirrorPolicyObjectOutput {
	return o
}

func (o MirrorPolicyObjectOutput) ToMirrorPolicyObjectOutputWithContext(ctx context.Context) MirrorPolicyObjectOutput {
	return o
}

// The name of the policy object
func (o MirrorPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MirrorPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Remote destination IP
func (o MirrorPolicyObjectOutput) RemoteDestinationIp() pulumi.StringOutput {
	return o.ApplyT(func(v *MirrorPolicyObject) pulumi.StringOutput { return v.RemoteDestinationIp }).(pulumi.StringOutput)
}

// Source IP
func (o MirrorPolicyObjectOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *MirrorPolicyObject) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// The version of the object
func (o MirrorPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *MirrorPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type MirrorPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (MirrorPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MirrorPolicyObject)(nil)).Elem()
}

func (o MirrorPolicyObjectArrayOutput) ToMirrorPolicyObjectArrayOutput() MirrorPolicyObjectArrayOutput {
	return o
}

func (o MirrorPolicyObjectArrayOutput) ToMirrorPolicyObjectArrayOutputWithContext(ctx context.Context) MirrorPolicyObjectArrayOutput {
	return o
}

func (o MirrorPolicyObjectArrayOutput) Index(i pulumi.IntInput) MirrorPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MirrorPolicyObject {
		return vs[0].([]*MirrorPolicyObject)[vs[1].(int)]
	}).(MirrorPolicyObjectOutput)
}

type MirrorPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (MirrorPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MirrorPolicyObject)(nil)).Elem()
}

func (o MirrorPolicyObjectMapOutput) ToMirrorPolicyObjectMapOutput() MirrorPolicyObjectMapOutput {
	return o
}

func (o MirrorPolicyObjectMapOutput) ToMirrorPolicyObjectMapOutputWithContext(ctx context.Context) MirrorPolicyObjectMapOutput {
	return o
}

func (o MirrorPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) MirrorPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MirrorPolicyObject {
		return vs[0].(map[string]*MirrorPolicyObject)[vs[1].(string)]
	}).(MirrorPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorPolicyObjectInput)(nil)).Elem(), &MirrorPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorPolicyObjectArrayInput)(nil)).Elem(), MirrorPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MirrorPolicyObjectMapInput)(nil)).Elem(), MirrorPolicyObjectMap{})
	pulumi.RegisterOutputType(MirrorPolicyObjectOutput{})
	pulumi.RegisterOutputType(MirrorPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(MirrorPolicyObjectMapOutput{})
}
