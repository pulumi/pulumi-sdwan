// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Policer Policy Object .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewPolicerPolicyObject(ctx, "example", &sdwan.PolicerPolicyObjectArgs{
//				Name:         pulumi.String("Example"),
//				Burst:        pulumi.Int(100000),
//				ExceedAction: pulumi.String("remark"),
//				Rate:         pulumi.Int(100),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/policerPolicyObject:PolicerPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type PolicerPolicyObject struct {
	pulumi.CustomResourceState

	// Burst in bytes
	//   - Range: `15000`-`10000000`
	Burst pulumi.IntOutput `pulumi:"burst"`
	// Exceed action
	//   - Choices: `drop`, `remark`
	ExceedAction pulumi.StringOutput `pulumi:"exceedAction"`
	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// Rate in bps
	//   - Range: `8`-`100000000000`
	Rate pulumi.IntOutput `pulumi:"rate"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPolicerPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewPolicerPolicyObject(ctx *pulumi.Context,
	name string, args *PolicerPolicyObjectArgs, opts ...pulumi.ResourceOption) (*PolicerPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Burst == nil {
		return nil, errors.New("invalid value for required argument 'Burst'")
	}
	if args.ExceedAction == nil {
		return nil, errors.New("invalid value for required argument 'ExceedAction'")
	}
	if args.Rate == nil {
		return nil, errors.New("invalid value for required argument 'Rate'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicerPolicyObject
	err := ctx.RegisterResource("sdwan:index/policerPolicyObject:PolicerPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicerPolicyObject gets an existing PolicerPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicerPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicerPolicyObjectState, opts ...pulumi.ResourceOption) (*PolicerPolicyObject, error) {
	var resource PolicerPolicyObject
	err := ctx.ReadResource("sdwan:index/policerPolicyObject:PolicerPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicerPolicyObject resources.
type policerPolicyObjectState struct {
	// Burst in bytes
	//   - Range: `15000`-`10000000`
	Burst *int `pulumi:"burst"`
	// Exceed action
	//   - Choices: `drop`, `remark`
	ExceedAction *string `pulumi:"exceedAction"`
	// The name of the policy object
	Name *string `pulumi:"name"`
	// Rate in bps
	//   - Range: `8`-`100000000000`
	Rate *int `pulumi:"rate"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type PolicerPolicyObjectState struct {
	// Burst in bytes
	//   - Range: `15000`-`10000000`
	Burst pulumi.IntPtrInput
	// Exceed action
	//   - Choices: `drop`, `remark`
	ExceedAction pulumi.StringPtrInput
	// The name of the policy object
	Name pulumi.StringPtrInput
	// Rate in bps
	//   - Range: `8`-`100000000000`
	Rate pulumi.IntPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (PolicerPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*policerPolicyObjectState)(nil)).Elem()
}

type policerPolicyObjectArgs struct {
	// Burst in bytes
	//   - Range: `15000`-`10000000`
	Burst int `pulumi:"burst"`
	// Exceed action
	//   - Choices: `drop`, `remark`
	ExceedAction string `pulumi:"exceedAction"`
	// The name of the policy object
	Name *string `pulumi:"name"`
	// Rate in bps
	//   - Range: `8`-`100000000000`
	Rate int `pulumi:"rate"`
}

// The set of arguments for constructing a PolicerPolicyObject resource.
type PolicerPolicyObjectArgs struct {
	// Burst in bytes
	//   - Range: `15000`-`10000000`
	Burst pulumi.IntInput
	// Exceed action
	//   - Choices: `drop`, `remark`
	ExceedAction pulumi.StringInput
	// The name of the policy object
	Name pulumi.StringPtrInput
	// Rate in bps
	//   - Range: `8`-`100000000000`
	Rate pulumi.IntInput
}

func (PolicerPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policerPolicyObjectArgs)(nil)).Elem()
}

type PolicerPolicyObjectInput interface {
	pulumi.Input

	ToPolicerPolicyObjectOutput() PolicerPolicyObjectOutput
	ToPolicerPolicyObjectOutputWithContext(ctx context.Context) PolicerPolicyObjectOutput
}

func (*PolicerPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicerPolicyObject)(nil)).Elem()
}

func (i *PolicerPolicyObject) ToPolicerPolicyObjectOutput() PolicerPolicyObjectOutput {
	return i.ToPolicerPolicyObjectOutputWithContext(context.Background())
}

func (i *PolicerPolicyObject) ToPolicerPolicyObjectOutputWithContext(ctx context.Context) PolicerPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicerPolicyObjectOutput)
}

// PolicerPolicyObjectArrayInput is an input type that accepts PolicerPolicyObjectArray and PolicerPolicyObjectArrayOutput values.
// You can construct a concrete instance of `PolicerPolicyObjectArrayInput` via:
//
//	PolicerPolicyObjectArray{ PolicerPolicyObjectArgs{...} }
type PolicerPolicyObjectArrayInput interface {
	pulumi.Input

	ToPolicerPolicyObjectArrayOutput() PolicerPolicyObjectArrayOutput
	ToPolicerPolicyObjectArrayOutputWithContext(context.Context) PolicerPolicyObjectArrayOutput
}

type PolicerPolicyObjectArray []PolicerPolicyObjectInput

func (PolicerPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicerPolicyObject)(nil)).Elem()
}

func (i PolicerPolicyObjectArray) ToPolicerPolicyObjectArrayOutput() PolicerPolicyObjectArrayOutput {
	return i.ToPolicerPolicyObjectArrayOutputWithContext(context.Background())
}

func (i PolicerPolicyObjectArray) ToPolicerPolicyObjectArrayOutputWithContext(ctx context.Context) PolicerPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicerPolicyObjectArrayOutput)
}

// PolicerPolicyObjectMapInput is an input type that accepts PolicerPolicyObjectMap and PolicerPolicyObjectMapOutput values.
// You can construct a concrete instance of `PolicerPolicyObjectMapInput` via:
//
//	PolicerPolicyObjectMap{ "key": PolicerPolicyObjectArgs{...} }
type PolicerPolicyObjectMapInput interface {
	pulumi.Input

	ToPolicerPolicyObjectMapOutput() PolicerPolicyObjectMapOutput
	ToPolicerPolicyObjectMapOutputWithContext(context.Context) PolicerPolicyObjectMapOutput
}

type PolicerPolicyObjectMap map[string]PolicerPolicyObjectInput

func (PolicerPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicerPolicyObject)(nil)).Elem()
}

func (i PolicerPolicyObjectMap) ToPolicerPolicyObjectMapOutput() PolicerPolicyObjectMapOutput {
	return i.ToPolicerPolicyObjectMapOutputWithContext(context.Background())
}

func (i PolicerPolicyObjectMap) ToPolicerPolicyObjectMapOutputWithContext(ctx context.Context) PolicerPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicerPolicyObjectMapOutput)
}

type PolicerPolicyObjectOutput struct{ *pulumi.OutputState }

func (PolicerPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicerPolicyObject)(nil)).Elem()
}

func (o PolicerPolicyObjectOutput) ToPolicerPolicyObjectOutput() PolicerPolicyObjectOutput {
	return o
}

func (o PolicerPolicyObjectOutput) ToPolicerPolicyObjectOutputWithContext(ctx context.Context) PolicerPolicyObjectOutput {
	return o
}

// Burst in bytes
//   - Range: `15000`-`10000000`
func (o PolicerPolicyObjectOutput) Burst() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicerPolicyObject) pulumi.IntOutput { return v.Burst }).(pulumi.IntOutput)
}

// Exceed action
//   - Choices: `drop`, `remark`
func (o PolicerPolicyObjectOutput) ExceedAction() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicerPolicyObject) pulumi.StringOutput { return v.ExceedAction }).(pulumi.StringOutput)
}

// The name of the policy object
func (o PolicerPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicerPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Rate in bps
//   - Range: `8`-`100000000000`
func (o PolicerPolicyObjectOutput) Rate() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicerPolicyObject) pulumi.IntOutput { return v.Rate }).(pulumi.IntOutput)
}

// The version of the object
func (o PolicerPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicerPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type PolicerPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (PolicerPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicerPolicyObject)(nil)).Elem()
}

func (o PolicerPolicyObjectArrayOutput) ToPolicerPolicyObjectArrayOutput() PolicerPolicyObjectArrayOutput {
	return o
}

func (o PolicerPolicyObjectArrayOutput) ToPolicerPolicyObjectArrayOutputWithContext(ctx context.Context) PolicerPolicyObjectArrayOutput {
	return o
}

func (o PolicerPolicyObjectArrayOutput) Index(i pulumi.IntInput) PolicerPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicerPolicyObject {
		return vs[0].([]*PolicerPolicyObject)[vs[1].(int)]
	}).(PolicerPolicyObjectOutput)
}

type PolicerPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (PolicerPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicerPolicyObject)(nil)).Elem()
}

func (o PolicerPolicyObjectMapOutput) ToPolicerPolicyObjectMapOutput() PolicerPolicyObjectMapOutput {
	return o
}

func (o PolicerPolicyObjectMapOutput) ToPolicerPolicyObjectMapOutputWithContext(ctx context.Context) PolicerPolicyObjectMapOutput {
	return o
}

func (o PolicerPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) PolicerPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicerPolicyObject {
		return vs[0].(map[string]*PolicerPolicyObject)[vs[1].(string)]
	}).(PolicerPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicerPolicyObjectInput)(nil)).Elem(), &PolicerPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicerPolicyObjectArrayInput)(nil)).Elem(), PolicerPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicerPolicyObjectMapInput)(nil)).Elem(), PolicerPolicyObjectMap{})
	pulumi.RegisterOutputType(PolicerPolicyObjectOutput{})
	pulumi.RegisterOutputType(PolicerPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(PolicerPolicyObjectMapOutput{})
}
