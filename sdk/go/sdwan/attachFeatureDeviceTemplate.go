// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can attach a feature device template. Due to limitations of the API, once a device template is attached to a device, only one change can be applied per `pulumi up` operation. More information is available here.
type AttachFeatureDeviceTemplate struct {
	pulumi.CustomResourceState

	// Devices
	Devices AttachFeatureDeviceTemplateDeviceArrayOutput `pulumi:"devices"`
	// The version of the device template
	Version pulumi.IntPtrOutput `pulumi:"version"`
}

// NewAttachFeatureDeviceTemplate registers a new resource with the given unique name, arguments, and options.
func NewAttachFeatureDeviceTemplate(ctx *pulumi.Context,
	name string, args *AttachFeatureDeviceTemplateArgs, opts ...pulumi.ResourceOption) (*AttachFeatureDeviceTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Devices == nil {
		return nil, errors.New("invalid value for required argument 'Devices'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AttachFeatureDeviceTemplate
	err := ctx.RegisterResource("sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachFeatureDeviceTemplate gets an existing AttachFeatureDeviceTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachFeatureDeviceTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachFeatureDeviceTemplateState, opts ...pulumi.ResourceOption) (*AttachFeatureDeviceTemplate, error) {
	var resource AttachFeatureDeviceTemplate
	err := ctx.ReadResource("sdwan:index/attachFeatureDeviceTemplate:AttachFeatureDeviceTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttachFeatureDeviceTemplate resources.
type attachFeatureDeviceTemplateState struct {
	// Devices
	Devices []AttachFeatureDeviceTemplateDevice `pulumi:"devices"`
	// The version of the device template
	Version *int `pulumi:"version"`
}

type AttachFeatureDeviceTemplateState struct {
	// Devices
	Devices AttachFeatureDeviceTemplateDeviceArrayInput
	// The version of the device template
	Version pulumi.IntPtrInput
}

func (AttachFeatureDeviceTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachFeatureDeviceTemplateState)(nil)).Elem()
}

type attachFeatureDeviceTemplateArgs struct {
	// Devices
	Devices []AttachFeatureDeviceTemplateDevice `pulumi:"devices"`
	// The version of the device template
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a AttachFeatureDeviceTemplate resource.
type AttachFeatureDeviceTemplateArgs struct {
	// Devices
	Devices AttachFeatureDeviceTemplateDeviceArrayInput
	// The version of the device template
	Version pulumi.IntPtrInput
}

func (AttachFeatureDeviceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachFeatureDeviceTemplateArgs)(nil)).Elem()
}

type AttachFeatureDeviceTemplateInput interface {
	pulumi.Input

	ToAttachFeatureDeviceTemplateOutput() AttachFeatureDeviceTemplateOutput
	ToAttachFeatureDeviceTemplateOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateOutput
}

func (*AttachFeatureDeviceTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachFeatureDeviceTemplate)(nil)).Elem()
}

func (i *AttachFeatureDeviceTemplate) ToAttachFeatureDeviceTemplateOutput() AttachFeatureDeviceTemplateOutput {
	return i.ToAttachFeatureDeviceTemplateOutputWithContext(context.Background())
}

func (i *AttachFeatureDeviceTemplate) ToAttachFeatureDeviceTemplateOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachFeatureDeviceTemplateOutput)
}

// AttachFeatureDeviceTemplateArrayInput is an input type that accepts AttachFeatureDeviceTemplateArray and AttachFeatureDeviceTemplateArrayOutput values.
// You can construct a concrete instance of `AttachFeatureDeviceTemplateArrayInput` via:
//
//	AttachFeatureDeviceTemplateArray{ AttachFeatureDeviceTemplateArgs{...} }
type AttachFeatureDeviceTemplateArrayInput interface {
	pulumi.Input

	ToAttachFeatureDeviceTemplateArrayOutput() AttachFeatureDeviceTemplateArrayOutput
	ToAttachFeatureDeviceTemplateArrayOutputWithContext(context.Context) AttachFeatureDeviceTemplateArrayOutput
}

type AttachFeatureDeviceTemplateArray []AttachFeatureDeviceTemplateInput

func (AttachFeatureDeviceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachFeatureDeviceTemplate)(nil)).Elem()
}

func (i AttachFeatureDeviceTemplateArray) ToAttachFeatureDeviceTemplateArrayOutput() AttachFeatureDeviceTemplateArrayOutput {
	return i.ToAttachFeatureDeviceTemplateArrayOutputWithContext(context.Background())
}

func (i AttachFeatureDeviceTemplateArray) ToAttachFeatureDeviceTemplateArrayOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachFeatureDeviceTemplateArrayOutput)
}

// AttachFeatureDeviceTemplateMapInput is an input type that accepts AttachFeatureDeviceTemplateMap and AttachFeatureDeviceTemplateMapOutput values.
// You can construct a concrete instance of `AttachFeatureDeviceTemplateMapInput` via:
//
//	AttachFeatureDeviceTemplateMap{ "key": AttachFeatureDeviceTemplateArgs{...} }
type AttachFeatureDeviceTemplateMapInput interface {
	pulumi.Input

	ToAttachFeatureDeviceTemplateMapOutput() AttachFeatureDeviceTemplateMapOutput
	ToAttachFeatureDeviceTemplateMapOutputWithContext(context.Context) AttachFeatureDeviceTemplateMapOutput
}

type AttachFeatureDeviceTemplateMap map[string]AttachFeatureDeviceTemplateInput

func (AttachFeatureDeviceTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachFeatureDeviceTemplate)(nil)).Elem()
}

func (i AttachFeatureDeviceTemplateMap) ToAttachFeatureDeviceTemplateMapOutput() AttachFeatureDeviceTemplateMapOutput {
	return i.ToAttachFeatureDeviceTemplateMapOutputWithContext(context.Background())
}

func (i AttachFeatureDeviceTemplateMap) ToAttachFeatureDeviceTemplateMapOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachFeatureDeviceTemplateMapOutput)
}

type AttachFeatureDeviceTemplateOutput struct{ *pulumi.OutputState }

func (AttachFeatureDeviceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachFeatureDeviceTemplate)(nil)).Elem()
}

func (o AttachFeatureDeviceTemplateOutput) ToAttachFeatureDeviceTemplateOutput() AttachFeatureDeviceTemplateOutput {
	return o
}

func (o AttachFeatureDeviceTemplateOutput) ToAttachFeatureDeviceTemplateOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateOutput {
	return o
}

// Devices
func (o AttachFeatureDeviceTemplateOutput) Devices() AttachFeatureDeviceTemplateDeviceArrayOutput {
	return o.ApplyT(func(v *AttachFeatureDeviceTemplate) AttachFeatureDeviceTemplateDeviceArrayOutput { return v.Devices }).(AttachFeatureDeviceTemplateDeviceArrayOutput)
}

// The version of the device template
func (o AttachFeatureDeviceTemplateOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AttachFeatureDeviceTemplate) pulumi.IntPtrOutput { return v.Version }).(pulumi.IntPtrOutput)
}

type AttachFeatureDeviceTemplateArrayOutput struct{ *pulumi.OutputState }

func (AttachFeatureDeviceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachFeatureDeviceTemplate)(nil)).Elem()
}

func (o AttachFeatureDeviceTemplateArrayOutput) ToAttachFeatureDeviceTemplateArrayOutput() AttachFeatureDeviceTemplateArrayOutput {
	return o
}

func (o AttachFeatureDeviceTemplateArrayOutput) ToAttachFeatureDeviceTemplateArrayOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateArrayOutput {
	return o
}

func (o AttachFeatureDeviceTemplateArrayOutput) Index(i pulumi.IntInput) AttachFeatureDeviceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachFeatureDeviceTemplate {
		return vs[0].([]*AttachFeatureDeviceTemplate)[vs[1].(int)]
	}).(AttachFeatureDeviceTemplateOutput)
}

type AttachFeatureDeviceTemplateMapOutput struct{ *pulumi.OutputState }

func (AttachFeatureDeviceTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachFeatureDeviceTemplate)(nil)).Elem()
}

func (o AttachFeatureDeviceTemplateMapOutput) ToAttachFeatureDeviceTemplateMapOutput() AttachFeatureDeviceTemplateMapOutput {
	return o
}

func (o AttachFeatureDeviceTemplateMapOutput) ToAttachFeatureDeviceTemplateMapOutputWithContext(ctx context.Context) AttachFeatureDeviceTemplateMapOutput {
	return o
}

func (o AttachFeatureDeviceTemplateMapOutput) MapIndex(k pulumi.StringInput) AttachFeatureDeviceTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachFeatureDeviceTemplate {
		return vs[0].(map[string]*AttachFeatureDeviceTemplate)[vs[1].(string)]
	}).(AttachFeatureDeviceTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachFeatureDeviceTemplateInput)(nil)).Elem(), &AttachFeatureDeviceTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachFeatureDeviceTemplateArrayInput)(nil)).Elem(), AttachFeatureDeviceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachFeatureDeviceTemplateMapInput)(nil)).Elem(), AttachFeatureDeviceTemplateMap{})
	pulumi.RegisterOutputType(AttachFeatureDeviceTemplateOutput{})
	pulumi.RegisterOutputType(AttachFeatureDeviceTemplateArrayOutput{})
	pulumi.RegisterOutputType(AttachFeatureDeviceTemplateMapOutput{})
}
