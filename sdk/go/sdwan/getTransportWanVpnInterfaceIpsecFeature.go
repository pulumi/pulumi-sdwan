// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Transport WAN VPN Interface IPSEC Feature.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupTransportWanVpnInterfaceIpsecFeature(ctx, &sdwan.LookupTransportWanVpnInterfaceIpsecFeatureArgs{
//				Id:                       "f6b2c44c-693c-4763-b010-895aa3d236bd",
//				FeatureProfileId:         "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
//				TransportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTransportWanVpnInterfaceIpsecFeature(ctx *pulumi.Context, args *LookupTransportWanVpnInterfaceIpsecFeatureArgs, opts ...pulumi.InvokeOption) (*LookupTransportWanVpnInterfaceIpsecFeatureResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransportWanVpnInterfaceIpsecFeatureResult
	err := ctx.Invoke("sdwan:index/getTransportWanVpnInterfaceIpsecFeature:getTransportWanVpnInterfaceIpsecFeature", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTransportWanVpnInterfaceIpsecFeature.
type LookupTransportWanVpnInterfaceIpsecFeatureArgs struct {
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the Feature
	Id string `pulumi:"id"`
	// Transport WAN VPN Feature ID
	TransportWanVpnFeatureId string `pulumi:"transportWanVpnFeatureId"`
}

// A collection of values returned by getTransportWanVpnInterfaceIpsecFeature.
type LookupTransportWanVpnInterfaceIpsecFeatureResult struct {
	// Enable Application Tunnel Type
	ApplicationTunnelType string `pulumi:"applicationTunnelType"`
	// Variable name
	ApplicationTunnelTypeVariable string `pulumi:"applicationTunnelTypeVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
	ClearDontFragment bool `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable string `pulumi:"clearDontFragmentVariable"`
	// The description of the Feature
	Description string `pulumi:"description"`
	// IKE keepalive interval (seconds)
	DpdInterval int `pulumi:"dpdInterval"`
	// Variable name
	DpdIntervalVariable string `pulumi:"dpdIntervalVariable"`
	// IKE keepalive retries
	DpdRetries int `pulumi:"dpdRetries"`
	// Variable name
	DpdRetriesVariable string `pulumi:"dpdRetriesVariable"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the Feature
	Id string `pulumi:"id"`
	// IKE identity the IKE preshared secret belongs to
	IkeCiphersuite string `pulumi:"ikeCiphersuite"`
	// Variable name
	IkeCiphersuiteVariable string `pulumi:"ikeCiphersuiteVariable"`
	// IKE Diffie Hellman Groups
	IkeDiffieHellmanGroup string `pulumi:"ikeDiffieHellmanGroup"`
	// Variable name
	IkeDiffieHellmanGroupVariable string `pulumi:"ikeDiffieHellmanGroupVariable"`
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkeIdLocalEndPoint string `pulumi:"ikeIdLocalEndPoint"`
	// Variable name
	IkeIdLocalEndPointVariable string `pulumi:"ikeIdLocalEndPointVariable"`
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkeIdRemoteEndPoint string `pulumi:"ikeIdRemoteEndPoint"`
	// Variable name
	IkeIdRemoteEndPointVariable string `pulumi:"ikeIdRemoteEndPointVariable"`
	// IKE integrity protocol
	IkeIntegrityProtocol string `pulumi:"ikeIntegrityProtocol"`
	// Variable name
	IkeIntegrityProtocolVariable string `pulumi:"ikeIntegrityProtocolVariable"`
	// Use preshared key to authenticate IKE peer
	IkePresharedKey string `pulumi:"ikePresharedKey"`
	// Variable name
	IkePresharedKeyVariable string `pulumi:"ikePresharedKeyVariable"`
	// IKE rekey interval \n\n seconds
	IkeRekeyInterval int `pulumi:"ikeRekeyInterval"`
	// Variable name
	IkeRekeyIntervalVariable string `pulumi:"ikeRekeyIntervalVariable"`
	// IKE Version \n\n
	IkeVersion int `pulumi:"ikeVersion"`
	// Interface description
	InterfaceDescription string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable string `pulumi:"interfaceDescriptionVariable"`
	// Interface name: IPsec when present
	InterfaceName string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable string `pulumi:"interfaceNameVariable"`
	// Interface MTU \n\n, in bytes
	IpMtu int `pulumi:"ipMtu"`
	// Variable name
	IpMtuVariable string `pulumi:"ipMtuVariable"`
	// IPsec(ESP) encryption and integrity protocol
	IpsecCiphersuite string `pulumi:"ipsecCiphersuite"`
	// Variable name
	IpsecCiphersuiteVariable string `pulumi:"ipsecCiphersuiteVariable"`
	// IPsec rekey interval \n\n seconds
	IpsecRekeyInterval int `pulumi:"ipsecRekeyInterval"`
	// Variable name
	IpsecRekeyIntervalVariable string `pulumi:"ipsecRekeyIntervalVariable"`
	// Replay window size 32..8192 (must be a power of 2)
	IpsecReplayWindow int `pulumi:"ipsecReplayWindow"`
	// Variable name
	IpsecReplayWindowVariable string `pulumi:"ipsecReplayWindowVariable"`
	Ipv4Address               string `pulumi:"ipv4Address"`
	// Variable name
	Ipv4AddressVariable string `pulumi:"ipv4AddressVariable"`
	Ipv4SubnetMask      string `pulumi:"ipv4SubnetMask"`
	// Variable name
	Ipv4SubnetMaskVariable string `pulumi:"ipv4SubnetMaskVariable"`
	// The name of the Feature
	Name string `pulumi:"name"`
	// IPsec perfect forward secrecy settings
	PerfectForwardSecrecy string `pulumi:"perfectForwardSecrecy"`
	// Variable name
	PerfectForwardSecrecyVariable string `pulumi:"perfectForwardSecrecyVariable"`
	// Administrative state
	Shutdown bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes
	TcpMss int `pulumi:"tcpMss"`
	// Variable name
	TcpMssVariable string `pulumi:"tcpMssVariable"`
	// Enable tracker for this interface
	TrackerId string `pulumi:"trackerId"`
	// Variable name
	TrackerIdVariable string `pulumi:"trackerIdVariable"`
	// Transport WAN VPN Feature ID
	TransportWanVpnFeatureId     string `pulumi:"transportWanVpnFeatureId"`
	TunnelDestinationIpv4Address string `pulumi:"tunnelDestinationIpv4Address"`
	// Variable name
	TunnelDestinationIpv4AddressVariable string `pulumi:"tunnelDestinationIpv4AddressVariable"`
	TunnelDestinationIpv4SubnetMask      string `pulumi:"tunnelDestinationIpv4SubnetMask"`
	// Variable name
	TunnelDestinationIpv4SubnetMaskVariable string `pulumi:"tunnelDestinationIpv4SubnetMaskVariable"`
	// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
	TunnelRouteVia string `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable string `pulumi:"tunnelRouteViaVariable"`
	// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
	TunnelSourceInterface string `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable string `pulumi:"tunnelSourceInterfaceVariable"`
	TunnelSourceIpv4Address       string `pulumi:"tunnelSourceIpv4Address"`
	// Variable name
	TunnelSourceIpv4AddressVariable string `pulumi:"tunnelSourceIpv4AddressVariable"`
	TunnelSourceIpv4SubnetMask      string `pulumi:"tunnelSourceIpv4SubnetMask"`
	// Variable name
	TunnelSourceIpv4SubnetMaskVariable string `pulumi:"tunnelSourceIpv4SubnetMaskVariable"`
	// The version of the Feature
	Version int `pulumi:"version"`
}

func LookupTransportWanVpnInterfaceIpsecFeatureOutput(ctx *pulumi.Context, args LookupTransportWanVpnInterfaceIpsecFeatureOutputArgs, opts ...pulumi.InvokeOption) LookupTransportWanVpnInterfaceIpsecFeatureResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTransportWanVpnInterfaceIpsecFeatureResultOutput, error) {
			args := v.(LookupTransportWanVpnInterfaceIpsecFeatureArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdwan:index/getTransportWanVpnInterfaceIpsecFeature:getTransportWanVpnInterfaceIpsecFeature", args, LookupTransportWanVpnInterfaceIpsecFeatureResultOutput{}, options).(LookupTransportWanVpnInterfaceIpsecFeatureResultOutput), nil
		}).(LookupTransportWanVpnInterfaceIpsecFeatureResultOutput)
}

// A collection of arguments for invoking getTransportWanVpnInterfaceIpsecFeature.
type LookupTransportWanVpnInterfaceIpsecFeatureOutputArgs struct {
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput `pulumi:"featureProfileId"`
	// The id of the Feature
	Id pulumi.StringInput `pulumi:"id"`
	// Transport WAN VPN Feature ID
	TransportWanVpnFeatureId pulumi.StringInput `pulumi:"transportWanVpnFeatureId"`
}

func (LookupTransportWanVpnInterfaceIpsecFeatureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransportWanVpnInterfaceIpsecFeatureArgs)(nil)).Elem()
}

// A collection of values returned by getTransportWanVpnInterfaceIpsecFeature.
type LookupTransportWanVpnInterfaceIpsecFeatureResultOutput struct{ *pulumi.OutputState }

func (LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransportWanVpnInterfaceIpsecFeatureResult)(nil)).Elem()
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ToLookupTransportWanVpnInterfaceIpsecFeatureResultOutput() LookupTransportWanVpnInterfaceIpsecFeatureResultOutput {
	return o
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ToLookupTransportWanVpnInterfaceIpsecFeatureResultOutputWithContext(ctx context.Context) LookupTransportWanVpnInterfaceIpsecFeatureResultOutput {
	return o
}

// Enable Application Tunnel Type
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ApplicationTunnelType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.ApplicationTunnelType }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ApplicationTunnelTypeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.ApplicationTunnelTypeVariable
	}).(pulumi.StringOutput)
}

// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ClearDontFragment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) bool { return v.ClearDontFragment }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ClearDontFragmentVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.ClearDontFragmentVariable }).(pulumi.StringOutput)
}

// The description of the Feature
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Description }).(pulumi.StringOutput)
}

// IKE keepalive interval (seconds)
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) DpdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.DpdInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) DpdIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.DpdIntervalVariable }).(pulumi.StringOutput)
}

// IKE keepalive retries
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) DpdRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.DpdRetries }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) DpdRetriesVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.DpdRetriesVariable }).(pulumi.StringOutput)
}

// Feature Profile ID
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The id of the Feature
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Id }).(pulumi.StringOutput)
}

// IKE identity the IKE preshared secret belongs to
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeCiphersuite() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeCiphersuite }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeCiphersuiteVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeCiphersuiteVariable }).(pulumi.StringOutput)
}

// IKE Diffie Hellman Groups
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeDiffieHellmanGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeDiffieHellmanGroup }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeDiffieHellmanGroupVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.IkeDiffieHellmanGroupVariable
	}).(pulumi.StringOutput)
}

// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeIdLocalEndPoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeIdLocalEndPoint }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeIdLocalEndPointVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeIdLocalEndPointVariable }).(pulumi.StringOutput)
}

// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeIdRemoteEndPoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeIdRemoteEndPoint }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeIdRemoteEndPointVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeIdRemoteEndPointVariable }).(pulumi.StringOutput)
}

// IKE integrity protocol
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeIntegrityProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeIntegrityProtocol }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeIntegrityProtocolVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeIntegrityProtocolVariable }).(pulumi.StringOutput)
}

// Use preshared key to authenticate IKE peer
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkePresharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkePresharedKey }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkePresharedKeyVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkePresharedKeyVariable }).(pulumi.StringOutput)
}

// IKE rekey interval \n\n seconds
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeRekeyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.IkeRekeyInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeRekeyIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IkeRekeyIntervalVariable }).(pulumi.StringOutput)
}

// IKE Version \n\n
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IkeVersion() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.IkeVersion }).(pulumi.IntOutput)
}

// Interface description
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) InterfaceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.InterfaceDescription }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) InterfaceDescriptionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.InterfaceDescriptionVariable }).(pulumi.StringOutput)
}

// Interface name: IPsec when present
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.InterfaceName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) InterfaceNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.InterfaceNameVariable }).(pulumi.StringOutput)
}

// Interface MTU \n\n, in bytes
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.IpMtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpMtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IpMtuVariable }).(pulumi.StringOutput)
}

// IPsec(ESP) encryption and integrity protocol
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpsecCiphersuite() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IpsecCiphersuite }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpsecCiphersuiteVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IpsecCiphersuiteVariable }).(pulumi.StringOutput)
}

// IPsec rekey interval \n\n seconds
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpsecRekeyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.IpsecRekeyInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpsecRekeyIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IpsecRekeyIntervalVariable }).(pulumi.StringOutput)
}

// Replay window size 32..8192 (must be a power of 2)
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpsecReplayWindow() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.IpsecReplayWindow }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) IpsecReplayWindowVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.IpsecReplayWindowVariable }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Ipv4AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Ipv4AddressVariable }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Ipv4SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Ipv4SubnetMask }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Ipv4SubnetMaskVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Ipv4SubnetMaskVariable }).(pulumi.StringOutput)
}

// The name of the Feature
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.Name }).(pulumi.StringOutput)
}

// IPsec perfect forward secrecy settings
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) PerfectForwardSecrecy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.PerfectForwardSecrecy }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) PerfectForwardSecrecyVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.PerfectForwardSecrecyVariable
	}).(pulumi.StringOutput)
}

// Administrative state
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) ShutdownVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.ShutdownVariable }).(pulumi.StringOutput)
}

// TCP MSS on SYN packets, in bytes
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TcpMss() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.TcpMss }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TcpMssVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TcpMssVariable }).(pulumi.StringOutput)
}

// Enable tracker for this interface
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TrackerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TrackerId }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TrackerIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TrackerIdVariable }).(pulumi.StringOutput)
}

// Transport WAN VPN Feature ID
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TransportWanVpnFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TransportWanVpnFeatureId }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelDestinationIpv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TunnelDestinationIpv4Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelDestinationIpv4AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.TunnelDestinationIpv4AddressVariable
	}).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelDestinationIpv4SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.TunnelDestinationIpv4SubnetMask
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelDestinationIpv4SubnetMaskVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.TunnelDestinationIpv4SubnetMaskVariable
	}).(pulumi.StringOutput)
}

// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelRouteVia() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TunnelRouteVia }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelRouteViaVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TunnelRouteViaVariable }).(pulumi.StringOutput)
}

// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelSourceInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TunnelSourceInterface }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelSourceInterfaceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.TunnelSourceInterfaceVariable
	}).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelSourceIpv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TunnelSourceIpv4Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelSourceIpv4AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.TunnelSourceIpv4AddressVariable
	}).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelSourceIpv4SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string { return v.TunnelSourceIpv4SubnetMask }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) TunnelSourceIpv4SubnetMaskVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) string {
		return v.TunnelSourceIpv4SubnetMaskVariable
	}).(pulumi.StringOutput)
}

// The version of the Feature
func (o LookupTransportWanVpnInterfaceIpsecFeatureResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceIpsecFeatureResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransportWanVpnInterfaceIpsecFeatureResultOutput{})
}
