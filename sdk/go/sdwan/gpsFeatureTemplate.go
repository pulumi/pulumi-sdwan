// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a gps feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewGpsFeatureTemplate(ctx, "example", &sdwan.GpsFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				Enable:             pulumi.Bool(true),
//				GpsMode:            pulumi.String("ms-based"),
//				Nmea:               pulumi.Bool(true),
//				SourceAddress:      pulumi.String("1.2.3.4"),
//				DestinationAddress: pulumi.String("2.3.4.5"),
//				DestinationPort:    pulumi.Int(1234),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type GpsFeatureTemplate struct {
	pulumi.CustomResourceState

	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// Destination address
	DestinationAddress pulumi.StringPtrOutput `pulumi:"destinationAddress"`
	// Variable name
	DestinationAddressVariable pulumi.StringPtrOutput `pulumi:"destinationAddressVariable"`
	// Destination port - Range: `1`-`65535`
	DestinationPort pulumi.IntPtrOutput `pulumi:"destinationPort"`
	// Variable name
	DestinationPortVariable pulumi.StringPtrOutput `pulumi:"destinationPortVariable"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Enable/disable GPS - Default value: `false`
	Enable pulumi.BoolPtrOutput `pulumi:"enable"`
	// Variable name
	EnableVariable pulumi.StringPtrOutput `pulumi:"enableVariable"`
	// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
	GpsMode pulumi.StringPtrOutput `pulumi:"gpsMode"`
	// Variable name
	GpsModeVariable pulumi.StringPtrOutput `pulumi:"gpsModeVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable/disable NMEA data - Default value: `false`
	Nmea pulumi.BoolPtrOutput `pulumi:"nmea"`
	// Variable name
	NmeaVariable pulumi.StringPtrOutput `pulumi:"nmeaVariable"`
	// Source address
	SourceAddress pulumi.StringPtrOutput `pulumi:"sourceAddress"`
	// Variable name
	SourceAddressVariable pulumi.StringPtrOutput `pulumi:"sourceAddressVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewGpsFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewGpsFeatureTemplate(ctx *pulumi.Context,
	name string, args *GpsFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*GpsFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource GpsFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGpsFeatureTemplate gets an existing GpsFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGpsFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GpsFeatureTemplateState, opts ...pulumi.ResourceOption) (*GpsFeatureTemplate, error) {
	var resource GpsFeatureTemplate
	err := ctx.ReadResource("sdwan:index/gpsFeatureTemplate:GpsFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GpsFeatureTemplate resources.
type gpsFeatureTemplateState struct {
	// The description of the feature template
	Description *string `pulumi:"description"`
	// Destination address
	DestinationAddress *string `pulumi:"destinationAddress"`
	// Variable name
	DestinationAddressVariable *string `pulumi:"destinationAddressVariable"`
	// Destination port - Range: `1`-`65535`
	DestinationPort *int `pulumi:"destinationPort"`
	// Variable name
	DestinationPortVariable *string `pulumi:"destinationPortVariable"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable/disable GPS - Default value: `false`
	Enable *bool `pulumi:"enable"`
	// Variable name
	EnableVariable *string `pulumi:"enableVariable"`
	// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
	GpsMode *string `pulumi:"gpsMode"`
	// Variable name
	GpsModeVariable *string `pulumi:"gpsModeVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Enable/disable NMEA data - Default value: `false`
	Nmea *bool `pulumi:"nmea"`
	// Variable name
	NmeaVariable *string `pulumi:"nmeaVariable"`
	// Source address
	SourceAddress *string `pulumi:"sourceAddress"`
	// Variable name
	SourceAddressVariable *string `pulumi:"sourceAddressVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type GpsFeatureTemplateState struct {
	// The description of the feature template
	Description pulumi.StringPtrInput
	// Destination address
	DestinationAddress pulumi.StringPtrInput
	// Variable name
	DestinationAddressVariable pulumi.StringPtrInput
	// Destination port - Range: `1`-`65535`
	DestinationPort pulumi.IntPtrInput
	// Variable name
	DestinationPortVariable pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Enable/disable GPS - Default value: `false`
	Enable pulumi.BoolPtrInput
	// Variable name
	EnableVariable pulumi.StringPtrInput
	// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
	GpsMode pulumi.StringPtrInput
	// Variable name
	GpsModeVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Enable/disable NMEA data - Default value: `false`
	Nmea pulumi.BoolPtrInput
	// Variable name
	NmeaVariable pulumi.StringPtrInput
	// Source address
	SourceAddress pulumi.StringPtrInput
	// Variable name
	SourceAddressVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (GpsFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*gpsFeatureTemplateState)(nil)).Elem()
}

type gpsFeatureTemplateArgs struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// Destination address
	DestinationAddress *string `pulumi:"destinationAddress"`
	// Variable name
	DestinationAddressVariable *string `pulumi:"destinationAddressVariable"`
	// Destination port - Range: `1`-`65535`
	DestinationPort *int `pulumi:"destinationPort"`
	// Variable name
	DestinationPortVariable *string `pulumi:"destinationPortVariable"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable/disable GPS - Default value: `false`
	Enable *bool `pulumi:"enable"`
	// Variable name
	EnableVariable *string `pulumi:"enableVariable"`
	// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
	GpsMode *string `pulumi:"gpsMode"`
	// Variable name
	GpsModeVariable *string `pulumi:"gpsModeVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Enable/disable NMEA data - Default value: `false`
	Nmea *bool `pulumi:"nmea"`
	// Variable name
	NmeaVariable *string `pulumi:"nmeaVariable"`
	// Source address
	SourceAddress *string `pulumi:"sourceAddress"`
	// Variable name
	SourceAddressVariable *string `pulumi:"sourceAddressVariable"`
}

// The set of arguments for constructing a GpsFeatureTemplate resource.
type GpsFeatureTemplateArgs struct {
	// The description of the feature template
	Description pulumi.StringInput
	// Destination address
	DestinationAddress pulumi.StringPtrInput
	// Variable name
	DestinationAddressVariable pulumi.StringPtrInput
	// Destination port - Range: `1`-`65535`
	DestinationPort pulumi.IntPtrInput
	// Variable name
	DestinationPortVariable pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Enable/disable GPS - Default value: `false`
	Enable pulumi.BoolPtrInput
	// Variable name
	EnableVariable pulumi.StringPtrInput
	// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
	GpsMode pulumi.StringPtrInput
	// Variable name
	GpsModeVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Enable/disable NMEA data - Default value: `false`
	Nmea pulumi.BoolPtrInput
	// Variable name
	NmeaVariable pulumi.StringPtrInput
	// Source address
	SourceAddress pulumi.StringPtrInput
	// Variable name
	SourceAddressVariable pulumi.StringPtrInput
}

func (GpsFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gpsFeatureTemplateArgs)(nil)).Elem()
}

type GpsFeatureTemplateInput interface {
	pulumi.Input

	ToGpsFeatureTemplateOutput() GpsFeatureTemplateOutput
	ToGpsFeatureTemplateOutputWithContext(ctx context.Context) GpsFeatureTemplateOutput
}

func (*GpsFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**GpsFeatureTemplate)(nil)).Elem()
}

func (i *GpsFeatureTemplate) ToGpsFeatureTemplateOutput() GpsFeatureTemplateOutput {
	return i.ToGpsFeatureTemplateOutputWithContext(context.Background())
}

func (i *GpsFeatureTemplate) ToGpsFeatureTemplateOutputWithContext(ctx context.Context) GpsFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpsFeatureTemplateOutput)
}

// GpsFeatureTemplateArrayInput is an input type that accepts GpsFeatureTemplateArray and GpsFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `GpsFeatureTemplateArrayInput` via:
//
//	GpsFeatureTemplateArray{ GpsFeatureTemplateArgs{...} }
type GpsFeatureTemplateArrayInput interface {
	pulumi.Input

	ToGpsFeatureTemplateArrayOutput() GpsFeatureTemplateArrayOutput
	ToGpsFeatureTemplateArrayOutputWithContext(context.Context) GpsFeatureTemplateArrayOutput
}

type GpsFeatureTemplateArray []GpsFeatureTemplateInput

func (GpsFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GpsFeatureTemplate)(nil)).Elem()
}

func (i GpsFeatureTemplateArray) ToGpsFeatureTemplateArrayOutput() GpsFeatureTemplateArrayOutput {
	return i.ToGpsFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i GpsFeatureTemplateArray) ToGpsFeatureTemplateArrayOutputWithContext(ctx context.Context) GpsFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpsFeatureTemplateArrayOutput)
}

// GpsFeatureTemplateMapInput is an input type that accepts GpsFeatureTemplateMap and GpsFeatureTemplateMapOutput values.
// You can construct a concrete instance of `GpsFeatureTemplateMapInput` via:
//
//	GpsFeatureTemplateMap{ "key": GpsFeatureTemplateArgs{...} }
type GpsFeatureTemplateMapInput interface {
	pulumi.Input

	ToGpsFeatureTemplateMapOutput() GpsFeatureTemplateMapOutput
	ToGpsFeatureTemplateMapOutputWithContext(context.Context) GpsFeatureTemplateMapOutput
}

type GpsFeatureTemplateMap map[string]GpsFeatureTemplateInput

func (GpsFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GpsFeatureTemplate)(nil)).Elem()
}

func (i GpsFeatureTemplateMap) ToGpsFeatureTemplateMapOutput() GpsFeatureTemplateMapOutput {
	return i.ToGpsFeatureTemplateMapOutputWithContext(context.Background())
}

func (i GpsFeatureTemplateMap) ToGpsFeatureTemplateMapOutputWithContext(ctx context.Context) GpsFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GpsFeatureTemplateMapOutput)
}

type GpsFeatureTemplateOutput struct{ *pulumi.OutputState }

func (GpsFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GpsFeatureTemplate)(nil)).Elem()
}

func (o GpsFeatureTemplateOutput) ToGpsFeatureTemplateOutput() GpsFeatureTemplateOutput {
	return o
}

func (o GpsFeatureTemplateOutput) ToGpsFeatureTemplateOutputWithContext(ctx context.Context) GpsFeatureTemplateOutput {
	return o
}

// The description of the feature template
func (o GpsFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Destination address
func (o GpsFeatureTemplateOutput) DestinationAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.DestinationAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o GpsFeatureTemplateOutput) DestinationAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.DestinationAddressVariable }).(pulumi.StringPtrOutput)
}

// Destination port - Range: `1`-`65535`
func (o GpsFeatureTemplateOutput) DestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.IntPtrOutput { return v.DestinationPort }).(pulumi.IntPtrOutput)
}

// Variable name
func (o GpsFeatureTemplateOutput) DestinationPortVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.DestinationPortVariable }).(pulumi.StringPtrOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o GpsFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Enable/disable GPS - Default value: `false`
func (o GpsFeatureTemplateOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o GpsFeatureTemplateOutput) EnableVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.EnableVariable }).(pulumi.StringPtrOutput)
}

// Select GPS mode - Choices: `ms-based`, `standalone` - Default value: `ms-based`
func (o GpsFeatureTemplateOutput) GpsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.GpsMode }).(pulumi.StringPtrOutput)
}

// Variable name
func (o GpsFeatureTemplateOutput) GpsModeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.GpsModeVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o GpsFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable/disable NMEA data - Default value: `false`
func (o GpsFeatureTemplateOutput) Nmea() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.BoolPtrOutput { return v.Nmea }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o GpsFeatureTemplateOutput) NmeaVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.NmeaVariable }).(pulumi.StringPtrOutput)
}

// Source address
func (o GpsFeatureTemplateOutput) SourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.SourceAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o GpsFeatureTemplateOutput) SourceAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringPtrOutput { return v.SourceAddressVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o GpsFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o GpsFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *GpsFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type GpsFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (GpsFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GpsFeatureTemplate)(nil)).Elem()
}

func (o GpsFeatureTemplateArrayOutput) ToGpsFeatureTemplateArrayOutput() GpsFeatureTemplateArrayOutput {
	return o
}

func (o GpsFeatureTemplateArrayOutput) ToGpsFeatureTemplateArrayOutputWithContext(ctx context.Context) GpsFeatureTemplateArrayOutput {
	return o
}

func (o GpsFeatureTemplateArrayOutput) Index(i pulumi.IntInput) GpsFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GpsFeatureTemplate {
		return vs[0].([]*GpsFeatureTemplate)[vs[1].(int)]
	}).(GpsFeatureTemplateOutput)
}

type GpsFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (GpsFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GpsFeatureTemplate)(nil)).Elem()
}

func (o GpsFeatureTemplateMapOutput) ToGpsFeatureTemplateMapOutput() GpsFeatureTemplateMapOutput {
	return o
}

func (o GpsFeatureTemplateMapOutput) ToGpsFeatureTemplateMapOutputWithContext(ctx context.Context) GpsFeatureTemplateMapOutput {
	return o
}

func (o GpsFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) GpsFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GpsFeatureTemplate {
		return vs[0].(map[string]*GpsFeatureTemplate)[vs[1].(string)]
	}).(GpsFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GpsFeatureTemplateInput)(nil)).Elem(), &GpsFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*GpsFeatureTemplateArrayInput)(nil)).Elem(), GpsFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GpsFeatureTemplateMapInput)(nil)).Elem(), GpsFeatureTemplateMap{})
	pulumi.RegisterOutputType(GpsFeatureTemplateOutput{})
	pulumi.RegisterOutputType(GpsFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(GpsFeatureTemplateMapOutput{})
}
