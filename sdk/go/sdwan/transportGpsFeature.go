// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Transport GPS Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewTransportGpsFeature(ctx, "example", &sdwan.TransportGpsFeatureArgs{
//				Name:                   pulumi.String("Example"),
//				Description:            pulumi.String("My Example"),
//				FeatureProfileId:       pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				GpsEnable:              pulumi.Bool(false),
//				GpsMode:                pulumi.String("ms-based"),
//				NmeaEnable:             pulumi.Bool(false),
//				NmeaSourceAddress:      pulumi.String("1.2.3.4"),
//				NmeaDestinationAddress: pulumi.String("2.3.4.5"),
//				NmeaDestinationPort:    pulumi.Int(22),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "transport_gps_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/transportGpsFeature:TransportGpsFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type TransportGpsFeature struct {
	pulumi.CustomResourceState

	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// Enable/disable GPS
	//   - Default value: `false`
	GpsEnable pulumi.BoolPtrOutput `pulumi:"gpsEnable"`
	// Variable name
	GpsEnableVariable pulumi.StringPtrOutput `pulumi:"gpsEnableVariable"`
	// Select GPS mode
	//   - Choices: `ms-based`, `standalone`
	//   - Default value: `ms-based`
	GpsMode pulumi.StringPtrOutput `pulumi:"gpsMode"`
	// Variable name
	GpsModeVariable pulumi.StringPtrOutput `pulumi:"gpsModeVariable"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Destination address
	NmeaDestinationAddress pulumi.StringPtrOutput `pulumi:"nmeaDestinationAddress"`
	// Variable name
	NmeaDestinationAddressVariable pulumi.StringPtrOutput `pulumi:"nmeaDestinationAddressVariable"`
	// Destination port
	//   - Range: `1`-`65535`
	NmeaDestinationPort pulumi.IntPtrOutput `pulumi:"nmeaDestinationPort"`
	// Variable name
	NmeaDestinationPortVariable pulumi.StringPtrOutput `pulumi:"nmeaDestinationPortVariable"`
	// Enable/disable NMEA data
	//   - Default value: `false`
	NmeaEnable pulumi.BoolPtrOutput `pulumi:"nmeaEnable"`
	// Variable name
	NmeaEnableVariable pulumi.StringPtrOutput `pulumi:"nmeaEnableVariable"`
	// Source address
	NmeaSourceAddress pulumi.StringPtrOutput `pulumi:"nmeaSourceAddress"`
	// Variable name
	NmeaSourceAddressVariable pulumi.StringPtrOutput `pulumi:"nmeaSourceAddressVariable"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTransportGpsFeature registers a new resource with the given unique name, arguments, and options.
func NewTransportGpsFeature(ctx *pulumi.Context,
	name string, args *TransportGpsFeatureArgs, opts ...pulumi.ResourceOption) (*TransportGpsFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransportGpsFeature
	err := ctx.RegisterResource("sdwan:index/transportGpsFeature:TransportGpsFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransportGpsFeature gets an existing TransportGpsFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransportGpsFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransportGpsFeatureState, opts ...pulumi.ResourceOption) (*TransportGpsFeature, error) {
	var resource TransportGpsFeature
	err := ctx.ReadResource("sdwan:index/transportGpsFeature:TransportGpsFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransportGpsFeature resources.
type transportGpsFeatureState struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Enable/disable GPS
	//   - Default value: `false`
	GpsEnable *bool `pulumi:"gpsEnable"`
	// Variable name
	GpsEnableVariable *string `pulumi:"gpsEnableVariable"`
	// Select GPS mode
	//   - Choices: `ms-based`, `standalone`
	//   - Default value: `ms-based`
	GpsMode *string `pulumi:"gpsMode"`
	// Variable name
	GpsModeVariable *string `pulumi:"gpsModeVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Destination address
	NmeaDestinationAddress *string `pulumi:"nmeaDestinationAddress"`
	// Variable name
	NmeaDestinationAddressVariable *string `pulumi:"nmeaDestinationAddressVariable"`
	// Destination port
	//   - Range: `1`-`65535`
	NmeaDestinationPort *int `pulumi:"nmeaDestinationPort"`
	// Variable name
	NmeaDestinationPortVariable *string `pulumi:"nmeaDestinationPortVariable"`
	// Enable/disable NMEA data
	//   - Default value: `false`
	NmeaEnable *bool `pulumi:"nmeaEnable"`
	// Variable name
	NmeaEnableVariable *string `pulumi:"nmeaEnableVariable"`
	// Source address
	NmeaSourceAddress *string `pulumi:"nmeaSourceAddress"`
	// Variable name
	NmeaSourceAddressVariable *string `pulumi:"nmeaSourceAddressVariable"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type TransportGpsFeatureState struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Enable/disable GPS
	//   - Default value: `false`
	GpsEnable pulumi.BoolPtrInput
	// Variable name
	GpsEnableVariable pulumi.StringPtrInput
	// Select GPS mode
	//   - Choices: `ms-based`, `standalone`
	//   - Default value: `ms-based`
	GpsMode pulumi.StringPtrInput
	// Variable name
	GpsModeVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Destination address
	NmeaDestinationAddress pulumi.StringPtrInput
	// Variable name
	NmeaDestinationAddressVariable pulumi.StringPtrInput
	// Destination port
	//   - Range: `1`-`65535`
	NmeaDestinationPort pulumi.IntPtrInput
	// Variable name
	NmeaDestinationPortVariable pulumi.StringPtrInput
	// Enable/disable NMEA data
	//   - Default value: `false`
	NmeaEnable pulumi.BoolPtrInput
	// Variable name
	NmeaEnableVariable pulumi.StringPtrInput
	// Source address
	NmeaSourceAddress pulumi.StringPtrInput
	// Variable name
	NmeaSourceAddressVariable pulumi.StringPtrInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (TransportGpsFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*transportGpsFeatureState)(nil)).Elem()
}

type transportGpsFeatureArgs struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// Enable/disable GPS
	//   - Default value: `false`
	GpsEnable *bool `pulumi:"gpsEnable"`
	// Variable name
	GpsEnableVariable *string `pulumi:"gpsEnableVariable"`
	// Select GPS mode
	//   - Choices: `ms-based`, `standalone`
	//   - Default value: `ms-based`
	GpsMode *string `pulumi:"gpsMode"`
	// Variable name
	GpsModeVariable *string `pulumi:"gpsModeVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Destination address
	NmeaDestinationAddress *string `pulumi:"nmeaDestinationAddress"`
	// Variable name
	NmeaDestinationAddressVariable *string `pulumi:"nmeaDestinationAddressVariable"`
	// Destination port
	//   - Range: `1`-`65535`
	NmeaDestinationPort *int `pulumi:"nmeaDestinationPort"`
	// Variable name
	NmeaDestinationPortVariable *string `pulumi:"nmeaDestinationPortVariable"`
	// Enable/disable NMEA data
	//   - Default value: `false`
	NmeaEnable *bool `pulumi:"nmeaEnable"`
	// Variable name
	NmeaEnableVariable *string `pulumi:"nmeaEnableVariable"`
	// Source address
	NmeaSourceAddress *string `pulumi:"nmeaSourceAddress"`
	// Variable name
	NmeaSourceAddressVariable *string `pulumi:"nmeaSourceAddressVariable"`
}

// The set of arguments for constructing a TransportGpsFeature resource.
type TransportGpsFeatureArgs struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// Enable/disable GPS
	//   - Default value: `false`
	GpsEnable pulumi.BoolPtrInput
	// Variable name
	GpsEnableVariable pulumi.StringPtrInput
	// Select GPS mode
	//   - Choices: `ms-based`, `standalone`
	//   - Default value: `ms-based`
	GpsMode pulumi.StringPtrInput
	// Variable name
	GpsModeVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Destination address
	NmeaDestinationAddress pulumi.StringPtrInput
	// Variable name
	NmeaDestinationAddressVariable pulumi.StringPtrInput
	// Destination port
	//   - Range: `1`-`65535`
	NmeaDestinationPort pulumi.IntPtrInput
	// Variable name
	NmeaDestinationPortVariable pulumi.StringPtrInput
	// Enable/disable NMEA data
	//   - Default value: `false`
	NmeaEnable pulumi.BoolPtrInput
	// Variable name
	NmeaEnableVariable pulumi.StringPtrInput
	// Source address
	NmeaSourceAddress pulumi.StringPtrInput
	// Variable name
	NmeaSourceAddressVariable pulumi.StringPtrInput
}

func (TransportGpsFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transportGpsFeatureArgs)(nil)).Elem()
}

type TransportGpsFeatureInput interface {
	pulumi.Input

	ToTransportGpsFeatureOutput() TransportGpsFeatureOutput
	ToTransportGpsFeatureOutputWithContext(ctx context.Context) TransportGpsFeatureOutput
}

func (*TransportGpsFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportGpsFeature)(nil)).Elem()
}

func (i *TransportGpsFeature) ToTransportGpsFeatureOutput() TransportGpsFeatureOutput {
	return i.ToTransportGpsFeatureOutputWithContext(context.Background())
}

func (i *TransportGpsFeature) ToTransportGpsFeatureOutputWithContext(ctx context.Context) TransportGpsFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportGpsFeatureOutput)
}

// TransportGpsFeatureArrayInput is an input type that accepts TransportGpsFeatureArray and TransportGpsFeatureArrayOutput values.
// You can construct a concrete instance of `TransportGpsFeatureArrayInput` via:
//
//	TransportGpsFeatureArray{ TransportGpsFeatureArgs{...} }
type TransportGpsFeatureArrayInput interface {
	pulumi.Input

	ToTransportGpsFeatureArrayOutput() TransportGpsFeatureArrayOutput
	ToTransportGpsFeatureArrayOutputWithContext(context.Context) TransportGpsFeatureArrayOutput
}

type TransportGpsFeatureArray []TransportGpsFeatureInput

func (TransportGpsFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransportGpsFeature)(nil)).Elem()
}

func (i TransportGpsFeatureArray) ToTransportGpsFeatureArrayOutput() TransportGpsFeatureArrayOutput {
	return i.ToTransportGpsFeatureArrayOutputWithContext(context.Background())
}

func (i TransportGpsFeatureArray) ToTransportGpsFeatureArrayOutputWithContext(ctx context.Context) TransportGpsFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportGpsFeatureArrayOutput)
}

// TransportGpsFeatureMapInput is an input type that accepts TransportGpsFeatureMap and TransportGpsFeatureMapOutput values.
// You can construct a concrete instance of `TransportGpsFeatureMapInput` via:
//
//	TransportGpsFeatureMap{ "key": TransportGpsFeatureArgs{...} }
type TransportGpsFeatureMapInput interface {
	pulumi.Input

	ToTransportGpsFeatureMapOutput() TransportGpsFeatureMapOutput
	ToTransportGpsFeatureMapOutputWithContext(context.Context) TransportGpsFeatureMapOutput
}

type TransportGpsFeatureMap map[string]TransportGpsFeatureInput

func (TransportGpsFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransportGpsFeature)(nil)).Elem()
}

func (i TransportGpsFeatureMap) ToTransportGpsFeatureMapOutput() TransportGpsFeatureMapOutput {
	return i.ToTransportGpsFeatureMapOutputWithContext(context.Background())
}

func (i TransportGpsFeatureMap) ToTransportGpsFeatureMapOutputWithContext(ctx context.Context) TransportGpsFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportGpsFeatureMapOutput)
}

type TransportGpsFeatureOutput struct{ *pulumi.OutputState }

func (TransportGpsFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportGpsFeature)(nil)).Elem()
}

func (o TransportGpsFeatureOutput) ToTransportGpsFeatureOutput() TransportGpsFeatureOutput {
	return o
}

func (o TransportGpsFeatureOutput) ToTransportGpsFeatureOutputWithContext(ctx context.Context) TransportGpsFeatureOutput {
	return o
}

// The description of the Feature
func (o TransportGpsFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o TransportGpsFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// Enable/disable GPS
//   - Default value: `false`
func (o TransportGpsFeatureOutput) GpsEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.BoolPtrOutput { return v.GpsEnable }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o TransportGpsFeatureOutput) GpsEnableVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.GpsEnableVariable }).(pulumi.StringPtrOutput)
}

// Select GPS mode
//   - Choices: `ms-based`, `standalone`
//   - Default value: `ms-based`
func (o TransportGpsFeatureOutput) GpsMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.GpsMode }).(pulumi.StringPtrOutput)
}

// Variable name
func (o TransportGpsFeatureOutput) GpsModeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.GpsModeVariable }).(pulumi.StringPtrOutput)
}

// The name of the Feature
func (o TransportGpsFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Destination address
func (o TransportGpsFeatureOutput) NmeaDestinationAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.NmeaDestinationAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o TransportGpsFeatureOutput) NmeaDestinationAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.NmeaDestinationAddressVariable }).(pulumi.StringPtrOutput)
}

// Destination port
//   - Range: `1`-`65535`
func (o TransportGpsFeatureOutput) NmeaDestinationPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.IntPtrOutput { return v.NmeaDestinationPort }).(pulumi.IntPtrOutput)
}

// Variable name
func (o TransportGpsFeatureOutput) NmeaDestinationPortVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.NmeaDestinationPortVariable }).(pulumi.StringPtrOutput)
}

// Enable/disable NMEA data
//   - Default value: `false`
func (o TransportGpsFeatureOutput) NmeaEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.BoolPtrOutput { return v.NmeaEnable }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o TransportGpsFeatureOutput) NmeaEnableVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.NmeaEnableVariable }).(pulumi.StringPtrOutput)
}

// Source address
func (o TransportGpsFeatureOutput) NmeaSourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.NmeaSourceAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o TransportGpsFeatureOutput) NmeaSourceAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.StringPtrOutput { return v.NmeaSourceAddressVariable }).(pulumi.StringPtrOutput)
}

// The version of the Feature
func (o TransportGpsFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TransportGpsFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TransportGpsFeatureArrayOutput struct{ *pulumi.OutputState }

func (TransportGpsFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransportGpsFeature)(nil)).Elem()
}

func (o TransportGpsFeatureArrayOutput) ToTransportGpsFeatureArrayOutput() TransportGpsFeatureArrayOutput {
	return o
}

func (o TransportGpsFeatureArrayOutput) ToTransportGpsFeatureArrayOutputWithContext(ctx context.Context) TransportGpsFeatureArrayOutput {
	return o
}

func (o TransportGpsFeatureArrayOutput) Index(i pulumi.IntInput) TransportGpsFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransportGpsFeature {
		return vs[0].([]*TransportGpsFeature)[vs[1].(int)]
	}).(TransportGpsFeatureOutput)
}

type TransportGpsFeatureMapOutput struct{ *pulumi.OutputState }

func (TransportGpsFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransportGpsFeature)(nil)).Elem()
}

func (o TransportGpsFeatureMapOutput) ToTransportGpsFeatureMapOutput() TransportGpsFeatureMapOutput {
	return o
}

func (o TransportGpsFeatureMapOutput) ToTransportGpsFeatureMapOutputWithContext(ctx context.Context) TransportGpsFeatureMapOutput {
	return o
}

func (o TransportGpsFeatureMapOutput) MapIndex(k pulumi.StringInput) TransportGpsFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransportGpsFeature {
		return vs[0].(map[string]*TransportGpsFeature)[vs[1].(string)]
	}).(TransportGpsFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransportGpsFeatureInput)(nil)).Elem(), &TransportGpsFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportGpsFeatureArrayInput)(nil)).Elem(), TransportGpsFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportGpsFeatureMapInput)(nil)).Elem(), TransportGpsFeatureMap{})
	pulumi.RegisterOutputType(TransportGpsFeatureOutput{})
	pulumi.RegisterOutputType(TransportGpsFeatureArrayOutput{})
	pulumi.RegisterOutputType(TransportGpsFeatureMapOutput{})
}
