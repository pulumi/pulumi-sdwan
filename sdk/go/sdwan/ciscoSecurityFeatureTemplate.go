// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco Security feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCiscoSecurityFeatureTemplate(ctx, "example", &sdwan.CiscoSecurityFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				RekeyInterval:    pulumi.Int(86400),
//				ReplayWindow:     pulumi.String("64"),
//				ExtendedArWindow: pulumi.Int(256),
//				AuthenticationTypes: pulumi.StringArray{
//					pulumi.String("none"),
//				},
//				IntegrityTypes: pulumi.StringArray{
//					pulumi.String("none"),
//				},
//				PairwiseKeying: pulumi.Bool(true),
//				Keychains: sdwan.CiscoSecurityFeatureTemplateKeychainArray{
//					&sdwan.CiscoSecurityFeatureTemplateKeychainArgs{
//						Name:   pulumi.String("CHAIN1"),
//						Key_id: 1,
//					},
//				},
//				Keys: sdwan.CiscoSecurityFeatureTemplateKeyArray{
//					&sdwan.CiscoSecurityFeatureTemplateKeyArgs{
//						Id:                              pulumi.String("1"),
//						Chain_name:                      "CHAIN1",
//						Send_id:                         0,
//						Receive_id:                      0,
//						Crypto_algorithm:                "hmac-sha-256",
//						Key_string:                      "abc123",
//						Send_lifetime_local:             true,
//						Send_lifetime_start_time:        "2022-12-31T23:59",
//						Send_lifetime_end_time_format:   "infinite",
//						Send_lifetime_duration:          1000,
//						Send_lifetime_end_time:          "2032-12-31T23:59",
//						Send_lifetime_infinite:          true,
//						Accept_lifetime_local:           true,
//						Accept_lifetime_start_time:      "2022-12-31T23:59",
//						Accept_lifetime_end_time_format: "infinite",
//						Accept_lifetime_duration:        1000,
//						Accept_lifetime_end_time:        "2032-12-31T23:59",
//						Accept_lifetime_infinite:        true,
//						Include_tcp_options:             false,
//						Accept_ao_mismatch:              true,
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoSecurityFeatureTemplate struct {
	pulumi.CustomResourceState

	// Variable name
	AuthenticationTypeVariable pulumi.StringPtrOutput `pulumi:"authenticationTypeVariable"`
	// Set the authentication type for DTLS connections
	AuthenticationTypes pulumi.StringArrayOutput `pulumi:"authenticationTypes"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Extended Anti-Replay Window
	//   - Range: `10`-`2048`
	//   - Default value: `256`
	ExtendedArWindow pulumi.IntPtrOutput `pulumi:"extendedArWindow"`
	// Variable name
	ExtendedArWindowVariable pulumi.StringPtrOutput `pulumi:"extendedArWindowVariable"`
	// Variable name
	IntegrityTypeVariable pulumi.StringPtrOutput `pulumi:"integrityTypeVariable"`
	// Set the authentication type for DTLS connections
	IntegrityTypes pulumi.StringArrayOutput `pulumi:"integrityTypes"`
	// Configure a Keychain
	Keychains CiscoSecurityFeatureTemplateKeychainArrayOutput `pulumi:"keychains"`
	// Configure a Key
	Keys CiscoSecurityFeatureTemplateKeyArrayOutput `pulumi:"keys"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable or disable IPsec pairwise-keying
	//   - Default value: `false`
	PairwiseKeying pulumi.BoolPtrOutput `pulumi:"pairwiseKeying"`
	// Variable name
	PairwiseKeyingVariable pulumi.StringPtrOutput `pulumi:"pairwiseKeyingVariable"`
	// Set how often to change the AES key for DTLS connections
	//   - Range: `10`-`1209600`
	//   - Default value: `86400`
	RekeyInterval pulumi.IntPtrOutput `pulumi:"rekeyInterval"`
	// Variable name
	RekeyIntervalVariable pulumi.StringPtrOutput `pulumi:"rekeyIntervalVariable"`
	// Set the sliding replay window size
	//   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
	//   - Default value: `512`
	ReplayWindow pulumi.StringPtrOutput `pulumi:"replayWindow"`
	// Variable name
	ReplayWindowVariable pulumi.StringPtrOutput `pulumi:"replayWindowVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoSecurityFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoSecurityFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoSecurityFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoSecurityFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoSecurityFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoSecurityFeatureTemplate gets an existing CiscoSecurityFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoSecurityFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoSecurityFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoSecurityFeatureTemplate, error) {
	var resource CiscoSecurityFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoSecurityFeatureTemplate:CiscoSecurityFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoSecurityFeatureTemplate resources.
type ciscoSecurityFeatureTemplateState struct {
	// Variable name
	AuthenticationTypeVariable *string `pulumi:"authenticationTypeVariable"`
	// Set the authentication type for DTLS connections
	AuthenticationTypes []string `pulumi:"authenticationTypes"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Extended Anti-Replay Window
	//   - Range: `10`-`2048`
	//   - Default value: `256`
	ExtendedArWindow *int `pulumi:"extendedArWindow"`
	// Variable name
	ExtendedArWindowVariable *string `pulumi:"extendedArWindowVariable"`
	// Variable name
	IntegrityTypeVariable *string `pulumi:"integrityTypeVariable"`
	// Set the authentication type for DTLS connections
	IntegrityTypes []string `pulumi:"integrityTypes"`
	// Configure a Keychain
	Keychains []CiscoSecurityFeatureTemplateKeychain `pulumi:"keychains"`
	// Configure a Key
	Keys []CiscoSecurityFeatureTemplateKey `pulumi:"keys"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Enable or disable IPsec pairwise-keying
	//   - Default value: `false`
	PairwiseKeying *bool `pulumi:"pairwiseKeying"`
	// Variable name
	PairwiseKeyingVariable *string `pulumi:"pairwiseKeyingVariable"`
	// Set how often to change the AES key for DTLS connections
	//   - Range: `10`-`1209600`
	//   - Default value: `86400`
	RekeyInterval *int `pulumi:"rekeyInterval"`
	// Variable name
	RekeyIntervalVariable *string `pulumi:"rekeyIntervalVariable"`
	// Set the sliding replay window size
	//   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
	//   - Default value: `512`
	ReplayWindow *string `pulumi:"replayWindow"`
	// Variable name
	ReplayWindowVariable *string `pulumi:"replayWindowVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoSecurityFeatureTemplateState struct {
	// Variable name
	AuthenticationTypeVariable pulumi.StringPtrInput
	// Set the authentication type for DTLS connections
	AuthenticationTypes pulumi.StringArrayInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Extended Anti-Replay Window
	//   - Range: `10`-`2048`
	//   - Default value: `256`
	ExtendedArWindow pulumi.IntPtrInput
	// Variable name
	ExtendedArWindowVariable pulumi.StringPtrInput
	// Variable name
	IntegrityTypeVariable pulumi.StringPtrInput
	// Set the authentication type for DTLS connections
	IntegrityTypes pulumi.StringArrayInput
	// Configure a Keychain
	Keychains CiscoSecurityFeatureTemplateKeychainArrayInput
	// Configure a Key
	Keys CiscoSecurityFeatureTemplateKeyArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Enable or disable IPsec pairwise-keying
	//   - Default value: `false`
	PairwiseKeying pulumi.BoolPtrInput
	// Variable name
	PairwiseKeyingVariable pulumi.StringPtrInput
	// Set how often to change the AES key for DTLS connections
	//   - Range: `10`-`1209600`
	//   - Default value: `86400`
	RekeyInterval pulumi.IntPtrInput
	// Variable name
	RekeyIntervalVariable pulumi.StringPtrInput
	// Set the sliding replay window size
	//   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
	//   - Default value: `512`
	ReplayWindow pulumi.StringPtrInput
	// Variable name
	ReplayWindowVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoSecurityFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoSecurityFeatureTemplateState)(nil)).Elem()
}

type ciscoSecurityFeatureTemplateArgs struct {
	// Variable name
	AuthenticationTypeVariable *string `pulumi:"authenticationTypeVariable"`
	// Set the authentication type for DTLS connections
	AuthenticationTypes []string `pulumi:"authenticationTypes"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Extended Anti-Replay Window
	//   - Range: `10`-`2048`
	//   - Default value: `256`
	ExtendedArWindow *int `pulumi:"extendedArWindow"`
	// Variable name
	ExtendedArWindowVariable *string `pulumi:"extendedArWindowVariable"`
	// Variable name
	IntegrityTypeVariable *string `pulumi:"integrityTypeVariable"`
	// Set the authentication type for DTLS connections
	IntegrityTypes []string `pulumi:"integrityTypes"`
	// Configure a Keychain
	Keychains []CiscoSecurityFeatureTemplateKeychain `pulumi:"keychains"`
	// Configure a Key
	Keys []CiscoSecurityFeatureTemplateKey `pulumi:"keys"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Enable or disable IPsec pairwise-keying
	//   - Default value: `false`
	PairwiseKeying *bool `pulumi:"pairwiseKeying"`
	// Variable name
	PairwiseKeyingVariable *string `pulumi:"pairwiseKeyingVariable"`
	// Set how often to change the AES key for DTLS connections
	//   - Range: `10`-`1209600`
	//   - Default value: `86400`
	RekeyInterval *int `pulumi:"rekeyInterval"`
	// Variable name
	RekeyIntervalVariable *string `pulumi:"rekeyIntervalVariable"`
	// Set the sliding replay window size
	//   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
	//   - Default value: `512`
	ReplayWindow *string `pulumi:"replayWindow"`
	// Variable name
	ReplayWindowVariable *string `pulumi:"replayWindowVariable"`
}

// The set of arguments for constructing a CiscoSecurityFeatureTemplate resource.
type CiscoSecurityFeatureTemplateArgs struct {
	// Variable name
	AuthenticationTypeVariable pulumi.StringPtrInput
	// Set the authentication type for DTLS connections
	AuthenticationTypes pulumi.StringArrayInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Extended Anti-Replay Window
	//   - Range: `10`-`2048`
	//   - Default value: `256`
	ExtendedArWindow pulumi.IntPtrInput
	// Variable name
	ExtendedArWindowVariable pulumi.StringPtrInput
	// Variable name
	IntegrityTypeVariable pulumi.StringPtrInput
	// Set the authentication type for DTLS connections
	IntegrityTypes pulumi.StringArrayInput
	// Configure a Keychain
	Keychains CiscoSecurityFeatureTemplateKeychainArrayInput
	// Configure a Key
	Keys CiscoSecurityFeatureTemplateKeyArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Enable or disable IPsec pairwise-keying
	//   - Default value: `false`
	PairwiseKeying pulumi.BoolPtrInput
	// Variable name
	PairwiseKeyingVariable pulumi.StringPtrInput
	// Set how often to change the AES key for DTLS connections
	//   - Range: `10`-`1209600`
	//   - Default value: `86400`
	RekeyInterval pulumi.IntPtrInput
	// Variable name
	RekeyIntervalVariable pulumi.StringPtrInput
	// Set the sliding replay window size
	//   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
	//   - Default value: `512`
	ReplayWindow pulumi.StringPtrInput
	// Variable name
	ReplayWindowVariable pulumi.StringPtrInput
}

func (CiscoSecurityFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoSecurityFeatureTemplateArgs)(nil)).Elem()
}

type CiscoSecurityFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoSecurityFeatureTemplateOutput() CiscoSecurityFeatureTemplateOutput
	ToCiscoSecurityFeatureTemplateOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateOutput
}

func (*CiscoSecurityFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoSecurityFeatureTemplate)(nil)).Elem()
}

func (i *CiscoSecurityFeatureTemplate) ToCiscoSecurityFeatureTemplateOutput() CiscoSecurityFeatureTemplateOutput {
	return i.ToCiscoSecurityFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoSecurityFeatureTemplate) ToCiscoSecurityFeatureTemplateOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoSecurityFeatureTemplateOutput)
}

// CiscoSecurityFeatureTemplateArrayInput is an input type that accepts CiscoSecurityFeatureTemplateArray and CiscoSecurityFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoSecurityFeatureTemplateArrayInput` via:
//
//	CiscoSecurityFeatureTemplateArray{ CiscoSecurityFeatureTemplateArgs{...} }
type CiscoSecurityFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoSecurityFeatureTemplateArrayOutput() CiscoSecurityFeatureTemplateArrayOutput
	ToCiscoSecurityFeatureTemplateArrayOutputWithContext(context.Context) CiscoSecurityFeatureTemplateArrayOutput
}

type CiscoSecurityFeatureTemplateArray []CiscoSecurityFeatureTemplateInput

func (CiscoSecurityFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoSecurityFeatureTemplate)(nil)).Elem()
}

func (i CiscoSecurityFeatureTemplateArray) ToCiscoSecurityFeatureTemplateArrayOutput() CiscoSecurityFeatureTemplateArrayOutput {
	return i.ToCiscoSecurityFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoSecurityFeatureTemplateArray) ToCiscoSecurityFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoSecurityFeatureTemplateArrayOutput)
}

// CiscoSecurityFeatureTemplateMapInput is an input type that accepts CiscoSecurityFeatureTemplateMap and CiscoSecurityFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoSecurityFeatureTemplateMapInput` via:
//
//	CiscoSecurityFeatureTemplateMap{ "key": CiscoSecurityFeatureTemplateArgs{...} }
type CiscoSecurityFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoSecurityFeatureTemplateMapOutput() CiscoSecurityFeatureTemplateMapOutput
	ToCiscoSecurityFeatureTemplateMapOutputWithContext(context.Context) CiscoSecurityFeatureTemplateMapOutput
}

type CiscoSecurityFeatureTemplateMap map[string]CiscoSecurityFeatureTemplateInput

func (CiscoSecurityFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoSecurityFeatureTemplate)(nil)).Elem()
}

func (i CiscoSecurityFeatureTemplateMap) ToCiscoSecurityFeatureTemplateMapOutput() CiscoSecurityFeatureTemplateMapOutput {
	return i.ToCiscoSecurityFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoSecurityFeatureTemplateMap) ToCiscoSecurityFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoSecurityFeatureTemplateMapOutput)
}

type CiscoSecurityFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoSecurityFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoSecurityFeatureTemplate)(nil)).Elem()
}

func (o CiscoSecurityFeatureTemplateOutput) ToCiscoSecurityFeatureTemplateOutput() CiscoSecurityFeatureTemplateOutput {
	return o
}

func (o CiscoSecurityFeatureTemplateOutput) ToCiscoSecurityFeatureTemplateOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateOutput {
	return o
}

// Variable name
func (o CiscoSecurityFeatureTemplateOutput) AuthenticationTypeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.AuthenticationTypeVariable }).(pulumi.StringPtrOutput)
}

// Set the authentication type for DTLS connections
func (o CiscoSecurityFeatureTemplateOutput) AuthenticationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringArrayOutput { return v.AuthenticationTypes }).(pulumi.StringArrayOutput)
}

// The description of the feature template
func (o CiscoSecurityFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoSecurityFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Extended Anti-Replay Window
//   - Range: `10`-`2048`
//   - Default value: `256`
func (o CiscoSecurityFeatureTemplateOutput) ExtendedArWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.IntPtrOutput { return v.ExtendedArWindow }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoSecurityFeatureTemplateOutput) ExtendedArWindowVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.ExtendedArWindowVariable }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoSecurityFeatureTemplateOutput) IntegrityTypeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.IntegrityTypeVariable }).(pulumi.StringPtrOutput)
}

// Set the authentication type for DTLS connections
func (o CiscoSecurityFeatureTemplateOutput) IntegrityTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringArrayOutput { return v.IntegrityTypes }).(pulumi.StringArrayOutput)
}

// Configure a Keychain
func (o CiscoSecurityFeatureTemplateOutput) Keychains() CiscoSecurityFeatureTemplateKeychainArrayOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) CiscoSecurityFeatureTemplateKeychainArrayOutput {
		return v.Keychains
	}).(CiscoSecurityFeatureTemplateKeychainArrayOutput)
}

// Configure a Key
func (o CiscoSecurityFeatureTemplateOutput) Keys() CiscoSecurityFeatureTemplateKeyArrayOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) CiscoSecurityFeatureTemplateKeyArrayOutput { return v.Keys }).(CiscoSecurityFeatureTemplateKeyArrayOutput)
}

// The name of the feature template
func (o CiscoSecurityFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable or disable IPsec pairwise-keying
//   - Default value: `false`
func (o CiscoSecurityFeatureTemplateOutput) PairwiseKeying() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.BoolPtrOutput { return v.PairwiseKeying }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoSecurityFeatureTemplateOutput) PairwiseKeyingVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.PairwiseKeyingVariable }).(pulumi.StringPtrOutput)
}

// Set how often to change the AES key for DTLS connections
//   - Range: `10`-`1209600`
//   - Default value: `86400`
func (o CiscoSecurityFeatureTemplateOutput) RekeyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.IntPtrOutput { return v.RekeyInterval }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoSecurityFeatureTemplateOutput) RekeyIntervalVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.RekeyIntervalVariable }).(pulumi.StringPtrOutput)
}

// Set the sliding replay window size
//   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
//   - Default value: `512`
func (o CiscoSecurityFeatureTemplateOutput) ReplayWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.ReplayWindow }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoSecurityFeatureTemplateOutput) ReplayWindowVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringPtrOutput { return v.ReplayWindowVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CiscoSecurityFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CiscoSecurityFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoSecurityFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoSecurityFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoSecurityFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoSecurityFeatureTemplate)(nil)).Elem()
}

func (o CiscoSecurityFeatureTemplateArrayOutput) ToCiscoSecurityFeatureTemplateArrayOutput() CiscoSecurityFeatureTemplateArrayOutput {
	return o
}

func (o CiscoSecurityFeatureTemplateArrayOutput) ToCiscoSecurityFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateArrayOutput {
	return o
}

func (o CiscoSecurityFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoSecurityFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoSecurityFeatureTemplate {
		return vs[0].([]*CiscoSecurityFeatureTemplate)[vs[1].(int)]
	}).(CiscoSecurityFeatureTemplateOutput)
}

type CiscoSecurityFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoSecurityFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoSecurityFeatureTemplate)(nil)).Elem()
}

func (o CiscoSecurityFeatureTemplateMapOutput) ToCiscoSecurityFeatureTemplateMapOutput() CiscoSecurityFeatureTemplateMapOutput {
	return o
}

func (o CiscoSecurityFeatureTemplateMapOutput) ToCiscoSecurityFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoSecurityFeatureTemplateMapOutput {
	return o
}

func (o CiscoSecurityFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoSecurityFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoSecurityFeatureTemplate {
		return vs[0].(map[string]*CiscoSecurityFeatureTemplate)[vs[1].(string)]
	}).(CiscoSecurityFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoSecurityFeatureTemplateInput)(nil)).Elem(), &CiscoSecurityFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoSecurityFeatureTemplateArrayInput)(nil)).Elem(), CiscoSecurityFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoSecurityFeatureTemplateMapInput)(nil)).Elem(), CiscoSecurityFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoSecurityFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoSecurityFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoSecurityFeatureTemplateMapOutput{})
}
