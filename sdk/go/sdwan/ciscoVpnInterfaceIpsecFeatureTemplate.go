// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco VPN Interface IPSec feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCiscoVpnInterfaceIpsecFeatureTemplate(ctx, "example", &sdwan.CiscoVpnInterfaceIpsecFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				InterfaceName:              pulumi.String("ipsec1"),
//				Shutdown:                   pulumi.Bool(false),
//				InterfaceDescription:       pulumi.String("My Description"),
//				IpAddress:                  pulumi.String("1.1.1.1/24"),
//				TunnelSource:               pulumi.String("1.2.3.4"),
//				TunnelSourceInterface:      pulumi.String("e1"),
//				TunnelDestination:          pulumi.String("3.4.5.6"),
//				Application:                pulumi.String("sig"),
//				TcpMssAdjust:               pulumi.Int(1400),
//				ClearDontFragment:          pulumi.Bool(true),
//				Mtu:                        pulumi.Int(1500),
//				DeadPeerDetectionInterval:  pulumi.Int(100),
//				DeadPeerDetectionRetries:   pulumi.Int(4),
//				IkeVersion:                 pulumi.Int(2),
//				IkeMode:                    pulumi.String("main"),
//				IkeRekeyInterval:           pulumi.Int(20000),
//				IkeCiphersuite:             pulumi.String("aes256-cbc-sha1"),
//				IkeGroup:                   pulumi.String("20"),
//				IkePreSharedKey:            pulumi.String("cisco123"),
//				IkePreSharedKeyLocalId:     pulumi.String("1"),
//				IkePreSharedKeyRemoteId:    pulumi.String("2"),
//				IpsecRekeyInterval:         pulumi.Int(7200),
//				IpsecReplayWindow:          pulumi.Int(128),
//				IpsecCiphersuite:           pulumi.String("aes256-cbc-sha256"),
//				IpsecPerfectForwardSecrecy: pulumi.String("group-20"),
//				Trackers: pulumi.StringArray{
//					pulumi.String("TRACKER1"),
//				},
//				TunnelRouteVia: pulumi.String("g0/0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoVpnInterfaceIpsecFeatureTemplate struct {
	pulumi.CustomResourceState

	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application pulumi.StringPtrOutput `pulumi:"application"`
	// Variable name
	ApplicationVariable pulumi.StringPtrOutput `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment pulumi.BoolPtrOutput `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable pulumi.StringPtrOutput `pulumi:"clearDontFragmentVariable"`
	// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
	DeadPeerDetectionInterval pulumi.IntPtrOutput `pulumi:"deadPeerDetectionInterval"`
	// Variable name
	DeadPeerDetectionIntervalVariable pulumi.StringPtrOutput `pulumi:"deadPeerDetectionIntervalVariable"`
	// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
	DeadPeerDetectionRetries pulumi.IntPtrOutput `pulumi:"deadPeerDetectionRetries"`
	// Variable name
	DeadPeerDetectionRetriesVariable pulumi.StringPtrOutput `pulumi:"deadPeerDetectionRetriesVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
	// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
	IkeCiphersuite pulumi.StringPtrOutput `pulumi:"ikeCiphersuite"`
	// Variable name
	IkeCiphersuiteVariable pulumi.StringPtrOutput `pulumi:"ikeCiphersuiteVariable"`
	// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
	IkeGroup pulumi.StringPtrOutput `pulumi:"ikeGroup"`
	// Variable name
	IkeGroupVariable pulumi.StringPtrOutput `pulumi:"ikeGroupVariable"`
	// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
	IkeMode pulumi.StringPtrOutput `pulumi:"ikeMode"`
	// Variable name
	IkeModeVariable pulumi.StringPtrOutput `pulumi:"ikeModeVariable"`
	// Use preshared key to authenticate IKE peer
	IkePreSharedKey pulumi.StringPtrOutput `pulumi:"ikePreSharedKey"`
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyLocalId pulumi.StringPtrOutput `pulumi:"ikePreSharedKeyLocalId"`
	// Variable name
	IkePreSharedKeyLocalIdVariable pulumi.StringPtrOutput `pulumi:"ikePreSharedKeyLocalIdVariable"`
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyRemoteId pulumi.StringPtrOutput `pulumi:"ikePreSharedKeyRemoteId"`
	// Variable name
	IkePreSharedKeyRemoteIdVariable pulumi.StringPtrOutput `pulumi:"ikePreSharedKeyRemoteIdVariable"`
	// Variable name
	IkePreSharedKeyVariable pulumi.StringPtrOutput `pulumi:"ikePreSharedKeyVariable"`
	// IKE rekey interval <60..86400> seconds - Range: `60`-`86400` - Default value: `14400`
	IkeRekeyInterval pulumi.IntPtrOutput `pulumi:"ikeRekeyInterval"`
	// Variable name
	IkeRekeyIntervalVariable pulumi.StringPtrOutput `pulumi:"ikeRekeyIntervalVariable"`
	// IKE Version <1..2> - Range: `1`-`2` - Default value: `1`
	IkeVersion pulumi.IntPtrOutput `pulumi:"ikeVersion"`
	// Interface description
	InterfaceDescription pulumi.StringPtrOutput `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable pulumi.StringPtrOutput `pulumi:"interfaceDescriptionVariable"`
	// Interface name: IPsec when present
	InterfaceName pulumi.StringPtrOutput `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable pulumi.StringPtrOutput `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable pulumi.StringPtrOutput `pulumi:"ipAddressVariable"`
	// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
	// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
	// `aes256-gcm`
	IpsecCiphersuite pulumi.StringPtrOutput `pulumi:"ipsecCiphersuite"`
	// Variable name
	IpsecCiphersuiteVariable pulumi.StringPtrOutput `pulumi:"ipsecCiphersuiteVariable"`
	// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
	// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
	IpsecPerfectForwardSecrecy pulumi.StringPtrOutput `pulumi:"ipsecPerfectForwardSecrecy"`
	// Variable name
	IpsecPerfectForwardSecrecyVariable pulumi.StringPtrOutput `pulumi:"ipsecPerfectForwardSecrecyVariable"`
	// IPsec rekey interval <300..1209600> seconds - Range: `120`-`2592000` - Default value: `3600`
	IpsecRekeyInterval pulumi.IntPtrOutput `pulumi:"ipsecRekeyInterval"`
	// Variable name
	IpsecRekeyIntervalVariable pulumi.StringPtrOutput `pulumi:"ipsecRekeyIntervalVariable"`
	// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
	IpsecReplayWindow pulumi.IntPtrOutput `pulumi:"ipsecReplayWindow"`
	// Variable name
	IpsecReplayWindowVariable pulumi.StringPtrOutput `pulumi:"ipsecReplayWindowVariable"`
	// Interface MTU <68..9216>, in bytes - Range: `68`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// Variable name
	MtuVariable pulumi.StringPtrOutput `pulumi:"mtuVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Administrative state - Default value: `true`
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable pulumi.StringPtrOutput `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust pulumi.IntPtrOutput `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable pulumi.StringPtrOutput `pulumi:"tcpMssAdjustVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Variable name
	TrackerVariable pulumi.StringPtrOutput `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers pulumi.StringArrayOutput `pulumi:"trackers"`
	// Tunnel destination IP address
	TunnelDestination pulumi.StringPtrOutput `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable pulumi.StringPtrOutput `pulumi:"tunnelDestinationVariable"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia pulumi.StringPtrOutput `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable pulumi.StringPtrOutput `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource pulumi.StringPtrOutput `pulumi:"tunnelSource"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface pulumi.StringPtrOutput `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable pulumi.StringPtrOutput `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable pulumi.StringPtrOutput `pulumi:"tunnelSourceVariable"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoVpnInterfaceIpsecFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoVpnInterfaceIpsecFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoVpnInterfaceIpsecFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoVpnInterfaceIpsecFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoVpnInterfaceIpsecFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoVpnInterfaceIpsecFeatureTemplate gets an existing CiscoVpnInterfaceIpsecFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoVpnInterfaceIpsecFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoVpnInterfaceIpsecFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoVpnInterfaceIpsecFeatureTemplate, error) {
	var resource CiscoVpnInterfaceIpsecFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoVpnInterfaceIpsecFeatureTemplate:CiscoVpnInterfaceIpsecFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoVpnInterfaceIpsecFeatureTemplate resources.
type ciscoVpnInterfaceIpsecFeatureTemplateState struct {
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application *string `pulumi:"application"`
	// Variable name
	ApplicationVariable *string `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment *bool `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable *string `pulumi:"clearDontFragmentVariable"`
	// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
	DeadPeerDetectionInterval *int `pulumi:"deadPeerDetectionInterval"`
	// Variable name
	DeadPeerDetectionIntervalVariable *string `pulumi:"deadPeerDetectionIntervalVariable"`
	// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
	DeadPeerDetectionRetries *int `pulumi:"deadPeerDetectionRetries"`
	// Variable name
	DeadPeerDetectionRetriesVariable *string `pulumi:"deadPeerDetectionRetriesVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
	// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
	IkeCiphersuite *string `pulumi:"ikeCiphersuite"`
	// Variable name
	IkeCiphersuiteVariable *string `pulumi:"ikeCiphersuiteVariable"`
	// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
	IkeGroup *string `pulumi:"ikeGroup"`
	// Variable name
	IkeGroupVariable *string `pulumi:"ikeGroupVariable"`
	// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
	IkeMode *string `pulumi:"ikeMode"`
	// Variable name
	IkeModeVariable *string `pulumi:"ikeModeVariable"`
	// Use preshared key to authenticate IKE peer
	IkePreSharedKey *string `pulumi:"ikePreSharedKey"`
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyLocalId *string `pulumi:"ikePreSharedKeyLocalId"`
	// Variable name
	IkePreSharedKeyLocalIdVariable *string `pulumi:"ikePreSharedKeyLocalIdVariable"`
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyRemoteId *string `pulumi:"ikePreSharedKeyRemoteId"`
	// Variable name
	IkePreSharedKeyRemoteIdVariable *string `pulumi:"ikePreSharedKeyRemoteIdVariable"`
	// Variable name
	IkePreSharedKeyVariable *string `pulumi:"ikePreSharedKeyVariable"`
	// IKE rekey interval <60..86400> seconds - Range: `60`-`86400` - Default value: `14400`
	IkeRekeyInterval *int `pulumi:"ikeRekeyInterval"`
	// Variable name
	IkeRekeyIntervalVariable *string `pulumi:"ikeRekeyIntervalVariable"`
	// IKE Version <1..2> - Range: `1`-`2` - Default value: `1`
	IkeVersion *int `pulumi:"ikeVersion"`
	// Interface description
	InterfaceDescription *string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable *string `pulumi:"interfaceDescriptionVariable"`
	// Interface name: IPsec when present
	InterfaceName *string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable *string `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress *string `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable *string `pulumi:"ipAddressVariable"`
	// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
	// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
	// `aes256-gcm`
	IpsecCiphersuite *string `pulumi:"ipsecCiphersuite"`
	// Variable name
	IpsecCiphersuiteVariable *string `pulumi:"ipsecCiphersuiteVariable"`
	// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
	// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
	IpsecPerfectForwardSecrecy *string `pulumi:"ipsecPerfectForwardSecrecy"`
	// Variable name
	IpsecPerfectForwardSecrecyVariable *string `pulumi:"ipsecPerfectForwardSecrecyVariable"`
	// IPsec rekey interval <300..1209600> seconds - Range: `120`-`2592000` - Default value: `3600`
	IpsecRekeyInterval *int `pulumi:"ipsecRekeyInterval"`
	// Variable name
	IpsecRekeyIntervalVariable *string `pulumi:"ipsecRekeyIntervalVariable"`
	// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
	IpsecReplayWindow *int `pulumi:"ipsecReplayWindow"`
	// Variable name
	IpsecReplayWindowVariable *string `pulumi:"ipsecReplayWindowVariable"`
	// Interface MTU <68..9216>, in bytes - Range: `68`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
	// Variable name
	MtuVariable *string `pulumi:"mtuVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Administrative state - Default value: `true`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust *int `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable *string `pulumi:"tcpMssAdjustVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Variable name
	TrackerVariable *string `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers []string `pulumi:"trackers"`
	// Tunnel destination IP address
	TunnelDestination *string `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable *string `pulumi:"tunnelDestinationVariable"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia *string `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable *string `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource *string `pulumi:"tunnelSource"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface *string `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable *string `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable *string `pulumi:"tunnelSourceVariable"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoVpnInterfaceIpsecFeatureTemplateState struct {
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application pulumi.StringPtrInput
	// Variable name
	ApplicationVariable pulumi.StringPtrInput
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment pulumi.BoolPtrInput
	// Variable name
	ClearDontFragmentVariable pulumi.StringPtrInput
	// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
	DeadPeerDetectionInterval pulumi.IntPtrInput
	// Variable name
	DeadPeerDetectionIntervalVariable pulumi.StringPtrInput
	// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
	DeadPeerDetectionRetries pulumi.IntPtrInput
	// Variable name
	DeadPeerDetectionRetriesVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
	// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
	IkeCiphersuite pulumi.StringPtrInput
	// Variable name
	IkeCiphersuiteVariable pulumi.StringPtrInput
	// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
	IkeGroup pulumi.StringPtrInput
	// Variable name
	IkeGroupVariable pulumi.StringPtrInput
	// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
	IkeMode pulumi.StringPtrInput
	// Variable name
	IkeModeVariable pulumi.StringPtrInput
	// Use preshared key to authenticate IKE peer
	IkePreSharedKey pulumi.StringPtrInput
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyLocalId pulumi.StringPtrInput
	// Variable name
	IkePreSharedKeyLocalIdVariable pulumi.StringPtrInput
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyRemoteId pulumi.StringPtrInput
	// Variable name
	IkePreSharedKeyRemoteIdVariable pulumi.StringPtrInput
	// Variable name
	IkePreSharedKeyVariable pulumi.StringPtrInput
	// IKE rekey interval <60..86400> seconds - Range: `60`-`86400` - Default value: `14400`
	IkeRekeyInterval pulumi.IntPtrInput
	// Variable name
	IkeRekeyIntervalVariable pulumi.StringPtrInput
	// IKE Version <1..2> - Range: `1`-`2` - Default value: `1`
	IkeVersion pulumi.IntPtrInput
	// Interface description
	InterfaceDescription pulumi.StringPtrInput
	// Variable name
	InterfaceDescriptionVariable pulumi.StringPtrInput
	// Interface name: IPsec when present
	InterfaceName pulumi.StringPtrInput
	// Variable name
	InterfaceNameVariable pulumi.StringPtrInput
	// Assign IPv4 address
	IpAddress pulumi.StringPtrInput
	// Variable name
	IpAddressVariable pulumi.StringPtrInput
	// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
	// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
	// `aes256-gcm`
	IpsecCiphersuite pulumi.StringPtrInput
	// Variable name
	IpsecCiphersuiteVariable pulumi.StringPtrInput
	// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
	// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
	IpsecPerfectForwardSecrecy pulumi.StringPtrInput
	// Variable name
	IpsecPerfectForwardSecrecyVariable pulumi.StringPtrInput
	// IPsec rekey interval <300..1209600> seconds - Range: `120`-`2592000` - Default value: `3600`
	IpsecRekeyInterval pulumi.IntPtrInput
	// Variable name
	IpsecRekeyIntervalVariable pulumi.StringPtrInput
	// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
	IpsecReplayWindow pulumi.IntPtrInput
	// Variable name
	IpsecReplayWindowVariable pulumi.StringPtrInput
	// Interface MTU <68..9216>, in bytes - Range: `68`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
	// Variable name
	MtuVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Administrative state - Default value: `true`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust pulumi.IntPtrInput
	// Variable name
	TcpMssAdjustVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Variable name
	TrackerVariable pulumi.StringPtrInput
	// Enable tracker for this interface
	Trackers pulumi.StringArrayInput
	// Tunnel destination IP address
	TunnelDestination pulumi.StringPtrInput
	// Variable name
	TunnelDestinationVariable pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia pulumi.StringPtrInput
	// Variable name
	TunnelRouteViaVariable pulumi.StringPtrInput
	// Tunnel source IP Address
	TunnelSource pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface pulumi.StringPtrInput
	// Variable name
	TunnelSourceInterfaceVariable pulumi.StringPtrInput
	// Variable name
	TunnelSourceVariable pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoVpnInterfaceIpsecFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoVpnInterfaceIpsecFeatureTemplateState)(nil)).Elem()
}

type ciscoVpnInterfaceIpsecFeatureTemplateArgs struct {
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application *string `pulumi:"application"`
	// Variable name
	ApplicationVariable *string `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment *bool `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable *string `pulumi:"clearDontFragmentVariable"`
	// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
	DeadPeerDetectionInterval *int `pulumi:"deadPeerDetectionInterval"`
	// Variable name
	DeadPeerDetectionIntervalVariable *string `pulumi:"deadPeerDetectionIntervalVariable"`
	// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
	DeadPeerDetectionRetries *int `pulumi:"deadPeerDetectionRetries"`
	// Variable name
	DeadPeerDetectionRetriesVariable *string `pulumi:"deadPeerDetectionRetriesVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
	// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
	IkeCiphersuite *string `pulumi:"ikeCiphersuite"`
	// Variable name
	IkeCiphersuiteVariable *string `pulumi:"ikeCiphersuiteVariable"`
	// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
	IkeGroup *string `pulumi:"ikeGroup"`
	// Variable name
	IkeGroupVariable *string `pulumi:"ikeGroupVariable"`
	// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
	IkeMode *string `pulumi:"ikeMode"`
	// Variable name
	IkeModeVariable *string `pulumi:"ikeModeVariable"`
	// Use preshared key to authenticate IKE peer
	IkePreSharedKey *string `pulumi:"ikePreSharedKey"`
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyLocalId *string `pulumi:"ikePreSharedKeyLocalId"`
	// Variable name
	IkePreSharedKeyLocalIdVariable *string `pulumi:"ikePreSharedKeyLocalIdVariable"`
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyRemoteId *string `pulumi:"ikePreSharedKeyRemoteId"`
	// Variable name
	IkePreSharedKeyRemoteIdVariable *string `pulumi:"ikePreSharedKeyRemoteIdVariable"`
	// Variable name
	IkePreSharedKeyVariable *string `pulumi:"ikePreSharedKeyVariable"`
	// IKE rekey interval <60..86400> seconds - Range: `60`-`86400` - Default value: `14400`
	IkeRekeyInterval *int `pulumi:"ikeRekeyInterval"`
	// Variable name
	IkeRekeyIntervalVariable *string `pulumi:"ikeRekeyIntervalVariable"`
	// IKE Version <1..2> - Range: `1`-`2` - Default value: `1`
	IkeVersion *int `pulumi:"ikeVersion"`
	// Interface description
	InterfaceDescription *string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable *string `pulumi:"interfaceDescriptionVariable"`
	// Interface name: IPsec when present
	InterfaceName *string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable *string `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress *string `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable *string `pulumi:"ipAddressVariable"`
	// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
	// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
	// `aes256-gcm`
	IpsecCiphersuite *string `pulumi:"ipsecCiphersuite"`
	// Variable name
	IpsecCiphersuiteVariable *string `pulumi:"ipsecCiphersuiteVariable"`
	// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
	// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
	IpsecPerfectForwardSecrecy *string `pulumi:"ipsecPerfectForwardSecrecy"`
	// Variable name
	IpsecPerfectForwardSecrecyVariable *string `pulumi:"ipsecPerfectForwardSecrecyVariable"`
	// IPsec rekey interval <300..1209600> seconds - Range: `120`-`2592000` - Default value: `3600`
	IpsecRekeyInterval *int `pulumi:"ipsecRekeyInterval"`
	// Variable name
	IpsecRekeyIntervalVariable *string `pulumi:"ipsecRekeyIntervalVariable"`
	// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
	IpsecReplayWindow *int `pulumi:"ipsecReplayWindow"`
	// Variable name
	IpsecReplayWindowVariable *string `pulumi:"ipsecReplayWindowVariable"`
	// Interface MTU <68..9216>, in bytes - Range: `68`-`9216` - Default value: `1500`
	Mtu *int `pulumi:"mtu"`
	// Variable name
	MtuVariable *string `pulumi:"mtuVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Administrative state - Default value: `true`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust *int `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable *string `pulumi:"tcpMssAdjustVariable"`
	// Variable name
	TrackerVariable *string `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers []string `pulumi:"trackers"`
	// Tunnel destination IP address
	TunnelDestination *string `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable *string `pulumi:"tunnelDestinationVariable"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia *string `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable *string `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource *string `pulumi:"tunnelSource"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface *string `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable *string `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable *string `pulumi:"tunnelSourceVariable"`
}

// The set of arguments for constructing a CiscoVpnInterfaceIpsecFeatureTemplate resource.
type CiscoVpnInterfaceIpsecFeatureTemplateArgs struct {
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application pulumi.StringPtrInput
	// Variable name
	ApplicationVariable pulumi.StringPtrInput
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment pulumi.BoolPtrInput
	// Variable name
	ClearDontFragmentVariable pulumi.StringPtrInput
	// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
	DeadPeerDetectionInterval pulumi.IntPtrInput
	// Variable name
	DeadPeerDetectionIntervalVariable pulumi.StringPtrInput
	// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
	DeadPeerDetectionRetries pulumi.IntPtrInput
	// Variable name
	DeadPeerDetectionRetriesVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
	// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
	IkeCiphersuite pulumi.StringPtrInput
	// Variable name
	IkeCiphersuiteVariable pulumi.StringPtrInput
	// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
	IkeGroup pulumi.StringPtrInput
	// Variable name
	IkeGroupVariable pulumi.StringPtrInput
	// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
	IkeMode pulumi.StringPtrInput
	// Variable name
	IkeModeVariable pulumi.StringPtrInput
	// Use preshared key to authenticate IKE peer
	IkePreSharedKey pulumi.StringPtrInput
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyLocalId pulumi.StringPtrInput
	// Variable name
	IkePreSharedKeyLocalIdVariable pulumi.StringPtrInput
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyRemoteId pulumi.StringPtrInput
	// Variable name
	IkePreSharedKeyRemoteIdVariable pulumi.StringPtrInput
	// Variable name
	IkePreSharedKeyVariable pulumi.StringPtrInput
	// IKE rekey interval <60..86400> seconds - Range: `60`-`86400` - Default value: `14400`
	IkeRekeyInterval pulumi.IntPtrInput
	// Variable name
	IkeRekeyIntervalVariable pulumi.StringPtrInput
	// IKE Version <1..2> - Range: `1`-`2` - Default value: `1`
	IkeVersion pulumi.IntPtrInput
	// Interface description
	InterfaceDescription pulumi.StringPtrInput
	// Variable name
	InterfaceDescriptionVariable pulumi.StringPtrInput
	// Interface name: IPsec when present
	InterfaceName pulumi.StringPtrInput
	// Variable name
	InterfaceNameVariable pulumi.StringPtrInput
	// Assign IPv4 address
	IpAddress pulumi.StringPtrInput
	// Variable name
	IpAddressVariable pulumi.StringPtrInput
	// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
	// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
	// `aes256-gcm`
	IpsecCiphersuite pulumi.StringPtrInput
	// Variable name
	IpsecCiphersuiteVariable pulumi.StringPtrInput
	// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
	// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
	IpsecPerfectForwardSecrecy pulumi.StringPtrInput
	// Variable name
	IpsecPerfectForwardSecrecyVariable pulumi.StringPtrInput
	// IPsec rekey interval <300..1209600> seconds - Range: `120`-`2592000` - Default value: `3600`
	IpsecRekeyInterval pulumi.IntPtrInput
	// Variable name
	IpsecRekeyIntervalVariable pulumi.StringPtrInput
	// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
	IpsecReplayWindow pulumi.IntPtrInput
	// Variable name
	IpsecReplayWindowVariable pulumi.StringPtrInput
	// Interface MTU <68..9216>, in bytes - Range: `68`-`9216` - Default value: `1500`
	Mtu pulumi.IntPtrInput
	// Variable name
	MtuVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Administrative state - Default value: `true`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust pulumi.IntPtrInput
	// Variable name
	TcpMssAdjustVariable pulumi.StringPtrInput
	// Variable name
	TrackerVariable pulumi.StringPtrInput
	// Enable tracker for this interface
	Trackers pulumi.StringArrayInput
	// Tunnel destination IP address
	TunnelDestination pulumi.StringPtrInput
	// Variable name
	TunnelDestinationVariable pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia pulumi.StringPtrInput
	// Variable name
	TunnelRouteViaVariable pulumi.StringPtrInput
	// Tunnel source IP Address
	TunnelSource pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface pulumi.StringPtrInput
	// Variable name
	TunnelSourceInterfaceVariable pulumi.StringPtrInput
	// Variable name
	TunnelSourceVariable pulumi.StringPtrInput
}

func (CiscoVpnInterfaceIpsecFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoVpnInterfaceIpsecFeatureTemplateArgs)(nil)).Elem()
}

type CiscoVpnInterfaceIpsecFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoVpnInterfaceIpsecFeatureTemplateOutput() CiscoVpnInterfaceIpsecFeatureTemplateOutput
	ToCiscoVpnInterfaceIpsecFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateOutput
}

func (*CiscoVpnInterfaceIpsecFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoVpnInterfaceIpsecFeatureTemplate)(nil)).Elem()
}

func (i *CiscoVpnInterfaceIpsecFeatureTemplate) ToCiscoVpnInterfaceIpsecFeatureTemplateOutput() CiscoVpnInterfaceIpsecFeatureTemplateOutput {
	return i.ToCiscoVpnInterfaceIpsecFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoVpnInterfaceIpsecFeatureTemplate) ToCiscoVpnInterfaceIpsecFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnInterfaceIpsecFeatureTemplateOutput)
}

// CiscoVpnInterfaceIpsecFeatureTemplateArrayInput is an input type that accepts CiscoVpnInterfaceIpsecFeatureTemplateArray and CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoVpnInterfaceIpsecFeatureTemplateArrayInput` via:
//
//	CiscoVpnInterfaceIpsecFeatureTemplateArray{ CiscoVpnInterfaceIpsecFeatureTemplateArgs{...} }
type CiscoVpnInterfaceIpsecFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutput() CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput
	ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutputWithContext(context.Context) CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput
}

type CiscoVpnInterfaceIpsecFeatureTemplateArray []CiscoVpnInterfaceIpsecFeatureTemplateInput

func (CiscoVpnInterfaceIpsecFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoVpnInterfaceIpsecFeatureTemplate)(nil)).Elem()
}

func (i CiscoVpnInterfaceIpsecFeatureTemplateArray) ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutput() CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput {
	return i.ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoVpnInterfaceIpsecFeatureTemplateArray) ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput)
}

// CiscoVpnInterfaceIpsecFeatureTemplateMapInput is an input type that accepts CiscoVpnInterfaceIpsecFeatureTemplateMap and CiscoVpnInterfaceIpsecFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoVpnInterfaceIpsecFeatureTemplateMapInput` via:
//
//	CiscoVpnInterfaceIpsecFeatureTemplateMap{ "key": CiscoVpnInterfaceIpsecFeatureTemplateArgs{...} }
type CiscoVpnInterfaceIpsecFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutput() CiscoVpnInterfaceIpsecFeatureTemplateMapOutput
	ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutputWithContext(context.Context) CiscoVpnInterfaceIpsecFeatureTemplateMapOutput
}

type CiscoVpnInterfaceIpsecFeatureTemplateMap map[string]CiscoVpnInterfaceIpsecFeatureTemplateInput

func (CiscoVpnInterfaceIpsecFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoVpnInterfaceIpsecFeatureTemplate)(nil)).Elem()
}

func (i CiscoVpnInterfaceIpsecFeatureTemplateMap) ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutput() CiscoVpnInterfaceIpsecFeatureTemplateMapOutput {
	return i.ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoVpnInterfaceIpsecFeatureTemplateMap) ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnInterfaceIpsecFeatureTemplateMapOutput)
}

type CiscoVpnInterfaceIpsecFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoVpnInterfaceIpsecFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoVpnInterfaceIpsecFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) ToCiscoVpnInterfaceIpsecFeatureTemplateOutput() CiscoVpnInterfaceIpsecFeatureTemplateOutput {
	return o
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) ToCiscoVpnInterfaceIpsecFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateOutput {
	return o
}

// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.Application }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) ApplicationVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.ApplicationVariable }).(pulumi.StringPtrOutput)
}

// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) ClearDontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.BoolPtrOutput { return v.ClearDontFragment }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) ClearDontFragmentVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.ClearDontFragmentVariable
	}).(pulumi.StringPtrOutput)
}

// IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) DeadPeerDetectionInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.DeadPeerDetectionInterval }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) DeadPeerDetectionIntervalVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.DeadPeerDetectionIntervalVariable
	}).(pulumi.StringPtrOutput)
}

// IKE keepalive retries - Range: `2`-`60` - Default value: `3`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) DeadPeerDetectionRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.DeadPeerDetectionRetries }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) DeadPeerDetectionRetriesVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.DeadPeerDetectionRetriesVariable
	}).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
// `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeCiphersuite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkeCiphersuite }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeCiphersuiteVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkeCiphersuiteVariable }).(pulumi.StringPtrOutput)
}

// IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkeGroup }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeGroupVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkeGroupVariable }).(pulumi.StringPtrOutput)
}

// IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkeMode }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeModeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkeModeVariable }).(pulumi.StringPtrOutput)
}

// Use preshared key to authenticate IKE peer
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkePreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkePreSharedKey }).(pulumi.StringPtrOutput)
}

// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkePreSharedKeyLocalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IkePreSharedKeyLocalId }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkePreSharedKeyLocalIdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IkePreSharedKeyLocalIdVariable
	}).(pulumi.StringPtrOutput)
}

// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkePreSharedKeyRemoteId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IkePreSharedKeyRemoteId
	}).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkePreSharedKeyRemoteIdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IkePreSharedKeyRemoteIdVariable
	}).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkePreSharedKeyVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IkePreSharedKeyVariable
	}).(pulumi.StringPtrOutput)
}

// IKE rekey interval <60..86400> seconds - Range: `60`-`86400` - Default value: `14400`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeRekeyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.IkeRekeyInterval }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeRekeyIntervalVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IkeRekeyIntervalVariable
	}).(pulumi.StringPtrOutput)
}

// IKE Version <1..2> - Range: `1`-`2` - Default value: `1`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IkeVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.IkeVersion }).(pulumi.IntPtrOutput)
}

// Interface description
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) InterfaceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceDescription }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) InterfaceDescriptionVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.InterfaceDescriptionVariable
	}).(pulumi.StringPtrOutput)
}

// Interface name: IPsec when present
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) InterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceName }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) InterfaceNameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceNameVariable }).(pulumi.StringPtrOutput)
}

// Assign IPv4 address
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IpAddressVariable }).(pulumi.StringPtrOutput)
}

// IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
// `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
// `aes256-gcm`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecCiphersuite() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.IpsecCiphersuite }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecCiphersuiteVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IpsecCiphersuiteVariable
	}).(pulumi.StringPtrOutput)
}

// IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
// `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecPerfectForwardSecrecy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IpsecPerfectForwardSecrecy
	}).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecPerfectForwardSecrecyVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IpsecPerfectForwardSecrecyVariable
	}).(pulumi.StringPtrOutput)
}

// IPsec rekey interval <300..1209600> seconds - Range: `120`-`2592000` - Default value: `3600`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecRekeyInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.IpsecRekeyInterval }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecRekeyIntervalVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IpsecRekeyIntervalVariable
	}).(pulumi.StringPtrOutput)
}

// Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecReplayWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.IpsecReplayWindow }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) IpsecReplayWindowVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.IpsecReplayWindowVariable
	}).(pulumi.StringPtrOutput)
}

// Interface MTU <68..9216>, in bytes - Range: `68`-`9216` - Default value: `1500`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) MtuVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.MtuVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Administrative state - Default value: `true`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) ShutdownVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.ShutdownVariable }).(pulumi.StringPtrOutput)
}

// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TcpMssAdjust() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntPtrOutput { return v.TcpMssAdjust }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TcpMssAdjustVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TcpMssAdjustVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TrackerVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TrackerVariable }).(pulumi.StringPtrOutput)
}

// Enable tracker for this interface
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Trackers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringArrayOutput { return v.Trackers }).(pulumi.StringArrayOutput)
}

// Tunnel destination IP address
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelDestination }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelDestinationVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.TunnelDestinationVariable
	}).(pulumi.StringPtrOutput)
}

// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelRouteVia() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelRouteVia }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelRouteViaVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelRouteViaVariable }).(pulumi.StringPtrOutput)
}

// Tunnel source IP Address
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelSource }).(pulumi.StringPtrOutput)
}

// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelSourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelSourceInterface }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelSourceInterfaceVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput {
		return v.TunnelSourceInterfaceVariable
	}).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) TunnelSourceVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelSourceVariable }).(pulumi.StringPtrOutput)
}

// The version of the feature template
func (o CiscoVpnInterfaceIpsecFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceIpsecFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoVpnInterfaceIpsecFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput) ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutput() CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput {
	return o
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput) ToCiscoVpnInterfaceIpsecFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput {
	return o
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoVpnInterfaceIpsecFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoVpnInterfaceIpsecFeatureTemplate {
		return vs[0].([]*CiscoVpnInterfaceIpsecFeatureTemplate)[vs[1].(int)]
	}).(CiscoVpnInterfaceIpsecFeatureTemplateOutput)
}

type CiscoVpnInterfaceIpsecFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoVpnInterfaceIpsecFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoVpnInterfaceIpsecFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateMapOutput) ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutput() CiscoVpnInterfaceIpsecFeatureTemplateMapOutput {
	return o
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateMapOutput) ToCiscoVpnInterfaceIpsecFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoVpnInterfaceIpsecFeatureTemplateMapOutput {
	return o
}

func (o CiscoVpnInterfaceIpsecFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoVpnInterfaceIpsecFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoVpnInterfaceIpsecFeatureTemplate {
		return vs[0].(map[string]*CiscoVpnInterfaceIpsecFeatureTemplate)[vs[1].(string)]
	}).(CiscoVpnInterfaceIpsecFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnInterfaceIpsecFeatureTemplateInput)(nil)).Elem(), &CiscoVpnInterfaceIpsecFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnInterfaceIpsecFeatureTemplateArrayInput)(nil)).Elem(), CiscoVpnInterfaceIpsecFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnInterfaceIpsecFeatureTemplateMapInput)(nil)).Elem(), CiscoVpnInterfaceIpsecFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoVpnInterfaceIpsecFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoVpnInterfaceIpsecFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoVpnInterfaceIpsecFeatureTemplateMapOutput{})
}
