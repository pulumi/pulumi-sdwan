// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a CLI Template feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCliTemplateFeatureTemplate(ctx, "example", &sdwan.CliTemplateFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				CliConfig: pulumi.String("! Enable new BGP community format\nip bgp-community new-format\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/cliTemplateFeatureTemplate:CliTemplateFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CliTemplateFeatureTemplate struct {
	pulumi.CustomResourceState

	// Cli config
	CliConfig pulumi.StringPtrOutput `pulumi:"cliConfig"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCliTemplateFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCliTemplateFeatureTemplate(ctx *pulumi.Context,
	name string, args *CliTemplateFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CliTemplateFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CliTemplateFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/cliTemplateFeatureTemplate:CliTemplateFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCliTemplateFeatureTemplate gets an existing CliTemplateFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCliTemplateFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CliTemplateFeatureTemplateState, opts ...pulumi.ResourceOption) (*CliTemplateFeatureTemplate, error) {
	var resource CliTemplateFeatureTemplate
	err := ctx.ReadResource("sdwan:index/cliTemplateFeatureTemplate:CliTemplateFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CliTemplateFeatureTemplate resources.
type cliTemplateFeatureTemplateState struct {
	// Cli config
	CliConfig *string `pulumi:"cliConfig"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CliTemplateFeatureTemplateState struct {
	// Cli config
	CliConfig pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CliTemplateFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cliTemplateFeatureTemplateState)(nil)).Elem()
}

type cliTemplateFeatureTemplateArgs struct {
	// Cli config
	CliConfig *string `pulumi:"cliConfig"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CliTemplateFeatureTemplate resource.
type CliTemplateFeatureTemplateArgs struct {
	// Cli config
	CliConfig pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
}

func (CliTemplateFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cliTemplateFeatureTemplateArgs)(nil)).Elem()
}

type CliTemplateFeatureTemplateInput interface {
	pulumi.Input

	ToCliTemplateFeatureTemplateOutput() CliTemplateFeatureTemplateOutput
	ToCliTemplateFeatureTemplateOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateOutput
}

func (*CliTemplateFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CliTemplateFeatureTemplate)(nil)).Elem()
}

func (i *CliTemplateFeatureTemplate) ToCliTemplateFeatureTemplateOutput() CliTemplateFeatureTemplateOutput {
	return i.ToCliTemplateFeatureTemplateOutputWithContext(context.Background())
}

func (i *CliTemplateFeatureTemplate) ToCliTemplateFeatureTemplateOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliTemplateFeatureTemplateOutput)
}

// CliTemplateFeatureTemplateArrayInput is an input type that accepts CliTemplateFeatureTemplateArray and CliTemplateFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CliTemplateFeatureTemplateArrayInput` via:
//
//	CliTemplateFeatureTemplateArray{ CliTemplateFeatureTemplateArgs{...} }
type CliTemplateFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCliTemplateFeatureTemplateArrayOutput() CliTemplateFeatureTemplateArrayOutput
	ToCliTemplateFeatureTemplateArrayOutputWithContext(context.Context) CliTemplateFeatureTemplateArrayOutput
}

type CliTemplateFeatureTemplateArray []CliTemplateFeatureTemplateInput

func (CliTemplateFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliTemplateFeatureTemplate)(nil)).Elem()
}

func (i CliTemplateFeatureTemplateArray) ToCliTemplateFeatureTemplateArrayOutput() CliTemplateFeatureTemplateArrayOutput {
	return i.ToCliTemplateFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CliTemplateFeatureTemplateArray) ToCliTemplateFeatureTemplateArrayOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliTemplateFeatureTemplateArrayOutput)
}

// CliTemplateFeatureTemplateMapInput is an input type that accepts CliTemplateFeatureTemplateMap and CliTemplateFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CliTemplateFeatureTemplateMapInput` via:
//
//	CliTemplateFeatureTemplateMap{ "key": CliTemplateFeatureTemplateArgs{...} }
type CliTemplateFeatureTemplateMapInput interface {
	pulumi.Input

	ToCliTemplateFeatureTemplateMapOutput() CliTemplateFeatureTemplateMapOutput
	ToCliTemplateFeatureTemplateMapOutputWithContext(context.Context) CliTemplateFeatureTemplateMapOutput
}

type CliTemplateFeatureTemplateMap map[string]CliTemplateFeatureTemplateInput

func (CliTemplateFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliTemplateFeatureTemplate)(nil)).Elem()
}

func (i CliTemplateFeatureTemplateMap) ToCliTemplateFeatureTemplateMapOutput() CliTemplateFeatureTemplateMapOutput {
	return i.ToCliTemplateFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CliTemplateFeatureTemplateMap) ToCliTemplateFeatureTemplateMapOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliTemplateFeatureTemplateMapOutput)
}

type CliTemplateFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CliTemplateFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CliTemplateFeatureTemplate)(nil)).Elem()
}

func (o CliTemplateFeatureTemplateOutput) ToCliTemplateFeatureTemplateOutput() CliTemplateFeatureTemplateOutput {
	return o
}

func (o CliTemplateFeatureTemplateOutput) ToCliTemplateFeatureTemplateOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateOutput {
	return o
}

// Cli config
func (o CliTemplateFeatureTemplateOutput) CliConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CliTemplateFeatureTemplate) pulumi.StringPtrOutput { return v.CliConfig }).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CliTemplateFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CliTemplateFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CliTemplateFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CliTemplateFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// The name of the feature template
func (o CliTemplateFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CliTemplateFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template type
func (o CliTemplateFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CliTemplateFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CliTemplateFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CliTemplateFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CliTemplateFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CliTemplateFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliTemplateFeatureTemplate)(nil)).Elem()
}

func (o CliTemplateFeatureTemplateArrayOutput) ToCliTemplateFeatureTemplateArrayOutput() CliTemplateFeatureTemplateArrayOutput {
	return o
}

func (o CliTemplateFeatureTemplateArrayOutput) ToCliTemplateFeatureTemplateArrayOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateArrayOutput {
	return o
}

func (o CliTemplateFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CliTemplateFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CliTemplateFeatureTemplate {
		return vs[0].([]*CliTemplateFeatureTemplate)[vs[1].(int)]
	}).(CliTemplateFeatureTemplateOutput)
}

type CliTemplateFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CliTemplateFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliTemplateFeatureTemplate)(nil)).Elem()
}

func (o CliTemplateFeatureTemplateMapOutput) ToCliTemplateFeatureTemplateMapOutput() CliTemplateFeatureTemplateMapOutput {
	return o
}

func (o CliTemplateFeatureTemplateMapOutput) ToCliTemplateFeatureTemplateMapOutputWithContext(ctx context.Context) CliTemplateFeatureTemplateMapOutput {
	return o
}

func (o CliTemplateFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CliTemplateFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CliTemplateFeatureTemplate {
		return vs[0].(map[string]*CliTemplateFeatureTemplate)[vs[1].(string)]
	}).(CliTemplateFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CliTemplateFeatureTemplateInput)(nil)).Elem(), &CliTemplateFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliTemplateFeatureTemplateArrayInput)(nil)).Elem(), CliTemplateFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliTemplateFeatureTemplateMapInput)(nil)).Elem(), CliTemplateFeatureTemplateMap{})
	pulumi.RegisterOutputType(CliTemplateFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CliTemplateFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CliTemplateFeatureTemplateMapOutput{})
}
