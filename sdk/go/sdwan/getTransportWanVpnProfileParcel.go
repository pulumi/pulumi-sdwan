// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Transport WAN VPN profile parcel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupTransportWanVpnProfileParcel(ctx, &sdwan.LookupTransportWanVpnProfileParcelArgs{
//				Id:               "f6b2c44c-693c-4763-b010-895aa3d236bd",
//				FeatureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTransportWanVpnProfileParcel(ctx *pulumi.Context, args *LookupTransportWanVpnProfileParcelArgs, opts ...pulumi.InvokeOption) (*LookupTransportWanVpnProfileParcelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransportWanVpnProfileParcelResult
	err := ctx.Invoke("sdwan:index/getTransportWanVpnProfileParcel:getTransportWanVpnProfileParcel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTransportWanVpnProfileParcel.
type LookupTransportWanVpnProfileParcelArgs struct {
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the profile parcel
	Id string `pulumi:"id"`
}

// A collection of values returned by getTransportWanVpnProfileParcel.
type LookupTransportWanVpnProfileParcelResult struct {
	// The description of the profile parcel
	Description string `pulumi:"description"`
	// Enhance ECMP Keying
	EnhanceEcmpKeying bool `pulumi:"enhanceEcmpKeying"`
	// Variable name
	EnhanceEcmpKeyingVariable string `pulumi:"enhanceEcmpKeyingVariable"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the profile parcel
	Id string `pulumi:"id"`
	// IPv4 Static Route
	Ipv4StaticRoutes []GetTransportWanVpnProfileParcelIpv4StaticRoute `pulumi:"ipv4StaticRoutes"`
	// IPv6 Static Route
	Ipv6StaticRoutes []GetTransportWanVpnProfileParcelIpv6StaticRoute `pulumi:"ipv6StaticRoutes"`
	// The name of the profile parcel
	Name string `pulumi:"name"`
	// NAT64 V4 Pool
	Nat64V4Pools    []GetTransportWanVpnProfileParcelNat64V4Pool    `pulumi:"nat64V4Pools"`
	NewHostMappings []GetTransportWanVpnProfileParcelNewHostMapping `pulumi:"newHostMappings"`
	// Primary DNS Address (IPv4)
	PrimaryDnsAddressIpv4 string `pulumi:"primaryDnsAddressIpv4"`
	// Variable name
	PrimaryDnsAddressIpv4Variable string `pulumi:"primaryDnsAddressIpv4Variable"`
	// Primary DNS Address (IPv6)
	PrimaryDnsAddressIpv6 string `pulumi:"primaryDnsAddressIpv6"`
	// Variable name
	PrimaryDnsAddressIpv6Variable string `pulumi:"primaryDnsAddressIpv6Variable"`
	// Secondary DNS Address (IPv4)
	SecondaryDnsAddressIpv4 string `pulumi:"secondaryDnsAddressIpv4"`
	// Variable name
	SecondaryDnsAddressIpv4Variable string `pulumi:"secondaryDnsAddressIpv4Variable"`
	// Secondary DNS Address (IPv6)
	SecondaryDnsAddressIpv6 string `pulumi:"secondaryDnsAddressIpv6"`
	// Variable name
	SecondaryDnsAddressIpv6Variable string `pulumi:"secondaryDnsAddressIpv6Variable"`
	// Service
	Services []GetTransportWanVpnProfileParcelService `pulumi:"services"`
	// The version of the profile parcel
	Version int `pulumi:"version"`
	// VPN
	Vpn int `pulumi:"vpn"`
}

func LookupTransportWanVpnProfileParcelOutput(ctx *pulumi.Context, args LookupTransportWanVpnProfileParcelOutputArgs, opts ...pulumi.InvokeOption) LookupTransportWanVpnProfileParcelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTransportWanVpnProfileParcelResult, error) {
			args := v.(LookupTransportWanVpnProfileParcelArgs)
			r, err := LookupTransportWanVpnProfileParcel(ctx, &args, opts...)
			var s LookupTransportWanVpnProfileParcelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTransportWanVpnProfileParcelResultOutput)
}

// A collection of arguments for invoking getTransportWanVpnProfileParcel.
type LookupTransportWanVpnProfileParcelOutputArgs struct {
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput `pulumi:"featureProfileId"`
	// The id of the profile parcel
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTransportWanVpnProfileParcelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransportWanVpnProfileParcelArgs)(nil)).Elem()
}

// A collection of values returned by getTransportWanVpnProfileParcel.
type LookupTransportWanVpnProfileParcelResultOutput struct{ *pulumi.OutputState }

func (LookupTransportWanVpnProfileParcelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransportWanVpnProfileParcelResult)(nil)).Elem()
}

func (o LookupTransportWanVpnProfileParcelResultOutput) ToLookupTransportWanVpnProfileParcelResultOutput() LookupTransportWanVpnProfileParcelResultOutput {
	return o
}

func (o LookupTransportWanVpnProfileParcelResultOutput) ToLookupTransportWanVpnProfileParcelResultOutputWithContext(ctx context.Context) LookupTransportWanVpnProfileParcelResultOutput {
	return o
}

// The description of the profile parcel
func (o LookupTransportWanVpnProfileParcelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.Description }).(pulumi.StringOutput)
}

// Enhance ECMP Keying
func (o LookupTransportWanVpnProfileParcelResultOutput) EnhanceEcmpKeying() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) bool { return v.EnhanceEcmpKeying }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnProfileParcelResultOutput) EnhanceEcmpKeyingVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.EnhanceEcmpKeyingVariable }).(pulumi.StringOutput)
}

// Feature Profile ID
func (o LookupTransportWanVpnProfileParcelResultOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The id of the profile parcel
func (o LookupTransportWanVpnProfileParcelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.Id }).(pulumi.StringOutput)
}

// IPv4 Static Route
func (o LookupTransportWanVpnProfileParcelResultOutput) Ipv4StaticRoutes() GetTransportWanVpnProfileParcelIpv4StaticRouteArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) []GetTransportWanVpnProfileParcelIpv4StaticRoute {
		return v.Ipv4StaticRoutes
	}).(GetTransportWanVpnProfileParcelIpv4StaticRouteArrayOutput)
}

// IPv6 Static Route
func (o LookupTransportWanVpnProfileParcelResultOutput) Ipv6StaticRoutes() GetTransportWanVpnProfileParcelIpv6StaticRouteArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) []GetTransportWanVpnProfileParcelIpv6StaticRoute {
		return v.Ipv6StaticRoutes
	}).(GetTransportWanVpnProfileParcelIpv6StaticRouteArrayOutput)
}

// The name of the profile parcel
func (o LookupTransportWanVpnProfileParcelResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.Name }).(pulumi.StringOutput)
}

// NAT64 V4 Pool
func (o LookupTransportWanVpnProfileParcelResultOutput) Nat64V4Pools() GetTransportWanVpnProfileParcelNat64V4PoolArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) []GetTransportWanVpnProfileParcelNat64V4Pool {
		return v.Nat64V4Pools
	}).(GetTransportWanVpnProfileParcelNat64V4PoolArrayOutput)
}

func (o LookupTransportWanVpnProfileParcelResultOutput) NewHostMappings() GetTransportWanVpnProfileParcelNewHostMappingArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) []GetTransportWanVpnProfileParcelNewHostMapping {
		return v.NewHostMappings
	}).(GetTransportWanVpnProfileParcelNewHostMappingArrayOutput)
}

// Primary DNS Address (IPv4)
func (o LookupTransportWanVpnProfileParcelResultOutput) PrimaryDnsAddressIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.PrimaryDnsAddressIpv4 }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnProfileParcelResultOutput) PrimaryDnsAddressIpv4Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.PrimaryDnsAddressIpv4Variable }).(pulumi.StringOutput)
}

// Primary DNS Address (IPv6)
func (o LookupTransportWanVpnProfileParcelResultOutput) PrimaryDnsAddressIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.PrimaryDnsAddressIpv6 }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnProfileParcelResultOutput) PrimaryDnsAddressIpv6Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.PrimaryDnsAddressIpv6Variable }).(pulumi.StringOutput)
}

// Secondary DNS Address (IPv4)
func (o LookupTransportWanVpnProfileParcelResultOutput) SecondaryDnsAddressIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.SecondaryDnsAddressIpv4 }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnProfileParcelResultOutput) SecondaryDnsAddressIpv4Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.SecondaryDnsAddressIpv4Variable }).(pulumi.StringOutput)
}

// Secondary DNS Address (IPv6)
func (o LookupTransportWanVpnProfileParcelResultOutput) SecondaryDnsAddressIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.SecondaryDnsAddressIpv6 }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnProfileParcelResultOutput) SecondaryDnsAddressIpv6Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) string { return v.SecondaryDnsAddressIpv6Variable }).(pulumi.StringOutput)
}

// Service
func (o LookupTransportWanVpnProfileParcelResultOutput) Services() GetTransportWanVpnProfileParcelServiceArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) []GetTransportWanVpnProfileParcelService {
		return v.Services
	}).(GetTransportWanVpnProfileParcelServiceArrayOutput)
}

// The version of the profile parcel
func (o LookupTransportWanVpnProfileParcelResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) int { return v.Version }).(pulumi.IntOutput)
}

// VPN
func (o LookupTransportWanVpnProfileParcelResultOutput) Vpn() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnProfileParcelResult) int { return v.Vpn }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransportWanVpnProfileParcelResultOutput{})
}
