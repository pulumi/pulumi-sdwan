// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco SNMP feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoSnmpFeatureTemplate struct {
	pulumi.CustomResourceState

	// Configure SNMP community
	Communities CiscoSnmpFeatureTemplateCommunityArrayOutput `pulumi:"communities"`
	// Set the contact for this managed node
	Contact pulumi.StringPtrOutput `pulumi:"contact"`
	// Variable name
	ContactVariable pulumi.StringPtrOutput `pulumi:"contactVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Configure an SNMP group
	Groups CiscoSnmpFeatureTemplateGroupArrayOutput `pulumi:"groups"`
	// Set the physical location of this managed node
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Variable name
	LocationVariable pulumi.StringPtrOutput `pulumi:"locationVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable or disable SNMP - Default value: `true`
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable pulumi.StringPtrOutput `pulumi:"shutdownVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Configure SNMP server to receive SNMP traps
	TrapTargets CiscoSnmpFeatureTemplateTrapTargetArrayOutput `pulumi:"trapTargets"`
	// Configure an SNMP user
	Users CiscoSnmpFeatureTemplateUserArrayOutput `pulumi:"users"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
	// Configure a view record
	Views CiscoSnmpFeatureTemplateViewArrayOutput `pulumi:"views"`
}

// NewCiscoSnmpFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoSnmpFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoSnmpFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoSnmpFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoSnmpFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoSnmpFeatureTemplate gets an existing CiscoSnmpFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoSnmpFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoSnmpFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoSnmpFeatureTemplate, error) {
	var resource CiscoSnmpFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoSnmpFeatureTemplate:CiscoSnmpFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoSnmpFeatureTemplate resources.
type ciscoSnmpFeatureTemplateState struct {
	// Configure SNMP community
	Communities []CiscoSnmpFeatureTemplateCommunity `pulumi:"communities"`
	// Set the contact for this managed node
	Contact *string `pulumi:"contact"`
	// Variable name
	ContactVariable *string `pulumi:"contactVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure an SNMP group
	Groups []CiscoSnmpFeatureTemplateGroup `pulumi:"groups"`
	// Set the physical location of this managed node
	Location *string `pulumi:"location"`
	// Variable name
	LocationVariable *string `pulumi:"locationVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Enable or disable SNMP - Default value: `true`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Configure SNMP server to receive SNMP traps
	TrapTargets []CiscoSnmpFeatureTemplateTrapTarget `pulumi:"trapTargets"`
	// Configure an SNMP user
	Users []CiscoSnmpFeatureTemplateUser `pulumi:"users"`
	// The version of the feature template
	Version *int `pulumi:"version"`
	// Configure a view record
	Views []CiscoSnmpFeatureTemplateView `pulumi:"views"`
}

type CiscoSnmpFeatureTemplateState struct {
	// Configure SNMP community
	Communities CiscoSnmpFeatureTemplateCommunityArrayInput
	// Set the contact for this managed node
	Contact pulumi.StringPtrInput
	// Variable name
	ContactVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Configure an SNMP group
	Groups CiscoSnmpFeatureTemplateGroupArrayInput
	// Set the physical location of this managed node
	Location pulumi.StringPtrInput
	// Variable name
	LocationVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Enable or disable SNMP - Default value: `true`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Configure SNMP server to receive SNMP traps
	TrapTargets CiscoSnmpFeatureTemplateTrapTargetArrayInput
	// Configure an SNMP user
	Users CiscoSnmpFeatureTemplateUserArrayInput
	// The version of the feature template
	Version pulumi.IntPtrInput
	// Configure a view record
	Views CiscoSnmpFeatureTemplateViewArrayInput
}

func (CiscoSnmpFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoSnmpFeatureTemplateState)(nil)).Elem()
}

type ciscoSnmpFeatureTemplateArgs struct {
	// Configure SNMP community
	Communities []CiscoSnmpFeatureTemplateCommunity `pulumi:"communities"`
	// Set the contact for this managed node
	Contact *string `pulumi:"contact"`
	// Variable name
	ContactVariable *string `pulumi:"contactVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure an SNMP group
	Groups []CiscoSnmpFeatureTemplateGroup `pulumi:"groups"`
	// Set the physical location of this managed node
	Location *string `pulumi:"location"`
	// Variable name
	LocationVariable *string `pulumi:"locationVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Enable or disable SNMP - Default value: `true`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// Configure SNMP server to receive SNMP traps
	TrapTargets []CiscoSnmpFeatureTemplateTrapTarget `pulumi:"trapTargets"`
	// Configure an SNMP user
	Users []CiscoSnmpFeatureTemplateUser `pulumi:"users"`
	// Configure a view record
	Views []CiscoSnmpFeatureTemplateView `pulumi:"views"`
}

// The set of arguments for constructing a CiscoSnmpFeatureTemplate resource.
type CiscoSnmpFeatureTemplateArgs struct {
	// Configure SNMP community
	Communities CiscoSnmpFeatureTemplateCommunityArrayInput
	// Set the contact for this managed node
	Contact pulumi.StringPtrInput
	// Variable name
	ContactVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Configure an SNMP group
	Groups CiscoSnmpFeatureTemplateGroupArrayInput
	// Set the physical location of this managed node
	Location pulumi.StringPtrInput
	// Variable name
	LocationVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Enable or disable SNMP - Default value: `true`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// Configure SNMP server to receive SNMP traps
	TrapTargets CiscoSnmpFeatureTemplateTrapTargetArrayInput
	// Configure an SNMP user
	Users CiscoSnmpFeatureTemplateUserArrayInput
	// Configure a view record
	Views CiscoSnmpFeatureTemplateViewArrayInput
}

func (CiscoSnmpFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoSnmpFeatureTemplateArgs)(nil)).Elem()
}

type CiscoSnmpFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoSnmpFeatureTemplateOutput() CiscoSnmpFeatureTemplateOutput
	ToCiscoSnmpFeatureTemplateOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateOutput
}

func (*CiscoSnmpFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoSnmpFeatureTemplate)(nil)).Elem()
}

func (i *CiscoSnmpFeatureTemplate) ToCiscoSnmpFeatureTemplateOutput() CiscoSnmpFeatureTemplateOutput {
	return i.ToCiscoSnmpFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoSnmpFeatureTemplate) ToCiscoSnmpFeatureTemplateOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoSnmpFeatureTemplateOutput)
}

// CiscoSnmpFeatureTemplateArrayInput is an input type that accepts CiscoSnmpFeatureTemplateArray and CiscoSnmpFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoSnmpFeatureTemplateArrayInput` via:
//
//	CiscoSnmpFeatureTemplateArray{ CiscoSnmpFeatureTemplateArgs{...} }
type CiscoSnmpFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoSnmpFeatureTemplateArrayOutput() CiscoSnmpFeatureTemplateArrayOutput
	ToCiscoSnmpFeatureTemplateArrayOutputWithContext(context.Context) CiscoSnmpFeatureTemplateArrayOutput
}

type CiscoSnmpFeatureTemplateArray []CiscoSnmpFeatureTemplateInput

func (CiscoSnmpFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoSnmpFeatureTemplate)(nil)).Elem()
}

func (i CiscoSnmpFeatureTemplateArray) ToCiscoSnmpFeatureTemplateArrayOutput() CiscoSnmpFeatureTemplateArrayOutput {
	return i.ToCiscoSnmpFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoSnmpFeatureTemplateArray) ToCiscoSnmpFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoSnmpFeatureTemplateArrayOutput)
}

// CiscoSnmpFeatureTemplateMapInput is an input type that accepts CiscoSnmpFeatureTemplateMap and CiscoSnmpFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoSnmpFeatureTemplateMapInput` via:
//
//	CiscoSnmpFeatureTemplateMap{ "key": CiscoSnmpFeatureTemplateArgs{...} }
type CiscoSnmpFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoSnmpFeatureTemplateMapOutput() CiscoSnmpFeatureTemplateMapOutput
	ToCiscoSnmpFeatureTemplateMapOutputWithContext(context.Context) CiscoSnmpFeatureTemplateMapOutput
}

type CiscoSnmpFeatureTemplateMap map[string]CiscoSnmpFeatureTemplateInput

func (CiscoSnmpFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoSnmpFeatureTemplate)(nil)).Elem()
}

func (i CiscoSnmpFeatureTemplateMap) ToCiscoSnmpFeatureTemplateMapOutput() CiscoSnmpFeatureTemplateMapOutput {
	return i.ToCiscoSnmpFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoSnmpFeatureTemplateMap) ToCiscoSnmpFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoSnmpFeatureTemplateMapOutput)
}

type CiscoSnmpFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoSnmpFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoSnmpFeatureTemplate)(nil)).Elem()
}

func (o CiscoSnmpFeatureTemplateOutput) ToCiscoSnmpFeatureTemplateOutput() CiscoSnmpFeatureTemplateOutput {
	return o
}

func (o CiscoSnmpFeatureTemplateOutput) ToCiscoSnmpFeatureTemplateOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateOutput {
	return o
}

// Configure SNMP community
func (o CiscoSnmpFeatureTemplateOutput) Communities() CiscoSnmpFeatureTemplateCommunityArrayOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) CiscoSnmpFeatureTemplateCommunityArrayOutput { return v.Communities }).(CiscoSnmpFeatureTemplateCommunityArrayOutput)
}

// Set the contact for this managed node
func (o CiscoSnmpFeatureTemplateOutput) Contact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringPtrOutput { return v.Contact }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoSnmpFeatureTemplateOutput) ContactVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringPtrOutput { return v.ContactVariable }).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoSnmpFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoSnmpFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Configure an SNMP group
func (o CiscoSnmpFeatureTemplateOutput) Groups() CiscoSnmpFeatureTemplateGroupArrayOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) CiscoSnmpFeatureTemplateGroupArrayOutput { return v.Groups }).(CiscoSnmpFeatureTemplateGroupArrayOutput)
}

// Set the physical location of this managed node
func (o CiscoSnmpFeatureTemplateOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoSnmpFeatureTemplateOutput) LocationVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringPtrOutput { return v.LocationVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoSnmpFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable or disable SNMP - Default value: `true`
func (o CiscoSnmpFeatureTemplateOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoSnmpFeatureTemplateOutput) ShutdownVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringPtrOutput { return v.ShutdownVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CiscoSnmpFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Configure SNMP server to receive SNMP traps
func (o CiscoSnmpFeatureTemplateOutput) TrapTargets() CiscoSnmpFeatureTemplateTrapTargetArrayOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) CiscoSnmpFeatureTemplateTrapTargetArrayOutput { return v.TrapTargets }).(CiscoSnmpFeatureTemplateTrapTargetArrayOutput)
}

// Configure an SNMP user
func (o CiscoSnmpFeatureTemplateOutput) Users() CiscoSnmpFeatureTemplateUserArrayOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) CiscoSnmpFeatureTemplateUserArrayOutput { return v.Users }).(CiscoSnmpFeatureTemplateUserArrayOutput)
}

// The version of the feature template
func (o CiscoSnmpFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Configure a view record
func (o CiscoSnmpFeatureTemplateOutput) Views() CiscoSnmpFeatureTemplateViewArrayOutput {
	return o.ApplyT(func(v *CiscoSnmpFeatureTemplate) CiscoSnmpFeatureTemplateViewArrayOutput { return v.Views }).(CiscoSnmpFeatureTemplateViewArrayOutput)
}

type CiscoSnmpFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoSnmpFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoSnmpFeatureTemplate)(nil)).Elem()
}

func (o CiscoSnmpFeatureTemplateArrayOutput) ToCiscoSnmpFeatureTemplateArrayOutput() CiscoSnmpFeatureTemplateArrayOutput {
	return o
}

func (o CiscoSnmpFeatureTemplateArrayOutput) ToCiscoSnmpFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateArrayOutput {
	return o
}

func (o CiscoSnmpFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoSnmpFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoSnmpFeatureTemplate {
		return vs[0].([]*CiscoSnmpFeatureTemplate)[vs[1].(int)]
	}).(CiscoSnmpFeatureTemplateOutput)
}

type CiscoSnmpFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoSnmpFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoSnmpFeatureTemplate)(nil)).Elem()
}

func (o CiscoSnmpFeatureTemplateMapOutput) ToCiscoSnmpFeatureTemplateMapOutput() CiscoSnmpFeatureTemplateMapOutput {
	return o
}

func (o CiscoSnmpFeatureTemplateMapOutput) ToCiscoSnmpFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoSnmpFeatureTemplateMapOutput {
	return o
}

func (o CiscoSnmpFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoSnmpFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoSnmpFeatureTemplate {
		return vs[0].(map[string]*CiscoSnmpFeatureTemplate)[vs[1].(string)]
	}).(CiscoSnmpFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoSnmpFeatureTemplateInput)(nil)).Elem(), &CiscoSnmpFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoSnmpFeatureTemplateArrayInput)(nil)).Elem(), CiscoSnmpFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoSnmpFeatureTemplateMapInput)(nil)).Elem(), CiscoSnmpFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoSnmpFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoSnmpFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoSnmpFeatureTemplateMapOutput{})
}
