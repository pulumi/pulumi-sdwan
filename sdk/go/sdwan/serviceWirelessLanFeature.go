// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Service Wireless LAN Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "service_wireless_lan_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type ServiceWirelessLanFeature struct {
	pulumi.CustomResourceState

	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country pulumi.StringPtrOutput `pulumi:"country"`
	// Variable name
	CountryVariable pulumi.StringPtrOutput `pulumi:"countryVariable"`
	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// 2.4GHz Enabled
	//   - Default value: `true`
	Enable24g pulumi.BoolPtrOutput `pulumi:"enable24g"`
	// Variable name
	Enable24gVariable pulumi.StringPtrOutput `pulumi:"enable24gVariable"`
	// 5GHz Enabled
	//   - Default value: `true`
	Enable5g pulumi.BoolPtrOutput `pulumi:"enable5g"`
	// Variable name
	Enable5gVariable pulumi.StringPtrOutput `pulumi:"enable5gVariable"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// Set mobile express default gateway
	MeDefaultGateway pulumi.StringPtrOutput `pulumi:"meDefaultGateway"`
	// Variable name
	MeDefaultGatewayVariable pulumi.StringPtrOutput `pulumi:"meDefaultGatewayVariable"`
	// ME management IP dynamic allocated by DHCP
	MeDynamicIpEnabled pulumi.BoolOutput `pulumi:"meDynamicIpEnabled"`
	// Set mobile express controller address
	MeIpv4Address pulumi.StringPtrOutput `pulumi:"meIpv4Address"`
	// Variable name
	MeIpv4AddressVariable pulumi.StringPtrOutput `pulumi:"meIpv4AddressVariable"`
	// Set mobile express controller subnet mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	MeSubnetMask pulumi.StringPtrOutput `pulumi:"meSubnetMask"`
	// Variable name
	MeSubnetMaskVariable pulumi.StringPtrOutput `pulumi:"meSubnetMaskVariable"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Variable name
	PasswordVariable pulumi.StringPtrOutput `pulumi:"passwordVariable"`
	// Configure Wi-Fi SSID profile
	Ssids ServiceWirelessLanFeatureSsidArrayOutput `pulumi:"ssids"`
	// Set management username
	Username pulumi.StringPtrOutput `pulumi:"username"`
	// Variable name
	UsernameVariable pulumi.StringPtrOutput `pulumi:"usernameVariable"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewServiceWirelessLanFeature registers a new resource with the given unique name, arguments, and options.
func NewServiceWirelessLanFeature(ctx *pulumi.Context,
	name string, args *ServiceWirelessLanFeatureArgs, opts ...pulumi.ResourceOption) (*ServiceWirelessLanFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	if args.MeDynamicIpEnabled == nil {
		return nil, errors.New("invalid value for required argument 'MeDynamicIpEnabled'")
	}
	if args.Ssids == nil {
		return nil, errors.New("invalid value for required argument 'Ssids'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceWirelessLanFeature
	err := ctx.RegisterResource("sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceWirelessLanFeature gets an existing ServiceWirelessLanFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceWirelessLanFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceWirelessLanFeatureState, opts ...pulumi.ResourceOption) (*ServiceWirelessLanFeature, error) {
	var resource ServiceWirelessLanFeature
	err := ctx.ReadResource("sdwan:index/serviceWirelessLanFeature:ServiceWirelessLanFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceWirelessLanFeature resources.
type serviceWirelessLanFeatureState struct {
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country *string `pulumi:"country"`
	// Variable name
	CountryVariable *string `pulumi:"countryVariable"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// 2.4GHz Enabled
	//   - Default value: `true`
	Enable24g *bool `pulumi:"enable24g"`
	// Variable name
	Enable24gVariable *string `pulumi:"enable24gVariable"`
	// 5GHz Enabled
	//   - Default value: `true`
	Enable5g *bool `pulumi:"enable5g"`
	// Variable name
	Enable5gVariable *string `pulumi:"enable5gVariable"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Set mobile express default gateway
	MeDefaultGateway *string `pulumi:"meDefaultGateway"`
	// Variable name
	MeDefaultGatewayVariable *string `pulumi:"meDefaultGatewayVariable"`
	// ME management IP dynamic allocated by DHCP
	MeDynamicIpEnabled *bool `pulumi:"meDynamicIpEnabled"`
	// Set mobile express controller address
	MeIpv4Address *string `pulumi:"meIpv4Address"`
	// Variable name
	MeIpv4AddressVariable *string `pulumi:"meIpv4AddressVariable"`
	// Set mobile express controller subnet mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	MeSubnetMask *string `pulumi:"meSubnetMask"`
	// Variable name
	MeSubnetMaskVariable *string `pulumi:"meSubnetMaskVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
	Password *string `pulumi:"password"`
	// Variable name
	PasswordVariable *string `pulumi:"passwordVariable"`
	// Configure Wi-Fi SSID profile
	Ssids []ServiceWirelessLanFeatureSsid `pulumi:"ssids"`
	// Set management username
	Username *string `pulumi:"username"`
	// Variable name
	UsernameVariable *string `pulumi:"usernameVariable"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type ServiceWirelessLanFeatureState struct {
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country pulumi.StringPtrInput
	// Variable name
	CountryVariable pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// 2.4GHz Enabled
	//   - Default value: `true`
	Enable24g pulumi.BoolPtrInput
	// Variable name
	Enable24gVariable pulumi.StringPtrInput
	// 5GHz Enabled
	//   - Default value: `true`
	Enable5g pulumi.BoolPtrInput
	// Variable name
	Enable5gVariable pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Set mobile express default gateway
	MeDefaultGateway pulumi.StringPtrInput
	// Variable name
	MeDefaultGatewayVariable pulumi.StringPtrInput
	// ME management IP dynamic allocated by DHCP
	MeDynamicIpEnabled pulumi.BoolPtrInput
	// Set mobile express controller address
	MeIpv4Address pulumi.StringPtrInput
	// Variable name
	MeIpv4AddressVariable pulumi.StringPtrInput
	// Set mobile express controller subnet mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	MeSubnetMask pulumi.StringPtrInput
	// Variable name
	MeSubnetMaskVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
	Password pulumi.StringPtrInput
	// Variable name
	PasswordVariable pulumi.StringPtrInput
	// Configure Wi-Fi SSID profile
	Ssids ServiceWirelessLanFeatureSsidArrayInput
	// Set management username
	Username pulumi.StringPtrInput
	// Variable name
	UsernameVariable pulumi.StringPtrInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (ServiceWirelessLanFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceWirelessLanFeatureState)(nil)).Elem()
}

type serviceWirelessLanFeatureArgs struct {
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country *string `pulumi:"country"`
	// Variable name
	CountryVariable *string `pulumi:"countryVariable"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// 2.4GHz Enabled
	//   - Default value: `true`
	Enable24g *bool `pulumi:"enable24g"`
	// Variable name
	Enable24gVariable *string `pulumi:"enable24gVariable"`
	// 5GHz Enabled
	//   - Default value: `true`
	Enable5g *bool `pulumi:"enable5g"`
	// Variable name
	Enable5gVariable *string `pulumi:"enable5gVariable"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// Set mobile express default gateway
	MeDefaultGateway *string `pulumi:"meDefaultGateway"`
	// Variable name
	MeDefaultGatewayVariable *string `pulumi:"meDefaultGatewayVariable"`
	// ME management IP dynamic allocated by DHCP
	MeDynamicIpEnabled bool `pulumi:"meDynamicIpEnabled"`
	// Set mobile express controller address
	MeIpv4Address *string `pulumi:"meIpv4Address"`
	// Variable name
	MeIpv4AddressVariable *string `pulumi:"meIpv4AddressVariable"`
	// Set mobile express controller subnet mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	MeSubnetMask *string `pulumi:"meSubnetMask"`
	// Variable name
	MeSubnetMaskVariable *string `pulumi:"meSubnetMaskVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
	Password *string `pulumi:"password"`
	// Variable name
	PasswordVariable *string `pulumi:"passwordVariable"`
	// Configure Wi-Fi SSID profile
	Ssids []ServiceWirelessLanFeatureSsid `pulumi:"ssids"`
	// Set management username
	Username *string `pulumi:"username"`
	// Variable name
	UsernameVariable *string `pulumi:"usernameVariable"`
}

// The set of arguments for constructing a ServiceWirelessLanFeature resource.
type ServiceWirelessLanFeatureArgs struct {
	// Select country
	//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
	Country pulumi.StringPtrInput
	// Variable name
	CountryVariable pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// 2.4GHz Enabled
	//   - Default value: `true`
	Enable24g pulumi.BoolPtrInput
	// Variable name
	Enable24gVariable pulumi.StringPtrInput
	// 5GHz Enabled
	//   - Default value: `true`
	Enable5g pulumi.BoolPtrInput
	// Variable name
	Enable5gVariable pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// Set mobile express default gateway
	MeDefaultGateway pulumi.StringPtrInput
	// Variable name
	MeDefaultGatewayVariable pulumi.StringPtrInput
	// ME management IP dynamic allocated by DHCP
	MeDynamicIpEnabled pulumi.BoolInput
	// Set mobile express controller address
	MeIpv4Address pulumi.StringPtrInput
	// Variable name
	MeIpv4AddressVariable pulumi.StringPtrInput
	// Set mobile express controller subnet mask
	//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
	MeSubnetMask pulumi.StringPtrInput
	// Variable name
	MeSubnetMaskVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
	Password pulumi.StringPtrInput
	// Variable name
	PasswordVariable pulumi.StringPtrInput
	// Configure Wi-Fi SSID profile
	Ssids ServiceWirelessLanFeatureSsidArrayInput
	// Set management username
	Username pulumi.StringPtrInput
	// Variable name
	UsernameVariable pulumi.StringPtrInput
}

func (ServiceWirelessLanFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceWirelessLanFeatureArgs)(nil)).Elem()
}

type ServiceWirelessLanFeatureInput interface {
	pulumi.Input

	ToServiceWirelessLanFeatureOutput() ServiceWirelessLanFeatureOutput
	ToServiceWirelessLanFeatureOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureOutput
}

func (*ServiceWirelessLanFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceWirelessLanFeature)(nil)).Elem()
}

func (i *ServiceWirelessLanFeature) ToServiceWirelessLanFeatureOutput() ServiceWirelessLanFeatureOutput {
	return i.ToServiceWirelessLanFeatureOutputWithContext(context.Background())
}

func (i *ServiceWirelessLanFeature) ToServiceWirelessLanFeatureOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWirelessLanFeatureOutput)
}

// ServiceWirelessLanFeatureArrayInput is an input type that accepts ServiceWirelessLanFeatureArray and ServiceWirelessLanFeatureArrayOutput values.
// You can construct a concrete instance of `ServiceWirelessLanFeatureArrayInput` via:
//
//	ServiceWirelessLanFeatureArray{ ServiceWirelessLanFeatureArgs{...} }
type ServiceWirelessLanFeatureArrayInput interface {
	pulumi.Input

	ToServiceWirelessLanFeatureArrayOutput() ServiceWirelessLanFeatureArrayOutput
	ToServiceWirelessLanFeatureArrayOutputWithContext(context.Context) ServiceWirelessLanFeatureArrayOutput
}

type ServiceWirelessLanFeatureArray []ServiceWirelessLanFeatureInput

func (ServiceWirelessLanFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceWirelessLanFeature)(nil)).Elem()
}

func (i ServiceWirelessLanFeatureArray) ToServiceWirelessLanFeatureArrayOutput() ServiceWirelessLanFeatureArrayOutput {
	return i.ToServiceWirelessLanFeatureArrayOutputWithContext(context.Background())
}

func (i ServiceWirelessLanFeatureArray) ToServiceWirelessLanFeatureArrayOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWirelessLanFeatureArrayOutput)
}

// ServiceWirelessLanFeatureMapInput is an input type that accepts ServiceWirelessLanFeatureMap and ServiceWirelessLanFeatureMapOutput values.
// You can construct a concrete instance of `ServiceWirelessLanFeatureMapInput` via:
//
//	ServiceWirelessLanFeatureMap{ "key": ServiceWirelessLanFeatureArgs{...} }
type ServiceWirelessLanFeatureMapInput interface {
	pulumi.Input

	ToServiceWirelessLanFeatureMapOutput() ServiceWirelessLanFeatureMapOutput
	ToServiceWirelessLanFeatureMapOutputWithContext(context.Context) ServiceWirelessLanFeatureMapOutput
}

type ServiceWirelessLanFeatureMap map[string]ServiceWirelessLanFeatureInput

func (ServiceWirelessLanFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceWirelessLanFeature)(nil)).Elem()
}

func (i ServiceWirelessLanFeatureMap) ToServiceWirelessLanFeatureMapOutput() ServiceWirelessLanFeatureMapOutput {
	return i.ToServiceWirelessLanFeatureMapOutputWithContext(context.Background())
}

func (i ServiceWirelessLanFeatureMap) ToServiceWirelessLanFeatureMapOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWirelessLanFeatureMapOutput)
}

type ServiceWirelessLanFeatureOutput struct{ *pulumi.OutputState }

func (ServiceWirelessLanFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceWirelessLanFeature)(nil)).Elem()
}

func (o ServiceWirelessLanFeatureOutput) ToServiceWirelessLanFeatureOutput() ServiceWirelessLanFeatureOutput {
	return o
}

func (o ServiceWirelessLanFeatureOutput) ToServiceWirelessLanFeatureOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureOutput {
	return o
}

// Select country
//   - Choices: `AE`, `AR`, `AT`, `AU`, `BA`, `BB`, `BE`, `BG`, `BH`, `BN`, `BO`, `BR`, `BY`, `CA`, `CA2`, `CH`, `CL`, `CM`, `CN`, `CO`, `CR`, `CY`, `CZ`, `DE`, `DK`, `DO`, `DZ`, `EC`, `EE`, `EG`, `ES`, `FI`, `FJ`, `FR`, `GB`, `GH`, `GI`, `GR`, `HK`, `HR`, `HU`, `ID`, `IE`, `IL`, `IO`, `IN`, `IQ`, `IS`, `IT`, `J2`, `J4`, `JM`, `JO`, `KE`, `KN`, `KW`, `KZ`, `LB`, `LI`, `LK`, `LT`, `LU`, `LV`, `LY`, `MA`, `MC`, `ME`, `MK`, `MN`, `MO`, `MT`, `MX`, `MY`, `NL`, `NO`, `NZ`, `OM`, `PA`, `PE`, `PH`, `PH2`, `PK`, `PL`, `PR`, `PT`, `PY`, `QA`, `RO`, `RS`, `RU`, `SA`, `SE`, `SG`, `SI`, `SK`, `TH`, `TN`, `TR`, `TW`, `UA`, `US`, `UY`, `VE`, `VN`, `ZA`
func (o ServiceWirelessLanFeatureOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.Country }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) CountryVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.CountryVariable }).(pulumi.StringPtrOutput)
}

// The description of the Feature
func (o ServiceWirelessLanFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// 2.4GHz Enabled
//   - Default value: `true`
func (o ServiceWirelessLanFeatureOutput) Enable24g() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.BoolPtrOutput { return v.Enable24g }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) Enable24gVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.Enable24gVariable }).(pulumi.StringPtrOutput)
}

// 5GHz Enabled
//   - Default value: `true`
func (o ServiceWirelessLanFeatureOutput) Enable5g() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.BoolPtrOutput { return v.Enable5g }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) Enable5gVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.Enable5gVariable }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o ServiceWirelessLanFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// Set mobile express default gateway
func (o ServiceWirelessLanFeatureOutput) MeDefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.MeDefaultGateway }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) MeDefaultGatewayVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.MeDefaultGatewayVariable }).(pulumi.StringPtrOutput)
}

// ME management IP dynamic allocated by DHCP
func (o ServiceWirelessLanFeatureOutput) MeDynamicIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.BoolOutput { return v.MeDynamicIpEnabled }).(pulumi.BoolOutput)
}

// Set mobile express controller address
func (o ServiceWirelessLanFeatureOutput) MeIpv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.MeIpv4Address }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) MeIpv4AddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.MeIpv4AddressVariable }).(pulumi.StringPtrOutput)
}

// Set mobile express controller subnet mask
//   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
func (o ServiceWirelessLanFeatureOutput) MeSubnetMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.MeSubnetMask }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) MeSubnetMaskVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.MeSubnetMaskVariable }).(pulumi.StringPtrOutput)
}

// The name of the Feature
func (o ServiceWirelessLanFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can't substitute 1,l,or ! for i,0 for o,$ for s.
func (o ServiceWirelessLanFeatureOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) PasswordVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.PasswordVariable }).(pulumi.StringPtrOutput)
}

// Configure Wi-Fi SSID profile
func (o ServiceWirelessLanFeatureOutput) Ssids() ServiceWirelessLanFeatureSsidArrayOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) ServiceWirelessLanFeatureSsidArrayOutput { return v.Ssids }).(ServiceWirelessLanFeatureSsidArrayOutput)
}

// Set management username
func (o ServiceWirelessLanFeatureOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.Username }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceWirelessLanFeatureOutput) UsernameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.StringPtrOutput { return v.UsernameVariable }).(pulumi.StringPtrOutput)
}

// The version of the Feature
func (o ServiceWirelessLanFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceWirelessLanFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ServiceWirelessLanFeatureArrayOutput struct{ *pulumi.OutputState }

func (ServiceWirelessLanFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceWirelessLanFeature)(nil)).Elem()
}

func (o ServiceWirelessLanFeatureArrayOutput) ToServiceWirelessLanFeatureArrayOutput() ServiceWirelessLanFeatureArrayOutput {
	return o
}

func (o ServiceWirelessLanFeatureArrayOutput) ToServiceWirelessLanFeatureArrayOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureArrayOutput {
	return o
}

func (o ServiceWirelessLanFeatureArrayOutput) Index(i pulumi.IntInput) ServiceWirelessLanFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceWirelessLanFeature {
		return vs[0].([]*ServiceWirelessLanFeature)[vs[1].(int)]
	}).(ServiceWirelessLanFeatureOutput)
}

type ServiceWirelessLanFeatureMapOutput struct{ *pulumi.OutputState }

func (ServiceWirelessLanFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceWirelessLanFeature)(nil)).Elem()
}

func (o ServiceWirelessLanFeatureMapOutput) ToServiceWirelessLanFeatureMapOutput() ServiceWirelessLanFeatureMapOutput {
	return o
}

func (o ServiceWirelessLanFeatureMapOutput) ToServiceWirelessLanFeatureMapOutputWithContext(ctx context.Context) ServiceWirelessLanFeatureMapOutput {
	return o
}

func (o ServiceWirelessLanFeatureMapOutput) MapIndex(k pulumi.StringInput) ServiceWirelessLanFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceWirelessLanFeature {
		return vs[0].(map[string]*ServiceWirelessLanFeature)[vs[1].(string)]
	}).(ServiceWirelessLanFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWirelessLanFeatureInput)(nil)).Elem(), &ServiceWirelessLanFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWirelessLanFeatureArrayInput)(nil)).Elem(), ServiceWirelessLanFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWirelessLanFeatureMapInput)(nil)).Elem(), ServiceWirelessLanFeatureMap{})
	pulumi.RegisterOutputType(ServiceWirelessLanFeatureOutput{})
	pulumi.RegisterOutputType(ServiceWirelessLanFeatureArrayOutput{})
	pulumi.RegisterOutputType(ServiceWirelessLanFeatureMapOutput{})
}
