// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a System Flexible Port Speed profile parcel.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewSystemFlexiblePortSpeedProfileParcel(ctx, "example", &sdwan.SystemFlexiblePortSpeedProfileParcelArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My Example"),
//				FeatureProfileId: pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				PortType:         pulumi.String("12 ports of 1/10GE + 3 ports 40GE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/systemFlexiblePortSpeedProfileParcel:SystemFlexiblePortSpeedProfileParcel example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type SystemFlexiblePortSpeedProfileParcel struct {
	pulumi.CustomResourceState

	// The description of the profile parcel
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the profile parcel
	Name pulumi.StringOutput `pulumi:"name"`
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType pulumi.StringPtrOutput `pulumi:"portType"`
	// Variable name
	PortTypeVariable pulumi.StringPtrOutput `pulumi:"portTypeVariable"`
	// The version of the profile parcel
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSystemFlexiblePortSpeedProfileParcel registers a new resource with the given unique name, arguments, and options.
func NewSystemFlexiblePortSpeedProfileParcel(ctx *pulumi.Context,
	name string, args *SystemFlexiblePortSpeedProfileParcelArgs, opts ...pulumi.ResourceOption) (*SystemFlexiblePortSpeedProfileParcel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemFlexiblePortSpeedProfileParcel
	err := ctx.RegisterResource("sdwan:index/systemFlexiblePortSpeedProfileParcel:SystemFlexiblePortSpeedProfileParcel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemFlexiblePortSpeedProfileParcel gets an existing SystemFlexiblePortSpeedProfileParcel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemFlexiblePortSpeedProfileParcel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemFlexiblePortSpeedProfileParcelState, opts ...pulumi.ResourceOption) (*SystemFlexiblePortSpeedProfileParcel, error) {
	var resource SystemFlexiblePortSpeedProfileParcel
	err := ctx.ReadResource("sdwan:index/systemFlexiblePortSpeedProfileParcel:SystemFlexiblePortSpeedProfileParcel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemFlexiblePortSpeedProfileParcel resources.
type systemFlexiblePortSpeedProfileParcelState struct {
	// The description of the profile parcel
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the profile parcel
	Name *string `pulumi:"name"`
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType *string `pulumi:"portType"`
	// Variable name
	PortTypeVariable *string `pulumi:"portTypeVariable"`
	// The version of the profile parcel
	Version *int `pulumi:"version"`
}

type SystemFlexiblePortSpeedProfileParcelState struct {
	// The description of the profile parcel
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the profile parcel
	Name pulumi.StringPtrInput
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType pulumi.StringPtrInput
	// Variable name
	PortTypeVariable pulumi.StringPtrInput
	// The version of the profile parcel
	Version pulumi.IntPtrInput
}

func (SystemFlexiblePortSpeedProfileParcelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFlexiblePortSpeedProfileParcelState)(nil)).Elem()
}

type systemFlexiblePortSpeedProfileParcelArgs struct {
	// The description of the profile parcel
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the profile parcel
	Name *string `pulumi:"name"`
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType *string `pulumi:"portType"`
	// Variable name
	PortTypeVariable *string `pulumi:"portTypeVariable"`
}

// The set of arguments for constructing a SystemFlexiblePortSpeedProfileParcel resource.
type SystemFlexiblePortSpeedProfileParcelArgs struct {
	// The description of the profile parcel
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the profile parcel
	Name pulumi.StringPtrInput
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType pulumi.StringPtrInput
	// Variable name
	PortTypeVariable pulumi.StringPtrInput
}

func (SystemFlexiblePortSpeedProfileParcelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFlexiblePortSpeedProfileParcelArgs)(nil)).Elem()
}

type SystemFlexiblePortSpeedProfileParcelInput interface {
	pulumi.Input

	ToSystemFlexiblePortSpeedProfileParcelOutput() SystemFlexiblePortSpeedProfileParcelOutput
	ToSystemFlexiblePortSpeedProfileParcelOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelOutput
}

func (*SystemFlexiblePortSpeedProfileParcel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFlexiblePortSpeedProfileParcel)(nil)).Elem()
}

func (i *SystemFlexiblePortSpeedProfileParcel) ToSystemFlexiblePortSpeedProfileParcelOutput() SystemFlexiblePortSpeedProfileParcelOutput {
	return i.ToSystemFlexiblePortSpeedProfileParcelOutputWithContext(context.Background())
}

func (i *SystemFlexiblePortSpeedProfileParcel) ToSystemFlexiblePortSpeedProfileParcelOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFlexiblePortSpeedProfileParcelOutput)
}

// SystemFlexiblePortSpeedProfileParcelArrayInput is an input type that accepts SystemFlexiblePortSpeedProfileParcelArray and SystemFlexiblePortSpeedProfileParcelArrayOutput values.
// You can construct a concrete instance of `SystemFlexiblePortSpeedProfileParcelArrayInput` via:
//
//	SystemFlexiblePortSpeedProfileParcelArray{ SystemFlexiblePortSpeedProfileParcelArgs{...} }
type SystemFlexiblePortSpeedProfileParcelArrayInput interface {
	pulumi.Input

	ToSystemFlexiblePortSpeedProfileParcelArrayOutput() SystemFlexiblePortSpeedProfileParcelArrayOutput
	ToSystemFlexiblePortSpeedProfileParcelArrayOutputWithContext(context.Context) SystemFlexiblePortSpeedProfileParcelArrayOutput
}

type SystemFlexiblePortSpeedProfileParcelArray []SystemFlexiblePortSpeedProfileParcelInput

func (SystemFlexiblePortSpeedProfileParcelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFlexiblePortSpeedProfileParcel)(nil)).Elem()
}

func (i SystemFlexiblePortSpeedProfileParcelArray) ToSystemFlexiblePortSpeedProfileParcelArrayOutput() SystemFlexiblePortSpeedProfileParcelArrayOutput {
	return i.ToSystemFlexiblePortSpeedProfileParcelArrayOutputWithContext(context.Background())
}

func (i SystemFlexiblePortSpeedProfileParcelArray) ToSystemFlexiblePortSpeedProfileParcelArrayOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFlexiblePortSpeedProfileParcelArrayOutput)
}

// SystemFlexiblePortSpeedProfileParcelMapInput is an input type that accepts SystemFlexiblePortSpeedProfileParcelMap and SystemFlexiblePortSpeedProfileParcelMapOutput values.
// You can construct a concrete instance of `SystemFlexiblePortSpeedProfileParcelMapInput` via:
//
//	SystemFlexiblePortSpeedProfileParcelMap{ "key": SystemFlexiblePortSpeedProfileParcelArgs{...} }
type SystemFlexiblePortSpeedProfileParcelMapInput interface {
	pulumi.Input

	ToSystemFlexiblePortSpeedProfileParcelMapOutput() SystemFlexiblePortSpeedProfileParcelMapOutput
	ToSystemFlexiblePortSpeedProfileParcelMapOutputWithContext(context.Context) SystemFlexiblePortSpeedProfileParcelMapOutput
}

type SystemFlexiblePortSpeedProfileParcelMap map[string]SystemFlexiblePortSpeedProfileParcelInput

func (SystemFlexiblePortSpeedProfileParcelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFlexiblePortSpeedProfileParcel)(nil)).Elem()
}

func (i SystemFlexiblePortSpeedProfileParcelMap) ToSystemFlexiblePortSpeedProfileParcelMapOutput() SystemFlexiblePortSpeedProfileParcelMapOutput {
	return i.ToSystemFlexiblePortSpeedProfileParcelMapOutputWithContext(context.Background())
}

func (i SystemFlexiblePortSpeedProfileParcelMap) ToSystemFlexiblePortSpeedProfileParcelMapOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFlexiblePortSpeedProfileParcelMapOutput)
}

type SystemFlexiblePortSpeedProfileParcelOutput struct{ *pulumi.OutputState }

func (SystemFlexiblePortSpeedProfileParcelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFlexiblePortSpeedProfileParcel)(nil)).Elem()
}

func (o SystemFlexiblePortSpeedProfileParcelOutput) ToSystemFlexiblePortSpeedProfileParcelOutput() SystemFlexiblePortSpeedProfileParcelOutput {
	return o
}

func (o SystemFlexiblePortSpeedProfileParcelOutput) ToSystemFlexiblePortSpeedProfileParcelOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelOutput {
	return o
}

// The description of the profile parcel
func (o SystemFlexiblePortSpeedProfileParcelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedProfileParcel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o SystemFlexiblePortSpeedProfileParcelOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedProfileParcel) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the profile parcel
func (o SystemFlexiblePortSpeedProfileParcelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedProfileParcel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
func (o SystemFlexiblePortSpeedProfileParcelOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedProfileParcel) pulumi.StringPtrOutput { return v.PortType }).(pulumi.StringPtrOutput)
}

// Variable name
func (o SystemFlexiblePortSpeedProfileParcelOutput) PortTypeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedProfileParcel) pulumi.StringPtrOutput { return v.PortTypeVariable }).(pulumi.StringPtrOutput)
}

// The version of the profile parcel
func (o SystemFlexiblePortSpeedProfileParcelOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedProfileParcel) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SystemFlexiblePortSpeedProfileParcelArrayOutput struct{ *pulumi.OutputState }

func (SystemFlexiblePortSpeedProfileParcelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFlexiblePortSpeedProfileParcel)(nil)).Elem()
}

func (o SystemFlexiblePortSpeedProfileParcelArrayOutput) ToSystemFlexiblePortSpeedProfileParcelArrayOutput() SystemFlexiblePortSpeedProfileParcelArrayOutput {
	return o
}

func (o SystemFlexiblePortSpeedProfileParcelArrayOutput) ToSystemFlexiblePortSpeedProfileParcelArrayOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelArrayOutput {
	return o
}

func (o SystemFlexiblePortSpeedProfileParcelArrayOutput) Index(i pulumi.IntInput) SystemFlexiblePortSpeedProfileParcelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemFlexiblePortSpeedProfileParcel {
		return vs[0].([]*SystemFlexiblePortSpeedProfileParcel)[vs[1].(int)]
	}).(SystemFlexiblePortSpeedProfileParcelOutput)
}

type SystemFlexiblePortSpeedProfileParcelMapOutput struct{ *pulumi.OutputState }

func (SystemFlexiblePortSpeedProfileParcelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFlexiblePortSpeedProfileParcel)(nil)).Elem()
}

func (o SystemFlexiblePortSpeedProfileParcelMapOutput) ToSystemFlexiblePortSpeedProfileParcelMapOutput() SystemFlexiblePortSpeedProfileParcelMapOutput {
	return o
}

func (o SystemFlexiblePortSpeedProfileParcelMapOutput) ToSystemFlexiblePortSpeedProfileParcelMapOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedProfileParcelMapOutput {
	return o
}

func (o SystemFlexiblePortSpeedProfileParcelMapOutput) MapIndex(k pulumi.StringInput) SystemFlexiblePortSpeedProfileParcelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemFlexiblePortSpeedProfileParcel {
		return vs[0].(map[string]*SystemFlexiblePortSpeedProfileParcel)[vs[1].(string)]
	}).(SystemFlexiblePortSpeedProfileParcelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFlexiblePortSpeedProfileParcelInput)(nil)).Elem(), &SystemFlexiblePortSpeedProfileParcel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFlexiblePortSpeedProfileParcelArrayInput)(nil)).Elem(), SystemFlexiblePortSpeedProfileParcelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFlexiblePortSpeedProfileParcelMapInput)(nil)).Elem(), SystemFlexiblePortSpeedProfileParcelMap{})
	pulumi.RegisterOutputType(SystemFlexiblePortSpeedProfileParcelOutput{})
	pulumi.RegisterOutputType(SystemFlexiblePortSpeedProfileParcelArrayOutput{})
	pulumi.RegisterOutputType(SystemFlexiblePortSpeedProfileParcelMapOutput{})
}
