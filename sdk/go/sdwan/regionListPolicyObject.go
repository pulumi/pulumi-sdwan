// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Region List Policy Object .
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/regionListPolicyObject:RegionListPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type RegionListPolicyObject struct {
	pulumi.CustomResourceState

	// List of entries
	Entries RegionListPolicyObjectEntryArrayOutput `pulumi:"entries"`
	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewRegionListPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewRegionListPolicyObject(ctx *pulumi.Context,
	name string, args *RegionListPolicyObjectArgs, opts ...pulumi.ResourceOption) (*RegionListPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegionListPolicyObject
	err := ctx.RegisterResource("sdwan:index/regionListPolicyObject:RegionListPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegionListPolicyObject gets an existing RegionListPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegionListPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegionListPolicyObjectState, opts ...pulumi.ResourceOption) (*RegionListPolicyObject, error) {
	var resource RegionListPolicyObject
	err := ctx.ReadResource("sdwan:index/regionListPolicyObject:RegionListPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegionListPolicyObject resources.
type regionListPolicyObjectState struct {
	// List of entries
	Entries []RegionListPolicyObjectEntry `pulumi:"entries"`
	// The name of the policy object
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type RegionListPolicyObjectState struct {
	// List of entries
	Entries RegionListPolicyObjectEntryArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (RegionListPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*regionListPolicyObjectState)(nil)).Elem()
}

type regionListPolicyObjectArgs struct {
	// List of entries
	Entries []RegionListPolicyObjectEntry `pulumi:"entries"`
	// The name of the policy object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RegionListPolicyObject resource.
type RegionListPolicyObjectArgs struct {
	// List of entries
	Entries RegionListPolicyObjectEntryArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
}

func (RegionListPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*regionListPolicyObjectArgs)(nil)).Elem()
}

type RegionListPolicyObjectInput interface {
	pulumi.Input

	ToRegionListPolicyObjectOutput() RegionListPolicyObjectOutput
	ToRegionListPolicyObjectOutputWithContext(ctx context.Context) RegionListPolicyObjectOutput
}

func (*RegionListPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionListPolicyObject)(nil)).Elem()
}

func (i *RegionListPolicyObject) ToRegionListPolicyObjectOutput() RegionListPolicyObjectOutput {
	return i.ToRegionListPolicyObjectOutputWithContext(context.Background())
}

func (i *RegionListPolicyObject) ToRegionListPolicyObjectOutputWithContext(ctx context.Context) RegionListPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionListPolicyObjectOutput)
}

// RegionListPolicyObjectArrayInput is an input type that accepts RegionListPolicyObjectArray and RegionListPolicyObjectArrayOutput values.
// You can construct a concrete instance of `RegionListPolicyObjectArrayInput` via:
//
//	RegionListPolicyObjectArray{ RegionListPolicyObjectArgs{...} }
type RegionListPolicyObjectArrayInput interface {
	pulumi.Input

	ToRegionListPolicyObjectArrayOutput() RegionListPolicyObjectArrayOutput
	ToRegionListPolicyObjectArrayOutputWithContext(context.Context) RegionListPolicyObjectArrayOutput
}

type RegionListPolicyObjectArray []RegionListPolicyObjectInput

func (RegionListPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionListPolicyObject)(nil)).Elem()
}

func (i RegionListPolicyObjectArray) ToRegionListPolicyObjectArrayOutput() RegionListPolicyObjectArrayOutput {
	return i.ToRegionListPolicyObjectArrayOutputWithContext(context.Background())
}

func (i RegionListPolicyObjectArray) ToRegionListPolicyObjectArrayOutputWithContext(ctx context.Context) RegionListPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionListPolicyObjectArrayOutput)
}

// RegionListPolicyObjectMapInput is an input type that accepts RegionListPolicyObjectMap and RegionListPolicyObjectMapOutput values.
// You can construct a concrete instance of `RegionListPolicyObjectMapInput` via:
//
//	RegionListPolicyObjectMap{ "key": RegionListPolicyObjectArgs{...} }
type RegionListPolicyObjectMapInput interface {
	pulumi.Input

	ToRegionListPolicyObjectMapOutput() RegionListPolicyObjectMapOutput
	ToRegionListPolicyObjectMapOutputWithContext(context.Context) RegionListPolicyObjectMapOutput
}

type RegionListPolicyObjectMap map[string]RegionListPolicyObjectInput

func (RegionListPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionListPolicyObject)(nil)).Elem()
}

func (i RegionListPolicyObjectMap) ToRegionListPolicyObjectMapOutput() RegionListPolicyObjectMapOutput {
	return i.ToRegionListPolicyObjectMapOutputWithContext(context.Background())
}

func (i RegionListPolicyObjectMap) ToRegionListPolicyObjectMapOutputWithContext(ctx context.Context) RegionListPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionListPolicyObjectMapOutput)
}

type RegionListPolicyObjectOutput struct{ *pulumi.OutputState }

func (RegionListPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegionListPolicyObject)(nil)).Elem()
}

func (o RegionListPolicyObjectOutput) ToRegionListPolicyObjectOutput() RegionListPolicyObjectOutput {
	return o
}

func (o RegionListPolicyObjectOutput) ToRegionListPolicyObjectOutputWithContext(ctx context.Context) RegionListPolicyObjectOutput {
	return o
}

// List of entries
func (o RegionListPolicyObjectOutput) Entries() RegionListPolicyObjectEntryArrayOutput {
	return o.ApplyT(func(v *RegionListPolicyObject) RegionListPolicyObjectEntryArrayOutput { return v.Entries }).(RegionListPolicyObjectEntryArrayOutput)
}

// The name of the policy object
func (o RegionListPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegionListPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o RegionListPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *RegionListPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type RegionListPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (RegionListPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegionListPolicyObject)(nil)).Elem()
}

func (o RegionListPolicyObjectArrayOutput) ToRegionListPolicyObjectArrayOutput() RegionListPolicyObjectArrayOutput {
	return o
}

func (o RegionListPolicyObjectArrayOutput) ToRegionListPolicyObjectArrayOutputWithContext(ctx context.Context) RegionListPolicyObjectArrayOutput {
	return o
}

func (o RegionListPolicyObjectArrayOutput) Index(i pulumi.IntInput) RegionListPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegionListPolicyObject {
		return vs[0].([]*RegionListPolicyObject)[vs[1].(int)]
	}).(RegionListPolicyObjectOutput)
}

type RegionListPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (RegionListPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegionListPolicyObject)(nil)).Elem()
}

func (o RegionListPolicyObjectMapOutput) ToRegionListPolicyObjectMapOutput() RegionListPolicyObjectMapOutput {
	return o
}

func (o RegionListPolicyObjectMapOutput) ToRegionListPolicyObjectMapOutputWithContext(ctx context.Context) RegionListPolicyObjectMapOutput {
	return o
}

func (o RegionListPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) RegionListPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegionListPolicyObject {
		return vs[0].(map[string]*RegionListPolicyObject)[vs[1].(string)]
	}).(RegionListPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegionListPolicyObjectInput)(nil)).Elem(), &RegionListPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionListPolicyObjectArrayInput)(nil)).Elem(), RegionListPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionListPolicyObjectMapInput)(nil)).Elem(), RegionListPolicyObjectMap{})
	pulumi.RegisterOutputType(RegionListPolicyObjectOutput{})
	pulumi.RegisterOutputType(RegionListPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(RegionListPolicyObjectMapOutput{})
}
