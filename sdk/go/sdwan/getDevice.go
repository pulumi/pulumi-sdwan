// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Device .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.GetDevice(ctx, &sdwan.GetDeviceArgs{
//				SerialNumber: pulumi.StringRef("3FFEFB37892E415FAF34A95D2328EC4C"),
//				Name:         pulumi.StringRef("Controller01"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetDevice(ctx *pulumi.Context, args *GetDeviceArgs, opts ...pulumi.InvokeOption) (*GetDeviceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDeviceResult
	err := ctx.Invoke("sdwan:index/getDevice:getDevice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDevice.
type GetDeviceArgs struct {
	// The hostname of a device
	Name *string `pulumi:"name"`
	// Serial number for device. Could be board or virtual identifier
	SerialNumber *string `pulumi:"serialNumber"`
}

// A collection of values returned by getDevice.
type GetDeviceResult struct {
	// List of returned devices
	Devices []GetDeviceDevice `pulumi:"devices"`
	// The id of the object
	Id string `pulumi:"id"`
	// The hostname of a device
	Name *string `pulumi:"name"`
	// Serial number for device. Could be board or virtual identifier
	SerialNumber *string `pulumi:"serialNumber"`
}

func GetDeviceOutput(ctx *pulumi.Context, args GetDeviceOutputArgs, opts ...pulumi.InvokeOption) GetDeviceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetDeviceResult, error) {
			args := v.(GetDeviceArgs)
			r, err := GetDevice(ctx, &args, opts...)
			var s GetDeviceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetDeviceResultOutput)
}

// A collection of arguments for invoking getDevice.
type GetDeviceOutputArgs struct {
	// The hostname of a device
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Serial number for device. Could be board or virtual identifier
	SerialNumber pulumi.StringPtrInput `pulumi:"serialNumber"`
}

func (GetDeviceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceArgs)(nil)).Elem()
}

// A collection of values returned by getDevice.
type GetDeviceResultOutput struct{ *pulumi.OutputState }

func (GetDeviceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeviceResult)(nil)).Elem()
}

func (o GetDeviceResultOutput) ToGetDeviceResultOutput() GetDeviceResultOutput {
	return o
}

func (o GetDeviceResultOutput) ToGetDeviceResultOutputWithContext(ctx context.Context) GetDeviceResultOutput {
	return o
}

// List of returned devices
func (o GetDeviceResultOutput) Devices() GetDeviceDeviceArrayOutput {
	return o.ApplyT(func(v GetDeviceResult) []GetDeviceDevice { return v.Devices }).(GetDeviceDeviceArrayOutput)
}

// The id of the object
func (o GetDeviceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeviceResult) string { return v.Id }).(pulumi.StringOutput)
}

// The hostname of a device
func (o GetDeviceResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeviceResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Serial number for device. Could be board or virtual identifier
func (o GetDeviceResultOutput) SerialNumber() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetDeviceResult) *string { return v.SerialNumber }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDeviceResultOutput{})
}
