// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Policy Group .
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewPolicyGroup(ctx, "example", &sdwan.PolicyGroupArgs{
//				Name:        pulumi.String("PG_1"),
//				Description: pulumi.String("My policy group 1"),
//				Solution:    pulumi.String("sdwan"),
//				FeatureProfileIds: pulumi.StringArray{
//					pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				},
//				Devices: sdwan.PolicyGroupDeviceArray{
//					&sdwan.PolicyGroupDeviceArgs{
//						Id: pulumi.String("C8K-40C0CCFD-9EA8-2B2E-E73B-32C5924EC79B"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/policyGroup:PolicyGroup example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type PolicyGroup struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringOutput `pulumi:"description"`
	// List of devices
	Devices PolicyGroupDeviceArrayOutput `pulumi:"devices"`
	// List of feature profile IDs
	FeatureProfileIds pulumi.StringArrayOutput `pulumi:"featureProfileIds"`
	// The name of the policy group
	Name pulumi.StringOutput `pulumi:"name"`
	// List of all associated policy versions
	PolicyVersions pulumi.StringArrayOutput `pulumi:"policyVersions"`
	// Type of solution - Choices: `sdwan`
	Solution pulumi.StringOutput `pulumi:"solution"`
}

// NewPolicyGroup registers a new resource with the given unique name, arguments, and options.
func NewPolicyGroup(ctx *pulumi.Context,
	name string, args *PolicyGroupArgs, opts ...pulumi.ResourceOption) (*PolicyGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Solution == nil {
		return nil, errors.New("invalid value for required argument 'Solution'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyGroup
	err := ctx.RegisterResource("sdwan:index/policyGroup:PolicyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyGroup gets an existing PolicyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyGroupState, opts ...pulumi.ResourceOption) (*PolicyGroup, error) {
	var resource PolicyGroup
	err := ctx.ReadResource("sdwan:index/policyGroup:PolicyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyGroup resources.
type policyGroupState struct {
	// Description
	Description *string `pulumi:"description"`
	// List of devices
	Devices []PolicyGroupDevice `pulumi:"devices"`
	// List of feature profile IDs
	FeatureProfileIds []string `pulumi:"featureProfileIds"`
	// The name of the policy group
	Name *string `pulumi:"name"`
	// List of all associated policy versions
	PolicyVersions []string `pulumi:"policyVersions"`
	// Type of solution - Choices: `sdwan`
	Solution *string `pulumi:"solution"`
}

type PolicyGroupState struct {
	// Description
	Description pulumi.StringPtrInput
	// List of devices
	Devices PolicyGroupDeviceArrayInput
	// List of feature profile IDs
	FeatureProfileIds pulumi.StringArrayInput
	// The name of the policy group
	Name pulumi.StringPtrInput
	// List of all associated policy versions
	PolicyVersions pulumi.StringArrayInput
	// Type of solution - Choices: `sdwan`
	Solution pulumi.StringPtrInput
}

func (PolicyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGroupState)(nil)).Elem()
}

type policyGroupArgs struct {
	// Description
	Description string `pulumi:"description"`
	// List of devices
	Devices []PolicyGroupDevice `pulumi:"devices"`
	// List of feature profile IDs
	FeatureProfileIds []string `pulumi:"featureProfileIds"`
	// The name of the policy group
	Name *string `pulumi:"name"`
	// List of all associated policy versions
	PolicyVersions []string `pulumi:"policyVersions"`
	// Type of solution - Choices: `sdwan`
	Solution string `pulumi:"solution"`
}

// The set of arguments for constructing a PolicyGroup resource.
type PolicyGroupArgs struct {
	// Description
	Description pulumi.StringInput
	// List of devices
	Devices PolicyGroupDeviceArrayInput
	// List of feature profile IDs
	FeatureProfileIds pulumi.StringArrayInput
	// The name of the policy group
	Name pulumi.StringPtrInput
	// List of all associated policy versions
	PolicyVersions pulumi.StringArrayInput
	// Type of solution - Choices: `sdwan`
	Solution pulumi.StringInput
}

func (PolicyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyGroupArgs)(nil)).Elem()
}

type PolicyGroupInput interface {
	pulumi.Input

	ToPolicyGroupOutput() PolicyGroupOutput
	ToPolicyGroupOutputWithContext(ctx context.Context) PolicyGroupOutput
}

func (*PolicyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyGroup)(nil)).Elem()
}

func (i *PolicyGroup) ToPolicyGroupOutput() PolicyGroupOutput {
	return i.ToPolicyGroupOutputWithContext(context.Background())
}

func (i *PolicyGroup) ToPolicyGroupOutputWithContext(ctx context.Context) PolicyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGroupOutput)
}

// PolicyGroupArrayInput is an input type that accepts PolicyGroupArray and PolicyGroupArrayOutput values.
// You can construct a concrete instance of `PolicyGroupArrayInput` via:
//
//	PolicyGroupArray{ PolicyGroupArgs{...} }
type PolicyGroupArrayInput interface {
	pulumi.Input

	ToPolicyGroupArrayOutput() PolicyGroupArrayOutput
	ToPolicyGroupArrayOutputWithContext(context.Context) PolicyGroupArrayOutput
}

type PolicyGroupArray []PolicyGroupInput

func (PolicyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyGroup)(nil)).Elem()
}

func (i PolicyGroupArray) ToPolicyGroupArrayOutput() PolicyGroupArrayOutput {
	return i.ToPolicyGroupArrayOutputWithContext(context.Background())
}

func (i PolicyGroupArray) ToPolicyGroupArrayOutputWithContext(ctx context.Context) PolicyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGroupArrayOutput)
}

// PolicyGroupMapInput is an input type that accepts PolicyGroupMap and PolicyGroupMapOutput values.
// You can construct a concrete instance of `PolicyGroupMapInput` via:
//
//	PolicyGroupMap{ "key": PolicyGroupArgs{...} }
type PolicyGroupMapInput interface {
	pulumi.Input

	ToPolicyGroupMapOutput() PolicyGroupMapOutput
	ToPolicyGroupMapOutputWithContext(context.Context) PolicyGroupMapOutput
}

type PolicyGroupMap map[string]PolicyGroupInput

func (PolicyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyGroup)(nil)).Elem()
}

func (i PolicyGroupMap) ToPolicyGroupMapOutput() PolicyGroupMapOutput {
	return i.ToPolicyGroupMapOutputWithContext(context.Background())
}

func (i PolicyGroupMap) ToPolicyGroupMapOutputWithContext(ctx context.Context) PolicyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyGroupMapOutput)
}

type PolicyGroupOutput struct{ *pulumi.OutputState }

func (PolicyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyGroup)(nil)).Elem()
}

func (o PolicyGroupOutput) ToPolicyGroupOutput() PolicyGroupOutput {
	return o
}

func (o PolicyGroupOutput) ToPolicyGroupOutputWithContext(ctx context.Context) PolicyGroupOutput {
	return o
}

// Description
func (o PolicyGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of devices
func (o PolicyGroupOutput) Devices() PolicyGroupDeviceArrayOutput {
	return o.ApplyT(func(v *PolicyGroup) PolicyGroupDeviceArrayOutput { return v.Devices }).(PolicyGroupDeviceArrayOutput)
}

// List of feature profile IDs
func (o PolicyGroupOutput) FeatureProfileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringArrayOutput { return v.FeatureProfileIds }).(pulumi.StringArrayOutput)
}

// The name of the policy group
func (o PolicyGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of all associated policy versions
func (o PolicyGroupOutput) PolicyVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringArrayOutput { return v.PolicyVersions }).(pulumi.StringArrayOutput)
}

// Type of solution - Choices: `sdwan`
func (o PolicyGroupOutput) Solution() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyGroup) pulumi.StringOutput { return v.Solution }).(pulumi.StringOutput)
}

type PolicyGroupArrayOutput struct{ *pulumi.OutputState }

func (PolicyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyGroup)(nil)).Elem()
}

func (o PolicyGroupArrayOutput) ToPolicyGroupArrayOutput() PolicyGroupArrayOutput {
	return o
}

func (o PolicyGroupArrayOutput) ToPolicyGroupArrayOutputWithContext(ctx context.Context) PolicyGroupArrayOutput {
	return o
}

func (o PolicyGroupArrayOutput) Index(i pulumi.IntInput) PolicyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyGroup {
		return vs[0].([]*PolicyGroup)[vs[1].(int)]
	}).(PolicyGroupOutput)
}

type PolicyGroupMapOutput struct{ *pulumi.OutputState }

func (PolicyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyGroup)(nil)).Elem()
}

func (o PolicyGroupMapOutput) ToPolicyGroupMapOutput() PolicyGroupMapOutput {
	return o
}

func (o PolicyGroupMapOutput) ToPolicyGroupMapOutputWithContext(ctx context.Context) PolicyGroupMapOutput {
	return o
}

func (o PolicyGroupMapOutput) MapIndex(k pulumi.StringInput) PolicyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyGroup {
		return vs[0].(map[string]*PolicyGroup)[vs[1].(string)]
	}).(PolicyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGroupInput)(nil)).Elem(), &PolicyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGroupArrayInput)(nil)).Elem(), PolicyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyGroupMapInput)(nil)).Elem(), PolicyGroupMap{})
	pulumi.RegisterOutputType(PolicyGroupOutput{})
	pulumi.RegisterOutputType(PolicyGroupArrayOutput{})
	pulumi.RegisterOutputType(PolicyGroupMapOutput{})
}
