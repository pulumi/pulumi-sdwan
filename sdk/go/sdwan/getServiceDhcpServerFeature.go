// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Service DHCP Server Feature.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupServiceDhcpServerFeature(ctx, &sdwan.LookupServiceDhcpServerFeatureArgs{
//				Id:               "f6b2c44c-693c-4763-b010-895aa3d236bd",
//				FeatureProfileId: "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupServiceDhcpServerFeature(ctx *pulumi.Context, args *LookupServiceDhcpServerFeatureArgs, opts ...pulumi.InvokeOption) (*LookupServiceDhcpServerFeatureResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceDhcpServerFeatureResult
	err := ctx.Invoke("sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServiceDhcpServerFeature.
type LookupServiceDhcpServerFeatureArgs struct {
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the Feature
	Id string `pulumi:"id"`
}

// A collection of values returned by getServiceDhcpServerFeature.
type LookupServiceDhcpServerFeatureResult struct {
	// Set IP address of default gateway
	DefaultGateway string `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable string `pulumi:"defaultGatewayVariable"`
	// The description of the Feature
	Description string `pulumi:"description"`
	// Configure one or more DNS server IP addresses
	DnsServers []string `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable string `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName string `pulumi:"domainName"`
	// Variable name
	DomainNameVariable string `pulumi:"domainNameVariable"`
	// Variable name
	ExcludeVariable string `pulumi:"excludeVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	Excludes []string `pulumi:"excludes"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the Feature
	Id string `pulumi:"id"`
	// Set MTU on interface to DHCP client
	InterfaceMtu int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable string `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid
	LeaseTime int `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable string `pulumi:"leaseTimeVariable"`
	// The name of the Feature
	Name string `pulumi:"name"`
	// Network Address
	NetworkAddress string `pulumi:"networkAddress"`
	// Variable name
	NetworkAddressVariable string `pulumi:"networkAddressVariable"`
	// Configure Options Code
	OptionCodes []GetServiceDhcpServerFeatureOptionCode `pulumi:"optionCodes"`
	// Configure static IP addresses
	StaticLeases []GetServiceDhcpServerFeatureStaticLease `pulumi:"staticLeases"`
	// Subnet Mask
	SubnetMask string `pulumi:"subnetMask"`
	// Variable name
	SubnetMaskVariable string `pulumi:"subnetMaskVariable"`
	// Configure TFTP server IP addresses
	TftpServers []string `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable string `pulumi:"tftpServersVariable"`
	// The version of the Feature
	Version int `pulumi:"version"`
}

func LookupServiceDhcpServerFeatureOutput(ctx *pulumi.Context, args LookupServiceDhcpServerFeatureOutputArgs, opts ...pulumi.InvokeOption) LookupServiceDhcpServerFeatureResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceDhcpServerFeatureResultOutput, error) {
			args := v.(LookupServiceDhcpServerFeatureArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupServiceDhcpServerFeatureResult
			secret, err := ctx.InvokePackageRaw("sdwan:index/getServiceDhcpServerFeature:getServiceDhcpServerFeature", args, &rv, "", opts...)
			if err != nil {
				return LookupServiceDhcpServerFeatureResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupServiceDhcpServerFeatureResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupServiceDhcpServerFeatureResultOutput), nil
			}
			return output, nil
		}).(LookupServiceDhcpServerFeatureResultOutput)
}

// A collection of arguments for invoking getServiceDhcpServerFeature.
type LookupServiceDhcpServerFeatureOutputArgs struct {
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput `pulumi:"featureProfileId"`
	// The id of the Feature
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupServiceDhcpServerFeatureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceDhcpServerFeatureArgs)(nil)).Elem()
}

// A collection of values returned by getServiceDhcpServerFeature.
type LookupServiceDhcpServerFeatureResultOutput struct{ *pulumi.OutputState }

func (LookupServiceDhcpServerFeatureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceDhcpServerFeatureResult)(nil)).Elem()
}

func (o LookupServiceDhcpServerFeatureResultOutput) ToLookupServiceDhcpServerFeatureResultOutput() LookupServiceDhcpServerFeatureResultOutput {
	return o
}

func (o LookupServiceDhcpServerFeatureResultOutput) ToLookupServiceDhcpServerFeatureResultOutputWithContext(ctx context.Context) LookupServiceDhcpServerFeatureResultOutput {
	return o
}

// Set IP address of default gateway
func (o LookupServiceDhcpServerFeatureResultOutput) DefaultGateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.DefaultGateway }).(pulumi.StringOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) DefaultGatewayVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.DefaultGatewayVariable }).(pulumi.StringOutput)
}

// The description of the Feature
func (o LookupServiceDhcpServerFeatureResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.Description }).(pulumi.StringOutput)
}

// Configure one or more DNS server IP addresses
func (o LookupServiceDhcpServerFeatureResultOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) DnsServersVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.DnsServersVariable }).(pulumi.StringOutput)
}

// Set domain name client uses to resolve hostnames
func (o LookupServiceDhcpServerFeatureResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) DomainNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.DomainNameVariable }).(pulumi.StringOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) ExcludeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.ExcludeVariable }).(pulumi.StringOutput)
}

// Configure IPv4 address to exclude from DHCP address pool
func (o LookupServiceDhcpServerFeatureResultOutput) Excludes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) []string { return v.Excludes }).(pulumi.StringArrayOutput)
}

// Feature Profile ID
func (o LookupServiceDhcpServerFeatureResultOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The id of the Feature
func (o LookupServiceDhcpServerFeatureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set MTU on interface to DHCP client
func (o LookupServiceDhcpServerFeatureResultOutput) InterfaceMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) int { return v.InterfaceMtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) InterfaceMtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.InterfaceMtuVariable }).(pulumi.StringOutput)
}

// Configure how long a DHCP-assigned IP address is valid
func (o LookupServiceDhcpServerFeatureResultOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) int { return v.LeaseTime }).(pulumi.IntOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) LeaseTimeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.LeaseTimeVariable }).(pulumi.StringOutput)
}

// The name of the Feature
func (o LookupServiceDhcpServerFeatureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network Address
func (o LookupServiceDhcpServerFeatureResultOutput) NetworkAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.NetworkAddress }).(pulumi.StringOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) NetworkAddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.NetworkAddressVariable }).(pulumi.StringOutput)
}

// Configure Options Code
func (o LookupServiceDhcpServerFeatureResultOutput) OptionCodes() GetServiceDhcpServerFeatureOptionCodeArrayOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) []GetServiceDhcpServerFeatureOptionCode {
		return v.OptionCodes
	}).(GetServiceDhcpServerFeatureOptionCodeArrayOutput)
}

// Configure static IP addresses
func (o LookupServiceDhcpServerFeatureResultOutput) StaticLeases() GetServiceDhcpServerFeatureStaticLeaseArrayOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) []GetServiceDhcpServerFeatureStaticLease {
		return v.StaticLeases
	}).(GetServiceDhcpServerFeatureStaticLeaseArrayOutput)
}

// Subnet Mask
func (o LookupServiceDhcpServerFeatureResultOutput) SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.SubnetMask }).(pulumi.StringOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) SubnetMaskVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.SubnetMaskVariable }).(pulumi.StringOutput)
}

// Configure TFTP server IP addresses
func (o LookupServiceDhcpServerFeatureResultOutput) TftpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) []string { return v.TftpServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o LookupServiceDhcpServerFeatureResultOutput) TftpServersVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) string { return v.TftpServersVariable }).(pulumi.StringOutput)
}

// The version of the Feature
func (o LookupServiceDhcpServerFeatureResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServiceDhcpServerFeatureResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceDhcpServerFeatureResultOutput{})
}
