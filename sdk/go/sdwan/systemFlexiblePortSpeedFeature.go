// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a System Flexible Port Speed Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewSystemFlexiblePortSpeedFeature(ctx, "example", &sdwan.SystemFlexiblePortSpeedFeatureArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My Example"),
//				FeatureProfileId: pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				PortType:         pulumi.String("12 ports of 1/10GE + 3 ports 40GE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Expected import identifier with the format: "system_flexible_port_speed_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/systemFlexiblePortSpeedFeature:SystemFlexiblePortSpeedFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type SystemFlexiblePortSpeedFeature struct {
	pulumi.CustomResourceState

	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType pulumi.StringPtrOutput `pulumi:"portType"`
	// Variable name
	PortTypeVariable pulumi.StringPtrOutput `pulumi:"portTypeVariable"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSystemFlexiblePortSpeedFeature registers a new resource with the given unique name, arguments, and options.
func NewSystemFlexiblePortSpeedFeature(ctx *pulumi.Context,
	name string, args *SystemFlexiblePortSpeedFeatureArgs, opts ...pulumi.ResourceOption) (*SystemFlexiblePortSpeedFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemFlexiblePortSpeedFeature
	err := ctx.RegisterResource("sdwan:index/systemFlexiblePortSpeedFeature:SystemFlexiblePortSpeedFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemFlexiblePortSpeedFeature gets an existing SystemFlexiblePortSpeedFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemFlexiblePortSpeedFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemFlexiblePortSpeedFeatureState, opts ...pulumi.ResourceOption) (*SystemFlexiblePortSpeedFeature, error) {
	var resource SystemFlexiblePortSpeedFeature
	err := ctx.ReadResource("sdwan:index/systemFlexiblePortSpeedFeature:SystemFlexiblePortSpeedFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemFlexiblePortSpeedFeature resources.
type systemFlexiblePortSpeedFeatureState struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType *string `pulumi:"portType"`
	// Variable name
	PortTypeVariable *string `pulumi:"portTypeVariable"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type SystemFlexiblePortSpeedFeatureState struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType pulumi.StringPtrInput
	// Variable name
	PortTypeVariable pulumi.StringPtrInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (SystemFlexiblePortSpeedFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFlexiblePortSpeedFeatureState)(nil)).Elem()
}

type systemFlexiblePortSpeedFeatureArgs struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType *string `pulumi:"portType"`
	// Variable name
	PortTypeVariable *string `pulumi:"portTypeVariable"`
}

// The set of arguments for constructing a SystemFlexiblePortSpeedFeature resource.
type SystemFlexiblePortSpeedFeatureArgs struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
	// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
	// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
	PortType pulumi.StringPtrInput
	// Variable name
	PortTypeVariable pulumi.StringPtrInput
}

func (SystemFlexiblePortSpeedFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemFlexiblePortSpeedFeatureArgs)(nil)).Elem()
}

type SystemFlexiblePortSpeedFeatureInput interface {
	pulumi.Input

	ToSystemFlexiblePortSpeedFeatureOutput() SystemFlexiblePortSpeedFeatureOutput
	ToSystemFlexiblePortSpeedFeatureOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureOutput
}

func (*SystemFlexiblePortSpeedFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFlexiblePortSpeedFeature)(nil)).Elem()
}

func (i *SystemFlexiblePortSpeedFeature) ToSystemFlexiblePortSpeedFeatureOutput() SystemFlexiblePortSpeedFeatureOutput {
	return i.ToSystemFlexiblePortSpeedFeatureOutputWithContext(context.Background())
}

func (i *SystemFlexiblePortSpeedFeature) ToSystemFlexiblePortSpeedFeatureOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFlexiblePortSpeedFeatureOutput)
}

// SystemFlexiblePortSpeedFeatureArrayInput is an input type that accepts SystemFlexiblePortSpeedFeatureArray and SystemFlexiblePortSpeedFeatureArrayOutput values.
// You can construct a concrete instance of `SystemFlexiblePortSpeedFeatureArrayInput` via:
//
//	SystemFlexiblePortSpeedFeatureArray{ SystemFlexiblePortSpeedFeatureArgs{...} }
type SystemFlexiblePortSpeedFeatureArrayInput interface {
	pulumi.Input

	ToSystemFlexiblePortSpeedFeatureArrayOutput() SystemFlexiblePortSpeedFeatureArrayOutput
	ToSystemFlexiblePortSpeedFeatureArrayOutputWithContext(context.Context) SystemFlexiblePortSpeedFeatureArrayOutput
}

type SystemFlexiblePortSpeedFeatureArray []SystemFlexiblePortSpeedFeatureInput

func (SystemFlexiblePortSpeedFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFlexiblePortSpeedFeature)(nil)).Elem()
}

func (i SystemFlexiblePortSpeedFeatureArray) ToSystemFlexiblePortSpeedFeatureArrayOutput() SystemFlexiblePortSpeedFeatureArrayOutput {
	return i.ToSystemFlexiblePortSpeedFeatureArrayOutputWithContext(context.Background())
}

func (i SystemFlexiblePortSpeedFeatureArray) ToSystemFlexiblePortSpeedFeatureArrayOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFlexiblePortSpeedFeatureArrayOutput)
}

// SystemFlexiblePortSpeedFeatureMapInput is an input type that accepts SystemFlexiblePortSpeedFeatureMap and SystemFlexiblePortSpeedFeatureMapOutput values.
// You can construct a concrete instance of `SystemFlexiblePortSpeedFeatureMapInput` via:
//
//	SystemFlexiblePortSpeedFeatureMap{ "key": SystemFlexiblePortSpeedFeatureArgs{...} }
type SystemFlexiblePortSpeedFeatureMapInput interface {
	pulumi.Input

	ToSystemFlexiblePortSpeedFeatureMapOutput() SystemFlexiblePortSpeedFeatureMapOutput
	ToSystemFlexiblePortSpeedFeatureMapOutputWithContext(context.Context) SystemFlexiblePortSpeedFeatureMapOutput
}

type SystemFlexiblePortSpeedFeatureMap map[string]SystemFlexiblePortSpeedFeatureInput

func (SystemFlexiblePortSpeedFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFlexiblePortSpeedFeature)(nil)).Elem()
}

func (i SystemFlexiblePortSpeedFeatureMap) ToSystemFlexiblePortSpeedFeatureMapOutput() SystemFlexiblePortSpeedFeatureMapOutput {
	return i.ToSystemFlexiblePortSpeedFeatureMapOutputWithContext(context.Background())
}

func (i SystemFlexiblePortSpeedFeatureMap) ToSystemFlexiblePortSpeedFeatureMapOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemFlexiblePortSpeedFeatureMapOutput)
}

type SystemFlexiblePortSpeedFeatureOutput struct{ *pulumi.OutputState }

func (SystemFlexiblePortSpeedFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemFlexiblePortSpeedFeature)(nil)).Elem()
}

func (o SystemFlexiblePortSpeedFeatureOutput) ToSystemFlexiblePortSpeedFeatureOutput() SystemFlexiblePortSpeedFeatureOutput {
	return o
}

func (o SystemFlexiblePortSpeedFeatureOutput) ToSystemFlexiblePortSpeedFeatureOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureOutput {
	return o
}

// The description of the Feature
func (o SystemFlexiblePortSpeedFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o SystemFlexiblePortSpeedFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o SystemFlexiblePortSpeedFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// port Type - Choices: `12 ports of 1/10GE + 3 ports 40GE`, `8 ports of 1/10GE + 4 ports of 40GE`, `2 ports of 100 GE`,
// `12 ports of 1/10GE + 1 port of 100GE`, `8 ports of 1/10GE + 1 port of 40GE + 1 port of 100GE`, `3 ports of 40GE + 1port
// of 100GE` - Default value: `12 ports of 1/10GE + 3 ports 40GE`
func (o SystemFlexiblePortSpeedFeatureOutput) PortType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedFeature) pulumi.StringPtrOutput { return v.PortType }).(pulumi.StringPtrOutput)
}

// Variable name
func (o SystemFlexiblePortSpeedFeatureOutput) PortTypeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedFeature) pulumi.StringPtrOutput { return v.PortTypeVariable }).(pulumi.StringPtrOutput)
}

// The version of the Feature
func (o SystemFlexiblePortSpeedFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemFlexiblePortSpeedFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SystemFlexiblePortSpeedFeatureArrayOutput struct{ *pulumi.OutputState }

func (SystemFlexiblePortSpeedFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemFlexiblePortSpeedFeature)(nil)).Elem()
}

func (o SystemFlexiblePortSpeedFeatureArrayOutput) ToSystemFlexiblePortSpeedFeatureArrayOutput() SystemFlexiblePortSpeedFeatureArrayOutput {
	return o
}

func (o SystemFlexiblePortSpeedFeatureArrayOutput) ToSystemFlexiblePortSpeedFeatureArrayOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureArrayOutput {
	return o
}

func (o SystemFlexiblePortSpeedFeatureArrayOutput) Index(i pulumi.IntInput) SystemFlexiblePortSpeedFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemFlexiblePortSpeedFeature {
		return vs[0].([]*SystemFlexiblePortSpeedFeature)[vs[1].(int)]
	}).(SystemFlexiblePortSpeedFeatureOutput)
}

type SystemFlexiblePortSpeedFeatureMapOutput struct{ *pulumi.OutputState }

func (SystemFlexiblePortSpeedFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemFlexiblePortSpeedFeature)(nil)).Elem()
}

func (o SystemFlexiblePortSpeedFeatureMapOutput) ToSystemFlexiblePortSpeedFeatureMapOutput() SystemFlexiblePortSpeedFeatureMapOutput {
	return o
}

func (o SystemFlexiblePortSpeedFeatureMapOutput) ToSystemFlexiblePortSpeedFeatureMapOutputWithContext(ctx context.Context) SystemFlexiblePortSpeedFeatureMapOutput {
	return o
}

func (o SystemFlexiblePortSpeedFeatureMapOutput) MapIndex(k pulumi.StringInput) SystemFlexiblePortSpeedFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemFlexiblePortSpeedFeature {
		return vs[0].(map[string]*SystemFlexiblePortSpeedFeature)[vs[1].(string)]
	}).(SystemFlexiblePortSpeedFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFlexiblePortSpeedFeatureInput)(nil)).Elem(), &SystemFlexiblePortSpeedFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFlexiblePortSpeedFeatureArrayInput)(nil)).Elem(), SystemFlexiblePortSpeedFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemFlexiblePortSpeedFeatureMapInput)(nil)).Elem(), SystemFlexiblePortSpeedFeatureMap{})
	pulumi.RegisterOutputType(SystemFlexiblePortSpeedFeatureOutput{})
	pulumi.RegisterOutputType(SystemFlexiblePortSpeedFeatureArrayOutput{})
	pulumi.RegisterOutputType(SystemFlexiblePortSpeedFeatureMapOutput{})
}
