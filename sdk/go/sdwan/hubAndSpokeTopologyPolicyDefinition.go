// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Hub and Spoke Topology Policy Definition .
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/hubAndSpokeTopologyPolicyDefinition:HubAndSpokeTopologyPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type HubAndSpokeTopologyPolicyDefinition struct {
	pulumi.CustomResourceState

	// The description of the policy definition
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the policy definition
	Name pulumi.StringOutput `pulumi:"name"`
	// List of topologies
	Topologies HubAndSpokeTopologyPolicyDefinitionTopologyArrayOutput `pulumi:"topologies"`
	// Type
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
	// VPN list ID
	VpnListId pulumi.StringPtrOutput `pulumi:"vpnListId"`
	// VPN list version
	VpnListVersion pulumi.IntPtrOutput `pulumi:"vpnListVersion"`
}

// NewHubAndSpokeTopologyPolicyDefinition registers a new resource with the given unique name, arguments, and options.
func NewHubAndSpokeTopologyPolicyDefinition(ctx *pulumi.Context,
	name string, args *HubAndSpokeTopologyPolicyDefinitionArgs, opts ...pulumi.ResourceOption) (*HubAndSpokeTopologyPolicyDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Topologies == nil {
		return nil, errors.New("invalid value for required argument 'Topologies'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HubAndSpokeTopologyPolicyDefinition
	err := ctx.RegisterResource("sdwan:index/hubAndSpokeTopologyPolicyDefinition:HubAndSpokeTopologyPolicyDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHubAndSpokeTopologyPolicyDefinition gets an existing HubAndSpokeTopologyPolicyDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHubAndSpokeTopologyPolicyDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HubAndSpokeTopologyPolicyDefinitionState, opts ...pulumi.ResourceOption) (*HubAndSpokeTopologyPolicyDefinition, error) {
	var resource HubAndSpokeTopologyPolicyDefinition
	err := ctx.ReadResource("sdwan:index/hubAndSpokeTopologyPolicyDefinition:HubAndSpokeTopologyPolicyDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HubAndSpokeTopologyPolicyDefinition resources.
type hubAndSpokeTopologyPolicyDefinitionState struct {
	// The description of the policy definition
	Description *string `pulumi:"description"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// List of topologies
	Topologies []HubAndSpokeTopologyPolicyDefinitionTopology `pulumi:"topologies"`
	// Type
	Type *string `pulumi:"type"`
	// The version of the object
	Version *int `pulumi:"version"`
	// VPN list ID
	VpnListId *string `pulumi:"vpnListId"`
	// VPN list version
	VpnListVersion *int `pulumi:"vpnListVersion"`
}

type HubAndSpokeTopologyPolicyDefinitionState struct {
	// The description of the policy definition
	Description pulumi.StringPtrInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// List of topologies
	Topologies HubAndSpokeTopologyPolicyDefinitionTopologyArrayInput
	// Type
	Type pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
	// VPN list ID
	VpnListId pulumi.StringPtrInput
	// VPN list version
	VpnListVersion pulumi.IntPtrInput
}

func (HubAndSpokeTopologyPolicyDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*hubAndSpokeTopologyPolicyDefinitionState)(nil)).Elem()
}

type hubAndSpokeTopologyPolicyDefinitionArgs struct {
	// The description of the policy definition
	Description string `pulumi:"description"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// List of topologies
	Topologies []HubAndSpokeTopologyPolicyDefinitionTopology `pulumi:"topologies"`
	// VPN list ID
	VpnListId *string `pulumi:"vpnListId"`
	// VPN list version
	VpnListVersion *int `pulumi:"vpnListVersion"`
}

// The set of arguments for constructing a HubAndSpokeTopologyPolicyDefinition resource.
type HubAndSpokeTopologyPolicyDefinitionArgs struct {
	// The description of the policy definition
	Description pulumi.StringInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// List of topologies
	Topologies HubAndSpokeTopologyPolicyDefinitionTopologyArrayInput
	// VPN list ID
	VpnListId pulumi.StringPtrInput
	// VPN list version
	VpnListVersion pulumi.IntPtrInput
}

func (HubAndSpokeTopologyPolicyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hubAndSpokeTopologyPolicyDefinitionArgs)(nil)).Elem()
}

type HubAndSpokeTopologyPolicyDefinitionInput interface {
	pulumi.Input

	ToHubAndSpokeTopologyPolicyDefinitionOutput() HubAndSpokeTopologyPolicyDefinitionOutput
	ToHubAndSpokeTopologyPolicyDefinitionOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionOutput
}

func (*HubAndSpokeTopologyPolicyDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**HubAndSpokeTopologyPolicyDefinition)(nil)).Elem()
}

func (i *HubAndSpokeTopologyPolicyDefinition) ToHubAndSpokeTopologyPolicyDefinitionOutput() HubAndSpokeTopologyPolicyDefinitionOutput {
	return i.ToHubAndSpokeTopologyPolicyDefinitionOutputWithContext(context.Background())
}

func (i *HubAndSpokeTopologyPolicyDefinition) ToHubAndSpokeTopologyPolicyDefinitionOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubAndSpokeTopologyPolicyDefinitionOutput)
}

// HubAndSpokeTopologyPolicyDefinitionArrayInput is an input type that accepts HubAndSpokeTopologyPolicyDefinitionArray and HubAndSpokeTopologyPolicyDefinitionArrayOutput values.
// You can construct a concrete instance of `HubAndSpokeTopologyPolicyDefinitionArrayInput` via:
//
//	HubAndSpokeTopologyPolicyDefinitionArray{ HubAndSpokeTopologyPolicyDefinitionArgs{...} }
type HubAndSpokeTopologyPolicyDefinitionArrayInput interface {
	pulumi.Input

	ToHubAndSpokeTopologyPolicyDefinitionArrayOutput() HubAndSpokeTopologyPolicyDefinitionArrayOutput
	ToHubAndSpokeTopologyPolicyDefinitionArrayOutputWithContext(context.Context) HubAndSpokeTopologyPolicyDefinitionArrayOutput
}

type HubAndSpokeTopologyPolicyDefinitionArray []HubAndSpokeTopologyPolicyDefinitionInput

func (HubAndSpokeTopologyPolicyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubAndSpokeTopologyPolicyDefinition)(nil)).Elem()
}

func (i HubAndSpokeTopologyPolicyDefinitionArray) ToHubAndSpokeTopologyPolicyDefinitionArrayOutput() HubAndSpokeTopologyPolicyDefinitionArrayOutput {
	return i.ToHubAndSpokeTopologyPolicyDefinitionArrayOutputWithContext(context.Background())
}

func (i HubAndSpokeTopologyPolicyDefinitionArray) ToHubAndSpokeTopologyPolicyDefinitionArrayOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubAndSpokeTopologyPolicyDefinitionArrayOutput)
}

// HubAndSpokeTopologyPolicyDefinitionMapInput is an input type that accepts HubAndSpokeTopologyPolicyDefinitionMap and HubAndSpokeTopologyPolicyDefinitionMapOutput values.
// You can construct a concrete instance of `HubAndSpokeTopologyPolicyDefinitionMapInput` via:
//
//	HubAndSpokeTopologyPolicyDefinitionMap{ "key": HubAndSpokeTopologyPolicyDefinitionArgs{...} }
type HubAndSpokeTopologyPolicyDefinitionMapInput interface {
	pulumi.Input

	ToHubAndSpokeTopologyPolicyDefinitionMapOutput() HubAndSpokeTopologyPolicyDefinitionMapOutput
	ToHubAndSpokeTopologyPolicyDefinitionMapOutputWithContext(context.Context) HubAndSpokeTopologyPolicyDefinitionMapOutput
}

type HubAndSpokeTopologyPolicyDefinitionMap map[string]HubAndSpokeTopologyPolicyDefinitionInput

func (HubAndSpokeTopologyPolicyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubAndSpokeTopologyPolicyDefinition)(nil)).Elem()
}

func (i HubAndSpokeTopologyPolicyDefinitionMap) ToHubAndSpokeTopologyPolicyDefinitionMapOutput() HubAndSpokeTopologyPolicyDefinitionMapOutput {
	return i.ToHubAndSpokeTopologyPolicyDefinitionMapOutputWithContext(context.Background())
}

func (i HubAndSpokeTopologyPolicyDefinitionMap) ToHubAndSpokeTopologyPolicyDefinitionMapOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HubAndSpokeTopologyPolicyDefinitionMapOutput)
}

type HubAndSpokeTopologyPolicyDefinitionOutput struct{ *pulumi.OutputState }

func (HubAndSpokeTopologyPolicyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HubAndSpokeTopologyPolicyDefinition)(nil)).Elem()
}

func (o HubAndSpokeTopologyPolicyDefinitionOutput) ToHubAndSpokeTopologyPolicyDefinitionOutput() HubAndSpokeTopologyPolicyDefinitionOutput {
	return o
}

func (o HubAndSpokeTopologyPolicyDefinitionOutput) ToHubAndSpokeTopologyPolicyDefinitionOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionOutput {
	return o
}

// The description of the policy definition
func (o HubAndSpokeTopologyPolicyDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the policy definition
func (o HubAndSpokeTopologyPolicyDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of topologies
func (o HubAndSpokeTopologyPolicyDefinitionOutput) Topologies() HubAndSpokeTopologyPolicyDefinitionTopologyArrayOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) HubAndSpokeTopologyPolicyDefinitionTopologyArrayOutput {
		return v.Topologies
	}).(HubAndSpokeTopologyPolicyDefinitionTopologyArrayOutput)
}

// Type
func (o HubAndSpokeTopologyPolicyDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the object
func (o HubAndSpokeTopologyPolicyDefinitionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// VPN list ID
func (o HubAndSpokeTopologyPolicyDefinitionOutput) VpnListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) pulumi.StringPtrOutput { return v.VpnListId }).(pulumi.StringPtrOutput)
}

// VPN list version
func (o HubAndSpokeTopologyPolicyDefinitionOutput) VpnListVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HubAndSpokeTopologyPolicyDefinition) pulumi.IntPtrOutput { return v.VpnListVersion }).(pulumi.IntPtrOutput)
}

type HubAndSpokeTopologyPolicyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (HubAndSpokeTopologyPolicyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HubAndSpokeTopologyPolicyDefinition)(nil)).Elem()
}

func (o HubAndSpokeTopologyPolicyDefinitionArrayOutput) ToHubAndSpokeTopologyPolicyDefinitionArrayOutput() HubAndSpokeTopologyPolicyDefinitionArrayOutput {
	return o
}

func (o HubAndSpokeTopologyPolicyDefinitionArrayOutput) ToHubAndSpokeTopologyPolicyDefinitionArrayOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionArrayOutput {
	return o
}

func (o HubAndSpokeTopologyPolicyDefinitionArrayOutput) Index(i pulumi.IntInput) HubAndSpokeTopologyPolicyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HubAndSpokeTopologyPolicyDefinition {
		return vs[0].([]*HubAndSpokeTopologyPolicyDefinition)[vs[1].(int)]
	}).(HubAndSpokeTopologyPolicyDefinitionOutput)
}

type HubAndSpokeTopologyPolicyDefinitionMapOutput struct{ *pulumi.OutputState }

func (HubAndSpokeTopologyPolicyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HubAndSpokeTopologyPolicyDefinition)(nil)).Elem()
}

func (o HubAndSpokeTopologyPolicyDefinitionMapOutput) ToHubAndSpokeTopologyPolicyDefinitionMapOutput() HubAndSpokeTopologyPolicyDefinitionMapOutput {
	return o
}

func (o HubAndSpokeTopologyPolicyDefinitionMapOutput) ToHubAndSpokeTopologyPolicyDefinitionMapOutputWithContext(ctx context.Context) HubAndSpokeTopologyPolicyDefinitionMapOutput {
	return o
}

func (o HubAndSpokeTopologyPolicyDefinitionMapOutput) MapIndex(k pulumi.StringInput) HubAndSpokeTopologyPolicyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HubAndSpokeTopologyPolicyDefinition {
		return vs[0].(map[string]*HubAndSpokeTopologyPolicyDefinition)[vs[1].(string)]
	}).(HubAndSpokeTopologyPolicyDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HubAndSpokeTopologyPolicyDefinitionInput)(nil)).Elem(), &HubAndSpokeTopologyPolicyDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubAndSpokeTopologyPolicyDefinitionArrayInput)(nil)).Elem(), HubAndSpokeTopologyPolicyDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HubAndSpokeTopologyPolicyDefinitionMapInput)(nil)).Elem(), HubAndSpokeTopologyPolicyDefinitionMap{})
	pulumi.RegisterOutputType(HubAndSpokeTopologyPolicyDefinitionOutput{})
	pulumi.RegisterOutputType(HubAndSpokeTopologyPolicyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(HubAndSpokeTopologyPolicyDefinitionMapOutput{})
}
