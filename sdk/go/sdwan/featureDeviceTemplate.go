// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Feature Device Template .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewFeatureDeviceTemplate(ctx, "example", &sdwan.FeatureDeviceTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My description"),
//				DeviceType:  pulumi.String("vedge-ISR-4331"),
//				GeneralTemplates: sdwan.FeatureDeviceTemplateGeneralTemplateArray{
//					&sdwan.FeatureDeviceTemplateGeneralTemplateArgs{
//						Id:   pulumi.String("2081c2f4-3f9f-4fee-8078-dcc8904e368d"),
//						Type: pulumi.String("cisco_system"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/featureDeviceTemplate:FeatureDeviceTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type FeatureDeviceTemplate struct {
	pulumi.CustomResourceState

	// The description of the device template
	Description pulumi.StringOutput `pulumi:"description"`
	// The device role - Choices: `sdwan-edge`, `service-node`
	DeviceRole pulumi.StringPtrOutput `pulumi:"deviceRole"`
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType pulumi.StringOutput `pulumi:"deviceType"`
	// List of general templates
	GeneralTemplates FeatureDeviceTemplateGeneralTemplateArrayOutput `pulumi:"generalTemplates"`
	// The name of the device template
	Name pulumi.StringOutput `pulumi:"name"`
	// The policy ID
	PolicyId pulumi.StringPtrOutput `pulumi:"policyId"`
	// The policy version
	PolicyVersion pulumi.IntPtrOutput `pulumi:"policyVersion"`
	// The security policy ID
	SecurityPolicyId pulumi.StringPtrOutput `pulumi:"securityPolicyId"`
	// The security policy version
	SecurityPolicyVersion pulumi.IntPtrOutput `pulumi:"securityPolicyVersion"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewFeatureDeviceTemplate registers a new resource with the given unique name, arguments, and options.
func NewFeatureDeviceTemplate(ctx *pulumi.Context,
	name string, args *FeatureDeviceTemplateArgs, opts ...pulumi.ResourceOption) (*FeatureDeviceTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceType == nil {
		return nil, errors.New("invalid value for required argument 'DeviceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FeatureDeviceTemplate
	err := ctx.RegisterResource("sdwan:index/featureDeviceTemplate:FeatureDeviceTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFeatureDeviceTemplate gets an existing FeatureDeviceTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFeatureDeviceTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FeatureDeviceTemplateState, opts ...pulumi.ResourceOption) (*FeatureDeviceTemplate, error) {
	var resource FeatureDeviceTemplate
	err := ctx.ReadResource("sdwan:index/featureDeviceTemplate:FeatureDeviceTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FeatureDeviceTemplate resources.
type featureDeviceTemplateState struct {
	// The description of the device template
	Description *string `pulumi:"description"`
	// The device role - Choices: `sdwan-edge`, `service-node`
	DeviceRole *string `pulumi:"deviceRole"`
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType *string `pulumi:"deviceType"`
	// List of general templates
	GeneralTemplates []FeatureDeviceTemplateGeneralTemplate `pulumi:"generalTemplates"`
	// The name of the device template
	Name *string `pulumi:"name"`
	// The policy ID
	PolicyId *string `pulumi:"policyId"`
	// The policy version
	PolicyVersion *int `pulumi:"policyVersion"`
	// The security policy ID
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The security policy version
	SecurityPolicyVersion *int `pulumi:"securityPolicyVersion"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type FeatureDeviceTemplateState struct {
	// The description of the device template
	Description pulumi.StringPtrInput
	// The device role - Choices: `sdwan-edge`, `service-node`
	DeviceRole pulumi.StringPtrInput
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType pulumi.StringPtrInput
	// List of general templates
	GeneralTemplates FeatureDeviceTemplateGeneralTemplateArrayInput
	// The name of the device template
	Name pulumi.StringPtrInput
	// The policy ID
	PolicyId pulumi.StringPtrInput
	// The policy version
	PolicyVersion pulumi.IntPtrInput
	// The security policy ID
	SecurityPolicyId pulumi.StringPtrInput
	// The security policy version
	SecurityPolicyVersion pulumi.IntPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (FeatureDeviceTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*featureDeviceTemplateState)(nil)).Elem()
}

type featureDeviceTemplateArgs struct {
	// The description of the device template
	Description string `pulumi:"description"`
	// The device role - Choices: `sdwan-edge`, `service-node`
	DeviceRole *string `pulumi:"deviceRole"`
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType string `pulumi:"deviceType"`
	// List of general templates
	GeneralTemplates []FeatureDeviceTemplateGeneralTemplate `pulumi:"generalTemplates"`
	// The name of the device template
	Name *string `pulumi:"name"`
	// The policy ID
	PolicyId *string `pulumi:"policyId"`
	// The policy version
	PolicyVersion *int `pulumi:"policyVersion"`
	// The security policy ID
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// The security policy version
	SecurityPolicyVersion *int `pulumi:"securityPolicyVersion"`
}

// The set of arguments for constructing a FeatureDeviceTemplate resource.
type FeatureDeviceTemplateArgs struct {
	// The description of the device template
	Description pulumi.StringInput
	// The device role - Choices: `sdwan-edge`, `service-node`
	DeviceRole pulumi.StringPtrInput
	// The device type (e.g., `vedge-ISR-4331`)
	DeviceType pulumi.StringInput
	// List of general templates
	GeneralTemplates FeatureDeviceTemplateGeneralTemplateArrayInput
	// The name of the device template
	Name pulumi.StringPtrInput
	// The policy ID
	PolicyId pulumi.StringPtrInput
	// The policy version
	PolicyVersion pulumi.IntPtrInput
	// The security policy ID
	SecurityPolicyId pulumi.StringPtrInput
	// The security policy version
	SecurityPolicyVersion pulumi.IntPtrInput
}

func (FeatureDeviceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*featureDeviceTemplateArgs)(nil)).Elem()
}

type FeatureDeviceTemplateInput interface {
	pulumi.Input

	ToFeatureDeviceTemplateOutput() FeatureDeviceTemplateOutput
	ToFeatureDeviceTemplateOutputWithContext(ctx context.Context) FeatureDeviceTemplateOutput
}

func (*FeatureDeviceTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureDeviceTemplate)(nil)).Elem()
}

func (i *FeatureDeviceTemplate) ToFeatureDeviceTemplateOutput() FeatureDeviceTemplateOutput {
	return i.ToFeatureDeviceTemplateOutputWithContext(context.Background())
}

func (i *FeatureDeviceTemplate) ToFeatureDeviceTemplateOutputWithContext(ctx context.Context) FeatureDeviceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureDeviceTemplateOutput)
}

// FeatureDeviceTemplateArrayInput is an input type that accepts FeatureDeviceTemplateArray and FeatureDeviceTemplateArrayOutput values.
// You can construct a concrete instance of `FeatureDeviceTemplateArrayInput` via:
//
//	FeatureDeviceTemplateArray{ FeatureDeviceTemplateArgs{...} }
type FeatureDeviceTemplateArrayInput interface {
	pulumi.Input

	ToFeatureDeviceTemplateArrayOutput() FeatureDeviceTemplateArrayOutput
	ToFeatureDeviceTemplateArrayOutputWithContext(context.Context) FeatureDeviceTemplateArrayOutput
}

type FeatureDeviceTemplateArray []FeatureDeviceTemplateInput

func (FeatureDeviceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureDeviceTemplate)(nil)).Elem()
}

func (i FeatureDeviceTemplateArray) ToFeatureDeviceTemplateArrayOutput() FeatureDeviceTemplateArrayOutput {
	return i.ToFeatureDeviceTemplateArrayOutputWithContext(context.Background())
}

func (i FeatureDeviceTemplateArray) ToFeatureDeviceTemplateArrayOutputWithContext(ctx context.Context) FeatureDeviceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureDeviceTemplateArrayOutput)
}

// FeatureDeviceTemplateMapInput is an input type that accepts FeatureDeviceTemplateMap and FeatureDeviceTemplateMapOutput values.
// You can construct a concrete instance of `FeatureDeviceTemplateMapInput` via:
//
//	FeatureDeviceTemplateMap{ "key": FeatureDeviceTemplateArgs{...} }
type FeatureDeviceTemplateMapInput interface {
	pulumi.Input

	ToFeatureDeviceTemplateMapOutput() FeatureDeviceTemplateMapOutput
	ToFeatureDeviceTemplateMapOutputWithContext(context.Context) FeatureDeviceTemplateMapOutput
}

type FeatureDeviceTemplateMap map[string]FeatureDeviceTemplateInput

func (FeatureDeviceTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureDeviceTemplate)(nil)).Elem()
}

func (i FeatureDeviceTemplateMap) ToFeatureDeviceTemplateMapOutput() FeatureDeviceTemplateMapOutput {
	return i.ToFeatureDeviceTemplateMapOutputWithContext(context.Background())
}

func (i FeatureDeviceTemplateMap) ToFeatureDeviceTemplateMapOutputWithContext(ctx context.Context) FeatureDeviceTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FeatureDeviceTemplateMapOutput)
}

type FeatureDeviceTemplateOutput struct{ *pulumi.OutputState }

func (FeatureDeviceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FeatureDeviceTemplate)(nil)).Elem()
}

func (o FeatureDeviceTemplateOutput) ToFeatureDeviceTemplateOutput() FeatureDeviceTemplateOutput {
	return o
}

func (o FeatureDeviceTemplateOutput) ToFeatureDeviceTemplateOutputWithContext(ctx context.Context) FeatureDeviceTemplateOutput {
	return o
}

// The description of the device template
func (o FeatureDeviceTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The device role - Choices: `sdwan-edge`, `service-node`
func (o FeatureDeviceTemplateOutput) DeviceRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.StringPtrOutput { return v.DeviceRole }).(pulumi.StringPtrOutput)
}

// The device type (e.g., `vedge-ISR-4331`)
func (o FeatureDeviceTemplateOutput) DeviceType() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.StringOutput { return v.DeviceType }).(pulumi.StringOutput)
}

// List of general templates
func (o FeatureDeviceTemplateOutput) GeneralTemplates() FeatureDeviceTemplateGeneralTemplateArrayOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) FeatureDeviceTemplateGeneralTemplateArrayOutput {
		return v.GeneralTemplates
	}).(FeatureDeviceTemplateGeneralTemplateArrayOutput)
}

// The name of the device template
func (o FeatureDeviceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The policy ID
func (o FeatureDeviceTemplateOutput) PolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.StringPtrOutput { return v.PolicyId }).(pulumi.StringPtrOutput)
}

// The policy version
func (o FeatureDeviceTemplateOutput) PolicyVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.IntPtrOutput { return v.PolicyVersion }).(pulumi.IntPtrOutput)
}

// The security policy ID
func (o FeatureDeviceTemplateOutput) SecurityPolicyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.StringPtrOutput { return v.SecurityPolicyId }).(pulumi.StringPtrOutput)
}

// The security policy version
func (o FeatureDeviceTemplateOutput) SecurityPolicyVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.IntPtrOutput { return v.SecurityPolicyVersion }).(pulumi.IntPtrOutput)
}

// The version of the object
func (o FeatureDeviceTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *FeatureDeviceTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type FeatureDeviceTemplateArrayOutput struct{ *pulumi.OutputState }

func (FeatureDeviceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FeatureDeviceTemplate)(nil)).Elem()
}

func (o FeatureDeviceTemplateArrayOutput) ToFeatureDeviceTemplateArrayOutput() FeatureDeviceTemplateArrayOutput {
	return o
}

func (o FeatureDeviceTemplateArrayOutput) ToFeatureDeviceTemplateArrayOutputWithContext(ctx context.Context) FeatureDeviceTemplateArrayOutput {
	return o
}

func (o FeatureDeviceTemplateArrayOutput) Index(i pulumi.IntInput) FeatureDeviceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FeatureDeviceTemplate {
		return vs[0].([]*FeatureDeviceTemplate)[vs[1].(int)]
	}).(FeatureDeviceTemplateOutput)
}

type FeatureDeviceTemplateMapOutput struct{ *pulumi.OutputState }

func (FeatureDeviceTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FeatureDeviceTemplate)(nil)).Elem()
}

func (o FeatureDeviceTemplateMapOutput) ToFeatureDeviceTemplateMapOutput() FeatureDeviceTemplateMapOutput {
	return o
}

func (o FeatureDeviceTemplateMapOutput) ToFeatureDeviceTemplateMapOutputWithContext(ctx context.Context) FeatureDeviceTemplateMapOutput {
	return o
}

func (o FeatureDeviceTemplateMapOutput) MapIndex(k pulumi.StringInput) FeatureDeviceTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FeatureDeviceTemplate {
		return vs[0].(map[string]*FeatureDeviceTemplate)[vs[1].(string)]
	}).(FeatureDeviceTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureDeviceTemplateInput)(nil)).Elem(), &FeatureDeviceTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureDeviceTemplateArrayInput)(nil)).Elem(), FeatureDeviceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FeatureDeviceTemplateMapInput)(nil)).Elem(), FeatureDeviceTemplateMap{})
	pulumi.RegisterOutputType(FeatureDeviceTemplateOutput{})
	pulumi.RegisterOutputType(FeatureDeviceTemplateArrayOutput{})
	pulumi.RegisterOutputType(FeatureDeviceTemplateMapOutput{})
}
