// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco BGP feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoBgpFeatureTemplate(ctx, &sdwan.LookupCiscoBgpFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoBgpFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoBgpFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoBgpFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoBgpFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoBgpFeatureTemplate:getCiscoBgpFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoBgpFeatureTemplate.
type LookupCiscoBgpFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoBgpFeatureTemplate.
type LookupCiscoBgpFeatureTemplateResult struct {
	// Set BGP address family
	AddressFamilies []GetCiscoBgpFeatureTemplateAddressFamily `pulumi:"addressFamilies"`
	// Compare MEDs from all ASs when selecting active BGP paths
	AlwaysCompareMed bool `pulumi:"alwaysCompareMed"`
	// Variable name
	AlwaysCompareMedVariable string `pulumi:"alwaysCompareMedVariable"`
	// Set autonomous system number \n\n or \n\n
	AsNumber string `pulumi:"asNumber"`
	// Variable name
	AsNumberVariable string `pulumi:"asNumberVariable"`
	// Compare router IDs when selecting active BGP paths
	CompareRouterId bool `pulumi:"compareRouterId"`
	// Variable name
	CompareRouterIdVariable string `pulumi:"compareRouterIdVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// Compare MEDs from all routes from same AS when selecting active BGP paths
	DeterministicMed bool `pulumi:"deterministicMed"`
	// Variable name
	DeterministicMedVariable string `pulumi:"deterministicMedVariable"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set administrative distance for external BGP routes
	DistanceExternal int `pulumi:"distanceExternal"`
	// Variable name
	DistanceExternalVariable string `pulumi:"distanceExternalVariable"`
	// Set administrative distance for internal BGP routes
	DistanceInternal int `pulumi:"distanceInternal"`
	// Variable name
	DistanceInternalVariable string `pulumi:"distanceInternalVariable"`
	// Set administrative distance for local BGP routes
	DistanceLocal int `pulumi:"distanceLocal"`
	// Variable name
	DistanceLocalVariable string `pulumi:"distanceLocalVariable"`
	// Set the interval when BGP considers a neighbor to be down
	Holdtime int `pulumi:"holdtime"`
	// Variable name
	HoldtimeVariable string `pulumi:"holdtimeVariable"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Set BGP neighbors
	Ipv4Neighbors []GetCiscoBgpFeatureTemplateIpv4Neighbor `pulumi:"ipv4Neighbors"`
	// Router Target for IPV4
	Ipv4RouteTargets []GetCiscoBgpFeatureTemplateIpv4RouteTarget `pulumi:"ipv4RouteTargets"`
	// Set BGP IPv6 neighbors
	Ipv6Neighbors []GetCiscoBgpFeatureTemplateIpv6Neighbor `pulumi:"ipv6Neighbors"`
	// Router Target for IPV6
	Ipv6RouteTargets []GetCiscoBgpFeatureTemplateIpv6RouteTarget `pulumi:"ipv6RouteTargets"`
	// Set how often keepalive messages are sent to BGP peer
	Keepalive int `pulumi:"keepalive"`
	// Variable name
	KeepaliveVariable string `pulumi:"keepaliveVariable"`
	// If path has no MED, consider it to be worst path when selecting active BGP paths
	MissingMedWorst bool `pulumi:"missingMedWorst"`
	// Variable name
	MissingMedWorstVariable string `pulumi:"missingMedWorstVariable"`
	// MPLS BGP Interface
	MplsInterfaces []GetCiscoBgpFeatureTemplateMplsInterface `pulumi:"mplsInterfaces"`
	// Ignore AS for multipath selection
	MultipathRelax bool `pulumi:"multipathRelax"`
	// Variable name
	MultipathRelaxVariable string `pulumi:"multipathRelaxVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Propagate AS Path
	PropagateAspath bool `pulumi:"propagateAspath"`
	// Variable name
	PropagateAspathVariable string `pulumi:"propagateAspathVariable"`
	// Propagate Community
	PropagateCommunity bool `pulumi:"propagateCommunity"`
	// Variable name
	PropagateCommunityVariable string `pulumi:"propagateCommunityVariable"`
	// Configure BGP router identifier
	RouterId string `pulumi:"routerId"`
	// Variable name
	RouterIdVariable string `pulumi:"routerIdVariable"`
	// Enable or disable BGP
	Shutdown bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable string `pulumi:"shutdownVariable"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoBgpFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoBgpFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoBgpFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCiscoBgpFeatureTemplateResult, error) {
			args := v.(LookupCiscoBgpFeatureTemplateArgs)
			r, err := LookupCiscoBgpFeatureTemplate(ctx, &args, opts...)
			var s LookupCiscoBgpFeatureTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCiscoBgpFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoBgpFeatureTemplate.
type LookupCiscoBgpFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoBgpFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoBgpFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoBgpFeatureTemplate.
type LookupCiscoBgpFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoBgpFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoBgpFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoBgpFeatureTemplateResultOutput) ToLookupCiscoBgpFeatureTemplateResultOutput() LookupCiscoBgpFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoBgpFeatureTemplateResultOutput) ToLookupCiscoBgpFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoBgpFeatureTemplateResultOutput {
	return o
}

// Set BGP address family
func (o LookupCiscoBgpFeatureTemplateResultOutput) AddressFamilies() GetCiscoBgpFeatureTemplateAddressFamilyArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []GetCiscoBgpFeatureTemplateAddressFamily {
		return v.AddressFamilies
	}).(GetCiscoBgpFeatureTemplateAddressFamilyArrayOutput)
}

// Compare MEDs from all ASs when selecting active BGP paths
func (o LookupCiscoBgpFeatureTemplateResultOutput) AlwaysCompareMed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.AlwaysCompareMed }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) AlwaysCompareMedVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.AlwaysCompareMedVariable }).(pulumi.StringOutput)
}

// Set autonomous system number \n\n or \n\n
func (o LookupCiscoBgpFeatureTemplateResultOutput) AsNumber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.AsNumber }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) AsNumberVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.AsNumberVariable }).(pulumi.StringOutput)
}

// Compare router IDs when selecting active BGP paths
func (o LookupCiscoBgpFeatureTemplateResultOutput) CompareRouterId() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.CompareRouterId }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) CompareRouterIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.CompareRouterIdVariable }).(pulumi.StringOutput)
}

// The description of the feature template
func (o LookupCiscoBgpFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// Compare MEDs from all routes from same AS when selecting active BGP paths
func (o LookupCiscoBgpFeatureTemplateResultOutput) DeterministicMed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.DeterministicMed }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) DeterministicMedVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.DeterministicMedVariable }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoBgpFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Set administrative distance for external BGP routes
func (o LookupCiscoBgpFeatureTemplateResultOutput) DistanceExternal() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) int { return v.DistanceExternal }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) DistanceExternalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.DistanceExternalVariable }).(pulumi.StringOutput)
}

// Set administrative distance for internal BGP routes
func (o LookupCiscoBgpFeatureTemplateResultOutput) DistanceInternal() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) int { return v.DistanceInternal }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) DistanceInternalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.DistanceInternalVariable }).(pulumi.StringOutput)
}

// Set administrative distance for local BGP routes
func (o LookupCiscoBgpFeatureTemplateResultOutput) DistanceLocal() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) int { return v.DistanceLocal }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) DistanceLocalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.DistanceLocalVariable }).(pulumi.StringOutput)
}

// Set the interval when BGP considers a neighbor to be down
func (o LookupCiscoBgpFeatureTemplateResultOutput) Holdtime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) int { return v.Holdtime }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) HoldtimeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.HoldtimeVariable }).(pulumi.StringOutput)
}

// The id of the feature template
func (o LookupCiscoBgpFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set BGP neighbors
func (o LookupCiscoBgpFeatureTemplateResultOutput) Ipv4Neighbors() GetCiscoBgpFeatureTemplateIpv4NeighborArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []GetCiscoBgpFeatureTemplateIpv4Neighbor {
		return v.Ipv4Neighbors
	}).(GetCiscoBgpFeatureTemplateIpv4NeighborArrayOutput)
}

// Router Target for IPV4
func (o LookupCiscoBgpFeatureTemplateResultOutput) Ipv4RouteTargets() GetCiscoBgpFeatureTemplateIpv4RouteTargetArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []GetCiscoBgpFeatureTemplateIpv4RouteTarget {
		return v.Ipv4RouteTargets
	}).(GetCiscoBgpFeatureTemplateIpv4RouteTargetArrayOutput)
}

// Set BGP IPv6 neighbors
func (o LookupCiscoBgpFeatureTemplateResultOutput) Ipv6Neighbors() GetCiscoBgpFeatureTemplateIpv6NeighborArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []GetCiscoBgpFeatureTemplateIpv6Neighbor {
		return v.Ipv6Neighbors
	}).(GetCiscoBgpFeatureTemplateIpv6NeighborArrayOutput)
}

// Router Target for IPV6
func (o LookupCiscoBgpFeatureTemplateResultOutput) Ipv6RouteTargets() GetCiscoBgpFeatureTemplateIpv6RouteTargetArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []GetCiscoBgpFeatureTemplateIpv6RouteTarget {
		return v.Ipv6RouteTargets
	}).(GetCiscoBgpFeatureTemplateIpv6RouteTargetArrayOutput)
}

// Set how often keepalive messages are sent to BGP peer
func (o LookupCiscoBgpFeatureTemplateResultOutput) Keepalive() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) int { return v.Keepalive }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) KeepaliveVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.KeepaliveVariable }).(pulumi.StringOutput)
}

// If path has no MED, consider it to be worst path when selecting active BGP paths
func (o LookupCiscoBgpFeatureTemplateResultOutput) MissingMedWorst() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.MissingMedWorst }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) MissingMedWorstVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.MissingMedWorstVariable }).(pulumi.StringOutput)
}

// MPLS BGP Interface
func (o LookupCiscoBgpFeatureTemplateResultOutput) MplsInterfaces() GetCiscoBgpFeatureTemplateMplsInterfaceArrayOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) []GetCiscoBgpFeatureTemplateMplsInterface {
		return v.MplsInterfaces
	}).(GetCiscoBgpFeatureTemplateMplsInterfaceArrayOutput)
}

// Ignore AS for multipath selection
func (o LookupCiscoBgpFeatureTemplateResultOutput) MultipathRelax() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.MultipathRelax }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) MultipathRelaxVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.MultipathRelaxVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoBgpFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Propagate AS Path
func (o LookupCiscoBgpFeatureTemplateResultOutput) PropagateAspath() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.PropagateAspath }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) PropagateAspathVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.PropagateAspathVariable }).(pulumi.StringOutput)
}

// Propagate Community
func (o LookupCiscoBgpFeatureTemplateResultOutput) PropagateCommunity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.PropagateCommunity }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) PropagateCommunityVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.PropagateCommunityVariable }).(pulumi.StringOutput)
}

// Configure BGP router identifier
func (o LookupCiscoBgpFeatureTemplateResultOutput) RouterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.RouterId }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) RouterIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.RouterIdVariable }).(pulumi.StringOutput)
}

// Enable or disable BGP
func (o LookupCiscoBgpFeatureTemplateResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoBgpFeatureTemplateResultOutput) ShutdownVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.ShutdownVariable }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoBgpFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoBgpFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoBgpFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoBgpFeatureTemplateResultOutput{})
}
