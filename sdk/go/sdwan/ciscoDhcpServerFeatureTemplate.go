// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco DHCP Server feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoDhcpServerFeatureTemplate struct {
	pulumi.CustomResourceState

	// Configure IPv4 prefix range of the DHCP address pool
	AddressPool pulumi.StringPtrOutput `pulumi:"addressPool"`
	// Variable name
	AddressPoolVariable pulumi.StringPtrOutput `pulumi:"addressPoolVariable"`
	// Set IP address of default gateway
	DefaultGateway pulumi.StringPtrOutput `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable pulumi.StringPtrOutput `pulumi:"defaultGatewayVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Configure one or more DNS server IP addresses
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable pulumi.StringPtrOutput `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName pulumi.StringPtrOutput `pulumi:"domainName"`
	// Variable name
	DomainNameVariable pulumi.StringPtrOutput `pulumi:"domainNameVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	ExcludeAddresses pulumi.StringArrayOutput `pulumi:"excludeAddresses"`
	// Variable name
	ExcludeAddressesVariable pulumi.StringPtrOutput `pulumi:"excludeAddressesVariable"`
	// Set MTU on interface to DHCP client - Range: `68`-`65535`
	InterfaceMtu pulumi.IntPtrOutput `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable pulumi.StringPtrOutput `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
	LeaseTime pulumi.IntPtrOutput `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable pulumi.StringPtrOutput `pulumi:"leaseTimeVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure Options Code
	Options CiscoDhcpServerFeatureTemplateOptionArrayOutput `pulumi:"options"`
	// Configure static IP addresses
	StaticLeases CiscoDhcpServerFeatureTemplateStaticLeaseArrayOutput `pulumi:"staticLeases"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Configure TFTP server IP addresses
	TftpServers pulumi.StringArrayOutput `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable pulumi.StringPtrOutput `pulumi:"tftpServersVariable"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoDhcpServerFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoDhcpServerFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoDhcpServerFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoDhcpServerFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoDhcpServerFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoDhcpServerFeatureTemplate gets an existing CiscoDhcpServerFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoDhcpServerFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoDhcpServerFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoDhcpServerFeatureTemplate, error) {
	var resource CiscoDhcpServerFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoDhcpServerFeatureTemplate:CiscoDhcpServerFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoDhcpServerFeatureTemplate resources.
type ciscoDhcpServerFeatureTemplateState struct {
	// Configure IPv4 prefix range of the DHCP address pool
	AddressPool *string `pulumi:"addressPool"`
	// Variable name
	AddressPoolVariable *string `pulumi:"addressPoolVariable"`
	// Set IP address of default gateway
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable *string `pulumi:"defaultGatewayVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure one or more DNS server IP addresses
	DnsServers []string `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable *string `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName *string `pulumi:"domainName"`
	// Variable name
	DomainNameVariable *string `pulumi:"domainNameVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	ExcludeAddresses []string `pulumi:"excludeAddresses"`
	// Variable name
	ExcludeAddressesVariable *string `pulumi:"excludeAddressesVariable"`
	// Set MTU on interface to DHCP client - Range: `68`-`65535`
	InterfaceMtu *int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable *string `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
	LeaseTime *int `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable *string `pulumi:"leaseTimeVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Configure Options Code
	Options []CiscoDhcpServerFeatureTemplateOption `pulumi:"options"`
	// Configure static IP addresses
	StaticLeases []CiscoDhcpServerFeatureTemplateStaticLease `pulumi:"staticLeases"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Configure TFTP server IP addresses
	TftpServers []string `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable *string `pulumi:"tftpServersVariable"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoDhcpServerFeatureTemplateState struct {
	// Configure IPv4 prefix range of the DHCP address pool
	AddressPool pulumi.StringPtrInput
	// Variable name
	AddressPoolVariable pulumi.StringPtrInput
	// Set IP address of default gateway
	DefaultGateway pulumi.StringPtrInput
	// Variable name
	DefaultGatewayVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Configure one or more DNS server IP addresses
	DnsServers pulumi.StringArrayInput
	// Variable name
	DnsServersVariable pulumi.StringPtrInput
	// Set domain name client uses to resolve hostnames
	DomainName pulumi.StringPtrInput
	// Variable name
	DomainNameVariable pulumi.StringPtrInput
	// Configure IPv4 address to exclude from DHCP address pool
	ExcludeAddresses pulumi.StringArrayInput
	// Variable name
	ExcludeAddressesVariable pulumi.StringPtrInput
	// Set MTU on interface to DHCP client - Range: `68`-`65535`
	InterfaceMtu pulumi.IntPtrInput
	// Variable name
	InterfaceMtuVariable pulumi.StringPtrInput
	// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
	LeaseTime pulumi.IntPtrInput
	// Variable name
	LeaseTimeVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Configure Options Code
	Options CiscoDhcpServerFeatureTemplateOptionArrayInput
	// Configure static IP addresses
	StaticLeases CiscoDhcpServerFeatureTemplateStaticLeaseArrayInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Configure TFTP server IP addresses
	TftpServers pulumi.StringArrayInput
	// Variable name
	TftpServersVariable pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoDhcpServerFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoDhcpServerFeatureTemplateState)(nil)).Elem()
}

type ciscoDhcpServerFeatureTemplateArgs struct {
	// Configure IPv4 prefix range of the DHCP address pool
	AddressPool *string `pulumi:"addressPool"`
	// Variable name
	AddressPoolVariable *string `pulumi:"addressPoolVariable"`
	// Set IP address of default gateway
	DefaultGateway *string `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable *string `pulumi:"defaultGatewayVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure one or more DNS server IP addresses
	DnsServers []string `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable *string `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName *string `pulumi:"domainName"`
	// Variable name
	DomainNameVariable *string `pulumi:"domainNameVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	ExcludeAddresses []string `pulumi:"excludeAddresses"`
	// Variable name
	ExcludeAddressesVariable *string `pulumi:"excludeAddressesVariable"`
	// Set MTU on interface to DHCP client - Range: `68`-`65535`
	InterfaceMtu *int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable *string `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
	LeaseTime *int `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable *string `pulumi:"leaseTimeVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Configure Options Code
	Options []CiscoDhcpServerFeatureTemplateOption `pulumi:"options"`
	// Configure static IP addresses
	StaticLeases []CiscoDhcpServerFeatureTemplateStaticLease `pulumi:"staticLeases"`
	// Configure TFTP server IP addresses
	TftpServers []string `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable *string `pulumi:"tftpServersVariable"`
}

// The set of arguments for constructing a CiscoDhcpServerFeatureTemplate resource.
type CiscoDhcpServerFeatureTemplateArgs struct {
	// Configure IPv4 prefix range of the DHCP address pool
	AddressPool pulumi.StringPtrInput
	// Variable name
	AddressPoolVariable pulumi.StringPtrInput
	// Set IP address of default gateway
	DefaultGateway pulumi.StringPtrInput
	// Variable name
	DefaultGatewayVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Configure one or more DNS server IP addresses
	DnsServers pulumi.StringArrayInput
	// Variable name
	DnsServersVariable pulumi.StringPtrInput
	// Set domain name client uses to resolve hostnames
	DomainName pulumi.StringPtrInput
	// Variable name
	DomainNameVariable pulumi.StringPtrInput
	// Configure IPv4 address to exclude from DHCP address pool
	ExcludeAddresses pulumi.StringArrayInput
	// Variable name
	ExcludeAddressesVariable pulumi.StringPtrInput
	// Set MTU on interface to DHCP client - Range: `68`-`65535`
	InterfaceMtu pulumi.IntPtrInput
	// Variable name
	InterfaceMtuVariable pulumi.StringPtrInput
	// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
	LeaseTime pulumi.IntPtrInput
	// Variable name
	LeaseTimeVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Configure Options Code
	Options CiscoDhcpServerFeatureTemplateOptionArrayInput
	// Configure static IP addresses
	StaticLeases CiscoDhcpServerFeatureTemplateStaticLeaseArrayInput
	// Configure TFTP server IP addresses
	TftpServers pulumi.StringArrayInput
	// Variable name
	TftpServersVariable pulumi.StringPtrInput
}

func (CiscoDhcpServerFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoDhcpServerFeatureTemplateArgs)(nil)).Elem()
}

type CiscoDhcpServerFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoDhcpServerFeatureTemplateOutput() CiscoDhcpServerFeatureTemplateOutput
	ToCiscoDhcpServerFeatureTemplateOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateOutput
}

func (*CiscoDhcpServerFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoDhcpServerFeatureTemplate)(nil)).Elem()
}

func (i *CiscoDhcpServerFeatureTemplate) ToCiscoDhcpServerFeatureTemplateOutput() CiscoDhcpServerFeatureTemplateOutput {
	return i.ToCiscoDhcpServerFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoDhcpServerFeatureTemplate) ToCiscoDhcpServerFeatureTemplateOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoDhcpServerFeatureTemplateOutput)
}

// CiscoDhcpServerFeatureTemplateArrayInput is an input type that accepts CiscoDhcpServerFeatureTemplateArray and CiscoDhcpServerFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoDhcpServerFeatureTemplateArrayInput` via:
//
//	CiscoDhcpServerFeatureTemplateArray{ CiscoDhcpServerFeatureTemplateArgs{...} }
type CiscoDhcpServerFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoDhcpServerFeatureTemplateArrayOutput() CiscoDhcpServerFeatureTemplateArrayOutput
	ToCiscoDhcpServerFeatureTemplateArrayOutputWithContext(context.Context) CiscoDhcpServerFeatureTemplateArrayOutput
}

type CiscoDhcpServerFeatureTemplateArray []CiscoDhcpServerFeatureTemplateInput

func (CiscoDhcpServerFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoDhcpServerFeatureTemplate)(nil)).Elem()
}

func (i CiscoDhcpServerFeatureTemplateArray) ToCiscoDhcpServerFeatureTemplateArrayOutput() CiscoDhcpServerFeatureTemplateArrayOutput {
	return i.ToCiscoDhcpServerFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoDhcpServerFeatureTemplateArray) ToCiscoDhcpServerFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoDhcpServerFeatureTemplateArrayOutput)
}

// CiscoDhcpServerFeatureTemplateMapInput is an input type that accepts CiscoDhcpServerFeatureTemplateMap and CiscoDhcpServerFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoDhcpServerFeatureTemplateMapInput` via:
//
//	CiscoDhcpServerFeatureTemplateMap{ "key": CiscoDhcpServerFeatureTemplateArgs{...} }
type CiscoDhcpServerFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoDhcpServerFeatureTemplateMapOutput() CiscoDhcpServerFeatureTemplateMapOutput
	ToCiscoDhcpServerFeatureTemplateMapOutputWithContext(context.Context) CiscoDhcpServerFeatureTemplateMapOutput
}

type CiscoDhcpServerFeatureTemplateMap map[string]CiscoDhcpServerFeatureTemplateInput

func (CiscoDhcpServerFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoDhcpServerFeatureTemplate)(nil)).Elem()
}

func (i CiscoDhcpServerFeatureTemplateMap) ToCiscoDhcpServerFeatureTemplateMapOutput() CiscoDhcpServerFeatureTemplateMapOutput {
	return i.ToCiscoDhcpServerFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoDhcpServerFeatureTemplateMap) ToCiscoDhcpServerFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoDhcpServerFeatureTemplateMapOutput)
}

type CiscoDhcpServerFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoDhcpServerFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoDhcpServerFeatureTemplate)(nil)).Elem()
}

func (o CiscoDhcpServerFeatureTemplateOutput) ToCiscoDhcpServerFeatureTemplateOutput() CiscoDhcpServerFeatureTemplateOutput {
	return o
}

func (o CiscoDhcpServerFeatureTemplateOutput) ToCiscoDhcpServerFeatureTemplateOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateOutput {
	return o
}

// Configure IPv4 prefix range of the DHCP address pool
func (o CiscoDhcpServerFeatureTemplateOutput) AddressPool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.AddressPool }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) AddressPoolVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.AddressPoolVariable }).(pulumi.StringPtrOutput)
}

// Set IP address of default gateway
func (o CiscoDhcpServerFeatureTemplateOutput) DefaultGateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.DefaultGateway }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) DefaultGatewayVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.DefaultGatewayVariable }).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoDhcpServerFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoDhcpServerFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Configure one or more DNS server IP addresses
func (o CiscoDhcpServerFeatureTemplateOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) DnsServersVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.DnsServersVariable }).(pulumi.StringPtrOutput)
}

// Set domain name client uses to resolve hostnames
func (o CiscoDhcpServerFeatureTemplateOutput) DomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.DomainName }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) DomainNameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.DomainNameVariable }).(pulumi.StringPtrOutput)
}

// Configure IPv4 address to exclude from DHCP address pool
func (o CiscoDhcpServerFeatureTemplateOutput) ExcludeAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringArrayOutput { return v.ExcludeAddresses }).(pulumi.StringArrayOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) ExcludeAddressesVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.ExcludeAddressesVariable }).(pulumi.StringPtrOutput)
}

// Set MTU on interface to DHCP client - Range: `68`-`65535`
func (o CiscoDhcpServerFeatureTemplateOutput) InterfaceMtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.IntPtrOutput { return v.InterfaceMtu }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) InterfaceMtuVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceMtuVariable }).(pulumi.StringPtrOutput)
}

// Configure how long a DHCP-assigned IP address is valid - Range: `60`-`31536000` - Default value: `86400`
func (o CiscoDhcpServerFeatureTemplateOutput) LeaseTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.IntPtrOutput { return v.LeaseTime }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) LeaseTimeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.LeaseTimeVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoDhcpServerFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure Options Code
func (o CiscoDhcpServerFeatureTemplateOutput) Options() CiscoDhcpServerFeatureTemplateOptionArrayOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) CiscoDhcpServerFeatureTemplateOptionArrayOutput {
		return v.Options
	}).(CiscoDhcpServerFeatureTemplateOptionArrayOutput)
}

// Configure static IP addresses
func (o CiscoDhcpServerFeatureTemplateOutput) StaticLeases() CiscoDhcpServerFeatureTemplateStaticLeaseArrayOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) CiscoDhcpServerFeatureTemplateStaticLeaseArrayOutput {
		return v.StaticLeases
	}).(CiscoDhcpServerFeatureTemplateStaticLeaseArrayOutput)
}

// The template type
func (o CiscoDhcpServerFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Configure TFTP server IP addresses
func (o CiscoDhcpServerFeatureTemplateOutput) TftpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringArrayOutput { return v.TftpServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o CiscoDhcpServerFeatureTemplateOutput) TftpServersVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.StringPtrOutput { return v.TftpServersVariable }).(pulumi.StringPtrOutput)
}

// The version of the feature template
func (o CiscoDhcpServerFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoDhcpServerFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoDhcpServerFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoDhcpServerFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoDhcpServerFeatureTemplate)(nil)).Elem()
}

func (o CiscoDhcpServerFeatureTemplateArrayOutput) ToCiscoDhcpServerFeatureTemplateArrayOutput() CiscoDhcpServerFeatureTemplateArrayOutput {
	return o
}

func (o CiscoDhcpServerFeatureTemplateArrayOutput) ToCiscoDhcpServerFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateArrayOutput {
	return o
}

func (o CiscoDhcpServerFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoDhcpServerFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoDhcpServerFeatureTemplate {
		return vs[0].([]*CiscoDhcpServerFeatureTemplate)[vs[1].(int)]
	}).(CiscoDhcpServerFeatureTemplateOutput)
}

type CiscoDhcpServerFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoDhcpServerFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoDhcpServerFeatureTemplate)(nil)).Elem()
}

func (o CiscoDhcpServerFeatureTemplateMapOutput) ToCiscoDhcpServerFeatureTemplateMapOutput() CiscoDhcpServerFeatureTemplateMapOutput {
	return o
}

func (o CiscoDhcpServerFeatureTemplateMapOutput) ToCiscoDhcpServerFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoDhcpServerFeatureTemplateMapOutput {
	return o
}

func (o CiscoDhcpServerFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoDhcpServerFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoDhcpServerFeatureTemplate {
		return vs[0].(map[string]*CiscoDhcpServerFeatureTemplate)[vs[1].(string)]
	}).(CiscoDhcpServerFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoDhcpServerFeatureTemplateInput)(nil)).Elem(), &CiscoDhcpServerFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoDhcpServerFeatureTemplateArrayInput)(nil)).Elem(), CiscoDhcpServerFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoDhcpServerFeatureTemplateMapInput)(nil)).Elem(), CiscoDhcpServerFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoDhcpServerFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoDhcpServerFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoDhcpServerFeatureTemplateMapOutput{})
}
