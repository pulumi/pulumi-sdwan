// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a App Probe Class Policy Object .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewAppProbeClassPolicyObject(ctx, "example", &sdwan.AppProbeClassPolicyObjectArgs{
//				Name:            pulumi.String("Example"),
//				ForwardingClass: pulumi.String("FC1"),
//				Mappings: sdwan.AppProbeClassPolicyObjectMappingArray{
//					&sdwan.AppProbeClassPolicyObjectMappingArgs{
//						Color: pulumi.String("blue"),
//						Dscp:  pulumi.Int(8),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/appProbeClassPolicyObject:AppProbeClassPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type AppProbeClassPolicyObject struct {
	pulumi.CustomResourceState

	// Forwarding class name
	ForwardingClass pulumi.StringOutput `pulumi:"forwardingClass"`
	// Color mappings
	Mappings AppProbeClassPolicyObjectMappingArrayOutput `pulumi:"mappings"`
	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewAppProbeClassPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewAppProbeClassPolicyObject(ctx *pulumi.Context,
	name string, args *AppProbeClassPolicyObjectArgs, opts ...pulumi.ResourceOption) (*AppProbeClassPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ForwardingClass == nil {
		return nil, errors.New("invalid value for required argument 'ForwardingClass'")
	}
	if args.Mappings == nil {
		return nil, errors.New("invalid value for required argument 'Mappings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppProbeClassPolicyObject
	err := ctx.RegisterResource("sdwan:index/appProbeClassPolicyObject:AppProbeClassPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppProbeClassPolicyObject gets an existing AppProbeClassPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppProbeClassPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppProbeClassPolicyObjectState, opts ...pulumi.ResourceOption) (*AppProbeClassPolicyObject, error) {
	var resource AppProbeClassPolicyObject
	err := ctx.ReadResource("sdwan:index/appProbeClassPolicyObject:AppProbeClassPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppProbeClassPolicyObject resources.
type appProbeClassPolicyObjectState struct {
	// Forwarding class name
	ForwardingClass *string `pulumi:"forwardingClass"`
	// Color mappings
	Mappings []AppProbeClassPolicyObjectMapping `pulumi:"mappings"`
	// The name of the policy object
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type AppProbeClassPolicyObjectState struct {
	// Forwarding class name
	ForwardingClass pulumi.StringPtrInput
	// Color mappings
	Mappings AppProbeClassPolicyObjectMappingArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (AppProbeClassPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*appProbeClassPolicyObjectState)(nil)).Elem()
}

type appProbeClassPolicyObjectArgs struct {
	// Forwarding class name
	ForwardingClass string `pulumi:"forwardingClass"`
	// Color mappings
	Mappings []AppProbeClassPolicyObjectMapping `pulumi:"mappings"`
	// The name of the policy object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AppProbeClassPolicyObject resource.
type AppProbeClassPolicyObjectArgs struct {
	// Forwarding class name
	ForwardingClass pulumi.StringInput
	// Color mappings
	Mappings AppProbeClassPolicyObjectMappingArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
}

func (AppProbeClassPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appProbeClassPolicyObjectArgs)(nil)).Elem()
}

type AppProbeClassPolicyObjectInput interface {
	pulumi.Input

	ToAppProbeClassPolicyObjectOutput() AppProbeClassPolicyObjectOutput
	ToAppProbeClassPolicyObjectOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectOutput
}

func (*AppProbeClassPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProbeClassPolicyObject)(nil)).Elem()
}

func (i *AppProbeClassPolicyObject) ToAppProbeClassPolicyObjectOutput() AppProbeClassPolicyObjectOutput {
	return i.ToAppProbeClassPolicyObjectOutputWithContext(context.Background())
}

func (i *AppProbeClassPolicyObject) ToAppProbeClassPolicyObjectOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProbeClassPolicyObjectOutput)
}

// AppProbeClassPolicyObjectArrayInput is an input type that accepts AppProbeClassPolicyObjectArray and AppProbeClassPolicyObjectArrayOutput values.
// You can construct a concrete instance of `AppProbeClassPolicyObjectArrayInput` via:
//
//	AppProbeClassPolicyObjectArray{ AppProbeClassPolicyObjectArgs{...} }
type AppProbeClassPolicyObjectArrayInput interface {
	pulumi.Input

	ToAppProbeClassPolicyObjectArrayOutput() AppProbeClassPolicyObjectArrayOutput
	ToAppProbeClassPolicyObjectArrayOutputWithContext(context.Context) AppProbeClassPolicyObjectArrayOutput
}

type AppProbeClassPolicyObjectArray []AppProbeClassPolicyObjectInput

func (AppProbeClassPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProbeClassPolicyObject)(nil)).Elem()
}

func (i AppProbeClassPolicyObjectArray) ToAppProbeClassPolicyObjectArrayOutput() AppProbeClassPolicyObjectArrayOutput {
	return i.ToAppProbeClassPolicyObjectArrayOutputWithContext(context.Background())
}

func (i AppProbeClassPolicyObjectArray) ToAppProbeClassPolicyObjectArrayOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProbeClassPolicyObjectArrayOutput)
}

// AppProbeClassPolicyObjectMapInput is an input type that accepts AppProbeClassPolicyObjectMap and AppProbeClassPolicyObjectMapOutput values.
// You can construct a concrete instance of `AppProbeClassPolicyObjectMapInput` via:
//
//	AppProbeClassPolicyObjectMap{ "key": AppProbeClassPolicyObjectArgs{...} }
type AppProbeClassPolicyObjectMapInput interface {
	pulumi.Input

	ToAppProbeClassPolicyObjectMapOutput() AppProbeClassPolicyObjectMapOutput
	ToAppProbeClassPolicyObjectMapOutputWithContext(context.Context) AppProbeClassPolicyObjectMapOutput
}

type AppProbeClassPolicyObjectMap map[string]AppProbeClassPolicyObjectInput

func (AppProbeClassPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProbeClassPolicyObject)(nil)).Elem()
}

func (i AppProbeClassPolicyObjectMap) ToAppProbeClassPolicyObjectMapOutput() AppProbeClassPolicyObjectMapOutput {
	return i.ToAppProbeClassPolicyObjectMapOutputWithContext(context.Background())
}

func (i AppProbeClassPolicyObjectMap) ToAppProbeClassPolicyObjectMapOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppProbeClassPolicyObjectMapOutput)
}

type AppProbeClassPolicyObjectOutput struct{ *pulumi.OutputState }

func (AppProbeClassPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppProbeClassPolicyObject)(nil)).Elem()
}

func (o AppProbeClassPolicyObjectOutput) ToAppProbeClassPolicyObjectOutput() AppProbeClassPolicyObjectOutput {
	return o
}

func (o AppProbeClassPolicyObjectOutput) ToAppProbeClassPolicyObjectOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectOutput {
	return o
}

// Forwarding class name
func (o AppProbeClassPolicyObjectOutput) ForwardingClass() pulumi.StringOutput {
	return o.ApplyT(func(v *AppProbeClassPolicyObject) pulumi.StringOutput { return v.ForwardingClass }).(pulumi.StringOutput)
}

// Color mappings
func (o AppProbeClassPolicyObjectOutput) Mappings() AppProbeClassPolicyObjectMappingArrayOutput {
	return o.ApplyT(func(v *AppProbeClassPolicyObject) AppProbeClassPolicyObjectMappingArrayOutput { return v.Mappings }).(AppProbeClassPolicyObjectMappingArrayOutput)
}

// The name of the policy object
func (o AppProbeClassPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AppProbeClassPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o AppProbeClassPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *AppProbeClassPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type AppProbeClassPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (AppProbeClassPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppProbeClassPolicyObject)(nil)).Elem()
}

func (o AppProbeClassPolicyObjectArrayOutput) ToAppProbeClassPolicyObjectArrayOutput() AppProbeClassPolicyObjectArrayOutput {
	return o
}

func (o AppProbeClassPolicyObjectArrayOutput) ToAppProbeClassPolicyObjectArrayOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectArrayOutput {
	return o
}

func (o AppProbeClassPolicyObjectArrayOutput) Index(i pulumi.IntInput) AppProbeClassPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppProbeClassPolicyObject {
		return vs[0].([]*AppProbeClassPolicyObject)[vs[1].(int)]
	}).(AppProbeClassPolicyObjectOutput)
}

type AppProbeClassPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (AppProbeClassPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppProbeClassPolicyObject)(nil)).Elem()
}

func (o AppProbeClassPolicyObjectMapOutput) ToAppProbeClassPolicyObjectMapOutput() AppProbeClassPolicyObjectMapOutput {
	return o
}

func (o AppProbeClassPolicyObjectMapOutput) ToAppProbeClassPolicyObjectMapOutputWithContext(ctx context.Context) AppProbeClassPolicyObjectMapOutput {
	return o
}

func (o AppProbeClassPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) AppProbeClassPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppProbeClassPolicyObject {
		return vs[0].(map[string]*AppProbeClassPolicyObject)[vs[1].(string)]
	}).(AppProbeClassPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppProbeClassPolicyObjectInput)(nil)).Elem(), &AppProbeClassPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProbeClassPolicyObjectArrayInput)(nil)).Elem(), AppProbeClassPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppProbeClassPolicyObjectMapInput)(nil)).Elem(), AppProbeClassPolicyObjectMap{})
	pulumi.RegisterOutputType(AppProbeClassPolicyObjectOutput{})
	pulumi.RegisterOutputType(AppProbeClassPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(AppProbeClassPolicyObjectMapOutput{})
}
