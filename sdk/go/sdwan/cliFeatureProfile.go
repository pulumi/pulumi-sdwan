// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a CLI Feature Profile .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCliFeatureProfile(ctx, "example", &sdwan.CliFeatureProfileArgs{
//				Name:        pulumi.String("CLI_FP_1"),
//				Description: pulumi.String("My cli feature profile 1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/cliFeatureProfile:CliFeatureProfile example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CliFeatureProfile struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the cli feature profile
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCliFeatureProfile registers a new resource with the given unique name, arguments, and options.
func NewCliFeatureProfile(ctx *pulumi.Context,
	name string, args *CliFeatureProfileArgs, opts ...pulumi.ResourceOption) (*CliFeatureProfile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CliFeatureProfile
	err := ctx.RegisterResource("sdwan:index/cliFeatureProfile:CliFeatureProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCliFeatureProfile gets an existing CliFeatureProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCliFeatureProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CliFeatureProfileState, opts ...pulumi.ResourceOption) (*CliFeatureProfile, error) {
	var resource CliFeatureProfile
	err := ctx.ReadResource("sdwan:index/cliFeatureProfile:CliFeatureProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CliFeatureProfile resources.
type cliFeatureProfileState struct {
	// Description
	Description *string `pulumi:"description"`
	// The name of the cli feature profile
	Name *string `pulumi:"name"`
}

type CliFeatureProfileState struct {
	// Description
	Description pulumi.StringPtrInput
	// The name of the cli feature profile
	Name pulumi.StringPtrInput
}

func (CliFeatureProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*cliFeatureProfileState)(nil)).Elem()
}

type cliFeatureProfileArgs struct {
	// Description
	Description string `pulumi:"description"`
	// The name of the cli feature profile
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CliFeatureProfile resource.
type CliFeatureProfileArgs struct {
	// Description
	Description pulumi.StringInput
	// The name of the cli feature profile
	Name pulumi.StringPtrInput
}

func (CliFeatureProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cliFeatureProfileArgs)(nil)).Elem()
}

type CliFeatureProfileInput interface {
	pulumi.Input

	ToCliFeatureProfileOutput() CliFeatureProfileOutput
	ToCliFeatureProfileOutputWithContext(ctx context.Context) CliFeatureProfileOutput
}

func (*CliFeatureProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**CliFeatureProfile)(nil)).Elem()
}

func (i *CliFeatureProfile) ToCliFeatureProfileOutput() CliFeatureProfileOutput {
	return i.ToCliFeatureProfileOutputWithContext(context.Background())
}

func (i *CliFeatureProfile) ToCliFeatureProfileOutputWithContext(ctx context.Context) CliFeatureProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliFeatureProfileOutput)
}

// CliFeatureProfileArrayInput is an input type that accepts CliFeatureProfileArray and CliFeatureProfileArrayOutput values.
// You can construct a concrete instance of `CliFeatureProfileArrayInput` via:
//
//	CliFeatureProfileArray{ CliFeatureProfileArgs{...} }
type CliFeatureProfileArrayInput interface {
	pulumi.Input

	ToCliFeatureProfileArrayOutput() CliFeatureProfileArrayOutput
	ToCliFeatureProfileArrayOutputWithContext(context.Context) CliFeatureProfileArrayOutput
}

type CliFeatureProfileArray []CliFeatureProfileInput

func (CliFeatureProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliFeatureProfile)(nil)).Elem()
}

func (i CliFeatureProfileArray) ToCliFeatureProfileArrayOutput() CliFeatureProfileArrayOutput {
	return i.ToCliFeatureProfileArrayOutputWithContext(context.Background())
}

func (i CliFeatureProfileArray) ToCliFeatureProfileArrayOutputWithContext(ctx context.Context) CliFeatureProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliFeatureProfileArrayOutput)
}

// CliFeatureProfileMapInput is an input type that accepts CliFeatureProfileMap and CliFeatureProfileMapOutput values.
// You can construct a concrete instance of `CliFeatureProfileMapInput` via:
//
//	CliFeatureProfileMap{ "key": CliFeatureProfileArgs{...} }
type CliFeatureProfileMapInput interface {
	pulumi.Input

	ToCliFeatureProfileMapOutput() CliFeatureProfileMapOutput
	ToCliFeatureProfileMapOutputWithContext(context.Context) CliFeatureProfileMapOutput
}

type CliFeatureProfileMap map[string]CliFeatureProfileInput

func (CliFeatureProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliFeatureProfile)(nil)).Elem()
}

func (i CliFeatureProfileMap) ToCliFeatureProfileMapOutput() CliFeatureProfileMapOutput {
	return i.ToCliFeatureProfileMapOutputWithContext(context.Background())
}

func (i CliFeatureProfileMap) ToCliFeatureProfileMapOutputWithContext(ctx context.Context) CliFeatureProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliFeatureProfileMapOutput)
}

type CliFeatureProfileOutput struct{ *pulumi.OutputState }

func (CliFeatureProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CliFeatureProfile)(nil)).Elem()
}

func (o CliFeatureProfileOutput) ToCliFeatureProfileOutput() CliFeatureProfileOutput {
	return o
}

func (o CliFeatureProfileOutput) ToCliFeatureProfileOutputWithContext(ctx context.Context) CliFeatureProfileOutput {
	return o
}

// Description
func (o CliFeatureProfileOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CliFeatureProfile) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the cli feature profile
func (o CliFeatureProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CliFeatureProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CliFeatureProfileArrayOutput struct{ *pulumi.OutputState }

func (CliFeatureProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliFeatureProfile)(nil)).Elem()
}

func (o CliFeatureProfileArrayOutput) ToCliFeatureProfileArrayOutput() CliFeatureProfileArrayOutput {
	return o
}

func (o CliFeatureProfileArrayOutput) ToCliFeatureProfileArrayOutputWithContext(ctx context.Context) CliFeatureProfileArrayOutput {
	return o
}

func (o CliFeatureProfileArrayOutput) Index(i pulumi.IntInput) CliFeatureProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CliFeatureProfile {
		return vs[0].([]*CliFeatureProfile)[vs[1].(int)]
	}).(CliFeatureProfileOutput)
}

type CliFeatureProfileMapOutput struct{ *pulumi.OutputState }

func (CliFeatureProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliFeatureProfile)(nil)).Elem()
}

func (o CliFeatureProfileMapOutput) ToCliFeatureProfileMapOutput() CliFeatureProfileMapOutput {
	return o
}

func (o CliFeatureProfileMapOutput) ToCliFeatureProfileMapOutputWithContext(ctx context.Context) CliFeatureProfileMapOutput {
	return o
}

func (o CliFeatureProfileMapOutput) MapIndex(k pulumi.StringInput) CliFeatureProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CliFeatureProfile {
		return vs[0].(map[string]*CliFeatureProfile)[vs[1].(string)]
	}).(CliFeatureProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CliFeatureProfileInput)(nil)).Elem(), &CliFeatureProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliFeatureProfileArrayInput)(nil)).Elem(), CliFeatureProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliFeatureProfileMapInput)(nil)).Elem(), CliFeatureProfileMap{})
	pulumi.RegisterOutputType(CliFeatureProfileOutput{})
	pulumi.RegisterOutputType(CliFeatureProfileArrayOutput{})
	pulumi.RegisterOutputType(CliFeatureProfileMapOutput{})
}
