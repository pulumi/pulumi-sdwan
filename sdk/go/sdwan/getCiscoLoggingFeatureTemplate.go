// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco Logging feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoLoggingFeatureTemplate(ctx, &sdwan.LookupCiscoLoggingFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoLoggingFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoLoggingFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoLoggingFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoLoggingFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoLoggingFeatureTemplate:getCiscoLoggingFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoLoggingFeatureTemplate.
type LookupCiscoLoggingFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoLoggingFeatureTemplate.
type LookupCiscoLoggingFeatureTemplateResult struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable logging to local disk
	DiskLogging bool `pulumi:"diskLogging"`
	// Variable name
	DiskLoggingVariable string `pulumi:"diskLoggingVariable"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Enable logging to remote server
	Ipv4Servers []GetCiscoLoggingFeatureTemplateIpv4Server `pulumi:"ipv4Servers"`
	// Enable logging to remote IPv6 server
	Ipv6Servers []GetCiscoLoggingFeatureTemplateIpv6Server `pulumi:"ipv6Servers"`
	// Set number of syslog files to create before discarding oldest files
	LogRotations int `pulumi:"logRotations"`
	// Variable name
	LogRotationsVariable string `pulumi:"logRotationsVariable"`
	// Set maximum size of file before it is rotated
	MaxSize int `pulumi:"maxSize"`
	// Variable name
	MaxSizeVariable string `pulumi:"maxSizeVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// Configure a TLS profile
	TlsProfiles []GetCiscoLoggingFeatureTemplateTlsProfile `pulumi:"tlsProfiles"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoLoggingFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoLoggingFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoLoggingFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCiscoLoggingFeatureTemplateResult, error) {
			args := v.(LookupCiscoLoggingFeatureTemplateArgs)
			r, err := LookupCiscoLoggingFeatureTemplate(ctx, &args, opts...)
			var s LookupCiscoLoggingFeatureTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCiscoLoggingFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoLoggingFeatureTemplate.
type LookupCiscoLoggingFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoLoggingFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoLoggingFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoLoggingFeatureTemplate.
type LookupCiscoLoggingFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoLoggingFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoLoggingFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoLoggingFeatureTemplateResultOutput) ToLookupCiscoLoggingFeatureTemplateResultOutput() LookupCiscoLoggingFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoLoggingFeatureTemplateResultOutput) ToLookupCiscoLoggingFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoLoggingFeatureTemplateResultOutput {
	return o
}

// The description of the feature template
func (o LookupCiscoLoggingFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoLoggingFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Enable logging to local disk
func (o LookupCiscoLoggingFeatureTemplateResultOutput) DiskLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) bool { return v.DiskLogging }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoLoggingFeatureTemplateResultOutput) DiskLoggingVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.DiskLoggingVariable }).(pulumi.StringOutput)
}

// The id of the feature template
func (o LookupCiscoLoggingFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable logging to remote server
func (o LookupCiscoLoggingFeatureTemplateResultOutput) Ipv4Servers() GetCiscoLoggingFeatureTemplateIpv4ServerArrayOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) []GetCiscoLoggingFeatureTemplateIpv4Server {
		return v.Ipv4Servers
	}).(GetCiscoLoggingFeatureTemplateIpv4ServerArrayOutput)
}

// Enable logging to remote IPv6 server
func (o LookupCiscoLoggingFeatureTemplateResultOutput) Ipv6Servers() GetCiscoLoggingFeatureTemplateIpv6ServerArrayOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) []GetCiscoLoggingFeatureTemplateIpv6Server {
		return v.Ipv6Servers
	}).(GetCiscoLoggingFeatureTemplateIpv6ServerArrayOutput)
}

// Set number of syslog files to create before discarding oldest files
func (o LookupCiscoLoggingFeatureTemplateResultOutput) LogRotations() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) int { return v.LogRotations }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoLoggingFeatureTemplateResultOutput) LogRotationsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.LogRotationsVariable }).(pulumi.StringOutput)
}

// Set maximum size of file before it is rotated
func (o LookupCiscoLoggingFeatureTemplateResultOutput) MaxSize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) int { return v.MaxSize }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoLoggingFeatureTemplateResultOutput) MaxSizeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.MaxSizeVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoLoggingFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoLoggingFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Configure a TLS profile
func (o LookupCiscoLoggingFeatureTemplateResultOutput) TlsProfiles() GetCiscoLoggingFeatureTemplateTlsProfileArrayOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) []GetCiscoLoggingFeatureTemplateTlsProfile {
		return v.TlsProfiles
	}).(GetCiscoLoggingFeatureTemplateTlsProfileArrayOutput)
}

// The version of the feature template
func (o LookupCiscoLoggingFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoLoggingFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoLoggingFeatureTemplateResultOutput{})
}
