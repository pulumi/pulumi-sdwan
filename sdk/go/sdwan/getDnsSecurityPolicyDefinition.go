// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the DNS Security Policy Definition .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupDnsSecurityPolicyDefinition(ctx, &sdwan.LookupDnsSecurityPolicyDefinitionArgs{
//				Id: "f6b2c44c-693c-4763-b010-895aa3d236bd",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupDnsSecurityPolicyDefinition(ctx *pulumi.Context, args *LookupDnsSecurityPolicyDefinitionArgs, opts ...pulumi.InvokeOption) (*LookupDnsSecurityPolicyDefinitionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDnsSecurityPolicyDefinitionResult
	err := ctx.Invoke("sdwan:index/getDnsSecurityPolicyDefinition:getDnsSecurityPolicyDefinition", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDnsSecurityPolicyDefinition.
type LookupDnsSecurityPolicyDefinitionArgs struct {
	// The id of the object
	Id string `pulumi:"id"`
}

// A collection of values returned by getDnsSecurityPolicyDefinition.
type LookupDnsSecurityPolicyDefinitionResult struct {
	// Credentials feature template ID
	CiscoSigCredentialsFeatureTemplateId string `pulumi:"ciscoSigCredentialsFeatureTemplateId"`
	// Credentials feature template version
	CiscoSigCredentialsFeatureTemplateVersion int `pulumi:"ciscoSigCredentialsFeatureTemplateVersion"`
	// Only relevant when `umbrellaDnsDefault` is `false`
	CustomDnsServerIp string `pulumi:"customDnsServerIp"`
	// The description of the policy definition.
	Description string `pulumi:"description"`
	// Should DNSCrypt be enabled
	Dnscrypt bool `pulumi:"dnscrypt"`
	// Local domain bypass list ID
	DomainListId string `pulumi:"domainListId"`
	// Local domain bypass list version
	DomainListVersion int `pulumi:"domainListVersion"`
	// The id of the object
	Id string `pulumi:"id"`
	// Should the local domain bypass list be enabled
	LocalDomainBypassEnabled bool `pulumi:"localDomainBypassEnabled"`
	// Should use match all VPN
	MatchAllVpn bool `pulumi:"matchAllVpn"`
	// The name of the policy definition.
	Name string `pulumi:"name"`
	// Only relevant when `matchAllVpn` is `false`
	TargetVpns []GetDnsSecurityPolicyDefinitionTargetVpn `pulumi:"targetVpns"`
	// Should use umbrella as DNS Server
	UmbrellaDnsDefault bool `pulumi:"umbrellaDnsDefault"`
	// The version of the object
	Version int `pulumi:"version"`
}

func LookupDnsSecurityPolicyDefinitionOutput(ctx *pulumi.Context, args LookupDnsSecurityPolicyDefinitionOutputArgs, opts ...pulumi.InvokeOption) LookupDnsSecurityPolicyDefinitionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDnsSecurityPolicyDefinitionResult, error) {
			args := v.(LookupDnsSecurityPolicyDefinitionArgs)
			r, err := LookupDnsSecurityPolicyDefinition(ctx, &args, opts...)
			var s LookupDnsSecurityPolicyDefinitionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDnsSecurityPolicyDefinitionResultOutput)
}

// A collection of arguments for invoking getDnsSecurityPolicyDefinition.
type LookupDnsSecurityPolicyDefinitionOutputArgs struct {
	// The id of the object
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupDnsSecurityPolicyDefinitionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsSecurityPolicyDefinitionArgs)(nil)).Elem()
}

// A collection of values returned by getDnsSecurityPolicyDefinition.
type LookupDnsSecurityPolicyDefinitionResultOutput struct{ *pulumi.OutputState }

func (LookupDnsSecurityPolicyDefinitionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDnsSecurityPolicyDefinitionResult)(nil)).Elem()
}

func (o LookupDnsSecurityPolicyDefinitionResultOutput) ToLookupDnsSecurityPolicyDefinitionResultOutput() LookupDnsSecurityPolicyDefinitionResultOutput {
	return o
}

func (o LookupDnsSecurityPolicyDefinitionResultOutput) ToLookupDnsSecurityPolicyDefinitionResultOutputWithContext(ctx context.Context) LookupDnsSecurityPolicyDefinitionResultOutput {
	return o
}

// Credentials feature template ID
func (o LookupDnsSecurityPolicyDefinitionResultOutput) CiscoSigCredentialsFeatureTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) string { return v.CiscoSigCredentialsFeatureTemplateId }).(pulumi.StringOutput)
}

// Credentials feature template version
func (o LookupDnsSecurityPolicyDefinitionResultOutput) CiscoSigCredentialsFeatureTemplateVersion() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) int {
		return v.CiscoSigCredentialsFeatureTemplateVersion
	}).(pulumi.IntOutput)
}

// Only relevant when `umbrellaDnsDefault` is `false`
func (o LookupDnsSecurityPolicyDefinitionResultOutput) CustomDnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) string { return v.CustomDnsServerIp }).(pulumi.StringOutput)
}

// The description of the policy definition.
func (o LookupDnsSecurityPolicyDefinitionResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) string { return v.Description }).(pulumi.StringOutput)
}

// Should DNSCrypt be enabled
func (o LookupDnsSecurityPolicyDefinitionResultOutput) Dnscrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) bool { return v.Dnscrypt }).(pulumi.BoolOutput)
}

// Local domain bypass list ID
func (o LookupDnsSecurityPolicyDefinitionResultOutput) DomainListId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) string { return v.DomainListId }).(pulumi.StringOutput)
}

// Local domain bypass list version
func (o LookupDnsSecurityPolicyDefinitionResultOutput) DomainListVersion() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) int { return v.DomainListVersion }).(pulumi.IntOutput)
}

// The id of the object
func (o LookupDnsSecurityPolicyDefinitionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Should the local domain bypass list be enabled
func (o LookupDnsSecurityPolicyDefinitionResultOutput) LocalDomainBypassEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) bool { return v.LocalDomainBypassEnabled }).(pulumi.BoolOutput)
}

// Should use match all VPN
func (o LookupDnsSecurityPolicyDefinitionResultOutput) MatchAllVpn() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) bool { return v.MatchAllVpn }).(pulumi.BoolOutput)
}

// The name of the policy definition.
func (o LookupDnsSecurityPolicyDefinitionResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) string { return v.Name }).(pulumi.StringOutput)
}

// Only relevant when `matchAllVpn` is `false`
func (o LookupDnsSecurityPolicyDefinitionResultOutput) TargetVpns() GetDnsSecurityPolicyDefinitionTargetVpnArrayOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) []GetDnsSecurityPolicyDefinitionTargetVpn {
		return v.TargetVpns
	}).(GetDnsSecurityPolicyDefinitionTargetVpnArrayOutput)
}

// Should use umbrella as DNS Server
func (o LookupDnsSecurityPolicyDefinitionResultOutput) UmbrellaDnsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) bool { return v.UmbrellaDnsDefault }).(pulumi.BoolOutput)
}

// The version of the object
func (o LookupDnsSecurityPolicyDefinitionResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupDnsSecurityPolicyDefinitionResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDnsSecurityPolicyDefinitionResultOutput{})
}
