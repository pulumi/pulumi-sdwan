// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Transport IPv4 ACL Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewTransportIpv4AclFeature(ctx, "example", &sdwan.TransportIpv4AclFeatureArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My Example"),
//				FeatureProfileId: pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				DefaultAction:    pulumi.String("drop"),
//				Sequences: sdwan.TransportIpv4AclFeatureSequenceArray{
//					&sdwan.TransportIpv4AclFeatureSequenceArgs{
//						Sequence_id:   1,
//						Sequence_name: "AccessControlList1",
//						Match_entries: []map[string]interface{}{
//							map[string]interface{}{
//								"dscps": []float64{
//									16,
//								},
//								"packetLength": 1500,
//								"protocols": []float64{
//									1,
//								},
//								"sourcePorts": []map[string]interface{}{
//									map[string]interface{}{
//										"port": 8000,
//									},
//								},
//								"tcpState": "syn",
//							},
//						},
//						Actions: sdwan.TransportIpv4AclFeatureSequenceActionArray{
//							&sdwan.TransportIpv4AclFeatureSequenceActionArgs{
//								AcceptSetDscp:     pulumi.Int(60),
//								AcceptCounterName: pulumi.String("COUNTER_1"),
//								AcceptLog:         pulumi.Bool(false),
//								AcceptSetNextHop:  pulumi.String("1.2.3.4"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "transport_ipv4_acl_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/transportIpv4AclFeature:TransportIpv4AclFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type TransportIpv4AclFeature struct {
	pulumi.CustomResourceState

	// Default Action
	//   - Choices: `drop`, `accept`
	//   - Default value: `drop`
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Access Control List
	Sequences TransportIpv4AclFeatureSequenceArrayOutput `pulumi:"sequences"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTransportIpv4AclFeature registers a new resource with the given unique name, arguments, and options.
func NewTransportIpv4AclFeature(ctx *pulumi.Context,
	name string, args *TransportIpv4AclFeatureArgs, opts ...pulumi.ResourceOption) (*TransportIpv4AclFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransportIpv4AclFeature
	err := ctx.RegisterResource("sdwan:index/transportIpv4AclFeature:TransportIpv4AclFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransportIpv4AclFeature gets an existing TransportIpv4AclFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransportIpv4AclFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransportIpv4AclFeatureState, opts ...pulumi.ResourceOption) (*TransportIpv4AclFeature, error) {
	var resource TransportIpv4AclFeature
	err := ctx.ReadResource("sdwan:index/transportIpv4AclFeature:TransportIpv4AclFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransportIpv4AclFeature resources.
type transportIpv4AclFeatureState struct {
	// Default Action
	//   - Choices: `drop`, `accept`
	//   - Default value: `drop`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Access Control List
	Sequences []TransportIpv4AclFeatureSequence `pulumi:"sequences"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type TransportIpv4AclFeatureState struct {
	// Default Action
	//   - Choices: `drop`, `accept`
	//   - Default value: `drop`
	DefaultAction pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Access Control List
	Sequences TransportIpv4AclFeatureSequenceArrayInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (TransportIpv4AclFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*transportIpv4AclFeatureState)(nil)).Elem()
}

type transportIpv4AclFeatureArgs struct {
	// Default Action
	//   - Choices: `drop`, `accept`
	//   - Default value: `drop`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Access Control List
	Sequences []TransportIpv4AclFeatureSequence `pulumi:"sequences"`
}

// The set of arguments for constructing a TransportIpv4AclFeature resource.
type TransportIpv4AclFeatureArgs struct {
	// Default Action
	//   - Choices: `drop`, `accept`
	//   - Default value: `drop`
	DefaultAction pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Access Control List
	Sequences TransportIpv4AclFeatureSequenceArrayInput
}

func (TransportIpv4AclFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transportIpv4AclFeatureArgs)(nil)).Elem()
}

type TransportIpv4AclFeatureInput interface {
	pulumi.Input

	ToTransportIpv4AclFeatureOutput() TransportIpv4AclFeatureOutput
	ToTransportIpv4AclFeatureOutputWithContext(ctx context.Context) TransportIpv4AclFeatureOutput
}

func (*TransportIpv4AclFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportIpv4AclFeature)(nil)).Elem()
}

func (i *TransportIpv4AclFeature) ToTransportIpv4AclFeatureOutput() TransportIpv4AclFeatureOutput {
	return i.ToTransportIpv4AclFeatureOutputWithContext(context.Background())
}

func (i *TransportIpv4AclFeature) ToTransportIpv4AclFeatureOutputWithContext(ctx context.Context) TransportIpv4AclFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportIpv4AclFeatureOutput)
}

// TransportIpv4AclFeatureArrayInput is an input type that accepts TransportIpv4AclFeatureArray and TransportIpv4AclFeatureArrayOutput values.
// You can construct a concrete instance of `TransportIpv4AclFeatureArrayInput` via:
//
//	TransportIpv4AclFeatureArray{ TransportIpv4AclFeatureArgs{...} }
type TransportIpv4AclFeatureArrayInput interface {
	pulumi.Input

	ToTransportIpv4AclFeatureArrayOutput() TransportIpv4AclFeatureArrayOutput
	ToTransportIpv4AclFeatureArrayOutputWithContext(context.Context) TransportIpv4AclFeatureArrayOutput
}

type TransportIpv4AclFeatureArray []TransportIpv4AclFeatureInput

func (TransportIpv4AclFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransportIpv4AclFeature)(nil)).Elem()
}

func (i TransportIpv4AclFeatureArray) ToTransportIpv4AclFeatureArrayOutput() TransportIpv4AclFeatureArrayOutput {
	return i.ToTransportIpv4AclFeatureArrayOutputWithContext(context.Background())
}

func (i TransportIpv4AclFeatureArray) ToTransportIpv4AclFeatureArrayOutputWithContext(ctx context.Context) TransportIpv4AclFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportIpv4AclFeatureArrayOutput)
}

// TransportIpv4AclFeatureMapInput is an input type that accepts TransportIpv4AclFeatureMap and TransportIpv4AclFeatureMapOutput values.
// You can construct a concrete instance of `TransportIpv4AclFeatureMapInput` via:
//
//	TransportIpv4AclFeatureMap{ "key": TransportIpv4AclFeatureArgs{...} }
type TransportIpv4AclFeatureMapInput interface {
	pulumi.Input

	ToTransportIpv4AclFeatureMapOutput() TransportIpv4AclFeatureMapOutput
	ToTransportIpv4AclFeatureMapOutputWithContext(context.Context) TransportIpv4AclFeatureMapOutput
}

type TransportIpv4AclFeatureMap map[string]TransportIpv4AclFeatureInput

func (TransportIpv4AclFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransportIpv4AclFeature)(nil)).Elem()
}

func (i TransportIpv4AclFeatureMap) ToTransportIpv4AclFeatureMapOutput() TransportIpv4AclFeatureMapOutput {
	return i.ToTransportIpv4AclFeatureMapOutputWithContext(context.Background())
}

func (i TransportIpv4AclFeatureMap) ToTransportIpv4AclFeatureMapOutputWithContext(ctx context.Context) TransportIpv4AclFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportIpv4AclFeatureMapOutput)
}

type TransportIpv4AclFeatureOutput struct{ *pulumi.OutputState }

func (TransportIpv4AclFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportIpv4AclFeature)(nil)).Elem()
}

func (o TransportIpv4AclFeatureOutput) ToTransportIpv4AclFeatureOutput() TransportIpv4AclFeatureOutput {
	return o
}

func (o TransportIpv4AclFeatureOutput) ToTransportIpv4AclFeatureOutputWithContext(ctx context.Context) TransportIpv4AclFeatureOutput {
	return o
}

// Default Action
//   - Choices: `drop`, `accept`
//   - Default value: `drop`
func (o TransportIpv4AclFeatureOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportIpv4AclFeature) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// The description of the Feature
func (o TransportIpv4AclFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportIpv4AclFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o TransportIpv4AclFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportIpv4AclFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o TransportIpv4AclFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportIpv4AclFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Access Control List
func (o TransportIpv4AclFeatureOutput) Sequences() TransportIpv4AclFeatureSequenceArrayOutput {
	return o.ApplyT(func(v *TransportIpv4AclFeature) TransportIpv4AclFeatureSequenceArrayOutput { return v.Sequences }).(TransportIpv4AclFeatureSequenceArrayOutput)
}

// The version of the Feature
func (o TransportIpv4AclFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TransportIpv4AclFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TransportIpv4AclFeatureArrayOutput struct{ *pulumi.OutputState }

func (TransportIpv4AclFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransportIpv4AclFeature)(nil)).Elem()
}

func (o TransportIpv4AclFeatureArrayOutput) ToTransportIpv4AclFeatureArrayOutput() TransportIpv4AclFeatureArrayOutput {
	return o
}

func (o TransportIpv4AclFeatureArrayOutput) ToTransportIpv4AclFeatureArrayOutputWithContext(ctx context.Context) TransportIpv4AclFeatureArrayOutput {
	return o
}

func (o TransportIpv4AclFeatureArrayOutput) Index(i pulumi.IntInput) TransportIpv4AclFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransportIpv4AclFeature {
		return vs[0].([]*TransportIpv4AclFeature)[vs[1].(int)]
	}).(TransportIpv4AclFeatureOutput)
}

type TransportIpv4AclFeatureMapOutput struct{ *pulumi.OutputState }

func (TransportIpv4AclFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransportIpv4AclFeature)(nil)).Elem()
}

func (o TransportIpv4AclFeatureMapOutput) ToTransportIpv4AclFeatureMapOutput() TransportIpv4AclFeatureMapOutput {
	return o
}

func (o TransportIpv4AclFeatureMapOutput) ToTransportIpv4AclFeatureMapOutputWithContext(ctx context.Context) TransportIpv4AclFeatureMapOutput {
	return o
}

func (o TransportIpv4AclFeatureMapOutput) MapIndex(k pulumi.StringInput) TransportIpv4AclFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransportIpv4AclFeature {
		return vs[0].(map[string]*TransportIpv4AclFeature)[vs[1].(string)]
	}).(TransportIpv4AclFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransportIpv4AclFeatureInput)(nil)).Elem(), &TransportIpv4AclFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportIpv4AclFeatureArrayInput)(nil)).Elem(), TransportIpv4AclFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportIpv4AclFeatureMapInput)(nil)).Elem(), TransportIpv4AclFeatureMap{})
	pulumi.RegisterOutputType(TransportIpv4AclFeatureOutput{})
	pulumi.RegisterOutputType(TransportIpv4AclFeatureArrayOutput{})
	pulumi.RegisterOutputType(TransportIpv4AclFeatureMapOutput{})
}
