// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Rewrite Rule Policy Definition .
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/rewriteRulePolicyDefinition:RewriteRulePolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type RewriteRulePolicyDefinition struct {
	pulumi.CustomResourceState

	// The description of the policy definition
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the policy definition
	Name pulumi.StringOutput `pulumi:"name"`
	// List of rules
	Rules RewriteRulePolicyDefinitionRuleArrayOutput `pulumi:"rules"`
	// Type
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewRewriteRulePolicyDefinition registers a new resource with the given unique name, arguments, and options.
func NewRewriteRulePolicyDefinition(ctx *pulumi.Context,
	name string, args *RewriteRulePolicyDefinitionArgs, opts ...pulumi.ResourceOption) (*RewriteRulePolicyDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RewriteRulePolicyDefinition
	err := ctx.RegisterResource("sdwan:index/rewriteRulePolicyDefinition:RewriteRulePolicyDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRewriteRulePolicyDefinition gets an existing RewriteRulePolicyDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRewriteRulePolicyDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RewriteRulePolicyDefinitionState, opts ...pulumi.ResourceOption) (*RewriteRulePolicyDefinition, error) {
	var resource RewriteRulePolicyDefinition
	err := ctx.ReadResource("sdwan:index/rewriteRulePolicyDefinition:RewriteRulePolicyDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RewriteRulePolicyDefinition resources.
type rewriteRulePolicyDefinitionState struct {
	// The description of the policy definition
	Description *string `pulumi:"description"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// List of rules
	Rules []RewriteRulePolicyDefinitionRule `pulumi:"rules"`
	// Type
	Type *string `pulumi:"type"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type RewriteRulePolicyDefinitionState struct {
	// The description of the policy definition
	Description pulumi.StringPtrInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// List of rules
	Rules RewriteRulePolicyDefinitionRuleArrayInput
	// Type
	Type pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (RewriteRulePolicyDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*rewriteRulePolicyDefinitionState)(nil)).Elem()
}

type rewriteRulePolicyDefinitionArgs struct {
	// The description of the policy definition
	Description string `pulumi:"description"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// List of rules
	Rules []RewriteRulePolicyDefinitionRule `pulumi:"rules"`
}

// The set of arguments for constructing a RewriteRulePolicyDefinition resource.
type RewriteRulePolicyDefinitionArgs struct {
	// The description of the policy definition
	Description pulumi.StringInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// List of rules
	Rules RewriteRulePolicyDefinitionRuleArrayInput
}

func (RewriteRulePolicyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rewriteRulePolicyDefinitionArgs)(nil)).Elem()
}

type RewriteRulePolicyDefinitionInput interface {
	pulumi.Input

	ToRewriteRulePolicyDefinitionOutput() RewriteRulePolicyDefinitionOutput
	ToRewriteRulePolicyDefinitionOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionOutput
}

func (*RewriteRulePolicyDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**RewriteRulePolicyDefinition)(nil)).Elem()
}

func (i *RewriteRulePolicyDefinition) ToRewriteRulePolicyDefinitionOutput() RewriteRulePolicyDefinitionOutput {
	return i.ToRewriteRulePolicyDefinitionOutputWithContext(context.Background())
}

func (i *RewriteRulePolicyDefinition) ToRewriteRulePolicyDefinitionOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteRulePolicyDefinitionOutput)
}

// RewriteRulePolicyDefinitionArrayInput is an input type that accepts RewriteRulePolicyDefinitionArray and RewriteRulePolicyDefinitionArrayOutput values.
// You can construct a concrete instance of `RewriteRulePolicyDefinitionArrayInput` via:
//
//	RewriteRulePolicyDefinitionArray{ RewriteRulePolicyDefinitionArgs{...} }
type RewriteRulePolicyDefinitionArrayInput interface {
	pulumi.Input

	ToRewriteRulePolicyDefinitionArrayOutput() RewriteRulePolicyDefinitionArrayOutput
	ToRewriteRulePolicyDefinitionArrayOutputWithContext(context.Context) RewriteRulePolicyDefinitionArrayOutput
}

type RewriteRulePolicyDefinitionArray []RewriteRulePolicyDefinitionInput

func (RewriteRulePolicyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RewriteRulePolicyDefinition)(nil)).Elem()
}

func (i RewriteRulePolicyDefinitionArray) ToRewriteRulePolicyDefinitionArrayOutput() RewriteRulePolicyDefinitionArrayOutput {
	return i.ToRewriteRulePolicyDefinitionArrayOutputWithContext(context.Background())
}

func (i RewriteRulePolicyDefinitionArray) ToRewriteRulePolicyDefinitionArrayOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteRulePolicyDefinitionArrayOutput)
}

// RewriteRulePolicyDefinitionMapInput is an input type that accepts RewriteRulePolicyDefinitionMap and RewriteRulePolicyDefinitionMapOutput values.
// You can construct a concrete instance of `RewriteRulePolicyDefinitionMapInput` via:
//
//	RewriteRulePolicyDefinitionMap{ "key": RewriteRulePolicyDefinitionArgs{...} }
type RewriteRulePolicyDefinitionMapInput interface {
	pulumi.Input

	ToRewriteRulePolicyDefinitionMapOutput() RewriteRulePolicyDefinitionMapOutput
	ToRewriteRulePolicyDefinitionMapOutputWithContext(context.Context) RewriteRulePolicyDefinitionMapOutput
}

type RewriteRulePolicyDefinitionMap map[string]RewriteRulePolicyDefinitionInput

func (RewriteRulePolicyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RewriteRulePolicyDefinition)(nil)).Elem()
}

func (i RewriteRulePolicyDefinitionMap) ToRewriteRulePolicyDefinitionMapOutput() RewriteRulePolicyDefinitionMapOutput {
	return i.ToRewriteRulePolicyDefinitionMapOutputWithContext(context.Background())
}

func (i RewriteRulePolicyDefinitionMap) ToRewriteRulePolicyDefinitionMapOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RewriteRulePolicyDefinitionMapOutput)
}

type RewriteRulePolicyDefinitionOutput struct{ *pulumi.OutputState }

func (RewriteRulePolicyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RewriteRulePolicyDefinition)(nil)).Elem()
}

func (o RewriteRulePolicyDefinitionOutput) ToRewriteRulePolicyDefinitionOutput() RewriteRulePolicyDefinitionOutput {
	return o
}

func (o RewriteRulePolicyDefinitionOutput) ToRewriteRulePolicyDefinitionOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionOutput {
	return o
}

// The description of the policy definition
func (o RewriteRulePolicyDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RewriteRulePolicyDefinition) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the policy definition
func (o RewriteRulePolicyDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RewriteRulePolicyDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of rules
func (o RewriteRulePolicyDefinitionOutput) Rules() RewriteRulePolicyDefinitionRuleArrayOutput {
	return o.ApplyT(func(v *RewriteRulePolicyDefinition) RewriteRulePolicyDefinitionRuleArrayOutput { return v.Rules }).(RewriteRulePolicyDefinitionRuleArrayOutput)
}

// Type
func (o RewriteRulePolicyDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RewriteRulePolicyDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the object
func (o RewriteRulePolicyDefinitionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *RewriteRulePolicyDefinition) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type RewriteRulePolicyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (RewriteRulePolicyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RewriteRulePolicyDefinition)(nil)).Elem()
}

func (o RewriteRulePolicyDefinitionArrayOutput) ToRewriteRulePolicyDefinitionArrayOutput() RewriteRulePolicyDefinitionArrayOutput {
	return o
}

func (o RewriteRulePolicyDefinitionArrayOutput) ToRewriteRulePolicyDefinitionArrayOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionArrayOutput {
	return o
}

func (o RewriteRulePolicyDefinitionArrayOutput) Index(i pulumi.IntInput) RewriteRulePolicyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RewriteRulePolicyDefinition {
		return vs[0].([]*RewriteRulePolicyDefinition)[vs[1].(int)]
	}).(RewriteRulePolicyDefinitionOutput)
}

type RewriteRulePolicyDefinitionMapOutput struct{ *pulumi.OutputState }

func (RewriteRulePolicyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RewriteRulePolicyDefinition)(nil)).Elem()
}

func (o RewriteRulePolicyDefinitionMapOutput) ToRewriteRulePolicyDefinitionMapOutput() RewriteRulePolicyDefinitionMapOutput {
	return o
}

func (o RewriteRulePolicyDefinitionMapOutput) ToRewriteRulePolicyDefinitionMapOutputWithContext(ctx context.Context) RewriteRulePolicyDefinitionMapOutput {
	return o
}

func (o RewriteRulePolicyDefinitionMapOutput) MapIndex(k pulumi.StringInput) RewriteRulePolicyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RewriteRulePolicyDefinition {
		return vs[0].(map[string]*RewriteRulePolicyDefinition)[vs[1].(string)]
	}).(RewriteRulePolicyDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RewriteRulePolicyDefinitionInput)(nil)).Elem(), &RewriteRulePolicyDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*RewriteRulePolicyDefinitionArrayInput)(nil)).Elem(), RewriteRulePolicyDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RewriteRulePolicyDefinitionMapInput)(nil)).Elem(), RewriteRulePolicyDefinitionMap{})
	pulumi.RegisterOutputType(RewriteRulePolicyDefinitionOutput{})
	pulumi.RegisterOutputType(RewriteRulePolicyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(RewriteRulePolicyDefinitionMapOutput{})
}
