// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a System SNMP Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "system_snmp_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/systemSnmpFeature:SystemSnmpFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type SystemSnmpFeature struct {
	pulumi.CustomResourceState

	// Configure SNMP community
	Communities SystemSnmpFeatureCommunityArrayOutput `pulumi:"communities"`
	// Set the contact for this managed node
	ContactPerson pulumi.StringPtrOutput `pulumi:"contactPerson"`
	// Variable name
	ContactPersonVariable pulumi.StringPtrOutput `pulumi:"contactPersonVariable"`
	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// Configure an SNMP group
	Groups SystemSnmpFeatureGroupArrayOutput `pulumi:"groups"`
	// Set the physical location of this managed node
	LocationOfDevice pulumi.StringPtrOutput `pulumi:"locationOfDevice"`
	// Variable name
	LocationOfDeviceVariable pulumi.StringPtrOutput `pulumi:"locationOfDeviceVariable"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Enable or disable SNMP
	//   - Default value: `false`
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable pulumi.StringPtrOutput `pulumi:"shutdownVariable"`
	// Configure SNMP server to receive SNMP traps
	TrapTargetServers SystemSnmpFeatureTrapTargetServerArrayOutput `pulumi:"trapTargetServers"`
	// Configure an SNMP user
	Users SystemSnmpFeatureUserArrayOutput `pulumi:"users"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
	// Configure a view record
	Views SystemSnmpFeatureViewArrayOutput `pulumi:"views"`
}

// NewSystemSnmpFeature registers a new resource with the given unique name, arguments, and options.
func NewSystemSnmpFeature(ctx *pulumi.Context,
	name string, args *SystemSnmpFeatureArgs, opts ...pulumi.ResourceOption) (*SystemSnmpFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemSnmpFeature
	err := ctx.RegisterResource("sdwan:index/systemSnmpFeature:SystemSnmpFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemSnmpFeature gets an existing SystemSnmpFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemSnmpFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemSnmpFeatureState, opts ...pulumi.ResourceOption) (*SystemSnmpFeature, error) {
	var resource SystemSnmpFeature
	err := ctx.ReadResource("sdwan:index/systemSnmpFeature:SystemSnmpFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemSnmpFeature resources.
type systemSnmpFeatureState struct {
	// Configure SNMP community
	Communities []SystemSnmpFeatureCommunity `pulumi:"communities"`
	// Set the contact for this managed node
	ContactPerson *string `pulumi:"contactPerson"`
	// Variable name
	ContactPersonVariable *string `pulumi:"contactPersonVariable"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Configure an SNMP group
	Groups []SystemSnmpFeatureGroup `pulumi:"groups"`
	// Set the physical location of this managed node
	LocationOfDevice *string `pulumi:"locationOfDevice"`
	// Variable name
	LocationOfDeviceVariable *string `pulumi:"locationOfDeviceVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Enable or disable SNMP
	//   - Default value: `false`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// Configure SNMP server to receive SNMP traps
	TrapTargetServers []SystemSnmpFeatureTrapTargetServer `pulumi:"trapTargetServers"`
	// Configure an SNMP user
	Users []SystemSnmpFeatureUser `pulumi:"users"`
	// The version of the Feature
	Version *int `pulumi:"version"`
	// Configure a view record
	Views []SystemSnmpFeatureView `pulumi:"views"`
}

type SystemSnmpFeatureState struct {
	// Configure SNMP community
	Communities SystemSnmpFeatureCommunityArrayInput
	// Set the contact for this managed node
	ContactPerson pulumi.StringPtrInput
	// Variable name
	ContactPersonVariable pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Configure an SNMP group
	Groups SystemSnmpFeatureGroupArrayInput
	// Set the physical location of this managed node
	LocationOfDevice pulumi.StringPtrInput
	// Variable name
	LocationOfDeviceVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Enable or disable SNMP
	//   - Default value: `false`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// Configure SNMP server to receive SNMP traps
	TrapTargetServers SystemSnmpFeatureTrapTargetServerArrayInput
	// Configure an SNMP user
	Users SystemSnmpFeatureUserArrayInput
	// The version of the Feature
	Version pulumi.IntPtrInput
	// Configure a view record
	Views SystemSnmpFeatureViewArrayInput
}

func (SystemSnmpFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSnmpFeatureState)(nil)).Elem()
}

type systemSnmpFeatureArgs struct {
	// Configure SNMP community
	Communities []SystemSnmpFeatureCommunity `pulumi:"communities"`
	// Set the contact for this managed node
	ContactPerson *string `pulumi:"contactPerson"`
	// Variable name
	ContactPersonVariable *string `pulumi:"contactPersonVariable"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// Configure an SNMP group
	Groups []SystemSnmpFeatureGroup `pulumi:"groups"`
	// Set the physical location of this managed node
	LocationOfDevice *string `pulumi:"locationOfDevice"`
	// Variable name
	LocationOfDeviceVariable *string `pulumi:"locationOfDeviceVariable"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Enable or disable SNMP
	//   - Default value: `false`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// Configure SNMP server to receive SNMP traps
	TrapTargetServers []SystemSnmpFeatureTrapTargetServer `pulumi:"trapTargetServers"`
	// Configure an SNMP user
	Users []SystemSnmpFeatureUser `pulumi:"users"`
	// Configure a view record
	Views []SystemSnmpFeatureView `pulumi:"views"`
}

// The set of arguments for constructing a SystemSnmpFeature resource.
type SystemSnmpFeatureArgs struct {
	// Configure SNMP community
	Communities SystemSnmpFeatureCommunityArrayInput
	// Set the contact for this managed node
	ContactPerson pulumi.StringPtrInput
	// Variable name
	ContactPersonVariable pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// Configure an SNMP group
	Groups SystemSnmpFeatureGroupArrayInput
	// Set the physical location of this managed node
	LocationOfDevice pulumi.StringPtrInput
	// Variable name
	LocationOfDeviceVariable pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Enable or disable SNMP
	//   - Default value: `false`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// Configure SNMP server to receive SNMP traps
	TrapTargetServers SystemSnmpFeatureTrapTargetServerArrayInput
	// Configure an SNMP user
	Users SystemSnmpFeatureUserArrayInput
	// Configure a view record
	Views SystemSnmpFeatureViewArrayInput
}

func (SystemSnmpFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemSnmpFeatureArgs)(nil)).Elem()
}

type SystemSnmpFeatureInput interface {
	pulumi.Input

	ToSystemSnmpFeatureOutput() SystemSnmpFeatureOutput
	ToSystemSnmpFeatureOutputWithContext(ctx context.Context) SystemSnmpFeatureOutput
}

func (*SystemSnmpFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSnmpFeature)(nil)).Elem()
}

func (i *SystemSnmpFeature) ToSystemSnmpFeatureOutput() SystemSnmpFeatureOutput {
	return i.ToSystemSnmpFeatureOutputWithContext(context.Background())
}

func (i *SystemSnmpFeature) ToSystemSnmpFeatureOutputWithContext(ctx context.Context) SystemSnmpFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSnmpFeatureOutput)
}

// SystemSnmpFeatureArrayInput is an input type that accepts SystemSnmpFeatureArray and SystemSnmpFeatureArrayOutput values.
// You can construct a concrete instance of `SystemSnmpFeatureArrayInput` via:
//
//	SystemSnmpFeatureArray{ SystemSnmpFeatureArgs{...} }
type SystemSnmpFeatureArrayInput interface {
	pulumi.Input

	ToSystemSnmpFeatureArrayOutput() SystemSnmpFeatureArrayOutput
	ToSystemSnmpFeatureArrayOutputWithContext(context.Context) SystemSnmpFeatureArrayOutput
}

type SystemSnmpFeatureArray []SystemSnmpFeatureInput

func (SystemSnmpFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSnmpFeature)(nil)).Elem()
}

func (i SystemSnmpFeatureArray) ToSystemSnmpFeatureArrayOutput() SystemSnmpFeatureArrayOutput {
	return i.ToSystemSnmpFeatureArrayOutputWithContext(context.Background())
}

func (i SystemSnmpFeatureArray) ToSystemSnmpFeatureArrayOutputWithContext(ctx context.Context) SystemSnmpFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSnmpFeatureArrayOutput)
}

// SystemSnmpFeatureMapInput is an input type that accepts SystemSnmpFeatureMap and SystemSnmpFeatureMapOutput values.
// You can construct a concrete instance of `SystemSnmpFeatureMapInput` via:
//
//	SystemSnmpFeatureMap{ "key": SystemSnmpFeatureArgs{...} }
type SystemSnmpFeatureMapInput interface {
	pulumi.Input

	ToSystemSnmpFeatureMapOutput() SystemSnmpFeatureMapOutput
	ToSystemSnmpFeatureMapOutputWithContext(context.Context) SystemSnmpFeatureMapOutput
}

type SystemSnmpFeatureMap map[string]SystemSnmpFeatureInput

func (SystemSnmpFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSnmpFeature)(nil)).Elem()
}

func (i SystemSnmpFeatureMap) ToSystemSnmpFeatureMapOutput() SystemSnmpFeatureMapOutput {
	return i.ToSystemSnmpFeatureMapOutputWithContext(context.Background())
}

func (i SystemSnmpFeatureMap) ToSystemSnmpFeatureMapOutputWithContext(ctx context.Context) SystemSnmpFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemSnmpFeatureMapOutput)
}

type SystemSnmpFeatureOutput struct{ *pulumi.OutputState }

func (SystemSnmpFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemSnmpFeature)(nil)).Elem()
}

func (o SystemSnmpFeatureOutput) ToSystemSnmpFeatureOutput() SystemSnmpFeatureOutput {
	return o
}

func (o SystemSnmpFeatureOutput) ToSystemSnmpFeatureOutputWithContext(ctx context.Context) SystemSnmpFeatureOutput {
	return o
}

// Configure SNMP community
func (o SystemSnmpFeatureOutput) Communities() SystemSnmpFeatureCommunityArrayOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) SystemSnmpFeatureCommunityArrayOutput { return v.Communities }).(SystemSnmpFeatureCommunityArrayOutput)
}

// Set the contact for this managed node
func (o SystemSnmpFeatureOutput) ContactPerson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringPtrOutput { return v.ContactPerson }).(pulumi.StringPtrOutput)
}

// Variable name
func (o SystemSnmpFeatureOutput) ContactPersonVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringPtrOutput { return v.ContactPersonVariable }).(pulumi.StringPtrOutput)
}

// The description of the Feature
func (o SystemSnmpFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o SystemSnmpFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// Configure an SNMP group
func (o SystemSnmpFeatureOutput) Groups() SystemSnmpFeatureGroupArrayOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) SystemSnmpFeatureGroupArrayOutput { return v.Groups }).(SystemSnmpFeatureGroupArrayOutput)
}

// Set the physical location of this managed node
func (o SystemSnmpFeatureOutput) LocationOfDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringPtrOutput { return v.LocationOfDevice }).(pulumi.StringPtrOutput)
}

// Variable name
func (o SystemSnmpFeatureOutput) LocationOfDeviceVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringPtrOutput { return v.LocationOfDeviceVariable }).(pulumi.StringPtrOutput)
}

// The name of the Feature
func (o SystemSnmpFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable or disable SNMP
//   - Default value: `false`
func (o SystemSnmpFeatureOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o SystemSnmpFeatureOutput) ShutdownVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.StringPtrOutput { return v.ShutdownVariable }).(pulumi.StringPtrOutput)
}

// Configure SNMP server to receive SNMP traps
func (o SystemSnmpFeatureOutput) TrapTargetServers() SystemSnmpFeatureTrapTargetServerArrayOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) SystemSnmpFeatureTrapTargetServerArrayOutput { return v.TrapTargetServers }).(SystemSnmpFeatureTrapTargetServerArrayOutput)
}

// Configure an SNMP user
func (o SystemSnmpFeatureOutput) Users() SystemSnmpFeatureUserArrayOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) SystemSnmpFeatureUserArrayOutput { return v.Users }).(SystemSnmpFeatureUserArrayOutput)
}

// The version of the Feature
func (o SystemSnmpFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Configure a view record
func (o SystemSnmpFeatureOutput) Views() SystemSnmpFeatureViewArrayOutput {
	return o.ApplyT(func(v *SystemSnmpFeature) SystemSnmpFeatureViewArrayOutput { return v.Views }).(SystemSnmpFeatureViewArrayOutput)
}

type SystemSnmpFeatureArrayOutput struct{ *pulumi.OutputState }

func (SystemSnmpFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemSnmpFeature)(nil)).Elem()
}

func (o SystemSnmpFeatureArrayOutput) ToSystemSnmpFeatureArrayOutput() SystemSnmpFeatureArrayOutput {
	return o
}

func (o SystemSnmpFeatureArrayOutput) ToSystemSnmpFeatureArrayOutputWithContext(ctx context.Context) SystemSnmpFeatureArrayOutput {
	return o
}

func (o SystemSnmpFeatureArrayOutput) Index(i pulumi.IntInput) SystemSnmpFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemSnmpFeature {
		return vs[0].([]*SystemSnmpFeature)[vs[1].(int)]
	}).(SystemSnmpFeatureOutput)
}

type SystemSnmpFeatureMapOutput struct{ *pulumi.OutputState }

func (SystemSnmpFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemSnmpFeature)(nil)).Elem()
}

func (o SystemSnmpFeatureMapOutput) ToSystemSnmpFeatureMapOutput() SystemSnmpFeatureMapOutput {
	return o
}

func (o SystemSnmpFeatureMapOutput) ToSystemSnmpFeatureMapOutputWithContext(ctx context.Context) SystemSnmpFeatureMapOutput {
	return o
}

func (o SystemSnmpFeatureMapOutput) MapIndex(k pulumi.StringInput) SystemSnmpFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemSnmpFeature {
		return vs[0].(map[string]*SystemSnmpFeature)[vs[1].(string)]
	}).(SystemSnmpFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSnmpFeatureInput)(nil)).Elem(), &SystemSnmpFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSnmpFeatureArrayInput)(nil)).Elem(), SystemSnmpFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemSnmpFeatureMapInput)(nil)).Elem(), SystemSnmpFeatureMap{})
	pulumi.RegisterOutputType(SystemSnmpFeatureOutput{})
	pulumi.RegisterOutputType(SystemSnmpFeatureArrayOutput{})
	pulumi.RegisterOutputType(SystemSnmpFeatureMapOutput{})
}
