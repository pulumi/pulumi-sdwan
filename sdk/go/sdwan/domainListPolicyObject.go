// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Domain List Policy Object .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewDomainListPolicyObject(ctx, "example", &sdwan.DomainListPolicyObjectArgs{
//				Name: pulumi.String("Example"),
//				Entries: sdwan.DomainListPolicyObjectEntryArray{
//					&sdwan.DomainListPolicyObjectEntryArgs{
//						Domain: pulumi.String(".*.cisco.com"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/domainListPolicyObject:DomainListPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type DomainListPolicyObject struct {
	pulumi.CustomResourceState

	// List of entries
	Entries DomainListPolicyObjectEntryArrayOutput `pulumi:"entries"`
	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewDomainListPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewDomainListPolicyObject(ctx *pulumi.Context,
	name string, args *DomainListPolicyObjectArgs, opts ...pulumi.ResourceOption) (*DomainListPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainListPolicyObject
	err := ctx.RegisterResource("sdwan:index/domainListPolicyObject:DomainListPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainListPolicyObject gets an existing DomainListPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainListPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainListPolicyObjectState, opts ...pulumi.ResourceOption) (*DomainListPolicyObject, error) {
	var resource DomainListPolicyObject
	err := ctx.ReadResource("sdwan:index/domainListPolicyObject:DomainListPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainListPolicyObject resources.
type domainListPolicyObjectState struct {
	// List of entries
	Entries []DomainListPolicyObjectEntry `pulumi:"entries"`
	// The name of the policy object
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type DomainListPolicyObjectState struct {
	// List of entries
	Entries DomainListPolicyObjectEntryArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (DomainListPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainListPolicyObjectState)(nil)).Elem()
}

type domainListPolicyObjectArgs struct {
	// List of entries
	Entries []DomainListPolicyObjectEntry `pulumi:"entries"`
	// The name of the policy object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DomainListPolicyObject resource.
type DomainListPolicyObjectArgs struct {
	// List of entries
	Entries DomainListPolicyObjectEntryArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
}

func (DomainListPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainListPolicyObjectArgs)(nil)).Elem()
}

type DomainListPolicyObjectInput interface {
	pulumi.Input

	ToDomainListPolicyObjectOutput() DomainListPolicyObjectOutput
	ToDomainListPolicyObjectOutputWithContext(ctx context.Context) DomainListPolicyObjectOutput
}

func (*DomainListPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainListPolicyObject)(nil)).Elem()
}

func (i *DomainListPolicyObject) ToDomainListPolicyObjectOutput() DomainListPolicyObjectOutput {
	return i.ToDomainListPolicyObjectOutputWithContext(context.Background())
}

func (i *DomainListPolicyObject) ToDomainListPolicyObjectOutputWithContext(ctx context.Context) DomainListPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListPolicyObjectOutput)
}

// DomainListPolicyObjectArrayInput is an input type that accepts DomainListPolicyObjectArray and DomainListPolicyObjectArrayOutput values.
// You can construct a concrete instance of `DomainListPolicyObjectArrayInput` via:
//
//	DomainListPolicyObjectArray{ DomainListPolicyObjectArgs{...} }
type DomainListPolicyObjectArrayInput interface {
	pulumi.Input

	ToDomainListPolicyObjectArrayOutput() DomainListPolicyObjectArrayOutput
	ToDomainListPolicyObjectArrayOutputWithContext(context.Context) DomainListPolicyObjectArrayOutput
}

type DomainListPolicyObjectArray []DomainListPolicyObjectInput

func (DomainListPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainListPolicyObject)(nil)).Elem()
}

func (i DomainListPolicyObjectArray) ToDomainListPolicyObjectArrayOutput() DomainListPolicyObjectArrayOutput {
	return i.ToDomainListPolicyObjectArrayOutputWithContext(context.Background())
}

func (i DomainListPolicyObjectArray) ToDomainListPolicyObjectArrayOutputWithContext(ctx context.Context) DomainListPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListPolicyObjectArrayOutput)
}

// DomainListPolicyObjectMapInput is an input type that accepts DomainListPolicyObjectMap and DomainListPolicyObjectMapOutput values.
// You can construct a concrete instance of `DomainListPolicyObjectMapInput` via:
//
//	DomainListPolicyObjectMap{ "key": DomainListPolicyObjectArgs{...} }
type DomainListPolicyObjectMapInput interface {
	pulumi.Input

	ToDomainListPolicyObjectMapOutput() DomainListPolicyObjectMapOutput
	ToDomainListPolicyObjectMapOutputWithContext(context.Context) DomainListPolicyObjectMapOutput
}

type DomainListPolicyObjectMap map[string]DomainListPolicyObjectInput

func (DomainListPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainListPolicyObject)(nil)).Elem()
}

func (i DomainListPolicyObjectMap) ToDomainListPolicyObjectMapOutput() DomainListPolicyObjectMapOutput {
	return i.ToDomainListPolicyObjectMapOutputWithContext(context.Background())
}

func (i DomainListPolicyObjectMap) ToDomainListPolicyObjectMapOutputWithContext(ctx context.Context) DomainListPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainListPolicyObjectMapOutput)
}

type DomainListPolicyObjectOutput struct{ *pulumi.OutputState }

func (DomainListPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainListPolicyObject)(nil)).Elem()
}

func (o DomainListPolicyObjectOutput) ToDomainListPolicyObjectOutput() DomainListPolicyObjectOutput {
	return o
}

func (o DomainListPolicyObjectOutput) ToDomainListPolicyObjectOutputWithContext(ctx context.Context) DomainListPolicyObjectOutput {
	return o
}

// List of entries
func (o DomainListPolicyObjectOutput) Entries() DomainListPolicyObjectEntryArrayOutput {
	return o.ApplyT(func(v *DomainListPolicyObject) DomainListPolicyObjectEntryArrayOutput { return v.Entries }).(DomainListPolicyObjectEntryArrayOutput)
}

// The name of the policy object
func (o DomainListPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainListPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o DomainListPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *DomainListPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type DomainListPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (DomainListPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainListPolicyObject)(nil)).Elem()
}

func (o DomainListPolicyObjectArrayOutput) ToDomainListPolicyObjectArrayOutput() DomainListPolicyObjectArrayOutput {
	return o
}

func (o DomainListPolicyObjectArrayOutput) ToDomainListPolicyObjectArrayOutputWithContext(ctx context.Context) DomainListPolicyObjectArrayOutput {
	return o
}

func (o DomainListPolicyObjectArrayOutput) Index(i pulumi.IntInput) DomainListPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainListPolicyObject {
		return vs[0].([]*DomainListPolicyObject)[vs[1].(int)]
	}).(DomainListPolicyObjectOutput)
}

type DomainListPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (DomainListPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainListPolicyObject)(nil)).Elem()
}

func (o DomainListPolicyObjectMapOutput) ToDomainListPolicyObjectMapOutput() DomainListPolicyObjectMapOutput {
	return o
}

func (o DomainListPolicyObjectMapOutput) ToDomainListPolicyObjectMapOutputWithContext(ctx context.Context) DomainListPolicyObjectMapOutput {
	return o
}

func (o DomainListPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) DomainListPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainListPolicyObject {
		return vs[0].(map[string]*DomainListPolicyObject)[vs[1].(string)]
	}).(DomainListPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListPolicyObjectInput)(nil)).Elem(), &DomainListPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListPolicyObjectArrayInput)(nil)).Elem(), DomainListPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainListPolicyObjectMapInput)(nil)).Elem(), DomainListPolicyObjectMap{})
	pulumi.RegisterOutputType(DomainListPolicyObjectOutput{})
	pulumi.RegisterOutputType(DomainListPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(DomainListPolicyObjectMapOutput{})
}
