// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a System Logging profile parcel.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/systemLoggingProfileParcel:SystemLoggingProfileParcel example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type SystemLoggingProfileParcel struct {
	pulumi.CustomResourceState

	// The description of the profile parcel
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable logging to local disk - Default value: `true`
	DiskEnable pulumi.BoolPtrOutput `pulumi:"diskEnable"`
	// Variable name
	DiskEnableVariable pulumi.StringPtrOutput `pulumi:"diskEnableVariable"`
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate pulumi.IntPtrOutput `pulumi:"diskFileRotate"`
	// Variable name
	DiskFileRotateVariable pulumi.StringPtrOutput `pulumi:"diskFileRotateVariable"`
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize pulumi.IntPtrOutput `pulumi:"diskFileSize"`
	// Variable name
	DiskFileSizeVariable pulumi.StringPtrOutput `pulumi:"diskFileSizeVariable"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrOutput `pulumi:"featureProfileId"`
	// Enable logging to remote server
	Ipv4Servers SystemLoggingProfileParcelIpv4ServerArrayOutput `pulumi:"ipv4Servers"`
	// Enable logging to remote ipv6 server
	Ipv6Servers SystemLoggingProfileParcelIpv6ServerArrayOutput `pulumi:"ipv6Servers"`
	// The name of the profile parcel
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure a TLS profile
	TlsProfiles SystemLoggingProfileParcelTlsProfileArrayOutput `pulumi:"tlsProfiles"`
	// The version of the profile parcel
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSystemLoggingProfileParcel registers a new resource with the given unique name, arguments, and options.
func NewSystemLoggingProfileParcel(ctx *pulumi.Context,
	name string, args *SystemLoggingProfileParcelArgs, opts ...pulumi.ResourceOption) (*SystemLoggingProfileParcel, error) {
	if args == nil {
		args = &SystemLoggingProfileParcelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemLoggingProfileParcel
	err := ctx.RegisterResource("sdwan:index/systemLoggingProfileParcel:SystemLoggingProfileParcel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLoggingProfileParcel gets an existing SystemLoggingProfileParcel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLoggingProfileParcel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLoggingProfileParcelState, opts ...pulumi.ResourceOption) (*SystemLoggingProfileParcel, error) {
	var resource SystemLoggingProfileParcel
	err := ctx.ReadResource("sdwan:index/systemLoggingProfileParcel:SystemLoggingProfileParcel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLoggingProfileParcel resources.
type systemLoggingProfileParcelState struct {
	// The description of the profile parcel
	Description *string `pulumi:"description"`
	// Enable logging to local disk - Default value: `true`
	DiskEnable *bool `pulumi:"diskEnable"`
	// Variable name
	DiskEnableVariable *string `pulumi:"diskEnableVariable"`
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate *int `pulumi:"diskFileRotate"`
	// Variable name
	DiskFileRotateVariable *string `pulumi:"diskFileRotateVariable"`
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize *int `pulumi:"diskFileSize"`
	// Variable name
	DiskFileSizeVariable *string `pulumi:"diskFileSizeVariable"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Enable logging to remote server
	Ipv4Servers []SystemLoggingProfileParcelIpv4Server `pulumi:"ipv4Servers"`
	// Enable logging to remote ipv6 server
	Ipv6Servers []SystemLoggingProfileParcelIpv6Server `pulumi:"ipv6Servers"`
	// The name of the profile parcel
	Name *string `pulumi:"name"`
	// Configure a TLS profile
	TlsProfiles []SystemLoggingProfileParcelTlsProfile `pulumi:"tlsProfiles"`
	// The version of the profile parcel
	Version *int `pulumi:"version"`
}

type SystemLoggingProfileParcelState struct {
	// The description of the profile parcel
	Description pulumi.StringPtrInput
	// Enable logging to local disk - Default value: `true`
	DiskEnable pulumi.BoolPtrInput
	// Variable name
	DiskEnableVariable pulumi.StringPtrInput
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate pulumi.IntPtrInput
	// Variable name
	DiskFileRotateVariable pulumi.StringPtrInput
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize pulumi.IntPtrInput
	// Variable name
	DiskFileSizeVariable pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Enable logging to remote server
	Ipv4Servers SystemLoggingProfileParcelIpv4ServerArrayInput
	// Enable logging to remote ipv6 server
	Ipv6Servers SystemLoggingProfileParcelIpv6ServerArrayInput
	// The name of the profile parcel
	Name pulumi.StringPtrInput
	// Configure a TLS profile
	TlsProfiles SystemLoggingProfileParcelTlsProfileArrayInput
	// The version of the profile parcel
	Version pulumi.IntPtrInput
}

func (SystemLoggingProfileParcelState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLoggingProfileParcelState)(nil)).Elem()
}

type systemLoggingProfileParcelArgs struct {
	// The description of the profile parcel
	Description *string `pulumi:"description"`
	// Enable logging to local disk - Default value: `true`
	DiskEnable *bool `pulumi:"diskEnable"`
	// Variable name
	DiskEnableVariable *string `pulumi:"diskEnableVariable"`
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate *int `pulumi:"diskFileRotate"`
	// Variable name
	DiskFileRotateVariable *string `pulumi:"diskFileRotateVariable"`
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize *int `pulumi:"diskFileSize"`
	// Variable name
	DiskFileSizeVariable *string `pulumi:"diskFileSizeVariable"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Enable logging to remote server
	Ipv4Servers []SystemLoggingProfileParcelIpv4Server `pulumi:"ipv4Servers"`
	// Enable logging to remote ipv6 server
	Ipv6Servers []SystemLoggingProfileParcelIpv6Server `pulumi:"ipv6Servers"`
	// The name of the profile parcel
	Name *string `pulumi:"name"`
	// Configure a TLS profile
	TlsProfiles []SystemLoggingProfileParcelTlsProfile `pulumi:"tlsProfiles"`
}

// The set of arguments for constructing a SystemLoggingProfileParcel resource.
type SystemLoggingProfileParcelArgs struct {
	// The description of the profile parcel
	Description pulumi.StringPtrInput
	// Enable logging to local disk - Default value: `true`
	DiskEnable pulumi.BoolPtrInput
	// Variable name
	DiskEnableVariable pulumi.StringPtrInput
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate pulumi.IntPtrInput
	// Variable name
	DiskFileRotateVariable pulumi.StringPtrInput
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize pulumi.IntPtrInput
	// Variable name
	DiskFileSizeVariable pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Enable logging to remote server
	Ipv4Servers SystemLoggingProfileParcelIpv4ServerArrayInput
	// Enable logging to remote ipv6 server
	Ipv6Servers SystemLoggingProfileParcelIpv6ServerArrayInput
	// The name of the profile parcel
	Name pulumi.StringPtrInput
	// Configure a TLS profile
	TlsProfiles SystemLoggingProfileParcelTlsProfileArrayInput
}

func (SystemLoggingProfileParcelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLoggingProfileParcelArgs)(nil)).Elem()
}

type SystemLoggingProfileParcelInput interface {
	pulumi.Input

	ToSystemLoggingProfileParcelOutput() SystemLoggingProfileParcelOutput
	ToSystemLoggingProfileParcelOutputWithContext(ctx context.Context) SystemLoggingProfileParcelOutput
}

func (*SystemLoggingProfileParcel) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLoggingProfileParcel)(nil)).Elem()
}

func (i *SystemLoggingProfileParcel) ToSystemLoggingProfileParcelOutput() SystemLoggingProfileParcelOutput {
	return i.ToSystemLoggingProfileParcelOutputWithContext(context.Background())
}

func (i *SystemLoggingProfileParcel) ToSystemLoggingProfileParcelOutputWithContext(ctx context.Context) SystemLoggingProfileParcelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLoggingProfileParcelOutput)
}

// SystemLoggingProfileParcelArrayInput is an input type that accepts SystemLoggingProfileParcelArray and SystemLoggingProfileParcelArrayOutput values.
// You can construct a concrete instance of `SystemLoggingProfileParcelArrayInput` via:
//
//	SystemLoggingProfileParcelArray{ SystemLoggingProfileParcelArgs{...} }
type SystemLoggingProfileParcelArrayInput interface {
	pulumi.Input

	ToSystemLoggingProfileParcelArrayOutput() SystemLoggingProfileParcelArrayOutput
	ToSystemLoggingProfileParcelArrayOutputWithContext(context.Context) SystemLoggingProfileParcelArrayOutput
}

type SystemLoggingProfileParcelArray []SystemLoggingProfileParcelInput

func (SystemLoggingProfileParcelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLoggingProfileParcel)(nil)).Elem()
}

func (i SystemLoggingProfileParcelArray) ToSystemLoggingProfileParcelArrayOutput() SystemLoggingProfileParcelArrayOutput {
	return i.ToSystemLoggingProfileParcelArrayOutputWithContext(context.Background())
}

func (i SystemLoggingProfileParcelArray) ToSystemLoggingProfileParcelArrayOutputWithContext(ctx context.Context) SystemLoggingProfileParcelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLoggingProfileParcelArrayOutput)
}

// SystemLoggingProfileParcelMapInput is an input type that accepts SystemLoggingProfileParcelMap and SystemLoggingProfileParcelMapOutput values.
// You can construct a concrete instance of `SystemLoggingProfileParcelMapInput` via:
//
//	SystemLoggingProfileParcelMap{ "key": SystemLoggingProfileParcelArgs{...} }
type SystemLoggingProfileParcelMapInput interface {
	pulumi.Input

	ToSystemLoggingProfileParcelMapOutput() SystemLoggingProfileParcelMapOutput
	ToSystemLoggingProfileParcelMapOutputWithContext(context.Context) SystemLoggingProfileParcelMapOutput
}

type SystemLoggingProfileParcelMap map[string]SystemLoggingProfileParcelInput

func (SystemLoggingProfileParcelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLoggingProfileParcel)(nil)).Elem()
}

func (i SystemLoggingProfileParcelMap) ToSystemLoggingProfileParcelMapOutput() SystemLoggingProfileParcelMapOutput {
	return i.ToSystemLoggingProfileParcelMapOutputWithContext(context.Background())
}

func (i SystemLoggingProfileParcelMap) ToSystemLoggingProfileParcelMapOutputWithContext(ctx context.Context) SystemLoggingProfileParcelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLoggingProfileParcelMapOutput)
}

type SystemLoggingProfileParcelOutput struct{ *pulumi.OutputState }

func (SystemLoggingProfileParcelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLoggingProfileParcel)(nil)).Elem()
}

func (o SystemLoggingProfileParcelOutput) ToSystemLoggingProfileParcelOutput() SystemLoggingProfileParcelOutput {
	return o
}

func (o SystemLoggingProfileParcelOutput) ToSystemLoggingProfileParcelOutputWithContext(ctx context.Context) SystemLoggingProfileParcelOutput {
	return o
}

// The description of the profile parcel
func (o SystemLoggingProfileParcelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable logging to local disk - Default value: `true`
func (o SystemLoggingProfileParcelOutput) DiskEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.BoolPtrOutput { return v.DiskEnable }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o SystemLoggingProfileParcelOutput) DiskEnableVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.StringPtrOutput { return v.DiskEnableVariable }).(pulumi.StringPtrOutput)
}

// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
func (o SystemLoggingProfileParcelOutput) DiskFileRotate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.IntPtrOutput { return v.DiskFileRotate }).(pulumi.IntPtrOutput)
}

// Variable name
func (o SystemLoggingProfileParcelOutput) DiskFileRotateVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.StringPtrOutput { return v.DiskFileRotateVariable }).(pulumi.StringPtrOutput)
}

// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
func (o SystemLoggingProfileParcelOutput) DiskFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.IntPtrOutput { return v.DiskFileSize }).(pulumi.IntPtrOutput)
}

// Variable name
func (o SystemLoggingProfileParcelOutput) DiskFileSizeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.StringPtrOutput { return v.DiskFileSizeVariable }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o SystemLoggingProfileParcelOutput) FeatureProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.StringPtrOutput { return v.FeatureProfileId }).(pulumi.StringPtrOutput)
}

// Enable logging to remote server
func (o SystemLoggingProfileParcelOutput) Ipv4Servers() SystemLoggingProfileParcelIpv4ServerArrayOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) SystemLoggingProfileParcelIpv4ServerArrayOutput {
		return v.Ipv4Servers
	}).(SystemLoggingProfileParcelIpv4ServerArrayOutput)
}

// Enable logging to remote ipv6 server
func (o SystemLoggingProfileParcelOutput) Ipv6Servers() SystemLoggingProfileParcelIpv6ServerArrayOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) SystemLoggingProfileParcelIpv6ServerArrayOutput {
		return v.Ipv6Servers
	}).(SystemLoggingProfileParcelIpv6ServerArrayOutput)
}

// The name of the profile parcel
func (o SystemLoggingProfileParcelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure a TLS profile
func (o SystemLoggingProfileParcelOutput) TlsProfiles() SystemLoggingProfileParcelTlsProfileArrayOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) SystemLoggingProfileParcelTlsProfileArrayOutput {
		return v.TlsProfiles
	}).(SystemLoggingProfileParcelTlsProfileArrayOutput)
}

// The version of the profile parcel
func (o SystemLoggingProfileParcelOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLoggingProfileParcel) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SystemLoggingProfileParcelArrayOutput struct{ *pulumi.OutputState }

func (SystemLoggingProfileParcelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLoggingProfileParcel)(nil)).Elem()
}

func (o SystemLoggingProfileParcelArrayOutput) ToSystemLoggingProfileParcelArrayOutput() SystemLoggingProfileParcelArrayOutput {
	return o
}

func (o SystemLoggingProfileParcelArrayOutput) ToSystemLoggingProfileParcelArrayOutputWithContext(ctx context.Context) SystemLoggingProfileParcelArrayOutput {
	return o
}

func (o SystemLoggingProfileParcelArrayOutput) Index(i pulumi.IntInput) SystemLoggingProfileParcelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLoggingProfileParcel {
		return vs[0].([]*SystemLoggingProfileParcel)[vs[1].(int)]
	}).(SystemLoggingProfileParcelOutput)
}

type SystemLoggingProfileParcelMapOutput struct{ *pulumi.OutputState }

func (SystemLoggingProfileParcelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLoggingProfileParcel)(nil)).Elem()
}

func (o SystemLoggingProfileParcelMapOutput) ToSystemLoggingProfileParcelMapOutput() SystemLoggingProfileParcelMapOutput {
	return o
}

func (o SystemLoggingProfileParcelMapOutput) ToSystemLoggingProfileParcelMapOutputWithContext(ctx context.Context) SystemLoggingProfileParcelMapOutput {
	return o
}

func (o SystemLoggingProfileParcelMapOutput) MapIndex(k pulumi.StringInput) SystemLoggingProfileParcelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLoggingProfileParcel {
		return vs[0].(map[string]*SystemLoggingProfileParcel)[vs[1].(string)]
	}).(SystemLoggingProfileParcelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLoggingProfileParcelInput)(nil)).Elem(), &SystemLoggingProfileParcel{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLoggingProfileParcelArrayInput)(nil)).Elem(), SystemLoggingProfileParcelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLoggingProfileParcelMapInput)(nil)).Elem(), SystemLoggingProfileParcelMap{})
	pulumi.RegisterOutputType(SystemLoggingProfileParcelOutput{})
	pulumi.RegisterOutputType(SystemLoggingProfileParcelArrayOutput{})
	pulumi.RegisterOutputType(SystemLoggingProfileParcelMapOutput{})
}
