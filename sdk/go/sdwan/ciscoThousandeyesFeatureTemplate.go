// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco ThousandEyes feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/ciscoThousandeyesFeatureTemplate:CiscoThousandeyesFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoThousandeyesFeatureTemplate struct {
	pulumi.CustomResourceState

	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
	// Virtual application Instance
	VirtualApplications CiscoThousandeyesFeatureTemplateVirtualApplicationArrayOutput `pulumi:"virtualApplications"`
}

// NewCiscoThousandeyesFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoThousandeyesFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoThousandeyesFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoThousandeyesFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoThousandeyesFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoThousandeyesFeatureTemplate:CiscoThousandeyesFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoThousandeyesFeatureTemplate gets an existing CiscoThousandeyesFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoThousandeyesFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoThousandeyesFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoThousandeyesFeatureTemplate, error) {
	var resource CiscoThousandeyesFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoThousandeyesFeatureTemplate:CiscoThousandeyesFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoThousandeyesFeatureTemplate resources.
type ciscoThousandeyesFeatureTemplateState struct {
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
	// Virtual application Instance
	VirtualApplications []CiscoThousandeyesFeatureTemplateVirtualApplication `pulumi:"virtualApplications"`
}

type CiscoThousandeyesFeatureTemplateState struct {
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
	// Virtual application Instance
	VirtualApplications CiscoThousandeyesFeatureTemplateVirtualApplicationArrayInput
}

func (CiscoThousandeyesFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoThousandeyesFeatureTemplateState)(nil)).Elem()
}

type ciscoThousandeyesFeatureTemplateArgs struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Virtual application Instance
	VirtualApplications []CiscoThousandeyesFeatureTemplateVirtualApplication `pulumi:"virtualApplications"`
}

// The set of arguments for constructing a CiscoThousandeyesFeatureTemplate resource.
type CiscoThousandeyesFeatureTemplateArgs struct {
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Virtual application Instance
	VirtualApplications CiscoThousandeyesFeatureTemplateVirtualApplicationArrayInput
}

func (CiscoThousandeyesFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoThousandeyesFeatureTemplateArgs)(nil)).Elem()
}

type CiscoThousandeyesFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoThousandeyesFeatureTemplateOutput() CiscoThousandeyesFeatureTemplateOutput
	ToCiscoThousandeyesFeatureTemplateOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateOutput
}

func (*CiscoThousandeyesFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoThousandeyesFeatureTemplate)(nil)).Elem()
}

func (i *CiscoThousandeyesFeatureTemplate) ToCiscoThousandeyesFeatureTemplateOutput() CiscoThousandeyesFeatureTemplateOutput {
	return i.ToCiscoThousandeyesFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoThousandeyesFeatureTemplate) ToCiscoThousandeyesFeatureTemplateOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoThousandeyesFeatureTemplateOutput)
}

// CiscoThousandeyesFeatureTemplateArrayInput is an input type that accepts CiscoThousandeyesFeatureTemplateArray and CiscoThousandeyesFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoThousandeyesFeatureTemplateArrayInput` via:
//
//	CiscoThousandeyesFeatureTemplateArray{ CiscoThousandeyesFeatureTemplateArgs{...} }
type CiscoThousandeyesFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoThousandeyesFeatureTemplateArrayOutput() CiscoThousandeyesFeatureTemplateArrayOutput
	ToCiscoThousandeyesFeatureTemplateArrayOutputWithContext(context.Context) CiscoThousandeyesFeatureTemplateArrayOutput
}

type CiscoThousandeyesFeatureTemplateArray []CiscoThousandeyesFeatureTemplateInput

func (CiscoThousandeyesFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoThousandeyesFeatureTemplate)(nil)).Elem()
}

func (i CiscoThousandeyesFeatureTemplateArray) ToCiscoThousandeyesFeatureTemplateArrayOutput() CiscoThousandeyesFeatureTemplateArrayOutput {
	return i.ToCiscoThousandeyesFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoThousandeyesFeatureTemplateArray) ToCiscoThousandeyesFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoThousandeyesFeatureTemplateArrayOutput)
}

// CiscoThousandeyesFeatureTemplateMapInput is an input type that accepts CiscoThousandeyesFeatureTemplateMap and CiscoThousandeyesFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoThousandeyesFeatureTemplateMapInput` via:
//
//	CiscoThousandeyesFeatureTemplateMap{ "key": CiscoThousandeyesFeatureTemplateArgs{...} }
type CiscoThousandeyesFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoThousandeyesFeatureTemplateMapOutput() CiscoThousandeyesFeatureTemplateMapOutput
	ToCiscoThousandeyesFeatureTemplateMapOutputWithContext(context.Context) CiscoThousandeyesFeatureTemplateMapOutput
}

type CiscoThousandeyesFeatureTemplateMap map[string]CiscoThousandeyesFeatureTemplateInput

func (CiscoThousandeyesFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoThousandeyesFeatureTemplate)(nil)).Elem()
}

func (i CiscoThousandeyesFeatureTemplateMap) ToCiscoThousandeyesFeatureTemplateMapOutput() CiscoThousandeyesFeatureTemplateMapOutput {
	return i.ToCiscoThousandeyesFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoThousandeyesFeatureTemplateMap) ToCiscoThousandeyesFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoThousandeyesFeatureTemplateMapOutput)
}

type CiscoThousandeyesFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoThousandeyesFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoThousandeyesFeatureTemplate)(nil)).Elem()
}

func (o CiscoThousandeyesFeatureTemplateOutput) ToCiscoThousandeyesFeatureTemplateOutput() CiscoThousandeyesFeatureTemplateOutput {
	return o
}

func (o CiscoThousandeyesFeatureTemplateOutput) ToCiscoThousandeyesFeatureTemplateOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateOutput {
	return o
}

// The description of the feature template
func (o CiscoThousandeyesFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoThousandeyesFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoThousandeyesFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoThousandeyesFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// The name of the feature template
func (o CiscoThousandeyesFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoThousandeyesFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template type
func (o CiscoThousandeyesFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoThousandeyesFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CiscoThousandeyesFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoThousandeyesFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Virtual application Instance
func (o CiscoThousandeyesFeatureTemplateOutput) VirtualApplications() CiscoThousandeyesFeatureTemplateVirtualApplicationArrayOutput {
	return o.ApplyT(func(v *CiscoThousandeyesFeatureTemplate) CiscoThousandeyesFeatureTemplateVirtualApplicationArrayOutput {
		return v.VirtualApplications
	}).(CiscoThousandeyesFeatureTemplateVirtualApplicationArrayOutput)
}

type CiscoThousandeyesFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoThousandeyesFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoThousandeyesFeatureTemplate)(nil)).Elem()
}

func (o CiscoThousandeyesFeatureTemplateArrayOutput) ToCiscoThousandeyesFeatureTemplateArrayOutput() CiscoThousandeyesFeatureTemplateArrayOutput {
	return o
}

func (o CiscoThousandeyesFeatureTemplateArrayOutput) ToCiscoThousandeyesFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateArrayOutput {
	return o
}

func (o CiscoThousandeyesFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoThousandeyesFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoThousandeyesFeatureTemplate {
		return vs[0].([]*CiscoThousandeyesFeatureTemplate)[vs[1].(int)]
	}).(CiscoThousandeyesFeatureTemplateOutput)
}

type CiscoThousandeyesFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoThousandeyesFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoThousandeyesFeatureTemplate)(nil)).Elem()
}

func (o CiscoThousandeyesFeatureTemplateMapOutput) ToCiscoThousandeyesFeatureTemplateMapOutput() CiscoThousandeyesFeatureTemplateMapOutput {
	return o
}

func (o CiscoThousandeyesFeatureTemplateMapOutput) ToCiscoThousandeyesFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoThousandeyesFeatureTemplateMapOutput {
	return o
}

func (o CiscoThousandeyesFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoThousandeyesFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoThousandeyesFeatureTemplate {
		return vs[0].(map[string]*CiscoThousandeyesFeatureTemplate)[vs[1].(string)]
	}).(CiscoThousandeyesFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoThousandeyesFeatureTemplateInput)(nil)).Elem(), &CiscoThousandeyesFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoThousandeyesFeatureTemplateArrayInput)(nil)).Elem(), CiscoThousandeyesFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoThousandeyesFeatureTemplateMapInput)(nil)).Elem(), CiscoThousandeyesFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoThousandeyesFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoThousandeyesFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoThousandeyesFeatureTemplateMapOutput{})
}
