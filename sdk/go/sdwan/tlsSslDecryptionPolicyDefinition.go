// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a TLS SSL Decryption Policy Definition .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewTlsSslDecryptionPolicyDefinition(ctx, "example", &sdwan.TlsSslDecryptionPolicyDefinitionArgs{
//				Name:          pulumi.String("Example"),
//				Description:   pulumi.String("My description"),
//				Mode:          pulumi.String("security"),
//				DefaultAction: pulumi.String("noIntent"),
//				NetworkRules: sdwan.TlsSslDecryptionPolicyDefinitionNetworkRuleArray{
//					&sdwan.TlsSslDecryptionPolicyDefinitionNetworkRuleArgs{
//						Base_action: "doNotDecrypt",
//						Rule_id:     4,
//						Rule_name:   "Example",
//						Rule_type:   "sslDecryption",
//						Source_and_destination_configuration: []map[string]interface{}{
//							map[string]interface{}{
//								"option": "destinationIp",
//								"value":  "10.0.0.0/12",
//							},
//						},
//					},
//				},
//				SslDecryptionEnabled:        pulumi.String("true"),
//				ExpiredCertificate:          pulumi.String("drop"),
//				UntrustedCertificate:        pulumi.String("drop"),
//				CertificateRevocationStatus: pulumi.String("none"),
//				UnknownRevocationStatus:     pulumi.String("drop"),
//				UnsupportedProtocolVersions: pulumi.String("drop"),
//				UnsupportedCipherSuites:     pulumi.String("drop"),
//				FailureMode:                 pulumi.String("close"),
//				RsaKeyPairModulus:           pulumi.String("2048"),
//				EcKeyType:                   pulumi.String("P384"),
//				CertificateLifetimeInDays:   pulumi.Int(1),
//				MinimalTlsVersion:           pulumi.String("TLSv1.2"),
//				UseDefaultCaCertBundle:      pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type TlsSslDecryptionPolicyDefinition struct {
	pulumi.CustomResourceState

	// Certificate Lifetime(in Days)
	CertificateLifetimeInDays pulumi.IntPtrOutput `pulumi:"certificateLifetimeInDays"`
	// Certificate revocation status
	//   - Choices: `ocsp`, `none`
	CertificateRevocationStatus pulumi.StringPtrOutput `pulumi:"certificateRevocationStatus"`
	// Default action (applies when `mode` set to `security`)
	//   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// The description of the policy definition.
	Description pulumi.StringOutput `pulumi:"description"`
	// EC Key Type
	//   - Choices: `P256`, `P384`, `P521`
	EcKeyType pulumi.StringPtrOutput `pulumi:"ecKeyType"`
	// Expired certificate action
	//   - Choices: `drop`, `decrypt`
	ExpiredCertificate pulumi.StringPtrOutput `pulumi:"expiredCertificate"`
	// Failure mode
	//   - Choices: `open`, `close`
	FailureMode pulumi.StringPtrOutput `pulumi:"failureMode"`
	// Minimal TLS Version
	//   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
	MinimalTlsVersion pulumi.StringPtrOutput `pulumi:"minimalTlsVersion"`
	// The policy mode
	//   - Choices: `security`, `unified`
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name of the policy definition.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of network rules (applies when `mode` set to `security`)
	NetworkRules TlsSslDecryptionPolicyDefinitionNetworkRuleArrayOutput `pulumi:"networkRules"`
	// RSA key pair modules
	//   - Choices: `1024`, `2048`, `4096`
	RsaKeyPairModulus pulumi.StringPtrOutput `pulumi:"rsaKeyPairModulus"`
	// SSL decryption enabled
	SslDecryptionEnabled pulumi.StringPtrOutput `pulumi:"sslDecryptionEnabled"`
	// Unknown revocation status action
	//   - Choices: `drop`, `decrypt`
	UnknownRevocationStatus pulumi.StringPtrOutput `pulumi:"unknownRevocationStatus"`
	// Unsupported cipher suites action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedCipherSuites pulumi.StringPtrOutput `pulumi:"unsupportedCipherSuites"`
	// Unsupported protocol versions action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedProtocolVersions pulumi.StringPtrOutput `pulumi:"unsupportedProtocolVersions"`
	// Untrusted certificate action
	//   - Choices: `drop`, `decrypt`
	UntrustedCertificate pulumi.StringPtrOutput `pulumi:"untrustedCertificate"`
	// List of url rules (applies when `mode` set to `security`)
	UrlRules TlsSslDecryptionPolicyDefinitionUrlRuleArrayOutput `pulumi:"urlRules"`
	// Use default CA certificate bundle
	UseDefaultCaCertBundle pulumi.BoolPtrOutput `pulumi:"useDefaultCaCertBundle"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTlsSslDecryptionPolicyDefinition registers a new resource with the given unique name, arguments, and options.
func NewTlsSslDecryptionPolicyDefinition(ctx *pulumi.Context,
	name string, args *TlsSslDecryptionPolicyDefinitionArgs, opts ...pulumi.ResourceOption) (*TlsSslDecryptionPolicyDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsSslDecryptionPolicyDefinition
	err := ctx.RegisterResource("sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsSslDecryptionPolicyDefinition gets an existing TlsSslDecryptionPolicyDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsSslDecryptionPolicyDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsSslDecryptionPolicyDefinitionState, opts ...pulumi.ResourceOption) (*TlsSslDecryptionPolicyDefinition, error) {
	var resource TlsSslDecryptionPolicyDefinition
	err := ctx.ReadResource("sdwan:index/tlsSslDecryptionPolicyDefinition:TlsSslDecryptionPolicyDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsSslDecryptionPolicyDefinition resources.
type tlsSslDecryptionPolicyDefinitionState struct {
	// Certificate Lifetime(in Days)
	CertificateLifetimeInDays *int `pulumi:"certificateLifetimeInDays"`
	// Certificate revocation status
	//   - Choices: `ocsp`, `none`
	CertificateRevocationStatus *string `pulumi:"certificateRevocationStatus"`
	// Default action (applies when `mode` set to `security`)
	//   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the policy definition.
	Description *string `pulumi:"description"`
	// EC Key Type
	//   - Choices: `P256`, `P384`, `P521`
	EcKeyType *string `pulumi:"ecKeyType"`
	// Expired certificate action
	//   - Choices: `drop`, `decrypt`
	ExpiredCertificate *string `pulumi:"expiredCertificate"`
	// Failure mode
	//   - Choices: `open`, `close`
	FailureMode *string `pulumi:"failureMode"`
	// Minimal TLS Version
	//   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
	MinimalTlsVersion *string `pulumi:"minimalTlsVersion"`
	// The policy mode
	//   - Choices: `security`, `unified`
	Mode *string `pulumi:"mode"`
	// The name of the policy definition.
	Name *string `pulumi:"name"`
	// List of network rules (applies when `mode` set to `security`)
	NetworkRules []TlsSslDecryptionPolicyDefinitionNetworkRule `pulumi:"networkRules"`
	// RSA key pair modules
	//   - Choices: `1024`, `2048`, `4096`
	RsaKeyPairModulus *string `pulumi:"rsaKeyPairModulus"`
	// SSL decryption enabled
	SslDecryptionEnabled *string `pulumi:"sslDecryptionEnabled"`
	// Unknown revocation status action
	//   - Choices: `drop`, `decrypt`
	UnknownRevocationStatus *string `pulumi:"unknownRevocationStatus"`
	// Unsupported cipher suites action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedCipherSuites *string `pulumi:"unsupportedCipherSuites"`
	// Unsupported protocol versions action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedProtocolVersions *string `pulumi:"unsupportedProtocolVersions"`
	// Untrusted certificate action
	//   - Choices: `drop`, `decrypt`
	UntrustedCertificate *string `pulumi:"untrustedCertificate"`
	// List of url rules (applies when `mode` set to `security`)
	UrlRules []TlsSslDecryptionPolicyDefinitionUrlRule `pulumi:"urlRules"`
	// Use default CA certificate bundle
	UseDefaultCaCertBundle *bool `pulumi:"useDefaultCaCertBundle"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type TlsSslDecryptionPolicyDefinitionState struct {
	// Certificate Lifetime(in Days)
	CertificateLifetimeInDays pulumi.IntPtrInput
	// Certificate revocation status
	//   - Choices: `ocsp`, `none`
	CertificateRevocationStatus pulumi.StringPtrInput
	// Default action (applies when `mode` set to `security`)
	//   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
	DefaultAction pulumi.StringPtrInput
	// The description of the policy definition.
	Description pulumi.StringPtrInput
	// EC Key Type
	//   - Choices: `P256`, `P384`, `P521`
	EcKeyType pulumi.StringPtrInput
	// Expired certificate action
	//   - Choices: `drop`, `decrypt`
	ExpiredCertificate pulumi.StringPtrInput
	// Failure mode
	//   - Choices: `open`, `close`
	FailureMode pulumi.StringPtrInput
	// Minimal TLS Version
	//   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
	MinimalTlsVersion pulumi.StringPtrInput
	// The policy mode
	//   - Choices: `security`, `unified`
	Mode pulumi.StringPtrInput
	// The name of the policy definition.
	Name pulumi.StringPtrInput
	// List of network rules (applies when `mode` set to `security`)
	NetworkRules TlsSslDecryptionPolicyDefinitionNetworkRuleArrayInput
	// RSA key pair modules
	//   - Choices: `1024`, `2048`, `4096`
	RsaKeyPairModulus pulumi.StringPtrInput
	// SSL decryption enabled
	SslDecryptionEnabled pulumi.StringPtrInput
	// Unknown revocation status action
	//   - Choices: `drop`, `decrypt`
	UnknownRevocationStatus pulumi.StringPtrInput
	// Unsupported cipher suites action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedCipherSuites pulumi.StringPtrInput
	// Unsupported protocol versions action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedProtocolVersions pulumi.StringPtrInput
	// Untrusted certificate action
	//   - Choices: `drop`, `decrypt`
	UntrustedCertificate pulumi.StringPtrInput
	// List of url rules (applies when `mode` set to `security`)
	UrlRules TlsSslDecryptionPolicyDefinitionUrlRuleArrayInput
	// Use default CA certificate bundle
	UseDefaultCaCertBundle pulumi.BoolPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (TlsSslDecryptionPolicyDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsSslDecryptionPolicyDefinitionState)(nil)).Elem()
}

type tlsSslDecryptionPolicyDefinitionArgs struct {
	// Certificate Lifetime(in Days)
	CertificateLifetimeInDays *int `pulumi:"certificateLifetimeInDays"`
	// Certificate revocation status
	//   - Choices: `ocsp`, `none`
	CertificateRevocationStatus *string `pulumi:"certificateRevocationStatus"`
	// Default action (applies when `mode` set to `security`)
	//   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the policy definition.
	Description string `pulumi:"description"`
	// EC Key Type
	//   - Choices: `P256`, `P384`, `P521`
	EcKeyType *string `pulumi:"ecKeyType"`
	// Expired certificate action
	//   - Choices: `drop`, `decrypt`
	ExpiredCertificate *string `pulumi:"expiredCertificate"`
	// Failure mode
	//   - Choices: `open`, `close`
	FailureMode *string `pulumi:"failureMode"`
	// Minimal TLS Version
	//   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
	MinimalTlsVersion *string `pulumi:"minimalTlsVersion"`
	// The policy mode
	//   - Choices: `security`, `unified`
	Mode *string `pulumi:"mode"`
	// The name of the policy definition.
	Name *string `pulumi:"name"`
	// List of network rules (applies when `mode` set to `security`)
	NetworkRules []TlsSslDecryptionPolicyDefinitionNetworkRule `pulumi:"networkRules"`
	// RSA key pair modules
	//   - Choices: `1024`, `2048`, `4096`
	RsaKeyPairModulus *string `pulumi:"rsaKeyPairModulus"`
	// SSL decryption enabled
	SslDecryptionEnabled *string `pulumi:"sslDecryptionEnabled"`
	// Unknown revocation status action
	//   - Choices: `drop`, `decrypt`
	UnknownRevocationStatus *string `pulumi:"unknownRevocationStatus"`
	// Unsupported cipher suites action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedCipherSuites *string `pulumi:"unsupportedCipherSuites"`
	// Unsupported protocol versions action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedProtocolVersions *string `pulumi:"unsupportedProtocolVersions"`
	// Untrusted certificate action
	//   - Choices: `drop`, `decrypt`
	UntrustedCertificate *string `pulumi:"untrustedCertificate"`
	// List of url rules (applies when `mode` set to `security`)
	UrlRules []TlsSslDecryptionPolicyDefinitionUrlRule `pulumi:"urlRules"`
	// Use default CA certificate bundle
	UseDefaultCaCertBundle *bool `pulumi:"useDefaultCaCertBundle"`
}

// The set of arguments for constructing a TlsSslDecryptionPolicyDefinition resource.
type TlsSslDecryptionPolicyDefinitionArgs struct {
	// Certificate Lifetime(in Days)
	CertificateLifetimeInDays pulumi.IntPtrInput
	// Certificate revocation status
	//   - Choices: `ocsp`, `none`
	CertificateRevocationStatus pulumi.StringPtrInput
	// Default action (applies when `mode` set to `security`)
	//   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
	DefaultAction pulumi.StringPtrInput
	// The description of the policy definition.
	Description pulumi.StringInput
	// EC Key Type
	//   - Choices: `P256`, `P384`, `P521`
	EcKeyType pulumi.StringPtrInput
	// Expired certificate action
	//   - Choices: `drop`, `decrypt`
	ExpiredCertificate pulumi.StringPtrInput
	// Failure mode
	//   - Choices: `open`, `close`
	FailureMode pulumi.StringPtrInput
	// Minimal TLS Version
	//   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
	MinimalTlsVersion pulumi.StringPtrInput
	// The policy mode
	//   - Choices: `security`, `unified`
	Mode pulumi.StringPtrInput
	// The name of the policy definition.
	Name pulumi.StringPtrInput
	// List of network rules (applies when `mode` set to `security`)
	NetworkRules TlsSslDecryptionPolicyDefinitionNetworkRuleArrayInput
	// RSA key pair modules
	//   - Choices: `1024`, `2048`, `4096`
	RsaKeyPairModulus pulumi.StringPtrInput
	// SSL decryption enabled
	SslDecryptionEnabled pulumi.StringPtrInput
	// Unknown revocation status action
	//   - Choices: `drop`, `decrypt`
	UnknownRevocationStatus pulumi.StringPtrInput
	// Unsupported cipher suites action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedCipherSuites pulumi.StringPtrInput
	// Unsupported protocol versions action
	//   - Choices: `drop`, `no-decrypt`
	UnsupportedProtocolVersions pulumi.StringPtrInput
	// Untrusted certificate action
	//   - Choices: `drop`, `decrypt`
	UntrustedCertificate pulumi.StringPtrInput
	// List of url rules (applies when `mode` set to `security`)
	UrlRules TlsSslDecryptionPolicyDefinitionUrlRuleArrayInput
	// Use default CA certificate bundle
	UseDefaultCaCertBundle pulumi.BoolPtrInput
}

func (TlsSslDecryptionPolicyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsSslDecryptionPolicyDefinitionArgs)(nil)).Elem()
}

type TlsSslDecryptionPolicyDefinitionInput interface {
	pulumi.Input

	ToTlsSslDecryptionPolicyDefinitionOutput() TlsSslDecryptionPolicyDefinitionOutput
	ToTlsSslDecryptionPolicyDefinitionOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionOutput
}

func (*TlsSslDecryptionPolicyDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsSslDecryptionPolicyDefinition)(nil)).Elem()
}

func (i *TlsSslDecryptionPolicyDefinition) ToTlsSslDecryptionPolicyDefinitionOutput() TlsSslDecryptionPolicyDefinitionOutput {
	return i.ToTlsSslDecryptionPolicyDefinitionOutputWithContext(context.Background())
}

func (i *TlsSslDecryptionPolicyDefinition) ToTlsSslDecryptionPolicyDefinitionOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSslDecryptionPolicyDefinitionOutput)
}

// TlsSslDecryptionPolicyDefinitionArrayInput is an input type that accepts TlsSslDecryptionPolicyDefinitionArray and TlsSslDecryptionPolicyDefinitionArrayOutput values.
// You can construct a concrete instance of `TlsSslDecryptionPolicyDefinitionArrayInput` via:
//
//	TlsSslDecryptionPolicyDefinitionArray{ TlsSslDecryptionPolicyDefinitionArgs{...} }
type TlsSslDecryptionPolicyDefinitionArrayInput interface {
	pulumi.Input

	ToTlsSslDecryptionPolicyDefinitionArrayOutput() TlsSslDecryptionPolicyDefinitionArrayOutput
	ToTlsSslDecryptionPolicyDefinitionArrayOutputWithContext(context.Context) TlsSslDecryptionPolicyDefinitionArrayOutput
}

type TlsSslDecryptionPolicyDefinitionArray []TlsSslDecryptionPolicyDefinitionInput

func (TlsSslDecryptionPolicyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsSslDecryptionPolicyDefinition)(nil)).Elem()
}

func (i TlsSslDecryptionPolicyDefinitionArray) ToTlsSslDecryptionPolicyDefinitionArrayOutput() TlsSslDecryptionPolicyDefinitionArrayOutput {
	return i.ToTlsSslDecryptionPolicyDefinitionArrayOutputWithContext(context.Background())
}

func (i TlsSslDecryptionPolicyDefinitionArray) ToTlsSslDecryptionPolicyDefinitionArrayOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSslDecryptionPolicyDefinitionArrayOutput)
}

// TlsSslDecryptionPolicyDefinitionMapInput is an input type that accepts TlsSslDecryptionPolicyDefinitionMap and TlsSslDecryptionPolicyDefinitionMapOutput values.
// You can construct a concrete instance of `TlsSslDecryptionPolicyDefinitionMapInput` via:
//
//	TlsSslDecryptionPolicyDefinitionMap{ "key": TlsSslDecryptionPolicyDefinitionArgs{...} }
type TlsSslDecryptionPolicyDefinitionMapInput interface {
	pulumi.Input

	ToTlsSslDecryptionPolicyDefinitionMapOutput() TlsSslDecryptionPolicyDefinitionMapOutput
	ToTlsSslDecryptionPolicyDefinitionMapOutputWithContext(context.Context) TlsSslDecryptionPolicyDefinitionMapOutput
}

type TlsSslDecryptionPolicyDefinitionMap map[string]TlsSslDecryptionPolicyDefinitionInput

func (TlsSslDecryptionPolicyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsSslDecryptionPolicyDefinition)(nil)).Elem()
}

func (i TlsSslDecryptionPolicyDefinitionMap) ToTlsSslDecryptionPolicyDefinitionMapOutput() TlsSslDecryptionPolicyDefinitionMapOutput {
	return i.ToTlsSslDecryptionPolicyDefinitionMapOutputWithContext(context.Background())
}

func (i TlsSslDecryptionPolicyDefinitionMap) ToTlsSslDecryptionPolicyDefinitionMapOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSslDecryptionPolicyDefinitionMapOutput)
}

type TlsSslDecryptionPolicyDefinitionOutput struct{ *pulumi.OutputState }

func (TlsSslDecryptionPolicyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsSslDecryptionPolicyDefinition)(nil)).Elem()
}

func (o TlsSslDecryptionPolicyDefinitionOutput) ToTlsSslDecryptionPolicyDefinitionOutput() TlsSslDecryptionPolicyDefinitionOutput {
	return o
}

func (o TlsSslDecryptionPolicyDefinitionOutput) ToTlsSslDecryptionPolicyDefinitionOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionOutput {
	return o
}

// Certificate Lifetime(in Days)
func (o TlsSslDecryptionPolicyDefinitionOutput) CertificateLifetimeInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.IntPtrOutput { return v.CertificateLifetimeInDays }).(pulumi.IntPtrOutput)
}

// Certificate revocation status
//   - Choices: `ocsp`, `none`
func (o TlsSslDecryptionPolicyDefinitionOutput) CertificateRevocationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.CertificateRevocationStatus }).(pulumi.StringPtrOutput)
}

// Default action (applies when `mode` set to `security`)
//   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
func (o TlsSslDecryptionPolicyDefinitionOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// The description of the policy definition.
func (o TlsSslDecryptionPolicyDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// EC Key Type
//   - Choices: `P256`, `P384`, `P521`
func (o TlsSslDecryptionPolicyDefinitionOutput) EcKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.EcKeyType }).(pulumi.StringPtrOutput)
}

// Expired certificate action
//   - Choices: `drop`, `decrypt`
func (o TlsSslDecryptionPolicyDefinitionOutput) ExpiredCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.ExpiredCertificate }).(pulumi.StringPtrOutput)
}

// Failure mode
//   - Choices: `open`, `close`
func (o TlsSslDecryptionPolicyDefinitionOutput) FailureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.FailureMode }).(pulumi.StringPtrOutput)
}

// Minimal TLS Version
//   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
func (o TlsSslDecryptionPolicyDefinitionOutput) MinimalTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.MinimalTlsVersion }).(pulumi.StringPtrOutput)
}

// The policy mode
//   - Choices: `security`, `unified`
func (o TlsSslDecryptionPolicyDefinitionOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name of the policy definition.
func (o TlsSslDecryptionPolicyDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of network rules (applies when `mode` set to `security`)
func (o TlsSslDecryptionPolicyDefinitionOutput) NetworkRules() TlsSslDecryptionPolicyDefinitionNetworkRuleArrayOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) TlsSslDecryptionPolicyDefinitionNetworkRuleArrayOutput {
		return v.NetworkRules
	}).(TlsSslDecryptionPolicyDefinitionNetworkRuleArrayOutput)
}

// RSA key pair modules
//   - Choices: `1024`, `2048`, `4096`
func (o TlsSslDecryptionPolicyDefinitionOutput) RsaKeyPairModulus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.RsaKeyPairModulus }).(pulumi.StringPtrOutput)
}

// SSL decryption enabled
func (o TlsSslDecryptionPolicyDefinitionOutput) SslDecryptionEnabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.SslDecryptionEnabled }).(pulumi.StringPtrOutput)
}

// Unknown revocation status action
//   - Choices: `drop`, `decrypt`
func (o TlsSslDecryptionPolicyDefinitionOutput) UnknownRevocationStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.UnknownRevocationStatus }).(pulumi.StringPtrOutput)
}

// Unsupported cipher suites action
//   - Choices: `drop`, `no-decrypt`
func (o TlsSslDecryptionPolicyDefinitionOutput) UnsupportedCipherSuites() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.UnsupportedCipherSuites }).(pulumi.StringPtrOutput)
}

// Unsupported protocol versions action
//   - Choices: `drop`, `no-decrypt`
func (o TlsSslDecryptionPolicyDefinitionOutput) UnsupportedProtocolVersions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.UnsupportedProtocolVersions }).(pulumi.StringPtrOutput)
}

// Untrusted certificate action
//   - Choices: `drop`, `decrypt`
func (o TlsSslDecryptionPolicyDefinitionOutput) UntrustedCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.StringPtrOutput { return v.UntrustedCertificate }).(pulumi.StringPtrOutput)
}

// List of url rules (applies when `mode` set to `security`)
func (o TlsSslDecryptionPolicyDefinitionOutput) UrlRules() TlsSslDecryptionPolicyDefinitionUrlRuleArrayOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) TlsSslDecryptionPolicyDefinitionUrlRuleArrayOutput {
		return v.UrlRules
	}).(TlsSslDecryptionPolicyDefinitionUrlRuleArrayOutput)
}

// Use default CA certificate bundle
func (o TlsSslDecryptionPolicyDefinitionOutput) UseDefaultCaCertBundle() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.BoolPtrOutput { return v.UseDefaultCaCertBundle }).(pulumi.BoolPtrOutput)
}

// The version of the object
func (o TlsSslDecryptionPolicyDefinitionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TlsSslDecryptionPolicyDefinition) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TlsSslDecryptionPolicyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (TlsSslDecryptionPolicyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsSslDecryptionPolicyDefinition)(nil)).Elem()
}

func (o TlsSslDecryptionPolicyDefinitionArrayOutput) ToTlsSslDecryptionPolicyDefinitionArrayOutput() TlsSslDecryptionPolicyDefinitionArrayOutput {
	return o
}

func (o TlsSslDecryptionPolicyDefinitionArrayOutput) ToTlsSslDecryptionPolicyDefinitionArrayOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionArrayOutput {
	return o
}

func (o TlsSslDecryptionPolicyDefinitionArrayOutput) Index(i pulumi.IntInput) TlsSslDecryptionPolicyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsSslDecryptionPolicyDefinition {
		return vs[0].([]*TlsSslDecryptionPolicyDefinition)[vs[1].(int)]
	}).(TlsSslDecryptionPolicyDefinitionOutput)
}

type TlsSslDecryptionPolicyDefinitionMapOutput struct{ *pulumi.OutputState }

func (TlsSslDecryptionPolicyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsSslDecryptionPolicyDefinition)(nil)).Elem()
}

func (o TlsSslDecryptionPolicyDefinitionMapOutput) ToTlsSslDecryptionPolicyDefinitionMapOutput() TlsSslDecryptionPolicyDefinitionMapOutput {
	return o
}

func (o TlsSslDecryptionPolicyDefinitionMapOutput) ToTlsSslDecryptionPolicyDefinitionMapOutputWithContext(ctx context.Context) TlsSslDecryptionPolicyDefinitionMapOutput {
	return o
}

func (o TlsSslDecryptionPolicyDefinitionMapOutput) MapIndex(k pulumi.StringInput) TlsSslDecryptionPolicyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsSslDecryptionPolicyDefinition {
		return vs[0].(map[string]*TlsSslDecryptionPolicyDefinition)[vs[1].(string)]
	}).(TlsSslDecryptionPolicyDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSslDecryptionPolicyDefinitionInput)(nil)).Elem(), &TlsSslDecryptionPolicyDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSslDecryptionPolicyDefinitionArrayInput)(nil)).Elem(), TlsSslDecryptionPolicyDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSslDecryptionPolicyDefinitionMapInput)(nil)).Elem(), TlsSslDecryptionPolicyDefinitionMap{})
	pulumi.RegisterOutputType(TlsSslDecryptionPolicyDefinitionOutput{})
	pulumi.RegisterOutputType(TlsSslDecryptionPolicyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(TlsSslDecryptionPolicyDefinitionMapOutput{})
}
