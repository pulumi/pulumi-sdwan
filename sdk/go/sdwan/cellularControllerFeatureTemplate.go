// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cellular Controller feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CellularControllerFeatureTemplate struct {
	pulumi.CustomResourceState

	// Cellular interface name
	CellularInterfaceId pulumi.StringPtrOutput `pulumi:"cellularInterfaceId"`
	// Variable name
	CellularInterfaceIdVariable pulumi.StringPtrOutput `pulumi:"cellularInterfaceIdVariable"`
	// Data Profile List
	DataProfiles CellularControllerFeatureTemplateDataProfileArrayOutput `pulumi:"dataProfiles"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Enable/Disable Firmware Auto Sim
	//   - Default value: `true`
	FirmwareAutoSim pulumi.BoolPtrOutput `pulumi:"firmwareAutoSim"`
	// Variable name
	FirmwareAutoSimVariable pulumi.StringPtrOutput `pulumi:"firmwareAutoSimVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Set primary SIM slot
	//   - Range: `0`-`255`
	PrimarySimSlot pulumi.IntPtrOutput `pulumi:"primarySimSlot"`
	// Variable name
	PrimarySimSlotVariable pulumi.StringPtrOutput `pulumi:"primarySimSlotVariable"`
	// Set SIM failover retries
	//   - Range: `0`-`65535`
	SimFailoverRetries pulumi.IntPtrOutput `pulumi:"simFailoverRetries"`
	// Variable name
	SimFailoverRetriesVariable pulumi.StringPtrOutput `pulumi:"simFailoverRetriesVariable"`
	// Set SIM failover timeout in minutes
	//   - Range: `3`-`7`
	SimFailoverTimeout pulumi.IntPtrOutput `pulumi:"simFailoverTimeout"`
	// Variable name
	SimFailoverTimeoutVariable pulumi.StringPtrOutput `pulumi:"simFailoverTimeoutVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCellularControllerFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCellularControllerFeatureTemplate(ctx *pulumi.Context,
	name string, args *CellularControllerFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CellularControllerFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CellularControllerFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCellularControllerFeatureTemplate gets an existing CellularControllerFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCellularControllerFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CellularControllerFeatureTemplateState, opts ...pulumi.ResourceOption) (*CellularControllerFeatureTemplate, error) {
	var resource CellularControllerFeatureTemplate
	err := ctx.ReadResource("sdwan:index/cellularControllerFeatureTemplate:CellularControllerFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CellularControllerFeatureTemplate resources.
type cellularControllerFeatureTemplateState struct {
	// Cellular interface name
	CellularInterfaceId *string `pulumi:"cellularInterfaceId"`
	// Variable name
	CellularInterfaceIdVariable *string `pulumi:"cellularInterfaceIdVariable"`
	// Data Profile List
	DataProfiles []CellularControllerFeatureTemplateDataProfile `pulumi:"dataProfiles"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable/Disable Firmware Auto Sim
	//   - Default value: `true`
	FirmwareAutoSim *bool `pulumi:"firmwareAutoSim"`
	// Variable name
	FirmwareAutoSimVariable *string `pulumi:"firmwareAutoSimVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set primary SIM slot
	//   - Range: `0`-`255`
	PrimarySimSlot *int `pulumi:"primarySimSlot"`
	// Variable name
	PrimarySimSlotVariable *string `pulumi:"primarySimSlotVariable"`
	// Set SIM failover retries
	//   - Range: `0`-`65535`
	SimFailoverRetries *int `pulumi:"simFailoverRetries"`
	// Variable name
	SimFailoverRetriesVariable *string `pulumi:"simFailoverRetriesVariable"`
	// Set SIM failover timeout in minutes
	//   - Range: `3`-`7`
	SimFailoverTimeout *int `pulumi:"simFailoverTimeout"`
	// Variable name
	SimFailoverTimeoutVariable *string `pulumi:"simFailoverTimeoutVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CellularControllerFeatureTemplateState struct {
	// Cellular interface name
	CellularInterfaceId pulumi.StringPtrInput
	// Variable name
	CellularInterfaceIdVariable pulumi.StringPtrInput
	// Data Profile List
	DataProfiles CellularControllerFeatureTemplateDataProfileArrayInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Enable/Disable Firmware Auto Sim
	//   - Default value: `true`
	FirmwareAutoSim pulumi.BoolPtrInput
	// Variable name
	FirmwareAutoSimVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set primary SIM slot
	//   - Range: `0`-`255`
	PrimarySimSlot pulumi.IntPtrInput
	// Variable name
	PrimarySimSlotVariable pulumi.StringPtrInput
	// Set SIM failover retries
	//   - Range: `0`-`65535`
	SimFailoverRetries pulumi.IntPtrInput
	// Variable name
	SimFailoverRetriesVariable pulumi.StringPtrInput
	// Set SIM failover timeout in minutes
	//   - Range: `3`-`7`
	SimFailoverTimeout pulumi.IntPtrInput
	// Variable name
	SimFailoverTimeoutVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CellularControllerFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularControllerFeatureTemplateState)(nil)).Elem()
}

type cellularControllerFeatureTemplateArgs struct {
	// Cellular interface name
	CellularInterfaceId *string `pulumi:"cellularInterfaceId"`
	// Variable name
	CellularInterfaceIdVariable *string `pulumi:"cellularInterfaceIdVariable"`
	// Data Profile List
	DataProfiles []CellularControllerFeatureTemplateDataProfile `pulumi:"dataProfiles"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable/Disable Firmware Auto Sim
	//   - Default value: `true`
	FirmwareAutoSim *bool `pulumi:"firmwareAutoSim"`
	// Variable name
	FirmwareAutoSimVariable *string `pulumi:"firmwareAutoSimVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set primary SIM slot
	//   - Range: `0`-`255`
	PrimarySimSlot *int `pulumi:"primarySimSlot"`
	// Variable name
	PrimarySimSlotVariable *string `pulumi:"primarySimSlotVariable"`
	// Set SIM failover retries
	//   - Range: `0`-`65535`
	SimFailoverRetries *int `pulumi:"simFailoverRetries"`
	// Variable name
	SimFailoverRetriesVariable *string `pulumi:"simFailoverRetriesVariable"`
	// Set SIM failover timeout in minutes
	//   - Range: `3`-`7`
	SimFailoverTimeout *int `pulumi:"simFailoverTimeout"`
	// Variable name
	SimFailoverTimeoutVariable *string `pulumi:"simFailoverTimeoutVariable"`
}

// The set of arguments for constructing a CellularControllerFeatureTemplate resource.
type CellularControllerFeatureTemplateArgs struct {
	// Cellular interface name
	CellularInterfaceId pulumi.StringPtrInput
	// Variable name
	CellularInterfaceIdVariable pulumi.StringPtrInput
	// Data Profile List
	DataProfiles CellularControllerFeatureTemplateDataProfileArrayInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Enable/Disable Firmware Auto Sim
	//   - Default value: `true`
	FirmwareAutoSim pulumi.BoolPtrInput
	// Variable name
	FirmwareAutoSimVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set primary SIM slot
	//   - Range: `0`-`255`
	PrimarySimSlot pulumi.IntPtrInput
	// Variable name
	PrimarySimSlotVariable pulumi.StringPtrInput
	// Set SIM failover retries
	//   - Range: `0`-`65535`
	SimFailoverRetries pulumi.IntPtrInput
	// Variable name
	SimFailoverRetriesVariable pulumi.StringPtrInput
	// Set SIM failover timeout in minutes
	//   - Range: `3`-`7`
	SimFailoverTimeout pulumi.IntPtrInput
	// Variable name
	SimFailoverTimeoutVariable pulumi.StringPtrInput
}

func (CellularControllerFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cellularControllerFeatureTemplateArgs)(nil)).Elem()
}

type CellularControllerFeatureTemplateInput interface {
	pulumi.Input

	ToCellularControllerFeatureTemplateOutput() CellularControllerFeatureTemplateOutput
	ToCellularControllerFeatureTemplateOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateOutput
}

func (*CellularControllerFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularControllerFeatureTemplate)(nil)).Elem()
}

func (i *CellularControllerFeatureTemplate) ToCellularControllerFeatureTemplateOutput() CellularControllerFeatureTemplateOutput {
	return i.ToCellularControllerFeatureTemplateOutputWithContext(context.Background())
}

func (i *CellularControllerFeatureTemplate) ToCellularControllerFeatureTemplateOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularControllerFeatureTemplateOutput)
}

// CellularControllerFeatureTemplateArrayInput is an input type that accepts CellularControllerFeatureTemplateArray and CellularControllerFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CellularControllerFeatureTemplateArrayInput` via:
//
//	CellularControllerFeatureTemplateArray{ CellularControllerFeatureTemplateArgs{...} }
type CellularControllerFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCellularControllerFeatureTemplateArrayOutput() CellularControllerFeatureTemplateArrayOutput
	ToCellularControllerFeatureTemplateArrayOutputWithContext(context.Context) CellularControllerFeatureTemplateArrayOutput
}

type CellularControllerFeatureTemplateArray []CellularControllerFeatureTemplateInput

func (CellularControllerFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularControllerFeatureTemplate)(nil)).Elem()
}

func (i CellularControllerFeatureTemplateArray) ToCellularControllerFeatureTemplateArrayOutput() CellularControllerFeatureTemplateArrayOutput {
	return i.ToCellularControllerFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CellularControllerFeatureTemplateArray) ToCellularControllerFeatureTemplateArrayOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularControllerFeatureTemplateArrayOutput)
}

// CellularControllerFeatureTemplateMapInput is an input type that accepts CellularControllerFeatureTemplateMap and CellularControllerFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CellularControllerFeatureTemplateMapInput` via:
//
//	CellularControllerFeatureTemplateMap{ "key": CellularControllerFeatureTemplateArgs{...} }
type CellularControllerFeatureTemplateMapInput interface {
	pulumi.Input

	ToCellularControllerFeatureTemplateMapOutput() CellularControllerFeatureTemplateMapOutput
	ToCellularControllerFeatureTemplateMapOutputWithContext(context.Context) CellularControllerFeatureTemplateMapOutput
}

type CellularControllerFeatureTemplateMap map[string]CellularControllerFeatureTemplateInput

func (CellularControllerFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularControllerFeatureTemplate)(nil)).Elem()
}

func (i CellularControllerFeatureTemplateMap) ToCellularControllerFeatureTemplateMapOutput() CellularControllerFeatureTemplateMapOutput {
	return i.ToCellularControllerFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CellularControllerFeatureTemplateMap) ToCellularControllerFeatureTemplateMapOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CellularControllerFeatureTemplateMapOutput)
}

type CellularControllerFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CellularControllerFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CellularControllerFeatureTemplate)(nil)).Elem()
}

func (o CellularControllerFeatureTemplateOutput) ToCellularControllerFeatureTemplateOutput() CellularControllerFeatureTemplateOutput {
	return o
}

func (o CellularControllerFeatureTemplateOutput) ToCellularControllerFeatureTemplateOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateOutput {
	return o
}

// Cellular interface name
func (o CellularControllerFeatureTemplateOutput) CellularInterfaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringPtrOutput { return v.CellularInterfaceId }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CellularControllerFeatureTemplateOutput) CellularInterfaceIdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringPtrOutput {
		return v.CellularInterfaceIdVariable
	}).(pulumi.StringPtrOutput)
}

// Data Profile List
func (o CellularControllerFeatureTemplateOutput) DataProfiles() CellularControllerFeatureTemplateDataProfileArrayOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) CellularControllerFeatureTemplateDataProfileArrayOutput {
		return v.DataProfiles
	}).(CellularControllerFeatureTemplateDataProfileArrayOutput)
}

// The description of the feature template
func (o CellularControllerFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CellularControllerFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Enable/Disable Firmware Auto Sim
//   - Default value: `true`
func (o CellularControllerFeatureTemplateOutput) FirmwareAutoSim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.BoolPtrOutput { return v.FirmwareAutoSim }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CellularControllerFeatureTemplateOutput) FirmwareAutoSimVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringPtrOutput { return v.FirmwareAutoSimVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CellularControllerFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set primary SIM slot
//   - Range: `0`-`255`
func (o CellularControllerFeatureTemplateOutput) PrimarySimSlot() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.IntPtrOutput { return v.PrimarySimSlot }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CellularControllerFeatureTemplateOutput) PrimarySimSlotVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringPtrOutput { return v.PrimarySimSlotVariable }).(pulumi.StringPtrOutput)
}

// Set SIM failover retries
//   - Range: `0`-`65535`
func (o CellularControllerFeatureTemplateOutput) SimFailoverRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.IntPtrOutput { return v.SimFailoverRetries }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CellularControllerFeatureTemplateOutput) SimFailoverRetriesVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringPtrOutput { return v.SimFailoverRetriesVariable }).(pulumi.StringPtrOutput)
}

// Set SIM failover timeout in minutes
//   - Range: `3`-`7`
func (o CellularControllerFeatureTemplateOutput) SimFailoverTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.IntPtrOutput { return v.SimFailoverTimeout }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CellularControllerFeatureTemplateOutput) SimFailoverTimeoutVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringPtrOutput { return v.SimFailoverTimeoutVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CellularControllerFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CellularControllerFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CellularControllerFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CellularControllerFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CellularControllerFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CellularControllerFeatureTemplate)(nil)).Elem()
}

func (o CellularControllerFeatureTemplateArrayOutput) ToCellularControllerFeatureTemplateArrayOutput() CellularControllerFeatureTemplateArrayOutput {
	return o
}

func (o CellularControllerFeatureTemplateArrayOutput) ToCellularControllerFeatureTemplateArrayOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateArrayOutput {
	return o
}

func (o CellularControllerFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CellularControllerFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CellularControllerFeatureTemplate {
		return vs[0].([]*CellularControllerFeatureTemplate)[vs[1].(int)]
	}).(CellularControllerFeatureTemplateOutput)
}

type CellularControllerFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CellularControllerFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CellularControllerFeatureTemplate)(nil)).Elem()
}

func (o CellularControllerFeatureTemplateMapOutput) ToCellularControllerFeatureTemplateMapOutput() CellularControllerFeatureTemplateMapOutput {
	return o
}

func (o CellularControllerFeatureTemplateMapOutput) ToCellularControllerFeatureTemplateMapOutputWithContext(ctx context.Context) CellularControllerFeatureTemplateMapOutput {
	return o
}

func (o CellularControllerFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CellularControllerFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CellularControllerFeatureTemplate {
		return vs[0].(map[string]*CellularControllerFeatureTemplate)[vs[1].(string)]
	}).(CellularControllerFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CellularControllerFeatureTemplateInput)(nil)).Elem(), &CellularControllerFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularControllerFeatureTemplateArrayInput)(nil)).Elem(), CellularControllerFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CellularControllerFeatureTemplateMapInput)(nil)).Elem(), CellularControllerFeatureTemplateMap{})
	pulumi.RegisterOutputType(CellularControllerFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CellularControllerFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CellularControllerFeatureTemplateMapOutput{})
}
