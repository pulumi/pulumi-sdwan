// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Route Policy Definition .
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/routePolicyDefinition:RoutePolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type RoutePolicyDefinition struct {
	pulumi.CustomResourceState

	// Default action, either `accept` or `reject`
	//   - Choices: `accept`, `reject`
	DefaultAction pulumi.StringPtrOutput `pulumi:"defaultAction"`
	// The description of the policy definition
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the policy definition
	Name pulumi.StringOutput `pulumi:"name"`
	// List of ACL sequences
	Sequences RoutePolicyDefinitionSequenceArrayOutput `pulumi:"sequences"`
	// Type
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewRoutePolicyDefinition registers a new resource with the given unique name, arguments, and options.
func NewRoutePolicyDefinition(ctx *pulumi.Context,
	name string, args *RoutePolicyDefinitionArgs, opts ...pulumi.ResourceOption) (*RoutePolicyDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoutePolicyDefinition
	err := ctx.RegisterResource("sdwan:index/routePolicyDefinition:RoutePolicyDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoutePolicyDefinition gets an existing RoutePolicyDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoutePolicyDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoutePolicyDefinitionState, opts ...pulumi.ResourceOption) (*RoutePolicyDefinition, error) {
	var resource RoutePolicyDefinition
	err := ctx.ReadResource("sdwan:index/routePolicyDefinition:RoutePolicyDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoutePolicyDefinition resources.
type routePolicyDefinitionState struct {
	// Default action, either `accept` or `reject`
	//   - Choices: `accept`, `reject`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the policy definition
	Description *string `pulumi:"description"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// List of ACL sequences
	Sequences []RoutePolicyDefinitionSequence `pulumi:"sequences"`
	// Type
	Type *string `pulumi:"type"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type RoutePolicyDefinitionState struct {
	// Default action, either `accept` or `reject`
	//   - Choices: `accept`, `reject`
	DefaultAction pulumi.StringPtrInput
	// The description of the policy definition
	Description pulumi.StringPtrInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// List of ACL sequences
	Sequences RoutePolicyDefinitionSequenceArrayInput
	// Type
	Type pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (RoutePolicyDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*routePolicyDefinitionState)(nil)).Elem()
}

type routePolicyDefinitionArgs struct {
	// Default action, either `accept` or `reject`
	//   - Choices: `accept`, `reject`
	DefaultAction *string `pulumi:"defaultAction"`
	// The description of the policy definition
	Description string `pulumi:"description"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// List of ACL sequences
	Sequences []RoutePolicyDefinitionSequence `pulumi:"sequences"`
}

// The set of arguments for constructing a RoutePolicyDefinition resource.
type RoutePolicyDefinitionArgs struct {
	// Default action, either `accept` or `reject`
	//   - Choices: `accept`, `reject`
	DefaultAction pulumi.StringPtrInput
	// The description of the policy definition
	Description pulumi.StringInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// List of ACL sequences
	Sequences RoutePolicyDefinitionSequenceArrayInput
}

func (RoutePolicyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routePolicyDefinitionArgs)(nil)).Elem()
}

type RoutePolicyDefinitionInput interface {
	pulumi.Input

	ToRoutePolicyDefinitionOutput() RoutePolicyDefinitionOutput
	ToRoutePolicyDefinitionOutputWithContext(ctx context.Context) RoutePolicyDefinitionOutput
}

func (*RoutePolicyDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutePolicyDefinition)(nil)).Elem()
}

func (i *RoutePolicyDefinition) ToRoutePolicyDefinitionOutput() RoutePolicyDefinitionOutput {
	return i.ToRoutePolicyDefinitionOutputWithContext(context.Background())
}

func (i *RoutePolicyDefinition) ToRoutePolicyDefinitionOutputWithContext(ctx context.Context) RoutePolicyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePolicyDefinitionOutput)
}

// RoutePolicyDefinitionArrayInput is an input type that accepts RoutePolicyDefinitionArray and RoutePolicyDefinitionArrayOutput values.
// You can construct a concrete instance of `RoutePolicyDefinitionArrayInput` via:
//
//	RoutePolicyDefinitionArray{ RoutePolicyDefinitionArgs{...} }
type RoutePolicyDefinitionArrayInput interface {
	pulumi.Input

	ToRoutePolicyDefinitionArrayOutput() RoutePolicyDefinitionArrayOutput
	ToRoutePolicyDefinitionArrayOutputWithContext(context.Context) RoutePolicyDefinitionArrayOutput
}

type RoutePolicyDefinitionArray []RoutePolicyDefinitionInput

func (RoutePolicyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutePolicyDefinition)(nil)).Elem()
}

func (i RoutePolicyDefinitionArray) ToRoutePolicyDefinitionArrayOutput() RoutePolicyDefinitionArrayOutput {
	return i.ToRoutePolicyDefinitionArrayOutputWithContext(context.Background())
}

func (i RoutePolicyDefinitionArray) ToRoutePolicyDefinitionArrayOutputWithContext(ctx context.Context) RoutePolicyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePolicyDefinitionArrayOutput)
}

// RoutePolicyDefinitionMapInput is an input type that accepts RoutePolicyDefinitionMap and RoutePolicyDefinitionMapOutput values.
// You can construct a concrete instance of `RoutePolicyDefinitionMapInput` via:
//
//	RoutePolicyDefinitionMap{ "key": RoutePolicyDefinitionArgs{...} }
type RoutePolicyDefinitionMapInput interface {
	pulumi.Input

	ToRoutePolicyDefinitionMapOutput() RoutePolicyDefinitionMapOutput
	ToRoutePolicyDefinitionMapOutputWithContext(context.Context) RoutePolicyDefinitionMapOutput
}

type RoutePolicyDefinitionMap map[string]RoutePolicyDefinitionInput

func (RoutePolicyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutePolicyDefinition)(nil)).Elem()
}

func (i RoutePolicyDefinitionMap) ToRoutePolicyDefinitionMapOutput() RoutePolicyDefinitionMapOutput {
	return i.ToRoutePolicyDefinitionMapOutputWithContext(context.Background())
}

func (i RoutePolicyDefinitionMap) ToRoutePolicyDefinitionMapOutputWithContext(ctx context.Context) RoutePolicyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoutePolicyDefinitionMapOutput)
}

type RoutePolicyDefinitionOutput struct{ *pulumi.OutputState }

func (RoutePolicyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoutePolicyDefinition)(nil)).Elem()
}

func (o RoutePolicyDefinitionOutput) ToRoutePolicyDefinitionOutput() RoutePolicyDefinitionOutput {
	return o
}

func (o RoutePolicyDefinitionOutput) ToRoutePolicyDefinitionOutputWithContext(ctx context.Context) RoutePolicyDefinitionOutput {
	return o
}

// Default action, either `accept` or `reject`
//   - Choices: `accept`, `reject`
func (o RoutePolicyDefinitionOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoutePolicyDefinition) pulumi.StringPtrOutput { return v.DefaultAction }).(pulumi.StringPtrOutput)
}

// The description of the policy definition
func (o RoutePolicyDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicyDefinition) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the policy definition
func (o RoutePolicyDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicyDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of ACL sequences
func (o RoutePolicyDefinitionOutput) Sequences() RoutePolicyDefinitionSequenceArrayOutput {
	return o.ApplyT(func(v *RoutePolicyDefinition) RoutePolicyDefinitionSequenceArrayOutput { return v.Sequences }).(RoutePolicyDefinitionSequenceArrayOutput)
}

// Type
func (o RoutePolicyDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *RoutePolicyDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the object
func (o RoutePolicyDefinitionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *RoutePolicyDefinition) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type RoutePolicyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (RoutePolicyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoutePolicyDefinition)(nil)).Elem()
}

func (o RoutePolicyDefinitionArrayOutput) ToRoutePolicyDefinitionArrayOutput() RoutePolicyDefinitionArrayOutput {
	return o
}

func (o RoutePolicyDefinitionArrayOutput) ToRoutePolicyDefinitionArrayOutputWithContext(ctx context.Context) RoutePolicyDefinitionArrayOutput {
	return o
}

func (o RoutePolicyDefinitionArrayOutput) Index(i pulumi.IntInput) RoutePolicyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoutePolicyDefinition {
		return vs[0].([]*RoutePolicyDefinition)[vs[1].(int)]
	}).(RoutePolicyDefinitionOutput)
}

type RoutePolicyDefinitionMapOutput struct{ *pulumi.OutputState }

func (RoutePolicyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoutePolicyDefinition)(nil)).Elem()
}

func (o RoutePolicyDefinitionMapOutput) ToRoutePolicyDefinitionMapOutput() RoutePolicyDefinitionMapOutput {
	return o
}

func (o RoutePolicyDefinitionMapOutput) ToRoutePolicyDefinitionMapOutputWithContext(ctx context.Context) RoutePolicyDefinitionMapOutput {
	return o
}

func (o RoutePolicyDefinitionMapOutput) MapIndex(k pulumi.StringInput) RoutePolicyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoutePolicyDefinition {
		return vs[0].(map[string]*RoutePolicyDefinition)[vs[1].(string)]
	}).(RoutePolicyDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoutePolicyDefinitionInput)(nil)).Elem(), &RoutePolicyDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutePolicyDefinitionArrayInput)(nil)).Elem(), RoutePolicyDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoutePolicyDefinitionMapInput)(nil)).Elem(), RoutePolicyDefinitionMap{})
	pulumi.RegisterOutputType(RoutePolicyDefinitionOutput{})
	pulumi.RegisterOutputType(RoutePolicyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(RoutePolicyDefinitionMapOutput{})
}
