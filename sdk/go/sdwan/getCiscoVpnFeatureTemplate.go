// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco VPN feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoVpnFeatureTemplate(ctx, &sdwan.LookupCiscoVpnFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoVpnFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoVpnFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoVpnFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoVpnFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoVpnFeatureTemplate:getCiscoVpnFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoVpnFeatureTemplate.
type LookupCiscoVpnFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoVpnFeatureTemplate.
type LookupCiscoVpnFeatureTemplateResult struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Static DNS mapping
	DnsHosts []GetCiscoVpnFeatureTemplateDnsHost `pulumi:"dnsHosts"`
	// DNS
	DnsIpv4Servers []GetCiscoVpnFeatureTemplateDnsIpv4Server `pulumi:"dnsIpv4Servers"`
	// DNS
	DnsIpv6Servers []GetCiscoVpnFeatureTemplateDnsIpv6Server `pulumi:"dnsIpv6Servers"`
	// Optional packet fields for ECMP keying
	EnhanceEcmpKeying bool `pulumi:"enhanceEcmpKeying"`
	// Variable name
	EnhanceEcmpKeyingVariable string `pulumi:"enhanceEcmpKeyingVariable"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Configure routes pointing to a GRE tunnel
	Ipv4StaticGreRoutes []GetCiscoVpnFeatureTemplateIpv4StaticGreRoute `pulumi:"ipv4StaticGreRoutes"`
	// Configure routes pointing to a IPSEC tunnel
	Ipv4StaticIpsecRoutes []GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute `pulumi:"ipv4StaticIpsecRoutes"`
	// Configure IPv4 Static Routes
	Ipv4StaticRoutes []GetCiscoVpnFeatureTemplateIpv4StaticRoute `pulumi:"ipv4StaticRoutes"`
	// Configure IPv4 Static Service Routes
	Ipv4StaticServiceRoutes []GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute `pulumi:"ipv4StaticServiceRoutes"`
	// Configure IPv6 Static Routes
	Ipv6StaticRoutes []GetCiscoVpnFeatureTemplateIpv6StaticRoute `pulumi:"ipv6StaticRoutes"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Set NAT64 v4 pool range
	Nat64Pools []GetCiscoVpnFeatureTemplateNat64Pool `pulumi:"nat64Pools"`
	// Configure NAT Pool entries
	NatPools []GetCiscoVpnFeatureTemplateNatPool `pulumi:"natPools"`
	// omp-admin-distance-ipv4
	OmpAdminDistanceIpv4 int `pulumi:"ompAdminDistanceIpv4"`
	// Variable name
	OmpAdminDistanceIpv4Variable string `pulumi:"ompAdminDistanceIpv4Variable"`
	// omp-admin-distance-ipv6
	OmpAdminDistanceIpv6 int `pulumi:"ompAdminDistanceIpv6"`
	// Variable name
	OmpAdminDistanceIpv6Variable string `pulumi:"ompAdminDistanceIpv6Variable"`
	// Advertise routes to OMP
	OmpAdvertiseIpv4Routes []GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route `pulumi:"ompAdvertiseIpv4Routes"`
	// Advertise routes to OMP
	OmpAdvertiseIpv6Routes []GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route `pulumi:"ompAdvertiseIpv6Routes"`
	// Org Name selected
	OrganizationName string `pulumi:"organizationName"`
	// Configure Port Forward entries
	PortForwardRules []GetCiscoVpnFeatureTemplatePortForwardRule `pulumi:"portForwardRules"`
	// Enable route leaking to Global VPN from this Service VPN
	RouteGlobalExports []GetCiscoVpnFeatureTemplateRouteGlobalExport `pulumi:"routeGlobalExports"`
	// Enable route leaking from Global VPN to this Service VPN
	RouteGlobalImports []GetCiscoVpnFeatureTemplateRouteGlobalImport `pulumi:"routeGlobalImports"`
	// Enable route leak from Service VPN to current VPN
	RouteVpnImports []GetCiscoVpnFeatureTemplateRouteVpnImport `pulumi:"routeVpnImports"`
	// Configure services
	Services []GetCiscoVpnFeatureTemplateService `pulumi:"services"`
	// Configure static NAT entries
	StaticNatRules []GetCiscoVpnFeatureTemplateStaticNatRule `pulumi:"staticNatRules"`
	// Configure static NAT Subnet entries
	StaticNatSubnetRules []GetCiscoVpnFeatureTemplateStaticNatSubnetRule `pulumi:"staticNatSubnetRules"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// Tenant VPN
	TenantVpnId int `pulumi:"tenantVpnId"`
	// The version of the feature template
	Version int `pulumi:"version"`
	// List of VPN instances
	VpnId int `pulumi:"vpnId"`
	// Name
	VpnName string `pulumi:"vpnName"`
	// Variable name
	VpnNameVariable string `pulumi:"vpnNameVariable"`
}

func LookupCiscoVpnFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoVpnFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoVpnFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCiscoVpnFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoVpnFeatureTemplateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCiscoVpnFeatureTemplateResult
			secret, err := ctx.InvokePackageRaw("sdwan:index/getCiscoVpnFeatureTemplate:getCiscoVpnFeatureTemplate", args, &rv, "", opts...)
			if err != nil {
				return LookupCiscoVpnFeatureTemplateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCiscoVpnFeatureTemplateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCiscoVpnFeatureTemplateResultOutput), nil
			}
			return output, nil
		}).(LookupCiscoVpnFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoVpnFeatureTemplate.
type LookupCiscoVpnFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoVpnFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoVpnFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoVpnFeatureTemplate.
type LookupCiscoVpnFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoVpnFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoVpnFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoVpnFeatureTemplateResultOutput) ToLookupCiscoVpnFeatureTemplateResultOutput() LookupCiscoVpnFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoVpnFeatureTemplateResultOutput) ToLookupCiscoVpnFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoVpnFeatureTemplateResultOutput {
	return o
}

// The description of the feature template
func (o LookupCiscoVpnFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoVpnFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Static DNS mapping
func (o LookupCiscoVpnFeatureTemplateResultOutput) DnsHosts() GetCiscoVpnFeatureTemplateDnsHostArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateDnsHost { return v.DnsHosts }).(GetCiscoVpnFeatureTemplateDnsHostArrayOutput)
}

// DNS
func (o LookupCiscoVpnFeatureTemplateResultOutput) DnsIpv4Servers() GetCiscoVpnFeatureTemplateDnsIpv4ServerArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateDnsIpv4Server {
		return v.DnsIpv4Servers
	}).(GetCiscoVpnFeatureTemplateDnsIpv4ServerArrayOutput)
}

// DNS
func (o LookupCiscoVpnFeatureTemplateResultOutput) DnsIpv6Servers() GetCiscoVpnFeatureTemplateDnsIpv6ServerArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateDnsIpv6Server {
		return v.DnsIpv6Servers
	}).(GetCiscoVpnFeatureTemplateDnsIpv6ServerArrayOutput)
}

// Optional packet fields for ECMP keying
func (o LookupCiscoVpnFeatureTemplateResultOutput) EnhanceEcmpKeying() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) bool { return v.EnhanceEcmpKeying }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnFeatureTemplateResultOutput) EnhanceEcmpKeyingVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.EnhanceEcmpKeyingVariable }).(pulumi.StringOutput)
}

// The id of the feature template
func (o LookupCiscoVpnFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configure routes pointing to a GRE tunnel
func (o LookupCiscoVpnFeatureTemplateResultOutput) Ipv4StaticGreRoutes() GetCiscoVpnFeatureTemplateIpv4StaticGreRouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateIpv4StaticGreRoute {
		return v.Ipv4StaticGreRoutes
	}).(GetCiscoVpnFeatureTemplateIpv4StaticGreRouteArrayOutput)
}

// Configure routes pointing to a IPSEC tunnel
func (o LookupCiscoVpnFeatureTemplateResultOutput) Ipv4StaticIpsecRoutes() GetCiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute {
		return v.Ipv4StaticIpsecRoutes
	}).(GetCiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayOutput)
}

// Configure IPv4 Static Routes
func (o LookupCiscoVpnFeatureTemplateResultOutput) Ipv4StaticRoutes() GetCiscoVpnFeatureTemplateIpv4StaticRouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateIpv4StaticRoute {
		return v.Ipv4StaticRoutes
	}).(GetCiscoVpnFeatureTemplateIpv4StaticRouteArrayOutput)
}

// Configure IPv4 Static Service Routes
func (o LookupCiscoVpnFeatureTemplateResultOutput) Ipv4StaticServiceRoutes() GetCiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute {
		return v.Ipv4StaticServiceRoutes
	}).(GetCiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayOutput)
}

// Configure IPv6 Static Routes
func (o LookupCiscoVpnFeatureTemplateResultOutput) Ipv6StaticRoutes() GetCiscoVpnFeatureTemplateIpv6StaticRouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateIpv6StaticRoute {
		return v.Ipv6StaticRoutes
	}).(GetCiscoVpnFeatureTemplateIpv6StaticRouteArrayOutput)
}

// The name of the feature template
func (o LookupCiscoVpnFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Set NAT64 v4 pool range
func (o LookupCiscoVpnFeatureTemplateResultOutput) Nat64Pools() GetCiscoVpnFeatureTemplateNat64PoolArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateNat64Pool { return v.Nat64Pools }).(GetCiscoVpnFeatureTemplateNat64PoolArrayOutput)
}

// Configure NAT Pool entries
func (o LookupCiscoVpnFeatureTemplateResultOutput) NatPools() GetCiscoVpnFeatureTemplateNatPoolArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateNatPool { return v.NatPools }).(GetCiscoVpnFeatureTemplateNatPoolArrayOutput)
}

// omp-admin-distance-ipv4
func (o LookupCiscoVpnFeatureTemplateResultOutput) OmpAdminDistanceIpv4() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) int { return v.OmpAdminDistanceIpv4 }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnFeatureTemplateResultOutput) OmpAdminDistanceIpv4Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.OmpAdminDistanceIpv4Variable }).(pulumi.StringOutput)
}

// omp-admin-distance-ipv6
func (o LookupCiscoVpnFeatureTemplateResultOutput) OmpAdminDistanceIpv6() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) int { return v.OmpAdminDistanceIpv6 }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnFeatureTemplateResultOutput) OmpAdminDistanceIpv6Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.OmpAdminDistanceIpv6Variable }).(pulumi.StringOutput)
}

// Advertise routes to OMP
func (o LookupCiscoVpnFeatureTemplateResultOutput) OmpAdvertiseIpv4Routes() GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route {
		return v.OmpAdvertiseIpv4Routes
	}).(GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayOutput)
}

// Advertise routes to OMP
func (o LookupCiscoVpnFeatureTemplateResultOutput) OmpAdvertiseIpv6Routes() GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route {
		return v.OmpAdvertiseIpv6Routes
	}).(GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayOutput)
}

// Org Name selected
func (o LookupCiscoVpnFeatureTemplateResultOutput) OrganizationName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.OrganizationName }).(pulumi.StringOutput)
}

// Configure Port Forward entries
func (o LookupCiscoVpnFeatureTemplateResultOutput) PortForwardRules() GetCiscoVpnFeatureTemplatePortForwardRuleArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplatePortForwardRule {
		return v.PortForwardRules
	}).(GetCiscoVpnFeatureTemplatePortForwardRuleArrayOutput)
}

// Enable route leaking to Global VPN from this Service VPN
func (o LookupCiscoVpnFeatureTemplateResultOutput) RouteGlobalExports() GetCiscoVpnFeatureTemplateRouteGlobalExportArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateRouteGlobalExport {
		return v.RouteGlobalExports
	}).(GetCiscoVpnFeatureTemplateRouteGlobalExportArrayOutput)
}

// Enable route leaking from Global VPN to this Service VPN
func (o LookupCiscoVpnFeatureTemplateResultOutput) RouteGlobalImports() GetCiscoVpnFeatureTemplateRouteGlobalImportArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateRouteGlobalImport {
		return v.RouteGlobalImports
	}).(GetCiscoVpnFeatureTemplateRouteGlobalImportArrayOutput)
}

// Enable route leak from Service VPN to current VPN
func (o LookupCiscoVpnFeatureTemplateResultOutput) RouteVpnImports() GetCiscoVpnFeatureTemplateRouteVpnImportArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateRouteVpnImport {
		return v.RouteVpnImports
	}).(GetCiscoVpnFeatureTemplateRouteVpnImportArrayOutput)
}

// Configure services
func (o LookupCiscoVpnFeatureTemplateResultOutput) Services() GetCiscoVpnFeatureTemplateServiceArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateService { return v.Services }).(GetCiscoVpnFeatureTemplateServiceArrayOutput)
}

// Configure static NAT entries
func (o LookupCiscoVpnFeatureTemplateResultOutput) StaticNatRules() GetCiscoVpnFeatureTemplateStaticNatRuleArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateStaticNatRule {
		return v.StaticNatRules
	}).(GetCiscoVpnFeatureTemplateStaticNatRuleArrayOutput)
}

// Configure static NAT Subnet entries
func (o LookupCiscoVpnFeatureTemplateResultOutput) StaticNatSubnetRules() GetCiscoVpnFeatureTemplateStaticNatSubnetRuleArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) []GetCiscoVpnFeatureTemplateStaticNatSubnetRule {
		return v.StaticNatSubnetRules
	}).(GetCiscoVpnFeatureTemplateStaticNatSubnetRuleArrayOutput)
}

// The template type
func (o LookupCiscoVpnFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Tenant VPN
func (o LookupCiscoVpnFeatureTemplateResultOutput) TenantVpnId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) int { return v.TenantVpnId }).(pulumi.IntOutput)
}

// The version of the feature template
func (o LookupCiscoVpnFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

// List of VPN instances
func (o LookupCiscoVpnFeatureTemplateResultOutput) VpnId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) int { return v.VpnId }).(pulumi.IntOutput)
}

// Name
func (o LookupCiscoVpnFeatureTemplateResultOutput) VpnName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.VpnName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnFeatureTemplateResultOutput) VpnNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnFeatureTemplateResult) string { return v.VpnNameVariable }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoVpnFeatureTemplateResultOutput{})
}
