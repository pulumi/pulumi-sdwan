// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco TrustSec feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoTrustsecFeatureTemplate struct {
	pulumi.CustomResourceState

	// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32
	// char)
	CredentialsId pulumi.StringPtrOutput `pulumi:"credentialsId"`
	// Variable name
	CredentialsIdVariable pulumi.StringPtrOutput `pulumi:"credentialsIdVariable"`
	// Set the password for the device
	CredentialsPassword pulumi.StringPtrOutput `pulumi:"credentialsPassword"`
	// Variable name
	CredentialsPasswordVariable pulumi.StringPtrOutput `pulumi:"credentialsPasswordVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// Configure Local device security group <2..65519> - Range: `2`-`65519`
	DeviceSgt pulumi.IntPtrOutput `pulumi:"deviceSgt"`
	// Variable name
	DeviceSgtVariable pulumi.StringPtrOutput `pulumi:"deviceSgtVariable"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Enable Role-based Access Control enforcement - Default value: `false`
	EnableEnforcement pulumi.BoolPtrOutput `pulumi:"enableEnforcement"`
	// Variable name
	EnableEnforcementVariable pulumi.StringPtrOutput `pulumi:"enableEnforcementVariable"`
	// Enable CTS SXP support - Default value: `false`
	EnableSxp pulumi.BoolPtrOutput `pulumi:"enableSxp"`
	// Configure Maximum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `180`
	MaximumListenerHoldTime pulumi.IntPtrOutput `pulumi:"maximumListenerHoldTime"`
	// Variable name
	MaximumListenerHoldTimeVariable pulumi.StringPtrOutput `pulumi:"maximumListenerHoldTimeVariable"`
	// Configure Minimum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `90`
	MinimumListenerHoldTime pulumi.IntPtrOutput `pulumi:"minimumListenerHoldTime"`
	// Variable name
	MinimumListenerHoldTimeVariable pulumi.StringPtrOutput `pulumi:"minimumListenerHoldTimeVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure Speaker hold-time in seconds <1..65534> - Range: `1`-`65534` - Default value: `120`
	SpeakerHoldTime pulumi.IntPtrOutput `pulumi:"speakerHoldTime"`
	// Variable name
	SpeakerHoldTimeVariable pulumi.StringPtrOutput `pulumi:"speakerHoldTimeVariable"`
	// Configure SXP Connections
	SxpConnections CiscoTrustsecFeatureTemplateSxpConnectionArrayOutput `pulumi:"sxpConnections"`
	// Configure SXP default password
	SxpDefaultPassword pulumi.StringPtrOutput `pulumi:"sxpDefaultPassword"`
	// Variable name
	SxpDefaultPasswordVariable pulumi.StringPtrOutput `pulumi:"sxpDefaultPasswordVariable"`
	// Configure SXP key-chain
	SxpKeyChain pulumi.StringPtrOutput `pulumi:"sxpKeyChain"`
	// Variable name
	SxpKeyChainVariable pulumi.StringPtrOutput `pulumi:"sxpKeyChainVariable"`
	// Enables logging for IP-to-SGT binding changes - Default value: `false`
	SxpLogBindingChanges pulumi.BoolPtrOutput `pulumi:"sxpLogBindingChanges"`
	// Variable name
	SxpLogBindingChangesVariable pulumi.StringPtrOutput `pulumi:"sxpLogBindingChangesVariable"`
	// Configure SXP Node ID <IP, 8 char string or interface name>
	SxpNodeId pulumi.StringPtrOutput `pulumi:"sxpNodeId"`
	// Define SXP Node ID type <IP, 8 char string or interface name> - Choices: `ip`, `interface-name`, `8-char-hex-string` -
	// Default value: `ip`
	SxpNodeIdType pulumi.StringPtrOutput `pulumi:"sxpNodeIdType"`
	// Variable name
	SxpNodeIdVariable pulumi.StringPtrOutput `pulumi:"sxpNodeIdVariable"`
	// Configure the SXP reconciliation period in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpReconciliationPeriod pulumi.IntPtrOutput `pulumi:"sxpReconciliationPeriod"`
	// Variable name
	SxpReconciliationPeriodVariable pulumi.StringPtrOutput `pulumi:"sxpReconciliationPeriodVariable"`
	// Configure Retry period for SXP connection in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpRetryPeriod pulumi.IntPtrOutput `pulumi:"sxpRetryPeriod"`
	// Variable name
	SxpRetryPeriodVariable pulumi.StringPtrOutput `pulumi:"sxpRetryPeriodVariable"`
	// SXP Source IP
	SxpSourceIp pulumi.StringPtrOutput `pulumi:"sxpSourceIp"`
	// Variable name
	SxpSourceIpVariable pulumi.StringPtrOutput `pulumi:"sxpSourceIpVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoTrustsecFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoTrustsecFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoTrustsecFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoTrustsecFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoTrustsecFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoTrustsecFeatureTemplate gets an existing CiscoTrustsecFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoTrustsecFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoTrustsecFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoTrustsecFeatureTemplate, error) {
	var resource CiscoTrustsecFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoTrustsecFeatureTemplate:CiscoTrustsecFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoTrustsecFeatureTemplate resources.
type ciscoTrustsecFeatureTemplateState struct {
	// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32
	// char)
	CredentialsId *string `pulumi:"credentialsId"`
	// Variable name
	CredentialsIdVariable *string `pulumi:"credentialsIdVariable"`
	// Set the password for the device
	CredentialsPassword *string `pulumi:"credentialsPassword"`
	// Variable name
	CredentialsPasswordVariable *string `pulumi:"credentialsPasswordVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// Configure Local device security group <2..65519> - Range: `2`-`65519`
	DeviceSgt *int `pulumi:"deviceSgt"`
	// Variable name
	DeviceSgtVariable *string `pulumi:"deviceSgtVariable"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable Role-based Access Control enforcement - Default value: `false`
	EnableEnforcement *bool `pulumi:"enableEnforcement"`
	// Variable name
	EnableEnforcementVariable *string `pulumi:"enableEnforcementVariable"`
	// Enable CTS SXP support - Default value: `false`
	EnableSxp *bool `pulumi:"enableSxp"`
	// Configure Maximum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `180`
	MaximumListenerHoldTime *int `pulumi:"maximumListenerHoldTime"`
	// Variable name
	MaximumListenerHoldTimeVariable *string `pulumi:"maximumListenerHoldTimeVariable"`
	// Configure Minimum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `90`
	MinimumListenerHoldTime *int `pulumi:"minimumListenerHoldTime"`
	// Variable name
	MinimumListenerHoldTimeVariable *string `pulumi:"minimumListenerHoldTimeVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Configure Speaker hold-time in seconds <1..65534> - Range: `1`-`65534` - Default value: `120`
	SpeakerHoldTime *int `pulumi:"speakerHoldTime"`
	// Variable name
	SpeakerHoldTimeVariable *string `pulumi:"speakerHoldTimeVariable"`
	// Configure SXP Connections
	SxpConnections []CiscoTrustsecFeatureTemplateSxpConnection `pulumi:"sxpConnections"`
	// Configure SXP default password
	SxpDefaultPassword *string `pulumi:"sxpDefaultPassword"`
	// Variable name
	SxpDefaultPasswordVariable *string `pulumi:"sxpDefaultPasswordVariable"`
	// Configure SXP key-chain
	SxpKeyChain *string `pulumi:"sxpKeyChain"`
	// Variable name
	SxpKeyChainVariable *string `pulumi:"sxpKeyChainVariable"`
	// Enables logging for IP-to-SGT binding changes - Default value: `false`
	SxpLogBindingChanges *bool `pulumi:"sxpLogBindingChanges"`
	// Variable name
	SxpLogBindingChangesVariable *string `pulumi:"sxpLogBindingChangesVariable"`
	// Configure SXP Node ID <IP, 8 char string or interface name>
	SxpNodeId *string `pulumi:"sxpNodeId"`
	// Define SXP Node ID type <IP, 8 char string or interface name> - Choices: `ip`, `interface-name`, `8-char-hex-string` -
	// Default value: `ip`
	SxpNodeIdType *string `pulumi:"sxpNodeIdType"`
	// Variable name
	SxpNodeIdVariable *string `pulumi:"sxpNodeIdVariable"`
	// Configure the SXP reconciliation period in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpReconciliationPeriod *int `pulumi:"sxpReconciliationPeriod"`
	// Variable name
	SxpReconciliationPeriodVariable *string `pulumi:"sxpReconciliationPeriodVariable"`
	// Configure Retry period for SXP connection in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpRetryPeriod *int `pulumi:"sxpRetryPeriod"`
	// Variable name
	SxpRetryPeriodVariable *string `pulumi:"sxpRetryPeriodVariable"`
	// SXP Source IP
	SxpSourceIp *string `pulumi:"sxpSourceIp"`
	// Variable name
	SxpSourceIpVariable *string `pulumi:"sxpSourceIpVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoTrustsecFeatureTemplateState struct {
	// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32
	// char)
	CredentialsId pulumi.StringPtrInput
	// Variable name
	CredentialsIdVariable pulumi.StringPtrInput
	// Set the password for the device
	CredentialsPassword pulumi.StringPtrInput
	// Variable name
	CredentialsPasswordVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// Configure Local device security group <2..65519> - Range: `2`-`65519`
	DeviceSgt pulumi.IntPtrInput
	// Variable name
	DeviceSgtVariable pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Enable Role-based Access Control enforcement - Default value: `false`
	EnableEnforcement pulumi.BoolPtrInput
	// Variable name
	EnableEnforcementVariable pulumi.StringPtrInput
	// Enable CTS SXP support - Default value: `false`
	EnableSxp pulumi.BoolPtrInput
	// Configure Maximum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `180`
	MaximumListenerHoldTime pulumi.IntPtrInput
	// Variable name
	MaximumListenerHoldTimeVariable pulumi.StringPtrInput
	// Configure Minimum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `90`
	MinimumListenerHoldTime pulumi.IntPtrInput
	// Variable name
	MinimumListenerHoldTimeVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Configure Speaker hold-time in seconds <1..65534> - Range: `1`-`65534` - Default value: `120`
	SpeakerHoldTime pulumi.IntPtrInput
	// Variable name
	SpeakerHoldTimeVariable pulumi.StringPtrInput
	// Configure SXP Connections
	SxpConnections CiscoTrustsecFeatureTemplateSxpConnectionArrayInput
	// Configure SXP default password
	SxpDefaultPassword pulumi.StringPtrInput
	// Variable name
	SxpDefaultPasswordVariable pulumi.StringPtrInput
	// Configure SXP key-chain
	SxpKeyChain pulumi.StringPtrInput
	// Variable name
	SxpKeyChainVariable pulumi.StringPtrInput
	// Enables logging for IP-to-SGT binding changes - Default value: `false`
	SxpLogBindingChanges pulumi.BoolPtrInput
	// Variable name
	SxpLogBindingChangesVariable pulumi.StringPtrInput
	// Configure SXP Node ID <IP, 8 char string or interface name>
	SxpNodeId pulumi.StringPtrInput
	// Define SXP Node ID type <IP, 8 char string or interface name> - Choices: `ip`, `interface-name`, `8-char-hex-string` -
	// Default value: `ip`
	SxpNodeIdType pulumi.StringPtrInput
	// Variable name
	SxpNodeIdVariable pulumi.StringPtrInput
	// Configure the SXP reconciliation period in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpReconciliationPeriod pulumi.IntPtrInput
	// Variable name
	SxpReconciliationPeriodVariable pulumi.StringPtrInput
	// Configure Retry period for SXP connection in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpRetryPeriod pulumi.IntPtrInput
	// Variable name
	SxpRetryPeriodVariable pulumi.StringPtrInput
	// SXP Source IP
	SxpSourceIp pulumi.StringPtrInput
	// Variable name
	SxpSourceIpVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoTrustsecFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoTrustsecFeatureTemplateState)(nil)).Elem()
}

type ciscoTrustsecFeatureTemplateArgs struct {
	// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32
	// char)
	CredentialsId *string `pulumi:"credentialsId"`
	// Variable name
	CredentialsIdVariable *string `pulumi:"credentialsIdVariable"`
	// Set the password for the device
	CredentialsPassword *string `pulumi:"credentialsPassword"`
	// Variable name
	CredentialsPasswordVariable *string `pulumi:"credentialsPasswordVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// Configure Local device security group <2..65519> - Range: `2`-`65519`
	DeviceSgt *int `pulumi:"deviceSgt"`
	// Variable name
	DeviceSgtVariable *string `pulumi:"deviceSgtVariable"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable Role-based Access Control enforcement - Default value: `false`
	EnableEnforcement *bool `pulumi:"enableEnforcement"`
	// Variable name
	EnableEnforcementVariable *string `pulumi:"enableEnforcementVariable"`
	// Enable CTS SXP support - Default value: `false`
	EnableSxp *bool `pulumi:"enableSxp"`
	// Configure Maximum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `180`
	MaximumListenerHoldTime *int `pulumi:"maximumListenerHoldTime"`
	// Variable name
	MaximumListenerHoldTimeVariable *string `pulumi:"maximumListenerHoldTimeVariable"`
	// Configure Minimum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `90`
	MinimumListenerHoldTime *int `pulumi:"minimumListenerHoldTime"`
	// Variable name
	MinimumListenerHoldTimeVariable *string `pulumi:"minimumListenerHoldTimeVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Configure Speaker hold-time in seconds <1..65534> - Range: `1`-`65534` - Default value: `120`
	SpeakerHoldTime *int `pulumi:"speakerHoldTime"`
	// Variable name
	SpeakerHoldTimeVariable *string `pulumi:"speakerHoldTimeVariable"`
	// Configure SXP Connections
	SxpConnections []CiscoTrustsecFeatureTemplateSxpConnection `pulumi:"sxpConnections"`
	// Configure SXP default password
	SxpDefaultPassword *string `pulumi:"sxpDefaultPassword"`
	// Variable name
	SxpDefaultPasswordVariable *string `pulumi:"sxpDefaultPasswordVariable"`
	// Configure SXP key-chain
	SxpKeyChain *string `pulumi:"sxpKeyChain"`
	// Variable name
	SxpKeyChainVariable *string `pulumi:"sxpKeyChainVariable"`
	// Enables logging for IP-to-SGT binding changes - Default value: `false`
	SxpLogBindingChanges *bool `pulumi:"sxpLogBindingChanges"`
	// Variable name
	SxpLogBindingChangesVariable *string `pulumi:"sxpLogBindingChangesVariable"`
	// Configure SXP Node ID <IP, 8 char string or interface name>
	SxpNodeId *string `pulumi:"sxpNodeId"`
	// Define SXP Node ID type <IP, 8 char string or interface name> - Choices: `ip`, `interface-name`, `8-char-hex-string` -
	// Default value: `ip`
	SxpNodeIdType *string `pulumi:"sxpNodeIdType"`
	// Variable name
	SxpNodeIdVariable *string `pulumi:"sxpNodeIdVariable"`
	// Configure the SXP reconciliation period in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpReconciliationPeriod *int `pulumi:"sxpReconciliationPeriod"`
	// Variable name
	SxpReconciliationPeriodVariable *string `pulumi:"sxpReconciliationPeriodVariable"`
	// Configure Retry period for SXP connection in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpRetryPeriod *int `pulumi:"sxpRetryPeriod"`
	// Variable name
	SxpRetryPeriodVariable *string `pulumi:"sxpRetryPeriodVariable"`
	// SXP Source IP
	SxpSourceIp *string `pulumi:"sxpSourceIp"`
	// Variable name
	SxpSourceIpVariable *string `pulumi:"sxpSourceIpVariable"`
}

// The set of arguments for constructing a CiscoTrustsecFeatureTemplate resource.
type CiscoTrustsecFeatureTemplateArgs struct {
	// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32
	// char)
	CredentialsId pulumi.StringPtrInput
	// Variable name
	CredentialsIdVariable pulumi.StringPtrInput
	// Set the password for the device
	CredentialsPassword pulumi.StringPtrInput
	// Variable name
	CredentialsPasswordVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// Configure Local device security group <2..65519> - Range: `2`-`65519`
	DeviceSgt pulumi.IntPtrInput
	// Variable name
	DeviceSgtVariable pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Enable Role-based Access Control enforcement - Default value: `false`
	EnableEnforcement pulumi.BoolPtrInput
	// Variable name
	EnableEnforcementVariable pulumi.StringPtrInput
	// Enable CTS SXP support - Default value: `false`
	EnableSxp pulumi.BoolPtrInput
	// Configure Maximum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `180`
	MaximumListenerHoldTime pulumi.IntPtrInput
	// Variable name
	MaximumListenerHoldTimeVariable pulumi.StringPtrInput
	// Configure Minimum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `90`
	MinimumListenerHoldTime pulumi.IntPtrInput
	// Variable name
	MinimumListenerHoldTimeVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Configure Speaker hold-time in seconds <1..65534> - Range: `1`-`65534` - Default value: `120`
	SpeakerHoldTime pulumi.IntPtrInput
	// Variable name
	SpeakerHoldTimeVariable pulumi.StringPtrInput
	// Configure SXP Connections
	SxpConnections CiscoTrustsecFeatureTemplateSxpConnectionArrayInput
	// Configure SXP default password
	SxpDefaultPassword pulumi.StringPtrInput
	// Variable name
	SxpDefaultPasswordVariable pulumi.StringPtrInput
	// Configure SXP key-chain
	SxpKeyChain pulumi.StringPtrInput
	// Variable name
	SxpKeyChainVariable pulumi.StringPtrInput
	// Enables logging for IP-to-SGT binding changes - Default value: `false`
	SxpLogBindingChanges pulumi.BoolPtrInput
	// Variable name
	SxpLogBindingChangesVariable pulumi.StringPtrInput
	// Configure SXP Node ID <IP, 8 char string or interface name>
	SxpNodeId pulumi.StringPtrInput
	// Define SXP Node ID type <IP, 8 char string or interface name> - Choices: `ip`, `interface-name`, `8-char-hex-string` -
	// Default value: `ip`
	SxpNodeIdType pulumi.StringPtrInput
	// Variable name
	SxpNodeIdVariable pulumi.StringPtrInput
	// Configure the SXP reconciliation period in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpReconciliationPeriod pulumi.IntPtrInput
	// Variable name
	SxpReconciliationPeriodVariable pulumi.StringPtrInput
	// Configure Retry period for SXP connection in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
	SxpRetryPeriod pulumi.IntPtrInput
	// Variable name
	SxpRetryPeriodVariable pulumi.StringPtrInput
	// SXP Source IP
	SxpSourceIp pulumi.StringPtrInput
	// Variable name
	SxpSourceIpVariable pulumi.StringPtrInput
}

func (CiscoTrustsecFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoTrustsecFeatureTemplateArgs)(nil)).Elem()
}

type CiscoTrustsecFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoTrustsecFeatureTemplateOutput() CiscoTrustsecFeatureTemplateOutput
	ToCiscoTrustsecFeatureTemplateOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateOutput
}

func (*CiscoTrustsecFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoTrustsecFeatureTemplate)(nil)).Elem()
}

func (i *CiscoTrustsecFeatureTemplate) ToCiscoTrustsecFeatureTemplateOutput() CiscoTrustsecFeatureTemplateOutput {
	return i.ToCiscoTrustsecFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoTrustsecFeatureTemplate) ToCiscoTrustsecFeatureTemplateOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoTrustsecFeatureTemplateOutput)
}

// CiscoTrustsecFeatureTemplateArrayInput is an input type that accepts CiscoTrustsecFeatureTemplateArray and CiscoTrustsecFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoTrustsecFeatureTemplateArrayInput` via:
//
//	CiscoTrustsecFeatureTemplateArray{ CiscoTrustsecFeatureTemplateArgs{...} }
type CiscoTrustsecFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoTrustsecFeatureTemplateArrayOutput() CiscoTrustsecFeatureTemplateArrayOutput
	ToCiscoTrustsecFeatureTemplateArrayOutputWithContext(context.Context) CiscoTrustsecFeatureTemplateArrayOutput
}

type CiscoTrustsecFeatureTemplateArray []CiscoTrustsecFeatureTemplateInput

func (CiscoTrustsecFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoTrustsecFeatureTemplate)(nil)).Elem()
}

func (i CiscoTrustsecFeatureTemplateArray) ToCiscoTrustsecFeatureTemplateArrayOutput() CiscoTrustsecFeatureTemplateArrayOutput {
	return i.ToCiscoTrustsecFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoTrustsecFeatureTemplateArray) ToCiscoTrustsecFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoTrustsecFeatureTemplateArrayOutput)
}

// CiscoTrustsecFeatureTemplateMapInput is an input type that accepts CiscoTrustsecFeatureTemplateMap and CiscoTrustsecFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoTrustsecFeatureTemplateMapInput` via:
//
//	CiscoTrustsecFeatureTemplateMap{ "key": CiscoTrustsecFeatureTemplateArgs{...} }
type CiscoTrustsecFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoTrustsecFeatureTemplateMapOutput() CiscoTrustsecFeatureTemplateMapOutput
	ToCiscoTrustsecFeatureTemplateMapOutputWithContext(context.Context) CiscoTrustsecFeatureTemplateMapOutput
}

type CiscoTrustsecFeatureTemplateMap map[string]CiscoTrustsecFeatureTemplateInput

func (CiscoTrustsecFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoTrustsecFeatureTemplate)(nil)).Elem()
}

func (i CiscoTrustsecFeatureTemplateMap) ToCiscoTrustsecFeatureTemplateMapOutput() CiscoTrustsecFeatureTemplateMapOutput {
	return i.ToCiscoTrustsecFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoTrustsecFeatureTemplateMap) ToCiscoTrustsecFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoTrustsecFeatureTemplateMapOutput)
}

type CiscoTrustsecFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoTrustsecFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoTrustsecFeatureTemplate)(nil)).Elem()
}

func (o CiscoTrustsecFeatureTemplateOutput) ToCiscoTrustsecFeatureTemplateOutput() CiscoTrustsecFeatureTemplateOutput {
	return o
}

func (o CiscoTrustsecFeatureTemplateOutput) ToCiscoTrustsecFeatureTemplateOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateOutput {
	return o
}

// Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32
// char)
func (o CiscoTrustsecFeatureTemplateOutput) CredentialsId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.CredentialsId }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) CredentialsIdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.CredentialsIdVariable }).(pulumi.StringPtrOutput)
}

// Set the password for the device
func (o CiscoTrustsecFeatureTemplateOutput) CredentialsPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.CredentialsPassword }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) CredentialsPasswordVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.CredentialsPasswordVariable }).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoTrustsecFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Configure Local device security group <2..65519> - Range: `2`-`65519`
func (o CiscoTrustsecFeatureTemplateOutput) DeviceSgt() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntPtrOutput { return v.DeviceSgt }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) DeviceSgtVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.DeviceSgtVariable }).(pulumi.StringPtrOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoTrustsecFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Enable Role-based Access Control enforcement - Default value: `false`
func (o CiscoTrustsecFeatureTemplateOutput) EnableEnforcement() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.BoolPtrOutput { return v.EnableEnforcement }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) EnableEnforcementVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.EnableEnforcementVariable }).(pulumi.StringPtrOutput)
}

// Enable CTS SXP support - Default value: `false`
func (o CiscoTrustsecFeatureTemplateOutput) EnableSxp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.BoolPtrOutput { return v.EnableSxp }).(pulumi.BoolPtrOutput)
}

// Configure Maximum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `180`
func (o CiscoTrustsecFeatureTemplateOutput) MaximumListenerHoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntPtrOutput { return v.MaximumListenerHoldTime }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) MaximumListenerHoldTimeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.MaximumListenerHoldTimeVariable }).(pulumi.StringPtrOutput)
}

// Configure Minimum allowed hold-time for listener in seconds <1..65534> - Range: `1`-`65534` - Default value: `90`
func (o CiscoTrustsecFeatureTemplateOutput) MinimumListenerHoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntPtrOutput { return v.MinimumListenerHoldTime }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) MinimumListenerHoldTimeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.MinimumListenerHoldTimeVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoTrustsecFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure Speaker hold-time in seconds <1..65534> - Range: `1`-`65534` - Default value: `120`
func (o CiscoTrustsecFeatureTemplateOutput) SpeakerHoldTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntPtrOutput { return v.SpeakerHoldTime }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SpeakerHoldTimeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SpeakerHoldTimeVariable }).(pulumi.StringPtrOutput)
}

// Configure SXP Connections
func (o CiscoTrustsecFeatureTemplateOutput) SxpConnections() CiscoTrustsecFeatureTemplateSxpConnectionArrayOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) CiscoTrustsecFeatureTemplateSxpConnectionArrayOutput {
		return v.SxpConnections
	}).(CiscoTrustsecFeatureTemplateSxpConnectionArrayOutput)
}

// Configure SXP default password
func (o CiscoTrustsecFeatureTemplateOutput) SxpDefaultPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpDefaultPassword }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpDefaultPasswordVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpDefaultPasswordVariable }).(pulumi.StringPtrOutput)
}

// Configure SXP key-chain
func (o CiscoTrustsecFeatureTemplateOutput) SxpKeyChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpKeyChain }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpKeyChainVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpKeyChainVariable }).(pulumi.StringPtrOutput)
}

// Enables logging for IP-to-SGT binding changes - Default value: `false`
func (o CiscoTrustsecFeatureTemplateOutput) SxpLogBindingChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.BoolPtrOutput { return v.SxpLogBindingChanges }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpLogBindingChangesVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpLogBindingChangesVariable }).(pulumi.StringPtrOutput)
}

// Configure SXP Node ID <IP, 8 char string or interface name>
func (o CiscoTrustsecFeatureTemplateOutput) SxpNodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpNodeId }).(pulumi.StringPtrOutput)
}

// Define SXP Node ID type <IP, 8 char string or interface name> - Choices: `ip`, `interface-name`, `8-char-hex-string` -
// Default value: `ip`
func (o CiscoTrustsecFeatureTemplateOutput) SxpNodeIdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpNodeIdType }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpNodeIdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpNodeIdVariable }).(pulumi.StringPtrOutput)
}

// Configure the SXP reconciliation period in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
func (o CiscoTrustsecFeatureTemplateOutput) SxpReconciliationPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntPtrOutput { return v.SxpReconciliationPeriod }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpReconciliationPeriodVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpReconciliationPeriodVariable }).(pulumi.StringPtrOutput)
}

// Configure Retry period for SXP connection in seconds <0..64000> - Range: `0`-`64000` - Default value: `120`
func (o CiscoTrustsecFeatureTemplateOutput) SxpRetryPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntPtrOutput { return v.SxpRetryPeriod }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpRetryPeriodVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpRetryPeriodVariable }).(pulumi.StringPtrOutput)
}

// SXP Source IP
func (o CiscoTrustsecFeatureTemplateOutput) SxpSourceIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpSourceIp }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoTrustsecFeatureTemplateOutput) SxpSourceIpVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringPtrOutput { return v.SxpSourceIpVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CiscoTrustsecFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CiscoTrustsecFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoTrustsecFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoTrustsecFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoTrustsecFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoTrustsecFeatureTemplate)(nil)).Elem()
}

func (o CiscoTrustsecFeatureTemplateArrayOutput) ToCiscoTrustsecFeatureTemplateArrayOutput() CiscoTrustsecFeatureTemplateArrayOutput {
	return o
}

func (o CiscoTrustsecFeatureTemplateArrayOutput) ToCiscoTrustsecFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateArrayOutput {
	return o
}

func (o CiscoTrustsecFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoTrustsecFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoTrustsecFeatureTemplate {
		return vs[0].([]*CiscoTrustsecFeatureTemplate)[vs[1].(int)]
	}).(CiscoTrustsecFeatureTemplateOutput)
}

type CiscoTrustsecFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoTrustsecFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoTrustsecFeatureTemplate)(nil)).Elem()
}

func (o CiscoTrustsecFeatureTemplateMapOutput) ToCiscoTrustsecFeatureTemplateMapOutput() CiscoTrustsecFeatureTemplateMapOutput {
	return o
}

func (o CiscoTrustsecFeatureTemplateMapOutput) ToCiscoTrustsecFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoTrustsecFeatureTemplateMapOutput {
	return o
}

func (o CiscoTrustsecFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoTrustsecFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoTrustsecFeatureTemplate {
		return vs[0].(map[string]*CiscoTrustsecFeatureTemplate)[vs[1].(string)]
	}).(CiscoTrustsecFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoTrustsecFeatureTemplateInput)(nil)).Elem(), &CiscoTrustsecFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoTrustsecFeatureTemplateArrayInput)(nil)).Elem(), CiscoTrustsecFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoTrustsecFeatureTemplateMapInput)(nil)).Elem(), CiscoTrustsecFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoTrustsecFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoTrustsecFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoTrustsecFeatureTemplateMapOutput{})
}
