// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Transport T1 E1 Controller Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewTransportT1E1ControllerFeature(ctx, "example", &sdwan.TransportT1E1ControllerFeatureArgs{
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My Example"),
//				FeatureProfileId: pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				Type:             pulumi.String("t1"),
//				Slot:             pulumi.String("11"),
//				Entries: sdwan.TransportT1E1ControllerFeatureEntryArray{
//					&sdwan.TransportT1E1ControllerFeatureEntryArgs{
//						T1_description: "T1",
//						T1_framing:     "esf",
//						T1_linecode:    "ami",
//						Cable_length:   "long",
//						Length_long:    "-7.5db",
//						Clock_source:   "line",
//						Line_mode:      "primary",
//						Description:    pulumi.String("desc"),
//						Channel_groups: []map[string]interface{}{
//							map[string]interface{}{
//								"channelGroup": 12,
//								"timeSlot":     "timeslots 15",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "transport_t1_e1_controller_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/transportT1E1ControllerFeature:TransportT1E1ControllerFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type TransportT1E1ControllerFeature struct {
	pulumi.CustomResourceState

	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Controller tx-ex List
	Entries TransportT1E1ControllerFeatureEntryArrayOutput `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Slot number
	Slot pulumi.StringPtrOutput `pulumi:"slot"`
	// Variable name
	SlotVariable pulumi.StringPtrOutput `pulumi:"slotVariable"`
	// Card Type
	//   - Choices: `e1`, `t1`
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewTransportT1E1ControllerFeature registers a new resource with the given unique name, arguments, and options.
func NewTransportT1E1ControllerFeature(ctx *pulumi.Context,
	name string, args *TransportT1E1ControllerFeatureArgs, opts ...pulumi.ResourceOption) (*TransportT1E1ControllerFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransportT1E1ControllerFeature
	err := ctx.RegisterResource("sdwan:index/transportT1E1ControllerFeature:TransportT1E1ControllerFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransportT1E1ControllerFeature gets an existing TransportT1E1ControllerFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransportT1E1ControllerFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransportT1E1ControllerFeatureState, opts ...pulumi.ResourceOption) (*TransportT1E1ControllerFeature, error) {
	var resource TransportT1E1ControllerFeature
	err := ctx.ReadResource("sdwan:index/transportT1E1ControllerFeature:TransportT1E1ControllerFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransportT1E1ControllerFeature resources.
type transportT1E1ControllerFeatureState struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Controller tx-ex List
	Entries []TransportT1E1ControllerFeatureEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Slot number
	Slot *string `pulumi:"slot"`
	// Variable name
	SlotVariable *string `pulumi:"slotVariable"`
	// Card Type
	//   - Choices: `e1`, `t1`
	Type *string `pulumi:"type"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type TransportT1E1ControllerFeatureState struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Controller tx-ex List
	Entries TransportT1E1ControllerFeatureEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Slot number
	Slot pulumi.StringPtrInput
	// Variable name
	SlotVariable pulumi.StringPtrInput
	// Card Type
	//   - Choices: `e1`, `t1`
	Type pulumi.StringPtrInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (TransportT1E1ControllerFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*transportT1E1ControllerFeatureState)(nil)).Elem()
}

type transportT1E1ControllerFeatureArgs struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Controller tx-ex List
	Entries []TransportT1E1ControllerFeatureEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Slot number
	Slot *string `pulumi:"slot"`
	// Variable name
	SlotVariable *string `pulumi:"slotVariable"`
	// Card Type
	//   - Choices: `e1`, `t1`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a TransportT1E1ControllerFeature resource.
type TransportT1E1ControllerFeatureArgs struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Controller tx-ex List
	Entries TransportT1E1ControllerFeatureEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Slot number
	Slot pulumi.StringPtrInput
	// Variable name
	SlotVariable pulumi.StringPtrInput
	// Card Type
	//   - Choices: `e1`, `t1`
	Type pulumi.StringInput
}

func (TransportT1E1ControllerFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transportT1E1ControllerFeatureArgs)(nil)).Elem()
}

type TransportT1E1ControllerFeatureInput interface {
	pulumi.Input

	ToTransportT1E1ControllerFeatureOutput() TransportT1E1ControllerFeatureOutput
	ToTransportT1E1ControllerFeatureOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureOutput
}

func (*TransportT1E1ControllerFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportT1E1ControllerFeature)(nil)).Elem()
}

func (i *TransportT1E1ControllerFeature) ToTransportT1E1ControllerFeatureOutput() TransportT1E1ControllerFeatureOutput {
	return i.ToTransportT1E1ControllerFeatureOutputWithContext(context.Background())
}

func (i *TransportT1E1ControllerFeature) ToTransportT1E1ControllerFeatureOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportT1E1ControllerFeatureOutput)
}

// TransportT1E1ControllerFeatureArrayInput is an input type that accepts TransportT1E1ControllerFeatureArray and TransportT1E1ControllerFeatureArrayOutput values.
// You can construct a concrete instance of `TransportT1E1ControllerFeatureArrayInput` via:
//
//	TransportT1E1ControllerFeatureArray{ TransportT1E1ControllerFeatureArgs{...} }
type TransportT1E1ControllerFeatureArrayInput interface {
	pulumi.Input

	ToTransportT1E1ControllerFeatureArrayOutput() TransportT1E1ControllerFeatureArrayOutput
	ToTransportT1E1ControllerFeatureArrayOutputWithContext(context.Context) TransportT1E1ControllerFeatureArrayOutput
}

type TransportT1E1ControllerFeatureArray []TransportT1E1ControllerFeatureInput

func (TransportT1E1ControllerFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransportT1E1ControllerFeature)(nil)).Elem()
}

func (i TransportT1E1ControllerFeatureArray) ToTransportT1E1ControllerFeatureArrayOutput() TransportT1E1ControllerFeatureArrayOutput {
	return i.ToTransportT1E1ControllerFeatureArrayOutputWithContext(context.Background())
}

func (i TransportT1E1ControllerFeatureArray) ToTransportT1E1ControllerFeatureArrayOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportT1E1ControllerFeatureArrayOutput)
}

// TransportT1E1ControllerFeatureMapInput is an input type that accepts TransportT1E1ControllerFeatureMap and TransportT1E1ControllerFeatureMapOutput values.
// You can construct a concrete instance of `TransportT1E1ControllerFeatureMapInput` via:
//
//	TransportT1E1ControllerFeatureMap{ "key": TransportT1E1ControllerFeatureArgs{...} }
type TransportT1E1ControllerFeatureMapInput interface {
	pulumi.Input

	ToTransportT1E1ControllerFeatureMapOutput() TransportT1E1ControllerFeatureMapOutput
	ToTransportT1E1ControllerFeatureMapOutputWithContext(context.Context) TransportT1E1ControllerFeatureMapOutput
}

type TransportT1E1ControllerFeatureMap map[string]TransportT1E1ControllerFeatureInput

func (TransportT1E1ControllerFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransportT1E1ControllerFeature)(nil)).Elem()
}

func (i TransportT1E1ControllerFeatureMap) ToTransportT1E1ControllerFeatureMapOutput() TransportT1E1ControllerFeatureMapOutput {
	return i.ToTransportT1E1ControllerFeatureMapOutputWithContext(context.Background())
}

func (i TransportT1E1ControllerFeatureMap) ToTransportT1E1ControllerFeatureMapOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransportT1E1ControllerFeatureMapOutput)
}

type TransportT1E1ControllerFeatureOutput struct{ *pulumi.OutputState }

func (TransportT1E1ControllerFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransportT1E1ControllerFeature)(nil)).Elem()
}

func (o TransportT1E1ControllerFeatureOutput) ToTransportT1E1ControllerFeatureOutput() TransportT1E1ControllerFeatureOutput {
	return o
}

func (o TransportT1E1ControllerFeatureOutput) ToTransportT1E1ControllerFeatureOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureOutput {
	return o
}

// The description of the Feature
func (o TransportT1E1ControllerFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Controller tx-ex List
func (o TransportT1E1ControllerFeatureOutput) Entries() TransportT1E1ControllerFeatureEntryArrayOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) TransportT1E1ControllerFeatureEntryArrayOutput {
		return v.Entries
	}).(TransportT1E1ControllerFeatureEntryArrayOutput)
}

// Feature Profile ID
func (o TransportT1E1ControllerFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o TransportT1E1ControllerFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Slot number
func (o TransportT1E1ControllerFeatureOutput) Slot() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.StringPtrOutput { return v.Slot }).(pulumi.StringPtrOutput)
}

// Variable name
func (o TransportT1E1ControllerFeatureOutput) SlotVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.StringPtrOutput { return v.SlotVariable }).(pulumi.StringPtrOutput)
}

// Card Type
//   - Choices: `e1`, `t1`
func (o TransportT1E1ControllerFeatureOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the Feature
func (o TransportT1E1ControllerFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *TransportT1E1ControllerFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type TransportT1E1ControllerFeatureArrayOutput struct{ *pulumi.OutputState }

func (TransportT1E1ControllerFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransportT1E1ControllerFeature)(nil)).Elem()
}

func (o TransportT1E1ControllerFeatureArrayOutput) ToTransportT1E1ControllerFeatureArrayOutput() TransportT1E1ControllerFeatureArrayOutput {
	return o
}

func (o TransportT1E1ControllerFeatureArrayOutput) ToTransportT1E1ControllerFeatureArrayOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureArrayOutput {
	return o
}

func (o TransportT1E1ControllerFeatureArrayOutput) Index(i pulumi.IntInput) TransportT1E1ControllerFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransportT1E1ControllerFeature {
		return vs[0].([]*TransportT1E1ControllerFeature)[vs[1].(int)]
	}).(TransportT1E1ControllerFeatureOutput)
}

type TransportT1E1ControllerFeatureMapOutput struct{ *pulumi.OutputState }

func (TransportT1E1ControllerFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransportT1E1ControllerFeature)(nil)).Elem()
}

func (o TransportT1E1ControllerFeatureMapOutput) ToTransportT1E1ControllerFeatureMapOutput() TransportT1E1ControllerFeatureMapOutput {
	return o
}

func (o TransportT1E1ControllerFeatureMapOutput) ToTransportT1E1ControllerFeatureMapOutputWithContext(ctx context.Context) TransportT1E1ControllerFeatureMapOutput {
	return o
}

func (o TransportT1E1ControllerFeatureMapOutput) MapIndex(k pulumi.StringInput) TransportT1E1ControllerFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransportT1E1ControllerFeature {
		return vs[0].(map[string]*TransportT1E1ControllerFeature)[vs[1].(string)]
	}).(TransportT1E1ControllerFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransportT1E1ControllerFeatureInput)(nil)).Elem(), &TransportT1E1ControllerFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportT1E1ControllerFeatureArrayInput)(nil)).Elem(), TransportT1E1ControllerFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransportT1E1ControllerFeatureMapInput)(nil)).Elem(), TransportT1E1ControllerFeatureMap{})
	pulumi.RegisterOutputType(TransportT1E1ControllerFeatureOutput{})
	pulumi.RegisterOutputType(TransportT1E1ControllerFeatureArrayOutput{})
	pulumi.RegisterOutputType(TransportT1E1ControllerFeatureMapOutput{})
}
