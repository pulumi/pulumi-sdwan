// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco VPN Interface feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoVpnInterfaceFeatureTemplate(ctx, &sdwan.LookupCiscoVpnInterfaceFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoVpnInterfaceFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoVpnInterfaceFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoVpnInterfaceFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoVpnInterfaceFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoVpnInterfaceFeatureTemplate:getCiscoVpnInterfaceFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoVpnInterfaceFeatureTemplate.
type LookupCiscoVpnInterfaceFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoVpnInterfaceFeatureTemplate.
type LookupCiscoVpnInterfaceFeatureTemplateResult struct {
	// Apply ACL
	AccessLists []GetCiscoVpnInterfaceFeatureTemplateAccessList `pulumi:"accessLists"`
	// Assign IPv4 address
	Address string `pulumi:"address"`
	// Variable name
	AddressVariable string `pulumi:"addressVariable"`
	// Timeout value for dynamically learned ARP entries, \n\n seconds
	ArpTimeout int `pulumi:"arpTimeout"`
	// Variable name
	ArpTimeoutVariable string `pulumi:"arpTimeoutVariable"`
	// Interface auto detect bandwidth
	AutoBandwidthDetect bool `pulumi:"autoBandwidthDetect"`
	// Variable name
	AutoBandwidthDetectVariable string `pulumi:"autoBandwidthDetectVariable"`
	// Link autonegotiation
	Autonegotiate bool `pulumi:"autonegotiate"`
	// Variable name
	AutonegotiateVariable string `pulumi:"autonegotiateVariable"`
	// Interface downstream bandwidth capacity, in kbps
	BandwidthDownstream int `pulumi:"bandwidthDownstream"`
	// Variable name
	BandwidthDownstreamVariable string `pulumi:"bandwidthDownstreamVariable"`
	// Interface upstream bandwidth capacity, in kbps
	BandwidthUpstream int `pulumi:"bandwidthUpstream"`
	// Variable name
	BandwidthUpstreamVariable string `pulumi:"bandwidthUpstreamVariable"`
	// Block packets originating from IP address that is not from this source
	BlockNonSourceIp bool `pulumi:"blockNonSourceIp"`
	// Variable name
	BlockNonSourceIpVariable string `pulumi:"blockNonSourceIpVariable"`
	// Enable core region
	CoreRegion string `pulumi:"coreRegion"`
	// Variable name
	CoreRegionVariable string `pulumi:"coreRegionVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Enable DHCP
	Dhcp bool `pulumi:"dhcp"`
	// Set administrative distance for DHCP default route
	DhcpDistance int `pulumi:"dhcpDistance"`
	// Variable name
	DhcpDistanceVariable string `pulumi:"dhcpDistanceVariable"`
	// Variable name
	DhcpVariable string `pulumi:"dhcpVariable"`
	// Enable DHCPv6
	Dhcpv6 bool `pulumi:"dhcpv6"`
	// Variable name
	Dhcpv6Variable string `pulumi:"dhcpv6Variable"`
	// Duplex mode
	Duplex string `pulumi:"duplex"`
	// Variable name
	DuplexVariable string `pulumi:"duplexVariable"`
	// Enable core region
	EnableCoreRegion bool `pulumi:"enableCoreRegion"`
	// Enables the interface for CTS SGT authorization and forwarding.
	EnableSgt bool `pulumi:"enableSgt"`
	// Extend remote TLOC over a GRE tunnel to a local WAN interface
	GreTunnelSourceIp string `pulumi:"greTunnelSourceIp"`
	// Variable name
	GreTunnelSourceIpVariable string `pulumi:"greTunnelSourceIpVariable"`
	// Extend remote TLOC over a GRE tunnel to a local WAN interface
	GreTunnelXconnect string `pulumi:"greTunnelXconnect"`
	// Variable name
	GreTunnelXconnectVariable string `pulumi:"greTunnelXconnectVariable"`
	// Set this option to disable the icmp/icmpv6 redirect packets
	IcmpRedirectDisable bool `pulumi:"icmpRedirectDisable"`
	// Variable name
	IcmpRedirectDisableVariable string `pulumi:"icmpRedirectDisableVariable"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Interface description
	InterfaceDescription string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable string `pulumi:"interfaceDescriptionVariable"`
	// Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
	InterfaceMtu int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable string `pulumi:"interfaceMtuVariable"`
	// Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
	InterfaceName string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable string `pulumi:"interfaceNameVariable"`
	// IP Directed-Broadcast
	IpDirectedBroadcast bool `pulumi:"ipDirectedBroadcast"`
	// Variable name
	IpDirectedBroadcastVariable string `pulumi:"ipDirectedBroadcastVariable"`
	// IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
	IpMtu int `pulumi:"ipMtu"`
	// Variable name
	IpMtuVariable string `pulumi:"ipMtuVariable"`
	// Iperf server for auto bandwidth detect
	IperfServer string `pulumi:"iperfServer"`
	// Variable name
	IperfServerVariable string `pulumi:"iperfServerVariable"`
	// Variable name
	Ipv4DhcpHelperVariable string `pulumi:"ipv4DhcpHelperVariable"`
	// List of DHCP IPv4 helper addresses
	Ipv4DhcpHelpers []string `pulumi:"ipv4DhcpHelpers"`
	// Assign secondary IP addresses
	Ipv4SecondaryAddresses []GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress `pulumi:"ipv4SecondaryAddresses"`
	// Enable VRRP
	Ipv4Vrrps []GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp `pulumi:"ipv4Vrrps"`
	// Apply IPv6 access list
	Ipv6AccessLists []GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList `pulumi:"ipv6AccessLists"`
	// Assign IPv6 address
	Ipv6Address string `pulumi:"ipv6Address"`
	// Variable name
	Ipv6AddressVariable string `pulumi:"ipv6AddressVariable"`
	// DHCPv6 Helper
	Ipv6DhcpHelpers []GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper `pulumi:"ipv6DhcpHelpers"`
	// NAT64 on this interface
	Ipv6Nat bool `pulumi:"ipv6Nat"`
	// Variable name
	Ipv6NatVariable string `pulumi:"ipv6NatVariable"`
	// Assign secondary IPv6 addresses
	Ipv6SecondaryAddresses []GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress `pulumi:"ipv6SecondaryAddresses"`
	// Enable VRRP
	Ipv6Vrrps []GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp `pulumi:"ipv6Vrrps"`
	// Interval for interface load calculation
	LoadInterval int `pulumi:"loadInterval"`
	// Variable name
	LoadIntervalVariable string `pulumi:"loadIntervalVariable"`
	// Set MAC-layer address
	MacAddress string `pulumi:"macAddress"`
	// Variable name
	MacAddressVariable string `pulumi:"macAddressVariable"`
	// Media type
	MediaType string `pulumi:"mediaType"`
	// Variable name
	MediaTypeVariable string `pulumi:"mediaTypeVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Network Address Translation on this interface
	Nat bool `pulumi:"nat"`
	// NAT64 on this interface
	Nat64Interface bool `pulumi:"nat64Interface"`
	// NAT66 on this interface
	Nat66Interface bool `pulumi:"nat66Interface"`
	// Configure NAT Inside Loopback Interface
	NatInsideSourceLoopbackInterface string `pulumi:"natInsideSourceLoopbackInterface"`
	// Variable name
	NatInsideSourceLoopbackInterfaceVariable string `pulumi:"natInsideSourceLoopbackInterfaceVariable"`
	// Enable port translation(PAT)
	NatOverload bool `pulumi:"natOverload"`
	// Variable name
	NatOverloadVariable string `pulumi:"natOverloadVariable"`
	// Ending IP address of NAT Pool Prefix Length
	NatPoolPrefixLength int `pulumi:"natPoolPrefixLength"`
	// Variable name
	NatPoolPrefixLengthVariable string `pulumi:"natPoolPrefixLengthVariable"`
	// Ending IP address of NAT pool range
	NatPoolRangeEnd string `pulumi:"natPoolRangeEnd"`
	// Variable name
	NatPoolRangeEndVariable string `pulumi:"natPoolRangeEndVariable"`
	// Starting IP address of NAT pool range
	NatPoolRangeStart string `pulumi:"natPoolRangeStart"`
	// Variable name
	NatPoolRangeStartVariable string `pulumi:"natPoolRangeStartVariable"`
	// NAT type
	NatType string `pulumi:"natType"`
	// Variable name
	NatTypeVariable string `pulumi:"natTypeVariable"`
	// Configure interface as Power-over-Ethernet source
	Poe bool `pulumi:"poe"`
	// Variable name
	PoeVariable string `pulumi:"poeVariable"`
	// Enable/Disable CTS SGT propagation on an interface.
	PropagateSgt bool `pulumi:"propagateSgt"`
	// Adaptive QoS default downstream bandwidth
	QosAdaptiveBandwidthDownstream int `pulumi:"qosAdaptiveBandwidthDownstream"`
	// Variable name
	QosAdaptiveBandwidthDownstreamVariable string `pulumi:"qosAdaptiveBandwidthDownstreamVariable"`
	// Adaptive QoS default upstream bandwidth
	QosAdaptiveBandwidthUpstream int `pulumi:"qosAdaptiveBandwidthUpstream"`
	// Variable name
	QosAdaptiveBandwidthUpstreamVariable string `pulumi:"qosAdaptiveBandwidthUpstreamVariable"`
	// Downstream max bandwidth limit
	QosAdaptiveMaxDownstream int `pulumi:"qosAdaptiveMaxDownstream"`
	// Variable name
	QosAdaptiveMaxDownstreamVariable string `pulumi:"qosAdaptiveMaxDownstreamVariable"`
	// Upstream max bandwidth limit
	QosAdaptiveMaxUpstream int `pulumi:"qosAdaptiveMaxUpstream"`
	// Variable name
	QosAdaptiveMaxUpstreamVariable string `pulumi:"qosAdaptiveMaxUpstreamVariable"`
	// Downstream min bandwidth limit
	QosAdaptiveMinDownstream int `pulumi:"qosAdaptiveMinDownstream"`
	// Variable name
	QosAdaptiveMinDownstreamVariable string `pulumi:"qosAdaptiveMinDownstreamVariable"`
	// Upstream min bandwidth limit
	QosAdaptiveMinUpstream int `pulumi:"qosAdaptiveMinUpstream"`
	// Variable name
	QosAdaptiveMinUpstreamVariable string `pulumi:"qosAdaptiveMinUpstreamVariable"`
	// Periodic timer for adaptive QoS in minutes
	QosAdaptivePeriod int `pulumi:"qosAdaptivePeriod"`
	// Variable name
	QosAdaptivePeriodVariable string `pulumi:"qosAdaptivePeriodVariable"`
	// Name of QoS map
	QosMap string `pulumi:"qosMap"`
	// Variable name
	QosMapVariable string `pulumi:"qosMapVariable"`
	// Name of VPN QoS map
	QosMapVpn string `pulumi:"qosMapVpn"`
	// Variable name
	QosMapVpnVariable string `pulumi:"qosMapVpnVariable"`
	// Name of rewrite rule
	RewriteRuleName string `pulumi:"rewriteRuleName"`
	// Variable name
	RewriteRuleNameVariable string `pulumi:"rewriteRuleNameVariable"`
	// Enable secondary region
	SecondaryRegion string `pulumi:"secondaryRegion"`
	// Variable name
	SecondaryRegionVariable string `pulumi:"secondaryRegionVariable"`
	// Enables the interface for CTS SGT authorization and forwarding.
	SgtEnforcement bool `pulumi:"sgtEnforcement"`
	// SGT value between 2 and 65519.
	SgtEnforcementSgt int `pulumi:"sgtEnforcementSgt"`
	// Variable name
	SgtEnforcementSgtVariable string `pulumi:"sgtEnforcementSgtVariable"`
	// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
	ShapingRate int `pulumi:"shapingRate"`
	// Variable name
	ShapingRateVariable string `pulumi:"shapingRateVariable"`
	// Administrative state
	Shutdown bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable string `pulumi:"shutdownVariable"`
	// Set interface speed
	Speed string `pulumi:"speed"`
	// Variable name
	SpeedVariable string `pulumi:"speedVariable"`
	// Configure static ARP entries
	StaticArps []GetCiscoVpnInterfaceFeatureTemplateStaticArp `pulumi:"staticArps"`
	// static NAT
	StaticNat66Entries []GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry `pulumi:"staticNat66Entries"`
	// Configure static NAT entries
	StaticNatEntries []GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry `pulumi:"staticNatEntries"`
	// Configure Port Forward entries
	StaticPortForwardEntries []GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry `pulumi:"staticPortForwardEntries"`
	// SGT value between 2 and 65519.
	StaticSgt int `pulumi:"staticSgt"`
	// Indicates that the interface is trustworthy for CTS.
	StaticSgtTrusted bool `pulumi:"staticSgtTrusted"`
	// Variable name
	StaticSgtVariable string `pulumi:"staticSgtVariable"`
	// TCP MSS on SYN packets, in bytes
	TcpMssAdjust int `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable string `pulumi:"tcpMssAdjustVariable"`
	// Set NAT TCP session timeout, in minutes
	TcpTimeout int `pulumi:"tcpTimeout"`
	// Variable name
	TcpTimeoutVariable string `pulumi:"tcpTimeoutVariable"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// Extends a local TLOC to a remote node only for vpn 0
	TlocExtension string `pulumi:"tlocExtension"`
	// Variable name
	TlocExtensionVariable string `pulumi:"tlocExtensionVariable"`
	// Variable name
	TrackerVariable string `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers []string `pulumi:"trackers"`
	// Tunnels Bandwidth Percent
	TunnelBandwidth int `pulumi:"tunnelBandwidth"`
	// Variable name
	TunnelBandwidthVariable string `pulumi:"tunnelBandwidthVariable"`
	// Allow all traffic. Overrides all other allow-service options if allow-service all is set
	TunnelInterfaceAllowAll bool `pulumi:"tunnelInterfaceAllowAll"`
	// Variable name
	TunnelInterfaceAllowAllVariable string `pulumi:"tunnelInterfaceAllowAllVariable"`
	// Allow/deny BGP
	TunnelInterfaceAllowBgp bool `pulumi:"tunnelInterfaceAllowBgp"`
	// Variable name
	TunnelInterfaceAllowBgpVariable string `pulumi:"tunnelInterfaceAllowBgpVariable"`
	// Allow/Deny DHCP
	TunnelInterfaceAllowDhcp bool `pulumi:"tunnelInterfaceAllowDhcp"`
	// Variable name
	TunnelInterfaceAllowDhcpVariable string `pulumi:"tunnelInterfaceAllowDhcpVariable"`
	// Allow/Deny DNS
	TunnelInterfaceAllowDns bool `pulumi:"tunnelInterfaceAllowDns"`
	// Variable name
	TunnelInterfaceAllowDnsVariable string `pulumi:"tunnelInterfaceAllowDnsVariable"`
	// Allow/Deny Https
	TunnelInterfaceAllowHttps bool `pulumi:"tunnelInterfaceAllowHttps"`
	// Variable name
	TunnelInterfaceAllowHttpsVariable string `pulumi:"tunnelInterfaceAllowHttpsVariable"`
	// Allow/Deny ICMP
	TunnelInterfaceAllowIcmp bool `pulumi:"tunnelInterfaceAllowIcmp"`
	// Variable name
	TunnelInterfaceAllowIcmpVariable string `pulumi:"tunnelInterfaceAllowIcmpVariable"`
	// Allow/Deny NETCONF
	TunnelInterfaceAllowNetconf bool `pulumi:"tunnelInterfaceAllowNetconf"`
	// Variable name
	TunnelInterfaceAllowNetconfVariable string `pulumi:"tunnelInterfaceAllowNetconfVariable"`
	// Allow/Deny NTP
	TunnelInterfaceAllowNtp bool `pulumi:"tunnelInterfaceAllowNtp"`
	// Variable name
	TunnelInterfaceAllowNtpVariable string `pulumi:"tunnelInterfaceAllowNtpVariable"`
	// Allow/Deny OSPF
	TunnelInterfaceAllowOspf bool `pulumi:"tunnelInterfaceAllowOspf"`
	// Variable name
	TunnelInterfaceAllowOspfVariable string `pulumi:"tunnelInterfaceAllowOspfVariable"`
	// Allow/Deny SNMP
	TunnelInterfaceAllowSnmp bool `pulumi:"tunnelInterfaceAllowSnmp"`
	// Variable name
	TunnelInterfaceAllowSnmpVariable string `pulumi:"tunnelInterfaceAllowSnmpVariable"`
	// Allow/Deny SSH
	TunnelInterfaceAllowSsh bool `pulumi:"tunnelInterfaceAllowSsh"`
	// Variable name
	TunnelInterfaceAllowSshVariable string `pulumi:"tunnelInterfaceAllowSshVariable"`
	// Allow/Deny STUN
	TunnelInterfaceAllowStun bool `pulumi:"tunnelInterfaceAllowStun"`
	// Variable name
	TunnelInterfaceAllowStunVariable string `pulumi:"tunnelInterfaceAllowStunVariable"`
	// Bind loopback tunnel interface to a physical interface
	TunnelInterfaceBindLoopbackTunnel string `pulumi:"tunnelInterfaceBindLoopbackTunnel"`
	// Variable name
	TunnelInterfaceBindLoopbackTunnelVariable string `pulumi:"tunnelInterfaceBindLoopbackTunnelVariable"`
	// Set TLOC as border TLOC
	TunnelInterfaceBorder bool `pulumi:"tunnelInterfaceBorder"`
	// Variable name
	TunnelInterfaceBorderVariable string `pulumi:"tunnelInterfaceBorderVariable"`
	// Set carrier for TLOC
	TunnelInterfaceCarrier string `pulumi:"tunnelInterfaceCarrier"`
	// Variable name
	TunnelInterfaceCarrierVariable string `pulumi:"tunnelInterfaceCarrierVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
	TunnelInterfaceClearDontFragment bool `pulumi:"tunnelInterfaceClearDontFragment"`
	// Variable name
	TunnelInterfaceClearDontFragmentVariable string `pulumi:"tunnelInterfaceClearDontFragmentVariable"`
	// Set color for TLOC
	TunnelInterfaceColor string `pulumi:"tunnelInterfaceColor"`
	// Restrict this TLOC behavior
	TunnelInterfaceColorRestrict bool `pulumi:"tunnelInterfaceColorRestrict"`
	// Variable name
	TunnelInterfaceColorRestrictVariable string `pulumi:"tunnelInterfaceColorRestrictVariable"`
	// Variable name
	TunnelInterfaceColorVariable string `pulumi:"tunnelInterfaceColorVariable"`
	// Allow Control Connection
	TunnelInterfaceControlConnections bool `pulumi:"tunnelInterfaceControlConnections"`
	// Variable name
	TunnelInterfaceControlConnectionsVariable string `pulumi:"tunnelInterfaceControlConnectionsVariable"`
	// Encapsulation for TLOC
	TunnelInterfaceEncapsulations []GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation `pulumi:"tunnelInterfaceEncapsulations"`
	// Variable name
	TunnelInterfaceExcludeControllerGroupListVariable string `pulumi:"tunnelInterfaceExcludeControllerGroupListVariable"`
	// Exclude the following controller groups defined in this list
	TunnelInterfaceExcludeControllerGroupLists []int `pulumi:"tunnelInterfaceExcludeControllerGroupLists"`
	// Extend the TLOC to a remote node over GRE tunnel
	TunnelInterfaceGreTunnelDestinationIp string `pulumi:"tunnelInterfaceGreTunnelDestinationIp"`
	// Variable name
	TunnelInterfaceGreTunnelDestinationIpVariable string `pulumi:"tunnelInterfaceGreTunnelDestinationIpVariable"`
	// List of groups
	TunnelInterfaceGroups []int `pulumi:"tunnelInterfaceGroups"`
	// Variable name
	TunnelInterfaceGroupsVariable string `pulumi:"tunnelInterfaceGroupsVariable"`
	// Set time period of control hello packets \n\n milli seconds
	TunnelInterfaceHelloInterval int `pulumi:"tunnelInterfaceHelloInterval"`
	// Variable name
	TunnelInterfaceHelloIntervalVariable string `pulumi:"tunnelInterfaceHelloIntervalVariable"`
	// Set tolerance of control hello packets \n\n seconds
	TunnelInterfaceHelloTolerance int `pulumi:"tunnelInterfaceHelloTolerance"`
	// Variable name
	TunnelInterfaceHelloToleranceVariable string `pulumi:"tunnelInterfaceHelloToleranceVariable"`
	// Set TLOC as last resort
	TunnelInterfaceLastResortCircuit bool `pulumi:"tunnelInterfaceLastResortCircuit"`
	// Variable name
	TunnelInterfaceLastResortCircuitVariable string `pulumi:"tunnelInterfaceLastResortCircuitVariable"`
	// Set the interface as a low-bandwidth circuit
	TunnelInterfaceLowBandwidthLink bool `pulumi:"tunnelInterfaceLowBandwidthLink"`
	// Variable name
	TunnelInterfaceLowBandwidthLinkVariable string `pulumi:"tunnelInterfaceLowBandwidthLinkVariable"`
	// Set the maximum number of control connections for this TLOC
	TunnelInterfaceMaxControlConnections int `pulumi:"tunnelInterfaceMaxControlConnections"`
	// Variable name
	TunnelInterfaceMaxControlConnectionsVariable string `pulumi:"tunnelInterfaceMaxControlConnectionsVariable"`
	// Set time period of nat refresh packets \n\n seconds
	TunnelInterfaceNatRefreshInterval int `pulumi:"tunnelInterfaceNatRefreshInterval"`
	// Variable name
	TunnelInterfaceNatRefreshIntervalVariable string `pulumi:"tunnelInterfaceNatRefreshIntervalVariable"`
	// Accept and respond to network-prefix-directed broadcasts)
	TunnelInterfaceNetworkBroadcast bool `pulumi:"tunnelInterfaceNetworkBroadcast"`
	// Variable name
	TunnelInterfaceNetworkBroadcastVariable string `pulumi:"tunnelInterfaceNetworkBroadcastVariable"`
	// Disallow port hopping on the tunnel interface
	TunnelInterfacePortHop bool `pulumi:"tunnelInterfacePortHop"`
	// Variable name
	TunnelInterfacePortHopVariable string `pulumi:"tunnelInterfacePortHopVariable"`
	// CTS SGT Propagation configuration
	TunnelInterfacePropagateSgt bool `pulumi:"tunnelInterfacePropagateSgt"`
	// Variable name
	TunnelInterfacePropagateSgtVariable string `pulumi:"tunnelInterfacePropagateSgtVariable"`
	// Tunnel TCP MSS on SYN packets, in bytes
	TunnelInterfaceTunnelTcpMss int `pulumi:"tunnelInterfaceTunnelTcpMss"`
	// Variable name
	TunnelInterfaceTunnelTcpMssVariable string `pulumi:"tunnelInterfaceTunnelTcpMssVariable"`
	// Put this wan interface in STUN mode only
	TunnelInterfaceVbondAsStunServer bool `pulumi:"tunnelInterfaceVbondAsStunServer"`
	// Variable name
	TunnelInterfaceVbondAsStunServerVariable string `pulumi:"tunnelInterfaceVbondAsStunServerVariable"`
	// Set interface preference for control connection to vManage \n\n
	TunnelInterfaceVmanageConnectionPreference int `pulumi:"tunnelInterfaceVmanageConnectionPreference"`
	// Variable name
	TunnelInterfaceVmanageConnectionPreferenceVariable string `pulumi:"tunnelInterfaceVmanageConnectionPreferenceVariable"`
	// Set tunnel QoS mode
	TunnelQosMode string `pulumi:"tunnelQosMode"`
	// Variable name
	TunnelQosModeVariable string `pulumi:"tunnelQosModeVariable"`
	// Set NAT UDP session timeout, in minutes
	UdpTimeout int `pulumi:"udpTimeout"`
	// Variable name
	UdpTimeoutVariable string `pulumi:"udpTimeoutVariable"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoVpnInterfaceFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoVpnInterfaceFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoVpnInterfaceFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCiscoVpnInterfaceFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoVpnInterfaceFeatureTemplateArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupCiscoVpnInterfaceFeatureTemplateResult
			secret, err := ctx.InvokePackageRaw("sdwan:index/getCiscoVpnInterfaceFeatureTemplate:getCiscoVpnInterfaceFeatureTemplate", args, &rv, "", opts...)
			if err != nil {
				return LookupCiscoVpnInterfaceFeatureTemplateResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupCiscoVpnInterfaceFeatureTemplateResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupCiscoVpnInterfaceFeatureTemplateResultOutput), nil
			}
			return output, nil
		}).(LookupCiscoVpnInterfaceFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoVpnInterfaceFeatureTemplate.
type LookupCiscoVpnInterfaceFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoVpnInterfaceFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoVpnInterfaceFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoVpnInterfaceFeatureTemplate.
type LookupCiscoVpnInterfaceFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoVpnInterfaceFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ToLookupCiscoVpnInterfaceFeatureTemplateResultOutput() LookupCiscoVpnInterfaceFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ToLookupCiscoVpnInterfaceFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoVpnInterfaceFeatureTemplateResultOutput {
	return o
}

// Apply ACL
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) AccessLists() GetCiscoVpnInterfaceFeatureTemplateAccessListArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateAccessList {
		return v.AccessLists
	}).(GetCiscoVpnInterfaceFeatureTemplateAccessListArrayOutput)
}

// Assign IPv4 address
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.AddressVariable }).(pulumi.StringOutput)
}

// Timeout value for dynamically learned ARP entries, \n\n seconds
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ArpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.ArpTimeout }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ArpTimeoutVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.ArpTimeoutVariable }).(pulumi.StringOutput)
}

// Interface auto detect bandwidth
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) AutoBandwidthDetect() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.AutoBandwidthDetect }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) AutoBandwidthDetectVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.AutoBandwidthDetectVariable }).(pulumi.StringOutput)
}

// Link autonegotiation
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Autonegotiate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Autonegotiate }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) AutonegotiateVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.AutonegotiateVariable }).(pulumi.StringOutput)
}

// Interface downstream bandwidth capacity, in kbps
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) BandwidthDownstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.BandwidthDownstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) BandwidthDownstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.BandwidthDownstreamVariable }).(pulumi.StringOutput)
}

// Interface upstream bandwidth capacity, in kbps
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) BandwidthUpstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.BandwidthUpstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) BandwidthUpstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.BandwidthUpstreamVariable }).(pulumi.StringOutput)
}

// Block packets originating from IP address that is not from this source
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) BlockNonSourceIp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.BlockNonSourceIp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) BlockNonSourceIpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.BlockNonSourceIpVariable }).(pulumi.StringOutput)
}

// Enable core region
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) CoreRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.CoreRegion }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) CoreRegionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.CoreRegionVariable }).(pulumi.StringOutput)
}

// The description of the feature template
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Enable DHCP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Dhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Dhcp }).(pulumi.BoolOutput)
}

// Set administrative distance for DHCP default route
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) DhcpDistance() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.DhcpDistance }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) DhcpDistanceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.DhcpDistanceVariable }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) DhcpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.DhcpVariable }).(pulumi.StringOutput)
}

// Enable DHCPv6
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Dhcpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Dhcpv6 }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Dhcpv6Variable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Dhcpv6Variable }).(pulumi.StringOutput)
}

// Duplex mode
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Duplex() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Duplex }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) DuplexVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.DuplexVariable }).(pulumi.StringOutput)
}

// Enable core region
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) EnableCoreRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.EnableCoreRegion }).(pulumi.BoolOutput)
}

// Enables the interface for CTS SGT authorization and forwarding.
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) EnableSgt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.EnableSgt }).(pulumi.BoolOutput)
}

// Extend remote TLOC over a GRE tunnel to a local WAN interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) GreTunnelSourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.GreTunnelSourceIp }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) GreTunnelSourceIpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.GreTunnelSourceIpVariable }).(pulumi.StringOutput)
}

// Extend remote TLOC over a GRE tunnel to a local WAN interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) GreTunnelXconnect() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.GreTunnelXconnect }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) GreTunnelXconnectVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.GreTunnelXconnectVariable }).(pulumi.StringOutput)
}

// Set this option to disable the icmp/icmpv6 redirect packets
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IcmpRedirectDisable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.IcmpRedirectDisable }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IcmpRedirectDisableVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.IcmpRedirectDisableVariable }).(pulumi.StringOutput)
}

// The id of the feature template
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Interface description
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) InterfaceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.InterfaceDescription }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) InterfaceDescriptionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.InterfaceDescriptionVariable }).(pulumi.StringOutput)
}

// Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) InterfaceMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.InterfaceMtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) InterfaceMtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.InterfaceMtuVariable }).(pulumi.StringOutput)
}

// Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.InterfaceName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) InterfaceNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.InterfaceNameVariable }).(pulumi.StringOutput)
}

// IP Directed-Broadcast
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IpDirectedBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.IpDirectedBroadcast }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IpDirectedBroadcastVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.IpDirectedBroadcastVariable }).(pulumi.StringOutput)
}

// IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IpMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.IpMtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IpMtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.IpMtuVariable }).(pulumi.StringOutput)
}

// Iperf server for auto bandwidth detect
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IperfServer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.IperfServer }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) IperfServerVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.IperfServerVariable }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv4DhcpHelperVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Ipv4DhcpHelperVariable }).(pulumi.StringOutput)
}

// List of DHCP IPv4 helper addresses
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv4DhcpHelpers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []string { return v.Ipv4DhcpHelpers }).(pulumi.StringArrayOutput)
}

// Assign secondary IP addresses
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv4SecondaryAddresses() GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress {
		return v.Ipv4SecondaryAddresses
	}).(GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArrayOutput)
}

// Enable VRRP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv4Vrrps() GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp {
		return v.Ipv4Vrrps
	}).(GetCiscoVpnInterfaceFeatureTemplateIpv4VrrpArrayOutput)
}

// Apply IPv6 access list
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6AccessLists() GetCiscoVpnInterfaceFeatureTemplateIpv6AccessListArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList {
		return v.Ipv6AccessLists
	}).(GetCiscoVpnInterfaceFeatureTemplateIpv6AccessListArrayOutput)
}

// Assign IPv6 address
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Ipv6AddressVariable }).(pulumi.StringOutput)
}

// DHCPv6 Helper
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6DhcpHelpers() GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper {
		return v.Ipv6DhcpHelpers
	}).(GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArrayOutput)
}

// NAT64 on this interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6Nat() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Ipv6Nat }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6NatVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Ipv6NatVariable }).(pulumi.StringOutput)
}

// Assign secondary IPv6 addresses
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6SecondaryAddresses() GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress {
		return v.Ipv6SecondaryAddresses
	}).(GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArrayOutput)
}

// Enable VRRP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Ipv6Vrrps() GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp {
		return v.Ipv6Vrrps
	}).(GetCiscoVpnInterfaceFeatureTemplateIpv6VrrpArrayOutput)
}

// Interval for interface load calculation
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) LoadInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.LoadInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) LoadIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.LoadIntervalVariable }).(pulumi.StringOutput)
}

// Set MAC-layer address
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.MacAddress }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) MacAddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.MacAddressVariable }).(pulumi.StringOutput)
}

// Media type
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) MediaType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.MediaType }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) MediaTypeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.MediaTypeVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Network Address Translation on this interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Nat() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Nat }).(pulumi.BoolOutput)
}

// NAT64 on this interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Nat64Interface() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Nat64Interface }).(pulumi.BoolOutput)
}

// NAT66 on this interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Nat66Interface() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Nat66Interface }).(pulumi.BoolOutput)
}

// Configure NAT Inside Loopback Interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatInsideSourceLoopbackInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatInsideSourceLoopbackInterface }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatInsideSourceLoopbackInterfaceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.NatInsideSourceLoopbackInterfaceVariable
	}).(pulumi.StringOutput)
}

// Enable port translation(PAT)
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatOverload() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.NatOverload }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatOverloadVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatOverloadVariable }).(pulumi.StringOutput)
}

// Ending IP address of NAT Pool Prefix Length
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatPoolPrefixLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.NatPoolPrefixLength }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatPoolPrefixLengthVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatPoolPrefixLengthVariable }).(pulumi.StringOutput)
}

// Ending IP address of NAT pool range
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatPoolRangeEnd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatPoolRangeEnd }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatPoolRangeEndVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatPoolRangeEndVariable }).(pulumi.StringOutput)
}

// Starting IP address of NAT pool range
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatPoolRangeStart() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatPoolRangeStart }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatPoolRangeStartVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatPoolRangeStartVariable }).(pulumi.StringOutput)
}

// NAT type
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatType }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) NatTypeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.NatTypeVariable }).(pulumi.StringOutput)
}

// Configure interface as Power-over-Ethernet source
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Poe() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Poe }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) PoeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.PoeVariable }).(pulumi.StringOutput)
}

// Enable/Disable CTS SGT propagation on an interface.
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) PropagateSgt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.PropagateSgt }).(pulumi.BoolOutput)
}

// Adaptive QoS default downstream bandwidth
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveBandwidthDownstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptiveBandwidthDownstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveBandwidthDownstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.QosAdaptiveBandwidthDownstreamVariable
	}).(pulumi.StringOutput)
}

// Adaptive QoS default upstream bandwidth
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveBandwidthUpstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptiveBandwidthUpstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveBandwidthUpstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.QosAdaptiveBandwidthUpstreamVariable
	}).(pulumi.StringOutput)
}

// Downstream max bandwidth limit
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMaxDownstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptiveMaxDownstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMaxDownstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosAdaptiveMaxDownstreamVariable }).(pulumi.StringOutput)
}

// Upstream max bandwidth limit
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMaxUpstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptiveMaxUpstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMaxUpstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosAdaptiveMaxUpstreamVariable }).(pulumi.StringOutput)
}

// Downstream min bandwidth limit
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMinDownstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptiveMinDownstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMinDownstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosAdaptiveMinDownstreamVariable }).(pulumi.StringOutput)
}

// Upstream min bandwidth limit
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMinUpstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptiveMinUpstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptiveMinUpstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosAdaptiveMinUpstreamVariable }).(pulumi.StringOutput)
}

// Periodic timer for adaptive QoS in minutes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptivePeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.QosAdaptivePeriod }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosAdaptivePeriodVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosAdaptivePeriodVariable }).(pulumi.StringOutput)
}

// Name of QoS map
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosMap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosMap }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosMapVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosMapVariable }).(pulumi.StringOutput)
}

// Name of VPN QoS map
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosMapVpn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosMapVpn }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) QosMapVpnVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.QosMapVpnVariable }).(pulumi.StringOutput)
}

// Name of rewrite rule
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) RewriteRuleName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.RewriteRuleName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) RewriteRuleNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.RewriteRuleNameVariable }).(pulumi.StringOutput)
}

// Enable secondary region
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) SecondaryRegion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.SecondaryRegion }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) SecondaryRegionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.SecondaryRegionVariable }).(pulumi.StringOutput)
}

// Enables the interface for CTS SGT authorization and forwarding.
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) SgtEnforcement() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.SgtEnforcement }).(pulumi.BoolOutput)
}

// SGT value between 2 and 65519.
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) SgtEnforcementSgt() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.SgtEnforcementSgt }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) SgtEnforcementSgtVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.SgtEnforcementSgtVariable }).(pulumi.StringOutput)
}

// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ShapingRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.ShapingRate }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ShapingRateVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.ShapingRateVariable }).(pulumi.StringOutput)
}

// Administrative state
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) ShutdownVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.ShutdownVariable }).(pulumi.StringOutput)
}

// Set interface speed
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Speed() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.Speed }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) SpeedVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.SpeedVariable }).(pulumi.StringOutput)
}

// Configure static ARP entries
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticArps() GetCiscoVpnInterfaceFeatureTemplateStaticArpArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateStaticArp {
		return v.StaticArps
	}).(GetCiscoVpnInterfaceFeatureTemplateStaticArpArrayOutput)
}

// static NAT
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticNat66Entries() GetCiscoVpnInterfaceFeatureTemplateStaticNat66EntryArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry {
		return v.StaticNat66Entries
	}).(GetCiscoVpnInterfaceFeatureTemplateStaticNat66EntryArrayOutput)
}

// Configure static NAT entries
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticNatEntries() GetCiscoVpnInterfaceFeatureTemplateStaticNatEntryArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry {
		return v.StaticNatEntries
	}).(GetCiscoVpnInterfaceFeatureTemplateStaticNatEntryArrayOutput)
}

// Configure Port Forward entries
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticPortForwardEntries() GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry {
		return v.StaticPortForwardEntries
	}).(GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArrayOutput)
}

// SGT value between 2 and 65519.
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticSgt() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.StaticSgt }).(pulumi.IntOutput)
}

// Indicates that the interface is trustworthy for CTS.
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticSgtTrusted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.StaticSgtTrusted }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) StaticSgtVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.StaticSgtVariable }).(pulumi.StringOutput)
}

// TCP MSS on SYN packets, in bytes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TcpMssAdjust() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TcpMssAdjust }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TcpMssAdjustVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TcpMssAdjustVariable }).(pulumi.StringOutput)
}

// Set NAT TCP session timeout, in minutes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TcpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TcpTimeout }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TcpTimeoutVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TcpTimeoutVariable }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Extends a local TLOC to a remote node only for vpn 0
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TlocExtension() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TlocExtension }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TlocExtensionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TlocExtensionVariable }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TrackerVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TrackerVariable }).(pulumi.StringOutput)
}

// Enable tracker for this interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Trackers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []string { return v.Trackers }).(pulumi.StringArrayOutput)
}

// Tunnels Bandwidth Percent
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TunnelBandwidth }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelBandwidthVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelBandwidthVariable }).(pulumi.StringOutput)
}

// Allow all traffic. Overrides all other allow-service options if allow-service all is set
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowAll }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowAllVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowAllVariable }).(pulumi.StringOutput)
}

// Allow/deny BGP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowBgp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowBgpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowBgpVariable }).(pulumi.StringOutput)
}

// Allow/Deny DHCP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowDhcp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowDhcpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowDhcpVariable }).(pulumi.StringOutput)
}

// Allow/Deny DNS
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowDns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowDns }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowDnsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowDnsVariable }).(pulumi.StringOutput)
}

// Allow/Deny Https
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowHttps }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowHttpsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceAllowHttpsVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny ICMP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowIcmp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowIcmp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowIcmpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowIcmpVariable }).(pulumi.StringOutput)
}

// Allow/Deny NETCONF
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowNetconf() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowNetconf }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowNetconfVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceAllowNetconfVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny NTP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowNtp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowNtp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowNtpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowNtpVariable }).(pulumi.StringOutput)
}

// Allow/Deny OSPF
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowOspf() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowOspf }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowOspfVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowOspfVariable }).(pulumi.StringOutput)
}

// Allow/Deny SNMP
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowSnmp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowSnmp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowSnmpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowSnmpVariable }).(pulumi.StringOutput)
}

// Allow/Deny SSH
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowSsh() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowSsh }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowSshVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowSshVariable }).(pulumi.StringOutput)
}

// Allow/Deny STUN
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowStun() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceAllowStun }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceAllowStunVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceAllowStunVariable }).(pulumi.StringOutput)
}

// Bind loopback tunnel interface to a physical interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceBindLoopbackTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceBindLoopbackTunnel
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceBindLoopbackTunnelVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceBindLoopbackTunnelVariable
	}).(pulumi.StringOutput)
}

// Set TLOC as border TLOC
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceBorder() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceBorder }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceBorderVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceBorderVariable }).(pulumi.StringOutput)
}

// Set carrier for TLOC
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceCarrier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceCarrier }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceCarrierVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceCarrierVariable }).(pulumi.StringOutput)
}

// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceClearDontFragment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceClearDontFragment }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceClearDontFragmentVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceClearDontFragmentVariable
	}).(pulumi.StringOutput)
}

// Set color for TLOC
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceColor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceColor }).(pulumi.StringOutput)
}

// Restrict this TLOC behavior
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceColorRestrict() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceColorRestrict }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceColorRestrictVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceColorRestrictVariable
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceColorVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceColorVariable }).(pulumi.StringOutput)
}

// Allow Control Connection
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceControlConnections() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceControlConnections }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceControlConnectionsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceControlConnectionsVariable
	}).(pulumi.StringOutput)
}

// Encapsulation for TLOC
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceEncapsulations() GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation {
		return v.TunnelInterfaceEncapsulations
	}).(GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArrayOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceExcludeControllerGroupListVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceExcludeControllerGroupListVariable
	}).(pulumi.StringOutput)
}

// Exclude the following controller groups defined in this list
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceExcludeControllerGroupLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []int {
		return v.TunnelInterfaceExcludeControllerGroupLists
	}).(pulumi.IntArrayOutput)
}

// Extend the TLOC to a remote node over GRE tunnel
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceGreTunnelDestinationIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceGreTunnelDestinationIp
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceGreTunnelDestinationIpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceGreTunnelDestinationIpVariable
	}).(pulumi.StringOutput)
}

// List of groups
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) []int { return v.TunnelInterfaceGroups }).(pulumi.IntArrayOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceGroupsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfaceGroupsVariable }).(pulumi.StringOutput)
}

// Set time period of control hello packets \n\n milli seconds
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceHelloInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TunnelInterfaceHelloInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceHelloIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceHelloIntervalVariable
	}).(pulumi.StringOutput)
}

// Set tolerance of control hello packets \n\n seconds
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceHelloTolerance() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TunnelInterfaceHelloTolerance }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceHelloToleranceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceHelloToleranceVariable
	}).(pulumi.StringOutput)
}

// Set TLOC as last resort
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceLastResortCircuit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceLastResortCircuit }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceLastResortCircuitVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceLastResortCircuitVariable
	}).(pulumi.StringOutput)
}

// Set the interface as a low-bandwidth circuit
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceLowBandwidthLink() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceLowBandwidthLink }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceLowBandwidthLinkVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceLowBandwidthLinkVariable
	}).(pulumi.StringOutput)
}

// Set the maximum number of control connections for this TLOC
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceMaxControlConnections() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int {
		return v.TunnelInterfaceMaxControlConnections
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceMaxControlConnectionsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceMaxControlConnectionsVariable
	}).(pulumi.StringOutput)
}

// Set time period of nat refresh packets \n\n seconds
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceNatRefreshInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TunnelInterfaceNatRefreshInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceNatRefreshIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceNatRefreshIntervalVariable
	}).(pulumi.StringOutput)
}

// Accept and respond to network-prefix-directed broadcasts)
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceNetworkBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceNetworkBroadcast }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceNetworkBroadcastVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceNetworkBroadcastVariable
	}).(pulumi.StringOutput)
}

// Disallow port hopping on the tunnel interface
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfacePortHop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfacePortHop }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfacePortHopVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelInterfacePortHopVariable }).(pulumi.StringOutput)
}

// CTS SGT Propagation configuration
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfacePropagateSgt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfacePropagateSgt }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfacePropagateSgtVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfacePropagateSgtVariable
	}).(pulumi.StringOutput)
}

// Tunnel TCP MSS on SYN packets, in bytes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceTunnelTcpMss() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.TunnelInterfaceTunnelTcpMss }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceTunnelTcpMssVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceTunnelTcpMssVariable
	}).(pulumi.StringOutput)
}

// Put this wan interface in STUN mode only
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceVbondAsStunServer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) bool { return v.TunnelInterfaceVbondAsStunServer }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceVbondAsStunServerVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceVbondAsStunServerVariable
	}).(pulumi.StringOutput)
}

// Set interface preference for control connection to vManage \n\n
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceVmanageConnectionPreference() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int {
		return v.TunnelInterfaceVmanageConnectionPreference
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelInterfaceVmanageConnectionPreferenceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string {
		return v.TunnelInterfaceVmanageConnectionPreferenceVariable
	}).(pulumi.StringOutput)
}

// Set tunnel QoS mode
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelQosMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelQosMode }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) TunnelQosModeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.TunnelQosModeVariable }).(pulumi.StringOutput)
}

// Set NAT UDP session timeout, in minutes
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) UdpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.UdpTimeout }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) UdpTimeoutVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) string { return v.UdpTimeoutVariable }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoVpnInterfaceFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoVpnInterfaceFeatureTemplateResultOutput{})
}
