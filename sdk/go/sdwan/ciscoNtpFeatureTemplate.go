// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco NTP feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCiscoNtpFeatureTemplate(ctx, "example", &sdwan.CiscoNtpFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				Master:                pulumi.Bool(true),
//				MasterStratum:         pulumi.Int(6),
//				MasterSourceInterface: pulumi.String("e1"),
//				TrustedKeys: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				AuthenticationKeys: sdwan.CiscoNtpFeatureTemplateAuthenticationKeyArray{
//					&sdwan.CiscoNtpFeatureTemplateAuthenticationKeyArgs{
//						Id:    pulumi.Int(1),
//						Value: pulumi.String("12345"),
//					},
//				},
//				Servers: sdwan.CiscoNtpFeatureTemplateServerArray{
//					&sdwan.CiscoNtpFeatureTemplateServerArgs{
//						Hostname_ip:           "NTP_SERVER1",
//						Authentication_key_id: 1,
//						Vpn_id:                1,
//						Version:               pulumi.Int(4),
//						Source_interface:      "e1",
//						Prefer:                pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoNtpFeatureTemplate struct {
	pulumi.CustomResourceState

	// Set MD5 authentication key
	AuthenticationKeys CiscoNtpFeatureTemplateAuthenticationKeyArrayOutput `pulumi:"authenticationKeys"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Configure device as NTP master
	//   - Default value: `false`
	Master pulumi.BoolPtrOutput `pulumi:"master"`
	// Set interface for NTP Master
	MasterSourceInterface pulumi.StringPtrOutput `pulumi:"masterSourceInterface"`
	// Variable name
	MasterSourceInterfaceVariable pulumi.StringPtrOutput `pulumi:"masterSourceInterfaceVariable"`
	// Master Stratum <1..15>
	//   - Range: `1`-`15`
	MasterStratum pulumi.IntPtrOutput `pulumi:"masterStratum"`
	// Variable name
	MasterStratumVariable pulumi.StringPtrOutput `pulumi:"masterStratumVariable"`
	// Variable name
	MasterVariable pulumi.StringPtrOutput `pulumi:"masterVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure NTP servers
	Servers CiscoNtpFeatureTemplateServerArrayOutput `pulumi:"servers"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Designate authentication key as trustworthy
	TrustedKeys pulumi.IntArrayOutput `pulumi:"trustedKeys"`
	// Variable name
	TrustedKeysVariable pulumi.StringPtrOutput `pulumi:"trustedKeysVariable"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoNtpFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoNtpFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoNtpFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoNtpFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoNtpFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoNtpFeatureTemplate gets an existing CiscoNtpFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoNtpFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoNtpFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoNtpFeatureTemplate, error) {
	var resource CiscoNtpFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoNtpFeatureTemplate:CiscoNtpFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoNtpFeatureTemplate resources.
type ciscoNtpFeatureTemplateState struct {
	// Set MD5 authentication key
	AuthenticationKeys []CiscoNtpFeatureTemplateAuthenticationKey `pulumi:"authenticationKeys"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure device as NTP master
	//   - Default value: `false`
	Master *bool `pulumi:"master"`
	// Set interface for NTP Master
	MasterSourceInterface *string `pulumi:"masterSourceInterface"`
	// Variable name
	MasterSourceInterfaceVariable *string `pulumi:"masterSourceInterfaceVariable"`
	// Master Stratum <1..15>
	//   - Range: `1`-`15`
	MasterStratum *int `pulumi:"masterStratum"`
	// Variable name
	MasterStratumVariable *string `pulumi:"masterStratumVariable"`
	// Variable name
	MasterVariable *string `pulumi:"masterVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Configure NTP servers
	Servers []CiscoNtpFeatureTemplateServer `pulumi:"servers"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Designate authentication key as trustworthy
	TrustedKeys []int `pulumi:"trustedKeys"`
	// Variable name
	TrustedKeysVariable *string `pulumi:"trustedKeysVariable"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoNtpFeatureTemplateState struct {
	// Set MD5 authentication key
	AuthenticationKeys CiscoNtpFeatureTemplateAuthenticationKeyArrayInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Configure device as NTP master
	//   - Default value: `false`
	Master pulumi.BoolPtrInput
	// Set interface for NTP Master
	MasterSourceInterface pulumi.StringPtrInput
	// Variable name
	MasterSourceInterfaceVariable pulumi.StringPtrInput
	// Master Stratum <1..15>
	//   - Range: `1`-`15`
	MasterStratum pulumi.IntPtrInput
	// Variable name
	MasterStratumVariable pulumi.StringPtrInput
	// Variable name
	MasterVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Configure NTP servers
	Servers CiscoNtpFeatureTemplateServerArrayInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Designate authentication key as trustworthy
	TrustedKeys pulumi.IntArrayInput
	// Variable name
	TrustedKeysVariable pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoNtpFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoNtpFeatureTemplateState)(nil)).Elem()
}

type ciscoNtpFeatureTemplateArgs struct {
	// Set MD5 authentication key
	AuthenticationKeys []CiscoNtpFeatureTemplateAuthenticationKey `pulumi:"authenticationKeys"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure device as NTP master
	//   - Default value: `false`
	Master *bool `pulumi:"master"`
	// Set interface for NTP Master
	MasterSourceInterface *string `pulumi:"masterSourceInterface"`
	// Variable name
	MasterSourceInterfaceVariable *string `pulumi:"masterSourceInterfaceVariable"`
	// Master Stratum <1..15>
	//   - Range: `1`-`15`
	MasterStratum *int `pulumi:"masterStratum"`
	// Variable name
	MasterStratumVariable *string `pulumi:"masterStratumVariable"`
	// Variable name
	MasterVariable *string `pulumi:"masterVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Configure NTP servers
	Servers []CiscoNtpFeatureTemplateServer `pulumi:"servers"`
	// Designate authentication key as trustworthy
	TrustedKeys []int `pulumi:"trustedKeys"`
	// Variable name
	TrustedKeysVariable *string `pulumi:"trustedKeysVariable"`
}

// The set of arguments for constructing a CiscoNtpFeatureTemplate resource.
type CiscoNtpFeatureTemplateArgs struct {
	// Set MD5 authentication key
	AuthenticationKeys CiscoNtpFeatureTemplateAuthenticationKeyArrayInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types
	//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Configure device as NTP master
	//   - Default value: `false`
	Master pulumi.BoolPtrInput
	// Set interface for NTP Master
	MasterSourceInterface pulumi.StringPtrInput
	// Variable name
	MasterSourceInterfaceVariable pulumi.StringPtrInput
	// Master Stratum <1..15>
	//   - Range: `1`-`15`
	MasterStratum pulumi.IntPtrInput
	// Variable name
	MasterStratumVariable pulumi.StringPtrInput
	// Variable name
	MasterVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Configure NTP servers
	Servers CiscoNtpFeatureTemplateServerArrayInput
	// Designate authentication key as trustworthy
	TrustedKeys pulumi.IntArrayInput
	// Variable name
	TrustedKeysVariable pulumi.StringPtrInput
}

func (CiscoNtpFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoNtpFeatureTemplateArgs)(nil)).Elem()
}

type CiscoNtpFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoNtpFeatureTemplateOutput() CiscoNtpFeatureTemplateOutput
	ToCiscoNtpFeatureTemplateOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateOutput
}

func (*CiscoNtpFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoNtpFeatureTemplate)(nil)).Elem()
}

func (i *CiscoNtpFeatureTemplate) ToCiscoNtpFeatureTemplateOutput() CiscoNtpFeatureTemplateOutput {
	return i.ToCiscoNtpFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoNtpFeatureTemplate) ToCiscoNtpFeatureTemplateOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoNtpFeatureTemplateOutput)
}

// CiscoNtpFeatureTemplateArrayInput is an input type that accepts CiscoNtpFeatureTemplateArray and CiscoNtpFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoNtpFeatureTemplateArrayInput` via:
//
//	CiscoNtpFeatureTemplateArray{ CiscoNtpFeatureTemplateArgs{...} }
type CiscoNtpFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoNtpFeatureTemplateArrayOutput() CiscoNtpFeatureTemplateArrayOutput
	ToCiscoNtpFeatureTemplateArrayOutputWithContext(context.Context) CiscoNtpFeatureTemplateArrayOutput
}

type CiscoNtpFeatureTemplateArray []CiscoNtpFeatureTemplateInput

func (CiscoNtpFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoNtpFeatureTemplate)(nil)).Elem()
}

func (i CiscoNtpFeatureTemplateArray) ToCiscoNtpFeatureTemplateArrayOutput() CiscoNtpFeatureTemplateArrayOutput {
	return i.ToCiscoNtpFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoNtpFeatureTemplateArray) ToCiscoNtpFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoNtpFeatureTemplateArrayOutput)
}

// CiscoNtpFeatureTemplateMapInput is an input type that accepts CiscoNtpFeatureTemplateMap and CiscoNtpFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoNtpFeatureTemplateMapInput` via:
//
//	CiscoNtpFeatureTemplateMap{ "key": CiscoNtpFeatureTemplateArgs{...} }
type CiscoNtpFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoNtpFeatureTemplateMapOutput() CiscoNtpFeatureTemplateMapOutput
	ToCiscoNtpFeatureTemplateMapOutputWithContext(context.Context) CiscoNtpFeatureTemplateMapOutput
}

type CiscoNtpFeatureTemplateMap map[string]CiscoNtpFeatureTemplateInput

func (CiscoNtpFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoNtpFeatureTemplate)(nil)).Elem()
}

func (i CiscoNtpFeatureTemplateMap) ToCiscoNtpFeatureTemplateMapOutput() CiscoNtpFeatureTemplateMapOutput {
	return i.ToCiscoNtpFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoNtpFeatureTemplateMap) ToCiscoNtpFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoNtpFeatureTemplateMapOutput)
}

type CiscoNtpFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoNtpFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoNtpFeatureTemplate)(nil)).Elem()
}

func (o CiscoNtpFeatureTemplateOutput) ToCiscoNtpFeatureTemplateOutput() CiscoNtpFeatureTemplateOutput {
	return o
}

func (o CiscoNtpFeatureTemplateOutput) ToCiscoNtpFeatureTemplateOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateOutput {
	return o
}

// Set MD5 authentication key
func (o CiscoNtpFeatureTemplateOutput) AuthenticationKeys() CiscoNtpFeatureTemplateAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) CiscoNtpFeatureTemplateAuthenticationKeyArrayOutput {
		return v.AuthenticationKeys
	}).(CiscoNtpFeatureTemplateAuthenticationKeyArrayOutput)
}

// The description of the feature template
func (o CiscoNtpFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
//   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoNtpFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Configure device as NTP master
//   - Default value: `false`
func (o CiscoNtpFeatureTemplateOutput) Master() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.BoolPtrOutput { return v.Master }).(pulumi.BoolPtrOutput)
}

// Set interface for NTP Master
func (o CiscoNtpFeatureTemplateOutput) MasterSourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringPtrOutput { return v.MasterSourceInterface }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoNtpFeatureTemplateOutput) MasterSourceInterfaceVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringPtrOutput { return v.MasterSourceInterfaceVariable }).(pulumi.StringPtrOutput)
}

// Master Stratum <1..15>
//   - Range: `1`-`15`
func (o CiscoNtpFeatureTemplateOutput) MasterStratum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.IntPtrOutput { return v.MasterStratum }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoNtpFeatureTemplateOutput) MasterStratumVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringPtrOutput { return v.MasterStratumVariable }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoNtpFeatureTemplateOutput) MasterVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringPtrOutput { return v.MasterVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoNtpFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure NTP servers
func (o CiscoNtpFeatureTemplateOutput) Servers() CiscoNtpFeatureTemplateServerArrayOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) CiscoNtpFeatureTemplateServerArrayOutput { return v.Servers }).(CiscoNtpFeatureTemplateServerArrayOutput)
}

// The template type
func (o CiscoNtpFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Designate authentication key as trustworthy
func (o CiscoNtpFeatureTemplateOutput) TrustedKeys() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.IntArrayOutput { return v.TrustedKeys }).(pulumi.IntArrayOutput)
}

// Variable name
func (o CiscoNtpFeatureTemplateOutput) TrustedKeysVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.StringPtrOutput { return v.TrustedKeysVariable }).(pulumi.StringPtrOutput)
}

// The version of the feature template
func (o CiscoNtpFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoNtpFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoNtpFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoNtpFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoNtpFeatureTemplate)(nil)).Elem()
}

func (o CiscoNtpFeatureTemplateArrayOutput) ToCiscoNtpFeatureTemplateArrayOutput() CiscoNtpFeatureTemplateArrayOutput {
	return o
}

func (o CiscoNtpFeatureTemplateArrayOutput) ToCiscoNtpFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateArrayOutput {
	return o
}

func (o CiscoNtpFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoNtpFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoNtpFeatureTemplate {
		return vs[0].([]*CiscoNtpFeatureTemplate)[vs[1].(int)]
	}).(CiscoNtpFeatureTemplateOutput)
}

type CiscoNtpFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoNtpFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoNtpFeatureTemplate)(nil)).Elem()
}

func (o CiscoNtpFeatureTemplateMapOutput) ToCiscoNtpFeatureTemplateMapOutput() CiscoNtpFeatureTemplateMapOutput {
	return o
}

func (o CiscoNtpFeatureTemplateMapOutput) ToCiscoNtpFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoNtpFeatureTemplateMapOutput {
	return o
}

func (o CiscoNtpFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoNtpFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoNtpFeatureTemplate {
		return vs[0].(map[string]*CiscoNtpFeatureTemplate)[vs[1].(string)]
	}).(CiscoNtpFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoNtpFeatureTemplateInput)(nil)).Elem(), &CiscoNtpFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoNtpFeatureTemplateArrayInput)(nil)).Elem(), CiscoNtpFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoNtpFeatureTemplateMapInput)(nil)).Elem(), CiscoNtpFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoNtpFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoNtpFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoNtpFeatureTemplateMapOutput{})
}
