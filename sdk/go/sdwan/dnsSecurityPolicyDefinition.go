// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a DNS Security Policy Definition .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewDnsSecurityPolicyDefinition(ctx, "example", &sdwan.DnsSecurityPolicyDefinitionArgs{
//				Name:                                 pulumi.String("Example"),
//				Description:                          pulumi.String("Example"),
//				DomainListId:                         pulumi.String("84f10c9d-def7-45a3-8c64-6df26163c861"),
//				LocalDomainBypassEnabled:             pulumi.Bool(false),
//				MatchAllVpn:                          pulumi.Bool(true),
//				Dnscrypt:                             pulumi.Bool(true),
//				UmbrellaDnsDefault:                   pulumi.Bool(true),
//				CiscoSigCredentialsFeatureTemplateId: pulumi.String("3ac6eef9-bd8f-458d-96a7-a932c90b1e75"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type DnsSecurityPolicyDefinition struct {
	pulumi.CustomResourceState

	// Credentials feature template ID
	CiscoSigCredentialsFeatureTemplateId pulumi.StringOutput `pulumi:"ciscoSigCredentialsFeatureTemplateId"`
	// Credentials feature template version
	CiscoSigCredentialsFeatureTemplateVersion pulumi.IntPtrOutput `pulumi:"ciscoSigCredentialsFeatureTemplateVersion"`
	// Only relevant when `umbrellaDnsDefault` is `false`
	CustomDnsServerIp pulumi.StringPtrOutput `pulumi:"customDnsServerIp"`
	// The description of the policy definition.
	Description pulumi.StringOutput `pulumi:"description"`
	// Should DNSCrypt be enabled
	Dnscrypt pulumi.BoolPtrOutput `pulumi:"dnscrypt"`
	// Local domain bypass list ID
	DomainListId pulumi.StringPtrOutput `pulumi:"domainListId"`
	// Local domain bypass list version
	DomainListVersion pulumi.IntPtrOutput `pulumi:"domainListVersion"`
	// Should the local domain bypass list be enabled
	LocalDomainBypassEnabled pulumi.BoolPtrOutput `pulumi:"localDomainBypassEnabled"`
	// Should use match all VPN
	MatchAllVpn pulumi.BoolOutput `pulumi:"matchAllVpn"`
	// The name of the policy definition.
	Name pulumi.StringOutput `pulumi:"name"`
	// Only relevant when `matchAllVpn` is `false`
	TargetVpns DnsSecurityPolicyDefinitionTargetVpnArrayOutput `pulumi:"targetVpns"`
	// Should use umbrella as DNS Server
	UmbrellaDnsDefault pulumi.BoolOutput `pulumi:"umbrellaDnsDefault"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewDnsSecurityPolicyDefinition registers a new resource with the given unique name, arguments, and options.
func NewDnsSecurityPolicyDefinition(ctx *pulumi.Context,
	name string, args *DnsSecurityPolicyDefinitionArgs, opts ...pulumi.ResourceOption) (*DnsSecurityPolicyDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CiscoSigCredentialsFeatureTemplateId == nil {
		return nil, errors.New("invalid value for required argument 'CiscoSigCredentialsFeatureTemplateId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.MatchAllVpn == nil {
		return nil, errors.New("invalid value for required argument 'MatchAllVpn'")
	}
	if args.UmbrellaDnsDefault == nil {
		return nil, errors.New("invalid value for required argument 'UmbrellaDnsDefault'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsSecurityPolicyDefinition
	err := ctx.RegisterResource("sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsSecurityPolicyDefinition gets an existing DnsSecurityPolicyDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsSecurityPolicyDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsSecurityPolicyDefinitionState, opts ...pulumi.ResourceOption) (*DnsSecurityPolicyDefinition, error) {
	var resource DnsSecurityPolicyDefinition
	err := ctx.ReadResource("sdwan:index/dnsSecurityPolicyDefinition:DnsSecurityPolicyDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsSecurityPolicyDefinition resources.
type dnsSecurityPolicyDefinitionState struct {
	// Credentials feature template ID
	CiscoSigCredentialsFeatureTemplateId *string `pulumi:"ciscoSigCredentialsFeatureTemplateId"`
	// Credentials feature template version
	CiscoSigCredentialsFeatureTemplateVersion *int `pulumi:"ciscoSigCredentialsFeatureTemplateVersion"`
	// Only relevant when `umbrellaDnsDefault` is `false`
	CustomDnsServerIp *string `pulumi:"customDnsServerIp"`
	// The description of the policy definition.
	Description *string `pulumi:"description"`
	// Should DNSCrypt be enabled
	Dnscrypt *bool `pulumi:"dnscrypt"`
	// Local domain bypass list ID
	DomainListId *string `pulumi:"domainListId"`
	// Local domain bypass list version
	DomainListVersion *int `pulumi:"domainListVersion"`
	// Should the local domain bypass list be enabled
	LocalDomainBypassEnabled *bool `pulumi:"localDomainBypassEnabled"`
	// Should use match all VPN
	MatchAllVpn *bool `pulumi:"matchAllVpn"`
	// The name of the policy definition.
	Name *string `pulumi:"name"`
	// Only relevant when `matchAllVpn` is `false`
	TargetVpns []DnsSecurityPolicyDefinitionTargetVpn `pulumi:"targetVpns"`
	// Should use umbrella as DNS Server
	UmbrellaDnsDefault *bool `pulumi:"umbrellaDnsDefault"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type DnsSecurityPolicyDefinitionState struct {
	// Credentials feature template ID
	CiscoSigCredentialsFeatureTemplateId pulumi.StringPtrInput
	// Credentials feature template version
	CiscoSigCredentialsFeatureTemplateVersion pulumi.IntPtrInput
	// Only relevant when `umbrellaDnsDefault` is `false`
	CustomDnsServerIp pulumi.StringPtrInput
	// The description of the policy definition.
	Description pulumi.StringPtrInput
	// Should DNSCrypt be enabled
	Dnscrypt pulumi.BoolPtrInput
	// Local domain bypass list ID
	DomainListId pulumi.StringPtrInput
	// Local domain bypass list version
	DomainListVersion pulumi.IntPtrInput
	// Should the local domain bypass list be enabled
	LocalDomainBypassEnabled pulumi.BoolPtrInput
	// Should use match all VPN
	MatchAllVpn pulumi.BoolPtrInput
	// The name of the policy definition.
	Name pulumi.StringPtrInput
	// Only relevant when `matchAllVpn` is `false`
	TargetVpns DnsSecurityPolicyDefinitionTargetVpnArrayInput
	// Should use umbrella as DNS Server
	UmbrellaDnsDefault pulumi.BoolPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (DnsSecurityPolicyDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSecurityPolicyDefinitionState)(nil)).Elem()
}

type dnsSecurityPolicyDefinitionArgs struct {
	// Credentials feature template ID
	CiscoSigCredentialsFeatureTemplateId string `pulumi:"ciscoSigCredentialsFeatureTemplateId"`
	// Credentials feature template version
	CiscoSigCredentialsFeatureTemplateVersion *int `pulumi:"ciscoSigCredentialsFeatureTemplateVersion"`
	// Only relevant when `umbrellaDnsDefault` is `false`
	CustomDnsServerIp *string `pulumi:"customDnsServerIp"`
	// The description of the policy definition.
	Description string `pulumi:"description"`
	// Should DNSCrypt be enabled
	Dnscrypt *bool `pulumi:"dnscrypt"`
	// Local domain bypass list ID
	DomainListId *string `pulumi:"domainListId"`
	// Local domain bypass list version
	DomainListVersion *int `pulumi:"domainListVersion"`
	// Should the local domain bypass list be enabled
	LocalDomainBypassEnabled *bool `pulumi:"localDomainBypassEnabled"`
	// Should use match all VPN
	MatchAllVpn bool `pulumi:"matchAllVpn"`
	// The name of the policy definition.
	Name *string `pulumi:"name"`
	// Only relevant when `matchAllVpn` is `false`
	TargetVpns []DnsSecurityPolicyDefinitionTargetVpn `pulumi:"targetVpns"`
	// Should use umbrella as DNS Server
	UmbrellaDnsDefault bool `pulumi:"umbrellaDnsDefault"`
}

// The set of arguments for constructing a DnsSecurityPolicyDefinition resource.
type DnsSecurityPolicyDefinitionArgs struct {
	// Credentials feature template ID
	CiscoSigCredentialsFeatureTemplateId pulumi.StringInput
	// Credentials feature template version
	CiscoSigCredentialsFeatureTemplateVersion pulumi.IntPtrInput
	// Only relevant when `umbrellaDnsDefault` is `false`
	CustomDnsServerIp pulumi.StringPtrInput
	// The description of the policy definition.
	Description pulumi.StringInput
	// Should DNSCrypt be enabled
	Dnscrypt pulumi.BoolPtrInput
	// Local domain bypass list ID
	DomainListId pulumi.StringPtrInput
	// Local domain bypass list version
	DomainListVersion pulumi.IntPtrInput
	// Should the local domain bypass list be enabled
	LocalDomainBypassEnabled pulumi.BoolPtrInput
	// Should use match all VPN
	MatchAllVpn pulumi.BoolInput
	// The name of the policy definition.
	Name pulumi.StringPtrInput
	// Only relevant when `matchAllVpn` is `false`
	TargetVpns DnsSecurityPolicyDefinitionTargetVpnArrayInput
	// Should use umbrella as DNS Server
	UmbrellaDnsDefault pulumi.BoolInput
}

func (DnsSecurityPolicyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSecurityPolicyDefinitionArgs)(nil)).Elem()
}

type DnsSecurityPolicyDefinitionInput interface {
	pulumi.Input

	ToDnsSecurityPolicyDefinitionOutput() DnsSecurityPolicyDefinitionOutput
	ToDnsSecurityPolicyDefinitionOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionOutput
}

func (*DnsSecurityPolicyDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSecurityPolicyDefinition)(nil)).Elem()
}

func (i *DnsSecurityPolicyDefinition) ToDnsSecurityPolicyDefinitionOutput() DnsSecurityPolicyDefinitionOutput {
	return i.ToDnsSecurityPolicyDefinitionOutputWithContext(context.Background())
}

func (i *DnsSecurityPolicyDefinition) ToDnsSecurityPolicyDefinitionOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityPolicyDefinitionOutput)
}

// DnsSecurityPolicyDefinitionArrayInput is an input type that accepts DnsSecurityPolicyDefinitionArray and DnsSecurityPolicyDefinitionArrayOutput values.
// You can construct a concrete instance of `DnsSecurityPolicyDefinitionArrayInput` via:
//
//	DnsSecurityPolicyDefinitionArray{ DnsSecurityPolicyDefinitionArgs{...} }
type DnsSecurityPolicyDefinitionArrayInput interface {
	pulumi.Input

	ToDnsSecurityPolicyDefinitionArrayOutput() DnsSecurityPolicyDefinitionArrayOutput
	ToDnsSecurityPolicyDefinitionArrayOutputWithContext(context.Context) DnsSecurityPolicyDefinitionArrayOutput
}

type DnsSecurityPolicyDefinitionArray []DnsSecurityPolicyDefinitionInput

func (DnsSecurityPolicyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSecurityPolicyDefinition)(nil)).Elem()
}

func (i DnsSecurityPolicyDefinitionArray) ToDnsSecurityPolicyDefinitionArrayOutput() DnsSecurityPolicyDefinitionArrayOutput {
	return i.ToDnsSecurityPolicyDefinitionArrayOutputWithContext(context.Background())
}

func (i DnsSecurityPolicyDefinitionArray) ToDnsSecurityPolicyDefinitionArrayOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityPolicyDefinitionArrayOutput)
}

// DnsSecurityPolicyDefinitionMapInput is an input type that accepts DnsSecurityPolicyDefinitionMap and DnsSecurityPolicyDefinitionMapOutput values.
// You can construct a concrete instance of `DnsSecurityPolicyDefinitionMapInput` via:
//
//	DnsSecurityPolicyDefinitionMap{ "key": DnsSecurityPolicyDefinitionArgs{...} }
type DnsSecurityPolicyDefinitionMapInput interface {
	pulumi.Input

	ToDnsSecurityPolicyDefinitionMapOutput() DnsSecurityPolicyDefinitionMapOutput
	ToDnsSecurityPolicyDefinitionMapOutputWithContext(context.Context) DnsSecurityPolicyDefinitionMapOutput
}

type DnsSecurityPolicyDefinitionMap map[string]DnsSecurityPolicyDefinitionInput

func (DnsSecurityPolicyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSecurityPolicyDefinition)(nil)).Elem()
}

func (i DnsSecurityPolicyDefinitionMap) ToDnsSecurityPolicyDefinitionMapOutput() DnsSecurityPolicyDefinitionMapOutput {
	return i.ToDnsSecurityPolicyDefinitionMapOutputWithContext(context.Background())
}

func (i DnsSecurityPolicyDefinitionMap) ToDnsSecurityPolicyDefinitionMapOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityPolicyDefinitionMapOutput)
}

type DnsSecurityPolicyDefinitionOutput struct{ *pulumi.OutputState }

func (DnsSecurityPolicyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSecurityPolicyDefinition)(nil)).Elem()
}

func (o DnsSecurityPolicyDefinitionOutput) ToDnsSecurityPolicyDefinitionOutput() DnsSecurityPolicyDefinitionOutput {
	return o
}

func (o DnsSecurityPolicyDefinitionOutput) ToDnsSecurityPolicyDefinitionOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionOutput {
	return o
}

// Credentials feature template ID
func (o DnsSecurityPolicyDefinitionOutput) CiscoSigCredentialsFeatureTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.StringOutput {
		return v.CiscoSigCredentialsFeatureTemplateId
	}).(pulumi.StringOutput)
}

// Credentials feature template version
func (o DnsSecurityPolicyDefinitionOutput) CiscoSigCredentialsFeatureTemplateVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.IntPtrOutput {
		return v.CiscoSigCredentialsFeatureTemplateVersion
	}).(pulumi.IntPtrOutput)
}

// Only relevant when `umbrellaDnsDefault` is `false`
func (o DnsSecurityPolicyDefinitionOutput) CustomDnsServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.StringPtrOutput { return v.CustomDnsServerIp }).(pulumi.StringPtrOutput)
}

// The description of the policy definition.
func (o DnsSecurityPolicyDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Should DNSCrypt be enabled
func (o DnsSecurityPolicyDefinitionOutput) Dnscrypt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.BoolPtrOutput { return v.Dnscrypt }).(pulumi.BoolPtrOutput)
}

// Local domain bypass list ID
func (o DnsSecurityPolicyDefinitionOutput) DomainListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.StringPtrOutput { return v.DomainListId }).(pulumi.StringPtrOutput)
}

// Local domain bypass list version
func (o DnsSecurityPolicyDefinitionOutput) DomainListVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.IntPtrOutput { return v.DomainListVersion }).(pulumi.IntPtrOutput)
}

// Should the local domain bypass list be enabled
func (o DnsSecurityPolicyDefinitionOutput) LocalDomainBypassEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.BoolPtrOutput { return v.LocalDomainBypassEnabled }).(pulumi.BoolPtrOutput)
}

// Should use match all VPN
func (o DnsSecurityPolicyDefinitionOutput) MatchAllVpn() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.BoolOutput { return v.MatchAllVpn }).(pulumi.BoolOutput)
}

// The name of the policy definition.
func (o DnsSecurityPolicyDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Only relevant when `matchAllVpn` is `false`
func (o DnsSecurityPolicyDefinitionOutput) TargetVpns() DnsSecurityPolicyDefinitionTargetVpnArrayOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) DnsSecurityPolicyDefinitionTargetVpnArrayOutput {
		return v.TargetVpns
	}).(DnsSecurityPolicyDefinitionTargetVpnArrayOutput)
}

// Should use umbrella as DNS Server
func (o DnsSecurityPolicyDefinitionOutput) UmbrellaDnsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.BoolOutput { return v.UmbrellaDnsDefault }).(pulumi.BoolOutput)
}

// The version of the object
func (o DnsSecurityPolicyDefinitionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsSecurityPolicyDefinition) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type DnsSecurityPolicyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (DnsSecurityPolicyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSecurityPolicyDefinition)(nil)).Elem()
}

func (o DnsSecurityPolicyDefinitionArrayOutput) ToDnsSecurityPolicyDefinitionArrayOutput() DnsSecurityPolicyDefinitionArrayOutput {
	return o
}

func (o DnsSecurityPolicyDefinitionArrayOutput) ToDnsSecurityPolicyDefinitionArrayOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionArrayOutput {
	return o
}

func (o DnsSecurityPolicyDefinitionArrayOutput) Index(i pulumi.IntInput) DnsSecurityPolicyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsSecurityPolicyDefinition {
		return vs[0].([]*DnsSecurityPolicyDefinition)[vs[1].(int)]
	}).(DnsSecurityPolicyDefinitionOutput)
}

type DnsSecurityPolicyDefinitionMapOutput struct{ *pulumi.OutputState }

func (DnsSecurityPolicyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSecurityPolicyDefinition)(nil)).Elem()
}

func (o DnsSecurityPolicyDefinitionMapOutput) ToDnsSecurityPolicyDefinitionMapOutput() DnsSecurityPolicyDefinitionMapOutput {
	return o
}

func (o DnsSecurityPolicyDefinitionMapOutput) ToDnsSecurityPolicyDefinitionMapOutputWithContext(ctx context.Context) DnsSecurityPolicyDefinitionMapOutput {
	return o
}

func (o DnsSecurityPolicyDefinitionMapOutput) MapIndex(k pulumi.StringInput) DnsSecurityPolicyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsSecurityPolicyDefinition {
		return vs[0].(map[string]*DnsSecurityPolicyDefinition)[vs[1].(string)]
	}).(DnsSecurityPolicyDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityPolicyDefinitionInput)(nil)).Elem(), &DnsSecurityPolicyDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityPolicyDefinitionArrayInput)(nil)).Elem(), DnsSecurityPolicyDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityPolicyDefinitionMapInput)(nil)).Elem(), DnsSecurityPolicyDefinitionMap{})
	pulumi.RegisterOutputType(DnsSecurityPolicyDefinitionOutput{})
	pulumi.RegisterOutputType(DnsSecurityPolicyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(DnsSecurityPolicyDefinitionMapOutput{})
}
