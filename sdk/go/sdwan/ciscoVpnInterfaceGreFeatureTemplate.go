// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco VPN Interface GRE feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoVpnInterfaceGreFeatureTemplate struct {
	pulumi.CustomResourceState

	// Apply ACL
	AccessLists CiscoVpnInterfaceGreFeatureTemplateAccessListArrayOutput `pulumi:"accessLists"`
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application pulumi.StringPtrOutput `pulumi:"application"`
	// Variable name
	ApplicationVariable pulumi.StringPtrOutput `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment pulumi.BoolPtrOutput `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable pulumi.StringPtrOutput `pulumi:"clearDontFragmentVariable"`
	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Interface description
	InterfaceDescription pulumi.StringPtrOutput `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable pulumi.StringPtrOutput `pulumi:"interfaceDescriptionVariable"`
	// Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when
	// present
	InterfaceName pulumi.StringPtrOutput `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable pulumi.StringPtrOutput `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable pulumi.StringPtrOutput `pulumi:"ipAddressVariable"`
	// Interface MTU <576..2000>, in bytes - Range: `64`-`18000` - Default value: `1500`
	IpMtu pulumi.IntPtrOutput `pulumi:"ipMtu"`
	// Variable name
	IpMtuVariable pulumi.StringPtrOutput `pulumi:"ipMtuVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Name of rewrite rule
	RewriteRule pulumi.StringPtrOutput `pulumi:"rewriteRule"`
	// Variable name
	RewriteRuleVariable pulumi.StringPtrOutput `pulumi:"rewriteRuleVariable"`
	// Administrative state - Default value: `true`
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable pulumi.StringPtrOutput `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust pulumi.IntPtrOutput `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable pulumi.StringPtrOutput `pulumi:"tcpMssAdjustVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Variable name
	TrackerVariable pulumi.StringPtrOutput `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers pulumi.StringArrayOutput `pulumi:"trackers"`
	// Tunnel destination IP Address
	TunnelDestination pulumi.StringPtrOutput `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable pulumi.StringPtrOutput `pulumi:"tunnelDestinationVariable"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia pulumi.StringPtrOutput `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable pulumi.StringPtrOutput `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource pulumi.StringPtrOutput `pulumi:"tunnelSource"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface pulumi.StringPtrOutput `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable pulumi.StringPtrOutput `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable pulumi.StringPtrOutput `pulumi:"tunnelSourceVariable"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoVpnInterfaceGreFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoVpnInterfaceGreFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoVpnInterfaceGreFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoVpnInterfaceGreFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoVpnInterfaceGreFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoVpnInterfaceGreFeatureTemplate gets an existing CiscoVpnInterfaceGreFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoVpnInterfaceGreFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoVpnInterfaceGreFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoVpnInterfaceGreFeatureTemplate, error) {
	var resource CiscoVpnInterfaceGreFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoVpnInterfaceGreFeatureTemplate:CiscoVpnInterfaceGreFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoVpnInterfaceGreFeatureTemplate resources.
type ciscoVpnInterfaceGreFeatureTemplateState struct {
	// Apply ACL
	AccessLists []CiscoVpnInterfaceGreFeatureTemplateAccessList `pulumi:"accessLists"`
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application *string `pulumi:"application"`
	// Variable name
	ApplicationVariable *string `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment *bool `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable *string `pulumi:"clearDontFragmentVariable"`
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Interface description
	InterfaceDescription *string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable *string `pulumi:"interfaceDescriptionVariable"`
	// Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when
	// present
	InterfaceName *string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable *string `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress *string `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable *string `pulumi:"ipAddressVariable"`
	// Interface MTU <576..2000>, in bytes - Range: `64`-`18000` - Default value: `1500`
	IpMtu *int `pulumi:"ipMtu"`
	// Variable name
	IpMtuVariable *string `pulumi:"ipMtuVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Name of rewrite rule
	RewriteRule *string `pulumi:"rewriteRule"`
	// Variable name
	RewriteRuleVariable *string `pulumi:"rewriteRuleVariable"`
	// Administrative state - Default value: `true`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust *int `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable *string `pulumi:"tcpMssAdjustVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Variable name
	TrackerVariable *string `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers []string `pulumi:"trackers"`
	// Tunnel destination IP Address
	TunnelDestination *string `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable *string `pulumi:"tunnelDestinationVariable"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia *string `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable *string `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource *string `pulumi:"tunnelSource"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface *string `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable *string `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable *string `pulumi:"tunnelSourceVariable"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoVpnInterfaceGreFeatureTemplateState struct {
	// Apply ACL
	AccessLists CiscoVpnInterfaceGreFeatureTemplateAccessListArrayInput
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application pulumi.StringPtrInput
	// Variable name
	ApplicationVariable pulumi.StringPtrInput
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment pulumi.BoolPtrInput
	// Variable name
	ClearDontFragmentVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Interface description
	InterfaceDescription pulumi.StringPtrInput
	// Variable name
	InterfaceDescriptionVariable pulumi.StringPtrInput
	// Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when
	// present
	InterfaceName pulumi.StringPtrInput
	// Variable name
	InterfaceNameVariable pulumi.StringPtrInput
	// Assign IPv4 address
	IpAddress pulumi.StringPtrInput
	// Variable name
	IpAddressVariable pulumi.StringPtrInput
	// Interface MTU <576..2000>, in bytes - Range: `64`-`18000` - Default value: `1500`
	IpMtu pulumi.IntPtrInput
	// Variable name
	IpMtuVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Name of rewrite rule
	RewriteRule pulumi.StringPtrInput
	// Variable name
	RewriteRuleVariable pulumi.StringPtrInput
	// Administrative state - Default value: `true`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust pulumi.IntPtrInput
	// Variable name
	TcpMssAdjustVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Variable name
	TrackerVariable pulumi.StringPtrInput
	// Enable tracker for this interface
	Trackers pulumi.StringArrayInput
	// Tunnel destination IP Address
	TunnelDestination pulumi.StringPtrInput
	// Variable name
	TunnelDestinationVariable pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia pulumi.StringPtrInput
	// Variable name
	TunnelRouteViaVariable pulumi.StringPtrInput
	// Tunnel source IP Address
	TunnelSource pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface pulumi.StringPtrInput
	// Variable name
	TunnelSourceInterfaceVariable pulumi.StringPtrInput
	// Variable name
	TunnelSourceVariable pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoVpnInterfaceGreFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoVpnInterfaceGreFeatureTemplateState)(nil)).Elem()
}

type ciscoVpnInterfaceGreFeatureTemplateArgs struct {
	// Apply ACL
	AccessLists []CiscoVpnInterfaceGreFeatureTemplateAccessList `pulumi:"accessLists"`
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application *string `pulumi:"application"`
	// Variable name
	ApplicationVariable *string `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment *bool `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable *string `pulumi:"clearDontFragmentVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Interface description
	InterfaceDescription *string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable *string `pulumi:"interfaceDescriptionVariable"`
	// Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when
	// present
	InterfaceName *string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable *string `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress *string `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable *string `pulumi:"ipAddressVariable"`
	// Interface MTU <576..2000>, in bytes - Range: `64`-`18000` - Default value: `1500`
	IpMtu *int `pulumi:"ipMtu"`
	// Variable name
	IpMtuVariable *string `pulumi:"ipMtuVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Name of rewrite rule
	RewriteRule *string `pulumi:"rewriteRule"`
	// Variable name
	RewriteRuleVariable *string `pulumi:"rewriteRuleVariable"`
	// Administrative state - Default value: `true`
	Shutdown *bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable *string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust *int `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable *string `pulumi:"tcpMssAdjustVariable"`
	// Variable name
	TrackerVariable *string `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers []string `pulumi:"trackers"`
	// Tunnel destination IP Address
	TunnelDestination *string `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable *string `pulumi:"tunnelDestinationVariable"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia *string `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable *string `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource *string `pulumi:"tunnelSource"`
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface *string `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable *string `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable *string `pulumi:"tunnelSourceVariable"`
}

// The set of arguments for constructing a CiscoVpnInterfaceGreFeatureTemplate resource.
type CiscoVpnInterfaceGreFeatureTemplateArgs struct {
	// Apply ACL
	AccessLists CiscoVpnInterfaceGreFeatureTemplateAccessListArrayInput
	// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
	Application pulumi.StringPtrInput
	// Variable name
	ApplicationVariable pulumi.StringPtrInput
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
	ClearDontFragment pulumi.BoolPtrInput
	// Variable name
	ClearDontFragmentVariable pulumi.StringPtrInput
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Interface description
	InterfaceDescription pulumi.StringPtrInput
	// Variable name
	InterfaceDescriptionVariable pulumi.StringPtrInput
	// Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when
	// present
	InterfaceName pulumi.StringPtrInput
	// Variable name
	InterfaceNameVariable pulumi.StringPtrInput
	// Assign IPv4 address
	IpAddress pulumi.StringPtrInput
	// Variable name
	IpAddressVariable pulumi.StringPtrInput
	// Interface MTU <576..2000>, in bytes - Range: `64`-`18000` - Default value: `1500`
	IpMtu pulumi.IntPtrInput
	// Variable name
	IpMtuVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Name of rewrite rule
	RewriteRule pulumi.StringPtrInput
	// Variable name
	RewriteRuleVariable pulumi.StringPtrInput
	// Administrative state - Default value: `true`
	Shutdown pulumi.BoolPtrInput
	// Variable name
	ShutdownVariable pulumi.StringPtrInput
	// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
	TcpMssAdjust pulumi.IntPtrInput
	// Variable name
	TcpMssAdjustVariable pulumi.StringPtrInput
	// Variable name
	TrackerVariable pulumi.StringPtrInput
	// Enable tracker for this interface
	Trackers pulumi.StringArrayInput
	// Tunnel destination IP Address
	TunnelDestination pulumi.StringPtrInput
	// Variable name
	TunnelDestinationVariable pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelRouteVia pulumi.StringPtrInput
	// Variable name
	TunnelRouteViaVariable pulumi.StringPtrInput
	// Tunnel source IP Address
	TunnelSource pulumi.StringPtrInput
	// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
	TunnelSourceInterface pulumi.StringPtrInput
	// Variable name
	TunnelSourceInterfaceVariable pulumi.StringPtrInput
	// Variable name
	TunnelSourceVariable pulumi.StringPtrInput
}

func (CiscoVpnInterfaceGreFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoVpnInterfaceGreFeatureTemplateArgs)(nil)).Elem()
}

type CiscoVpnInterfaceGreFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoVpnInterfaceGreFeatureTemplateOutput() CiscoVpnInterfaceGreFeatureTemplateOutput
	ToCiscoVpnInterfaceGreFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateOutput
}

func (*CiscoVpnInterfaceGreFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoVpnInterfaceGreFeatureTemplate)(nil)).Elem()
}

func (i *CiscoVpnInterfaceGreFeatureTemplate) ToCiscoVpnInterfaceGreFeatureTemplateOutput() CiscoVpnInterfaceGreFeatureTemplateOutput {
	return i.ToCiscoVpnInterfaceGreFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoVpnInterfaceGreFeatureTemplate) ToCiscoVpnInterfaceGreFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnInterfaceGreFeatureTemplateOutput)
}

// CiscoVpnInterfaceGreFeatureTemplateArrayInput is an input type that accepts CiscoVpnInterfaceGreFeatureTemplateArray and CiscoVpnInterfaceGreFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoVpnInterfaceGreFeatureTemplateArrayInput` via:
//
//	CiscoVpnInterfaceGreFeatureTemplateArray{ CiscoVpnInterfaceGreFeatureTemplateArgs{...} }
type CiscoVpnInterfaceGreFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoVpnInterfaceGreFeatureTemplateArrayOutput() CiscoVpnInterfaceGreFeatureTemplateArrayOutput
	ToCiscoVpnInterfaceGreFeatureTemplateArrayOutputWithContext(context.Context) CiscoVpnInterfaceGreFeatureTemplateArrayOutput
}

type CiscoVpnInterfaceGreFeatureTemplateArray []CiscoVpnInterfaceGreFeatureTemplateInput

func (CiscoVpnInterfaceGreFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoVpnInterfaceGreFeatureTemplate)(nil)).Elem()
}

func (i CiscoVpnInterfaceGreFeatureTemplateArray) ToCiscoVpnInterfaceGreFeatureTemplateArrayOutput() CiscoVpnInterfaceGreFeatureTemplateArrayOutput {
	return i.ToCiscoVpnInterfaceGreFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoVpnInterfaceGreFeatureTemplateArray) ToCiscoVpnInterfaceGreFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnInterfaceGreFeatureTemplateArrayOutput)
}

// CiscoVpnInterfaceGreFeatureTemplateMapInput is an input type that accepts CiscoVpnInterfaceGreFeatureTemplateMap and CiscoVpnInterfaceGreFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoVpnInterfaceGreFeatureTemplateMapInput` via:
//
//	CiscoVpnInterfaceGreFeatureTemplateMap{ "key": CiscoVpnInterfaceGreFeatureTemplateArgs{...} }
type CiscoVpnInterfaceGreFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoVpnInterfaceGreFeatureTemplateMapOutput() CiscoVpnInterfaceGreFeatureTemplateMapOutput
	ToCiscoVpnInterfaceGreFeatureTemplateMapOutputWithContext(context.Context) CiscoVpnInterfaceGreFeatureTemplateMapOutput
}

type CiscoVpnInterfaceGreFeatureTemplateMap map[string]CiscoVpnInterfaceGreFeatureTemplateInput

func (CiscoVpnInterfaceGreFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoVpnInterfaceGreFeatureTemplate)(nil)).Elem()
}

func (i CiscoVpnInterfaceGreFeatureTemplateMap) ToCiscoVpnInterfaceGreFeatureTemplateMapOutput() CiscoVpnInterfaceGreFeatureTemplateMapOutput {
	return i.ToCiscoVpnInterfaceGreFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoVpnInterfaceGreFeatureTemplateMap) ToCiscoVpnInterfaceGreFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnInterfaceGreFeatureTemplateMapOutput)
}

type CiscoVpnInterfaceGreFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoVpnInterfaceGreFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoVpnInterfaceGreFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnInterfaceGreFeatureTemplateOutput) ToCiscoVpnInterfaceGreFeatureTemplateOutput() CiscoVpnInterfaceGreFeatureTemplateOutput {
	return o
}

func (o CiscoVpnInterfaceGreFeatureTemplateOutput) ToCiscoVpnInterfaceGreFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateOutput {
	return o
}

// Apply ACL
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) AccessLists() CiscoVpnInterfaceGreFeatureTemplateAccessListArrayOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) CiscoVpnInterfaceGreFeatureTemplateAccessListArrayOutput {
		return v.AccessLists
	}).(CiscoVpnInterfaceGreFeatureTemplateAccessListArrayOutput)
}

// Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) Application() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.Application }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) ApplicationVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.ApplicationVariable }).(pulumi.StringPtrOutput)
}

// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) ClearDontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.BoolPtrOutput { return v.ClearDontFragment }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) ClearDontFragmentVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput {
		return v.ClearDontFragmentVariable
	}).(pulumi.StringPtrOutput)
}

// The description of the feature template
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Interface description
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) InterfaceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceDescription }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) InterfaceDescriptionVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput {
		return v.InterfaceDescriptionVariable
	}).(pulumi.StringPtrOutput)
}

// Interface name: ge0/<0-..> or ge0/<0-..>.vlanid or irb<bridgeid:1-63> or loopback<string> or natpool-<1..31> when
// present
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) InterfaceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceName }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) InterfaceNameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.InterfaceNameVariable }).(pulumi.StringPtrOutput)
}

// Assign IPv4 address
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) IpAddressVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.IpAddressVariable }).(pulumi.StringPtrOutput)
}

// Interface MTU <576..2000>, in bytes - Range: `64`-`18000` - Default value: `1500`
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) IpMtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.IntPtrOutput { return v.IpMtu }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) IpMtuVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.IpMtuVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Name of rewrite rule
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) RewriteRule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.RewriteRule }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) RewriteRuleVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.RewriteRuleVariable }).(pulumi.StringPtrOutput)
}

// Administrative state - Default value: `true`
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) ShutdownVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.ShutdownVariable }).(pulumi.StringPtrOutput)
}

// TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TcpMssAdjust() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.IntPtrOutput { return v.TcpMssAdjust }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TcpMssAdjustVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TcpMssAdjustVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TrackerVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TrackerVariable }).(pulumi.StringPtrOutput)
}

// Enable tracker for this interface
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) Trackers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringArrayOutput { return v.Trackers }).(pulumi.StringArrayOutput)
}

// Tunnel destination IP Address
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelDestination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelDestination }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelDestinationVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput {
		return v.TunnelDestinationVariable
	}).(pulumi.StringPtrOutput)
}

// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelRouteVia() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelRouteVia }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelRouteViaVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelRouteViaVariable }).(pulumi.StringPtrOutput)
}

// Tunnel source IP Address
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelSource }).(pulumi.StringPtrOutput)
}

// <1..32 characters> Interface name: ge0/<0-..> or ge0/<0-..>.vlanid
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelSourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelSourceInterface }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelSourceInterfaceVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput {
		return v.TunnelSourceInterfaceVariable
	}).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) TunnelSourceVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.StringPtrOutput { return v.TunnelSourceVariable }).(pulumi.StringPtrOutput)
}

// The version of the feature template
func (o CiscoVpnInterfaceGreFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoVpnInterfaceGreFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoVpnInterfaceGreFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoVpnInterfaceGreFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoVpnInterfaceGreFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnInterfaceGreFeatureTemplateArrayOutput) ToCiscoVpnInterfaceGreFeatureTemplateArrayOutput() CiscoVpnInterfaceGreFeatureTemplateArrayOutput {
	return o
}

func (o CiscoVpnInterfaceGreFeatureTemplateArrayOutput) ToCiscoVpnInterfaceGreFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateArrayOutput {
	return o
}

func (o CiscoVpnInterfaceGreFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoVpnInterfaceGreFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoVpnInterfaceGreFeatureTemplate {
		return vs[0].([]*CiscoVpnInterfaceGreFeatureTemplate)[vs[1].(int)]
	}).(CiscoVpnInterfaceGreFeatureTemplateOutput)
}

type CiscoVpnInterfaceGreFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoVpnInterfaceGreFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoVpnInterfaceGreFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnInterfaceGreFeatureTemplateMapOutput) ToCiscoVpnInterfaceGreFeatureTemplateMapOutput() CiscoVpnInterfaceGreFeatureTemplateMapOutput {
	return o
}

func (o CiscoVpnInterfaceGreFeatureTemplateMapOutput) ToCiscoVpnInterfaceGreFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoVpnInterfaceGreFeatureTemplateMapOutput {
	return o
}

func (o CiscoVpnInterfaceGreFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoVpnInterfaceGreFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoVpnInterfaceGreFeatureTemplate {
		return vs[0].(map[string]*CiscoVpnInterfaceGreFeatureTemplate)[vs[1].(string)]
	}).(CiscoVpnInterfaceGreFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnInterfaceGreFeatureTemplateInput)(nil)).Elem(), &CiscoVpnInterfaceGreFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnInterfaceGreFeatureTemplateArrayInput)(nil)).Elem(), CiscoVpnInterfaceGreFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnInterfaceGreFeatureTemplateMapInput)(nil)).Elem(), CiscoVpnInterfaceGreFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoVpnInterfaceGreFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoVpnInterfaceGreFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoVpnInterfaceGreFeatureTemplateMapOutput{})
}
