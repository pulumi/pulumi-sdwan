// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a System Logging Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// Expected import identifier with the format: "system_logging_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/systemLoggingFeature:SystemLoggingFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type SystemLoggingFeature struct {
	pulumi.CustomResourceState

	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Enable logging to local disk - Default value: `true`
	DiskEnable pulumi.BoolPtrOutput `pulumi:"diskEnable"`
	// Variable name
	DiskEnableVariable pulumi.StringPtrOutput `pulumi:"diskEnableVariable"`
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate pulumi.IntPtrOutput `pulumi:"diskFileRotate"`
	// Variable name
	DiskFileRotateVariable pulumi.StringPtrOutput `pulumi:"diskFileRotateVariable"`
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize pulumi.IntPtrOutput `pulumi:"diskFileSize"`
	// Variable name
	DiskFileSizeVariable pulumi.StringPtrOutput `pulumi:"diskFileSizeVariable"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrOutput `pulumi:"featureProfileId"`
	// Enable logging to remote server
	Ipv4Servers SystemLoggingFeatureIpv4ServerArrayOutput `pulumi:"ipv4Servers"`
	// Enable logging to remote ipv6 server
	Ipv6Servers SystemLoggingFeatureIpv6ServerArrayOutput `pulumi:"ipv6Servers"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure a TLS profile
	TlsProfiles SystemLoggingFeatureTlsProfileArrayOutput `pulumi:"tlsProfiles"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSystemLoggingFeature registers a new resource with the given unique name, arguments, and options.
func NewSystemLoggingFeature(ctx *pulumi.Context,
	name string, args *SystemLoggingFeatureArgs, opts ...pulumi.ResourceOption) (*SystemLoggingFeature, error) {
	if args == nil {
		args = &SystemLoggingFeatureArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemLoggingFeature
	err := ctx.RegisterResource("sdwan:index/systemLoggingFeature:SystemLoggingFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemLoggingFeature gets an existing SystemLoggingFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemLoggingFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemLoggingFeatureState, opts ...pulumi.ResourceOption) (*SystemLoggingFeature, error) {
	var resource SystemLoggingFeature
	err := ctx.ReadResource("sdwan:index/systemLoggingFeature:SystemLoggingFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemLoggingFeature resources.
type systemLoggingFeatureState struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Enable logging to local disk - Default value: `true`
	DiskEnable *bool `pulumi:"diskEnable"`
	// Variable name
	DiskEnableVariable *string `pulumi:"diskEnableVariable"`
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate *int `pulumi:"diskFileRotate"`
	// Variable name
	DiskFileRotateVariable *string `pulumi:"diskFileRotateVariable"`
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize *int `pulumi:"diskFileSize"`
	// Variable name
	DiskFileSizeVariable *string `pulumi:"diskFileSizeVariable"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Enable logging to remote server
	Ipv4Servers []SystemLoggingFeatureIpv4Server `pulumi:"ipv4Servers"`
	// Enable logging to remote ipv6 server
	Ipv6Servers []SystemLoggingFeatureIpv6Server `pulumi:"ipv6Servers"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Configure a TLS profile
	TlsProfiles []SystemLoggingFeatureTlsProfile `pulumi:"tlsProfiles"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type SystemLoggingFeatureState struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Enable logging to local disk - Default value: `true`
	DiskEnable pulumi.BoolPtrInput
	// Variable name
	DiskEnableVariable pulumi.StringPtrInput
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate pulumi.IntPtrInput
	// Variable name
	DiskFileRotateVariable pulumi.StringPtrInput
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize pulumi.IntPtrInput
	// Variable name
	DiskFileSizeVariable pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Enable logging to remote server
	Ipv4Servers SystemLoggingFeatureIpv4ServerArrayInput
	// Enable logging to remote ipv6 server
	Ipv6Servers SystemLoggingFeatureIpv6ServerArrayInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Configure a TLS profile
	TlsProfiles SystemLoggingFeatureTlsProfileArrayInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (SystemLoggingFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLoggingFeatureState)(nil)).Elem()
}

type systemLoggingFeatureArgs struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Enable logging to local disk - Default value: `true`
	DiskEnable *bool `pulumi:"diskEnable"`
	// Variable name
	DiskEnableVariable *string `pulumi:"diskEnableVariable"`
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate *int `pulumi:"diskFileRotate"`
	// Variable name
	DiskFileRotateVariable *string `pulumi:"diskFileRotateVariable"`
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize *int `pulumi:"diskFileSize"`
	// Variable name
	DiskFileSizeVariable *string `pulumi:"diskFileSizeVariable"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Enable logging to remote server
	Ipv4Servers []SystemLoggingFeatureIpv4Server `pulumi:"ipv4Servers"`
	// Enable logging to remote ipv6 server
	Ipv6Servers []SystemLoggingFeatureIpv6Server `pulumi:"ipv6Servers"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Configure a TLS profile
	TlsProfiles []SystemLoggingFeatureTlsProfile `pulumi:"tlsProfiles"`
}

// The set of arguments for constructing a SystemLoggingFeature resource.
type SystemLoggingFeatureArgs struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Enable logging to local disk - Default value: `true`
	DiskEnable pulumi.BoolPtrInput
	// Variable name
	DiskEnableVariable pulumi.StringPtrInput
	// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
	DiskFileRotate pulumi.IntPtrInput
	// Variable name
	DiskFileRotateVariable pulumi.StringPtrInput
	// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
	DiskFileSize pulumi.IntPtrInput
	// Variable name
	DiskFileSizeVariable pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Enable logging to remote server
	Ipv4Servers SystemLoggingFeatureIpv4ServerArrayInput
	// Enable logging to remote ipv6 server
	Ipv6Servers SystemLoggingFeatureIpv6ServerArrayInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Configure a TLS profile
	TlsProfiles SystemLoggingFeatureTlsProfileArrayInput
}

func (SystemLoggingFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemLoggingFeatureArgs)(nil)).Elem()
}

type SystemLoggingFeatureInput interface {
	pulumi.Input

	ToSystemLoggingFeatureOutput() SystemLoggingFeatureOutput
	ToSystemLoggingFeatureOutputWithContext(ctx context.Context) SystemLoggingFeatureOutput
}

func (*SystemLoggingFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLoggingFeature)(nil)).Elem()
}

func (i *SystemLoggingFeature) ToSystemLoggingFeatureOutput() SystemLoggingFeatureOutput {
	return i.ToSystemLoggingFeatureOutputWithContext(context.Background())
}

func (i *SystemLoggingFeature) ToSystemLoggingFeatureOutputWithContext(ctx context.Context) SystemLoggingFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLoggingFeatureOutput)
}

// SystemLoggingFeatureArrayInput is an input type that accepts SystemLoggingFeatureArray and SystemLoggingFeatureArrayOutput values.
// You can construct a concrete instance of `SystemLoggingFeatureArrayInput` via:
//
//	SystemLoggingFeatureArray{ SystemLoggingFeatureArgs{...} }
type SystemLoggingFeatureArrayInput interface {
	pulumi.Input

	ToSystemLoggingFeatureArrayOutput() SystemLoggingFeatureArrayOutput
	ToSystemLoggingFeatureArrayOutputWithContext(context.Context) SystemLoggingFeatureArrayOutput
}

type SystemLoggingFeatureArray []SystemLoggingFeatureInput

func (SystemLoggingFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLoggingFeature)(nil)).Elem()
}

func (i SystemLoggingFeatureArray) ToSystemLoggingFeatureArrayOutput() SystemLoggingFeatureArrayOutput {
	return i.ToSystemLoggingFeatureArrayOutputWithContext(context.Background())
}

func (i SystemLoggingFeatureArray) ToSystemLoggingFeatureArrayOutputWithContext(ctx context.Context) SystemLoggingFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLoggingFeatureArrayOutput)
}

// SystemLoggingFeatureMapInput is an input type that accepts SystemLoggingFeatureMap and SystemLoggingFeatureMapOutput values.
// You can construct a concrete instance of `SystemLoggingFeatureMapInput` via:
//
//	SystemLoggingFeatureMap{ "key": SystemLoggingFeatureArgs{...} }
type SystemLoggingFeatureMapInput interface {
	pulumi.Input

	ToSystemLoggingFeatureMapOutput() SystemLoggingFeatureMapOutput
	ToSystemLoggingFeatureMapOutputWithContext(context.Context) SystemLoggingFeatureMapOutput
}

type SystemLoggingFeatureMap map[string]SystemLoggingFeatureInput

func (SystemLoggingFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLoggingFeature)(nil)).Elem()
}

func (i SystemLoggingFeatureMap) ToSystemLoggingFeatureMapOutput() SystemLoggingFeatureMapOutput {
	return i.ToSystemLoggingFeatureMapOutputWithContext(context.Background())
}

func (i SystemLoggingFeatureMap) ToSystemLoggingFeatureMapOutputWithContext(ctx context.Context) SystemLoggingFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemLoggingFeatureMapOutput)
}

type SystemLoggingFeatureOutput struct{ *pulumi.OutputState }

func (SystemLoggingFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemLoggingFeature)(nil)).Elem()
}

func (o SystemLoggingFeatureOutput) ToSystemLoggingFeatureOutput() SystemLoggingFeatureOutput {
	return o
}

func (o SystemLoggingFeatureOutput) ToSystemLoggingFeatureOutputWithContext(ctx context.Context) SystemLoggingFeatureOutput {
	return o
}

// The description of the Feature
func (o SystemLoggingFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Enable logging to local disk - Default value: `true`
func (o SystemLoggingFeatureOutput) DiskEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.BoolPtrOutput { return v.DiskEnable }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o SystemLoggingFeatureOutput) DiskEnableVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.StringPtrOutput { return v.DiskEnableVariable }).(pulumi.StringPtrOutput)
}

// Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
func (o SystemLoggingFeatureOutput) DiskFileRotate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.IntPtrOutput { return v.DiskFileRotate }).(pulumi.IntPtrOutput)
}

// Variable name
func (o SystemLoggingFeatureOutput) DiskFileRotateVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.StringPtrOutput { return v.DiskFileRotateVariable }).(pulumi.StringPtrOutput)
}

// Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
func (o SystemLoggingFeatureOutput) DiskFileSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.IntPtrOutput { return v.DiskFileSize }).(pulumi.IntPtrOutput)
}

// Variable name
func (o SystemLoggingFeatureOutput) DiskFileSizeVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.StringPtrOutput { return v.DiskFileSizeVariable }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o SystemLoggingFeatureOutput) FeatureProfileId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.StringPtrOutput { return v.FeatureProfileId }).(pulumi.StringPtrOutput)
}

// Enable logging to remote server
func (o SystemLoggingFeatureOutput) Ipv4Servers() SystemLoggingFeatureIpv4ServerArrayOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) SystemLoggingFeatureIpv4ServerArrayOutput { return v.Ipv4Servers }).(SystemLoggingFeatureIpv4ServerArrayOutput)
}

// Enable logging to remote ipv6 server
func (o SystemLoggingFeatureOutput) Ipv6Servers() SystemLoggingFeatureIpv6ServerArrayOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) SystemLoggingFeatureIpv6ServerArrayOutput { return v.Ipv6Servers }).(SystemLoggingFeatureIpv6ServerArrayOutput)
}

// The name of the Feature
func (o SystemLoggingFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure a TLS profile
func (o SystemLoggingFeatureOutput) TlsProfiles() SystemLoggingFeatureTlsProfileArrayOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) SystemLoggingFeatureTlsProfileArrayOutput { return v.TlsProfiles }).(SystemLoggingFeatureTlsProfileArrayOutput)
}

// The version of the Feature
func (o SystemLoggingFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemLoggingFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SystemLoggingFeatureArrayOutput struct{ *pulumi.OutputState }

func (SystemLoggingFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemLoggingFeature)(nil)).Elem()
}

func (o SystemLoggingFeatureArrayOutput) ToSystemLoggingFeatureArrayOutput() SystemLoggingFeatureArrayOutput {
	return o
}

func (o SystemLoggingFeatureArrayOutput) ToSystemLoggingFeatureArrayOutputWithContext(ctx context.Context) SystemLoggingFeatureArrayOutput {
	return o
}

func (o SystemLoggingFeatureArrayOutput) Index(i pulumi.IntInput) SystemLoggingFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemLoggingFeature {
		return vs[0].([]*SystemLoggingFeature)[vs[1].(int)]
	}).(SystemLoggingFeatureOutput)
}

type SystemLoggingFeatureMapOutput struct{ *pulumi.OutputState }

func (SystemLoggingFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemLoggingFeature)(nil)).Elem()
}

func (o SystemLoggingFeatureMapOutput) ToSystemLoggingFeatureMapOutput() SystemLoggingFeatureMapOutput {
	return o
}

func (o SystemLoggingFeatureMapOutput) ToSystemLoggingFeatureMapOutputWithContext(ctx context.Context) SystemLoggingFeatureMapOutput {
	return o
}

func (o SystemLoggingFeatureMapOutput) MapIndex(k pulumi.StringInput) SystemLoggingFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemLoggingFeature {
		return vs[0].(map[string]*SystemLoggingFeature)[vs[1].(string)]
	}).(SystemLoggingFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLoggingFeatureInput)(nil)).Elem(), &SystemLoggingFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLoggingFeatureArrayInput)(nil)).Elem(), SystemLoggingFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemLoggingFeatureMapInput)(nil)).Elem(), SystemLoggingFeatureMap{})
	pulumi.RegisterOutputType(SystemLoggingFeatureOutput{})
	pulumi.RegisterOutputType(SystemLoggingFeatureArrayOutput{})
	pulumi.RegisterOutputType(SystemLoggingFeatureMapOutput{})
}
