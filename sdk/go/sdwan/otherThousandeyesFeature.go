// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Other ThousandEyes Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// Expected import identifier with the format: "other_thousandeyes_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/otherThousandeyesFeature:OtherThousandeyesFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type OtherThousandeyesFeature struct {
	pulumi.CustomResourceState

	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
	// Virtual application Instance
	VirtualApplications OtherThousandeyesFeatureVirtualApplicationArrayOutput `pulumi:"virtualApplications"`
}

// NewOtherThousandeyesFeature registers a new resource with the given unique name, arguments, and options.
func NewOtherThousandeyesFeature(ctx *pulumi.Context,
	name string, args *OtherThousandeyesFeatureArgs, opts ...pulumi.ResourceOption) (*OtherThousandeyesFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OtherThousandeyesFeature
	err := ctx.RegisterResource("sdwan:index/otherThousandeyesFeature:OtherThousandeyesFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOtherThousandeyesFeature gets an existing OtherThousandeyesFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOtherThousandeyesFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OtherThousandeyesFeatureState, opts ...pulumi.ResourceOption) (*OtherThousandeyesFeature, error) {
	var resource OtherThousandeyesFeature
	err := ctx.ReadResource("sdwan:index/otherThousandeyesFeature:OtherThousandeyesFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OtherThousandeyesFeature resources.
type otherThousandeyesFeatureState struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// The version of the Feature
	Version *int `pulumi:"version"`
	// Virtual application Instance
	VirtualApplications []OtherThousandeyesFeatureVirtualApplication `pulumi:"virtualApplications"`
}

type OtherThousandeyesFeatureState struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// The version of the Feature
	Version pulumi.IntPtrInput
	// Virtual application Instance
	VirtualApplications OtherThousandeyesFeatureVirtualApplicationArrayInput
}

func (OtherThousandeyesFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*otherThousandeyesFeatureState)(nil)).Elem()
}

type otherThousandeyesFeatureArgs struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// Virtual application Instance
	VirtualApplications []OtherThousandeyesFeatureVirtualApplication `pulumi:"virtualApplications"`
}

// The set of arguments for constructing a OtherThousandeyesFeature resource.
type OtherThousandeyesFeatureArgs struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// Virtual application Instance
	VirtualApplications OtherThousandeyesFeatureVirtualApplicationArrayInput
}

func (OtherThousandeyesFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*otherThousandeyesFeatureArgs)(nil)).Elem()
}

type OtherThousandeyesFeatureInput interface {
	pulumi.Input

	ToOtherThousandeyesFeatureOutput() OtherThousandeyesFeatureOutput
	ToOtherThousandeyesFeatureOutputWithContext(ctx context.Context) OtherThousandeyesFeatureOutput
}

func (*OtherThousandeyesFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**OtherThousandeyesFeature)(nil)).Elem()
}

func (i *OtherThousandeyesFeature) ToOtherThousandeyesFeatureOutput() OtherThousandeyesFeatureOutput {
	return i.ToOtherThousandeyesFeatureOutputWithContext(context.Background())
}

func (i *OtherThousandeyesFeature) ToOtherThousandeyesFeatureOutputWithContext(ctx context.Context) OtherThousandeyesFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtherThousandeyesFeatureOutput)
}

// OtherThousandeyesFeatureArrayInput is an input type that accepts OtherThousandeyesFeatureArray and OtherThousandeyesFeatureArrayOutput values.
// You can construct a concrete instance of `OtherThousandeyesFeatureArrayInput` via:
//
//	OtherThousandeyesFeatureArray{ OtherThousandeyesFeatureArgs{...} }
type OtherThousandeyesFeatureArrayInput interface {
	pulumi.Input

	ToOtherThousandeyesFeatureArrayOutput() OtherThousandeyesFeatureArrayOutput
	ToOtherThousandeyesFeatureArrayOutputWithContext(context.Context) OtherThousandeyesFeatureArrayOutput
}

type OtherThousandeyesFeatureArray []OtherThousandeyesFeatureInput

func (OtherThousandeyesFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OtherThousandeyesFeature)(nil)).Elem()
}

func (i OtherThousandeyesFeatureArray) ToOtherThousandeyesFeatureArrayOutput() OtherThousandeyesFeatureArrayOutput {
	return i.ToOtherThousandeyesFeatureArrayOutputWithContext(context.Background())
}

func (i OtherThousandeyesFeatureArray) ToOtherThousandeyesFeatureArrayOutputWithContext(ctx context.Context) OtherThousandeyesFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtherThousandeyesFeatureArrayOutput)
}

// OtherThousandeyesFeatureMapInput is an input type that accepts OtherThousandeyesFeatureMap and OtherThousandeyesFeatureMapOutput values.
// You can construct a concrete instance of `OtherThousandeyesFeatureMapInput` via:
//
//	OtherThousandeyesFeatureMap{ "key": OtherThousandeyesFeatureArgs{...} }
type OtherThousandeyesFeatureMapInput interface {
	pulumi.Input

	ToOtherThousandeyesFeatureMapOutput() OtherThousandeyesFeatureMapOutput
	ToOtherThousandeyesFeatureMapOutputWithContext(context.Context) OtherThousandeyesFeatureMapOutput
}

type OtherThousandeyesFeatureMap map[string]OtherThousandeyesFeatureInput

func (OtherThousandeyesFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OtherThousandeyesFeature)(nil)).Elem()
}

func (i OtherThousandeyesFeatureMap) ToOtherThousandeyesFeatureMapOutput() OtherThousandeyesFeatureMapOutput {
	return i.ToOtherThousandeyesFeatureMapOutputWithContext(context.Background())
}

func (i OtherThousandeyesFeatureMap) ToOtherThousandeyesFeatureMapOutputWithContext(ctx context.Context) OtherThousandeyesFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OtherThousandeyesFeatureMapOutput)
}

type OtherThousandeyesFeatureOutput struct{ *pulumi.OutputState }

func (OtherThousandeyesFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OtherThousandeyesFeature)(nil)).Elem()
}

func (o OtherThousandeyesFeatureOutput) ToOtherThousandeyesFeatureOutput() OtherThousandeyesFeatureOutput {
	return o
}

func (o OtherThousandeyesFeatureOutput) ToOtherThousandeyesFeatureOutputWithContext(ctx context.Context) OtherThousandeyesFeatureOutput {
	return o
}

// The description of the Feature
func (o OtherThousandeyesFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OtherThousandeyesFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o OtherThousandeyesFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *OtherThousandeyesFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o OtherThousandeyesFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OtherThousandeyesFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the Feature
func (o OtherThousandeyesFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *OtherThousandeyesFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// Virtual application Instance
func (o OtherThousandeyesFeatureOutput) VirtualApplications() OtherThousandeyesFeatureVirtualApplicationArrayOutput {
	return o.ApplyT(func(v *OtherThousandeyesFeature) OtherThousandeyesFeatureVirtualApplicationArrayOutput {
		return v.VirtualApplications
	}).(OtherThousandeyesFeatureVirtualApplicationArrayOutput)
}

type OtherThousandeyesFeatureArrayOutput struct{ *pulumi.OutputState }

func (OtherThousandeyesFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OtherThousandeyesFeature)(nil)).Elem()
}

func (o OtherThousandeyesFeatureArrayOutput) ToOtherThousandeyesFeatureArrayOutput() OtherThousandeyesFeatureArrayOutput {
	return o
}

func (o OtherThousandeyesFeatureArrayOutput) ToOtherThousandeyesFeatureArrayOutputWithContext(ctx context.Context) OtherThousandeyesFeatureArrayOutput {
	return o
}

func (o OtherThousandeyesFeatureArrayOutput) Index(i pulumi.IntInput) OtherThousandeyesFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OtherThousandeyesFeature {
		return vs[0].([]*OtherThousandeyesFeature)[vs[1].(int)]
	}).(OtherThousandeyesFeatureOutput)
}

type OtherThousandeyesFeatureMapOutput struct{ *pulumi.OutputState }

func (OtherThousandeyesFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OtherThousandeyesFeature)(nil)).Elem()
}

func (o OtherThousandeyesFeatureMapOutput) ToOtherThousandeyesFeatureMapOutput() OtherThousandeyesFeatureMapOutput {
	return o
}

func (o OtherThousandeyesFeatureMapOutput) ToOtherThousandeyesFeatureMapOutputWithContext(ctx context.Context) OtherThousandeyesFeatureMapOutput {
	return o
}

func (o OtherThousandeyesFeatureMapOutput) MapIndex(k pulumi.StringInput) OtherThousandeyesFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OtherThousandeyesFeature {
		return vs[0].(map[string]*OtherThousandeyesFeature)[vs[1].(string)]
	}).(OtherThousandeyesFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OtherThousandeyesFeatureInput)(nil)).Elem(), &OtherThousandeyesFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtherThousandeyesFeatureArrayInput)(nil)).Elem(), OtherThousandeyesFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OtherThousandeyesFeatureMapInput)(nil)).Elem(), OtherThousandeyesFeatureMap{})
	pulumi.RegisterOutputType(OtherThousandeyesFeatureOutput{})
	pulumi.RegisterOutputType(OtherThousandeyesFeatureArrayOutput{})
	pulumi.RegisterOutputType(OtherThousandeyesFeatureMapOutput{})
}
