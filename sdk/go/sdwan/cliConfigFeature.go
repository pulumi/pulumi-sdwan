// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a CLI Config Feature .
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCliConfigFeature(ctx, "example", &sdwan.CliConfigFeatureArgs{
//				FeatureProfileId: pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My Example"),
//				CliConfiguration: pulumi.String("bfd default-dscp 48\nbfd app-route multiplier 6\nbfd app-route poll-interval 600000"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Expected import identifier with the format: "cli_config_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/cliConfigFeature:CliConfigFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type CliConfigFeature struct {
	pulumi.CustomResourceState

	// CLI configuration
	CliConfiguration pulumi.StringOutput `pulumi:"cliConfiguration"`
	// The description of the Feature
	Description pulumi.StringOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCliConfigFeature registers a new resource with the given unique name, arguments, and options.
func NewCliConfigFeature(ctx *pulumi.Context,
	name string, args *CliConfigFeatureArgs, opts ...pulumi.ResourceOption) (*CliConfigFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CliConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'CliConfiguration'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CliConfigFeature
	err := ctx.RegisterResource("sdwan:index/cliConfigFeature:CliConfigFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCliConfigFeature gets an existing CliConfigFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCliConfigFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CliConfigFeatureState, opts ...pulumi.ResourceOption) (*CliConfigFeature, error) {
	var resource CliConfigFeature
	err := ctx.ReadResource("sdwan:index/cliConfigFeature:CliConfigFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CliConfigFeature resources.
type cliConfigFeatureState struct {
	// CLI configuration
	CliConfiguration *string `pulumi:"cliConfiguration"`
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type CliConfigFeatureState struct {
	// CLI configuration
	CliConfiguration pulumi.StringPtrInput
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (CliConfigFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*cliConfigFeatureState)(nil)).Elem()
}

type cliConfigFeatureArgs struct {
	// CLI configuration
	CliConfiguration string `pulumi:"cliConfiguration"`
	// The description of the Feature
	Description string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CliConfigFeature resource.
type CliConfigFeatureArgs struct {
	// CLI configuration
	CliConfiguration pulumi.StringInput
	// The description of the Feature
	Description pulumi.StringInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
}

func (CliConfigFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cliConfigFeatureArgs)(nil)).Elem()
}

type CliConfigFeatureInput interface {
	pulumi.Input

	ToCliConfigFeatureOutput() CliConfigFeatureOutput
	ToCliConfigFeatureOutputWithContext(ctx context.Context) CliConfigFeatureOutput
}

func (*CliConfigFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**CliConfigFeature)(nil)).Elem()
}

func (i *CliConfigFeature) ToCliConfigFeatureOutput() CliConfigFeatureOutput {
	return i.ToCliConfigFeatureOutputWithContext(context.Background())
}

func (i *CliConfigFeature) ToCliConfigFeatureOutputWithContext(ctx context.Context) CliConfigFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliConfigFeatureOutput)
}

// CliConfigFeatureArrayInput is an input type that accepts CliConfigFeatureArray and CliConfigFeatureArrayOutput values.
// You can construct a concrete instance of `CliConfigFeatureArrayInput` via:
//
//	CliConfigFeatureArray{ CliConfigFeatureArgs{...} }
type CliConfigFeatureArrayInput interface {
	pulumi.Input

	ToCliConfigFeatureArrayOutput() CliConfigFeatureArrayOutput
	ToCliConfigFeatureArrayOutputWithContext(context.Context) CliConfigFeatureArrayOutput
}

type CliConfigFeatureArray []CliConfigFeatureInput

func (CliConfigFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliConfigFeature)(nil)).Elem()
}

func (i CliConfigFeatureArray) ToCliConfigFeatureArrayOutput() CliConfigFeatureArrayOutput {
	return i.ToCliConfigFeatureArrayOutputWithContext(context.Background())
}

func (i CliConfigFeatureArray) ToCliConfigFeatureArrayOutputWithContext(ctx context.Context) CliConfigFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliConfigFeatureArrayOutput)
}

// CliConfigFeatureMapInput is an input type that accepts CliConfigFeatureMap and CliConfigFeatureMapOutput values.
// You can construct a concrete instance of `CliConfigFeatureMapInput` via:
//
//	CliConfigFeatureMap{ "key": CliConfigFeatureArgs{...} }
type CliConfigFeatureMapInput interface {
	pulumi.Input

	ToCliConfigFeatureMapOutput() CliConfigFeatureMapOutput
	ToCliConfigFeatureMapOutputWithContext(context.Context) CliConfigFeatureMapOutput
}

type CliConfigFeatureMap map[string]CliConfigFeatureInput

func (CliConfigFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliConfigFeature)(nil)).Elem()
}

func (i CliConfigFeatureMap) ToCliConfigFeatureMapOutput() CliConfigFeatureMapOutput {
	return i.ToCliConfigFeatureMapOutputWithContext(context.Background())
}

func (i CliConfigFeatureMap) ToCliConfigFeatureMapOutputWithContext(ctx context.Context) CliConfigFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliConfigFeatureMapOutput)
}

type CliConfigFeatureOutput struct{ *pulumi.OutputState }

func (CliConfigFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CliConfigFeature)(nil)).Elem()
}

func (o CliConfigFeatureOutput) ToCliConfigFeatureOutput() CliConfigFeatureOutput {
	return o
}

func (o CliConfigFeatureOutput) ToCliConfigFeatureOutputWithContext(ctx context.Context) CliConfigFeatureOutput {
	return o
}

// CLI configuration
func (o CliConfigFeatureOutput) CliConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigFeature) pulumi.StringOutput { return v.CliConfiguration }).(pulumi.StringOutput)
}

// The description of the Feature
func (o CliConfigFeatureOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigFeature) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Feature Profile ID
func (o CliConfigFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o CliConfigFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o CliConfigFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CliConfigFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CliConfigFeatureArrayOutput struct{ *pulumi.OutputState }

func (CliConfigFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliConfigFeature)(nil)).Elem()
}

func (o CliConfigFeatureArrayOutput) ToCliConfigFeatureArrayOutput() CliConfigFeatureArrayOutput {
	return o
}

func (o CliConfigFeatureArrayOutput) ToCliConfigFeatureArrayOutputWithContext(ctx context.Context) CliConfigFeatureArrayOutput {
	return o
}

func (o CliConfigFeatureArrayOutput) Index(i pulumi.IntInput) CliConfigFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CliConfigFeature {
		return vs[0].([]*CliConfigFeature)[vs[1].(int)]
	}).(CliConfigFeatureOutput)
}

type CliConfigFeatureMapOutput struct{ *pulumi.OutputState }

func (CliConfigFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliConfigFeature)(nil)).Elem()
}

func (o CliConfigFeatureMapOutput) ToCliConfigFeatureMapOutput() CliConfigFeatureMapOutput {
	return o
}

func (o CliConfigFeatureMapOutput) ToCliConfigFeatureMapOutputWithContext(ctx context.Context) CliConfigFeatureMapOutput {
	return o
}

func (o CliConfigFeatureMapOutput) MapIndex(k pulumi.StringInput) CliConfigFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CliConfigFeature {
		return vs[0].(map[string]*CliConfigFeature)[vs[1].(string)]
	}).(CliConfigFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CliConfigFeatureInput)(nil)).Elem(), &CliConfigFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliConfigFeatureArrayInput)(nil)).Elem(), CliConfigFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliConfigFeatureMapInput)(nil)).Elem(), CliConfigFeatureMap{})
	pulumi.RegisterOutputType(CliConfigFeatureOutput{})
	pulumi.RegisterOutputType(CliConfigFeatureArrayOutput{})
	pulumi.RegisterOutputType(CliConfigFeatureMapOutput{})
}
