// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a cEdge Multicast feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCedgeMulticastFeatureTemplate(ctx, "example", &sdwan.CedgeMulticastFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				SptOnly:         pulumi.Bool(true),
//				LocalReplicator: pulumi.Bool(true),
//				Threshold:       pulumi.Int(200),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/cedgeMulticastFeatureTemplate:CedgeMulticastFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CedgeMulticastFeatureTemplate struct {
	pulumi.CustomResourceState

	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Replicator is local to this device - Default value: `false`
	LocalReplicator pulumi.BoolPtrOutput `pulumi:"localReplicator"`
	// Variable name
	LocalReplicatorVariable pulumi.StringPtrOutput `pulumi:"localReplicatorVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Shortest Path Tree (SPT) Only Mode - Default value: `false`
	SptOnly pulumi.BoolPtrOutput `pulumi:"sptOnly"`
	// Variable name
	SptOnlyVariable pulumi.StringPtrOutput `pulumi:"sptOnlyVariable"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Set number of joins per group the router supports - Range: `0`-`1000`
	Threshold pulumi.IntPtrOutput `pulumi:"threshold"`
	// Variable name
	ThresholdVariable pulumi.StringPtrOutput `pulumi:"thresholdVariable"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCedgeMulticastFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCedgeMulticastFeatureTemplate(ctx *pulumi.Context,
	name string, args *CedgeMulticastFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CedgeMulticastFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CedgeMulticastFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/cedgeMulticastFeatureTemplate:CedgeMulticastFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCedgeMulticastFeatureTemplate gets an existing CedgeMulticastFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCedgeMulticastFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CedgeMulticastFeatureTemplateState, opts ...pulumi.ResourceOption) (*CedgeMulticastFeatureTemplate, error) {
	var resource CedgeMulticastFeatureTemplate
	err := ctx.ReadResource("sdwan:index/cedgeMulticastFeatureTemplate:CedgeMulticastFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CedgeMulticastFeatureTemplate resources.
type cedgeMulticastFeatureTemplateState struct {
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Replicator is local to this device - Default value: `false`
	LocalReplicator *bool `pulumi:"localReplicator"`
	// Variable name
	LocalReplicatorVariable *string `pulumi:"localReplicatorVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Shortest Path Tree (SPT) Only Mode - Default value: `false`
	SptOnly *bool `pulumi:"sptOnly"`
	// Variable name
	SptOnlyVariable *string `pulumi:"sptOnlyVariable"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Set number of joins per group the router supports - Range: `0`-`1000`
	Threshold *int `pulumi:"threshold"`
	// Variable name
	ThresholdVariable *string `pulumi:"thresholdVariable"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CedgeMulticastFeatureTemplateState struct {
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Replicator is local to this device - Default value: `false`
	LocalReplicator pulumi.BoolPtrInput
	// Variable name
	LocalReplicatorVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Shortest Path Tree (SPT) Only Mode - Default value: `false`
	SptOnly pulumi.BoolPtrInput
	// Variable name
	SptOnlyVariable pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Set number of joins per group the router supports - Range: `0`-`1000`
	Threshold pulumi.IntPtrInput
	// Variable name
	ThresholdVariable pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CedgeMulticastFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cedgeMulticastFeatureTemplateState)(nil)).Elem()
}

type cedgeMulticastFeatureTemplateArgs struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Replicator is local to this device - Default value: `false`
	LocalReplicator *bool `pulumi:"localReplicator"`
	// Variable name
	LocalReplicatorVariable *string `pulumi:"localReplicatorVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Shortest Path Tree (SPT) Only Mode - Default value: `false`
	SptOnly *bool `pulumi:"sptOnly"`
	// Variable name
	SptOnlyVariable *string `pulumi:"sptOnlyVariable"`
	// Set number of joins per group the router supports - Range: `0`-`1000`
	Threshold *int `pulumi:"threshold"`
	// Variable name
	ThresholdVariable *string `pulumi:"thresholdVariable"`
}

// The set of arguments for constructing a CedgeMulticastFeatureTemplate resource.
type CedgeMulticastFeatureTemplateArgs struct {
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Replicator is local to this device - Default value: `false`
	LocalReplicator pulumi.BoolPtrInput
	// Variable name
	LocalReplicatorVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Shortest Path Tree (SPT) Only Mode - Default value: `false`
	SptOnly pulumi.BoolPtrInput
	// Variable name
	SptOnlyVariable pulumi.StringPtrInput
	// Set number of joins per group the router supports - Range: `0`-`1000`
	Threshold pulumi.IntPtrInput
	// Variable name
	ThresholdVariable pulumi.StringPtrInput
}

func (CedgeMulticastFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cedgeMulticastFeatureTemplateArgs)(nil)).Elem()
}

type CedgeMulticastFeatureTemplateInput interface {
	pulumi.Input

	ToCedgeMulticastFeatureTemplateOutput() CedgeMulticastFeatureTemplateOutput
	ToCedgeMulticastFeatureTemplateOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateOutput
}

func (*CedgeMulticastFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CedgeMulticastFeatureTemplate)(nil)).Elem()
}

func (i *CedgeMulticastFeatureTemplate) ToCedgeMulticastFeatureTemplateOutput() CedgeMulticastFeatureTemplateOutput {
	return i.ToCedgeMulticastFeatureTemplateOutputWithContext(context.Background())
}

func (i *CedgeMulticastFeatureTemplate) ToCedgeMulticastFeatureTemplateOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CedgeMulticastFeatureTemplateOutput)
}

// CedgeMulticastFeatureTemplateArrayInput is an input type that accepts CedgeMulticastFeatureTemplateArray and CedgeMulticastFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CedgeMulticastFeatureTemplateArrayInput` via:
//
//	CedgeMulticastFeatureTemplateArray{ CedgeMulticastFeatureTemplateArgs{...} }
type CedgeMulticastFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCedgeMulticastFeatureTemplateArrayOutput() CedgeMulticastFeatureTemplateArrayOutput
	ToCedgeMulticastFeatureTemplateArrayOutputWithContext(context.Context) CedgeMulticastFeatureTemplateArrayOutput
}

type CedgeMulticastFeatureTemplateArray []CedgeMulticastFeatureTemplateInput

func (CedgeMulticastFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CedgeMulticastFeatureTemplate)(nil)).Elem()
}

func (i CedgeMulticastFeatureTemplateArray) ToCedgeMulticastFeatureTemplateArrayOutput() CedgeMulticastFeatureTemplateArrayOutput {
	return i.ToCedgeMulticastFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CedgeMulticastFeatureTemplateArray) ToCedgeMulticastFeatureTemplateArrayOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CedgeMulticastFeatureTemplateArrayOutput)
}

// CedgeMulticastFeatureTemplateMapInput is an input type that accepts CedgeMulticastFeatureTemplateMap and CedgeMulticastFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CedgeMulticastFeatureTemplateMapInput` via:
//
//	CedgeMulticastFeatureTemplateMap{ "key": CedgeMulticastFeatureTemplateArgs{...} }
type CedgeMulticastFeatureTemplateMapInput interface {
	pulumi.Input

	ToCedgeMulticastFeatureTemplateMapOutput() CedgeMulticastFeatureTemplateMapOutput
	ToCedgeMulticastFeatureTemplateMapOutputWithContext(context.Context) CedgeMulticastFeatureTemplateMapOutput
}

type CedgeMulticastFeatureTemplateMap map[string]CedgeMulticastFeatureTemplateInput

func (CedgeMulticastFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CedgeMulticastFeatureTemplate)(nil)).Elem()
}

func (i CedgeMulticastFeatureTemplateMap) ToCedgeMulticastFeatureTemplateMapOutput() CedgeMulticastFeatureTemplateMapOutput {
	return i.ToCedgeMulticastFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CedgeMulticastFeatureTemplateMap) ToCedgeMulticastFeatureTemplateMapOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CedgeMulticastFeatureTemplateMapOutput)
}

type CedgeMulticastFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CedgeMulticastFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CedgeMulticastFeatureTemplate)(nil)).Elem()
}

func (o CedgeMulticastFeatureTemplateOutput) ToCedgeMulticastFeatureTemplateOutput() CedgeMulticastFeatureTemplateOutput {
	return o
}

func (o CedgeMulticastFeatureTemplateOutput) ToCedgeMulticastFeatureTemplateOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateOutput {
	return o
}

// The description of the feature template
func (o CedgeMulticastFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CedgeMulticastFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Replicator is local to this device - Default value: `false`
func (o CedgeMulticastFeatureTemplateOutput) LocalReplicator() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.BoolPtrOutput { return v.LocalReplicator }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CedgeMulticastFeatureTemplateOutput) LocalReplicatorVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringPtrOutput { return v.LocalReplicatorVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CedgeMulticastFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Shortest Path Tree (SPT) Only Mode - Default value: `false`
func (o CedgeMulticastFeatureTemplateOutput) SptOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.BoolPtrOutput { return v.SptOnly }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CedgeMulticastFeatureTemplateOutput) SptOnlyVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringPtrOutput { return v.SptOnlyVariable }).(pulumi.StringPtrOutput)
}

// The template type
func (o CedgeMulticastFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Set number of joins per group the router supports - Range: `0`-`1000`
func (o CedgeMulticastFeatureTemplateOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.IntPtrOutput { return v.Threshold }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CedgeMulticastFeatureTemplateOutput) ThresholdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.StringPtrOutput { return v.ThresholdVariable }).(pulumi.StringPtrOutput)
}

// The version of the feature template
func (o CedgeMulticastFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CedgeMulticastFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CedgeMulticastFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CedgeMulticastFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CedgeMulticastFeatureTemplate)(nil)).Elem()
}

func (o CedgeMulticastFeatureTemplateArrayOutput) ToCedgeMulticastFeatureTemplateArrayOutput() CedgeMulticastFeatureTemplateArrayOutput {
	return o
}

func (o CedgeMulticastFeatureTemplateArrayOutput) ToCedgeMulticastFeatureTemplateArrayOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateArrayOutput {
	return o
}

func (o CedgeMulticastFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CedgeMulticastFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CedgeMulticastFeatureTemplate {
		return vs[0].([]*CedgeMulticastFeatureTemplate)[vs[1].(int)]
	}).(CedgeMulticastFeatureTemplateOutput)
}

type CedgeMulticastFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CedgeMulticastFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CedgeMulticastFeatureTemplate)(nil)).Elem()
}

func (o CedgeMulticastFeatureTemplateMapOutput) ToCedgeMulticastFeatureTemplateMapOutput() CedgeMulticastFeatureTemplateMapOutput {
	return o
}

func (o CedgeMulticastFeatureTemplateMapOutput) ToCedgeMulticastFeatureTemplateMapOutputWithContext(ctx context.Context) CedgeMulticastFeatureTemplateMapOutput {
	return o
}

func (o CedgeMulticastFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CedgeMulticastFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CedgeMulticastFeatureTemplate {
		return vs[0].(map[string]*CedgeMulticastFeatureTemplate)[vs[1].(string)]
	}).(CedgeMulticastFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CedgeMulticastFeatureTemplateInput)(nil)).Elem(), &CedgeMulticastFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CedgeMulticastFeatureTemplateArrayInput)(nil)).Elem(), CedgeMulticastFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CedgeMulticastFeatureTemplateMapInput)(nil)).Elem(), CedgeMulticastFeatureTemplateMap{})
	pulumi.RegisterOutputType(CedgeMulticastFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CedgeMulticastFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CedgeMulticastFeatureTemplateMapOutput{})
}
