// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Policy Object IPv4 Prefix List Policy_object.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "policy_object_ipv4_prefix_list_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/policyObjectIpv4PrefixList:PolicyObjectIpv4PrefixList example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type PolicyObjectIpv4PrefixList struct {
	pulumi.CustomResourceState

	// The description of the Policy_object
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IPv4 Prefix List
	Entries PolicyObjectIpv4PrefixListEntryArrayOutput `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the Policy_object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPolicyObjectIpv4PrefixList registers a new resource with the given unique name, arguments, and options.
func NewPolicyObjectIpv4PrefixList(ctx *pulumi.Context,
	name string, args *PolicyObjectIpv4PrefixListArgs, opts ...pulumi.ResourceOption) (*PolicyObjectIpv4PrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyObjectIpv4PrefixList
	err := ctx.RegisterResource("sdwan:index/policyObjectIpv4PrefixList:PolicyObjectIpv4PrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyObjectIpv4PrefixList gets an existing PolicyObjectIpv4PrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyObjectIpv4PrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyObjectIpv4PrefixListState, opts ...pulumi.ResourceOption) (*PolicyObjectIpv4PrefixList, error) {
	var resource PolicyObjectIpv4PrefixList
	err := ctx.ReadResource("sdwan:index/policyObjectIpv4PrefixList:PolicyObjectIpv4PrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyObjectIpv4PrefixList resources.
type policyObjectIpv4PrefixListState struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// IPv4 Prefix List
	Entries []PolicyObjectIpv4PrefixListEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
	// The version of the Policy_object
	Version *int `pulumi:"version"`
}

type PolicyObjectIpv4PrefixListState struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// IPv4 Prefix List
	Entries PolicyObjectIpv4PrefixListEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
	// The version of the Policy_object
	Version pulumi.IntPtrInput
}

func (PolicyObjectIpv4PrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectIpv4PrefixListState)(nil)).Elem()
}

type policyObjectIpv4PrefixListArgs struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// IPv4 Prefix List
	Entries []PolicyObjectIpv4PrefixListEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyObjectIpv4PrefixList resource.
type PolicyObjectIpv4PrefixListArgs struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// IPv4 Prefix List
	Entries PolicyObjectIpv4PrefixListEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
}

func (PolicyObjectIpv4PrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectIpv4PrefixListArgs)(nil)).Elem()
}

type PolicyObjectIpv4PrefixListInput interface {
	pulumi.Input

	ToPolicyObjectIpv4PrefixListOutput() PolicyObjectIpv4PrefixListOutput
	ToPolicyObjectIpv4PrefixListOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListOutput
}

func (*PolicyObjectIpv4PrefixList) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectIpv4PrefixList)(nil)).Elem()
}

func (i *PolicyObjectIpv4PrefixList) ToPolicyObjectIpv4PrefixListOutput() PolicyObjectIpv4PrefixListOutput {
	return i.ToPolicyObjectIpv4PrefixListOutputWithContext(context.Background())
}

func (i *PolicyObjectIpv4PrefixList) ToPolicyObjectIpv4PrefixListOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectIpv4PrefixListOutput)
}

// PolicyObjectIpv4PrefixListArrayInput is an input type that accepts PolicyObjectIpv4PrefixListArray and PolicyObjectIpv4PrefixListArrayOutput values.
// You can construct a concrete instance of `PolicyObjectIpv4PrefixListArrayInput` via:
//
//	PolicyObjectIpv4PrefixListArray{ PolicyObjectIpv4PrefixListArgs{...} }
type PolicyObjectIpv4PrefixListArrayInput interface {
	pulumi.Input

	ToPolicyObjectIpv4PrefixListArrayOutput() PolicyObjectIpv4PrefixListArrayOutput
	ToPolicyObjectIpv4PrefixListArrayOutputWithContext(context.Context) PolicyObjectIpv4PrefixListArrayOutput
}

type PolicyObjectIpv4PrefixListArray []PolicyObjectIpv4PrefixListInput

func (PolicyObjectIpv4PrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectIpv4PrefixList)(nil)).Elem()
}

func (i PolicyObjectIpv4PrefixListArray) ToPolicyObjectIpv4PrefixListArrayOutput() PolicyObjectIpv4PrefixListArrayOutput {
	return i.ToPolicyObjectIpv4PrefixListArrayOutputWithContext(context.Background())
}

func (i PolicyObjectIpv4PrefixListArray) ToPolicyObjectIpv4PrefixListArrayOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectIpv4PrefixListArrayOutput)
}

// PolicyObjectIpv4PrefixListMapInput is an input type that accepts PolicyObjectIpv4PrefixListMap and PolicyObjectIpv4PrefixListMapOutput values.
// You can construct a concrete instance of `PolicyObjectIpv4PrefixListMapInput` via:
//
//	PolicyObjectIpv4PrefixListMap{ "key": PolicyObjectIpv4PrefixListArgs{...} }
type PolicyObjectIpv4PrefixListMapInput interface {
	pulumi.Input

	ToPolicyObjectIpv4PrefixListMapOutput() PolicyObjectIpv4PrefixListMapOutput
	ToPolicyObjectIpv4PrefixListMapOutputWithContext(context.Context) PolicyObjectIpv4PrefixListMapOutput
}

type PolicyObjectIpv4PrefixListMap map[string]PolicyObjectIpv4PrefixListInput

func (PolicyObjectIpv4PrefixListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectIpv4PrefixList)(nil)).Elem()
}

func (i PolicyObjectIpv4PrefixListMap) ToPolicyObjectIpv4PrefixListMapOutput() PolicyObjectIpv4PrefixListMapOutput {
	return i.ToPolicyObjectIpv4PrefixListMapOutputWithContext(context.Background())
}

func (i PolicyObjectIpv4PrefixListMap) ToPolicyObjectIpv4PrefixListMapOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectIpv4PrefixListMapOutput)
}

type PolicyObjectIpv4PrefixListOutput struct{ *pulumi.OutputState }

func (PolicyObjectIpv4PrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectIpv4PrefixList)(nil)).Elem()
}

func (o PolicyObjectIpv4PrefixListOutput) ToPolicyObjectIpv4PrefixListOutput() PolicyObjectIpv4PrefixListOutput {
	return o
}

func (o PolicyObjectIpv4PrefixListOutput) ToPolicyObjectIpv4PrefixListOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListOutput {
	return o
}

// The description of the Policy_object
func (o PolicyObjectIpv4PrefixListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyObjectIpv4PrefixList) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IPv4 Prefix List
func (o PolicyObjectIpv4PrefixListOutput) Entries() PolicyObjectIpv4PrefixListEntryArrayOutput {
	return o.ApplyT(func(v *PolicyObjectIpv4PrefixList) PolicyObjectIpv4PrefixListEntryArrayOutput { return v.Entries }).(PolicyObjectIpv4PrefixListEntryArrayOutput)
}

// Feature Profile ID
func (o PolicyObjectIpv4PrefixListOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectIpv4PrefixList) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Policy_object
func (o PolicyObjectIpv4PrefixListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectIpv4PrefixList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the Policy_object
func (o PolicyObjectIpv4PrefixListOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyObjectIpv4PrefixList) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type PolicyObjectIpv4PrefixListArrayOutput struct{ *pulumi.OutputState }

func (PolicyObjectIpv4PrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectIpv4PrefixList)(nil)).Elem()
}

func (o PolicyObjectIpv4PrefixListArrayOutput) ToPolicyObjectIpv4PrefixListArrayOutput() PolicyObjectIpv4PrefixListArrayOutput {
	return o
}

func (o PolicyObjectIpv4PrefixListArrayOutput) ToPolicyObjectIpv4PrefixListArrayOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListArrayOutput {
	return o
}

func (o PolicyObjectIpv4PrefixListArrayOutput) Index(i pulumi.IntInput) PolicyObjectIpv4PrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyObjectIpv4PrefixList {
		return vs[0].([]*PolicyObjectIpv4PrefixList)[vs[1].(int)]
	}).(PolicyObjectIpv4PrefixListOutput)
}

type PolicyObjectIpv4PrefixListMapOutput struct{ *pulumi.OutputState }

func (PolicyObjectIpv4PrefixListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectIpv4PrefixList)(nil)).Elem()
}

func (o PolicyObjectIpv4PrefixListMapOutput) ToPolicyObjectIpv4PrefixListMapOutput() PolicyObjectIpv4PrefixListMapOutput {
	return o
}

func (o PolicyObjectIpv4PrefixListMapOutput) ToPolicyObjectIpv4PrefixListMapOutputWithContext(ctx context.Context) PolicyObjectIpv4PrefixListMapOutput {
	return o
}

func (o PolicyObjectIpv4PrefixListMapOutput) MapIndex(k pulumi.StringInput) PolicyObjectIpv4PrefixListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyObjectIpv4PrefixList {
		return vs[0].(map[string]*PolicyObjectIpv4PrefixList)[vs[1].(string)]
	}).(PolicyObjectIpv4PrefixListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectIpv4PrefixListInput)(nil)).Elem(), &PolicyObjectIpv4PrefixList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectIpv4PrefixListArrayInput)(nil)).Elem(), PolicyObjectIpv4PrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectIpv4PrefixListMapInput)(nil)).Elem(), PolicyObjectIpv4PrefixListMap{})
	pulumi.RegisterOutputType(PolicyObjectIpv4PrefixListOutput{})
	pulumi.RegisterOutputType(PolicyObjectIpv4PrefixListArrayOutput{})
	pulumi.RegisterOutputType(PolicyObjectIpv4PrefixListMapOutput{})
}
