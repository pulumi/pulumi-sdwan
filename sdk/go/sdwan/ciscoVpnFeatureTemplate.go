// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco VPN feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoVpnFeatureTemplate struct {
	pulumi.CustomResourceState

	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Static DNS mapping
	DnsHosts CiscoVpnFeatureTemplateDnsHostArrayOutput `pulumi:"dnsHosts"`
	// DNS
	DnsIpv4Servers CiscoVpnFeatureTemplateDnsIpv4ServerArrayOutput `pulumi:"dnsIpv4Servers"`
	// DNS
	DnsIpv6Servers CiscoVpnFeatureTemplateDnsIpv6ServerArrayOutput `pulumi:"dnsIpv6Servers"`
	// Optional packet fields for ECMP keying - Default value: `false`
	EnhanceEcmpKeying pulumi.BoolPtrOutput `pulumi:"enhanceEcmpKeying"`
	// Variable name
	EnhanceEcmpKeyingVariable pulumi.StringPtrOutput `pulumi:"enhanceEcmpKeyingVariable"`
	// Configure routes pointing to a GRE tunnel
	Ipv4StaticGreRoutes CiscoVpnFeatureTemplateIpv4StaticGreRouteArrayOutput `pulumi:"ipv4StaticGreRoutes"`
	// Configure routes pointing to a IPSEC tunnel
	Ipv4StaticIpsecRoutes CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayOutput `pulumi:"ipv4StaticIpsecRoutes"`
	// Configure IPv4 Static Routes
	Ipv4StaticRoutes CiscoVpnFeatureTemplateIpv4StaticRouteArrayOutput `pulumi:"ipv4StaticRoutes"`
	// Configure IPv4 Static Service Routes
	Ipv4StaticServiceRoutes CiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayOutput `pulumi:"ipv4StaticServiceRoutes"`
	// Configure IPv6 Static Routes
	Ipv6StaticRoutes CiscoVpnFeatureTemplateIpv6StaticRouteArrayOutput `pulumi:"ipv6StaticRoutes"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// Set NAT64 v4 pool range
	Nat64Pools CiscoVpnFeatureTemplateNat64PoolArrayOutput `pulumi:"nat64Pools"`
	// Configure NAT Pool entries
	NatPools CiscoVpnFeatureTemplateNatPoolArrayOutput `pulumi:"natPools"`
	// omp-admin-distance-ipv4 - Range: `1`-`255`
	OmpAdminDistanceIpv4 pulumi.IntPtrOutput `pulumi:"ompAdminDistanceIpv4"`
	// Variable name
	OmpAdminDistanceIpv4Variable pulumi.StringPtrOutput `pulumi:"ompAdminDistanceIpv4Variable"`
	// omp-admin-distance-ipv6 - Range: `1`-`255`
	OmpAdminDistanceIpv6 pulumi.IntPtrOutput `pulumi:"ompAdminDistanceIpv6"`
	// Variable name
	OmpAdminDistanceIpv6Variable pulumi.StringPtrOutput `pulumi:"ompAdminDistanceIpv6Variable"`
	// Advertise routes to OMP
	OmpAdvertiseIpv4Routes CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayOutput `pulumi:"ompAdvertiseIpv4Routes"`
	// Advertise routes to OMP
	OmpAdvertiseIpv6Routes CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayOutput `pulumi:"ompAdvertiseIpv6Routes"`
	// Org Name selected
	OrganizationName pulumi.StringPtrOutput `pulumi:"organizationName"`
	// Configure Port Forward entries
	PortForwardRules CiscoVpnFeatureTemplatePortForwardRuleArrayOutput `pulumi:"portForwardRules"`
	// Enable route leaking to Global VPN from this Service VPN
	RouteGlobalExports CiscoVpnFeatureTemplateRouteGlobalExportArrayOutput `pulumi:"routeGlobalExports"`
	// Enable route leaking from Global VPN to this Service VPN
	RouteGlobalImports CiscoVpnFeatureTemplateRouteGlobalImportArrayOutput `pulumi:"routeGlobalImports"`
	// Enable route leak from Service VPN to current VPN
	RouteVpnImports CiscoVpnFeatureTemplateRouteVpnImportArrayOutput `pulumi:"routeVpnImports"`
	// Configure services
	Services CiscoVpnFeatureTemplateServiceArrayOutput `pulumi:"services"`
	// Configure static NAT entries
	StaticNatRules CiscoVpnFeatureTemplateStaticNatRuleArrayOutput `pulumi:"staticNatRules"`
	// Configure static NAT Subnet entries
	StaticNatSubnetRules CiscoVpnFeatureTemplateStaticNatSubnetRuleArrayOutput `pulumi:"staticNatSubnetRules"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// Tenant VPN - Range: `0`-`65527` - Default value: `0`
	TenantVpnId pulumi.IntPtrOutput `pulumi:"tenantVpnId"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
	// List of VPN instances - Range: `0`-`65527` - Default value: `0`
	VpnId pulumi.IntPtrOutput `pulumi:"vpnId"`
	// Name
	VpnName pulumi.StringPtrOutput `pulumi:"vpnName"`
	// Variable name
	VpnNameVariable pulumi.StringPtrOutput `pulumi:"vpnNameVariable"`
}

// NewCiscoVpnFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoVpnFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoVpnFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoVpnFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoVpnFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoVpnFeatureTemplate gets an existing CiscoVpnFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoVpnFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoVpnFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoVpnFeatureTemplate, error) {
	var resource CiscoVpnFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoVpnFeatureTemplate:CiscoVpnFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoVpnFeatureTemplate resources.
type ciscoVpnFeatureTemplateState struct {
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Static DNS mapping
	DnsHosts []CiscoVpnFeatureTemplateDnsHost `pulumi:"dnsHosts"`
	// DNS
	DnsIpv4Servers []CiscoVpnFeatureTemplateDnsIpv4Server `pulumi:"dnsIpv4Servers"`
	// DNS
	DnsIpv6Servers []CiscoVpnFeatureTemplateDnsIpv6Server `pulumi:"dnsIpv6Servers"`
	// Optional packet fields for ECMP keying - Default value: `false`
	EnhanceEcmpKeying *bool `pulumi:"enhanceEcmpKeying"`
	// Variable name
	EnhanceEcmpKeyingVariable *string `pulumi:"enhanceEcmpKeyingVariable"`
	// Configure routes pointing to a GRE tunnel
	Ipv4StaticGreRoutes []CiscoVpnFeatureTemplateIpv4StaticGreRoute `pulumi:"ipv4StaticGreRoutes"`
	// Configure routes pointing to a IPSEC tunnel
	Ipv4StaticIpsecRoutes []CiscoVpnFeatureTemplateIpv4StaticIpsecRoute `pulumi:"ipv4StaticIpsecRoutes"`
	// Configure IPv4 Static Routes
	Ipv4StaticRoutes []CiscoVpnFeatureTemplateIpv4StaticRoute `pulumi:"ipv4StaticRoutes"`
	// Configure IPv4 Static Service Routes
	Ipv4StaticServiceRoutes []CiscoVpnFeatureTemplateIpv4StaticServiceRoute `pulumi:"ipv4StaticServiceRoutes"`
	// Configure IPv6 Static Routes
	Ipv6StaticRoutes []CiscoVpnFeatureTemplateIpv6StaticRoute `pulumi:"ipv6StaticRoutes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set NAT64 v4 pool range
	Nat64Pools []CiscoVpnFeatureTemplateNat64Pool `pulumi:"nat64Pools"`
	// Configure NAT Pool entries
	NatPools []CiscoVpnFeatureTemplateNatPool `pulumi:"natPools"`
	// omp-admin-distance-ipv4 - Range: `1`-`255`
	OmpAdminDistanceIpv4 *int `pulumi:"ompAdminDistanceIpv4"`
	// Variable name
	OmpAdminDistanceIpv4Variable *string `pulumi:"ompAdminDistanceIpv4Variable"`
	// omp-admin-distance-ipv6 - Range: `1`-`255`
	OmpAdminDistanceIpv6 *int `pulumi:"ompAdminDistanceIpv6"`
	// Variable name
	OmpAdminDistanceIpv6Variable *string `pulumi:"ompAdminDistanceIpv6Variable"`
	// Advertise routes to OMP
	OmpAdvertiseIpv4Routes []CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route `pulumi:"ompAdvertiseIpv4Routes"`
	// Advertise routes to OMP
	OmpAdvertiseIpv6Routes []CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route `pulumi:"ompAdvertiseIpv6Routes"`
	// Org Name selected
	OrganizationName *string `pulumi:"organizationName"`
	// Configure Port Forward entries
	PortForwardRules []CiscoVpnFeatureTemplatePortForwardRule `pulumi:"portForwardRules"`
	// Enable route leaking to Global VPN from this Service VPN
	RouteGlobalExports []CiscoVpnFeatureTemplateRouteGlobalExport `pulumi:"routeGlobalExports"`
	// Enable route leaking from Global VPN to this Service VPN
	RouteGlobalImports []CiscoVpnFeatureTemplateRouteGlobalImport `pulumi:"routeGlobalImports"`
	// Enable route leak from Service VPN to current VPN
	RouteVpnImports []CiscoVpnFeatureTemplateRouteVpnImport `pulumi:"routeVpnImports"`
	// Configure services
	Services []CiscoVpnFeatureTemplateService `pulumi:"services"`
	// Configure static NAT entries
	StaticNatRules []CiscoVpnFeatureTemplateStaticNatRule `pulumi:"staticNatRules"`
	// Configure static NAT Subnet entries
	StaticNatSubnetRules []CiscoVpnFeatureTemplateStaticNatSubnetRule `pulumi:"staticNatSubnetRules"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// Tenant VPN - Range: `0`-`65527` - Default value: `0`
	TenantVpnId *int `pulumi:"tenantVpnId"`
	// The version of the feature template
	Version *int `pulumi:"version"`
	// List of VPN instances - Range: `0`-`65527` - Default value: `0`
	VpnId *int `pulumi:"vpnId"`
	// Name
	VpnName *string `pulumi:"vpnName"`
	// Variable name
	VpnNameVariable *string `pulumi:"vpnNameVariable"`
}

type CiscoVpnFeatureTemplateState struct {
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Static DNS mapping
	DnsHosts CiscoVpnFeatureTemplateDnsHostArrayInput
	// DNS
	DnsIpv4Servers CiscoVpnFeatureTemplateDnsIpv4ServerArrayInput
	// DNS
	DnsIpv6Servers CiscoVpnFeatureTemplateDnsIpv6ServerArrayInput
	// Optional packet fields for ECMP keying - Default value: `false`
	EnhanceEcmpKeying pulumi.BoolPtrInput
	// Variable name
	EnhanceEcmpKeyingVariable pulumi.StringPtrInput
	// Configure routes pointing to a GRE tunnel
	Ipv4StaticGreRoutes CiscoVpnFeatureTemplateIpv4StaticGreRouteArrayInput
	// Configure routes pointing to a IPSEC tunnel
	Ipv4StaticIpsecRoutes CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayInput
	// Configure IPv4 Static Routes
	Ipv4StaticRoutes CiscoVpnFeatureTemplateIpv4StaticRouteArrayInput
	// Configure IPv4 Static Service Routes
	Ipv4StaticServiceRoutes CiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayInput
	// Configure IPv6 Static Routes
	Ipv6StaticRoutes CiscoVpnFeatureTemplateIpv6StaticRouteArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set NAT64 v4 pool range
	Nat64Pools CiscoVpnFeatureTemplateNat64PoolArrayInput
	// Configure NAT Pool entries
	NatPools CiscoVpnFeatureTemplateNatPoolArrayInput
	// omp-admin-distance-ipv4 - Range: `1`-`255`
	OmpAdminDistanceIpv4 pulumi.IntPtrInput
	// Variable name
	OmpAdminDistanceIpv4Variable pulumi.StringPtrInput
	// omp-admin-distance-ipv6 - Range: `1`-`255`
	OmpAdminDistanceIpv6 pulumi.IntPtrInput
	// Variable name
	OmpAdminDistanceIpv6Variable pulumi.StringPtrInput
	// Advertise routes to OMP
	OmpAdvertiseIpv4Routes CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayInput
	// Advertise routes to OMP
	OmpAdvertiseIpv6Routes CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayInput
	// Org Name selected
	OrganizationName pulumi.StringPtrInput
	// Configure Port Forward entries
	PortForwardRules CiscoVpnFeatureTemplatePortForwardRuleArrayInput
	// Enable route leaking to Global VPN from this Service VPN
	RouteGlobalExports CiscoVpnFeatureTemplateRouteGlobalExportArrayInput
	// Enable route leaking from Global VPN to this Service VPN
	RouteGlobalImports CiscoVpnFeatureTemplateRouteGlobalImportArrayInput
	// Enable route leak from Service VPN to current VPN
	RouteVpnImports CiscoVpnFeatureTemplateRouteVpnImportArrayInput
	// Configure services
	Services CiscoVpnFeatureTemplateServiceArrayInput
	// Configure static NAT entries
	StaticNatRules CiscoVpnFeatureTemplateStaticNatRuleArrayInput
	// Configure static NAT Subnet entries
	StaticNatSubnetRules CiscoVpnFeatureTemplateStaticNatSubnetRuleArrayInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// Tenant VPN - Range: `0`-`65527` - Default value: `0`
	TenantVpnId pulumi.IntPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
	// List of VPN instances - Range: `0`-`65527` - Default value: `0`
	VpnId pulumi.IntPtrInput
	// Name
	VpnName pulumi.StringPtrInput
	// Variable name
	VpnNameVariable pulumi.StringPtrInput
}

func (CiscoVpnFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoVpnFeatureTemplateState)(nil)).Elem()
}

type ciscoVpnFeatureTemplateArgs struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Static DNS mapping
	DnsHosts []CiscoVpnFeatureTemplateDnsHost `pulumi:"dnsHosts"`
	// DNS
	DnsIpv4Servers []CiscoVpnFeatureTemplateDnsIpv4Server `pulumi:"dnsIpv4Servers"`
	// DNS
	DnsIpv6Servers []CiscoVpnFeatureTemplateDnsIpv6Server `pulumi:"dnsIpv6Servers"`
	// Optional packet fields for ECMP keying - Default value: `false`
	EnhanceEcmpKeying *bool `pulumi:"enhanceEcmpKeying"`
	// Variable name
	EnhanceEcmpKeyingVariable *string `pulumi:"enhanceEcmpKeyingVariable"`
	// Configure routes pointing to a GRE tunnel
	Ipv4StaticGreRoutes []CiscoVpnFeatureTemplateIpv4StaticGreRoute `pulumi:"ipv4StaticGreRoutes"`
	// Configure routes pointing to a IPSEC tunnel
	Ipv4StaticIpsecRoutes []CiscoVpnFeatureTemplateIpv4StaticIpsecRoute `pulumi:"ipv4StaticIpsecRoutes"`
	// Configure IPv4 Static Routes
	Ipv4StaticRoutes []CiscoVpnFeatureTemplateIpv4StaticRoute `pulumi:"ipv4StaticRoutes"`
	// Configure IPv4 Static Service Routes
	Ipv4StaticServiceRoutes []CiscoVpnFeatureTemplateIpv4StaticServiceRoute `pulumi:"ipv4StaticServiceRoutes"`
	// Configure IPv6 Static Routes
	Ipv6StaticRoutes []CiscoVpnFeatureTemplateIpv6StaticRoute `pulumi:"ipv6StaticRoutes"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// Set NAT64 v4 pool range
	Nat64Pools []CiscoVpnFeatureTemplateNat64Pool `pulumi:"nat64Pools"`
	// Configure NAT Pool entries
	NatPools []CiscoVpnFeatureTemplateNatPool `pulumi:"natPools"`
	// omp-admin-distance-ipv4 - Range: `1`-`255`
	OmpAdminDistanceIpv4 *int `pulumi:"ompAdminDistanceIpv4"`
	// Variable name
	OmpAdminDistanceIpv4Variable *string `pulumi:"ompAdminDistanceIpv4Variable"`
	// omp-admin-distance-ipv6 - Range: `1`-`255`
	OmpAdminDistanceIpv6 *int `pulumi:"ompAdminDistanceIpv6"`
	// Variable name
	OmpAdminDistanceIpv6Variable *string `pulumi:"ompAdminDistanceIpv6Variable"`
	// Advertise routes to OMP
	OmpAdvertiseIpv4Routes []CiscoVpnFeatureTemplateOmpAdvertiseIpv4Route `pulumi:"ompAdvertiseIpv4Routes"`
	// Advertise routes to OMP
	OmpAdvertiseIpv6Routes []CiscoVpnFeatureTemplateOmpAdvertiseIpv6Route `pulumi:"ompAdvertiseIpv6Routes"`
	// Org Name selected
	OrganizationName *string `pulumi:"organizationName"`
	// Configure Port Forward entries
	PortForwardRules []CiscoVpnFeatureTemplatePortForwardRule `pulumi:"portForwardRules"`
	// Enable route leaking to Global VPN from this Service VPN
	RouteGlobalExports []CiscoVpnFeatureTemplateRouteGlobalExport `pulumi:"routeGlobalExports"`
	// Enable route leaking from Global VPN to this Service VPN
	RouteGlobalImports []CiscoVpnFeatureTemplateRouteGlobalImport `pulumi:"routeGlobalImports"`
	// Enable route leak from Service VPN to current VPN
	RouteVpnImports []CiscoVpnFeatureTemplateRouteVpnImport `pulumi:"routeVpnImports"`
	// Configure services
	Services []CiscoVpnFeatureTemplateService `pulumi:"services"`
	// Configure static NAT entries
	StaticNatRules []CiscoVpnFeatureTemplateStaticNatRule `pulumi:"staticNatRules"`
	// Configure static NAT Subnet entries
	StaticNatSubnetRules []CiscoVpnFeatureTemplateStaticNatSubnetRule `pulumi:"staticNatSubnetRules"`
	// Tenant VPN - Range: `0`-`65527` - Default value: `0`
	TenantVpnId *int `pulumi:"tenantVpnId"`
	// List of VPN instances - Range: `0`-`65527` - Default value: `0`
	VpnId *int `pulumi:"vpnId"`
	// Name
	VpnName *string `pulumi:"vpnName"`
	// Variable name
	VpnNameVariable *string `pulumi:"vpnNameVariable"`
}

// The set of arguments for constructing a CiscoVpnFeatureTemplate resource.
type CiscoVpnFeatureTemplateArgs struct {
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Static DNS mapping
	DnsHosts CiscoVpnFeatureTemplateDnsHostArrayInput
	// DNS
	DnsIpv4Servers CiscoVpnFeatureTemplateDnsIpv4ServerArrayInput
	// DNS
	DnsIpv6Servers CiscoVpnFeatureTemplateDnsIpv6ServerArrayInput
	// Optional packet fields for ECMP keying - Default value: `false`
	EnhanceEcmpKeying pulumi.BoolPtrInput
	// Variable name
	EnhanceEcmpKeyingVariable pulumi.StringPtrInput
	// Configure routes pointing to a GRE tunnel
	Ipv4StaticGreRoutes CiscoVpnFeatureTemplateIpv4StaticGreRouteArrayInput
	// Configure routes pointing to a IPSEC tunnel
	Ipv4StaticIpsecRoutes CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayInput
	// Configure IPv4 Static Routes
	Ipv4StaticRoutes CiscoVpnFeatureTemplateIpv4StaticRouteArrayInput
	// Configure IPv4 Static Service Routes
	Ipv4StaticServiceRoutes CiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayInput
	// Configure IPv6 Static Routes
	Ipv6StaticRoutes CiscoVpnFeatureTemplateIpv6StaticRouteArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// Set NAT64 v4 pool range
	Nat64Pools CiscoVpnFeatureTemplateNat64PoolArrayInput
	// Configure NAT Pool entries
	NatPools CiscoVpnFeatureTemplateNatPoolArrayInput
	// omp-admin-distance-ipv4 - Range: `1`-`255`
	OmpAdminDistanceIpv4 pulumi.IntPtrInput
	// Variable name
	OmpAdminDistanceIpv4Variable pulumi.StringPtrInput
	// omp-admin-distance-ipv6 - Range: `1`-`255`
	OmpAdminDistanceIpv6 pulumi.IntPtrInput
	// Variable name
	OmpAdminDistanceIpv6Variable pulumi.StringPtrInput
	// Advertise routes to OMP
	OmpAdvertiseIpv4Routes CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayInput
	// Advertise routes to OMP
	OmpAdvertiseIpv6Routes CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayInput
	// Org Name selected
	OrganizationName pulumi.StringPtrInput
	// Configure Port Forward entries
	PortForwardRules CiscoVpnFeatureTemplatePortForwardRuleArrayInput
	// Enable route leaking to Global VPN from this Service VPN
	RouteGlobalExports CiscoVpnFeatureTemplateRouteGlobalExportArrayInput
	// Enable route leaking from Global VPN to this Service VPN
	RouteGlobalImports CiscoVpnFeatureTemplateRouteGlobalImportArrayInput
	// Enable route leak from Service VPN to current VPN
	RouteVpnImports CiscoVpnFeatureTemplateRouteVpnImportArrayInput
	// Configure services
	Services CiscoVpnFeatureTemplateServiceArrayInput
	// Configure static NAT entries
	StaticNatRules CiscoVpnFeatureTemplateStaticNatRuleArrayInput
	// Configure static NAT Subnet entries
	StaticNatSubnetRules CiscoVpnFeatureTemplateStaticNatSubnetRuleArrayInput
	// Tenant VPN - Range: `0`-`65527` - Default value: `0`
	TenantVpnId pulumi.IntPtrInput
	// List of VPN instances - Range: `0`-`65527` - Default value: `0`
	VpnId pulumi.IntPtrInput
	// Name
	VpnName pulumi.StringPtrInput
	// Variable name
	VpnNameVariable pulumi.StringPtrInput
}

func (CiscoVpnFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoVpnFeatureTemplateArgs)(nil)).Elem()
}

type CiscoVpnFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoVpnFeatureTemplateOutput() CiscoVpnFeatureTemplateOutput
	ToCiscoVpnFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateOutput
}

func (*CiscoVpnFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoVpnFeatureTemplate)(nil)).Elem()
}

func (i *CiscoVpnFeatureTemplate) ToCiscoVpnFeatureTemplateOutput() CiscoVpnFeatureTemplateOutput {
	return i.ToCiscoVpnFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoVpnFeatureTemplate) ToCiscoVpnFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnFeatureTemplateOutput)
}

// CiscoVpnFeatureTemplateArrayInput is an input type that accepts CiscoVpnFeatureTemplateArray and CiscoVpnFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoVpnFeatureTemplateArrayInput` via:
//
//	CiscoVpnFeatureTemplateArray{ CiscoVpnFeatureTemplateArgs{...} }
type CiscoVpnFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoVpnFeatureTemplateArrayOutput() CiscoVpnFeatureTemplateArrayOutput
	ToCiscoVpnFeatureTemplateArrayOutputWithContext(context.Context) CiscoVpnFeatureTemplateArrayOutput
}

type CiscoVpnFeatureTemplateArray []CiscoVpnFeatureTemplateInput

func (CiscoVpnFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoVpnFeatureTemplate)(nil)).Elem()
}

func (i CiscoVpnFeatureTemplateArray) ToCiscoVpnFeatureTemplateArrayOutput() CiscoVpnFeatureTemplateArrayOutput {
	return i.ToCiscoVpnFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoVpnFeatureTemplateArray) ToCiscoVpnFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnFeatureTemplateArrayOutput)
}

// CiscoVpnFeatureTemplateMapInput is an input type that accepts CiscoVpnFeatureTemplateMap and CiscoVpnFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoVpnFeatureTemplateMapInput` via:
//
//	CiscoVpnFeatureTemplateMap{ "key": CiscoVpnFeatureTemplateArgs{...} }
type CiscoVpnFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoVpnFeatureTemplateMapOutput() CiscoVpnFeatureTemplateMapOutput
	ToCiscoVpnFeatureTemplateMapOutputWithContext(context.Context) CiscoVpnFeatureTemplateMapOutput
}

type CiscoVpnFeatureTemplateMap map[string]CiscoVpnFeatureTemplateInput

func (CiscoVpnFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoVpnFeatureTemplate)(nil)).Elem()
}

func (i CiscoVpnFeatureTemplateMap) ToCiscoVpnFeatureTemplateMapOutput() CiscoVpnFeatureTemplateMapOutput {
	return i.ToCiscoVpnFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoVpnFeatureTemplateMap) ToCiscoVpnFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoVpnFeatureTemplateMapOutput)
}

type CiscoVpnFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoVpnFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoVpnFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnFeatureTemplateOutput) ToCiscoVpnFeatureTemplateOutput() CiscoVpnFeatureTemplateOutput {
	return o
}

func (o CiscoVpnFeatureTemplateOutput) ToCiscoVpnFeatureTemplateOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateOutput {
	return o
}

// The description of the feature template
func (o CiscoVpnFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoVpnFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Static DNS mapping
func (o CiscoVpnFeatureTemplateOutput) DnsHosts() CiscoVpnFeatureTemplateDnsHostArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateDnsHostArrayOutput { return v.DnsHosts }).(CiscoVpnFeatureTemplateDnsHostArrayOutput)
}

// DNS
func (o CiscoVpnFeatureTemplateOutput) DnsIpv4Servers() CiscoVpnFeatureTemplateDnsIpv4ServerArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateDnsIpv4ServerArrayOutput {
		return v.DnsIpv4Servers
	}).(CiscoVpnFeatureTemplateDnsIpv4ServerArrayOutput)
}

// DNS
func (o CiscoVpnFeatureTemplateOutput) DnsIpv6Servers() CiscoVpnFeatureTemplateDnsIpv6ServerArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateDnsIpv6ServerArrayOutput {
		return v.DnsIpv6Servers
	}).(CiscoVpnFeatureTemplateDnsIpv6ServerArrayOutput)
}

// Optional packet fields for ECMP keying - Default value: `false`
func (o CiscoVpnFeatureTemplateOutput) EnhanceEcmpKeying() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.BoolPtrOutput { return v.EnhanceEcmpKeying }).(pulumi.BoolPtrOutput)
}

// Variable name
func (o CiscoVpnFeatureTemplateOutput) EnhanceEcmpKeyingVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringPtrOutput { return v.EnhanceEcmpKeyingVariable }).(pulumi.StringPtrOutput)
}

// Configure routes pointing to a GRE tunnel
func (o CiscoVpnFeatureTemplateOutput) Ipv4StaticGreRoutes() CiscoVpnFeatureTemplateIpv4StaticGreRouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateIpv4StaticGreRouteArrayOutput {
		return v.Ipv4StaticGreRoutes
	}).(CiscoVpnFeatureTemplateIpv4StaticGreRouteArrayOutput)
}

// Configure routes pointing to a IPSEC tunnel
func (o CiscoVpnFeatureTemplateOutput) Ipv4StaticIpsecRoutes() CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayOutput {
		return v.Ipv4StaticIpsecRoutes
	}).(CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArrayOutput)
}

// Configure IPv4 Static Routes
func (o CiscoVpnFeatureTemplateOutput) Ipv4StaticRoutes() CiscoVpnFeatureTemplateIpv4StaticRouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateIpv4StaticRouteArrayOutput {
		return v.Ipv4StaticRoutes
	}).(CiscoVpnFeatureTemplateIpv4StaticRouteArrayOutput)
}

// Configure IPv4 Static Service Routes
func (o CiscoVpnFeatureTemplateOutput) Ipv4StaticServiceRoutes() CiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayOutput {
		return v.Ipv4StaticServiceRoutes
	}).(CiscoVpnFeatureTemplateIpv4StaticServiceRouteArrayOutput)
}

// Configure IPv6 Static Routes
func (o CiscoVpnFeatureTemplateOutput) Ipv6StaticRoutes() CiscoVpnFeatureTemplateIpv6StaticRouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateIpv6StaticRouteArrayOutput {
		return v.Ipv6StaticRoutes
	}).(CiscoVpnFeatureTemplateIpv6StaticRouteArrayOutput)
}

// The name of the feature template
func (o CiscoVpnFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Set NAT64 v4 pool range
func (o CiscoVpnFeatureTemplateOutput) Nat64Pools() CiscoVpnFeatureTemplateNat64PoolArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateNat64PoolArrayOutput { return v.Nat64Pools }).(CiscoVpnFeatureTemplateNat64PoolArrayOutput)
}

// Configure NAT Pool entries
func (o CiscoVpnFeatureTemplateOutput) NatPools() CiscoVpnFeatureTemplateNatPoolArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateNatPoolArrayOutput { return v.NatPools }).(CiscoVpnFeatureTemplateNatPoolArrayOutput)
}

// omp-admin-distance-ipv4 - Range: `1`-`255`
func (o CiscoVpnFeatureTemplateOutput) OmpAdminDistanceIpv4() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.IntPtrOutput { return v.OmpAdminDistanceIpv4 }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnFeatureTemplateOutput) OmpAdminDistanceIpv4Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringPtrOutput { return v.OmpAdminDistanceIpv4Variable }).(pulumi.StringPtrOutput)
}

// omp-admin-distance-ipv6 - Range: `1`-`255`
func (o CiscoVpnFeatureTemplateOutput) OmpAdminDistanceIpv6() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.IntPtrOutput { return v.OmpAdminDistanceIpv6 }).(pulumi.IntPtrOutput)
}

// Variable name
func (o CiscoVpnFeatureTemplateOutput) OmpAdminDistanceIpv6Variable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringPtrOutput { return v.OmpAdminDistanceIpv6Variable }).(pulumi.StringPtrOutput)
}

// Advertise routes to OMP
func (o CiscoVpnFeatureTemplateOutput) OmpAdvertiseIpv4Routes() CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayOutput {
		return v.OmpAdvertiseIpv4Routes
	}).(CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArrayOutput)
}

// Advertise routes to OMP
func (o CiscoVpnFeatureTemplateOutput) OmpAdvertiseIpv6Routes() CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayOutput {
		return v.OmpAdvertiseIpv6Routes
	}).(CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArrayOutput)
}

// Org Name selected
func (o CiscoVpnFeatureTemplateOutput) OrganizationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringPtrOutput { return v.OrganizationName }).(pulumi.StringPtrOutput)
}

// Configure Port Forward entries
func (o CiscoVpnFeatureTemplateOutput) PortForwardRules() CiscoVpnFeatureTemplatePortForwardRuleArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplatePortForwardRuleArrayOutput {
		return v.PortForwardRules
	}).(CiscoVpnFeatureTemplatePortForwardRuleArrayOutput)
}

// Enable route leaking to Global VPN from this Service VPN
func (o CiscoVpnFeatureTemplateOutput) RouteGlobalExports() CiscoVpnFeatureTemplateRouteGlobalExportArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateRouteGlobalExportArrayOutput {
		return v.RouteGlobalExports
	}).(CiscoVpnFeatureTemplateRouteGlobalExportArrayOutput)
}

// Enable route leaking from Global VPN to this Service VPN
func (o CiscoVpnFeatureTemplateOutput) RouteGlobalImports() CiscoVpnFeatureTemplateRouteGlobalImportArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateRouteGlobalImportArrayOutput {
		return v.RouteGlobalImports
	}).(CiscoVpnFeatureTemplateRouteGlobalImportArrayOutput)
}

// Enable route leak from Service VPN to current VPN
func (o CiscoVpnFeatureTemplateOutput) RouteVpnImports() CiscoVpnFeatureTemplateRouteVpnImportArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateRouteVpnImportArrayOutput {
		return v.RouteVpnImports
	}).(CiscoVpnFeatureTemplateRouteVpnImportArrayOutput)
}

// Configure services
func (o CiscoVpnFeatureTemplateOutput) Services() CiscoVpnFeatureTemplateServiceArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateServiceArrayOutput { return v.Services }).(CiscoVpnFeatureTemplateServiceArrayOutput)
}

// Configure static NAT entries
func (o CiscoVpnFeatureTemplateOutput) StaticNatRules() CiscoVpnFeatureTemplateStaticNatRuleArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateStaticNatRuleArrayOutput {
		return v.StaticNatRules
	}).(CiscoVpnFeatureTemplateStaticNatRuleArrayOutput)
}

// Configure static NAT Subnet entries
func (o CiscoVpnFeatureTemplateOutput) StaticNatSubnetRules() CiscoVpnFeatureTemplateStaticNatSubnetRuleArrayOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) CiscoVpnFeatureTemplateStaticNatSubnetRuleArrayOutput {
		return v.StaticNatSubnetRules
	}).(CiscoVpnFeatureTemplateStaticNatSubnetRuleArrayOutput)
}

// The template type
func (o CiscoVpnFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// Tenant VPN - Range: `0`-`65527` - Default value: `0`
func (o CiscoVpnFeatureTemplateOutput) TenantVpnId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.IntPtrOutput { return v.TenantVpnId }).(pulumi.IntPtrOutput)
}

// The version of the feature template
func (o CiscoVpnFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

// List of VPN instances - Range: `0`-`65527` - Default value: `0`
func (o CiscoVpnFeatureTemplateOutput) VpnId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.IntPtrOutput { return v.VpnId }).(pulumi.IntPtrOutput)
}

// Name
func (o CiscoVpnFeatureTemplateOutput) VpnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringPtrOutput { return v.VpnName }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoVpnFeatureTemplateOutput) VpnNameVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoVpnFeatureTemplate) pulumi.StringPtrOutput { return v.VpnNameVariable }).(pulumi.StringPtrOutput)
}

type CiscoVpnFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoVpnFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoVpnFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnFeatureTemplateArrayOutput) ToCiscoVpnFeatureTemplateArrayOutput() CiscoVpnFeatureTemplateArrayOutput {
	return o
}

func (o CiscoVpnFeatureTemplateArrayOutput) ToCiscoVpnFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateArrayOutput {
	return o
}

func (o CiscoVpnFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoVpnFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoVpnFeatureTemplate {
		return vs[0].([]*CiscoVpnFeatureTemplate)[vs[1].(int)]
	}).(CiscoVpnFeatureTemplateOutput)
}

type CiscoVpnFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoVpnFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoVpnFeatureTemplate)(nil)).Elem()
}

func (o CiscoVpnFeatureTemplateMapOutput) ToCiscoVpnFeatureTemplateMapOutput() CiscoVpnFeatureTemplateMapOutput {
	return o
}

func (o CiscoVpnFeatureTemplateMapOutput) ToCiscoVpnFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoVpnFeatureTemplateMapOutput {
	return o
}

func (o CiscoVpnFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoVpnFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoVpnFeatureTemplate {
		return vs[0].(map[string]*CiscoVpnFeatureTemplate)[vs[1].(string)]
	}).(CiscoVpnFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnFeatureTemplateInput)(nil)).Elem(), &CiscoVpnFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnFeatureTemplateArrayInput)(nil)).Elem(), CiscoVpnFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoVpnFeatureTemplateMapInput)(nil)).Elem(), CiscoVpnFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoVpnFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoVpnFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoVpnFeatureTemplateMapOutput{})
}
