// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Policy Object Mirror Policy_object.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// Expected import identifier with the format: "policy_object_mirror_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/policyObjectMirror:PolicyObjectMirror example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type PolicyObjectMirror struct {
	pulumi.CustomResourceState

	// The description of the Policy_object
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Mirror List
	Entries PolicyObjectMirrorEntryArrayOutput `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the Policy_object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPolicyObjectMirror registers a new resource with the given unique name, arguments, and options.
func NewPolicyObjectMirror(ctx *pulumi.Context,
	name string, args *PolicyObjectMirrorArgs, opts ...pulumi.ResourceOption) (*PolicyObjectMirror, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyObjectMirror
	err := ctx.RegisterResource("sdwan:index/policyObjectMirror:PolicyObjectMirror", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyObjectMirror gets an existing PolicyObjectMirror resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyObjectMirror(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyObjectMirrorState, opts ...pulumi.ResourceOption) (*PolicyObjectMirror, error) {
	var resource PolicyObjectMirror
	err := ctx.ReadResource("sdwan:index/policyObjectMirror:PolicyObjectMirror", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyObjectMirror resources.
type policyObjectMirrorState struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// Mirror List
	Entries []PolicyObjectMirrorEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
	// The version of the Policy_object
	Version *int `pulumi:"version"`
}

type PolicyObjectMirrorState struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// Mirror List
	Entries PolicyObjectMirrorEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
	// The version of the Policy_object
	Version pulumi.IntPtrInput
}

func (PolicyObjectMirrorState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectMirrorState)(nil)).Elem()
}

type policyObjectMirrorArgs struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// Mirror List
	Entries []PolicyObjectMirrorEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyObjectMirror resource.
type PolicyObjectMirrorArgs struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// Mirror List
	Entries PolicyObjectMirrorEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
}

func (PolicyObjectMirrorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectMirrorArgs)(nil)).Elem()
}

type PolicyObjectMirrorInput interface {
	pulumi.Input

	ToPolicyObjectMirrorOutput() PolicyObjectMirrorOutput
	ToPolicyObjectMirrorOutputWithContext(ctx context.Context) PolicyObjectMirrorOutput
}

func (*PolicyObjectMirror) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectMirror)(nil)).Elem()
}

func (i *PolicyObjectMirror) ToPolicyObjectMirrorOutput() PolicyObjectMirrorOutput {
	return i.ToPolicyObjectMirrorOutputWithContext(context.Background())
}

func (i *PolicyObjectMirror) ToPolicyObjectMirrorOutputWithContext(ctx context.Context) PolicyObjectMirrorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectMirrorOutput)
}

// PolicyObjectMirrorArrayInput is an input type that accepts PolicyObjectMirrorArray and PolicyObjectMirrorArrayOutput values.
// You can construct a concrete instance of `PolicyObjectMirrorArrayInput` via:
//
//	PolicyObjectMirrorArray{ PolicyObjectMirrorArgs{...} }
type PolicyObjectMirrorArrayInput interface {
	pulumi.Input

	ToPolicyObjectMirrorArrayOutput() PolicyObjectMirrorArrayOutput
	ToPolicyObjectMirrorArrayOutputWithContext(context.Context) PolicyObjectMirrorArrayOutput
}

type PolicyObjectMirrorArray []PolicyObjectMirrorInput

func (PolicyObjectMirrorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectMirror)(nil)).Elem()
}

func (i PolicyObjectMirrorArray) ToPolicyObjectMirrorArrayOutput() PolicyObjectMirrorArrayOutput {
	return i.ToPolicyObjectMirrorArrayOutputWithContext(context.Background())
}

func (i PolicyObjectMirrorArray) ToPolicyObjectMirrorArrayOutputWithContext(ctx context.Context) PolicyObjectMirrorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectMirrorArrayOutput)
}

// PolicyObjectMirrorMapInput is an input type that accepts PolicyObjectMirrorMap and PolicyObjectMirrorMapOutput values.
// You can construct a concrete instance of `PolicyObjectMirrorMapInput` via:
//
//	PolicyObjectMirrorMap{ "key": PolicyObjectMirrorArgs{...} }
type PolicyObjectMirrorMapInput interface {
	pulumi.Input

	ToPolicyObjectMirrorMapOutput() PolicyObjectMirrorMapOutput
	ToPolicyObjectMirrorMapOutputWithContext(context.Context) PolicyObjectMirrorMapOutput
}

type PolicyObjectMirrorMap map[string]PolicyObjectMirrorInput

func (PolicyObjectMirrorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectMirror)(nil)).Elem()
}

func (i PolicyObjectMirrorMap) ToPolicyObjectMirrorMapOutput() PolicyObjectMirrorMapOutput {
	return i.ToPolicyObjectMirrorMapOutputWithContext(context.Background())
}

func (i PolicyObjectMirrorMap) ToPolicyObjectMirrorMapOutputWithContext(ctx context.Context) PolicyObjectMirrorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectMirrorMapOutput)
}

type PolicyObjectMirrorOutput struct{ *pulumi.OutputState }

func (PolicyObjectMirrorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectMirror)(nil)).Elem()
}

func (o PolicyObjectMirrorOutput) ToPolicyObjectMirrorOutput() PolicyObjectMirrorOutput {
	return o
}

func (o PolicyObjectMirrorOutput) ToPolicyObjectMirrorOutputWithContext(ctx context.Context) PolicyObjectMirrorOutput {
	return o
}

// The description of the Policy_object
func (o PolicyObjectMirrorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyObjectMirror) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Mirror List
func (o PolicyObjectMirrorOutput) Entries() PolicyObjectMirrorEntryArrayOutput {
	return o.ApplyT(func(v *PolicyObjectMirror) PolicyObjectMirrorEntryArrayOutput { return v.Entries }).(PolicyObjectMirrorEntryArrayOutput)
}

// Feature Profile ID
func (o PolicyObjectMirrorOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectMirror) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Policy_object
func (o PolicyObjectMirrorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectMirror) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the Policy_object
func (o PolicyObjectMirrorOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyObjectMirror) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type PolicyObjectMirrorArrayOutput struct{ *pulumi.OutputState }

func (PolicyObjectMirrorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectMirror)(nil)).Elem()
}

func (o PolicyObjectMirrorArrayOutput) ToPolicyObjectMirrorArrayOutput() PolicyObjectMirrorArrayOutput {
	return o
}

func (o PolicyObjectMirrorArrayOutput) ToPolicyObjectMirrorArrayOutputWithContext(ctx context.Context) PolicyObjectMirrorArrayOutput {
	return o
}

func (o PolicyObjectMirrorArrayOutput) Index(i pulumi.IntInput) PolicyObjectMirrorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyObjectMirror {
		return vs[0].([]*PolicyObjectMirror)[vs[1].(int)]
	}).(PolicyObjectMirrorOutput)
}

type PolicyObjectMirrorMapOutput struct{ *pulumi.OutputState }

func (PolicyObjectMirrorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectMirror)(nil)).Elem()
}

func (o PolicyObjectMirrorMapOutput) ToPolicyObjectMirrorMapOutput() PolicyObjectMirrorMapOutput {
	return o
}

func (o PolicyObjectMirrorMapOutput) ToPolicyObjectMirrorMapOutputWithContext(ctx context.Context) PolicyObjectMirrorMapOutput {
	return o
}

func (o PolicyObjectMirrorMapOutput) MapIndex(k pulumi.StringInput) PolicyObjectMirrorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyObjectMirror {
		return vs[0].(map[string]*PolicyObjectMirror)[vs[1].(string)]
	}).(PolicyObjectMirrorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectMirrorInput)(nil)).Elem(), &PolicyObjectMirror{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectMirrorArrayInput)(nil)).Elem(), PolicyObjectMirrorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectMirrorMapInput)(nil)).Elem(), PolicyObjectMirrorMap{})
	pulumi.RegisterOutputType(PolicyObjectMirrorOutput{})
	pulumi.RegisterOutputType(PolicyObjectMirrorArrayOutput{})
	pulumi.RegisterOutputType(PolicyObjectMirrorMapOutput{})
}
