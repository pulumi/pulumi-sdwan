// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Centralized Policy .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCentralizedPolicy(ctx, "example", &sdwan.CentralizedPolicyArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My description"),
//				Definitions: sdwan.CentralizedPolicyDefinitionArray{
//					&sdwan.CentralizedPolicyDefinitionArgs{
//						Id:   pulumi.String("2081c2f4-3f9f-4fee-8078-dcc8904e368d"),
//						Type: pulumi.String("data"),
//						Entries: sdwan.CentralizedPolicyDefinitionEntryArray{
//							&sdwan.CentralizedPolicyDefinitionEntryArgs{
//								SiteListIds: pulumi.StringArray{
//									pulumi.String("2081c2f4-3f9f-4fee-8078-dcc8904e368d"),
//								},
//								VpnListIds: pulumi.StringArray{
//									pulumi.String("7d0c2444-8743-4414-add0-866945ea9f70"),
//								},
//								Direction: pulumi.String("service"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/centralizedPolicy:CentralizedPolicy example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CentralizedPolicy struct {
	pulumi.CustomResourceState

	// List of policy definitions
	Definitions CentralizedPolicyDefinitionArrayOutput `pulumi:"definitions"`
	// The description of the centralized policy
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the centralized policy
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCentralizedPolicy registers a new resource with the given unique name, arguments, and options.
func NewCentralizedPolicy(ctx *pulumi.Context,
	name string, args *CentralizedPolicyArgs, opts ...pulumi.ResourceOption) (*CentralizedPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CentralizedPolicy
	err := ctx.RegisterResource("sdwan:index/centralizedPolicy:CentralizedPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCentralizedPolicy gets an existing CentralizedPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCentralizedPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CentralizedPolicyState, opts ...pulumi.ResourceOption) (*CentralizedPolicy, error) {
	var resource CentralizedPolicy
	err := ctx.ReadResource("sdwan:index/centralizedPolicy:CentralizedPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CentralizedPolicy resources.
type centralizedPolicyState struct {
	// List of policy definitions
	Definitions []CentralizedPolicyDefinition `pulumi:"definitions"`
	// The description of the centralized policy
	Description *string `pulumi:"description"`
	// The name of the centralized policy
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type CentralizedPolicyState struct {
	// List of policy definitions
	Definitions CentralizedPolicyDefinitionArrayInput
	// The description of the centralized policy
	Description pulumi.StringPtrInput
	// The name of the centralized policy
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (CentralizedPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*centralizedPolicyState)(nil)).Elem()
}

type centralizedPolicyArgs struct {
	// List of policy definitions
	Definitions []CentralizedPolicyDefinition `pulumi:"definitions"`
	// The description of the centralized policy
	Description string `pulumi:"description"`
	// The name of the centralized policy
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CentralizedPolicy resource.
type CentralizedPolicyArgs struct {
	// List of policy definitions
	Definitions CentralizedPolicyDefinitionArrayInput
	// The description of the centralized policy
	Description pulumi.StringInput
	// The name of the centralized policy
	Name pulumi.StringPtrInput
}

func (CentralizedPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*centralizedPolicyArgs)(nil)).Elem()
}

type CentralizedPolicyInput interface {
	pulumi.Input

	ToCentralizedPolicyOutput() CentralizedPolicyOutput
	ToCentralizedPolicyOutputWithContext(ctx context.Context) CentralizedPolicyOutput
}

func (*CentralizedPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralizedPolicy)(nil)).Elem()
}

func (i *CentralizedPolicy) ToCentralizedPolicyOutput() CentralizedPolicyOutput {
	return i.ToCentralizedPolicyOutputWithContext(context.Background())
}

func (i *CentralizedPolicy) ToCentralizedPolicyOutputWithContext(ctx context.Context) CentralizedPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralizedPolicyOutput)
}

// CentralizedPolicyArrayInput is an input type that accepts CentralizedPolicyArray and CentralizedPolicyArrayOutput values.
// You can construct a concrete instance of `CentralizedPolicyArrayInput` via:
//
//	CentralizedPolicyArray{ CentralizedPolicyArgs{...} }
type CentralizedPolicyArrayInput interface {
	pulumi.Input

	ToCentralizedPolicyArrayOutput() CentralizedPolicyArrayOutput
	ToCentralizedPolicyArrayOutputWithContext(context.Context) CentralizedPolicyArrayOutput
}

type CentralizedPolicyArray []CentralizedPolicyInput

func (CentralizedPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralizedPolicy)(nil)).Elem()
}

func (i CentralizedPolicyArray) ToCentralizedPolicyArrayOutput() CentralizedPolicyArrayOutput {
	return i.ToCentralizedPolicyArrayOutputWithContext(context.Background())
}

func (i CentralizedPolicyArray) ToCentralizedPolicyArrayOutputWithContext(ctx context.Context) CentralizedPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralizedPolicyArrayOutput)
}

// CentralizedPolicyMapInput is an input type that accepts CentralizedPolicyMap and CentralizedPolicyMapOutput values.
// You can construct a concrete instance of `CentralizedPolicyMapInput` via:
//
//	CentralizedPolicyMap{ "key": CentralizedPolicyArgs{...} }
type CentralizedPolicyMapInput interface {
	pulumi.Input

	ToCentralizedPolicyMapOutput() CentralizedPolicyMapOutput
	ToCentralizedPolicyMapOutputWithContext(context.Context) CentralizedPolicyMapOutput
}

type CentralizedPolicyMap map[string]CentralizedPolicyInput

func (CentralizedPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralizedPolicy)(nil)).Elem()
}

func (i CentralizedPolicyMap) ToCentralizedPolicyMapOutput() CentralizedPolicyMapOutput {
	return i.ToCentralizedPolicyMapOutputWithContext(context.Background())
}

func (i CentralizedPolicyMap) ToCentralizedPolicyMapOutputWithContext(ctx context.Context) CentralizedPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CentralizedPolicyMapOutput)
}

type CentralizedPolicyOutput struct{ *pulumi.OutputState }

func (CentralizedPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CentralizedPolicy)(nil)).Elem()
}

func (o CentralizedPolicyOutput) ToCentralizedPolicyOutput() CentralizedPolicyOutput {
	return o
}

func (o CentralizedPolicyOutput) ToCentralizedPolicyOutputWithContext(ctx context.Context) CentralizedPolicyOutput {
	return o
}

// List of policy definitions
func (o CentralizedPolicyOutput) Definitions() CentralizedPolicyDefinitionArrayOutput {
	return o.ApplyT(func(v *CentralizedPolicy) CentralizedPolicyDefinitionArrayOutput { return v.Definitions }).(CentralizedPolicyDefinitionArrayOutput)
}

// The description of the centralized policy
func (o CentralizedPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralizedPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the centralized policy
func (o CentralizedPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CentralizedPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o CentralizedPolicyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CentralizedPolicy) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CentralizedPolicyArrayOutput struct{ *pulumi.OutputState }

func (CentralizedPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CentralizedPolicy)(nil)).Elem()
}

func (o CentralizedPolicyArrayOutput) ToCentralizedPolicyArrayOutput() CentralizedPolicyArrayOutput {
	return o
}

func (o CentralizedPolicyArrayOutput) ToCentralizedPolicyArrayOutputWithContext(ctx context.Context) CentralizedPolicyArrayOutput {
	return o
}

func (o CentralizedPolicyArrayOutput) Index(i pulumi.IntInput) CentralizedPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CentralizedPolicy {
		return vs[0].([]*CentralizedPolicy)[vs[1].(int)]
	}).(CentralizedPolicyOutput)
}

type CentralizedPolicyMapOutput struct{ *pulumi.OutputState }

func (CentralizedPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CentralizedPolicy)(nil)).Elem()
}

func (o CentralizedPolicyMapOutput) ToCentralizedPolicyMapOutput() CentralizedPolicyMapOutput {
	return o
}

func (o CentralizedPolicyMapOutput) ToCentralizedPolicyMapOutputWithContext(ctx context.Context) CentralizedPolicyMapOutput {
	return o
}

func (o CentralizedPolicyMapOutput) MapIndex(k pulumi.StringInput) CentralizedPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CentralizedPolicy {
		return vs[0].(map[string]*CentralizedPolicy)[vs[1].(string)]
	}).(CentralizedPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CentralizedPolicyInput)(nil)).Elem(), &CentralizedPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralizedPolicyArrayInput)(nil)).Elem(), CentralizedPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CentralizedPolicyMapInput)(nil)).Elem(), CentralizedPolicyMap{})
	pulumi.RegisterOutputType(CentralizedPolicyOutput{})
	pulumi.RegisterOutputType(CentralizedPolicyArrayOutput{})
	pulumi.RegisterOutputType(CentralizedPolicyMapOutput{})
}
