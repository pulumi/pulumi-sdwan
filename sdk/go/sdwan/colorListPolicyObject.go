// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Color List Policy Object .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewColorListPolicyObject(ctx, "example", &sdwan.ColorListPolicyObjectArgs{
//				Name: pulumi.String("Example"),
//				Entries: sdwan.ColorListPolicyObjectEntryArray{
//					&sdwan.ColorListPolicyObjectEntryArgs{
//						Color: pulumi.String("blue"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/colorListPolicyObject:ColorListPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type ColorListPolicyObject struct {
	pulumi.CustomResourceState

	// List of entries
	Entries ColorListPolicyObjectEntryArrayOutput `pulumi:"entries"`
	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewColorListPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewColorListPolicyObject(ctx *pulumi.Context,
	name string, args *ColorListPolicyObjectArgs, opts ...pulumi.ResourceOption) (*ColorListPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ColorListPolicyObject
	err := ctx.RegisterResource("sdwan:index/colorListPolicyObject:ColorListPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetColorListPolicyObject gets an existing ColorListPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetColorListPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ColorListPolicyObjectState, opts ...pulumi.ResourceOption) (*ColorListPolicyObject, error) {
	var resource ColorListPolicyObject
	err := ctx.ReadResource("sdwan:index/colorListPolicyObject:ColorListPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ColorListPolicyObject resources.
type colorListPolicyObjectState struct {
	// List of entries
	Entries []ColorListPolicyObjectEntry `pulumi:"entries"`
	// The name of the policy object
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type ColorListPolicyObjectState struct {
	// List of entries
	Entries ColorListPolicyObjectEntryArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (ColorListPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*colorListPolicyObjectState)(nil)).Elem()
}

type colorListPolicyObjectArgs struct {
	// List of entries
	Entries []ColorListPolicyObjectEntry `pulumi:"entries"`
	// The name of the policy object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ColorListPolicyObject resource.
type ColorListPolicyObjectArgs struct {
	// List of entries
	Entries ColorListPolicyObjectEntryArrayInput
	// The name of the policy object
	Name pulumi.StringPtrInput
}

func (ColorListPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*colorListPolicyObjectArgs)(nil)).Elem()
}

type ColorListPolicyObjectInput interface {
	pulumi.Input

	ToColorListPolicyObjectOutput() ColorListPolicyObjectOutput
	ToColorListPolicyObjectOutputWithContext(ctx context.Context) ColorListPolicyObjectOutput
}

func (*ColorListPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**ColorListPolicyObject)(nil)).Elem()
}

func (i *ColorListPolicyObject) ToColorListPolicyObjectOutput() ColorListPolicyObjectOutput {
	return i.ToColorListPolicyObjectOutputWithContext(context.Background())
}

func (i *ColorListPolicyObject) ToColorListPolicyObjectOutputWithContext(ctx context.Context) ColorListPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorListPolicyObjectOutput)
}

// ColorListPolicyObjectArrayInput is an input type that accepts ColorListPolicyObjectArray and ColorListPolicyObjectArrayOutput values.
// You can construct a concrete instance of `ColorListPolicyObjectArrayInput` via:
//
//	ColorListPolicyObjectArray{ ColorListPolicyObjectArgs{...} }
type ColorListPolicyObjectArrayInput interface {
	pulumi.Input

	ToColorListPolicyObjectArrayOutput() ColorListPolicyObjectArrayOutput
	ToColorListPolicyObjectArrayOutputWithContext(context.Context) ColorListPolicyObjectArrayOutput
}

type ColorListPolicyObjectArray []ColorListPolicyObjectInput

func (ColorListPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ColorListPolicyObject)(nil)).Elem()
}

func (i ColorListPolicyObjectArray) ToColorListPolicyObjectArrayOutput() ColorListPolicyObjectArrayOutput {
	return i.ToColorListPolicyObjectArrayOutputWithContext(context.Background())
}

func (i ColorListPolicyObjectArray) ToColorListPolicyObjectArrayOutputWithContext(ctx context.Context) ColorListPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorListPolicyObjectArrayOutput)
}

// ColorListPolicyObjectMapInput is an input type that accepts ColorListPolicyObjectMap and ColorListPolicyObjectMapOutput values.
// You can construct a concrete instance of `ColorListPolicyObjectMapInput` via:
//
//	ColorListPolicyObjectMap{ "key": ColorListPolicyObjectArgs{...} }
type ColorListPolicyObjectMapInput interface {
	pulumi.Input

	ToColorListPolicyObjectMapOutput() ColorListPolicyObjectMapOutput
	ToColorListPolicyObjectMapOutputWithContext(context.Context) ColorListPolicyObjectMapOutput
}

type ColorListPolicyObjectMap map[string]ColorListPolicyObjectInput

func (ColorListPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ColorListPolicyObject)(nil)).Elem()
}

func (i ColorListPolicyObjectMap) ToColorListPolicyObjectMapOutput() ColorListPolicyObjectMapOutput {
	return i.ToColorListPolicyObjectMapOutputWithContext(context.Background())
}

func (i ColorListPolicyObjectMap) ToColorListPolicyObjectMapOutputWithContext(ctx context.Context) ColorListPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ColorListPolicyObjectMapOutput)
}

type ColorListPolicyObjectOutput struct{ *pulumi.OutputState }

func (ColorListPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ColorListPolicyObject)(nil)).Elem()
}

func (o ColorListPolicyObjectOutput) ToColorListPolicyObjectOutput() ColorListPolicyObjectOutput {
	return o
}

func (o ColorListPolicyObjectOutput) ToColorListPolicyObjectOutputWithContext(ctx context.Context) ColorListPolicyObjectOutput {
	return o
}

// List of entries
func (o ColorListPolicyObjectOutput) Entries() ColorListPolicyObjectEntryArrayOutput {
	return o.ApplyT(func(v *ColorListPolicyObject) ColorListPolicyObjectEntryArrayOutput { return v.Entries }).(ColorListPolicyObjectEntryArrayOutput)
}

// The name of the policy object
func (o ColorListPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ColorListPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o ColorListPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ColorListPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ColorListPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (ColorListPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ColorListPolicyObject)(nil)).Elem()
}

func (o ColorListPolicyObjectArrayOutput) ToColorListPolicyObjectArrayOutput() ColorListPolicyObjectArrayOutput {
	return o
}

func (o ColorListPolicyObjectArrayOutput) ToColorListPolicyObjectArrayOutputWithContext(ctx context.Context) ColorListPolicyObjectArrayOutput {
	return o
}

func (o ColorListPolicyObjectArrayOutput) Index(i pulumi.IntInput) ColorListPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ColorListPolicyObject {
		return vs[0].([]*ColorListPolicyObject)[vs[1].(int)]
	}).(ColorListPolicyObjectOutput)
}

type ColorListPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (ColorListPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ColorListPolicyObject)(nil)).Elem()
}

func (o ColorListPolicyObjectMapOutput) ToColorListPolicyObjectMapOutput() ColorListPolicyObjectMapOutput {
	return o
}

func (o ColorListPolicyObjectMapOutput) ToColorListPolicyObjectMapOutputWithContext(ctx context.Context) ColorListPolicyObjectMapOutput {
	return o
}

func (o ColorListPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) ColorListPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ColorListPolicyObject {
		return vs[0].(map[string]*ColorListPolicyObject)[vs[1].(string)]
	}).(ColorListPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ColorListPolicyObjectInput)(nil)).Elem(), &ColorListPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ColorListPolicyObjectArrayInput)(nil)).Elem(), ColorListPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ColorListPolicyObjectMapInput)(nil)).Elem(), ColorListPolicyObjectMap{})
	pulumi.RegisterOutputType(ColorListPolicyObjectOutput{})
	pulumi.RegisterOutputType(ColorListPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(ColorListPolicyObjectMapOutput{})
}
