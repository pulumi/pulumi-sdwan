// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cflowd Policy Definition .
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CflowdPolicyDefinition struct {
	pulumi.CustomResourceState

	// Active flow timeout in seconds - Range: `30`-`3600`
	ActiveFlowTimeout pulumi.IntPtrOutput `pulumi:"activeFlowTimeout"`
	// List of collectors
	Collectors CflowdPolicyDefinitionCollectorArrayOutput `pulumi:"collectors"`
	// The description of the policy definition
	Description pulumi.StringOutput `pulumi:"description"`
	// Flow refresh in seconds - Range: `60`-`86400`
	FlowRefresh pulumi.IntPtrOutput `pulumi:"flowRefresh"`
	// Inactive flow timeout in seconds - Range: `1`-`3600`
	InactiveFlowTimeout pulumi.IntPtrOutput `pulumi:"inactiveFlowTimeout"`
	// The name of the policy definition
	Name pulumi.StringOutput `pulumi:"name"`
	// Protocol, either `ipv4`, `ipv6` or `all` - Choices: `ipv4`, `ipv6`, `all`
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// Collect remarked DSCP
	RemarkedDscp pulumi.BoolPtrOutput `pulumi:"remarkedDscp"`
	// Flow sampling interval - Range: `1`-`65536`
	SamplingInterval pulumi.IntPtrOutput `pulumi:"samplingInterval"`
	// Collect TOS record field
	Tos pulumi.BoolPtrOutput `pulumi:"tos"`
	// Type
	Type pulumi.StringOutput `pulumi:"type"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCflowdPolicyDefinition registers a new resource with the given unique name, arguments, and options.
func NewCflowdPolicyDefinition(ctx *pulumi.Context,
	name string, args *CflowdPolicyDefinitionArgs, opts ...pulumi.ResourceOption) (*CflowdPolicyDefinition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Collectors == nil {
		return nil, errors.New("invalid value for required argument 'Collectors'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CflowdPolicyDefinition
	err := ctx.RegisterResource("sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCflowdPolicyDefinition gets an existing CflowdPolicyDefinition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCflowdPolicyDefinition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CflowdPolicyDefinitionState, opts ...pulumi.ResourceOption) (*CflowdPolicyDefinition, error) {
	var resource CflowdPolicyDefinition
	err := ctx.ReadResource("sdwan:index/cflowdPolicyDefinition:CflowdPolicyDefinition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CflowdPolicyDefinition resources.
type cflowdPolicyDefinitionState struct {
	// Active flow timeout in seconds - Range: `30`-`3600`
	ActiveFlowTimeout *int `pulumi:"activeFlowTimeout"`
	// List of collectors
	Collectors []CflowdPolicyDefinitionCollector `pulumi:"collectors"`
	// The description of the policy definition
	Description *string `pulumi:"description"`
	// Flow refresh in seconds - Range: `60`-`86400`
	FlowRefresh *int `pulumi:"flowRefresh"`
	// Inactive flow timeout in seconds - Range: `1`-`3600`
	InactiveFlowTimeout *int `pulumi:"inactiveFlowTimeout"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// Protocol, either `ipv4`, `ipv6` or `all` - Choices: `ipv4`, `ipv6`, `all`
	Protocol *string `pulumi:"protocol"`
	// Collect remarked DSCP
	RemarkedDscp *bool `pulumi:"remarkedDscp"`
	// Flow sampling interval - Range: `1`-`65536`
	SamplingInterval *int `pulumi:"samplingInterval"`
	// Collect TOS record field
	Tos *bool `pulumi:"tos"`
	// Type
	Type *string `pulumi:"type"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type CflowdPolicyDefinitionState struct {
	// Active flow timeout in seconds - Range: `30`-`3600`
	ActiveFlowTimeout pulumi.IntPtrInput
	// List of collectors
	Collectors CflowdPolicyDefinitionCollectorArrayInput
	// The description of the policy definition
	Description pulumi.StringPtrInput
	// Flow refresh in seconds - Range: `60`-`86400`
	FlowRefresh pulumi.IntPtrInput
	// Inactive flow timeout in seconds - Range: `1`-`3600`
	InactiveFlowTimeout pulumi.IntPtrInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// Protocol, either `ipv4`, `ipv6` or `all` - Choices: `ipv4`, `ipv6`, `all`
	Protocol pulumi.StringPtrInput
	// Collect remarked DSCP
	RemarkedDscp pulumi.BoolPtrInput
	// Flow sampling interval - Range: `1`-`65536`
	SamplingInterval pulumi.IntPtrInput
	// Collect TOS record field
	Tos pulumi.BoolPtrInput
	// Type
	Type pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (CflowdPolicyDefinitionState) ElementType() reflect.Type {
	return reflect.TypeOf((*cflowdPolicyDefinitionState)(nil)).Elem()
}

type cflowdPolicyDefinitionArgs struct {
	// Active flow timeout in seconds - Range: `30`-`3600`
	ActiveFlowTimeout *int `pulumi:"activeFlowTimeout"`
	// List of collectors
	Collectors []CflowdPolicyDefinitionCollector `pulumi:"collectors"`
	// The description of the policy definition
	Description string `pulumi:"description"`
	// Flow refresh in seconds - Range: `60`-`86400`
	FlowRefresh *int `pulumi:"flowRefresh"`
	// Inactive flow timeout in seconds - Range: `1`-`3600`
	InactiveFlowTimeout *int `pulumi:"inactiveFlowTimeout"`
	// The name of the policy definition
	Name *string `pulumi:"name"`
	// Protocol, either `ipv4`, `ipv6` or `all` - Choices: `ipv4`, `ipv6`, `all`
	Protocol *string `pulumi:"protocol"`
	// Collect remarked DSCP
	RemarkedDscp *bool `pulumi:"remarkedDscp"`
	// Flow sampling interval - Range: `1`-`65536`
	SamplingInterval *int `pulumi:"samplingInterval"`
	// Collect TOS record field
	Tos *bool `pulumi:"tos"`
}

// The set of arguments for constructing a CflowdPolicyDefinition resource.
type CflowdPolicyDefinitionArgs struct {
	// Active flow timeout in seconds - Range: `30`-`3600`
	ActiveFlowTimeout pulumi.IntPtrInput
	// List of collectors
	Collectors CflowdPolicyDefinitionCollectorArrayInput
	// The description of the policy definition
	Description pulumi.StringInput
	// Flow refresh in seconds - Range: `60`-`86400`
	FlowRefresh pulumi.IntPtrInput
	// Inactive flow timeout in seconds - Range: `1`-`3600`
	InactiveFlowTimeout pulumi.IntPtrInput
	// The name of the policy definition
	Name pulumi.StringPtrInput
	// Protocol, either `ipv4`, `ipv6` or `all` - Choices: `ipv4`, `ipv6`, `all`
	Protocol pulumi.StringPtrInput
	// Collect remarked DSCP
	RemarkedDscp pulumi.BoolPtrInput
	// Flow sampling interval - Range: `1`-`65536`
	SamplingInterval pulumi.IntPtrInput
	// Collect TOS record field
	Tos pulumi.BoolPtrInput
}

func (CflowdPolicyDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cflowdPolicyDefinitionArgs)(nil)).Elem()
}

type CflowdPolicyDefinitionInput interface {
	pulumi.Input

	ToCflowdPolicyDefinitionOutput() CflowdPolicyDefinitionOutput
	ToCflowdPolicyDefinitionOutputWithContext(ctx context.Context) CflowdPolicyDefinitionOutput
}

func (*CflowdPolicyDefinition) ElementType() reflect.Type {
	return reflect.TypeOf((**CflowdPolicyDefinition)(nil)).Elem()
}

func (i *CflowdPolicyDefinition) ToCflowdPolicyDefinitionOutput() CflowdPolicyDefinitionOutput {
	return i.ToCflowdPolicyDefinitionOutputWithContext(context.Background())
}

func (i *CflowdPolicyDefinition) ToCflowdPolicyDefinitionOutputWithContext(ctx context.Context) CflowdPolicyDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CflowdPolicyDefinitionOutput)
}

// CflowdPolicyDefinitionArrayInput is an input type that accepts CflowdPolicyDefinitionArray and CflowdPolicyDefinitionArrayOutput values.
// You can construct a concrete instance of `CflowdPolicyDefinitionArrayInput` via:
//
//	CflowdPolicyDefinitionArray{ CflowdPolicyDefinitionArgs{...} }
type CflowdPolicyDefinitionArrayInput interface {
	pulumi.Input

	ToCflowdPolicyDefinitionArrayOutput() CflowdPolicyDefinitionArrayOutput
	ToCflowdPolicyDefinitionArrayOutputWithContext(context.Context) CflowdPolicyDefinitionArrayOutput
}

type CflowdPolicyDefinitionArray []CflowdPolicyDefinitionInput

func (CflowdPolicyDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CflowdPolicyDefinition)(nil)).Elem()
}

func (i CflowdPolicyDefinitionArray) ToCflowdPolicyDefinitionArrayOutput() CflowdPolicyDefinitionArrayOutput {
	return i.ToCflowdPolicyDefinitionArrayOutputWithContext(context.Background())
}

func (i CflowdPolicyDefinitionArray) ToCflowdPolicyDefinitionArrayOutputWithContext(ctx context.Context) CflowdPolicyDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CflowdPolicyDefinitionArrayOutput)
}

// CflowdPolicyDefinitionMapInput is an input type that accepts CflowdPolicyDefinitionMap and CflowdPolicyDefinitionMapOutput values.
// You can construct a concrete instance of `CflowdPolicyDefinitionMapInput` via:
//
//	CflowdPolicyDefinitionMap{ "key": CflowdPolicyDefinitionArgs{...} }
type CflowdPolicyDefinitionMapInput interface {
	pulumi.Input

	ToCflowdPolicyDefinitionMapOutput() CflowdPolicyDefinitionMapOutput
	ToCflowdPolicyDefinitionMapOutputWithContext(context.Context) CflowdPolicyDefinitionMapOutput
}

type CflowdPolicyDefinitionMap map[string]CflowdPolicyDefinitionInput

func (CflowdPolicyDefinitionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CflowdPolicyDefinition)(nil)).Elem()
}

func (i CflowdPolicyDefinitionMap) ToCflowdPolicyDefinitionMapOutput() CflowdPolicyDefinitionMapOutput {
	return i.ToCflowdPolicyDefinitionMapOutputWithContext(context.Background())
}

func (i CflowdPolicyDefinitionMap) ToCflowdPolicyDefinitionMapOutputWithContext(ctx context.Context) CflowdPolicyDefinitionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CflowdPolicyDefinitionMapOutput)
}

type CflowdPolicyDefinitionOutput struct{ *pulumi.OutputState }

func (CflowdPolicyDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CflowdPolicyDefinition)(nil)).Elem()
}

func (o CflowdPolicyDefinitionOutput) ToCflowdPolicyDefinitionOutput() CflowdPolicyDefinitionOutput {
	return o
}

func (o CflowdPolicyDefinitionOutput) ToCflowdPolicyDefinitionOutputWithContext(ctx context.Context) CflowdPolicyDefinitionOutput {
	return o
}

// Active flow timeout in seconds - Range: `30`-`3600`
func (o CflowdPolicyDefinitionOutput) ActiveFlowTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.IntPtrOutput { return v.ActiveFlowTimeout }).(pulumi.IntPtrOutput)
}

// List of collectors
func (o CflowdPolicyDefinitionOutput) Collectors() CflowdPolicyDefinitionCollectorArrayOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) CflowdPolicyDefinitionCollectorArrayOutput { return v.Collectors }).(CflowdPolicyDefinitionCollectorArrayOutput)
}

// The description of the policy definition
func (o CflowdPolicyDefinitionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Flow refresh in seconds - Range: `60`-`86400`
func (o CflowdPolicyDefinitionOutput) FlowRefresh() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.IntPtrOutput { return v.FlowRefresh }).(pulumi.IntPtrOutput)
}

// Inactive flow timeout in seconds - Range: `1`-`3600`
func (o CflowdPolicyDefinitionOutput) InactiveFlowTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.IntPtrOutput { return v.InactiveFlowTimeout }).(pulumi.IntPtrOutput)
}

// The name of the policy definition
func (o CflowdPolicyDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Protocol, either `ipv4`, `ipv6` or `all` - Choices: `ipv4`, `ipv6`, `all`
func (o CflowdPolicyDefinitionOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// Collect remarked DSCP
func (o CflowdPolicyDefinitionOutput) RemarkedDscp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.BoolPtrOutput { return v.RemarkedDscp }).(pulumi.BoolPtrOutput)
}

// Flow sampling interval - Range: `1`-`65536`
func (o CflowdPolicyDefinitionOutput) SamplingInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.IntPtrOutput { return v.SamplingInterval }).(pulumi.IntPtrOutput)
}

// Collect TOS record field
func (o CflowdPolicyDefinitionOutput) Tos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.BoolPtrOutput { return v.Tos }).(pulumi.BoolPtrOutput)
}

// Type
func (o CflowdPolicyDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The version of the object
func (o CflowdPolicyDefinitionOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CflowdPolicyDefinition) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CflowdPolicyDefinitionArrayOutput struct{ *pulumi.OutputState }

func (CflowdPolicyDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CflowdPolicyDefinition)(nil)).Elem()
}

func (o CflowdPolicyDefinitionArrayOutput) ToCflowdPolicyDefinitionArrayOutput() CflowdPolicyDefinitionArrayOutput {
	return o
}

func (o CflowdPolicyDefinitionArrayOutput) ToCflowdPolicyDefinitionArrayOutputWithContext(ctx context.Context) CflowdPolicyDefinitionArrayOutput {
	return o
}

func (o CflowdPolicyDefinitionArrayOutput) Index(i pulumi.IntInput) CflowdPolicyDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CflowdPolicyDefinition {
		return vs[0].([]*CflowdPolicyDefinition)[vs[1].(int)]
	}).(CflowdPolicyDefinitionOutput)
}

type CflowdPolicyDefinitionMapOutput struct{ *pulumi.OutputState }

func (CflowdPolicyDefinitionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CflowdPolicyDefinition)(nil)).Elem()
}

func (o CflowdPolicyDefinitionMapOutput) ToCflowdPolicyDefinitionMapOutput() CflowdPolicyDefinitionMapOutput {
	return o
}

func (o CflowdPolicyDefinitionMapOutput) ToCflowdPolicyDefinitionMapOutputWithContext(ctx context.Context) CflowdPolicyDefinitionMapOutput {
	return o
}

func (o CflowdPolicyDefinitionMapOutput) MapIndex(k pulumi.StringInput) CflowdPolicyDefinitionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CflowdPolicyDefinition {
		return vs[0].(map[string]*CflowdPolicyDefinition)[vs[1].(string)]
	}).(CflowdPolicyDefinitionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CflowdPolicyDefinitionInput)(nil)).Elem(), &CflowdPolicyDefinition{})
	pulumi.RegisterInputType(reflect.TypeOf((*CflowdPolicyDefinitionArrayInput)(nil)).Elem(), CflowdPolicyDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CflowdPolicyDefinitionMapInput)(nil)).Elem(), CflowdPolicyDefinitionMap{})
	pulumi.RegisterOutputType(CflowdPolicyDefinitionOutput{})
	pulumi.RegisterOutputType(CflowdPolicyDefinitionArrayOutput{})
	pulumi.RegisterOutputType(CflowdPolicyDefinitionMapOutput{})
}
