// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Transport WAN VPN Interface T1 E1 Serial Feature.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupTransportWanVpnInterfaceT1E1SerialFeature(ctx, &sdwan.LookupTransportWanVpnInterfaceT1E1SerialFeatureArgs{
//				Id:                       "f6b2c44c-693c-4763-b010-895aa3d236bd",
//				FeatureProfileId:         "f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac",
//				TransportWanVpnFeatureId: "140331f6-5418-4755-a059-13c77eb96037",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTransportWanVpnInterfaceT1E1SerialFeature(ctx *pulumi.Context, args *LookupTransportWanVpnInterfaceT1E1SerialFeatureArgs, opts ...pulumi.InvokeOption) (*LookupTransportWanVpnInterfaceT1E1SerialFeatureResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTransportWanVpnInterfaceT1E1SerialFeatureResult
	err := ctx.Invoke("sdwan:index/getTransportWanVpnInterfaceT1E1SerialFeature:getTransportWanVpnInterfaceT1E1SerialFeature", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTransportWanVpnInterfaceT1E1SerialFeature.
type LookupTransportWanVpnInterfaceT1E1SerialFeatureArgs struct {
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the Feature
	Id string `pulumi:"id"`
	// Transport WAN VPN Feature ID
	TransportWanVpnFeatureId string `pulumi:"transportWanVpnFeatureId"`
}

// A collection of values returned by getTransportWanVpnInterfaceT1E1SerialFeature.
type LookupTransportWanVpnInterfaceT1E1SerialFeatureResult struct {
	AclIpv4EgressFeatureId  string `pulumi:"aclIpv4EgressFeatureId"`
	AclIpv4IngressFeatureId string `pulumi:"aclIpv4IngressFeatureId"`
	AclIpv6EgressFeatureId  string `pulumi:"aclIpv6EgressFeatureId"`
	AclIpv6IngressFeatureId string `pulumi:"aclIpv6IngressFeatureId"`
	// Interface bandwidth capacity, in kbps
	Bandwidth int `pulumi:"bandwidth"`
	// Interface downstream bandwidth capacity, in kbps
	BandwidthDownstream int `pulumi:"bandwidthDownstream"`
	// Variable name
	BandwidthDownstreamVariable string `pulumi:"bandwidthDownstreamVariable"`
	// Variable name
	BandwidthVariable string `pulumi:"bandwidthVariable"`
	// Set preference for interface Clock speed
	ClockRate string `pulumi:"clockRate"`
	// Variable name
	ClockRateVariable string `pulumi:"clockRateVariable"`
	// The description of the Feature
	Description string `pulumi:"description"`
	// Configure Encapsulation for interface
	Encapsulation string `pulumi:"encapsulation"`
	// Variable name
	EncapsulationVariable string `pulumi:"encapsulationVariable"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The id of the Feature
	Id string `pulumi:"id"`
	// Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
	InterfaceName string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable string `pulumi:"interfaceNameVariable"`
	// Set ip mtu
	IpMtu int `pulumi:"ipMtu"`
	// Variable name
	IpMtuVariable string `pulumi:"ipMtuVariable"`
	Ipv4Address   string `pulumi:"ipv4Address"`
	// Variable name
	Ipv4AddressVariable string `pulumi:"ipv4AddressVariable"`
	Ipv4SubnetMask      string `pulumi:"ipv4SubnetMask"`
	// Variable name
	Ipv4SubnetMaskVariable string `pulumi:"ipv4SubnetMaskVariable"`
	// Assign IPv6 address
	Ipv6Address string `pulumi:"ipv6Address"`
	// Variable name
	Ipv6AddressVariable string `pulumi:"ipv6AddressVariable"`
	// Interface MTU \n\n, in bytes
	Mtu int `pulumi:"mtu"`
	// Variable name
	MtuVariable string `pulumi:"mtuVariable"`
	// The name of the Feature
	Name string `pulumi:"name"`
	// Per-tunnel Qos
	PerTunnelQos bool `pulumi:"perTunnelQos"`
	// Per-tunnel QoS Aggregator
	PerTunnelQosAggregator bool `pulumi:"perTunnelQosAggregator"`
	// Variable name
	PerTunnelQosAggregatorVariable string `pulumi:"perTunnelQosAggregatorVariable"`
	// Variable name
	PerTunnelQosVariable string `pulumi:"perTunnelQosVariable"`
	// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
	QosShapingRate int `pulumi:"qosShapingRate"`
	// Variable name
	QosShapingRateVariable string `pulumi:"qosShapingRateVariable"`
	// Administrative state
	Shutdown bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes
	TcpMss int `pulumi:"tcpMss"`
	// Variable name
	TcpMssVariable string `pulumi:"tcpMssVariable"`
	// Extends a local TLOC to a remote node only for vpn 0
	TlocExtension string `pulumi:"tlocExtension"`
	// Variable name
	TlocExtensionVariable string `pulumi:"tlocExtensionVariable"`
	// Transport WAN VPN Feature ID
	TransportWanVpnFeatureId string `pulumi:"transportWanVpnFeatureId"`
	// Tunnel Interface
	TunnelInterface bool `pulumi:"tunnelInterface"`
	// Allow all traffic. Overrides all other allow-service options if allow-service all is set
	TunnelInterfaceAllowAll bool `pulumi:"tunnelInterfaceAllowAll"`
	// Variable name
	TunnelInterfaceAllowAllVariable string `pulumi:"tunnelInterfaceAllowAllVariable"`
	// Allow/Deny BFD
	TunnelInterfaceAllowBfd bool `pulumi:"tunnelInterfaceAllowBfd"`
	// Variable name
	TunnelInterfaceAllowBfdVariable string `pulumi:"tunnelInterfaceAllowBfdVariable"`
	// Allow/deny BGP
	TunnelInterfaceAllowBgp bool `pulumi:"tunnelInterfaceAllowBgp"`
	// Variable name
	TunnelInterfaceAllowBgpVariable string `pulumi:"tunnelInterfaceAllowBgpVariable"`
	// Allow/Deny DHCP
	TunnelInterfaceAllowDhcp bool `pulumi:"tunnelInterfaceAllowDhcp"`
	// Variable name
	TunnelInterfaceAllowDhcpVariable string `pulumi:"tunnelInterfaceAllowDhcpVariable"`
	// Allow/Deny DNS
	TunnelInterfaceAllowDns bool `pulumi:"tunnelInterfaceAllowDns"`
	// Variable name
	TunnelInterfaceAllowDnsVariable string `pulumi:"tunnelInterfaceAllowDnsVariable"`
	// Allow/Deny Https
	TunnelInterfaceAllowHttps bool `pulumi:"tunnelInterfaceAllowHttps"`
	// Variable name
	TunnelInterfaceAllowHttpsVariable string `pulumi:"tunnelInterfaceAllowHttpsVariable"`
	// Allow/Deny ICMP
	TunnelInterfaceAllowIcmp bool `pulumi:"tunnelInterfaceAllowIcmp"`
	// Variable name
	TunnelInterfaceAllowIcmpVariable string `pulumi:"tunnelInterfaceAllowIcmpVariable"`
	// Allow/Deny NETCONF
	TunnelInterfaceAllowNetconf bool `pulumi:"tunnelInterfaceAllowNetconf"`
	// Variable name
	TunnelInterfaceAllowNetconfVariable string `pulumi:"tunnelInterfaceAllowNetconfVariable"`
	// Allow/Deny NTP
	TunnelInterfaceAllowNtp bool `pulumi:"tunnelInterfaceAllowNtp"`
	// Variable name
	TunnelInterfaceAllowNtpVariable string `pulumi:"tunnelInterfaceAllowNtpVariable"`
	// Allow/Deny OSPF
	TunnelInterfaceAllowOspf bool `pulumi:"tunnelInterfaceAllowOspf"`
	// Variable name
	TunnelInterfaceAllowOspfVariable string `pulumi:"tunnelInterfaceAllowOspfVariable"`
	// Allow/Deny SNMP
	TunnelInterfaceAllowSnmp bool `pulumi:"tunnelInterfaceAllowSnmp"`
	// Variable name
	TunnelInterfaceAllowSnmpVariable string `pulumi:"tunnelInterfaceAllowSnmpVariable"`
	// Allow/Deny SSH
	TunnelInterfaceAllowSsh bool `pulumi:"tunnelInterfaceAllowSsh"`
	// Variable name
	TunnelInterfaceAllowSshVariable string `pulumi:"tunnelInterfaceAllowSshVariable"`
	// Allow/Deny STUN
	TunnelInterfaceAllowStun bool `pulumi:"tunnelInterfaceAllowStun"`
	// Variable name
	TunnelInterfaceAllowStunVariable string `pulumi:"tunnelInterfaceAllowStunVariable"`
	// Bind loopback tunnel interface to a physical interface
	TunnelInterfaceBindLoopbackTunnel string `pulumi:"tunnelInterfaceBindLoopbackTunnel"`
	// Variable name
	TunnelInterfaceBindLoopbackTunnelVariable string `pulumi:"tunnelInterfaceBindLoopbackTunnelVariable"`
	// Set TLOC as border TLOC
	TunnelInterfaceBorder bool `pulumi:"tunnelInterfaceBorder"`
	// Variable name
	TunnelInterfaceBorderVariable string `pulumi:"tunnelInterfaceBorderVariable"`
	// Set carrier for TLOC
	TunnelInterfaceCarrier string `pulumi:"tunnelInterfaceCarrier"`
	// Variable name
	TunnelInterfaceCarrierVariable string `pulumi:"tunnelInterfaceCarrierVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
	TunnelInterfaceClearDontFragment bool `pulumi:"tunnelInterfaceClearDontFragment"`
	// Variable name
	TunnelInterfaceClearDontFragmentVariable string `pulumi:"tunnelInterfaceClearDontFragmentVariable"`
	// Accept and respond to network-prefix-directed broadcasts)
	TunnelInterfaceClearNetworkBroadcast bool `pulumi:"tunnelInterfaceClearNetworkBroadcast"`
	// Variable name
	TunnelInterfaceClearNetworkBroadcastVariable string `pulumi:"tunnelInterfaceClearNetworkBroadcastVariable"`
	// Set color for TLOC
	TunnelInterfaceColor string `pulumi:"tunnelInterfaceColor"`
	// Variable name
	TunnelInterfaceColorVariable string `pulumi:"tunnelInterfaceColorVariable"`
	// Encapsulation for TLOC
	TunnelInterfaceEncapsulations []GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation `pulumi:"tunnelInterfaceEncapsulations"`
	// Variable name
	TunnelInterfaceExcludeControllerGroupListVariable string `pulumi:"tunnelInterfaceExcludeControllerGroupListVariable"`
	// Exclude the following controller groups defined in this list
	TunnelInterfaceExcludeControllerGroupLists []int `pulumi:"tunnelInterfaceExcludeControllerGroupLists"`
	// List of groups
	TunnelInterfaceGroups int `pulumi:"tunnelInterfaceGroups"`
	// Variable name
	TunnelInterfaceGroupsVariable string `pulumi:"tunnelInterfaceGroupsVariable"`
	// Set time period of control hello packets \n\n milli seconds
	TunnelInterfaceHelloInterval int `pulumi:"tunnelInterfaceHelloInterval"`
	// Variable name
	TunnelInterfaceHelloIntervalVariable string `pulumi:"tunnelInterfaceHelloIntervalVariable"`
	// Set tolerance of control hello packets \n\n seconds
	TunnelInterfaceHelloTolerance int `pulumi:"tunnelInterfaceHelloTolerance"`
	// Variable name
	TunnelInterfaceHelloToleranceVariable string `pulumi:"tunnelInterfaceHelloToleranceVariable"`
	// Set TLOC as last resort
	TunnelInterfaceLastResortCircuit bool `pulumi:"tunnelInterfaceLastResortCircuit"`
	// Variable name
	TunnelInterfaceLastResortCircuitVariable string `pulumi:"tunnelInterfaceLastResortCircuitVariable"`
	// Set the interface as a low-bandwidth circuit
	TunnelInterfaceLowBandwidthLink bool `pulumi:"tunnelInterfaceLowBandwidthLink"`
	// Variable name
	TunnelInterfaceLowBandwidthLinkVariable string `pulumi:"tunnelInterfaceLowBandwidthLinkVariable"`
	// Set the maximum number of control connections for this TLOC
	TunnelInterfaceMaxControlConnections int `pulumi:"tunnelInterfaceMaxControlConnections"`
	// Variable name
	TunnelInterfaceMaxControlConnectionsVariable string `pulumi:"tunnelInterfaceMaxControlConnectionsVariable"`
	// Set time period of nat refresh packets \n\n seconds
	TunnelInterfaceNatRefreshInterval int `pulumi:"tunnelInterfaceNatRefreshInterval"`
	// Variable name
	TunnelInterfaceNatRefreshIntervalVariable string `pulumi:"tunnelInterfaceNatRefreshIntervalVariable"`
	// Disallow port hopping on the tunnel interface
	TunnelInterfacePortHop bool `pulumi:"tunnelInterfacePortHop"`
	// Variable name
	TunnelInterfacePortHopVariable string `pulumi:"tunnelInterfacePortHopVariable"`
	// Restrict this TLOC behavior
	TunnelInterfaceRestrict bool `pulumi:"tunnelInterfaceRestrict"`
	// Variable name
	TunnelInterfaceRestrictVariable string `pulumi:"tunnelInterfaceRestrictVariable"`
	// Tunnel TCP MSS on SYN packets, in bytes
	TunnelInterfaceTunnelTcpMss int `pulumi:"tunnelInterfaceTunnelTcpMss"`
	// Variable name
	TunnelInterfaceTunnelTcpMssVariable string `pulumi:"tunnelInterfaceTunnelTcpMssVariable"`
	// Put this wan interface in STUN mode only
	TunnelInterfaceVbondAsStunServer bool `pulumi:"tunnelInterfaceVbondAsStunServer"`
	// Variable name
	TunnelInterfaceVbondAsStunServerVariable string `pulumi:"tunnelInterfaceVbondAsStunServerVariable"`
	// Set interface preference for control connection to vManage \n\n
	TunnelInterfaceVmanageConnectionPreference int `pulumi:"tunnelInterfaceVmanageConnectionPreference"`
	// Variable name
	TunnelInterfaceVmanageConnectionPreferenceVariable string `pulumi:"tunnelInterfaceVmanageConnectionPreferenceVariable"`
	// Set tunnel QoS mode
	TunnelQosMode string `pulumi:"tunnelQosMode"`
	// Variable name
	TunnelQosModeVariable string `pulumi:"tunnelQosModeVariable"`
	// The version of the Feature
	Version int `pulumi:"version"`
}

func LookupTransportWanVpnInterfaceT1E1SerialFeatureOutput(ctx *pulumi.Context, args LookupTransportWanVpnInterfaceT1E1SerialFeatureOutputArgs, opts ...pulumi.InvokeOption) LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput, error) {
			args := v.(LookupTransportWanVpnInterfaceT1E1SerialFeatureArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdwan:index/getTransportWanVpnInterfaceT1E1SerialFeature:getTransportWanVpnInterfaceT1E1SerialFeature", args, LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput{}, options).(LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput), nil
		}).(LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput)
}

// A collection of arguments for invoking getTransportWanVpnInterfaceT1E1SerialFeature.
type LookupTransportWanVpnInterfaceT1E1SerialFeatureOutputArgs struct {
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput `pulumi:"featureProfileId"`
	// The id of the Feature
	Id pulumi.StringInput `pulumi:"id"`
	// Transport WAN VPN Feature ID
	TransportWanVpnFeatureId pulumi.StringInput `pulumi:"transportWanVpnFeatureId"`
}

func (LookupTransportWanVpnInterfaceT1E1SerialFeatureOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransportWanVpnInterfaceT1E1SerialFeatureArgs)(nil)).Elem()
}

// A collection of values returned by getTransportWanVpnInterfaceT1E1SerialFeature.
type LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput struct{ *pulumi.OutputState }

func (LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTransportWanVpnInterfaceT1E1SerialFeatureResult)(nil)).Elem()
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) ToLookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput() LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput {
	return o
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) ToLookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutputWithContext(ctx context.Context) LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput {
	return o
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) AclIpv4EgressFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.AclIpv4EgressFeatureId }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) AclIpv4IngressFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.AclIpv4IngressFeatureId }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) AclIpv6EgressFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.AclIpv6EgressFeatureId }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) AclIpv6IngressFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.AclIpv6IngressFeatureId }).(pulumi.StringOutput)
}

// Interface bandwidth capacity, in kbps
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// Interface downstream bandwidth capacity, in kbps
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) BandwidthDownstream() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.BandwidthDownstream }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) BandwidthDownstreamVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.BandwidthDownstreamVariable
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) BandwidthVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.BandwidthVariable }).(pulumi.StringOutput)
}

// Set preference for interface Clock speed
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) ClockRate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.ClockRate }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) ClockRateVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.ClockRateVariable }).(pulumi.StringOutput)
}

// The description of the Feature
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Description }).(pulumi.StringOutput)
}

// Configure Encapsulation for interface
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Encapsulation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Encapsulation }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) EncapsulationVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.EncapsulationVariable }).(pulumi.StringOutput)
}

// Feature Profile ID
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The id of the Feature
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Id }).(pulumi.StringOutput)
}

// Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.InterfaceName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) InterfaceNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.InterfaceNameVariable }).(pulumi.StringOutput)
}

// Set ip mtu
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) IpMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.IpMtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) IpMtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.IpMtuVariable }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Ipv4AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Ipv4AddressVariable }).(pulumi.StringOutput)
}

func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Ipv4SubnetMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Ipv4SubnetMask }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Ipv4SubnetMaskVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Ipv4SubnetMaskVariable }).(pulumi.StringOutput)
}

// Assign IPv6 address
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Ipv6AddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Ipv6AddressVariable }).(pulumi.StringOutput)
}

// Interface MTU \n\n, in bytes
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) MtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.MtuVariable }).(pulumi.StringOutput)
}

// The name of the Feature
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.Name }).(pulumi.StringOutput)
}

// Per-tunnel Qos
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) PerTunnelQos() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.PerTunnelQos }).(pulumi.BoolOutput)
}

// Per-tunnel QoS Aggregator
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) PerTunnelQosAggregator() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.PerTunnelQosAggregator }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) PerTunnelQosAggregatorVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.PerTunnelQosAggregatorVariable
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) PerTunnelQosVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.PerTunnelQosVariable }).(pulumi.StringOutput)
}

// 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) QosShapingRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.QosShapingRate }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) QosShapingRateVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.QosShapingRateVariable }).(pulumi.StringOutput)
}

// Administrative state
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) ShutdownVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.ShutdownVariable }).(pulumi.StringOutput)
}

// TCP MSS on SYN packets, in bytes
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TcpMss() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.TcpMss }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TcpMssVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TcpMssVariable }).(pulumi.StringOutput)
}

// Extends a local TLOC to a remote node only for vpn 0
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TlocExtension() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TlocExtension }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TlocExtensionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TlocExtensionVariable }).(pulumi.StringOutput)
}

// Transport WAN VPN Feature ID
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TransportWanVpnFeatureId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TransportWanVpnFeatureId
	}).(pulumi.StringOutput)
}

// Tunnel Interface
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterface() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterface }).(pulumi.BoolOutput)
}

// Allow all traffic. Overrides all other allow-service options if allow-service all is set
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowAll }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowAllVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowAllVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny BFD
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowBfd() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowBfd }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowBfdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowBfdVariable
	}).(pulumi.StringOutput)
}

// Allow/deny BGP
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowBgp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowBgp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowBgpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowBgpVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny DHCP
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowDhcp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowDhcpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowDhcpVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny DNS
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowDns() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowDns }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowDnsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowDnsVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny Https
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowHttps() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowHttps }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowHttpsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowHttpsVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny ICMP
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowIcmp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowIcmp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowIcmpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowIcmpVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny NETCONF
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowNetconf() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool {
		return v.TunnelInterfaceAllowNetconf
	}).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowNetconfVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowNetconfVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny NTP
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowNtp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowNtp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowNtpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowNtpVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny OSPF
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowOspf() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowOspf }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowOspfVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowOspfVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny SNMP
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowSnmp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowSnmp }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowSnmpVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowSnmpVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny SSH
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowSsh() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowSsh }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowSshVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowSshVariable
	}).(pulumi.StringOutput)
}

// Allow/Deny STUN
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowStun() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceAllowStun }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceAllowStunVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceAllowStunVariable
	}).(pulumi.StringOutput)
}

// Bind loopback tunnel interface to a physical interface
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceBindLoopbackTunnel() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceBindLoopbackTunnel
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceBindLoopbackTunnelVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceBindLoopbackTunnelVariable
	}).(pulumi.StringOutput)
}

// Set TLOC as border TLOC
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceBorder() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceBorder }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceBorderVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceBorderVariable
	}).(pulumi.StringOutput)
}

// Set carrier for TLOC
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceCarrier() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TunnelInterfaceCarrier }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceCarrierVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceCarrierVariable
	}).(pulumi.StringOutput)
}

// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceClearDontFragment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool {
		return v.TunnelInterfaceClearDontFragment
	}).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceClearDontFragmentVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceClearDontFragmentVariable
	}).(pulumi.StringOutput)
}

// Accept and respond to network-prefix-directed broadcasts)
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceClearNetworkBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool {
		return v.TunnelInterfaceClearNetworkBroadcast
	}).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceClearNetworkBroadcastVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceClearNetworkBroadcastVariable
	}).(pulumi.StringOutput)
}

// Set color for TLOC
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceColor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TunnelInterfaceColor }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceColorVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceColorVariable
	}).(pulumi.StringOutput)
}

// Encapsulation for TLOC
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceEncapsulations() GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) []GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation {
		return v.TunnelInterfaceEncapsulations
	}).(GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArrayOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceExcludeControllerGroupListVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceExcludeControllerGroupListVariable
	}).(pulumi.StringOutput)
}

// Exclude the following controller groups defined in this list
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceExcludeControllerGroupLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) []int {
		return v.TunnelInterfaceExcludeControllerGroupLists
	}).(pulumi.IntArrayOutput)
}

// List of groups
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceGroups() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.TunnelInterfaceGroups }).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceGroupsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceGroupsVariable
	}).(pulumi.StringOutput)
}

// Set time period of control hello packets \n\n milli seconds
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceHelloInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int {
		return v.TunnelInterfaceHelloInterval
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceHelloIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceHelloIntervalVariable
	}).(pulumi.StringOutput)
}

// Set tolerance of control hello packets \n\n seconds
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceHelloTolerance() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int {
		return v.TunnelInterfaceHelloTolerance
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceHelloToleranceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceHelloToleranceVariable
	}).(pulumi.StringOutput)
}

// Set TLOC as last resort
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceLastResortCircuit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool {
		return v.TunnelInterfaceLastResortCircuit
	}).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceLastResortCircuitVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceLastResortCircuitVariable
	}).(pulumi.StringOutput)
}

// Set the interface as a low-bandwidth circuit
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceLowBandwidthLink() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool {
		return v.TunnelInterfaceLowBandwidthLink
	}).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceLowBandwidthLinkVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceLowBandwidthLinkVariable
	}).(pulumi.StringOutput)
}

// Set the maximum number of control connections for this TLOC
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceMaxControlConnections() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int {
		return v.TunnelInterfaceMaxControlConnections
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceMaxControlConnectionsVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceMaxControlConnectionsVariable
	}).(pulumi.StringOutput)
}

// Set time period of nat refresh packets \n\n seconds
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceNatRefreshInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int {
		return v.TunnelInterfaceNatRefreshInterval
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceNatRefreshIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceNatRefreshIntervalVariable
	}).(pulumi.StringOutput)
}

// Disallow port hopping on the tunnel interface
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfacePortHop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfacePortHop }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfacePortHopVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfacePortHopVariable
	}).(pulumi.StringOutput)
}

// Restrict this TLOC behavior
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceRestrict() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool { return v.TunnelInterfaceRestrict }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceRestrictVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceRestrictVariable
	}).(pulumi.StringOutput)
}

// Tunnel TCP MSS on SYN packets, in bytes
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceTunnelTcpMss() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int {
		return v.TunnelInterfaceTunnelTcpMss
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceTunnelTcpMssVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceTunnelTcpMssVariable
	}).(pulumi.StringOutput)
}

// Put this wan interface in STUN mode only
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceVbondAsStunServer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) bool {
		return v.TunnelInterfaceVbondAsStunServer
	}).(pulumi.BoolOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceVbondAsStunServerVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceVbondAsStunServerVariable
	}).(pulumi.StringOutput)
}

// Set interface preference for control connection to vManage \n\n
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceVmanageConnectionPreference() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int {
		return v.TunnelInterfaceVmanageConnectionPreference
	}).(pulumi.IntOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelInterfaceVmanageConnectionPreferenceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string {
		return v.TunnelInterfaceVmanageConnectionPreferenceVariable
	}).(pulumi.StringOutput)
}

// Set tunnel QoS mode
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelQosMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TunnelQosMode }).(pulumi.StringOutput)
}

// Variable name
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) TunnelQosModeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) string { return v.TunnelQosModeVariable }).(pulumi.StringOutput)
}

// The version of the Feature
func (o LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTransportWanVpnInterfaceT1E1SerialFeatureResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTransportWanVpnInterfaceT1E1SerialFeatureResultOutput{})
}
