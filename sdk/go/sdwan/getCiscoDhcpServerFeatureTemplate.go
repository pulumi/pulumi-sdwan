// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco DHCP Server feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoDhcpServerFeatureTemplate(ctx, &sdwan.LookupCiscoDhcpServerFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoDhcpServerFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoDhcpServerFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoDhcpServerFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoDhcpServerFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoDhcpServerFeatureTemplate:getCiscoDhcpServerFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoDhcpServerFeatureTemplate.
type LookupCiscoDhcpServerFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoDhcpServerFeatureTemplate.
type LookupCiscoDhcpServerFeatureTemplateResult struct {
	// Configure IPv4 prefix range of the DHCP address pool
	AddressPool string `pulumi:"addressPool"`
	// Variable name
	AddressPoolVariable string `pulumi:"addressPoolVariable"`
	// Set IP address of default gateway
	DefaultGateway string `pulumi:"defaultGateway"`
	// Variable name
	DefaultGatewayVariable string `pulumi:"defaultGatewayVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Configure one or more DNS server IP addresses
	DnsServers []string `pulumi:"dnsServers"`
	// Variable name
	DnsServersVariable string `pulumi:"dnsServersVariable"`
	// Set domain name client uses to resolve hostnames
	DomainName string `pulumi:"domainName"`
	// Variable name
	DomainNameVariable string `pulumi:"domainNameVariable"`
	// Configure IPv4 address to exclude from DHCP address pool
	ExcludeAddresses []string `pulumi:"excludeAddresses"`
	// Variable name
	ExcludeAddressesVariable string `pulumi:"excludeAddressesVariable"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Set MTU on interface to DHCP client
	InterfaceMtu int `pulumi:"interfaceMtu"`
	// Variable name
	InterfaceMtuVariable string `pulumi:"interfaceMtuVariable"`
	// Configure how long a DHCP-assigned IP address is valid
	LeaseTime int `pulumi:"leaseTime"`
	// Variable name
	LeaseTimeVariable string `pulumi:"leaseTimeVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Configure Options Code
	Options []GetCiscoDhcpServerFeatureTemplateOption `pulumi:"options"`
	// Configure static IP addresses
	StaticLeases []GetCiscoDhcpServerFeatureTemplateStaticLease `pulumi:"staticLeases"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// Configure TFTP server IP addresses
	TftpServers []string `pulumi:"tftpServers"`
	// Variable name
	TftpServersVariable string `pulumi:"tftpServersVariable"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoDhcpServerFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoDhcpServerFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoDhcpServerFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCiscoDhcpServerFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoDhcpServerFeatureTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdwan:index/getCiscoDhcpServerFeatureTemplate:getCiscoDhcpServerFeatureTemplate", args, LookupCiscoDhcpServerFeatureTemplateResultOutput{}, options).(LookupCiscoDhcpServerFeatureTemplateResultOutput), nil
		}).(LookupCiscoDhcpServerFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoDhcpServerFeatureTemplate.
type LookupCiscoDhcpServerFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoDhcpServerFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoDhcpServerFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoDhcpServerFeatureTemplate.
type LookupCiscoDhcpServerFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoDhcpServerFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoDhcpServerFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) ToLookupCiscoDhcpServerFeatureTemplateResultOutput() LookupCiscoDhcpServerFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) ToLookupCiscoDhcpServerFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoDhcpServerFeatureTemplateResultOutput {
	return o
}

// Configure IPv4 prefix range of the DHCP address pool
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) AddressPool() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.AddressPool }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) AddressPoolVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.AddressPoolVariable }).(pulumi.StringOutput)
}

// Set IP address of default gateway
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DefaultGateway() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.DefaultGateway }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DefaultGatewayVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.DefaultGatewayVariable }).(pulumi.StringOutput)
}

// The description of the feature template
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Configure one or more DNS server IP addresses
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DnsServersVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.DnsServersVariable }).(pulumi.StringOutput)
}

// Set domain name client uses to resolve hostnames
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) DomainNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.DomainNameVariable }).(pulumi.StringOutput)
}

// Configure IPv4 address to exclude from DHCP address pool
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) ExcludeAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) []string { return v.ExcludeAddresses }).(pulumi.StringArrayOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) ExcludeAddressesVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.ExcludeAddressesVariable }).(pulumi.StringOutput)
}

// The id of the feature template
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Set MTU on interface to DHCP client
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) InterfaceMtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) int { return v.InterfaceMtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) InterfaceMtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.InterfaceMtuVariable }).(pulumi.StringOutput)
}

// Configure how long a DHCP-assigned IP address is valid
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) LeaseTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) int { return v.LeaseTime }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) LeaseTimeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.LeaseTimeVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Configure Options Code
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) Options() GetCiscoDhcpServerFeatureTemplateOptionArrayOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) []GetCiscoDhcpServerFeatureTemplateOption {
		return v.Options
	}).(GetCiscoDhcpServerFeatureTemplateOptionArrayOutput)
}

// Configure static IP addresses
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) StaticLeases() GetCiscoDhcpServerFeatureTemplateStaticLeaseArrayOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) []GetCiscoDhcpServerFeatureTemplateStaticLease {
		return v.StaticLeases
	}).(GetCiscoDhcpServerFeatureTemplateStaticLeaseArrayOutput)
}

// The template type
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Configure TFTP server IP addresses
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) TftpServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) []string { return v.TftpServers }).(pulumi.StringArrayOutput)
}

// Variable name
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) TftpServersVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) string { return v.TftpServersVariable }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoDhcpServerFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoDhcpServerFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoDhcpServerFeatureTemplateResultOutput{})
}
