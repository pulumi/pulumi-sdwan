// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Service Tracker Group Feature.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// Expected import identifier with the format: "service_tracker_group_feature_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/serviceTrackerGroupFeature:ServiceTrackerGroupFeature example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type ServiceTrackerGroupFeature struct {
	pulumi.CustomResourceState

	// The description of the Feature
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Feature
	Name pulumi.StringOutput `pulumi:"name"`
	// tracker ref list combine boolean and or - Choices: `and`, `or` - Default value: `or`
	TrackerBoolean pulumi.StringPtrOutput `pulumi:"trackerBoolean"`
	// Variable name
	TrackerBooleanVariable pulumi.StringPtrOutput `pulumi:"trackerBooleanVariable"`
	// tracker parcel ref list
	TrackerElements ServiceTrackerGroupFeatureTrackerElementArrayOutput `pulumi:"trackerElements"`
	// The version of the Feature
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewServiceTrackerGroupFeature registers a new resource with the given unique name, arguments, and options.
func NewServiceTrackerGroupFeature(ctx *pulumi.Context,
	name string, args *ServiceTrackerGroupFeatureArgs, opts ...pulumi.ResourceOption) (*ServiceTrackerGroupFeature, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceTrackerGroupFeature
	err := ctx.RegisterResource("sdwan:index/serviceTrackerGroupFeature:ServiceTrackerGroupFeature", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceTrackerGroupFeature gets an existing ServiceTrackerGroupFeature resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceTrackerGroupFeature(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceTrackerGroupFeatureState, opts ...pulumi.ResourceOption) (*ServiceTrackerGroupFeature, error) {
	var resource ServiceTrackerGroupFeature
	err := ctx.ReadResource("sdwan:index/serviceTrackerGroupFeature:ServiceTrackerGroupFeature", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceTrackerGroupFeature resources.
type serviceTrackerGroupFeatureState struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// tracker ref list combine boolean and or - Choices: `and`, `or` - Default value: `or`
	TrackerBoolean *string `pulumi:"trackerBoolean"`
	// Variable name
	TrackerBooleanVariable *string `pulumi:"trackerBooleanVariable"`
	// tracker parcel ref list
	TrackerElements []ServiceTrackerGroupFeatureTrackerElement `pulumi:"trackerElements"`
	// The version of the Feature
	Version *int `pulumi:"version"`
}

type ServiceTrackerGroupFeatureState struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// tracker ref list combine boolean and or - Choices: `and`, `or` - Default value: `or`
	TrackerBoolean pulumi.StringPtrInput
	// Variable name
	TrackerBooleanVariable pulumi.StringPtrInput
	// tracker parcel ref list
	TrackerElements ServiceTrackerGroupFeatureTrackerElementArrayInput
	// The version of the Feature
	Version pulumi.IntPtrInput
}

func (ServiceTrackerGroupFeatureState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceTrackerGroupFeatureState)(nil)).Elem()
}

type serviceTrackerGroupFeatureArgs struct {
	// The description of the Feature
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Feature
	Name *string `pulumi:"name"`
	// tracker ref list combine boolean and or - Choices: `and`, `or` - Default value: `or`
	TrackerBoolean *string `pulumi:"trackerBoolean"`
	// Variable name
	TrackerBooleanVariable *string `pulumi:"trackerBooleanVariable"`
	// tracker parcel ref list
	TrackerElements []ServiceTrackerGroupFeatureTrackerElement `pulumi:"trackerElements"`
}

// The set of arguments for constructing a ServiceTrackerGroupFeature resource.
type ServiceTrackerGroupFeatureArgs struct {
	// The description of the Feature
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Feature
	Name pulumi.StringPtrInput
	// tracker ref list combine boolean and or - Choices: `and`, `or` - Default value: `or`
	TrackerBoolean pulumi.StringPtrInput
	// Variable name
	TrackerBooleanVariable pulumi.StringPtrInput
	// tracker parcel ref list
	TrackerElements ServiceTrackerGroupFeatureTrackerElementArrayInput
}

func (ServiceTrackerGroupFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceTrackerGroupFeatureArgs)(nil)).Elem()
}

type ServiceTrackerGroupFeatureInput interface {
	pulumi.Input

	ToServiceTrackerGroupFeatureOutput() ServiceTrackerGroupFeatureOutput
	ToServiceTrackerGroupFeatureOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureOutput
}

func (*ServiceTrackerGroupFeature) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTrackerGroupFeature)(nil)).Elem()
}

func (i *ServiceTrackerGroupFeature) ToServiceTrackerGroupFeatureOutput() ServiceTrackerGroupFeatureOutput {
	return i.ToServiceTrackerGroupFeatureOutputWithContext(context.Background())
}

func (i *ServiceTrackerGroupFeature) ToServiceTrackerGroupFeatureOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTrackerGroupFeatureOutput)
}

// ServiceTrackerGroupFeatureArrayInput is an input type that accepts ServiceTrackerGroupFeatureArray and ServiceTrackerGroupFeatureArrayOutput values.
// You can construct a concrete instance of `ServiceTrackerGroupFeatureArrayInput` via:
//
//	ServiceTrackerGroupFeatureArray{ ServiceTrackerGroupFeatureArgs{...} }
type ServiceTrackerGroupFeatureArrayInput interface {
	pulumi.Input

	ToServiceTrackerGroupFeatureArrayOutput() ServiceTrackerGroupFeatureArrayOutput
	ToServiceTrackerGroupFeatureArrayOutputWithContext(context.Context) ServiceTrackerGroupFeatureArrayOutput
}

type ServiceTrackerGroupFeatureArray []ServiceTrackerGroupFeatureInput

func (ServiceTrackerGroupFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceTrackerGroupFeature)(nil)).Elem()
}

func (i ServiceTrackerGroupFeatureArray) ToServiceTrackerGroupFeatureArrayOutput() ServiceTrackerGroupFeatureArrayOutput {
	return i.ToServiceTrackerGroupFeatureArrayOutputWithContext(context.Background())
}

func (i ServiceTrackerGroupFeatureArray) ToServiceTrackerGroupFeatureArrayOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTrackerGroupFeatureArrayOutput)
}

// ServiceTrackerGroupFeatureMapInput is an input type that accepts ServiceTrackerGroupFeatureMap and ServiceTrackerGroupFeatureMapOutput values.
// You can construct a concrete instance of `ServiceTrackerGroupFeatureMapInput` via:
//
//	ServiceTrackerGroupFeatureMap{ "key": ServiceTrackerGroupFeatureArgs{...} }
type ServiceTrackerGroupFeatureMapInput interface {
	pulumi.Input

	ToServiceTrackerGroupFeatureMapOutput() ServiceTrackerGroupFeatureMapOutput
	ToServiceTrackerGroupFeatureMapOutputWithContext(context.Context) ServiceTrackerGroupFeatureMapOutput
}

type ServiceTrackerGroupFeatureMap map[string]ServiceTrackerGroupFeatureInput

func (ServiceTrackerGroupFeatureMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceTrackerGroupFeature)(nil)).Elem()
}

func (i ServiceTrackerGroupFeatureMap) ToServiceTrackerGroupFeatureMapOutput() ServiceTrackerGroupFeatureMapOutput {
	return i.ToServiceTrackerGroupFeatureMapOutputWithContext(context.Background())
}

func (i ServiceTrackerGroupFeatureMap) ToServiceTrackerGroupFeatureMapOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTrackerGroupFeatureMapOutput)
}

type ServiceTrackerGroupFeatureOutput struct{ *pulumi.OutputState }

func (ServiceTrackerGroupFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceTrackerGroupFeature)(nil)).Elem()
}

func (o ServiceTrackerGroupFeatureOutput) ToServiceTrackerGroupFeatureOutput() ServiceTrackerGroupFeatureOutput {
	return o
}

func (o ServiceTrackerGroupFeatureOutput) ToServiceTrackerGroupFeatureOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureOutput {
	return o
}

// The description of the Feature
func (o ServiceTrackerGroupFeatureOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Feature Profile ID
func (o ServiceTrackerGroupFeatureOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Feature
func (o ServiceTrackerGroupFeatureOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// tracker ref list combine boolean and or - Choices: `and`, `or` - Default value: `or`
func (o ServiceTrackerGroupFeatureOutput) TrackerBoolean() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) pulumi.StringPtrOutput { return v.TrackerBoolean }).(pulumi.StringPtrOutput)
}

// Variable name
func (o ServiceTrackerGroupFeatureOutput) TrackerBooleanVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) pulumi.StringPtrOutput { return v.TrackerBooleanVariable }).(pulumi.StringPtrOutput)
}

// tracker parcel ref list
func (o ServiceTrackerGroupFeatureOutput) TrackerElements() ServiceTrackerGroupFeatureTrackerElementArrayOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) ServiceTrackerGroupFeatureTrackerElementArrayOutput {
		return v.TrackerElements
	}).(ServiceTrackerGroupFeatureTrackerElementArrayOutput)
}

// The version of the Feature
func (o ServiceTrackerGroupFeatureOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceTrackerGroupFeature) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ServiceTrackerGroupFeatureArrayOutput struct{ *pulumi.OutputState }

func (ServiceTrackerGroupFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceTrackerGroupFeature)(nil)).Elem()
}

func (o ServiceTrackerGroupFeatureArrayOutput) ToServiceTrackerGroupFeatureArrayOutput() ServiceTrackerGroupFeatureArrayOutput {
	return o
}

func (o ServiceTrackerGroupFeatureArrayOutput) ToServiceTrackerGroupFeatureArrayOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureArrayOutput {
	return o
}

func (o ServiceTrackerGroupFeatureArrayOutput) Index(i pulumi.IntInput) ServiceTrackerGroupFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceTrackerGroupFeature {
		return vs[0].([]*ServiceTrackerGroupFeature)[vs[1].(int)]
	}).(ServiceTrackerGroupFeatureOutput)
}

type ServiceTrackerGroupFeatureMapOutput struct{ *pulumi.OutputState }

func (ServiceTrackerGroupFeatureMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceTrackerGroupFeature)(nil)).Elem()
}

func (o ServiceTrackerGroupFeatureMapOutput) ToServiceTrackerGroupFeatureMapOutput() ServiceTrackerGroupFeatureMapOutput {
	return o
}

func (o ServiceTrackerGroupFeatureMapOutput) ToServiceTrackerGroupFeatureMapOutputWithContext(ctx context.Context) ServiceTrackerGroupFeatureMapOutput {
	return o
}

func (o ServiceTrackerGroupFeatureMapOutput) MapIndex(k pulumi.StringInput) ServiceTrackerGroupFeatureOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceTrackerGroupFeature {
		return vs[0].(map[string]*ServiceTrackerGroupFeature)[vs[1].(string)]
	}).(ServiceTrackerGroupFeatureOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTrackerGroupFeatureInput)(nil)).Elem(), &ServiceTrackerGroupFeature{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTrackerGroupFeatureArrayInput)(nil)).Elem(), ServiceTrackerGroupFeatureArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTrackerGroupFeatureMapInput)(nil)).Elem(), ServiceTrackerGroupFeatureMap{})
	pulumi.RegisterOutputType(ServiceTrackerGroupFeatureOutput{})
	pulumi.RegisterOutputType(ServiceTrackerGroupFeatureArrayOutput{})
	pulumi.RegisterOutputType(ServiceTrackerGroupFeatureMapOutput{})
}
