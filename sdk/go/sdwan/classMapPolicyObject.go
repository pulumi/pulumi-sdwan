// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Class Map Policy Object .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewClassMapPolicyObject(ctx, "example", &sdwan.ClassMapPolicyObjectArgs{
//				Name:  pulumi.String("Example"),
//				Queue: pulumi.Int(2),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/classMapPolicyObject:ClassMapPolicyObject example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type ClassMapPolicyObject struct {
	pulumi.CustomResourceState

	// The name of the policy object
	Name pulumi.StringOutput `pulumi:"name"`
	// Queue
	//   - Range: `0`-`7`
	Queue pulumi.IntOutput `pulumi:"queue"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewClassMapPolicyObject registers a new resource with the given unique name, arguments, and options.
func NewClassMapPolicyObject(ctx *pulumi.Context,
	name string, args *ClassMapPolicyObjectArgs, opts ...pulumi.ResourceOption) (*ClassMapPolicyObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Queue == nil {
		return nil, errors.New("invalid value for required argument 'Queue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClassMapPolicyObject
	err := ctx.RegisterResource("sdwan:index/classMapPolicyObject:ClassMapPolicyObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClassMapPolicyObject gets an existing ClassMapPolicyObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClassMapPolicyObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClassMapPolicyObjectState, opts ...pulumi.ResourceOption) (*ClassMapPolicyObject, error) {
	var resource ClassMapPolicyObject
	err := ctx.ReadResource("sdwan:index/classMapPolicyObject:ClassMapPolicyObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClassMapPolicyObject resources.
type classMapPolicyObjectState struct {
	// The name of the policy object
	Name *string `pulumi:"name"`
	// Queue
	//   - Range: `0`-`7`
	Queue *int `pulumi:"queue"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type ClassMapPolicyObjectState struct {
	// The name of the policy object
	Name pulumi.StringPtrInput
	// Queue
	//   - Range: `0`-`7`
	Queue pulumi.IntPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (ClassMapPolicyObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*classMapPolicyObjectState)(nil)).Elem()
}

type classMapPolicyObjectArgs struct {
	// The name of the policy object
	Name *string `pulumi:"name"`
	// Queue
	//   - Range: `0`-`7`
	Queue int `pulumi:"queue"`
}

// The set of arguments for constructing a ClassMapPolicyObject resource.
type ClassMapPolicyObjectArgs struct {
	// The name of the policy object
	Name pulumi.StringPtrInput
	// Queue
	//   - Range: `0`-`7`
	Queue pulumi.IntInput
}

func (ClassMapPolicyObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*classMapPolicyObjectArgs)(nil)).Elem()
}

type ClassMapPolicyObjectInput interface {
	pulumi.Input

	ToClassMapPolicyObjectOutput() ClassMapPolicyObjectOutput
	ToClassMapPolicyObjectOutputWithContext(ctx context.Context) ClassMapPolicyObjectOutput
}

func (*ClassMapPolicyObject) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassMapPolicyObject)(nil)).Elem()
}

func (i *ClassMapPolicyObject) ToClassMapPolicyObjectOutput() ClassMapPolicyObjectOutput {
	return i.ToClassMapPolicyObjectOutputWithContext(context.Background())
}

func (i *ClassMapPolicyObject) ToClassMapPolicyObjectOutputWithContext(ctx context.Context) ClassMapPolicyObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassMapPolicyObjectOutput)
}

// ClassMapPolicyObjectArrayInput is an input type that accepts ClassMapPolicyObjectArray and ClassMapPolicyObjectArrayOutput values.
// You can construct a concrete instance of `ClassMapPolicyObjectArrayInput` via:
//
//	ClassMapPolicyObjectArray{ ClassMapPolicyObjectArgs{...} }
type ClassMapPolicyObjectArrayInput interface {
	pulumi.Input

	ToClassMapPolicyObjectArrayOutput() ClassMapPolicyObjectArrayOutput
	ToClassMapPolicyObjectArrayOutputWithContext(context.Context) ClassMapPolicyObjectArrayOutput
}

type ClassMapPolicyObjectArray []ClassMapPolicyObjectInput

func (ClassMapPolicyObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClassMapPolicyObject)(nil)).Elem()
}

func (i ClassMapPolicyObjectArray) ToClassMapPolicyObjectArrayOutput() ClassMapPolicyObjectArrayOutput {
	return i.ToClassMapPolicyObjectArrayOutputWithContext(context.Background())
}

func (i ClassMapPolicyObjectArray) ToClassMapPolicyObjectArrayOutputWithContext(ctx context.Context) ClassMapPolicyObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassMapPolicyObjectArrayOutput)
}

// ClassMapPolicyObjectMapInput is an input type that accepts ClassMapPolicyObjectMap and ClassMapPolicyObjectMapOutput values.
// You can construct a concrete instance of `ClassMapPolicyObjectMapInput` via:
//
//	ClassMapPolicyObjectMap{ "key": ClassMapPolicyObjectArgs{...} }
type ClassMapPolicyObjectMapInput interface {
	pulumi.Input

	ToClassMapPolicyObjectMapOutput() ClassMapPolicyObjectMapOutput
	ToClassMapPolicyObjectMapOutputWithContext(context.Context) ClassMapPolicyObjectMapOutput
}

type ClassMapPolicyObjectMap map[string]ClassMapPolicyObjectInput

func (ClassMapPolicyObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClassMapPolicyObject)(nil)).Elem()
}

func (i ClassMapPolicyObjectMap) ToClassMapPolicyObjectMapOutput() ClassMapPolicyObjectMapOutput {
	return i.ToClassMapPolicyObjectMapOutputWithContext(context.Background())
}

func (i ClassMapPolicyObjectMap) ToClassMapPolicyObjectMapOutputWithContext(ctx context.Context) ClassMapPolicyObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassMapPolicyObjectMapOutput)
}

type ClassMapPolicyObjectOutput struct{ *pulumi.OutputState }

func (ClassMapPolicyObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClassMapPolicyObject)(nil)).Elem()
}

func (o ClassMapPolicyObjectOutput) ToClassMapPolicyObjectOutput() ClassMapPolicyObjectOutput {
	return o
}

func (o ClassMapPolicyObjectOutput) ToClassMapPolicyObjectOutputWithContext(ctx context.Context) ClassMapPolicyObjectOutput {
	return o
}

// The name of the policy object
func (o ClassMapPolicyObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClassMapPolicyObject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Queue
//   - Range: `0`-`7`
func (o ClassMapPolicyObjectOutput) Queue() pulumi.IntOutput {
	return o.ApplyT(func(v *ClassMapPolicyObject) pulumi.IntOutput { return v.Queue }).(pulumi.IntOutput)
}

// The version of the object
func (o ClassMapPolicyObjectOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *ClassMapPolicyObject) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ClassMapPolicyObjectArrayOutput struct{ *pulumi.OutputState }

func (ClassMapPolicyObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClassMapPolicyObject)(nil)).Elem()
}

func (o ClassMapPolicyObjectArrayOutput) ToClassMapPolicyObjectArrayOutput() ClassMapPolicyObjectArrayOutput {
	return o
}

func (o ClassMapPolicyObjectArrayOutput) ToClassMapPolicyObjectArrayOutputWithContext(ctx context.Context) ClassMapPolicyObjectArrayOutput {
	return o
}

func (o ClassMapPolicyObjectArrayOutput) Index(i pulumi.IntInput) ClassMapPolicyObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClassMapPolicyObject {
		return vs[0].([]*ClassMapPolicyObject)[vs[1].(int)]
	}).(ClassMapPolicyObjectOutput)
}

type ClassMapPolicyObjectMapOutput struct{ *pulumi.OutputState }

func (ClassMapPolicyObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClassMapPolicyObject)(nil)).Elem()
}

func (o ClassMapPolicyObjectMapOutput) ToClassMapPolicyObjectMapOutput() ClassMapPolicyObjectMapOutput {
	return o
}

func (o ClassMapPolicyObjectMapOutput) ToClassMapPolicyObjectMapOutputWithContext(ctx context.Context) ClassMapPolicyObjectMapOutput {
	return o
}

func (o ClassMapPolicyObjectMapOutput) MapIndex(k pulumi.StringInput) ClassMapPolicyObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClassMapPolicyObject {
		return vs[0].(map[string]*ClassMapPolicyObject)[vs[1].(string)]
	}).(ClassMapPolicyObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClassMapPolicyObjectInput)(nil)).Elem(), &ClassMapPolicyObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassMapPolicyObjectArrayInput)(nil)).Elem(), ClassMapPolicyObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassMapPolicyObjectMapInput)(nil)).Elem(), ClassMapPolicyObjectMap{})
	pulumi.RegisterOutputType(ClassMapPolicyObjectOutput{})
	pulumi.RegisterOutputType(ClassMapPolicyObjectArrayOutput{})
	pulumi.RegisterOutputType(ClassMapPolicyObjectMapOutput{})
}
