// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Policy Object Policer Policy_object.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// Expected import identifier with the format: "policy_object_policer_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/policyObjectPolicer:PolicyObjectPolicer example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type PolicyObjectPolicer struct {
	pulumi.CustomResourceState

	// The description of the Policy_object
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Policer Entries
	Entries PolicyObjectPolicerEntryArrayOutput `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the Policy_object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPolicyObjectPolicer registers a new resource with the given unique name, arguments, and options.
func NewPolicyObjectPolicer(ctx *pulumi.Context,
	name string, args *PolicyObjectPolicerArgs, opts ...pulumi.ResourceOption) (*PolicyObjectPolicer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyObjectPolicer
	err := ctx.RegisterResource("sdwan:index/policyObjectPolicer:PolicyObjectPolicer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyObjectPolicer gets an existing PolicyObjectPolicer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyObjectPolicer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyObjectPolicerState, opts ...pulumi.ResourceOption) (*PolicyObjectPolicer, error) {
	var resource PolicyObjectPolicer
	err := ctx.ReadResource("sdwan:index/policyObjectPolicer:PolicyObjectPolicer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyObjectPolicer resources.
type policyObjectPolicerState struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// Policer Entries
	Entries []PolicyObjectPolicerEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
	// The version of the Policy_object
	Version *int `pulumi:"version"`
}

type PolicyObjectPolicerState struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// Policer Entries
	Entries PolicyObjectPolicerEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
	// The version of the Policy_object
	Version pulumi.IntPtrInput
}

func (PolicyObjectPolicerState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectPolicerState)(nil)).Elem()
}

type policyObjectPolicerArgs struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// Policer Entries
	Entries []PolicyObjectPolicerEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyObjectPolicer resource.
type PolicyObjectPolicerArgs struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// Policer Entries
	Entries PolicyObjectPolicerEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
}

func (PolicyObjectPolicerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectPolicerArgs)(nil)).Elem()
}

type PolicyObjectPolicerInput interface {
	pulumi.Input

	ToPolicyObjectPolicerOutput() PolicyObjectPolicerOutput
	ToPolicyObjectPolicerOutputWithContext(ctx context.Context) PolicyObjectPolicerOutput
}

func (*PolicyObjectPolicer) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectPolicer)(nil)).Elem()
}

func (i *PolicyObjectPolicer) ToPolicyObjectPolicerOutput() PolicyObjectPolicerOutput {
	return i.ToPolicyObjectPolicerOutputWithContext(context.Background())
}

func (i *PolicyObjectPolicer) ToPolicyObjectPolicerOutputWithContext(ctx context.Context) PolicyObjectPolicerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectPolicerOutput)
}

// PolicyObjectPolicerArrayInput is an input type that accepts PolicyObjectPolicerArray and PolicyObjectPolicerArrayOutput values.
// You can construct a concrete instance of `PolicyObjectPolicerArrayInput` via:
//
//	PolicyObjectPolicerArray{ PolicyObjectPolicerArgs{...} }
type PolicyObjectPolicerArrayInput interface {
	pulumi.Input

	ToPolicyObjectPolicerArrayOutput() PolicyObjectPolicerArrayOutput
	ToPolicyObjectPolicerArrayOutputWithContext(context.Context) PolicyObjectPolicerArrayOutput
}

type PolicyObjectPolicerArray []PolicyObjectPolicerInput

func (PolicyObjectPolicerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectPolicer)(nil)).Elem()
}

func (i PolicyObjectPolicerArray) ToPolicyObjectPolicerArrayOutput() PolicyObjectPolicerArrayOutput {
	return i.ToPolicyObjectPolicerArrayOutputWithContext(context.Background())
}

func (i PolicyObjectPolicerArray) ToPolicyObjectPolicerArrayOutputWithContext(ctx context.Context) PolicyObjectPolicerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectPolicerArrayOutput)
}

// PolicyObjectPolicerMapInput is an input type that accepts PolicyObjectPolicerMap and PolicyObjectPolicerMapOutput values.
// You can construct a concrete instance of `PolicyObjectPolicerMapInput` via:
//
//	PolicyObjectPolicerMap{ "key": PolicyObjectPolicerArgs{...} }
type PolicyObjectPolicerMapInput interface {
	pulumi.Input

	ToPolicyObjectPolicerMapOutput() PolicyObjectPolicerMapOutput
	ToPolicyObjectPolicerMapOutputWithContext(context.Context) PolicyObjectPolicerMapOutput
}

type PolicyObjectPolicerMap map[string]PolicyObjectPolicerInput

func (PolicyObjectPolicerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectPolicer)(nil)).Elem()
}

func (i PolicyObjectPolicerMap) ToPolicyObjectPolicerMapOutput() PolicyObjectPolicerMapOutput {
	return i.ToPolicyObjectPolicerMapOutputWithContext(context.Background())
}

func (i PolicyObjectPolicerMap) ToPolicyObjectPolicerMapOutputWithContext(ctx context.Context) PolicyObjectPolicerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectPolicerMapOutput)
}

type PolicyObjectPolicerOutput struct{ *pulumi.OutputState }

func (PolicyObjectPolicerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectPolicer)(nil)).Elem()
}

func (o PolicyObjectPolicerOutput) ToPolicyObjectPolicerOutput() PolicyObjectPolicerOutput {
	return o
}

func (o PolicyObjectPolicerOutput) ToPolicyObjectPolicerOutputWithContext(ctx context.Context) PolicyObjectPolicerOutput {
	return o
}

// The description of the Policy_object
func (o PolicyObjectPolicerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyObjectPolicer) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Policer Entries
func (o PolicyObjectPolicerOutput) Entries() PolicyObjectPolicerEntryArrayOutput {
	return o.ApplyT(func(v *PolicyObjectPolicer) PolicyObjectPolicerEntryArrayOutput { return v.Entries }).(PolicyObjectPolicerEntryArrayOutput)
}

// Feature Profile ID
func (o PolicyObjectPolicerOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectPolicer) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Policy_object
func (o PolicyObjectPolicerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectPolicer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the Policy_object
func (o PolicyObjectPolicerOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyObjectPolicer) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type PolicyObjectPolicerArrayOutput struct{ *pulumi.OutputState }

func (PolicyObjectPolicerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectPolicer)(nil)).Elem()
}

func (o PolicyObjectPolicerArrayOutput) ToPolicyObjectPolicerArrayOutput() PolicyObjectPolicerArrayOutput {
	return o
}

func (o PolicyObjectPolicerArrayOutput) ToPolicyObjectPolicerArrayOutputWithContext(ctx context.Context) PolicyObjectPolicerArrayOutput {
	return o
}

func (o PolicyObjectPolicerArrayOutput) Index(i pulumi.IntInput) PolicyObjectPolicerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyObjectPolicer {
		return vs[0].([]*PolicyObjectPolicer)[vs[1].(int)]
	}).(PolicyObjectPolicerOutput)
}

type PolicyObjectPolicerMapOutput struct{ *pulumi.OutputState }

func (PolicyObjectPolicerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectPolicer)(nil)).Elem()
}

func (o PolicyObjectPolicerMapOutput) ToPolicyObjectPolicerMapOutput() PolicyObjectPolicerMapOutput {
	return o
}

func (o PolicyObjectPolicerMapOutput) ToPolicyObjectPolicerMapOutputWithContext(ctx context.Context) PolicyObjectPolicerMapOutput {
	return o
}

func (o PolicyObjectPolicerMapOutput) MapIndex(k pulumi.StringInput) PolicyObjectPolicerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyObjectPolicer {
		return vs[0].(map[string]*PolicyObjectPolicer)[vs[1].(string)]
	}).(PolicyObjectPolicerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectPolicerInput)(nil)).Elem(), &PolicyObjectPolicer{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectPolicerArrayInput)(nil)).Elem(), PolicyObjectPolicerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectPolicerMapInput)(nil)).Elem(), PolicyObjectPolicerMap{})
	pulumi.RegisterOutputType(PolicyObjectPolicerOutput{})
	pulumi.RegisterOutputType(PolicyObjectPolicerArrayOutput{})
	pulumi.RegisterOutputType(PolicyObjectPolicerMapOutput{})
}
