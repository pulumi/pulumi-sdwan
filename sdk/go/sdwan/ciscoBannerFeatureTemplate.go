// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Cisco Banner feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCiscoBannerFeatureTemplate(ctx, "example", &sdwan.CiscoBannerFeatureTemplateArgs{
//				Name:        pulumi.String("Example"),
//				Description: pulumi.String("My Example"),
//				DeviceTypes: pulumi.StringArray{
//					pulumi.String("vedge-C8000V"),
//				},
//				Login: pulumi.String("My Login Banner"),
//				Motd:  pulumi.String("My MOTD Banner"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/ciscoBannerFeatureTemplate:CiscoBannerFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CiscoBannerFeatureTemplate struct {
	pulumi.CustomResourceState

	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Set message to display before login prompt
	Login pulumi.StringPtrOutput `pulumi:"login"`
	// Variable name
	LoginVariable pulumi.StringPtrOutput `pulumi:"loginVariable"`
	// Set message to display after a user logs in
	Motd pulumi.StringPtrOutput `pulumi:"motd"`
	// Variable name
	MotdVariable pulumi.StringPtrOutput `pulumi:"motdVariable"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCiscoBannerFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCiscoBannerFeatureTemplate(ctx *pulumi.Context,
	name string, args *CiscoBannerFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CiscoBannerFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CiscoBannerFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/ciscoBannerFeatureTemplate:CiscoBannerFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCiscoBannerFeatureTemplate gets an existing CiscoBannerFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCiscoBannerFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CiscoBannerFeatureTemplateState, opts ...pulumi.ResourceOption) (*CiscoBannerFeatureTemplate, error) {
	var resource CiscoBannerFeatureTemplate
	err := ctx.ReadResource("sdwan:index/ciscoBannerFeatureTemplate:CiscoBannerFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CiscoBannerFeatureTemplate resources.
type ciscoBannerFeatureTemplateState struct {
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set message to display before login prompt
	Login *string `pulumi:"login"`
	// Variable name
	LoginVariable *string `pulumi:"loginVariable"`
	// Set message to display after a user logs in
	Motd *string `pulumi:"motd"`
	// Variable name
	MotdVariable *string `pulumi:"motdVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CiscoBannerFeatureTemplateState struct {
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Set message to display before login prompt
	Login pulumi.StringPtrInput
	// Variable name
	LoginVariable pulumi.StringPtrInput
	// Set message to display after a user logs in
	Motd pulumi.StringPtrInput
	// Variable name
	MotdVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CiscoBannerFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoBannerFeatureTemplateState)(nil)).Elem()
}

type ciscoBannerFeatureTemplateArgs struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set message to display before login prompt
	Login *string `pulumi:"login"`
	// Variable name
	LoginVariable *string `pulumi:"loginVariable"`
	// Set message to display after a user logs in
	Motd *string `pulumi:"motd"`
	// Variable name
	MotdVariable *string `pulumi:"motdVariable"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CiscoBannerFeatureTemplate resource.
type CiscoBannerFeatureTemplateArgs struct {
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Set message to display before login prompt
	Login pulumi.StringPtrInput
	// Variable name
	LoginVariable pulumi.StringPtrInput
	// Set message to display after a user logs in
	Motd pulumi.StringPtrInput
	// Variable name
	MotdVariable pulumi.StringPtrInput
	// The name of the feature template
	Name pulumi.StringPtrInput
}

func (CiscoBannerFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ciscoBannerFeatureTemplateArgs)(nil)).Elem()
}

type CiscoBannerFeatureTemplateInput interface {
	pulumi.Input

	ToCiscoBannerFeatureTemplateOutput() CiscoBannerFeatureTemplateOutput
	ToCiscoBannerFeatureTemplateOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateOutput
}

func (*CiscoBannerFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoBannerFeatureTemplate)(nil)).Elem()
}

func (i *CiscoBannerFeatureTemplate) ToCiscoBannerFeatureTemplateOutput() CiscoBannerFeatureTemplateOutput {
	return i.ToCiscoBannerFeatureTemplateOutputWithContext(context.Background())
}

func (i *CiscoBannerFeatureTemplate) ToCiscoBannerFeatureTemplateOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoBannerFeatureTemplateOutput)
}

// CiscoBannerFeatureTemplateArrayInput is an input type that accepts CiscoBannerFeatureTemplateArray and CiscoBannerFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CiscoBannerFeatureTemplateArrayInput` via:
//
//	CiscoBannerFeatureTemplateArray{ CiscoBannerFeatureTemplateArgs{...} }
type CiscoBannerFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCiscoBannerFeatureTemplateArrayOutput() CiscoBannerFeatureTemplateArrayOutput
	ToCiscoBannerFeatureTemplateArrayOutputWithContext(context.Context) CiscoBannerFeatureTemplateArrayOutput
}

type CiscoBannerFeatureTemplateArray []CiscoBannerFeatureTemplateInput

func (CiscoBannerFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoBannerFeatureTemplate)(nil)).Elem()
}

func (i CiscoBannerFeatureTemplateArray) ToCiscoBannerFeatureTemplateArrayOutput() CiscoBannerFeatureTemplateArrayOutput {
	return i.ToCiscoBannerFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CiscoBannerFeatureTemplateArray) ToCiscoBannerFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoBannerFeatureTemplateArrayOutput)
}

// CiscoBannerFeatureTemplateMapInput is an input type that accepts CiscoBannerFeatureTemplateMap and CiscoBannerFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CiscoBannerFeatureTemplateMapInput` via:
//
//	CiscoBannerFeatureTemplateMap{ "key": CiscoBannerFeatureTemplateArgs{...} }
type CiscoBannerFeatureTemplateMapInput interface {
	pulumi.Input

	ToCiscoBannerFeatureTemplateMapOutput() CiscoBannerFeatureTemplateMapOutput
	ToCiscoBannerFeatureTemplateMapOutputWithContext(context.Context) CiscoBannerFeatureTemplateMapOutput
}

type CiscoBannerFeatureTemplateMap map[string]CiscoBannerFeatureTemplateInput

func (CiscoBannerFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoBannerFeatureTemplate)(nil)).Elem()
}

func (i CiscoBannerFeatureTemplateMap) ToCiscoBannerFeatureTemplateMapOutput() CiscoBannerFeatureTemplateMapOutput {
	return i.ToCiscoBannerFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CiscoBannerFeatureTemplateMap) ToCiscoBannerFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CiscoBannerFeatureTemplateMapOutput)
}

type CiscoBannerFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CiscoBannerFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CiscoBannerFeatureTemplate)(nil)).Elem()
}

func (o CiscoBannerFeatureTemplateOutput) ToCiscoBannerFeatureTemplateOutput() CiscoBannerFeatureTemplateOutput {
	return o
}

func (o CiscoBannerFeatureTemplateOutput) ToCiscoBannerFeatureTemplateOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateOutput {
	return o
}

// The description of the feature template
func (o CiscoBannerFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CiscoBannerFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Set message to display before login prompt
func (o CiscoBannerFeatureTemplateOutput) Login() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringPtrOutput { return v.Login }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoBannerFeatureTemplateOutput) LoginVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringPtrOutput { return v.LoginVariable }).(pulumi.StringPtrOutput)
}

// Set message to display after a user logs in
func (o CiscoBannerFeatureTemplateOutput) Motd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringPtrOutput { return v.Motd }).(pulumi.StringPtrOutput)
}

// Variable name
func (o CiscoBannerFeatureTemplateOutput) MotdVariable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringPtrOutput { return v.MotdVariable }).(pulumi.StringPtrOutput)
}

// The name of the feature template
func (o CiscoBannerFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template type
func (o CiscoBannerFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CiscoBannerFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CiscoBannerFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CiscoBannerFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CiscoBannerFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CiscoBannerFeatureTemplate)(nil)).Elem()
}

func (o CiscoBannerFeatureTemplateArrayOutput) ToCiscoBannerFeatureTemplateArrayOutput() CiscoBannerFeatureTemplateArrayOutput {
	return o
}

func (o CiscoBannerFeatureTemplateArrayOutput) ToCiscoBannerFeatureTemplateArrayOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateArrayOutput {
	return o
}

func (o CiscoBannerFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CiscoBannerFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CiscoBannerFeatureTemplate {
		return vs[0].([]*CiscoBannerFeatureTemplate)[vs[1].(int)]
	}).(CiscoBannerFeatureTemplateOutput)
}

type CiscoBannerFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CiscoBannerFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CiscoBannerFeatureTemplate)(nil)).Elem()
}

func (o CiscoBannerFeatureTemplateMapOutput) ToCiscoBannerFeatureTemplateMapOutput() CiscoBannerFeatureTemplateMapOutput {
	return o
}

func (o CiscoBannerFeatureTemplateMapOutput) ToCiscoBannerFeatureTemplateMapOutputWithContext(ctx context.Context) CiscoBannerFeatureTemplateMapOutput {
	return o
}

func (o CiscoBannerFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CiscoBannerFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CiscoBannerFeatureTemplate {
		return vs[0].(map[string]*CiscoBannerFeatureTemplate)[vs[1].(string)]
	}).(CiscoBannerFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoBannerFeatureTemplateInput)(nil)).Elem(), &CiscoBannerFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoBannerFeatureTemplateArrayInput)(nil)).Elem(), CiscoBannerFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CiscoBannerFeatureTemplateMapInput)(nil)).Elem(), CiscoBannerFeatureTemplateMap{})
	pulumi.RegisterOutputType(CiscoBannerFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CiscoBannerFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CiscoBannerFeatureTemplateMapOutput{})
}
