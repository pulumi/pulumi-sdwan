// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a cEdge IGMP feature template.
//   - Minimum SD-WAN Manager version: `15.0.0`
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/cedgeIgmpFeatureTemplate:CedgeIgmpFeatureTemplate example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CedgeIgmpFeatureTemplate struct {
	pulumi.CustomResourceState

	// The description of the feature template
	Description pulumi.StringOutput `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayOutput `pulumi:"deviceTypes"`
	// Set IGMP interface parameters
	Interfaces CedgeIgmpFeatureTemplateInterfaceArrayOutput `pulumi:"interfaces"`
	// The name of the feature template
	Name pulumi.StringOutput `pulumi:"name"`
	// The template type
	TemplateType pulumi.StringOutput `pulumi:"templateType"`
	// The version of the feature template
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCedgeIgmpFeatureTemplate registers a new resource with the given unique name, arguments, and options.
func NewCedgeIgmpFeatureTemplate(ctx *pulumi.Context,
	name string, args *CedgeIgmpFeatureTemplateArgs, opts ...pulumi.ResourceOption) (*CedgeIgmpFeatureTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.DeviceTypes == nil {
		return nil, errors.New("invalid value for required argument 'DeviceTypes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CedgeIgmpFeatureTemplate
	err := ctx.RegisterResource("sdwan:index/cedgeIgmpFeatureTemplate:CedgeIgmpFeatureTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCedgeIgmpFeatureTemplate gets an existing CedgeIgmpFeatureTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCedgeIgmpFeatureTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CedgeIgmpFeatureTemplateState, opts ...pulumi.ResourceOption) (*CedgeIgmpFeatureTemplate, error) {
	var resource CedgeIgmpFeatureTemplate
	err := ctx.ReadResource("sdwan:index/cedgeIgmpFeatureTemplate:CedgeIgmpFeatureTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CedgeIgmpFeatureTemplate resources.
type cedgeIgmpFeatureTemplateState struct {
	// The description of the feature template
	Description *string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set IGMP interface parameters
	Interfaces []CedgeIgmpFeatureTemplateInterface `pulumi:"interfaces"`
	// The name of the feature template
	Name *string `pulumi:"name"`
	// The template type
	TemplateType *string `pulumi:"templateType"`
	// The version of the feature template
	Version *int `pulumi:"version"`
}

type CedgeIgmpFeatureTemplateState struct {
	// The description of the feature template
	Description pulumi.StringPtrInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Set IGMP interface parameters
	Interfaces CedgeIgmpFeatureTemplateInterfaceArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
	// The template type
	TemplateType pulumi.StringPtrInput
	// The version of the feature template
	Version pulumi.IntPtrInput
}

func (CedgeIgmpFeatureTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cedgeIgmpFeatureTemplateState)(nil)).Elem()
}

type cedgeIgmpFeatureTemplateArgs struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Set IGMP interface parameters
	Interfaces []CedgeIgmpFeatureTemplateInterface `pulumi:"interfaces"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CedgeIgmpFeatureTemplate resource.
type CedgeIgmpFeatureTemplateArgs struct {
	// The description of the feature template
	Description pulumi.StringInput
	// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
	// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
	// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
	DeviceTypes pulumi.StringArrayInput
	// Set IGMP interface parameters
	Interfaces CedgeIgmpFeatureTemplateInterfaceArrayInput
	// The name of the feature template
	Name pulumi.StringPtrInput
}

func (CedgeIgmpFeatureTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cedgeIgmpFeatureTemplateArgs)(nil)).Elem()
}

type CedgeIgmpFeatureTemplateInput interface {
	pulumi.Input

	ToCedgeIgmpFeatureTemplateOutput() CedgeIgmpFeatureTemplateOutput
	ToCedgeIgmpFeatureTemplateOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateOutput
}

func (*CedgeIgmpFeatureTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**CedgeIgmpFeatureTemplate)(nil)).Elem()
}

func (i *CedgeIgmpFeatureTemplate) ToCedgeIgmpFeatureTemplateOutput() CedgeIgmpFeatureTemplateOutput {
	return i.ToCedgeIgmpFeatureTemplateOutputWithContext(context.Background())
}

func (i *CedgeIgmpFeatureTemplate) ToCedgeIgmpFeatureTemplateOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CedgeIgmpFeatureTemplateOutput)
}

// CedgeIgmpFeatureTemplateArrayInput is an input type that accepts CedgeIgmpFeatureTemplateArray and CedgeIgmpFeatureTemplateArrayOutput values.
// You can construct a concrete instance of `CedgeIgmpFeatureTemplateArrayInput` via:
//
//	CedgeIgmpFeatureTemplateArray{ CedgeIgmpFeatureTemplateArgs{...} }
type CedgeIgmpFeatureTemplateArrayInput interface {
	pulumi.Input

	ToCedgeIgmpFeatureTemplateArrayOutput() CedgeIgmpFeatureTemplateArrayOutput
	ToCedgeIgmpFeatureTemplateArrayOutputWithContext(context.Context) CedgeIgmpFeatureTemplateArrayOutput
}

type CedgeIgmpFeatureTemplateArray []CedgeIgmpFeatureTemplateInput

func (CedgeIgmpFeatureTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CedgeIgmpFeatureTemplate)(nil)).Elem()
}

func (i CedgeIgmpFeatureTemplateArray) ToCedgeIgmpFeatureTemplateArrayOutput() CedgeIgmpFeatureTemplateArrayOutput {
	return i.ToCedgeIgmpFeatureTemplateArrayOutputWithContext(context.Background())
}

func (i CedgeIgmpFeatureTemplateArray) ToCedgeIgmpFeatureTemplateArrayOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CedgeIgmpFeatureTemplateArrayOutput)
}

// CedgeIgmpFeatureTemplateMapInput is an input type that accepts CedgeIgmpFeatureTemplateMap and CedgeIgmpFeatureTemplateMapOutput values.
// You can construct a concrete instance of `CedgeIgmpFeatureTemplateMapInput` via:
//
//	CedgeIgmpFeatureTemplateMap{ "key": CedgeIgmpFeatureTemplateArgs{...} }
type CedgeIgmpFeatureTemplateMapInput interface {
	pulumi.Input

	ToCedgeIgmpFeatureTemplateMapOutput() CedgeIgmpFeatureTemplateMapOutput
	ToCedgeIgmpFeatureTemplateMapOutputWithContext(context.Context) CedgeIgmpFeatureTemplateMapOutput
}

type CedgeIgmpFeatureTemplateMap map[string]CedgeIgmpFeatureTemplateInput

func (CedgeIgmpFeatureTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CedgeIgmpFeatureTemplate)(nil)).Elem()
}

func (i CedgeIgmpFeatureTemplateMap) ToCedgeIgmpFeatureTemplateMapOutput() CedgeIgmpFeatureTemplateMapOutput {
	return i.ToCedgeIgmpFeatureTemplateMapOutputWithContext(context.Background())
}

func (i CedgeIgmpFeatureTemplateMap) ToCedgeIgmpFeatureTemplateMapOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CedgeIgmpFeatureTemplateMapOutput)
}

type CedgeIgmpFeatureTemplateOutput struct{ *pulumi.OutputState }

func (CedgeIgmpFeatureTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CedgeIgmpFeatureTemplate)(nil)).Elem()
}

func (o CedgeIgmpFeatureTemplateOutput) ToCedgeIgmpFeatureTemplateOutput() CedgeIgmpFeatureTemplateOutput {
	return o
}

func (o CedgeIgmpFeatureTemplateOutput) ToCedgeIgmpFeatureTemplateOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateOutput {
	return o
}

// The description of the feature template
func (o CedgeIgmpFeatureTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CedgeIgmpFeatureTemplate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
// `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
// `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
func (o CedgeIgmpFeatureTemplateOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CedgeIgmpFeatureTemplate) pulumi.StringArrayOutput { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Set IGMP interface parameters
func (o CedgeIgmpFeatureTemplateOutput) Interfaces() CedgeIgmpFeatureTemplateInterfaceArrayOutput {
	return o.ApplyT(func(v *CedgeIgmpFeatureTemplate) CedgeIgmpFeatureTemplateInterfaceArrayOutput { return v.Interfaces }).(CedgeIgmpFeatureTemplateInterfaceArrayOutput)
}

// The name of the feature template
func (o CedgeIgmpFeatureTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CedgeIgmpFeatureTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template type
func (o CedgeIgmpFeatureTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v *CedgeIgmpFeatureTemplate) pulumi.StringOutput { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o CedgeIgmpFeatureTemplateOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CedgeIgmpFeatureTemplate) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CedgeIgmpFeatureTemplateArrayOutput struct{ *pulumi.OutputState }

func (CedgeIgmpFeatureTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CedgeIgmpFeatureTemplate)(nil)).Elem()
}

func (o CedgeIgmpFeatureTemplateArrayOutput) ToCedgeIgmpFeatureTemplateArrayOutput() CedgeIgmpFeatureTemplateArrayOutput {
	return o
}

func (o CedgeIgmpFeatureTemplateArrayOutput) ToCedgeIgmpFeatureTemplateArrayOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateArrayOutput {
	return o
}

func (o CedgeIgmpFeatureTemplateArrayOutput) Index(i pulumi.IntInput) CedgeIgmpFeatureTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CedgeIgmpFeatureTemplate {
		return vs[0].([]*CedgeIgmpFeatureTemplate)[vs[1].(int)]
	}).(CedgeIgmpFeatureTemplateOutput)
}

type CedgeIgmpFeatureTemplateMapOutput struct{ *pulumi.OutputState }

func (CedgeIgmpFeatureTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CedgeIgmpFeatureTemplate)(nil)).Elem()
}

func (o CedgeIgmpFeatureTemplateMapOutput) ToCedgeIgmpFeatureTemplateMapOutput() CedgeIgmpFeatureTemplateMapOutput {
	return o
}

func (o CedgeIgmpFeatureTemplateMapOutput) ToCedgeIgmpFeatureTemplateMapOutputWithContext(ctx context.Context) CedgeIgmpFeatureTemplateMapOutput {
	return o
}

func (o CedgeIgmpFeatureTemplateMapOutput) MapIndex(k pulumi.StringInput) CedgeIgmpFeatureTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CedgeIgmpFeatureTemplate {
		return vs[0].(map[string]*CedgeIgmpFeatureTemplate)[vs[1].(string)]
	}).(CedgeIgmpFeatureTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CedgeIgmpFeatureTemplateInput)(nil)).Elem(), &CedgeIgmpFeatureTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CedgeIgmpFeatureTemplateArrayInput)(nil)).Elem(), CedgeIgmpFeatureTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CedgeIgmpFeatureTemplateMapInput)(nil)).Elem(), CedgeIgmpFeatureTemplateMap{})
	pulumi.RegisterOutputType(CedgeIgmpFeatureTemplateOutput{})
	pulumi.RegisterOutputType(CedgeIgmpFeatureTemplateArrayOutput{})
	pulumi.RegisterOutputType(CedgeIgmpFeatureTemplateMapOutput{})
}
