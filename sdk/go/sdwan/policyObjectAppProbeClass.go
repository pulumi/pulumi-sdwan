// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Policy Object App Probe Class Policy_object.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "policy_object_app_probe_class_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/policyObjectAppProbeClass:PolicyObjectAppProbeClass example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type PolicyObjectAppProbeClass struct {
	pulumi.CustomResourceState

	// The description of the Policy_object
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// App Probe List
	Entries PolicyObjectAppProbeClassEntryArrayOutput `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the Policy_object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewPolicyObjectAppProbeClass registers a new resource with the given unique name, arguments, and options.
func NewPolicyObjectAppProbeClass(ctx *pulumi.Context,
	name string, args *PolicyObjectAppProbeClassArgs, opts ...pulumi.ResourceOption) (*PolicyObjectAppProbeClass, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyObjectAppProbeClass
	err := ctx.RegisterResource("sdwan:index/policyObjectAppProbeClass:PolicyObjectAppProbeClass", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyObjectAppProbeClass gets an existing PolicyObjectAppProbeClass resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyObjectAppProbeClass(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyObjectAppProbeClassState, opts ...pulumi.ResourceOption) (*PolicyObjectAppProbeClass, error) {
	var resource PolicyObjectAppProbeClass
	err := ctx.ReadResource("sdwan:index/policyObjectAppProbeClass:PolicyObjectAppProbeClass", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyObjectAppProbeClass resources.
type policyObjectAppProbeClassState struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// App Probe List
	Entries []PolicyObjectAppProbeClassEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
	// The version of the Policy_object
	Version *int `pulumi:"version"`
}

type PolicyObjectAppProbeClassState struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// App Probe List
	Entries PolicyObjectAppProbeClassEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
	// The version of the Policy_object
	Version pulumi.IntPtrInput
}

func (PolicyObjectAppProbeClassState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectAppProbeClassState)(nil)).Elem()
}

type policyObjectAppProbeClassArgs struct {
	// The description of the Policy_object
	Description *string `pulumi:"description"`
	// App Probe List
	Entries []PolicyObjectAppProbeClassEntry `pulumi:"entries"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the Policy_object
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyObjectAppProbeClass resource.
type PolicyObjectAppProbeClassArgs struct {
	// The description of the Policy_object
	Description pulumi.StringPtrInput
	// App Probe List
	Entries PolicyObjectAppProbeClassEntryArrayInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the Policy_object
	Name pulumi.StringPtrInput
}

func (PolicyObjectAppProbeClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyObjectAppProbeClassArgs)(nil)).Elem()
}

type PolicyObjectAppProbeClassInput interface {
	pulumi.Input

	ToPolicyObjectAppProbeClassOutput() PolicyObjectAppProbeClassOutput
	ToPolicyObjectAppProbeClassOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassOutput
}

func (*PolicyObjectAppProbeClass) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectAppProbeClass)(nil)).Elem()
}

func (i *PolicyObjectAppProbeClass) ToPolicyObjectAppProbeClassOutput() PolicyObjectAppProbeClassOutput {
	return i.ToPolicyObjectAppProbeClassOutputWithContext(context.Background())
}

func (i *PolicyObjectAppProbeClass) ToPolicyObjectAppProbeClassOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectAppProbeClassOutput)
}

// PolicyObjectAppProbeClassArrayInput is an input type that accepts PolicyObjectAppProbeClassArray and PolicyObjectAppProbeClassArrayOutput values.
// You can construct a concrete instance of `PolicyObjectAppProbeClassArrayInput` via:
//
//	PolicyObjectAppProbeClassArray{ PolicyObjectAppProbeClassArgs{...} }
type PolicyObjectAppProbeClassArrayInput interface {
	pulumi.Input

	ToPolicyObjectAppProbeClassArrayOutput() PolicyObjectAppProbeClassArrayOutput
	ToPolicyObjectAppProbeClassArrayOutputWithContext(context.Context) PolicyObjectAppProbeClassArrayOutput
}

type PolicyObjectAppProbeClassArray []PolicyObjectAppProbeClassInput

func (PolicyObjectAppProbeClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectAppProbeClass)(nil)).Elem()
}

func (i PolicyObjectAppProbeClassArray) ToPolicyObjectAppProbeClassArrayOutput() PolicyObjectAppProbeClassArrayOutput {
	return i.ToPolicyObjectAppProbeClassArrayOutputWithContext(context.Background())
}

func (i PolicyObjectAppProbeClassArray) ToPolicyObjectAppProbeClassArrayOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectAppProbeClassArrayOutput)
}

// PolicyObjectAppProbeClassMapInput is an input type that accepts PolicyObjectAppProbeClassMap and PolicyObjectAppProbeClassMapOutput values.
// You can construct a concrete instance of `PolicyObjectAppProbeClassMapInput` via:
//
//	PolicyObjectAppProbeClassMap{ "key": PolicyObjectAppProbeClassArgs{...} }
type PolicyObjectAppProbeClassMapInput interface {
	pulumi.Input

	ToPolicyObjectAppProbeClassMapOutput() PolicyObjectAppProbeClassMapOutput
	ToPolicyObjectAppProbeClassMapOutputWithContext(context.Context) PolicyObjectAppProbeClassMapOutput
}

type PolicyObjectAppProbeClassMap map[string]PolicyObjectAppProbeClassInput

func (PolicyObjectAppProbeClassMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectAppProbeClass)(nil)).Elem()
}

func (i PolicyObjectAppProbeClassMap) ToPolicyObjectAppProbeClassMapOutput() PolicyObjectAppProbeClassMapOutput {
	return i.ToPolicyObjectAppProbeClassMapOutputWithContext(context.Background())
}

func (i PolicyObjectAppProbeClassMap) ToPolicyObjectAppProbeClassMapOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyObjectAppProbeClassMapOutput)
}

type PolicyObjectAppProbeClassOutput struct{ *pulumi.OutputState }

func (PolicyObjectAppProbeClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyObjectAppProbeClass)(nil)).Elem()
}

func (o PolicyObjectAppProbeClassOutput) ToPolicyObjectAppProbeClassOutput() PolicyObjectAppProbeClassOutput {
	return o
}

func (o PolicyObjectAppProbeClassOutput) ToPolicyObjectAppProbeClassOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassOutput {
	return o
}

// The description of the Policy_object
func (o PolicyObjectAppProbeClassOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyObjectAppProbeClass) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// App Probe List
func (o PolicyObjectAppProbeClassOutput) Entries() PolicyObjectAppProbeClassEntryArrayOutput {
	return o.ApplyT(func(v *PolicyObjectAppProbeClass) PolicyObjectAppProbeClassEntryArrayOutput { return v.Entries }).(PolicyObjectAppProbeClassEntryArrayOutput)
}

// Feature Profile ID
func (o PolicyObjectAppProbeClassOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectAppProbeClass) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the Policy_object
func (o PolicyObjectAppProbeClassOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyObjectAppProbeClass) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the Policy_object
func (o PolicyObjectAppProbeClassOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *PolicyObjectAppProbeClass) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type PolicyObjectAppProbeClassArrayOutput struct{ *pulumi.OutputState }

func (PolicyObjectAppProbeClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyObjectAppProbeClass)(nil)).Elem()
}

func (o PolicyObjectAppProbeClassArrayOutput) ToPolicyObjectAppProbeClassArrayOutput() PolicyObjectAppProbeClassArrayOutput {
	return o
}

func (o PolicyObjectAppProbeClassArrayOutput) ToPolicyObjectAppProbeClassArrayOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassArrayOutput {
	return o
}

func (o PolicyObjectAppProbeClassArrayOutput) Index(i pulumi.IntInput) PolicyObjectAppProbeClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyObjectAppProbeClass {
		return vs[0].([]*PolicyObjectAppProbeClass)[vs[1].(int)]
	}).(PolicyObjectAppProbeClassOutput)
}

type PolicyObjectAppProbeClassMapOutput struct{ *pulumi.OutputState }

func (PolicyObjectAppProbeClassMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyObjectAppProbeClass)(nil)).Elem()
}

func (o PolicyObjectAppProbeClassMapOutput) ToPolicyObjectAppProbeClassMapOutput() PolicyObjectAppProbeClassMapOutput {
	return o
}

func (o PolicyObjectAppProbeClassMapOutput) ToPolicyObjectAppProbeClassMapOutputWithContext(ctx context.Context) PolicyObjectAppProbeClassMapOutput {
	return o
}

func (o PolicyObjectAppProbeClassMapOutput) MapIndex(k pulumi.StringInput) PolicyObjectAppProbeClassOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyObjectAppProbeClass {
		return vs[0].(map[string]*PolicyObjectAppProbeClass)[vs[1].(string)]
	}).(PolicyObjectAppProbeClassOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectAppProbeClassInput)(nil)).Elem(), &PolicyObjectAppProbeClass{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectAppProbeClassArrayInput)(nil)).Elem(), PolicyObjectAppProbeClassArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyObjectAppProbeClassMapInput)(nil)).Elem(), PolicyObjectAppProbeClassMap{})
	pulumi.RegisterOutputType(PolicyObjectAppProbeClassOutput{})
	pulumi.RegisterOutputType(PolicyObjectAppProbeClassArrayOutput{})
	pulumi.RegisterOutputType(PolicyObjectAppProbeClassMapOutput{})
}
