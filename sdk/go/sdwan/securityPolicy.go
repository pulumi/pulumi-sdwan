// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Security Policy .
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/securityPolicy:SecurityPolicy example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type SecurityPolicy struct {
	pulumi.CustomResourceState

	// Audit trail - Choices: `on`, `off`
	AuditTrail pulumi.StringPtrOutput `pulumi:"auditTrail"`
	// List of policy definitions
	Definitions SecurityPolicyDefinitionArrayOutput `pulumi:"definitions"`
	// The description of the security policy
	Description pulumi.StringOutput `pulumi:"description"`
	// Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
	DirectInternetApplications pulumi.StringPtrOutput `pulumi:"directInternetApplications"`
	// Failure mode - Choices: `open`, `close`
	FailureMode pulumi.StringPtrOutput `pulumi:"failureMode"`
	// High Speed Logging Server IP
	HighSpeedLoggingServerIp pulumi.StringPtrOutput `pulumi:"highSpeedLoggingServerIp"`
	// High Speed Logging Port
	HighSpeedLoggingServerPort pulumi.StringPtrOutput `pulumi:"highSpeedLoggingServerPort"`
	// High Speed Logging Source Interface
	HighSpeedLoggingServerSourceInterface pulumi.StringPtrOutput `pulumi:"highSpeedLoggingServerSourceInterface"`
	// High Speed Logging VPN
	HighSpeedLoggingVpn pulumi.StringPtrOutput `pulumi:"highSpeedLoggingVpn"`
	// ICMP Unreachable Allow
	ImcpUnreachableAllow pulumi.BoolPtrOutput             `pulumi:"imcpUnreachableAllow"`
	Loggings             SecurityPolicyLoggingArrayOutput `pulumi:"loggings"`
	// Match Statistics per-filter - Choices: `on`, `off`
	MatchStatisticsPerFilter pulumi.StringPtrOutput `pulumi:"matchStatisticsPerFilter"`
	// Max Incomplete ICMP Limit
	MaxIncompleteIcmpLimit pulumi.IntPtrOutput `pulumi:"maxIncompleteIcmpLimit"`
	// Max Incomplete TCP Limit
	MaxIncompleteTcpLimit pulumi.IntPtrOutput `pulumi:"maxIncompleteTcpLimit"`
	// Max Incomplete UDP Limit
	MaxIncompleteUdpLimit pulumi.IntPtrOutput `pulumi:"maxIncompleteUdpLimit"`
	// The policy mode - Choices: `security`, `unified` - Default value: `security`
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The name of the security policy
	Name pulumi.StringOutput `pulumi:"name"`
	// Session Reclassify Allow
	SessionReclassifyAllow pulumi.BoolPtrOutput `pulumi:"sessionReclassifyAllow"`
	// TCP SYN Flood Limit, value from 1 to 4294967295
	TcpSynFloodLimit pulumi.StringPtrOutput `pulumi:"tcpSynFloodLimit"`
	// Unified Logging
	UnifiedLogging pulumi.BoolPtrOutput `pulumi:"unifiedLogging"`
	// The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
	// `directInternetAccess`, `directCloudAccess` - Default value: `custom`
	UseCase pulumi.StringOutput `pulumi:"useCase"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewSecurityPolicy(ctx *pulumi.Context,
	name string, args *SecurityPolicyArgs, opts ...pulumi.ResourceOption) (*SecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definitions == nil {
		return nil, errors.New("invalid value for required argument 'Definitions'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityPolicy
	err := ctx.RegisterResource("sdwan:index/securityPolicy:SecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityPolicy gets an existing SecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityPolicyState, opts ...pulumi.ResourceOption) (*SecurityPolicy, error) {
	var resource SecurityPolicy
	err := ctx.ReadResource("sdwan:index/securityPolicy:SecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityPolicy resources.
type securityPolicyState struct {
	// Audit trail - Choices: `on`, `off`
	AuditTrail *string `pulumi:"auditTrail"`
	// List of policy definitions
	Definitions []SecurityPolicyDefinition `pulumi:"definitions"`
	// The description of the security policy
	Description *string `pulumi:"description"`
	// Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
	DirectInternetApplications *string `pulumi:"directInternetApplications"`
	// Failure mode - Choices: `open`, `close`
	FailureMode *string `pulumi:"failureMode"`
	// High Speed Logging Server IP
	HighSpeedLoggingServerIp *string `pulumi:"highSpeedLoggingServerIp"`
	// High Speed Logging Port
	HighSpeedLoggingServerPort *string `pulumi:"highSpeedLoggingServerPort"`
	// High Speed Logging Source Interface
	HighSpeedLoggingServerSourceInterface *string `pulumi:"highSpeedLoggingServerSourceInterface"`
	// High Speed Logging VPN
	HighSpeedLoggingVpn *string `pulumi:"highSpeedLoggingVpn"`
	// ICMP Unreachable Allow
	ImcpUnreachableAllow *bool                   `pulumi:"imcpUnreachableAllow"`
	Loggings             []SecurityPolicyLogging `pulumi:"loggings"`
	// Match Statistics per-filter - Choices: `on`, `off`
	MatchStatisticsPerFilter *string `pulumi:"matchStatisticsPerFilter"`
	// Max Incomplete ICMP Limit
	MaxIncompleteIcmpLimit *int `pulumi:"maxIncompleteIcmpLimit"`
	// Max Incomplete TCP Limit
	MaxIncompleteTcpLimit *int `pulumi:"maxIncompleteTcpLimit"`
	// Max Incomplete UDP Limit
	MaxIncompleteUdpLimit *int `pulumi:"maxIncompleteUdpLimit"`
	// The policy mode - Choices: `security`, `unified` - Default value: `security`
	Mode *string `pulumi:"mode"`
	// The name of the security policy
	Name *string `pulumi:"name"`
	// Session Reclassify Allow
	SessionReclassifyAllow *bool `pulumi:"sessionReclassifyAllow"`
	// TCP SYN Flood Limit, value from 1 to 4294967295
	TcpSynFloodLimit *string `pulumi:"tcpSynFloodLimit"`
	// Unified Logging
	UnifiedLogging *bool `pulumi:"unifiedLogging"`
	// The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
	// `directInternetAccess`, `directCloudAccess` - Default value: `custom`
	UseCase *string `pulumi:"useCase"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type SecurityPolicyState struct {
	// Audit trail - Choices: `on`, `off`
	AuditTrail pulumi.StringPtrInput
	// List of policy definitions
	Definitions SecurityPolicyDefinitionArrayInput
	// The description of the security policy
	Description pulumi.StringPtrInput
	// Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
	DirectInternetApplications pulumi.StringPtrInput
	// Failure mode - Choices: `open`, `close`
	FailureMode pulumi.StringPtrInput
	// High Speed Logging Server IP
	HighSpeedLoggingServerIp pulumi.StringPtrInput
	// High Speed Logging Port
	HighSpeedLoggingServerPort pulumi.StringPtrInput
	// High Speed Logging Source Interface
	HighSpeedLoggingServerSourceInterface pulumi.StringPtrInput
	// High Speed Logging VPN
	HighSpeedLoggingVpn pulumi.StringPtrInput
	// ICMP Unreachable Allow
	ImcpUnreachableAllow pulumi.BoolPtrInput
	Loggings             SecurityPolicyLoggingArrayInput
	// Match Statistics per-filter - Choices: `on`, `off`
	MatchStatisticsPerFilter pulumi.StringPtrInput
	// Max Incomplete ICMP Limit
	MaxIncompleteIcmpLimit pulumi.IntPtrInput
	// Max Incomplete TCP Limit
	MaxIncompleteTcpLimit pulumi.IntPtrInput
	// Max Incomplete UDP Limit
	MaxIncompleteUdpLimit pulumi.IntPtrInput
	// The policy mode - Choices: `security`, `unified` - Default value: `security`
	Mode pulumi.StringPtrInput
	// The name of the security policy
	Name pulumi.StringPtrInput
	// Session Reclassify Allow
	SessionReclassifyAllow pulumi.BoolPtrInput
	// TCP SYN Flood Limit, value from 1 to 4294967295
	TcpSynFloodLimit pulumi.StringPtrInput
	// Unified Logging
	UnifiedLogging pulumi.BoolPtrInput
	// The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
	// `directInternetAccess`, `directCloudAccess` - Default value: `custom`
	UseCase pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (SecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicyState)(nil)).Elem()
}

type securityPolicyArgs struct {
	// Audit trail - Choices: `on`, `off`
	AuditTrail *string `pulumi:"auditTrail"`
	// List of policy definitions
	Definitions []SecurityPolicyDefinition `pulumi:"definitions"`
	// The description of the security policy
	Description string `pulumi:"description"`
	// Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
	DirectInternetApplications *string `pulumi:"directInternetApplications"`
	// Failure mode - Choices: `open`, `close`
	FailureMode *string `pulumi:"failureMode"`
	// High Speed Logging Server IP
	HighSpeedLoggingServerIp *string `pulumi:"highSpeedLoggingServerIp"`
	// High Speed Logging Port
	HighSpeedLoggingServerPort *string `pulumi:"highSpeedLoggingServerPort"`
	// High Speed Logging Source Interface
	HighSpeedLoggingServerSourceInterface *string `pulumi:"highSpeedLoggingServerSourceInterface"`
	// High Speed Logging VPN
	HighSpeedLoggingVpn *string `pulumi:"highSpeedLoggingVpn"`
	// ICMP Unreachable Allow
	ImcpUnreachableAllow *bool                   `pulumi:"imcpUnreachableAllow"`
	Loggings             []SecurityPolicyLogging `pulumi:"loggings"`
	// Match Statistics per-filter - Choices: `on`, `off`
	MatchStatisticsPerFilter *string `pulumi:"matchStatisticsPerFilter"`
	// Max Incomplete ICMP Limit
	MaxIncompleteIcmpLimit *int `pulumi:"maxIncompleteIcmpLimit"`
	// Max Incomplete TCP Limit
	MaxIncompleteTcpLimit *int `pulumi:"maxIncompleteTcpLimit"`
	// Max Incomplete UDP Limit
	MaxIncompleteUdpLimit *int `pulumi:"maxIncompleteUdpLimit"`
	// The policy mode - Choices: `security`, `unified` - Default value: `security`
	Mode *string `pulumi:"mode"`
	// The name of the security policy
	Name *string `pulumi:"name"`
	// Session Reclassify Allow
	SessionReclassifyAllow *bool `pulumi:"sessionReclassifyAllow"`
	// TCP SYN Flood Limit, value from 1 to 4294967295
	TcpSynFloodLimit *string `pulumi:"tcpSynFloodLimit"`
	// Unified Logging
	UnifiedLogging *bool `pulumi:"unifiedLogging"`
	// The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
	// `directInternetAccess`, `directCloudAccess` - Default value: `custom`
	UseCase *string `pulumi:"useCase"`
}

// The set of arguments for constructing a SecurityPolicy resource.
type SecurityPolicyArgs struct {
	// Audit trail - Choices: `on`, `off`
	AuditTrail pulumi.StringPtrInput
	// List of policy definitions
	Definitions SecurityPolicyDefinitionArrayInput
	// The description of the security policy
	Description pulumi.StringInput
	// Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
	DirectInternetApplications pulumi.StringPtrInput
	// Failure mode - Choices: `open`, `close`
	FailureMode pulumi.StringPtrInput
	// High Speed Logging Server IP
	HighSpeedLoggingServerIp pulumi.StringPtrInput
	// High Speed Logging Port
	HighSpeedLoggingServerPort pulumi.StringPtrInput
	// High Speed Logging Source Interface
	HighSpeedLoggingServerSourceInterface pulumi.StringPtrInput
	// High Speed Logging VPN
	HighSpeedLoggingVpn pulumi.StringPtrInput
	// ICMP Unreachable Allow
	ImcpUnreachableAllow pulumi.BoolPtrInput
	Loggings             SecurityPolicyLoggingArrayInput
	// Match Statistics per-filter - Choices: `on`, `off`
	MatchStatisticsPerFilter pulumi.StringPtrInput
	// Max Incomplete ICMP Limit
	MaxIncompleteIcmpLimit pulumi.IntPtrInput
	// Max Incomplete TCP Limit
	MaxIncompleteTcpLimit pulumi.IntPtrInput
	// Max Incomplete UDP Limit
	MaxIncompleteUdpLimit pulumi.IntPtrInput
	// The policy mode - Choices: `security`, `unified` - Default value: `security`
	Mode pulumi.StringPtrInput
	// The name of the security policy
	Name pulumi.StringPtrInput
	// Session Reclassify Allow
	SessionReclassifyAllow pulumi.BoolPtrInput
	// TCP SYN Flood Limit, value from 1 to 4294967295
	TcpSynFloodLimit pulumi.StringPtrInput
	// Unified Logging
	UnifiedLogging pulumi.BoolPtrInput
	// The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
	// `directInternetAccess`, `directCloudAccess` - Default value: `custom`
	UseCase pulumi.StringPtrInput
}

func (SecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityPolicyArgs)(nil)).Elem()
}

type SecurityPolicyInput interface {
	pulumi.Input

	ToSecurityPolicyOutput() SecurityPolicyOutput
	ToSecurityPolicyOutputWithContext(ctx context.Context) SecurityPolicyOutput
}

func (*SecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicy)(nil)).Elem()
}

func (i *SecurityPolicy) ToSecurityPolicyOutput() SecurityPolicyOutput {
	return i.ToSecurityPolicyOutputWithContext(context.Background())
}

func (i *SecurityPolicy) ToSecurityPolicyOutputWithContext(ctx context.Context) SecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyOutput)
}

// SecurityPolicyArrayInput is an input type that accepts SecurityPolicyArray and SecurityPolicyArrayOutput values.
// You can construct a concrete instance of `SecurityPolicyArrayInput` via:
//
//	SecurityPolicyArray{ SecurityPolicyArgs{...} }
type SecurityPolicyArrayInput interface {
	pulumi.Input

	ToSecurityPolicyArrayOutput() SecurityPolicyArrayOutput
	ToSecurityPolicyArrayOutputWithContext(context.Context) SecurityPolicyArrayOutput
}

type SecurityPolicyArray []SecurityPolicyInput

func (SecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicy)(nil)).Elem()
}

func (i SecurityPolicyArray) ToSecurityPolicyArrayOutput() SecurityPolicyArrayOutput {
	return i.ToSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i SecurityPolicyArray) ToSecurityPolicyArrayOutputWithContext(ctx context.Context) SecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyArrayOutput)
}

// SecurityPolicyMapInput is an input type that accepts SecurityPolicyMap and SecurityPolicyMapOutput values.
// You can construct a concrete instance of `SecurityPolicyMapInput` via:
//
//	SecurityPolicyMap{ "key": SecurityPolicyArgs{...} }
type SecurityPolicyMapInput interface {
	pulumi.Input

	ToSecurityPolicyMapOutput() SecurityPolicyMapOutput
	ToSecurityPolicyMapOutputWithContext(context.Context) SecurityPolicyMapOutput
}

type SecurityPolicyMap map[string]SecurityPolicyInput

func (SecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicy)(nil)).Elem()
}

func (i SecurityPolicyMap) ToSecurityPolicyMapOutput() SecurityPolicyMapOutput {
	return i.ToSecurityPolicyMapOutputWithContext(context.Background())
}

func (i SecurityPolicyMap) ToSecurityPolicyMapOutputWithContext(ctx context.Context) SecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityPolicyMapOutput)
}

type SecurityPolicyOutput struct{ *pulumi.OutputState }

func (SecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityPolicy)(nil)).Elem()
}

func (o SecurityPolicyOutput) ToSecurityPolicyOutput() SecurityPolicyOutput {
	return o
}

func (o SecurityPolicyOutput) ToSecurityPolicyOutputWithContext(ctx context.Context) SecurityPolicyOutput {
	return o
}

// Audit trail - Choices: `on`, `off`
func (o SecurityPolicyOutput) AuditTrail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.AuditTrail }).(pulumi.StringPtrOutput)
}

// List of policy definitions
func (o SecurityPolicyOutput) Definitions() SecurityPolicyDefinitionArrayOutput {
	return o.ApplyT(func(v *SecurityPolicy) SecurityPolicyDefinitionArrayOutput { return v.Definitions }).(SecurityPolicyDefinitionArrayOutput)
}

// The description of the security policy
func (o SecurityPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Bypass firewall policy and allow all Internet traffic to/from VPN 0 - Choices: `allow`, `deny`
func (o SecurityPolicyOutput) DirectInternetApplications() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.DirectInternetApplications }).(pulumi.StringPtrOutput)
}

// Failure mode - Choices: `open`, `close`
func (o SecurityPolicyOutput) FailureMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.FailureMode }).(pulumi.StringPtrOutput)
}

// High Speed Logging Server IP
func (o SecurityPolicyOutput) HighSpeedLoggingServerIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.HighSpeedLoggingServerIp }).(pulumi.StringPtrOutput)
}

// High Speed Logging Port
func (o SecurityPolicyOutput) HighSpeedLoggingServerPort() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.HighSpeedLoggingServerPort }).(pulumi.StringPtrOutput)
}

// High Speed Logging Source Interface
func (o SecurityPolicyOutput) HighSpeedLoggingServerSourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.HighSpeedLoggingServerSourceInterface }).(pulumi.StringPtrOutput)
}

// High Speed Logging VPN
func (o SecurityPolicyOutput) HighSpeedLoggingVpn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.HighSpeedLoggingVpn }).(pulumi.StringPtrOutput)
}

// ICMP Unreachable Allow
func (o SecurityPolicyOutput) ImcpUnreachableAllow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.BoolPtrOutput { return v.ImcpUnreachableAllow }).(pulumi.BoolPtrOutput)
}

func (o SecurityPolicyOutput) Loggings() SecurityPolicyLoggingArrayOutput {
	return o.ApplyT(func(v *SecurityPolicy) SecurityPolicyLoggingArrayOutput { return v.Loggings }).(SecurityPolicyLoggingArrayOutput)
}

// Match Statistics per-filter - Choices: `on`, `off`
func (o SecurityPolicyOutput) MatchStatisticsPerFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.MatchStatisticsPerFilter }).(pulumi.StringPtrOutput)
}

// Max Incomplete ICMP Limit
func (o SecurityPolicyOutput) MaxIncompleteIcmpLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.IntPtrOutput { return v.MaxIncompleteIcmpLimit }).(pulumi.IntPtrOutput)
}

// Max Incomplete TCP Limit
func (o SecurityPolicyOutput) MaxIncompleteTcpLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.IntPtrOutput { return v.MaxIncompleteTcpLimit }).(pulumi.IntPtrOutput)
}

// Max Incomplete UDP Limit
func (o SecurityPolicyOutput) MaxIncompleteUdpLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.IntPtrOutput { return v.MaxIncompleteUdpLimit }).(pulumi.IntPtrOutput)
}

// The policy mode - Choices: `security`, `unified` - Default value: `security`
func (o SecurityPolicyOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The name of the security policy
func (o SecurityPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Session Reclassify Allow
func (o SecurityPolicyOutput) SessionReclassifyAllow() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.BoolPtrOutput { return v.SessionReclassifyAllow }).(pulumi.BoolPtrOutput)
}

// TCP SYN Flood Limit, value from 1 to 4294967295
func (o SecurityPolicyOutput) TcpSynFloodLimit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringPtrOutput { return v.TcpSynFloodLimit }).(pulumi.StringPtrOutput)
}

// Unified Logging
func (o SecurityPolicyOutput) UnifiedLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.BoolPtrOutput { return v.UnifiedLogging }).(pulumi.BoolPtrOutput)
}

// The use case of the security policy - Choices: `custom`, `compliance`, `guestAccess`, `directCloudAccess`,
// `directInternetAccess`, `directCloudAccess` - Default value: `custom`
func (o SecurityPolicyOutput) UseCase() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.StringOutput { return v.UseCase }).(pulumi.StringOutput)
}

// The version of the object
func (o SecurityPolicyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *SecurityPolicy) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type SecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (SecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityPolicy)(nil)).Elem()
}

func (o SecurityPolicyArrayOutput) ToSecurityPolicyArrayOutput() SecurityPolicyArrayOutput {
	return o
}

func (o SecurityPolicyArrayOutput) ToSecurityPolicyArrayOutputWithContext(ctx context.Context) SecurityPolicyArrayOutput {
	return o
}

func (o SecurityPolicyArrayOutput) Index(i pulumi.IntInput) SecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityPolicy {
		return vs[0].([]*SecurityPolicy)[vs[1].(int)]
	}).(SecurityPolicyOutput)
}

type SecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (SecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityPolicy)(nil)).Elem()
}

func (o SecurityPolicyMapOutput) ToSecurityPolicyMapOutput() SecurityPolicyMapOutput {
	return o
}

func (o SecurityPolicyMapOutput) ToSecurityPolicyMapOutputWithContext(ctx context.Context) SecurityPolicyMapOutput {
	return o
}

func (o SecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) SecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityPolicy {
		return vs[0].(map[string]*SecurityPolicy)[vs[1].(string)]
	}).(SecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyInput)(nil)).Elem(), &SecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyArrayInput)(nil)).Elem(), SecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityPolicyMapInput)(nil)).Elem(), SecurityPolicyMap{})
	pulumi.RegisterOutputType(SecurityPolicyOutput{})
	pulumi.RegisterOutputType(SecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(SecurityPolicyMapOutput{})
}
