// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco Security feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoSecurityFeatureTemplate(ctx, &sdwan.LookupCiscoSecurityFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoSecurityFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoSecurityFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoSecurityFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoSecurityFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoSecurityFeatureTemplate:getCiscoSecurityFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoSecurityFeatureTemplate.
type LookupCiscoSecurityFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoSecurityFeatureTemplate.
type LookupCiscoSecurityFeatureTemplateResult struct {
	// Variable name
	AuthenticationTypeVariable string `pulumi:"authenticationTypeVariable"`
	// Set the authentication type for DTLS connections
	AuthenticationTypes []string `pulumi:"authenticationTypes"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// Extended Anti-Replay Window
	ExtendedArWindow int `pulumi:"extendedArWindow"`
	// Variable name
	ExtendedArWindowVariable string `pulumi:"extendedArWindowVariable"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// Variable name
	IntegrityTypeVariable string `pulumi:"integrityTypeVariable"`
	// Set the authentication type for DTLS connections
	IntegrityTypes []string `pulumi:"integrityTypes"`
	// Configure a Keychain
	Keychains []GetCiscoSecurityFeatureTemplateKeychain `pulumi:"keychains"`
	// Configure a Key
	Keys []GetCiscoSecurityFeatureTemplateKey `pulumi:"keys"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Enable or disable IPsec pairwise-keying
	PairwiseKeying bool `pulumi:"pairwiseKeying"`
	// Variable name
	PairwiseKeyingVariable string `pulumi:"pairwiseKeyingVariable"`
	// Set how often to change the AES key for DTLS connections
	RekeyInterval int `pulumi:"rekeyInterval"`
	// Variable name
	RekeyIntervalVariable string `pulumi:"rekeyIntervalVariable"`
	// Set the sliding replay window size
	ReplayWindow string `pulumi:"replayWindow"`
	// Variable name
	ReplayWindowVariable string `pulumi:"replayWindowVariable"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoSecurityFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoSecurityFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoSecurityFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCiscoSecurityFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoSecurityFeatureTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdwan:index/getCiscoSecurityFeatureTemplate:getCiscoSecurityFeatureTemplate", args, LookupCiscoSecurityFeatureTemplateResultOutput{}, options).(LookupCiscoSecurityFeatureTemplateResultOutput), nil
		}).(LookupCiscoSecurityFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoSecurityFeatureTemplate.
type LookupCiscoSecurityFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoSecurityFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoSecurityFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoSecurityFeatureTemplate.
type LookupCiscoSecurityFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoSecurityFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoSecurityFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoSecurityFeatureTemplateResultOutput) ToLookupCiscoSecurityFeatureTemplateResultOutput() LookupCiscoSecurityFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoSecurityFeatureTemplateResultOutput) ToLookupCiscoSecurityFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoSecurityFeatureTemplateResultOutput {
	return o
}

// Variable name
func (o LookupCiscoSecurityFeatureTemplateResultOutput) AuthenticationTypeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.AuthenticationTypeVariable }).(pulumi.StringOutput)
}

// Set the authentication type for DTLS connections
func (o LookupCiscoSecurityFeatureTemplateResultOutput) AuthenticationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) []string { return v.AuthenticationTypes }).(pulumi.StringArrayOutput)
}

// The description of the feature template
func (o LookupCiscoSecurityFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoSecurityFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// Extended Anti-Replay Window
func (o LookupCiscoSecurityFeatureTemplateResultOutput) ExtendedArWindow() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) int { return v.ExtendedArWindow }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoSecurityFeatureTemplateResultOutput) ExtendedArWindowVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.ExtendedArWindowVariable }).(pulumi.StringOutput)
}

// The id of the feature template
func (o LookupCiscoSecurityFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoSecurityFeatureTemplateResultOutput) IntegrityTypeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.IntegrityTypeVariable }).(pulumi.StringOutput)
}

// Set the authentication type for DTLS connections
func (o LookupCiscoSecurityFeatureTemplateResultOutput) IntegrityTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) []string { return v.IntegrityTypes }).(pulumi.StringArrayOutput)
}

// Configure a Keychain
func (o LookupCiscoSecurityFeatureTemplateResultOutput) Keychains() GetCiscoSecurityFeatureTemplateKeychainArrayOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) []GetCiscoSecurityFeatureTemplateKeychain {
		return v.Keychains
	}).(GetCiscoSecurityFeatureTemplateKeychainArrayOutput)
}

// Configure a Key
func (o LookupCiscoSecurityFeatureTemplateResultOutput) Keys() GetCiscoSecurityFeatureTemplateKeyArrayOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) []GetCiscoSecurityFeatureTemplateKey { return v.Keys }).(GetCiscoSecurityFeatureTemplateKeyArrayOutput)
}

// The name of the feature template
func (o LookupCiscoSecurityFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Enable or disable IPsec pairwise-keying
func (o LookupCiscoSecurityFeatureTemplateResultOutput) PairwiseKeying() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) bool { return v.PairwiseKeying }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoSecurityFeatureTemplateResultOutput) PairwiseKeyingVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.PairwiseKeyingVariable }).(pulumi.StringOutput)
}

// Set how often to change the AES key for DTLS connections
func (o LookupCiscoSecurityFeatureTemplateResultOutput) RekeyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) int { return v.RekeyInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoSecurityFeatureTemplateResultOutput) RekeyIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.RekeyIntervalVariable }).(pulumi.StringOutput)
}

// Set the sliding replay window size
func (o LookupCiscoSecurityFeatureTemplateResultOutput) ReplayWindow() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.ReplayWindow }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoSecurityFeatureTemplateResultOutput) ReplayWindowVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.ReplayWindowVariable }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoSecurityFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoSecurityFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoSecurityFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoSecurityFeatureTemplateResultOutput{})
}
