// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a CLI Config Profile Parcel .
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewCliConfigProfileParcel(ctx, "example", &sdwan.CliConfigProfileParcelArgs{
//				FeatureProfileId: pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				Name:             pulumi.String("Example"),
//				Description:      pulumi.String("My Example"),
//				CliConfiguration: pulumi.String("bfd default-dscp 48\nbfd app-route multiplier 6\nbfd app-route poll-interval 600000"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import sdwan:index/cliConfigProfileParcel:CliConfigProfileParcel example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type CliConfigProfileParcel struct {
	pulumi.CustomResourceState

	// CLI configuration
	CliConfiguration pulumi.StringOutput `pulumi:"cliConfiguration"`
	// The description of the profile parcel
	Description pulumi.StringOutput `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// The name of the profile parcel
	Name pulumi.StringOutput `pulumi:"name"`
	// The version of the object
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewCliConfigProfileParcel registers a new resource with the given unique name, arguments, and options.
func NewCliConfigProfileParcel(ctx *pulumi.Context,
	name string, args *CliConfigProfileParcelArgs, opts ...pulumi.ResourceOption) (*CliConfigProfileParcel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CliConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'CliConfiguration'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CliConfigProfileParcel
	err := ctx.RegisterResource("sdwan:index/cliConfigProfileParcel:CliConfigProfileParcel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCliConfigProfileParcel gets an existing CliConfigProfileParcel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCliConfigProfileParcel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CliConfigProfileParcelState, opts ...pulumi.ResourceOption) (*CliConfigProfileParcel, error) {
	var resource CliConfigProfileParcel
	err := ctx.ReadResource("sdwan:index/cliConfigProfileParcel:CliConfigProfileParcel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CliConfigProfileParcel resources.
type cliConfigProfileParcelState struct {
	// CLI configuration
	CliConfiguration *string `pulumi:"cliConfiguration"`
	// The description of the profile parcel
	Description *string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// The name of the profile parcel
	Name *string `pulumi:"name"`
	// The version of the object
	Version *int `pulumi:"version"`
}

type CliConfigProfileParcelState struct {
	// CLI configuration
	CliConfiguration pulumi.StringPtrInput
	// The description of the profile parcel
	Description pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// The name of the profile parcel
	Name pulumi.StringPtrInput
	// The version of the object
	Version pulumi.IntPtrInput
}

func (CliConfigProfileParcelState) ElementType() reflect.Type {
	return reflect.TypeOf((*cliConfigProfileParcelState)(nil)).Elem()
}

type cliConfigProfileParcelArgs struct {
	// CLI configuration
	CliConfiguration string `pulumi:"cliConfiguration"`
	// The description of the profile parcel
	Description string `pulumi:"description"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// The name of the profile parcel
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CliConfigProfileParcel resource.
type CliConfigProfileParcelArgs struct {
	// CLI configuration
	CliConfiguration pulumi.StringInput
	// The description of the profile parcel
	Description pulumi.StringInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// The name of the profile parcel
	Name pulumi.StringPtrInput
}

func (CliConfigProfileParcelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cliConfigProfileParcelArgs)(nil)).Elem()
}

type CliConfigProfileParcelInput interface {
	pulumi.Input

	ToCliConfigProfileParcelOutput() CliConfigProfileParcelOutput
	ToCliConfigProfileParcelOutputWithContext(ctx context.Context) CliConfigProfileParcelOutput
}

func (*CliConfigProfileParcel) ElementType() reflect.Type {
	return reflect.TypeOf((**CliConfigProfileParcel)(nil)).Elem()
}

func (i *CliConfigProfileParcel) ToCliConfigProfileParcelOutput() CliConfigProfileParcelOutput {
	return i.ToCliConfigProfileParcelOutputWithContext(context.Background())
}

func (i *CliConfigProfileParcel) ToCliConfigProfileParcelOutputWithContext(ctx context.Context) CliConfigProfileParcelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliConfigProfileParcelOutput)
}

// CliConfigProfileParcelArrayInput is an input type that accepts CliConfigProfileParcelArray and CliConfigProfileParcelArrayOutput values.
// You can construct a concrete instance of `CliConfigProfileParcelArrayInput` via:
//
//	CliConfigProfileParcelArray{ CliConfigProfileParcelArgs{...} }
type CliConfigProfileParcelArrayInput interface {
	pulumi.Input

	ToCliConfigProfileParcelArrayOutput() CliConfigProfileParcelArrayOutput
	ToCliConfigProfileParcelArrayOutputWithContext(context.Context) CliConfigProfileParcelArrayOutput
}

type CliConfigProfileParcelArray []CliConfigProfileParcelInput

func (CliConfigProfileParcelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliConfigProfileParcel)(nil)).Elem()
}

func (i CliConfigProfileParcelArray) ToCliConfigProfileParcelArrayOutput() CliConfigProfileParcelArrayOutput {
	return i.ToCliConfigProfileParcelArrayOutputWithContext(context.Background())
}

func (i CliConfigProfileParcelArray) ToCliConfigProfileParcelArrayOutputWithContext(ctx context.Context) CliConfigProfileParcelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliConfigProfileParcelArrayOutput)
}

// CliConfigProfileParcelMapInput is an input type that accepts CliConfigProfileParcelMap and CliConfigProfileParcelMapOutput values.
// You can construct a concrete instance of `CliConfigProfileParcelMapInput` via:
//
//	CliConfigProfileParcelMap{ "key": CliConfigProfileParcelArgs{...} }
type CliConfigProfileParcelMapInput interface {
	pulumi.Input

	ToCliConfigProfileParcelMapOutput() CliConfigProfileParcelMapOutput
	ToCliConfigProfileParcelMapOutputWithContext(context.Context) CliConfigProfileParcelMapOutput
}

type CliConfigProfileParcelMap map[string]CliConfigProfileParcelInput

func (CliConfigProfileParcelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliConfigProfileParcel)(nil)).Elem()
}

func (i CliConfigProfileParcelMap) ToCliConfigProfileParcelMapOutput() CliConfigProfileParcelMapOutput {
	return i.ToCliConfigProfileParcelMapOutputWithContext(context.Background())
}

func (i CliConfigProfileParcelMap) ToCliConfigProfileParcelMapOutputWithContext(ctx context.Context) CliConfigProfileParcelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CliConfigProfileParcelMapOutput)
}

type CliConfigProfileParcelOutput struct{ *pulumi.OutputState }

func (CliConfigProfileParcelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CliConfigProfileParcel)(nil)).Elem()
}

func (o CliConfigProfileParcelOutput) ToCliConfigProfileParcelOutput() CliConfigProfileParcelOutput {
	return o
}

func (o CliConfigProfileParcelOutput) ToCliConfigProfileParcelOutputWithContext(ctx context.Context) CliConfigProfileParcelOutput {
	return o
}

// CLI configuration
func (o CliConfigProfileParcelOutput) CliConfiguration() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigProfileParcel) pulumi.StringOutput { return v.CliConfiguration }).(pulumi.StringOutput)
}

// The description of the profile parcel
func (o CliConfigProfileParcelOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigProfileParcel) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Feature Profile ID
func (o CliConfigProfileParcelOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigProfileParcel) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// The name of the profile parcel
func (o CliConfigProfileParcelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CliConfigProfileParcel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The version of the object
func (o CliConfigProfileParcelOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *CliConfigProfileParcel) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type CliConfigProfileParcelArrayOutput struct{ *pulumi.OutputState }

func (CliConfigProfileParcelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CliConfigProfileParcel)(nil)).Elem()
}

func (o CliConfigProfileParcelArrayOutput) ToCliConfigProfileParcelArrayOutput() CliConfigProfileParcelArrayOutput {
	return o
}

func (o CliConfigProfileParcelArrayOutput) ToCliConfigProfileParcelArrayOutputWithContext(ctx context.Context) CliConfigProfileParcelArrayOutput {
	return o
}

func (o CliConfigProfileParcelArrayOutput) Index(i pulumi.IntInput) CliConfigProfileParcelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CliConfigProfileParcel {
		return vs[0].([]*CliConfigProfileParcel)[vs[1].(int)]
	}).(CliConfigProfileParcelOutput)
}

type CliConfigProfileParcelMapOutput struct{ *pulumi.OutputState }

func (CliConfigProfileParcelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CliConfigProfileParcel)(nil)).Elem()
}

func (o CliConfigProfileParcelMapOutput) ToCliConfigProfileParcelMapOutput() CliConfigProfileParcelMapOutput {
	return o
}

func (o CliConfigProfileParcelMapOutput) ToCliConfigProfileParcelMapOutputWithContext(ctx context.Context) CliConfigProfileParcelMapOutput {
	return o
}

func (o CliConfigProfileParcelMapOutput) MapIndex(k pulumi.StringInput) CliConfigProfileParcelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CliConfigProfileParcel {
		return vs[0].(map[string]*CliConfigProfileParcel)[vs[1].(string)]
	}).(CliConfigProfileParcelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CliConfigProfileParcelInput)(nil)).Elem(), &CliConfigProfileParcel{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliConfigProfileParcelArrayInput)(nil)).Elem(), CliConfigProfileParcelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CliConfigProfileParcelMapInput)(nil)).Elem(), CliConfigProfileParcelMap{})
	pulumi.RegisterOutputType(CliConfigProfileParcelOutput{})
	pulumi.RegisterOutputType(CliConfigProfileParcelArrayOutput{})
	pulumi.RegisterOutputType(CliConfigProfileParcelMapOutput{})
}
