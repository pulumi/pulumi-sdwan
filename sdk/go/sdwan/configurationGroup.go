// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a Configuration Group .
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewConfigurationGroup(ctx, "example", &sdwan.ConfigurationGroupArgs{
//				Name:        pulumi.String("CG_1"),
//				Description: pulumi.String("My config group 1"),
//				Solution:    pulumi.String("sdwan"),
//				FeatureProfileIds: pulumi.StringArray{
//					pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				},
//				Devices: sdwan.ConfigurationGroupDeviceArray{
//					&sdwan.ConfigurationGroupDeviceArgs{
//						Id: pulumi.String("C8K-40C0CCFD-9EA8-2B2E-E73B-32C5924EC79B"),
//						Variables: sdwan.ConfigurationGroupDeviceVariableArray{
//							&sdwan.ConfigurationGroupDeviceVariableArgs{
//								Name:  pulumi.String("host_name"),
//								Value: pulumi.String("edge1"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// ```sh
// $ pulumi import sdwan:index/configurationGroup:ConfigurationGroup example "f6b2c44c-693c-4763-b010-895aa3d236bd"
// ```
type ConfigurationGroup struct {
	pulumi.CustomResourceState

	// Description
	Description pulumi.StringOutput `pulumi:"description"`
	// List of devices
	Devices ConfigurationGroupDeviceArrayOutput `pulumi:"devices"`
	// List of feature profile IDs
	FeatureProfileIds pulumi.StringArrayOutput `pulumi:"featureProfileIds"`
	// List of all associated feature versions
	FeatureVersions pulumi.StringArrayOutput `pulumi:"featureVersions"`
	// The name of the configuration group
	Name pulumi.StringOutput `pulumi:"name"`
	// Type of solution
	//   - Choices: `mobility`, `sdwan`, `nfvirtual`
	Solution pulumi.StringOutput `pulumi:"solution"`
	// List of topology device types
	TopologyDevices ConfigurationGroupTopologyDeviceArrayOutput `pulumi:"topologyDevices"`
	// Number of devices per site
	//   - Range: `1`-`20`
	TopologySiteDevices pulumi.IntPtrOutput `pulumi:"topologySiteDevices"`
}

// NewConfigurationGroup registers a new resource with the given unique name, arguments, and options.
func NewConfigurationGroup(ctx *pulumi.Context,
	name string, args *ConfigurationGroupArgs, opts ...pulumi.ResourceOption) (*ConfigurationGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Solution == nil {
		return nil, errors.New("invalid value for required argument 'Solution'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConfigurationGroup
	err := ctx.RegisterResource("sdwan:index/configurationGroup:ConfigurationGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConfigurationGroup gets an existing ConfigurationGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConfigurationGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConfigurationGroupState, opts ...pulumi.ResourceOption) (*ConfigurationGroup, error) {
	var resource ConfigurationGroup
	err := ctx.ReadResource("sdwan:index/configurationGroup:ConfigurationGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConfigurationGroup resources.
type configurationGroupState struct {
	// Description
	Description *string `pulumi:"description"`
	// List of devices
	Devices []ConfigurationGroupDevice `pulumi:"devices"`
	// List of feature profile IDs
	FeatureProfileIds []string `pulumi:"featureProfileIds"`
	// List of all associated feature versions
	FeatureVersions []string `pulumi:"featureVersions"`
	// The name of the configuration group
	Name *string `pulumi:"name"`
	// Type of solution
	//   - Choices: `mobility`, `sdwan`, `nfvirtual`
	Solution *string `pulumi:"solution"`
	// List of topology device types
	TopologyDevices []ConfigurationGroupTopologyDevice `pulumi:"topologyDevices"`
	// Number of devices per site
	//   - Range: `1`-`20`
	TopologySiteDevices *int `pulumi:"topologySiteDevices"`
}

type ConfigurationGroupState struct {
	// Description
	Description pulumi.StringPtrInput
	// List of devices
	Devices ConfigurationGroupDeviceArrayInput
	// List of feature profile IDs
	FeatureProfileIds pulumi.StringArrayInput
	// List of all associated feature versions
	FeatureVersions pulumi.StringArrayInput
	// The name of the configuration group
	Name pulumi.StringPtrInput
	// Type of solution
	//   - Choices: `mobility`, `sdwan`, `nfvirtual`
	Solution pulumi.StringPtrInput
	// List of topology device types
	TopologyDevices ConfigurationGroupTopologyDeviceArrayInput
	// Number of devices per site
	//   - Range: `1`-`20`
	TopologySiteDevices pulumi.IntPtrInput
}

func (ConfigurationGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationGroupState)(nil)).Elem()
}

type configurationGroupArgs struct {
	// Description
	Description string `pulumi:"description"`
	// List of devices
	Devices []ConfigurationGroupDevice `pulumi:"devices"`
	// List of feature profile IDs
	FeatureProfileIds []string `pulumi:"featureProfileIds"`
	// List of all associated feature versions
	FeatureVersions []string `pulumi:"featureVersions"`
	// The name of the configuration group
	Name *string `pulumi:"name"`
	// Type of solution
	//   - Choices: `mobility`, `sdwan`, `nfvirtual`
	Solution string `pulumi:"solution"`
	// List of topology device types
	TopologyDevices []ConfigurationGroupTopologyDevice `pulumi:"topologyDevices"`
	// Number of devices per site
	//   - Range: `1`-`20`
	TopologySiteDevices *int `pulumi:"topologySiteDevices"`
}

// The set of arguments for constructing a ConfigurationGroup resource.
type ConfigurationGroupArgs struct {
	// Description
	Description pulumi.StringInput
	// List of devices
	Devices ConfigurationGroupDeviceArrayInput
	// List of feature profile IDs
	FeatureProfileIds pulumi.StringArrayInput
	// List of all associated feature versions
	FeatureVersions pulumi.StringArrayInput
	// The name of the configuration group
	Name pulumi.StringPtrInput
	// Type of solution
	//   - Choices: `mobility`, `sdwan`, `nfvirtual`
	Solution pulumi.StringInput
	// List of topology device types
	TopologyDevices ConfigurationGroupTopologyDeviceArrayInput
	// Number of devices per site
	//   - Range: `1`-`20`
	TopologySiteDevices pulumi.IntPtrInput
}

func (ConfigurationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurationGroupArgs)(nil)).Elem()
}

type ConfigurationGroupInput interface {
	pulumi.Input

	ToConfigurationGroupOutput() ConfigurationGroupOutput
	ToConfigurationGroupOutputWithContext(ctx context.Context) ConfigurationGroupOutput
}

func (*ConfigurationGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationGroup)(nil)).Elem()
}

func (i *ConfigurationGroup) ToConfigurationGroupOutput() ConfigurationGroupOutput {
	return i.ToConfigurationGroupOutputWithContext(context.Background())
}

func (i *ConfigurationGroup) ToConfigurationGroupOutputWithContext(ctx context.Context) ConfigurationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationGroupOutput)
}

// ConfigurationGroupArrayInput is an input type that accepts ConfigurationGroupArray and ConfigurationGroupArrayOutput values.
// You can construct a concrete instance of `ConfigurationGroupArrayInput` via:
//
//	ConfigurationGroupArray{ ConfigurationGroupArgs{...} }
type ConfigurationGroupArrayInput interface {
	pulumi.Input

	ToConfigurationGroupArrayOutput() ConfigurationGroupArrayOutput
	ToConfigurationGroupArrayOutputWithContext(context.Context) ConfigurationGroupArrayOutput
}

type ConfigurationGroupArray []ConfigurationGroupInput

func (ConfigurationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationGroup)(nil)).Elem()
}

func (i ConfigurationGroupArray) ToConfigurationGroupArrayOutput() ConfigurationGroupArrayOutput {
	return i.ToConfigurationGroupArrayOutputWithContext(context.Background())
}

func (i ConfigurationGroupArray) ToConfigurationGroupArrayOutputWithContext(ctx context.Context) ConfigurationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationGroupArrayOutput)
}

// ConfigurationGroupMapInput is an input type that accepts ConfigurationGroupMap and ConfigurationGroupMapOutput values.
// You can construct a concrete instance of `ConfigurationGroupMapInput` via:
//
//	ConfigurationGroupMap{ "key": ConfigurationGroupArgs{...} }
type ConfigurationGroupMapInput interface {
	pulumi.Input

	ToConfigurationGroupMapOutput() ConfigurationGroupMapOutput
	ToConfigurationGroupMapOutputWithContext(context.Context) ConfigurationGroupMapOutput
}

type ConfigurationGroupMap map[string]ConfigurationGroupInput

func (ConfigurationGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationGroup)(nil)).Elem()
}

func (i ConfigurationGroupMap) ToConfigurationGroupMapOutput() ConfigurationGroupMapOutput {
	return i.ToConfigurationGroupMapOutputWithContext(context.Background())
}

func (i ConfigurationGroupMap) ToConfigurationGroupMapOutputWithContext(ctx context.Context) ConfigurationGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurationGroupMapOutput)
}

type ConfigurationGroupOutput struct{ *pulumi.OutputState }

func (ConfigurationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigurationGroup)(nil)).Elem()
}

func (o ConfigurationGroupOutput) ToConfigurationGroupOutput() ConfigurationGroupOutput {
	return o
}

func (o ConfigurationGroupOutput) ToConfigurationGroupOutputWithContext(ctx context.Context) ConfigurationGroupOutput {
	return o
}

// Description
func (o ConfigurationGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// List of devices
func (o ConfigurationGroupOutput) Devices() ConfigurationGroupDeviceArrayOutput {
	return o.ApplyT(func(v *ConfigurationGroup) ConfigurationGroupDeviceArrayOutput { return v.Devices }).(ConfigurationGroupDeviceArrayOutput)
}

// List of feature profile IDs
func (o ConfigurationGroupOutput) FeatureProfileIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationGroup) pulumi.StringArrayOutput { return v.FeatureProfileIds }).(pulumi.StringArrayOutput)
}

// List of all associated feature versions
func (o ConfigurationGroupOutput) FeatureVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConfigurationGroup) pulumi.StringArrayOutput { return v.FeatureVersions }).(pulumi.StringArrayOutput)
}

// The name of the configuration group
func (o ConfigurationGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Type of solution
//   - Choices: `mobility`, `sdwan`, `nfvirtual`
func (o ConfigurationGroupOutput) Solution() pulumi.StringOutput {
	return o.ApplyT(func(v *ConfigurationGroup) pulumi.StringOutput { return v.Solution }).(pulumi.StringOutput)
}

// List of topology device types
func (o ConfigurationGroupOutput) TopologyDevices() ConfigurationGroupTopologyDeviceArrayOutput {
	return o.ApplyT(func(v *ConfigurationGroup) ConfigurationGroupTopologyDeviceArrayOutput { return v.TopologyDevices }).(ConfigurationGroupTopologyDeviceArrayOutput)
}

// Number of devices per site
//   - Range: `1`-`20`
func (o ConfigurationGroupOutput) TopologySiteDevices() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ConfigurationGroup) pulumi.IntPtrOutput { return v.TopologySiteDevices }).(pulumi.IntPtrOutput)
}

type ConfigurationGroupArrayOutput struct{ *pulumi.OutputState }

func (ConfigurationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigurationGroup)(nil)).Elem()
}

func (o ConfigurationGroupArrayOutput) ToConfigurationGroupArrayOutput() ConfigurationGroupArrayOutput {
	return o
}

func (o ConfigurationGroupArrayOutput) ToConfigurationGroupArrayOutputWithContext(ctx context.Context) ConfigurationGroupArrayOutput {
	return o
}

func (o ConfigurationGroupArrayOutput) Index(i pulumi.IntInput) ConfigurationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigurationGroup {
		return vs[0].([]*ConfigurationGroup)[vs[1].(int)]
	}).(ConfigurationGroupOutput)
}

type ConfigurationGroupMapOutput struct{ *pulumi.OutputState }

func (ConfigurationGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigurationGroup)(nil)).Elem()
}

func (o ConfigurationGroupMapOutput) ToConfigurationGroupMapOutput() ConfigurationGroupMapOutput {
	return o
}

func (o ConfigurationGroupMapOutput) ToConfigurationGroupMapOutputWithContext(ctx context.Context) ConfigurationGroupMapOutput {
	return o
}

func (o ConfigurationGroupMapOutput) MapIndex(k pulumi.StringInput) ConfigurationGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigurationGroup {
		return vs[0].(map[string]*ConfigurationGroup)[vs[1].(string)]
	}).(ConfigurationGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationGroupInput)(nil)).Elem(), &ConfigurationGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationGroupArrayInput)(nil)).Elem(), ConfigurationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurationGroupMapInput)(nil)).Elem(), ConfigurationGroupMap{})
	pulumi.RegisterOutputType(ConfigurationGroupOutput{})
	pulumi.RegisterOutputType(ConfigurationGroupArrayOutput{})
	pulumi.RegisterOutputType(ConfigurationGroupMapOutput{})
}
