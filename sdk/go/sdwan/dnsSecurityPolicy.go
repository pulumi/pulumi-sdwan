// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource can manage a DNS Security Policy.
//   - Minimum SD-WAN Manager version: `20.12.0`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.NewDnsSecurityPolicy(ctx, "example", &sdwan.DnsSecurityPolicyArgs{
//				Name:                     pulumi.String("Example"),
//				Description:              pulumi.String("My Example"),
//				FeatureProfileId:         pulumi.String("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"),
//				LocalDomainBypassListId:  pulumi.String("0c4e096d-b06d-4052-93ed-70fe34fda6dc"),
//				MatchAllVpn:              pulumi.Bool(true),
//				UmbrellaDefault:          pulumi.Bool(false),
//				DnsServerIp:              pulumi.String("1.2.3.4"),
//				LocalDomainBypassEnabled: pulumi.Bool(true),
//				DnsCrypt:                 pulumi.Bool(false),
//				ChildOrgId:               pulumi.String("12334"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The `pulumi import` command can be used, for example:
//
// Expected import identifier with the format: "dns_security_policy_id,feature_profile_id"
//
// ```sh
// $ pulumi import sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy example "f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac"
// ```
type DnsSecurityPolicy struct {
	pulumi.CustomResourceState

	// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
	ChildOrgId pulumi.StringOutput `pulumi:"childOrgId"`
	// The description of the Policy
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
	DnsCrypt pulumi.BoolOutput `pulumi:"dnsCrypt"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `matchAllVpn` being equal to `true`
	DnsServerIp pulumi.StringOutput `pulumi:"dnsServerIp"`
	// Feature Profile ID
	FeatureProfileId pulumi.StringOutput `pulumi:"featureProfileId"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	LocalDomainBypassEnabled pulumi.BoolOutput   `pulumi:"localDomainBypassEnabled"`
	LocalDomainBypassListId  pulumi.StringOutput `pulumi:"localDomainBypassListId"`
	// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
	MatchAllVpn pulumi.BoolOutput `pulumi:"matchAllVpn"`
	// The name of the Policy
	Name pulumi.StringOutput `pulumi:"name"`
	// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `matchAllVpn` being equal to `false`
	TargetVpns DnsSecurityPolicyTargetVpnArrayOutput `pulumi:"targetVpns"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	UmbrellaDefault pulumi.BoolOutput `pulumi:"umbrellaDefault"`
	// The version of the Policy
	Version pulumi.IntOutput `pulumi:"version"`
}

// NewDnsSecurityPolicy registers a new resource with the given unique name, arguments, and options.
func NewDnsSecurityPolicy(ctx *pulumi.Context,
	name string, args *DnsSecurityPolicyArgs, opts ...pulumi.ResourceOption) (*DnsSecurityPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChildOrgId == nil {
		return nil, errors.New("invalid value for required argument 'ChildOrgId'")
	}
	if args.DnsCrypt == nil {
		return nil, errors.New("invalid value for required argument 'DnsCrypt'")
	}
	if args.DnsServerIp == nil {
		return nil, errors.New("invalid value for required argument 'DnsServerIp'")
	}
	if args.FeatureProfileId == nil {
		return nil, errors.New("invalid value for required argument 'FeatureProfileId'")
	}
	if args.LocalDomainBypassEnabled == nil {
		return nil, errors.New("invalid value for required argument 'LocalDomainBypassEnabled'")
	}
	if args.LocalDomainBypassListId == nil {
		return nil, errors.New("invalid value for required argument 'LocalDomainBypassListId'")
	}
	if args.MatchAllVpn == nil {
		return nil, errors.New("invalid value for required argument 'MatchAllVpn'")
	}
	if args.UmbrellaDefault == nil {
		return nil, errors.New("invalid value for required argument 'UmbrellaDefault'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsSecurityPolicy
	err := ctx.RegisterResource("sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsSecurityPolicy gets an existing DnsSecurityPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsSecurityPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsSecurityPolicyState, opts ...pulumi.ResourceOption) (*DnsSecurityPolicy, error) {
	var resource DnsSecurityPolicy
	err := ctx.ReadResource("sdwan:index/dnsSecurityPolicy:DnsSecurityPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsSecurityPolicy resources.
type dnsSecurityPolicyState struct {
	// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
	ChildOrgId *string `pulumi:"childOrgId"`
	// The description of the Policy
	Description *string `pulumi:"description"`
	// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
	DnsCrypt *bool `pulumi:"dnsCrypt"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `matchAllVpn` being equal to `true`
	DnsServerIp *string `pulumi:"dnsServerIp"`
	// Feature Profile ID
	FeatureProfileId *string `pulumi:"featureProfileId"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	LocalDomainBypassEnabled *bool   `pulumi:"localDomainBypassEnabled"`
	LocalDomainBypassListId  *string `pulumi:"localDomainBypassListId"`
	// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
	MatchAllVpn *bool `pulumi:"matchAllVpn"`
	// The name of the Policy
	Name *string `pulumi:"name"`
	// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `matchAllVpn` being equal to `false`
	TargetVpns []DnsSecurityPolicyTargetVpn `pulumi:"targetVpns"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	UmbrellaDefault *bool `pulumi:"umbrellaDefault"`
	// The version of the Policy
	Version *int `pulumi:"version"`
}

type DnsSecurityPolicyState struct {
	// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
	ChildOrgId pulumi.StringPtrInput
	// The description of the Policy
	Description pulumi.StringPtrInput
	// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
	DnsCrypt pulumi.BoolPtrInput
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `matchAllVpn` being equal to `true`
	DnsServerIp pulumi.StringPtrInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringPtrInput
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	LocalDomainBypassEnabled pulumi.BoolPtrInput
	LocalDomainBypassListId  pulumi.StringPtrInput
	// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
	MatchAllVpn pulumi.BoolPtrInput
	// The name of the Policy
	Name pulumi.StringPtrInput
	// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `matchAllVpn` being equal to `false`
	TargetVpns DnsSecurityPolicyTargetVpnArrayInput
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	UmbrellaDefault pulumi.BoolPtrInput
	// The version of the Policy
	Version pulumi.IntPtrInput
}

func (DnsSecurityPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSecurityPolicyState)(nil)).Elem()
}

type dnsSecurityPolicyArgs struct {
	// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
	ChildOrgId string `pulumi:"childOrgId"`
	// The description of the Policy
	Description *string `pulumi:"description"`
	// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
	DnsCrypt bool `pulumi:"dnsCrypt"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `matchAllVpn` being equal to `true`
	DnsServerIp string `pulumi:"dnsServerIp"`
	// Feature Profile ID
	FeatureProfileId string `pulumi:"featureProfileId"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	LocalDomainBypassEnabled bool   `pulumi:"localDomainBypassEnabled"`
	LocalDomainBypassListId  string `pulumi:"localDomainBypassListId"`
	// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
	MatchAllVpn bool `pulumi:"matchAllVpn"`
	// The name of the Policy
	Name *string `pulumi:"name"`
	// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `matchAllVpn` being equal to `false`
	TargetVpns []DnsSecurityPolicyTargetVpn `pulumi:"targetVpns"`
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	UmbrellaDefault bool `pulumi:"umbrellaDefault"`
}

// The set of arguments for constructing a DnsSecurityPolicy resource.
type DnsSecurityPolicyArgs struct {
	// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
	ChildOrgId pulumi.StringInput
	// The description of the Policy
	Description pulumi.StringPtrInput
	// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
	DnsCrypt pulumi.BoolInput
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `matchAllVpn` being equal to `true`
	DnsServerIp pulumi.StringInput
	// Feature Profile ID
	FeatureProfileId pulumi.StringInput
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	LocalDomainBypassEnabled pulumi.BoolInput
	LocalDomainBypassListId  pulumi.StringInput
	// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
	MatchAllVpn pulumi.BoolInput
	// The name of the Policy
	Name pulumi.StringPtrInput
	// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `matchAllVpn` being equal to `false`
	TargetVpns DnsSecurityPolicyTargetVpnArrayInput
	// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
	UmbrellaDefault pulumi.BoolInput
}

func (DnsSecurityPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSecurityPolicyArgs)(nil)).Elem()
}

type DnsSecurityPolicyInput interface {
	pulumi.Input

	ToDnsSecurityPolicyOutput() DnsSecurityPolicyOutput
	ToDnsSecurityPolicyOutputWithContext(ctx context.Context) DnsSecurityPolicyOutput
}

func (*DnsSecurityPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSecurityPolicy)(nil)).Elem()
}

func (i *DnsSecurityPolicy) ToDnsSecurityPolicyOutput() DnsSecurityPolicyOutput {
	return i.ToDnsSecurityPolicyOutputWithContext(context.Background())
}

func (i *DnsSecurityPolicy) ToDnsSecurityPolicyOutputWithContext(ctx context.Context) DnsSecurityPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityPolicyOutput)
}

// DnsSecurityPolicyArrayInput is an input type that accepts DnsSecurityPolicyArray and DnsSecurityPolicyArrayOutput values.
// You can construct a concrete instance of `DnsSecurityPolicyArrayInput` via:
//
//	DnsSecurityPolicyArray{ DnsSecurityPolicyArgs{...} }
type DnsSecurityPolicyArrayInput interface {
	pulumi.Input

	ToDnsSecurityPolicyArrayOutput() DnsSecurityPolicyArrayOutput
	ToDnsSecurityPolicyArrayOutputWithContext(context.Context) DnsSecurityPolicyArrayOutput
}

type DnsSecurityPolicyArray []DnsSecurityPolicyInput

func (DnsSecurityPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSecurityPolicy)(nil)).Elem()
}

func (i DnsSecurityPolicyArray) ToDnsSecurityPolicyArrayOutput() DnsSecurityPolicyArrayOutput {
	return i.ToDnsSecurityPolicyArrayOutputWithContext(context.Background())
}

func (i DnsSecurityPolicyArray) ToDnsSecurityPolicyArrayOutputWithContext(ctx context.Context) DnsSecurityPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityPolicyArrayOutput)
}

// DnsSecurityPolicyMapInput is an input type that accepts DnsSecurityPolicyMap and DnsSecurityPolicyMapOutput values.
// You can construct a concrete instance of `DnsSecurityPolicyMapInput` via:
//
//	DnsSecurityPolicyMap{ "key": DnsSecurityPolicyArgs{...} }
type DnsSecurityPolicyMapInput interface {
	pulumi.Input

	ToDnsSecurityPolicyMapOutput() DnsSecurityPolicyMapOutput
	ToDnsSecurityPolicyMapOutputWithContext(context.Context) DnsSecurityPolicyMapOutput
}

type DnsSecurityPolicyMap map[string]DnsSecurityPolicyInput

func (DnsSecurityPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSecurityPolicy)(nil)).Elem()
}

func (i DnsSecurityPolicyMap) ToDnsSecurityPolicyMapOutput() DnsSecurityPolicyMapOutput {
	return i.ToDnsSecurityPolicyMapOutputWithContext(context.Background())
}

func (i DnsSecurityPolicyMap) ToDnsSecurityPolicyMapOutputWithContext(ctx context.Context) DnsSecurityPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSecurityPolicyMapOutput)
}

type DnsSecurityPolicyOutput struct{ *pulumi.OutputState }

func (DnsSecurityPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSecurityPolicy)(nil)).Elem()
}

func (o DnsSecurityPolicyOutput) ToDnsSecurityPolicyOutput() DnsSecurityPolicyOutput {
	return o
}

func (o DnsSecurityPolicyOutput) ToDnsSecurityPolicyOutputWithContext(ctx context.Context) DnsSecurityPolicyOutput {
	return o
}

// String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
func (o DnsSecurityPolicyOutput) ChildOrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.StringOutput { return v.ChildOrgId }).(pulumi.StringOutput)
}

// The description of the Policy
func (o DnsSecurityPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
func (o DnsSecurityPolicyOutput) DnsCrypt() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.BoolOutput { return v.DnsCrypt }).(pulumi.BoolOutput)
}

// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry, Attribute conditional on `matchAllVpn` being equal to `true`
func (o DnsSecurityPolicyOutput) DnsServerIp() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.StringOutput { return v.DnsServerIp }).(pulumi.StringOutput)
}

// Feature Profile ID
func (o DnsSecurityPolicyOutput) FeatureProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.StringOutput { return v.FeatureProfileId }).(pulumi.StringOutput)
}

// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
func (o DnsSecurityPolicyOutput) LocalDomainBypassEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.BoolOutput { return v.LocalDomainBypassEnabled }).(pulumi.BoolOutput)
}

func (o DnsSecurityPolicyOutput) LocalDomainBypassListId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.StringOutput { return v.LocalDomainBypassListId }).(pulumi.StringOutput)
}

// If this is true, there shouldn't be a targetVpns field, if false then targetVpns field should be there
func (o DnsSecurityPolicyOutput) MatchAllVpn() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.BoolOutput { return v.MatchAllVpn }).(pulumi.BoolOutput)
}

// The name of the Policy
func (o DnsSecurityPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload, Attribute conditional on `matchAllVpn` being equal to `false`
func (o DnsSecurityPolicyOutput) TargetVpns() DnsSecurityPolicyTargetVpnArrayOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) DnsSecurityPolicyTargetVpnArrayOutput { return v.TargetVpns }).(DnsSecurityPolicyTargetVpnArrayOutput)
}

// Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
func (o DnsSecurityPolicyOutput) UmbrellaDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.BoolOutput { return v.UmbrellaDefault }).(pulumi.BoolOutput)
}

// The version of the Policy
func (o DnsSecurityPolicyOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsSecurityPolicy) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type DnsSecurityPolicyArrayOutput struct{ *pulumi.OutputState }

func (DnsSecurityPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSecurityPolicy)(nil)).Elem()
}

func (o DnsSecurityPolicyArrayOutput) ToDnsSecurityPolicyArrayOutput() DnsSecurityPolicyArrayOutput {
	return o
}

func (o DnsSecurityPolicyArrayOutput) ToDnsSecurityPolicyArrayOutputWithContext(ctx context.Context) DnsSecurityPolicyArrayOutput {
	return o
}

func (o DnsSecurityPolicyArrayOutput) Index(i pulumi.IntInput) DnsSecurityPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsSecurityPolicy {
		return vs[0].([]*DnsSecurityPolicy)[vs[1].(int)]
	}).(DnsSecurityPolicyOutput)
}

type DnsSecurityPolicyMapOutput struct{ *pulumi.OutputState }

func (DnsSecurityPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSecurityPolicy)(nil)).Elem()
}

func (o DnsSecurityPolicyMapOutput) ToDnsSecurityPolicyMapOutput() DnsSecurityPolicyMapOutput {
	return o
}

func (o DnsSecurityPolicyMapOutput) ToDnsSecurityPolicyMapOutputWithContext(ctx context.Context) DnsSecurityPolicyMapOutput {
	return o
}

func (o DnsSecurityPolicyMapOutput) MapIndex(k pulumi.StringInput) DnsSecurityPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsSecurityPolicy {
		return vs[0].(map[string]*DnsSecurityPolicy)[vs[1].(string)]
	}).(DnsSecurityPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityPolicyInput)(nil)).Elem(), &DnsSecurityPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityPolicyArrayInput)(nil)).Elem(), DnsSecurityPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsSecurityPolicyMapInput)(nil)).Elem(), DnsSecurityPolicyMap{})
	pulumi.RegisterOutputType(DnsSecurityPolicyOutput{})
	pulumi.RegisterOutputType(DnsSecurityPolicyArrayOutput{})
	pulumi.RegisterOutputType(DnsSecurityPolicyMapOutput{})
}
