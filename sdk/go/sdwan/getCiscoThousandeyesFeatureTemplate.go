// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco ThousandEyes feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoThousandeyesFeatureTemplate(ctx, &sdwan.LookupCiscoThousandeyesFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoThousandeyesFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoThousandeyesFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoThousandeyesFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoThousandeyesFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoThousandeyesFeatureTemplate:getCiscoThousandeyesFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoThousandeyesFeatureTemplate.
type LookupCiscoThousandeyesFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoThousandeyesFeatureTemplate.
type LookupCiscoThousandeyesFeatureTemplateResult struct {
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// The version of the feature template
	Version int `pulumi:"version"`
	// Virtual application Instance
	VirtualApplications []GetCiscoThousandeyesFeatureTemplateVirtualApplication `pulumi:"virtualApplications"`
}

func LookupCiscoThousandeyesFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoThousandeyesFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoThousandeyesFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCiscoThousandeyesFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoThousandeyesFeatureTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdwan:index/getCiscoThousandeyesFeatureTemplate:getCiscoThousandeyesFeatureTemplate", args, LookupCiscoThousandeyesFeatureTemplateResultOutput{}, options).(LookupCiscoThousandeyesFeatureTemplateResultOutput), nil
		}).(LookupCiscoThousandeyesFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoThousandeyesFeatureTemplate.
type LookupCiscoThousandeyesFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoThousandeyesFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoThousandeyesFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoThousandeyesFeatureTemplate.
type LookupCiscoThousandeyesFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoThousandeyesFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoThousandeyesFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) ToLookupCiscoThousandeyesFeatureTemplateResultOutput() LookupCiscoThousandeyesFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) ToLookupCiscoThousandeyesFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoThousandeyesFeatureTemplateResultOutput {
	return o
}

// The description of the feature template
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// The id of the feature template
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

// Virtual application Instance
func (o LookupCiscoThousandeyesFeatureTemplateResultOutput) VirtualApplications() GetCiscoThousandeyesFeatureTemplateVirtualApplicationArrayOutput {
	return o.ApplyT(func(v LookupCiscoThousandeyesFeatureTemplateResult) []GetCiscoThousandeyesFeatureTemplateVirtualApplication {
		return v.VirtualApplications
	}).(GetCiscoThousandeyesFeatureTemplateVirtualApplicationArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoThousandeyesFeatureTemplateResultOutput{})
}
