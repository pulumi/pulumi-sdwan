// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sdwan

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source can read the Cisco VPN Interface IPSec feature template.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-sdwan/sdk/go/sdwan"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := sdwan.LookupCiscoVpnInterfaceIpsecFeatureTemplate(ctx, &sdwan.LookupCiscoVpnInterfaceIpsecFeatureTemplateArgs{
//				Id: pulumi.StringRef("f6b2c44c-693c-4763-b010-895aa3d236bd"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCiscoVpnInterfaceIpsecFeatureTemplate(ctx *pulumi.Context, args *LookupCiscoVpnInterfaceIpsecFeatureTemplateArgs, opts ...pulumi.InvokeOption) (*LookupCiscoVpnInterfaceIpsecFeatureTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCiscoVpnInterfaceIpsecFeatureTemplateResult
	err := ctx.Invoke("sdwan:index/getCiscoVpnInterfaceIpsecFeatureTemplate:getCiscoVpnInterfaceIpsecFeatureTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCiscoVpnInterfaceIpsecFeatureTemplate.
type LookupCiscoVpnInterfaceIpsecFeatureTemplateArgs struct {
	// The id of the feature template
	Id *string `pulumi:"id"`
	// The name of the feature template
	Name *string `pulumi:"name"`
}

// A collection of values returned by getCiscoVpnInterfaceIpsecFeatureTemplate.
type LookupCiscoVpnInterfaceIpsecFeatureTemplateResult struct {
	// Enable Application Tunnel Type
	Application string `pulumi:"application"`
	// Variable name
	ApplicationVariable string `pulumi:"applicationVariable"`
	// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
	ClearDontFragment bool `pulumi:"clearDontFragment"`
	// Variable name
	ClearDontFragmentVariable string `pulumi:"clearDontFragmentVariable"`
	// IKE keepalive interval (seconds)
	DeadPeerDetectionInterval int `pulumi:"deadPeerDetectionInterval"`
	// Variable name
	DeadPeerDetectionIntervalVariable string `pulumi:"deadPeerDetectionIntervalVariable"`
	// IKE keepalive retries
	DeadPeerDetectionRetries int `pulumi:"deadPeerDetectionRetries"`
	// Variable name
	DeadPeerDetectionRetriesVariable string `pulumi:"deadPeerDetectionRetriesVariable"`
	// The description of the feature template
	Description string `pulumi:"description"`
	// List of supported device types
	DeviceTypes []string `pulumi:"deviceTypes"`
	// The id of the feature template
	Id string `pulumi:"id"`
	// IKE identity the IKE preshared secret belongs to
	IkeCiphersuite string `pulumi:"ikeCiphersuite"`
	// Variable name
	IkeCiphersuiteVariable string `pulumi:"ikeCiphersuiteVariable"`
	// IKE Diffie Hellman Groups
	IkeGroup string `pulumi:"ikeGroup"`
	// Variable name
	IkeGroupVariable string `pulumi:"ikeGroupVariable"`
	// IKE integrity protocol
	IkeMode string `pulumi:"ikeMode"`
	// Variable name
	IkeModeVariable string `pulumi:"ikeModeVariable"`
	// Use preshared key to authenticate IKE peer
	IkePreSharedKey string `pulumi:"ikePreSharedKey"`
	// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyLocalId string `pulumi:"ikePreSharedKeyLocalId"`
	// Variable name
	IkePreSharedKeyLocalIdVariable string `pulumi:"ikePreSharedKeyLocalIdVariable"`
	// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
	IkePreSharedKeyRemoteId string `pulumi:"ikePreSharedKeyRemoteId"`
	// Variable name
	IkePreSharedKeyRemoteIdVariable string `pulumi:"ikePreSharedKeyRemoteIdVariable"`
	// Variable name
	IkePreSharedKeyVariable string `pulumi:"ikePreSharedKeyVariable"`
	// IKE rekey interval \n\n seconds
	IkeRekeyInterval int `pulumi:"ikeRekeyInterval"`
	// Variable name
	IkeRekeyIntervalVariable string `pulumi:"ikeRekeyIntervalVariable"`
	// IKE Version \n\n
	IkeVersion int `pulumi:"ikeVersion"`
	// Interface description
	InterfaceDescription string `pulumi:"interfaceDescription"`
	// Variable name
	InterfaceDescriptionVariable string `pulumi:"interfaceDescriptionVariable"`
	// Interface name: IPsec when present
	InterfaceName string `pulumi:"interfaceName"`
	// Variable name
	InterfaceNameVariable string `pulumi:"interfaceNameVariable"`
	// Assign IPv4 address
	IpAddress string `pulumi:"ipAddress"`
	// Variable name
	IpAddressVariable string `pulumi:"ipAddressVariable"`
	// IPsec(ESP) encryption and integrity protocol
	IpsecCiphersuite string `pulumi:"ipsecCiphersuite"`
	// Variable name
	IpsecCiphersuiteVariable string `pulumi:"ipsecCiphersuiteVariable"`
	// IPsec perfect forward secrecy settings
	IpsecPerfectForwardSecrecy string `pulumi:"ipsecPerfectForwardSecrecy"`
	// Variable name
	IpsecPerfectForwardSecrecyVariable string `pulumi:"ipsecPerfectForwardSecrecyVariable"`
	// IPsec rekey interval \n\n seconds
	IpsecRekeyInterval int `pulumi:"ipsecRekeyInterval"`
	// Variable name
	IpsecRekeyIntervalVariable string `pulumi:"ipsecRekeyIntervalVariable"`
	// Replay window size 32..8192 (must be a power of 2)
	IpsecReplayWindow int `pulumi:"ipsecReplayWindow"`
	// Variable name
	IpsecReplayWindowVariable string `pulumi:"ipsecReplayWindowVariable"`
	// Interface MTU \n\n, in bytes
	Mtu int `pulumi:"mtu"`
	// Variable name
	MtuVariable string `pulumi:"mtuVariable"`
	// The name of the feature template
	Name string `pulumi:"name"`
	// Administrative state
	Shutdown bool `pulumi:"shutdown"`
	// Variable name
	ShutdownVariable string `pulumi:"shutdownVariable"`
	// TCP MSS on SYN packets, in bytes
	TcpMssAdjust int `pulumi:"tcpMssAdjust"`
	// Variable name
	TcpMssAdjustVariable string `pulumi:"tcpMssAdjustVariable"`
	// The template type
	TemplateType string `pulumi:"templateType"`
	// Variable name
	TrackerVariable string `pulumi:"trackerVariable"`
	// Enable tracker for this interface
	Trackers []string `pulumi:"trackers"`
	// Tunnel destination IP address
	TunnelDestination string `pulumi:"tunnelDestination"`
	// Variable name
	TunnelDestinationVariable string `pulumi:"tunnelDestinationVariable"`
	// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
	TunnelRouteVia string `pulumi:"tunnelRouteVia"`
	// Variable name
	TunnelRouteViaVariable string `pulumi:"tunnelRouteViaVariable"`
	// Tunnel source IP Address
	TunnelSource string `pulumi:"tunnelSource"`
	// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
	TunnelSourceInterface string `pulumi:"tunnelSourceInterface"`
	// Variable name
	TunnelSourceInterfaceVariable string `pulumi:"tunnelSourceInterfaceVariable"`
	// Variable name
	TunnelSourceVariable string `pulumi:"tunnelSourceVariable"`
	// The version of the feature template
	Version int `pulumi:"version"`
}

func LookupCiscoVpnInterfaceIpsecFeatureTemplateOutput(ctx *pulumi.Context, args LookupCiscoVpnInterfaceIpsecFeatureTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput, error) {
			args := v.(LookupCiscoVpnInterfaceIpsecFeatureTemplateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("sdwan:index/getCiscoVpnInterfaceIpsecFeatureTemplate:getCiscoVpnInterfaceIpsecFeatureTemplate", args, LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput{}, options).(LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput), nil
		}).(LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput)
}

// A collection of arguments for invoking getCiscoVpnInterfaceIpsecFeatureTemplate.
type LookupCiscoVpnInterfaceIpsecFeatureTemplateOutputArgs struct {
	// The id of the feature template
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The name of the feature template
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupCiscoVpnInterfaceIpsecFeatureTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoVpnInterfaceIpsecFeatureTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getCiscoVpnInterfaceIpsecFeatureTemplate.
type LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCiscoVpnInterfaceIpsecFeatureTemplateResult)(nil)).Elem()
}

func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ToLookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput() LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput {
	return o
}

func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ToLookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutputWithContext(ctx context.Context) LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput {
	return o
}

// Enable Application Tunnel Type
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.Application }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ApplicationVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.ApplicationVariable }).(pulumi.StringOutput)
}

// Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ClearDontFragment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) bool { return v.ClearDontFragment }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ClearDontFragmentVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.ClearDontFragmentVariable }).(pulumi.StringOutput)
}

// IKE keepalive interval (seconds)
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) DeadPeerDetectionInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.DeadPeerDetectionInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) DeadPeerDetectionIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.DeadPeerDetectionIntervalVariable
	}).(pulumi.StringOutput)
}

// IKE keepalive retries
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) DeadPeerDetectionRetries() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.DeadPeerDetectionRetries }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) DeadPeerDetectionRetriesVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.DeadPeerDetectionRetriesVariable
	}).(pulumi.StringOutput)
}

// The description of the feature template
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.Description }).(pulumi.StringOutput)
}

// List of supported device types
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) DeviceTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) []string { return v.DeviceTypes }).(pulumi.StringArrayOutput)
}

// The id of the feature template
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// IKE identity the IKE preshared secret belongs to
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeCiphersuite() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeCiphersuite }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeCiphersuiteVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeCiphersuiteVariable }).(pulumi.StringOutput)
}

// IKE Diffie Hellman Groups
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeGroup }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeGroupVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeGroupVariable }).(pulumi.StringOutput)
}

// IKE integrity protocol
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeMode }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeModeVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeModeVariable }).(pulumi.StringOutput)
}

// Use preshared key to authenticate IKE peer
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkePreSharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkePreSharedKey }).(pulumi.StringOutput)
}

// IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkePreSharedKeyLocalId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkePreSharedKeyLocalId }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkePreSharedKeyLocalIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.IkePreSharedKeyLocalIdVariable
	}).(pulumi.StringOutput)
}

// IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkePreSharedKeyRemoteId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkePreSharedKeyRemoteId }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkePreSharedKeyRemoteIdVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.IkePreSharedKeyRemoteIdVariable
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkePreSharedKeyVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkePreSharedKeyVariable }).(pulumi.StringOutput)
}

// IKE rekey interval \n\n seconds
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeRekeyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.IkeRekeyInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeRekeyIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IkeRekeyIntervalVariable }).(pulumi.StringOutput)
}

// IKE Version \n\n
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IkeVersion() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.IkeVersion }).(pulumi.IntOutput)
}

// Interface description
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) InterfaceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.InterfaceDescription }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) InterfaceDescriptionVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.InterfaceDescriptionVariable
	}).(pulumi.StringOutput)
}

// Interface name: IPsec when present
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.InterfaceName }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) InterfaceNameVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.InterfaceNameVariable }).(pulumi.StringOutput)
}

// Assign IPv4 address
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpAddressVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpAddressVariable }).(pulumi.StringOutput)
}

// IPsec(ESP) encryption and integrity protocol
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecCiphersuite() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpsecCiphersuite }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecCiphersuiteVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpsecCiphersuiteVariable }).(pulumi.StringOutput)
}

// IPsec perfect forward secrecy settings
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecPerfectForwardSecrecy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpsecPerfectForwardSecrecy }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecPerfectForwardSecrecyVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.IpsecPerfectForwardSecrecyVariable
	}).(pulumi.StringOutput)
}

// IPsec rekey interval \n\n seconds
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecRekeyInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.IpsecRekeyInterval }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecRekeyIntervalVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpsecRekeyIntervalVariable }).(pulumi.StringOutput)
}

// Replay window size 32..8192 (must be a power of 2)
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecReplayWindow() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.IpsecReplayWindow }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) IpsecReplayWindowVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.IpsecReplayWindowVariable }).(pulumi.StringOutput)
}

// Interface MTU \n\n, in bytes
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) MtuVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.MtuVariable }).(pulumi.StringOutput)
}

// The name of the feature template
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.Name }).(pulumi.StringOutput)
}

// Administrative state
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) ShutdownVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.ShutdownVariable }).(pulumi.StringOutput)
}

// TCP MSS on SYN packets, in bytes
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TcpMssAdjust() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.TcpMssAdjust }).(pulumi.IntOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TcpMssAdjustVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TcpMssAdjustVariable }).(pulumi.StringOutput)
}

// The template type
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TrackerVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TrackerVariable }).(pulumi.StringOutput)
}

// Enable tracker for this interface
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Trackers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) []string { return v.Trackers }).(pulumi.StringArrayOutput)
}

// Tunnel destination IP address
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelDestination() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelDestination }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelDestinationVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelDestinationVariable }).(pulumi.StringOutput)
}

// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelRouteVia() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelRouteVia }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelRouteViaVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelRouteViaVariable }).(pulumi.StringOutput)
}

// Tunnel source IP Address
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelSource }).(pulumi.StringOutput)
}

// \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelSourceInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelSourceInterface }).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelSourceInterfaceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string {
		return v.TunnelSourceInterfaceVariable
	}).(pulumi.StringOutput)
}

// Variable name
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) TunnelSourceVariable() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) string { return v.TunnelSourceVariable }).(pulumi.StringOutput)
}

// The version of the feature template
func (o LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCiscoVpnInterfaceIpsecFeatureTemplateResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCiscoVpnInterfaceIpsecFeatureTemplateResultOutput{})
}
