// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoNtpFeatureTemplateServer {
    /**
     * @return Set authentication key for the server
     *   - Range: `1`-`65535`
     * 
     */
    private @Nullable Integer authenticationKeyId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String authenticationKeyIdVariable;
    /**
     * @return Set hostname or IP address of server
     * 
     */
    private @Nullable String hostnameIp;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String hostnameIpVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Prefer this NTP server
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean prefer;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String preferVariable;
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    private @Nullable String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String sourceInterfaceVariable;
    /**
     * @return Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     * 
     */
    private @Nullable Integer version;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String versionVariable;
    /**
     * @return Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String vpnIdVariable;

    private CiscoNtpFeatureTemplateServer() {}
    /**
     * @return Set authentication key for the server
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Integer> authenticationKeyId() {
        return Optional.ofNullable(this.authenticationKeyId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> authenticationKeyIdVariable() {
        return Optional.ofNullable(this.authenticationKeyIdVariable);
    }
    /**
     * @return Set hostname or IP address of server
     * 
     */
    public Optional<String> hostnameIp() {
        return Optional.ofNullable(this.hostnameIp);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> hostnameIpVariable() {
        return Optional.ofNullable(this.hostnameIpVariable);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Prefer this NTP server
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> prefer() {
        return Optional.ofNullable(this.prefer);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> preferVariable() {
        return Optional.ofNullable(this.preferVariable);
    }
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    public Optional<String> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }
    /**
     * @return Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     * 
     */
    public Optional<Integer> version() {
        return Optional.ofNullable(this.version);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> versionVariable() {
        return Optional.ofNullable(this.versionVariable);
    }
    /**
     * @return Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoNtpFeatureTemplateServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer authenticationKeyId;
        private @Nullable String authenticationKeyIdVariable;
        private @Nullable String hostnameIp;
        private @Nullable String hostnameIpVariable;
        private @Nullable Boolean optional;
        private @Nullable Boolean prefer;
        private @Nullable String preferVariable;
        private @Nullable String sourceInterface;
        private @Nullable String sourceInterfaceVariable;
        private @Nullable Integer version;
        private @Nullable String versionVariable;
        private @Nullable Integer vpnId;
        private @Nullable String vpnIdVariable;
        public Builder() {}
        public Builder(CiscoNtpFeatureTemplateServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationKeyId = defaults.authenticationKeyId;
    	      this.authenticationKeyIdVariable = defaults.authenticationKeyIdVariable;
    	      this.hostnameIp = defaults.hostnameIp;
    	      this.hostnameIpVariable = defaults.hostnameIpVariable;
    	      this.optional = defaults.optional;
    	      this.prefer = defaults.prefer;
    	      this.preferVariable = defaults.preferVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.version = defaults.version;
    	      this.versionVariable = defaults.versionVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder authenticationKeyId(@Nullable Integer authenticationKeyId) {

            this.authenticationKeyId = authenticationKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationKeyIdVariable(@Nullable String authenticationKeyIdVariable) {

            this.authenticationKeyIdVariable = authenticationKeyIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIp(@Nullable String hostnameIp) {

            this.hostnameIp = hostnameIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpVariable(@Nullable String hostnameIpVariable) {

            this.hostnameIpVariable = hostnameIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder prefer(@Nullable Boolean prefer) {

            this.prefer = prefer;
            return this;
        }
        @CustomType.Setter
        public Builder preferVariable(@Nullable String preferVariable) {

            this.preferVariable = preferVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(@Nullable String sourceInterface) {

            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(@Nullable String sourceInterfaceVariable) {

            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(@Nullable Integer version) {

            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder versionVariable(@Nullable String versionVariable) {

            this.versionVariable = versionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(@Nullable Integer vpnId) {

            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(@Nullable String vpnIdVariable) {

            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public CiscoNtpFeatureTemplateServer build() {
            final var _resultValue = new CiscoNtpFeatureTemplateServer();
            _resultValue.authenticationKeyId = authenticationKeyId;
            _resultValue.authenticationKeyIdVariable = authenticationKeyIdVariable;
            _resultValue.hostnameIp = hostnameIp;
            _resultValue.hostnameIpVariable = hostnameIpVariable;
            _resultValue.optional = optional;
            _resultValue.prefer = prefer;
            _resultValue.preferVariable = preferVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.version = version;
            _resultValue.versionVariable = versionVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
