// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PreferredColorGroupPolicyObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final PreferredColorGroupPolicyObjectArgs Empty = new PreferredColorGroupPolicyObjectArgs();

    /**
     * The name of the policy object
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy object
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Color or space separated list of colors
     * 
     */
    @Import(name="primaryColorPreference", required=true)
    private Output<String> primaryColorPreference;

    /**
     * @return Color or space separated list of colors
     * 
     */
    public Output<String> primaryColorPreference() {
        return this.primaryColorPreference;
    }

    /**
     * Path preference
     *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
     * 
     */
    @Import(name="primaryPathPreference")
    private @Nullable Output<String> primaryPathPreference;

    /**
     * @return Path preference
     *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
     * 
     */
    public Optional<Output<String>> primaryPathPreference() {
        return Optional.ofNullable(this.primaryPathPreference);
    }

    /**
     * Color or space separated list of colors
     * 
     */
    @Import(name="secondaryColorPreference")
    private @Nullable Output<String> secondaryColorPreference;

    /**
     * @return Color or space separated list of colors
     * 
     */
    public Optional<Output<String>> secondaryColorPreference() {
        return Optional.ofNullable(this.secondaryColorPreference);
    }

    /**
     * Path preference
     *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
     * 
     */
    @Import(name="secondaryPathPreference")
    private @Nullable Output<String> secondaryPathPreference;

    /**
     * @return Path preference
     *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
     * 
     */
    public Optional<Output<String>> secondaryPathPreference() {
        return Optional.ofNullable(this.secondaryPathPreference);
    }

    /**
     * Color or space separated list of colors
     * 
     */
    @Import(name="tertiaryColorPreference")
    private @Nullable Output<String> tertiaryColorPreference;

    /**
     * @return Color or space separated list of colors
     * 
     */
    public Optional<Output<String>> tertiaryColorPreference() {
        return Optional.ofNullable(this.tertiaryColorPreference);
    }

    /**
     * Path preference
     *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
     * 
     */
    @Import(name="tertiaryPathPreference")
    private @Nullable Output<String> tertiaryPathPreference;

    /**
     * @return Path preference
     *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
     * 
     */
    public Optional<Output<String>> tertiaryPathPreference() {
        return Optional.ofNullable(this.tertiaryPathPreference);
    }

    private PreferredColorGroupPolicyObjectArgs() {}

    private PreferredColorGroupPolicyObjectArgs(PreferredColorGroupPolicyObjectArgs $) {
        this.name = $.name;
        this.primaryColorPreference = $.primaryColorPreference;
        this.primaryPathPreference = $.primaryPathPreference;
        this.secondaryColorPreference = $.secondaryColorPreference;
        this.secondaryPathPreference = $.secondaryPathPreference;
        this.tertiaryColorPreference = $.tertiaryColorPreference;
        this.tertiaryPathPreference = $.tertiaryPathPreference;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PreferredColorGroupPolicyObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PreferredColorGroupPolicyObjectArgs $;

        public Builder() {
            $ = new PreferredColorGroupPolicyObjectArgs();
        }

        public Builder(PreferredColorGroupPolicyObjectArgs defaults) {
            $ = new PreferredColorGroupPolicyObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The name of the policy object
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy object
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primaryColorPreference Color or space separated list of colors
         * 
         * @return builder
         * 
         */
        public Builder primaryColorPreference(Output<String> primaryColorPreference) {
            $.primaryColorPreference = primaryColorPreference;
            return this;
        }

        /**
         * @param primaryColorPreference Color or space separated list of colors
         * 
         * @return builder
         * 
         */
        public Builder primaryColorPreference(String primaryColorPreference) {
            return primaryColorPreference(Output.of(primaryColorPreference));
        }

        /**
         * @param primaryPathPreference Path preference
         *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
         * 
         * @return builder
         * 
         */
        public Builder primaryPathPreference(@Nullable Output<String> primaryPathPreference) {
            $.primaryPathPreference = primaryPathPreference;
            return this;
        }

        /**
         * @param primaryPathPreference Path preference
         *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
         * 
         * @return builder
         * 
         */
        public Builder primaryPathPreference(String primaryPathPreference) {
            return primaryPathPreference(Output.of(primaryPathPreference));
        }

        /**
         * @param secondaryColorPreference Color or space separated list of colors
         * 
         * @return builder
         * 
         */
        public Builder secondaryColorPreference(@Nullable Output<String> secondaryColorPreference) {
            $.secondaryColorPreference = secondaryColorPreference;
            return this;
        }

        /**
         * @param secondaryColorPreference Color or space separated list of colors
         * 
         * @return builder
         * 
         */
        public Builder secondaryColorPreference(String secondaryColorPreference) {
            return secondaryColorPreference(Output.of(secondaryColorPreference));
        }

        /**
         * @param secondaryPathPreference Path preference
         *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
         * 
         * @return builder
         * 
         */
        public Builder secondaryPathPreference(@Nullable Output<String> secondaryPathPreference) {
            $.secondaryPathPreference = secondaryPathPreference;
            return this;
        }

        /**
         * @param secondaryPathPreference Path preference
         *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
         * 
         * @return builder
         * 
         */
        public Builder secondaryPathPreference(String secondaryPathPreference) {
            return secondaryPathPreference(Output.of(secondaryPathPreference));
        }

        /**
         * @param tertiaryColorPreference Color or space separated list of colors
         * 
         * @return builder
         * 
         */
        public Builder tertiaryColorPreference(@Nullable Output<String> tertiaryColorPreference) {
            $.tertiaryColorPreference = tertiaryColorPreference;
            return this;
        }

        /**
         * @param tertiaryColorPreference Color or space separated list of colors
         * 
         * @return builder
         * 
         */
        public Builder tertiaryColorPreference(String tertiaryColorPreference) {
            return tertiaryColorPreference(Output.of(tertiaryColorPreference));
        }

        /**
         * @param tertiaryPathPreference Path preference
         *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
         * 
         * @return builder
         * 
         */
        public Builder tertiaryPathPreference(@Nullable Output<String> tertiaryPathPreference) {
            $.tertiaryPathPreference = tertiaryPathPreference;
            return this;
        }

        /**
         * @param tertiaryPathPreference Path preference
         *   - Choices: `direct-path`, `multi-hop-path`, `all-paths`
         * 
         * @return builder
         * 
         */
        public Builder tertiaryPathPreference(String tertiaryPathPreference) {
            return tertiaryPathPreference(Output.of(tertiaryPathPreference));
        }

        public PreferredColorGroupPolicyObjectArgs build() {
            if ($.primaryColorPreference == null) {
                throw new MissingRequiredPropertyException("PreferredColorGroupPolicyObjectArgs", "primaryColorPreference");
            }
            return $;
        }
    }

}
