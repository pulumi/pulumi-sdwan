// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList {
    /**
     * @return Interface bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidth;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthVariable;
    /**
     * @return Set preference for interface Clock speed
     * 
     */
    private Integer clockRate;
    /**
     * @return Variable name
     * 
     */
    private String clockRateVariable;
    /**
     * @return Configure Encapsulation for interface
     * 
     */
    private String encapsulationSerial;
    /**
     * @return Variable name
     * 
     */
    private String encapsulationSerialVariable;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface Name
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return NIM Serial interface type
     * 
     */
    private String nimSerialInterfaceType;
    /**
     * @return Variable name
     * 
     */
    private String nimSerialInterfaceTypeVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;

    private GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList() {}
    /**
     * @return Interface bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthVariable() {
        return this.bandwidthVariable;
    }
    /**
     * @return Set preference for interface Clock speed
     * 
     */
    public Integer clockRate() {
        return this.clockRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String clockRateVariable() {
        return this.clockRateVariable;
    }
    /**
     * @return Configure Encapsulation for interface
     * 
     */
    public String encapsulationSerial() {
        return this.encapsulationSerial;
    }
    /**
     * @return Variable name
     * 
     */
    public String encapsulationSerialVariable() {
        return this.encapsulationSerialVariable;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface Name
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return NIM Serial interface type
     * 
     */
    public String nimSerialInterfaceType() {
        return this.nimSerialInterfaceType;
    }
    /**
     * @return Variable name
     * 
     */
    public String nimSerialInterfaceTypeVariable() {
        return this.nimSerialInterfaceTypeVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer bandwidth;
        private String bandwidthVariable;
        private Integer clockRate;
        private String clockRateVariable;
        private String encapsulationSerial;
        private String encapsulationSerialVariable;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private String nimSerialInterfaceType;
        private String nimSerialInterfaceTypeVariable;
        private Boolean optional;
        public Builder() {}
        public Builder(GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.bandwidthVariable = defaults.bandwidthVariable;
    	      this.clockRate = defaults.clockRate;
    	      this.clockRateVariable = defaults.clockRateVariable;
    	      this.encapsulationSerial = defaults.encapsulationSerial;
    	      this.encapsulationSerialVariable = defaults.encapsulationSerialVariable;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.nimSerialInterfaceType = defaults.nimSerialInterfaceType;
    	      this.nimSerialInterfaceTypeVariable = defaults.nimSerialInterfaceTypeVariable;
    	      this.optional = defaults.optional;
        }

        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthVariable(String bandwidthVariable) {
            if (bandwidthVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "bandwidthVariable");
            }
            this.bandwidthVariable = bandwidthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder clockRate(Integer clockRate) {
            if (clockRate == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "clockRate");
            }
            this.clockRate = clockRate;
            return this;
        }
        @CustomType.Setter
        public Builder clockRateVariable(String clockRateVariable) {
            if (clockRateVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "clockRateVariable");
            }
            this.clockRateVariable = clockRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder encapsulationSerial(String encapsulationSerial) {
            if (encapsulationSerial == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "encapsulationSerial");
            }
            this.encapsulationSerial = encapsulationSerial;
            return this;
        }
        @CustomType.Setter
        public Builder encapsulationSerialVariable(String encapsulationSerialVariable) {
            if (encapsulationSerialVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "encapsulationSerialVariable");
            }
            this.encapsulationSerialVariable = encapsulationSerialVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nimSerialInterfaceType(String nimSerialInterfaceType) {
            if (nimSerialInterfaceType == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "nimSerialInterfaceType");
            }
            this.nimSerialInterfaceType = nimSerialInterfaceType;
            return this;
        }
        @CustomType.Setter
        public Builder nimSerialInterfaceTypeVariable(String nimSerialInterfaceTypeVariable) {
            if (nimSerialInterfaceTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "nimSerialInterfaceTypeVariable");
            }
            this.nimSerialInterfaceTypeVariable = nimSerialInterfaceTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList", "optional");
            }
            this.optional = optional;
            return this;
        }
        public GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList build() {
            final var _resultValue = new GetVpnInterfaceMultilinkFeatureTemplateNimInterfaceList();
            _resultValue.bandwidth = bandwidth;
            _resultValue.bandwidthVariable = bandwidthVariable;
            _resultValue.clockRate = clockRate;
            _resultValue.clockRateVariable = clockRateVariable;
            _resultValue.encapsulationSerial = encapsulationSerial;
            _resultValue.encapsulationSerialVariable = encapsulationSerialVariable;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.nimSerialInterfaceType = nimSerialInterfaceType;
            _resultValue.nimSerialInterfaceTypeVariable = nimSerialInterfaceTypeVariable;
            _resultValue.optional = optional;
            return _resultValue;
        }
    }
}
