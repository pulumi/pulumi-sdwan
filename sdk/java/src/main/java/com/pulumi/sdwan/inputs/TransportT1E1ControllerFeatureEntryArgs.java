// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.TransportT1E1ControllerFeatureEntryChannelGroupArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransportT1E1ControllerFeatureEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransportT1E1ControllerFeatureEntryArgs Empty = new TransportT1E1ControllerFeatureEntryArgs();

    /**
     * Cable Config
     *   - Choices: `short`, `long`
     * 
     */
    @Import(name="cableLength")
    private @Nullable Output<String> cableLength;

    /**
     * @return Cable Config
     *   - Choices: `short`, `long`
     * 
     */
    public Optional<Output<String>> cableLength() {
        return Optional.ofNullable(this.cableLength);
    }

    /**
     * Channel Group List
     * 
     */
    @Import(name="channelGroups")
    private @Nullable Output<List<TransportT1E1ControllerFeatureEntryChannelGroupArgs>> channelGroups;

    /**
     * @return Channel Group List
     * 
     */
    public Optional<Output<List<TransportT1E1ControllerFeatureEntryChannelGroupArgs>>> channelGroups() {
        return Optional.ofNullable(this.channelGroups);
    }

    /**
     * Clock Source
     *   - Choices: `line`, `internal`, `loop-timed`, `network`
     * 
     */
    @Import(name="clockSource")
    private @Nullable Output<String> clockSource;

    /**
     * @return Clock Source
     *   - Choices: `line`, `internal`, `loop-timed`, `network`
     * 
     */
    public Optional<Output<String>> clockSource() {
        return Optional.ofNullable(this.clockSource);
    }

    /**
     * Description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="descriptionVariable")
    private @Nullable Output<String> descriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> descriptionVariable() {
        return Optional.ofNullable(this.descriptionVariable);
    }

    /**
     * Card Type
     *   - Choices: `E1`
     * 
     */
    @Import(name="e1Description")
    private @Nullable Output<String> e1Description;

    /**
     * @return Card Type
     *   - Choices: `E1`
     * 
     */
    public Optional<Output<String>> e1Description() {
        return Optional.ofNullable(this.e1Description);
    }

    /**
     * Framing
     *   - Choices: `crc4`, `no-crc4`
     * 
     */
    @Import(name="e1Framing")
    private @Nullable Output<String> e1Framing;

    /**
     * @return Framing
     *   - Choices: `crc4`, `no-crc4`
     * 
     */
    public Optional<Output<String>> e1Framing() {
        return Optional.ofNullable(this.e1Framing);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="e1FramingVariable")
    private @Nullable Output<String> e1FramingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> e1FramingVariable() {
        return Optional.ofNullable(this.e1FramingVariable);
    }

    /**
     * LineCode
     *   - Choices: `ami`, `hdb3`
     * 
     */
    @Import(name="e1Linecode")
    private @Nullable Output<String> e1Linecode;

    /**
     * @return LineCode
     *   - Choices: `ami`, `hdb3`
     * 
     */
    public Optional<Output<String>> e1Linecode() {
        return Optional.ofNullable(this.e1Linecode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="e1LinecodeVariable")
    private @Nullable Output<String> e1LinecodeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> e1LinecodeVariable() {
        return Optional.ofNullable(this.e1LinecodeVariable);
    }

    /**
     * length, Attribute conditional on `cable_length` being equal to `long`
     *   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
     * 
     */
    @Import(name="lengthLong")
    private @Nullable Output<String> lengthLong;

    /**
     * @return length, Attribute conditional on `cable_length` being equal to `long`
     *   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
     * 
     */
    public Optional<Output<String>> lengthLong() {
        return Optional.ofNullable(this.lengthLong);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="lengthLongVariable")
    private @Nullable Output<String> lengthLongVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> lengthLongVariable() {
        return Optional.ofNullable(this.lengthLongVariable);
    }

    /**
     * length, Attribute conditional on `cable_length` being equal to `short`
     *   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
     * 
     */
    @Import(name="lengthShort")
    private @Nullable Output<String> lengthShort;

    /**
     * @return length, Attribute conditional on `cable_length` being equal to `short`
     *   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
     * 
     */
    public Optional<Output<String>> lengthShort() {
        return Optional.ofNullable(this.lengthShort);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="lengthShortVariable")
    private @Nullable Output<String> lengthShortVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> lengthShortVariable() {
        return Optional.ofNullable(this.lengthShortVariable);
    }

    /**
     * Line Mode
     *   - Choices: `secondary`, `primary`
     * 
     */
    @Import(name="lineMode")
    private @Nullable Output<String> lineMode;

    /**
     * @return Line Mode
     *   - Choices: `secondary`, `primary`
     * 
     */
    public Optional<Output<String>> lineMode() {
        return Optional.ofNullable(this.lineMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="lineModeVariable")
    private @Nullable Output<String> lineModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> lineModeVariable() {
        return Optional.ofNullable(this.lineModeVariable);
    }

    /**
     * Card Type
     *   - Choices: `T1`
     * 
     */
    @Import(name="t1Description")
    private @Nullable Output<String> t1Description;

    /**
     * @return Card Type
     *   - Choices: `T1`
     * 
     */
    public Optional<Output<String>> t1Description() {
        return Optional.ofNullable(this.t1Description);
    }

    /**
     * Framing
     *   - Choices: `esf`, `sf`
     * 
     */
    @Import(name="t1Framing")
    private @Nullable Output<String> t1Framing;

    /**
     * @return Framing
     *   - Choices: `esf`, `sf`
     * 
     */
    public Optional<Output<String>> t1Framing() {
        return Optional.ofNullable(this.t1Framing);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="t1FramingVariable")
    private @Nullable Output<String> t1FramingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> t1FramingVariable() {
        return Optional.ofNullable(this.t1FramingVariable);
    }

    /**
     * LineCode
     *   - Choices: `ami`, `b8zs`
     * 
     */
    @Import(name="t1Linecode")
    private @Nullable Output<String> t1Linecode;

    /**
     * @return LineCode
     *   - Choices: `ami`, `b8zs`
     * 
     */
    public Optional<Output<String>> t1Linecode() {
        return Optional.ofNullable(this.t1Linecode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="t1LinecodeVariable")
    private @Nullable Output<String> t1LinecodeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> t1LinecodeVariable() {
        return Optional.ofNullable(this.t1LinecodeVariable);
    }

    private TransportT1E1ControllerFeatureEntryArgs() {}

    private TransportT1E1ControllerFeatureEntryArgs(TransportT1E1ControllerFeatureEntryArgs $) {
        this.cableLength = $.cableLength;
        this.channelGroups = $.channelGroups;
        this.clockSource = $.clockSource;
        this.description = $.description;
        this.descriptionVariable = $.descriptionVariable;
        this.e1Description = $.e1Description;
        this.e1Framing = $.e1Framing;
        this.e1FramingVariable = $.e1FramingVariable;
        this.e1Linecode = $.e1Linecode;
        this.e1LinecodeVariable = $.e1LinecodeVariable;
        this.lengthLong = $.lengthLong;
        this.lengthLongVariable = $.lengthLongVariable;
        this.lengthShort = $.lengthShort;
        this.lengthShortVariable = $.lengthShortVariable;
        this.lineMode = $.lineMode;
        this.lineModeVariable = $.lineModeVariable;
        this.t1Description = $.t1Description;
        this.t1Framing = $.t1Framing;
        this.t1FramingVariable = $.t1FramingVariable;
        this.t1Linecode = $.t1Linecode;
        this.t1LinecodeVariable = $.t1LinecodeVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransportT1E1ControllerFeatureEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransportT1E1ControllerFeatureEntryArgs $;

        public Builder() {
            $ = new TransportT1E1ControllerFeatureEntryArgs();
        }

        public Builder(TransportT1E1ControllerFeatureEntryArgs defaults) {
            $ = new TransportT1E1ControllerFeatureEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cableLength Cable Config
         *   - Choices: `short`, `long`
         * 
         * @return builder
         * 
         */
        public Builder cableLength(@Nullable Output<String> cableLength) {
            $.cableLength = cableLength;
            return this;
        }

        /**
         * @param cableLength Cable Config
         *   - Choices: `short`, `long`
         * 
         * @return builder
         * 
         */
        public Builder cableLength(String cableLength) {
            return cableLength(Output.of(cableLength));
        }

        /**
         * @param channelGroups Channel Group List
         * 
         * @return builder
         * 
         */
        public Builder channelGroups(@Nullable Output<List<TransportT1E1ControllerFeatureEntryChannelGroupArgs>> channelGroups) {
            $.channelGroups = channelGroups;
            return this;
        }

        /**
         * @param channelGroups Channel Group List
         * 
         * @return builder
         * 
         */
        public Builder channelGroups(List<TransportT1E1ControllerFeatureEntryChannelGroupArgs> channelGroups) {
            return channelGroups(Output.of(channelGroups));
        }

        /**
         * @param channelGroups Channel Group List
         * 
         * @return builder
         * 
         */
        public Builder channelGroups(TransportT1E1ControllerFeatureEntryChannelGroupArgs... channelGroups) {
            return channelGroups(List.of(channelGroups));
        }

        /**
         * @param clockSource Clock Source
         *   - Choices: `line`, `internal`, `loop-timed`, `network`
         * 
         * @return builder
         * 
         */
        public Builder clockSource(@Nullable Output<String> clockSource) {
            $.clockSource = clockSource;
            return this;
        }

        /**
         * @param clockSource Clock Source
         *   - Choices: `line`, `internal`, `loop-timed`, `network`
         * 
         * @return builder
         * 
         */
        public Builder clockSource(String clockSource) {
            return clockSource(Output.of(clockSource));
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param descriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder descriptionVariable(@Nullable Output<String> descriptionVariable) {
            $.descriptionVariable = descriptionVariable;
            return this;
        }

        /**
         * @param descriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder descriptionVariable(String descriptionVariable) {
            return descriptionVariable(Output.of(descriptionVariable));
        }

        /**
         * @param e1Description Card Type
         *   - Choices: `E1`
         * 
         * @return builder
         * 
         */
        public Builder e1Description(@Nullable Output<String> e1Description) {
            $.e1Description = e1Description;
            return this;
        }

        /**
         * @param e1Description Card Type
         *   - Choices: `E1`
         * 
         * @return builder
         * 
         */
        public Builder e1Description(String e1Description) {
            return e1Description(Output.of(e1Description));
        }

        /**
         * @param e1Framing Framing
         *   - Choices: `crc4`, `no-crc4`
         * 
         * @return builder
         * 
         */
        public Builder e1Framing(@Nullable Output<String> e1Framing) {
            $.e1Framing = e1Framing;
            return this;
        }

        /**
         * @param e1Framing Framing
         *   - Choices: `crc4`, `no-crc4`
         * 
         * @return builder
         * 
         */
        public Builder e1Framing(String e1Framing) {
            return e1Framing(Output.of(e1Framing));
        }

        /**
         * @param e1FramingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder e1FramingVariable(@Nullable Output<String> e1FramingVariable) {
            $.e1FramingVariable = e1FramingVariable;
            return this;
        }

        /**
         * @param e1FramingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder e1FramingVariable(String e1FramingVariable) {
            return e1FramingVariable(Output.of(e1FramingVariable));
        }

        /**
         * @param e1Linecode LineCode
         *   - Choices: `ami`, `hdb3`
         * 
         * @return builder
         * 
         */
        public Builder e1Linecode(@Nullable Output<String> e1Linecode) {
            $.e1Linecode = e1Linecode;
            return this;
        }

        /**
         * @param e1Linecode LineCode
         *   - Choices: `ami`, `hdb3`
         * 
         * @return builder
         * 
         */
        public Builder e1Linecode(String e1Linecode) {
            return e1Linecode(Output.of(e1Linecode));
        }

        /**
         * @param e1LinecodeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder e1LinecodeVariable(@Nullable Output<String> e1LinecodeVariable) {
            $.e1LinecodeVariable = e1LinecodeVariable;
            return this;
        }

        /**
         * @param e1LinecodeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder e1LinecodeVariable(String e1LinecodeVariable) {
            return e1LinecodeVariable(Output.of(e1LinecodeVariable));
        }

        /**
         * @param lengthLong length, Attribute conditional on `cable_length` being equal to `long`
         *   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
         * 
         * @return builder
         * 
         */
        public Builder lengthLong(@Nullable Output<String> lengthLong) {
            $.lengthLong = lengthLong;
            return this;
        }

        /**
         * @param lengthLong length, Attribute conditional on `cable_length` being equal to `long`
         *   - Choices: `-15db`, `-22.5db`, `-7.5db`, `0db`
         * 
         * @return builder
         * 
         */
        public Builder lengthLong(String lengthLong) {
            return lengthLong(Output.of(lengthLong));
        }

        /**
         * @param lengthLongVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lengthLongVariable(@Nullable Output<String> lengthLongVariable) {
            $.lengthLongVariable = lengthLongVariable;
            return this;
        }

        /**
         * @param lengthLongVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lengthLongVariable(String lengthLongVariable) {
            return lengthLongVariable(Output.of(lengthLongVariable));
        }

        /**
         * @param lengthShort length, Attribute conditional on `cable_length` being equal to `short`
         *   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
         * 
         * @return builder
         * 
         */
        public Builder lengthShort(@Nullable Output<String> lengthShort) {
            $.lengthShort = lengthShort;
            return this;
        }

        /**
         * @param lengthShort length, Attribute conditional on `cable_length` being equal to `short`
         *   - Choices: `110ft`, `220ft`, `330ft`, `440ft`, `550ft`, `660ft`
         * 
         * @return builder
         * 
         */
        public Builder lengthShort(String lengthShort) {
            return lengthShort(Output.of(lengthShort));
        }

        /**
         * @param lengthShortVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lengthShortVariable(@Nullable Output<String> lengthShortVariable) {
            $.lengthShortVariable = lengthShortVariable;
            return this;
        }

        /**
         * @param lengthShortVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lengthShortVariable(String lengthShortVariable) {
            return lengthShortVariable(Output.of(lengthShortVariable));
        }

        /**
         * @param lineMode Line Mode
         *   - Choices: `secondary`, `primary`
         * 
         * @return builder
         * 
         */
        public Builder lineMode(@Nullable Output<String> lineMode) {
            $.lineMode = lineMode;
            return this;
        }

        /**
         * @param lineMode Line Mode
         *   - Choices: `secondary`, `primary`
         * 
         * @return builder
         * 
         */
        public Builder lineMode(String lineMode) {
            return lineMode(Output.of(lineMode));
        }

        /**
         * @param lineModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lineModeVariable(@Nullable Output<String> lineModeVariable) {
            $.lineModeVariable = lineModeVariable;
            return this;
        }

        /**
         * @param lineModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder lineModeVariable(String lineModeVariable) {
            return lineModeVariable(Output.of(lineModeVariable));
        }

        /**
         * @param t1Description Card Type
         *   - Choices: `T1`
         * 
         * @return builder
         * 
         */
        public Builder t1Description(@Nullable Output<String> t1Description) {
            $.t1Description = t1Description;
            return this;
        }

        /**
         * @param t1Description Card Type
         *   - Choices: `T1`
         * 
         * @return builder
         * 
         */
        public Builder t1Description(String t1Description) {
            return t1Description(Output.of(t1Description));
        }

        /**
         * @param t1Framing Framing
         *   - Choices: `esf`, `sf`
         * 
         * @return builder
         * 
         */
        public Builder t1Framing(@Nullable Output<String> t1Framing) {
            $.t1Framing = t1Framing;
            return this;
        }

        /**
         * @param t1Framing Framing
         *   - Choices: `esf`, `sf`
         * 
         * @return builder
         * 
         */
        public Builder t1Framing(String t1Framing) {
            return t1Framing(Output.of(t1Framing));
        }

        /**
         * @param t1FramingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder t1FramingVariable(@Nullable Output<String> t1FramingVariable) {
            $.t1FramingVariable = t1FramingVariable;
            return this;
        }

        /**
         * @param t1FramingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder t1FramingVariable(String t1FramingVariable) {
            return t1FramingVariable(Output.of(t1FramingVariable));
        }

        /**
         * @param t1Linecode LineCode
         *   - Choices: `ami`, `b8zs`
         * 
         * @return builder
         * 
         */
        public Builder t1Linecode(@Nullable Output<String> t1Linecode) {
            $.t1Linecode = t1Linecode;
            return this;
        }

        /**
         * @param t1Linecode LineCode
         *   - Choices: `ami`, `b8zs`
         * 
         * @return builder
         * 
         */
        public Builder t1Linecode(String t1Linecode) {
            return t1Linecode(Output.of(t1Linecode));
        }

        /**
         * @param t1LinecodeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder t1LinecodeVariable(@Nullable Output<String> t1LinecodeVariable) {
            $.t1LinecodeVariable = t1LinecodeVariable;
            return this;
        }

        /**
         * @param t1LinecodeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder t1LinecodeVariable(String t1LinecodeVariable) {
            return t1LinecodeVariable(Output.of(t1LinecodeVariable));
        }

        public TransportT1E1ControllerFeatureEntryArgs build() {
            return $;
        }
    }

}
