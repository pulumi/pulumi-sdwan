// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs Empty = new Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs();

    /**
     * Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     * 
     */
    @Import(name="destinationDataIpv4PrefixListId")
    private @Nullable Output<String> destinationDataIpv4PrefixListId;

    /**
     * @return Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     * 
     */
    public Optional<Output<String>> destinationDataIpv4PrefixListId() {
        return Optional.ofNullable(this.destinationDataIpv4PrefixListId);
    }

    /**
     * Destination data IPv4 prefix list version
     * 
     */
    @Import(name="destinationDataIpv4PrefixListVersion")
    private @Nullable Output<Integer> destinationDataIpv4PrefixListVersion;

    /**
     * @return Destination data IPv4 prefix list version
     * 
     */
    public Optional<Output<Integer>> destinationDataIpv4PrefixListVersion() {
        return Optional.ofNullable(this.destinationDataIpv4PrefixListVersion);
    }

    /**
     * Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    @Import(name="destinationIp")
    private @Nullable Output<String> destinationIp;

    /**
     * @return Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    public Optional<Output<String>> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }

    /**
     * Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    @Import(name="destinationIpVariable")
    private @Nullable Output<String> destinationIpVariable;

    /**
     * @return Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    public Optional<Output<String>> destinationIpVariable() {
        return Optional.ofNullable(this.destinationIpVariable);
    }

    /**
     * Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    /**
     * @return Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     * 
     */
    @Import(name="sourceDataIpv4PrefixListId")
    private @Nullable Output<String> sourceDataIpv4PrefixListId;

    /**
     * @return Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     * 
     */
    public Optional<Output<String>> sourceDataIpv4PrefixListId() {
        return Optional.ofNullable(this.sourceDataIpv4PrefixListId);
    }

    /**
     * Source data IPv4 prefix list version
     * 
     */
    @Import(name="sourceDataIpv4PrefixListVersion")
    private @Nullable Output<Integer> sourceDataIpv4PrefixListVersion;

    /**
     * @return Source data IPv4 prefix list version
     * 
     */
    public Optional<Output<Integer>> sourceDataIpv4PrefixListVersion() {
        return Optional.ofNullable(this.sourceDataIpv4PrefixListVersion);
    }

    /**
     * Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    @Import(name="sourceIpVariable")
    private @Nullable Output<String> sourceIpVariable;

    /**
     * @return Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    public Optional<Output<String>> sourceIpVariable() {
        return Optional.ofNullable(this.sourceIpVariable);
    }

    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    @Import(name="sourcePorts")
    private @Nullable Output<String> sourcePorts;

    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    public Optional<Output<String>> sourcePorts() {
        return Optional.ofNullable(this.sourcePorts);
    }

    /**
     * Type of match entry
     *   - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of match entry
     *   - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs() {}

    private Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs(Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs $) {
        this.destinationDataIpv4PrefixListId = $.destinationDataIpv4PrefixListId;
        this.destinationDataIpv4PrefixListVersion = $.destinationDataIpv4PrefixListVersion;
        this.destinationIp = $.destinationIp;
        this.destinationIpVariable = $.destinationIpVariable;
        this.destinationPort = $.destinationPort;
        this.sourceDataIpv4PrefixListId = $.sourceDataIpv4PrefixListId;
        this.sourceDataIpv4PrefixListVersion = $.sourceDataIpv4PrefixListVersion;
        this.sourceIp = $.sourceIp;
        this.sourceIpVariable = $.sourceIpVariable;
        this.sourcePorts = $.sourcePorts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs $;

        public Builder() {
            $ = new Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs();
        }

        public Builder(Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs defaults) {
            $ = new Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationDataIpv4PrefixListId Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListId(@Nullable Output<String> destinationDataIpv4PrefixListId) {
            $.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            return this;
        }

        /**
         * @param destinationDataIpv4PrefixListId Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListId(String destinationDataIpv4PrefixListId) {
            return destinationDataIpv4PrefixListId(Output.of(destinationDataIpv4PrefixListId));
        }

        /**
         * @param destinationDataIpv4PrefixListVersion Destination data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListVersion(@Nullable Output<Integer> destinationDataIpv4PrefixListVersion) {
            $.destinationDataIpv4PrefixListVersion = destinationDataIpv4PrefixListVersion;
            return this;
        }

        /**
         * @param destinationDataIpv4PrefixListVersion Destination data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListVersion(Integer destinationDataIpv4PrefixListVersion) {
            return destinationDataIpv4PrefixListVersion(Output.of(destinationDataIpv4PrefixListVersion));
        }

        /**
         * @param destinationIp Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(@Nullable Output<String> destinationIp) {
            $.destinationIp = destinationIp;
            return this;
        }

        /**
         * @param destinationIp Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(String destinationIp) {
            return destinationIp(Output.of(destinationIp));
        }

        /**
         * @param destinationIpVariable Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIpVariable(@Nullable Output<String> destinationIpVariable) {
            $.destinationIpVariable = destinationIpVariable;
            return this;
        }

        /**
         * @param destinationIpVariable Destination IP prefix variable, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIpVariable(String destinationIpVariable) {
            return destinationIpVariable(Output.of(destinationIpVariable));
        }

        /**
         * @param destinationPort Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param sourceDataIpv4PrefixListId Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListId(@Nullable Output<String> sourceDataIpv4PrefixListId) {
            $.sourceDataIpv4PrefixListId = sourceDataIpv4PrefixListId;
            return this;
        }

        /**
         * @param sourceDataIpv4PrefixListId Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListId(String sourceDataIpv4PrefixListId) {
            return sourceDataIpv4PrefixListId(Output.of(sourceDataIpv4PrefixListId));
        }

        /**
         * @param sourceDataIpv4PrefixListVersion Source data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListVersion(@Nullable Output<Integer> sourceDataIpv4PrefixListVersion) {
            $.sourceDataIpv4PrefixListVersion = sourceDataIpv4PrefixListVersion;
            return this;
        }

        /**
         * @param sourceDataIpv4PrefixListVersion Source data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListVersion(Integer sourceDataIpv4PrefixListVersion) {
            return sourceDataIpv4PrefixListVersion(Output.of(sourceDataIpv4PrefixListVersion));
        }

        /**
         * @param sourceIp Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourceIpVariable Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIpVariable(@Nullable Output<String> sourceIpVariable) {
            $.sourceIpVariable = sourceIpVariable;
            return this;
        }

        /**
         * @param sourceIpVariable Source IP prefix variable, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIpVariable(String sourceIpVariable) {
            return sourceIpVariable(Output.of(sourceIpVariable));
        }

        /**
         * @param sourcePorts Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(@Nullable Output<String> sourcePorts) {
            $.sourcePorts = sourcePorts;
            return this;
        }

        /**
         * @param sourcePorts Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(String sourcePorts) {
            return sourcePorts(Output.of(sourcePorts));
        }

        /**
         * @param type Type of match entry
         *   - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of match entry
         *   - Choices: `sourceIp`, `destinationIp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("Ipv4DeviceAclPolicyDefinitionSequenceMatchEntryArgs", "type");
            }
            return $;
        }
    }

}
