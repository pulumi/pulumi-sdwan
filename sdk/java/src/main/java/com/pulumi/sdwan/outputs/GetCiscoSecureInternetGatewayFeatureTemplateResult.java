// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoSecureInternetGatewayFeatureTemplateInterface;
import com.pulumi.sdwan.outputs.GetCiscoSecureInternetGatewayFeatureTemplateService;
import com.pulumi.sdwan.outputs.GetCiscoSecureInternetGatewayFeatureTemplateTracker;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoSecureInternetGatewayFeatureTemplateResult {
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Interface name: IPsec when present
     * 
     */
    private List<GetCiscoSecureInternetGatewayFeatureTemplateInterface> interfaces;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Configure services
     * 
     */
    private List<GetCiscoSecureInternetGatewayFeatureTemplateService> services;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Source IP address for Tracker
     * 
     */
    private String trackerSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String trackerSourceIpVariable;
    /**
     * @return Tracker configuration
     * 
     */
    private List<GetCiscoSecureInternetGatewayFeatureTemplateTracker> trackers;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;
    /**
     * @return List of VPN instances
     * 
     */
    private Integer vpnId;

    private GetCiscoSecureInternetGatewayFeatureTemplateResult() {}
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface name: IPsec when present
     * 
     */
    public List<GetCiscoSecureInternetGatewayFeatureTemplateInterface> interfaces() {
        return this.interfaces;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Configure services
     * 
     */
    public List<GetCiscoSecureInternetGatewayFeatureTemplateService> services() {
        return this.services;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Source IP address for Tracker
     * 
     */
    public String trackerSourceIp() {
        return this.trackerSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerSourceIpVariable() {
        return this.trackerSourceIpVariable;
    }
    /**
     * @return Tracker configuration
     * 
     */
    public List<GetCiscoSecureInternetGatewayFeatureTemplateTracker> trackers() {
        return this.trackers;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return List of VPN instances
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSecureInternetGatewayFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<String> deviceTypes;
        private String id;
        private List<GetCiscoSecureInternetGatewayFeatureTemplateInterface> interfaces;
        private String name;
        private List<GetCiscoSecureInternetGatewayFeatureTemplateService> services;
        private String templateType;
        private String trackerSourceIp;
        private String trackerSourceIpVariable;
        private List<GetCiscoSecureInternetGatewayFeatureTemplateTracker> trackers;
        private Integer version;
        private Integer vpnId;
        public Builder() {}
        public Builder(GetCiscoSecureInternetGatewayFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.id = defaults.id;
    	      this.interfaces = defaults.interfaces;
    	      this.name = defaults.name;
    	      this.services = defaults.services;
    	      this.templateType = defaults.templateType;
    	      this.trackerSourceIp = defaults.trackerSourceIp;
    	      this.trackerSourceIpVariable = defaults.trackerSourceIpVariable;
    	      this.trackers = defaults.trackers;
    	      this.version = defaults.version;
    	      this.vpnId = defaults.vpnId;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaces(List<GetCiscoSecureInternetGatewayFeatureTemplateInterface> interfaces) {
            if (interfaces == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "interfaces");
            }
            this.interfaces = interfaces;
            return this;
        }
        public Builder interfaces(GetCiscoSecureInternetGatewayFeatureTemplateInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder services(List<GetCiscoSecureInternetGatewayFeatureTemplateService> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(GetCiscoSecureInternetGatewayFeatureTemplateService... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder trackerSourceIp(String trackerSourceIp) {
            if (trackerSourceIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "trackerSourceIp");
            }
            this.trackerSourceIp = trackerSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder trackerSourceIpVariable(String trackerSourceIpVariable) {
            if (trackerSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "trackerSourceIpVariable");
            }
            this.trackerSourceIpVariable = trackerSourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackers(List<GetCiscoSecureInternetGatewayFeatureTemplateTracker> trackers) {
            if (trackers == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "trackers");
            }
            this.trackers = trackers;
            return this;
        }
        public Builder trackers(GetCiscoSecureInternetGatewayFeatureTemplateTracker... trackers) {
            return trackers(List.of(trackers));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateResult", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        public GetCiscoSecureInternetGatewayFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoSecureInternetGatewayFeatureTemplateResult();
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.id = id;
            _resultValue.interfaces = interfaces;
            _resultValue.name = name;
            _resultValue.services = services;
            _resultValue.templateType = templateType;
            _resultValue.trackerSourceIp = trackerSourceIp;
            _resultValue.trackerSourceIpVariable = trackerSourceIpVariable;
            _resultValue.trackers = trackers;
            _resultValue.version = version;
            _resultValue.vpnId = vpnId;
            return _resultValue;
        }
    }
}
