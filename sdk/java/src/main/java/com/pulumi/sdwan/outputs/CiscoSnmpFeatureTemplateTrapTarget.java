// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoSnmpFeatureTemplateTrapTarget {
    /**
     * @return Set name of the SNMP community
     * 
     */
    private @Nullable String communityName;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String communityNameVariable;
    /**
     * @return Set IPv4/IPv6 address of SNMP server
     * 
     */
    private @Nullable String ip;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ipVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Source interface for outgoing SNMP traps
     * 
     */
    private @Nullable String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String sourceInterfaceVariable;
    /**
     * @return Set UDP port number to connect to SNMP server
     *   - Range: `1`-`65535`
     * 
     */
    private @Nullable Integer udpPort;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String udpPortVariable;
    /**
     * @return Set name of the SNMP user
     * 
     */
    private @Nullable String user;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String userVariable;
    /**
     * @return Set VPN in which SNMP server is located
     *   - Range: `0`-`65530`
     * 
     */
    private @Nullable Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String vpnIdVariable;

    private CiscoSnmpFeatureTemplateTrapTarget() {}
    /**
     * @return Set name of the SNMP community
     * 
     */
    public Optional<String> communityName() {
        return Optional.ofNullable(this.communityName);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> communityNameVariable() {
        return Optional.ofNullable(this.communityNameVariable);
    }
    /**
     * @return Set IPv4/IPv6 address of SNMP server
     * 
     */
    public Optional<String> ip() {
        return Optional.ofNullable(this.ip);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ipVariable() {
        return Optional.ofNullable(this.ipVariable);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Source interface for outgoing SNMP traps
     * 
     */
    public Optional<String> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }
    /**
     * @return Set UDP port number to connect to SNMP server
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Integer> udpPort() {
        return Optional.ofNullable(this.udpPort);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> udpPortVariable() {
        return Optional.ofNullable(this.udpPortVariable);
    }
    /**
     * @return Set name of the SNMP user
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> userVariable() {
        return Optional.ofNullable(this.userVariable);
    }
    /**
     * @return Set VPN in which SNMP server is located
     *   - Range: `0`-`65530`
     * 
     */
    public Optional<Integer> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoSnmpFeatureTemplateTrapTarget defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String communityName;
        private @Nullable String communityNameVariable;
        private @Nullable String ip;
        private @Nullable String ipVariable;
        private @Nullable Boolean optional;
        private @Nullable String sourceInterface;
        private @Nullable String sourceInterfaceVariable;
        private @Nullable Integer udpPort;
        private @Nullable String udpPortVariable;
        private @Nullable String user;
        private @Nullable String userVariable;
        private @Nullable Integer vpnId;
        private @Nullable String vpnIdVariable;
        public Builder() {}
        public Builder(CiscoSnmpFeatureTemplateTrapTarget defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.communityName = defaults.communityName;
    	      this.communityNameVariable = defaults.communityNameVariable;
    	      this.ip = defaults.ip;
    	      this.ipVariable = defaults.ipVariable;
    	      this.optional = defaults.optional;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.udpPort = defaults.udpPort;
    	      this.udpPortVariable = defaults.udpPortVariable;
    	      this.user = defaults.user;
    	      this.userVariable = defaults.userVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder communityName(@Nullable String communityName) {

            this.communityName = communityName;
            return this;
        }
        @CustomType.Setter
        public Builder communityNameVariable(@Nullable String communityNameVariable) {

            this.communityNameVariable = communityNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ip(@Nullable String ip) {

            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder ipVariable(@Nullable String ipVariable) {

            this.ipVariable = ipVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(@Nullable String sourceInterface) {

            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(@Nullable String sourceInterfaceVariable) {

            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder udpPort(@Nullable Integer udpPort) {

            this.udpPort = udpPort;
            return this;
        }
        @CustomType.Setter
        public Builder udpPortVariable(@Nullable String udpPortVariable) {

            this.udpPortVariable = udpPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        @CustomType.Setter
        public Builder userVariable(@Nullable String userVariable) {

            this.userVariable = userVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(@Nullable Integer vpnId) {

            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(@Nullable String vpnIdVariable) {

            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public CiscoSnmpFeatureTemplateTrapTarget build() {
            final var _resultValue = new CiscoSnmpFeatureTemplateTrapTarget();
            _resultValue.communityName = communityName;
            _resultValue.communityNameVariable = communityNameVariable;
            _resultValue.ip = ip;
            _resultValue.ipVariable = ipVariable;
            _resultValue.optional = optional;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.udpPort = udpPort;
            _resultValue.udpPortVariable = udpPortVariable;
            _resultValue.user = user;
            _resultValue.userVariable = userVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
