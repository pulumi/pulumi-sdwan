// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureArp;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceEthernetFeatureStaticNat;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceLanVpnInterfaceEthernetFeatureResult {
    private String aclIpv4EgressPolicyId;
    private String aclIpv4IngressPolicyId;
    private String aclIpv6EgressPolicyId;
    private String aclIpv6IngressPolicyId;
    /**
     * @return Shaping Rate (Kbps)
     * 
     */
    private Integer aclShapingRate;
    /**
     * @return Variable name
     * 
     */
    private String aclShapingRateVariable;
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    private Integer arpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String arpTimeoutVariable;
    /**
     * @return Configure ARP entries
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureArp> arps;
    /**
     * @return Link autonegotiation
     * 
     */
    private Boolean autonegotiate;
    /**
     * @return Variable name
     * 
     */
    private String autonegotiateVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Duplex mode
     * 
     */
    private String duplex;
    /**
     * @return Variable name
     * 
     */
    private String duplexVariable;
    /**
     * @return Enable DHCPv6
     * 
     */
    private Boolean enableDhcpv6;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    private Boolean icmpRedirectDisable;
    /**
     * @return Variable name
     * 
     */
    private String icmpRedirectDisableVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface MTU
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return IP Address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return DHCP Distance
     * 
     */
    private Integer ipv4DhcpDistance;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpDistanceVariable;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpHelperVariable;
    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    private List<String> ipv4DhcpHelpers;
    /**
     * @return enable Network Address Translation on this interface
     * 
     */
    private Boolean ipv4Nat;
    /**
     * @return NAT Inside Source Loopback Interface
     * 
     */
    private String ipv4NatLoopback;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatLoopbackVariable;
    /**
     * @return NAT Overload
     * 
     */
    private Boolean ipv4NatOverload;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatOverloadVariable;
    /**
     * @return NAT Pool Prefix Length
     * 
     */
    private Integer ipv4NatPrefixLength;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatPrefixLengthVariable;
    /**
     * @return NAT Pool Range End
     * 
     */
    private String ipv4NatRangeEnd;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatRangeEndVariable;
    /**
     * @return NAT Pool Range Start
     * 
     */
    private String ipv4NatRangeStart;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatRangeStartVariable;
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    private Integer ipv4NatTcpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatTcpTimeoutVariable;
    /**
     * @return NAT Type
     * 
     */
    private String ipv4NatType;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatTypeVariable;
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    private Integer ipv4NatUdpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String ipv4NatUdpTimeoutVariable;
    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
    /**
     * @return Subnet Mask
     * 
     */
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return Enable VRRP
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp> ipv4Vrrps;
    /**
     * @return IPv6 Address Secondary
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return DHCPv6 Helper
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper> ipv6DhcpHelpers;
    /**
     * @return secondary IPv6 addresses
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses;
    /**
     * @return enable Network Address Translation ipv6 on this interface
     * 
     */
    private Boolean ipv6Nat;
    /**
     * @return Static secondary IPv6 addresses
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses;
    /**
     * @return Enable VRRP Ipv6
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp> ipv6Vrrps;
    /**
     * @return Interval for interface load calculation
     * 
     */
    private Integer loadInterval;
    /**
     * @return Variable name
     * 
     */
    private String loadIntervalVariable;
    /**
     * @return MAC Address
     * 
     */
    private String macAddress;
    /**
     * @return Variable name
     * 
     */
    private String macAddressVariable;
    /**
     * @return Media type
     * 
     */
    private String mediaType;
    /**
     * @return Variable name
     * 
     */
    private String mediaTypeVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return NAT64 on this interface
     * 
     */
    private Boolean nat64;
    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    private String serviceLanVpnFeatureId;
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Set interface speed
     * 
     */
    private String speed;
    /**
     * @return Variable name
     * 
     */
    private String speedVariable;
    /**
     * @return static NAT
     * 
     */
    private List<GetServiceLanVpnInterfaceEthernetFeatureStaticNat> staticNats;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private String tracker;
    /**
     * @return Variable name
     * 
     */
    private String trackerVariable;
    /**
     * @return Enable/Disable SGT Enforcement on an interface
     * 
     */
    private Boolean trustsecEnableEnforcedPropogation;
    /**
     * @return Indicates that the interface is trustworthy for CTS
     * 
     */
    private Boolean trustsecEnableSgtPropogation;
    /**
     * @return SGT value between 2 and 65519
     * 
     */
    private Integer trustsecEnforcedSecurityGroupTag;
    /**
     * @return Variable name
     * 
     */
    private String trustsecEnforcedSecurityGroupTagVariable;
    /**
     * @return Enables the interface for CTS SGT authorization and forwarding
     * 
     */
    private Boolean trustsecPropogate;
    /**
     * @return SGT value between 2 and 65519
     * 
     */
    private Integer trustsecSecurityGroupTag;
    /**
     * @return Variable name
     * 
     */
    private String trustsecSecurityGroupTagVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local LAN interface
     * 
     */
    private String xconnect;
    /**
     * @return Variable name
     * 
     */
    private String xconnectVariable;

    private GetServiceLanVpnInterfaceEthernetFeatureResult() {}
    public String aclIpv4EgressPolicyId() {
        return this.aclIpv4EgressPolicyId;
    }
    public String aclIpv4IngressPolicyId() {
        return this.aclIpv4IngressPolicyId;
    }
    public String aclIpv6EgressPolicyId() {
        return this.aclIpv6EgressPolicyId;
    }
    public String aclIpv6IngressPolicyId() {
        return this.aclIpv6IngressPolicyId;
    }
    /**
     * @return Shaping Rate (Kbps)
     * 
     */
    public Integer aclShapingRate() {
        return this.aclShapingRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String aclShapingRateVariable() {
        return this.aclShapingRateVariable;
    }
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpTimeoutVariable() {
        return this.arpTimeoutVariable;
    }
    /**
     * @return Configure ARP entries
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureArp> arps() {
        return this.arps;
    }
    /**
     * @return Link autonegotiation
     * 
     */
    public Boolean autonegotiate() {
        return this.autonegotiate;
    }
    /**
     * @return Variable name
     * 
     */
    public String autonegotiateVariable() {
        return this.autonegotiateVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Duplex mode
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return Variable name
     * 
     */
    public String duplexVariable() {
        return this.duplexVariable;
    }
    /**
     * @return Enable DHCPv6
     * 
     */
    public Boolean enableDhcpv6() {
        return this.enableDhcpv6;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    public Boolean icmpRedirectDisable() {
        return this.icmpRedirectDisable;
    }
    /**
     * @return Variable name
     * 
     */
    public String icmpRedirectDisableVariable() {
        return this.icmpRedirectDisableVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface MTU
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return IP Address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return DHCP Distance
     * 
     */
    public Integer ipv4DhcpDistance() {
        return this.ipv4DhcpDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpDistanceVariable() {
        return this.ipv4DhcpDistanceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpHelperVariable() {
        return this.ipv4DhcpHelperVariable;
    }
    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    public List<String> ipv4DhcpHelpers() {
        return this.ipv4DhcpHelpers;
    }
    /**
     * @return enable Network Address Translation on this interface
     * 
     */
    public Boolean ipv4Nat() {
        return this.ipv4Nat;
    }
    /**
     * @return NAT Inside Source Loopback Interface
     * 
     */
    public String ipv4NatLoopback() {
        return this.ipv4NatLoopback;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatLoopbackVariable() {
        return this.ipv4NatLoopbackVariable;
    }
    /**
     * @return NAT Overload
     * 
     */
    public Boolean ipv4NatOverload() {
        return this.ipv4NatOverload;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatOverloadVariable() {
        return this.ipv4NatOverloadVariable;
    }
    /**
     * @return NAT Pool Prefix Length
     * 
     */
    public Integer ipv4NatPrefixLength() {
        return this.ipv4NatPrefixLength;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatPrefixLengthVariable() {
        return this.ipv4NatPrefixLengthVariable;
    }
    /**
     * @return NAT Pool Range End
     * 
     */
    public String ipv4NatRangeEnd() {
        return this.ipv4NatRangeEnd;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatRangeEndVariable() {
        return this.ipv4NatRangeEndVariable;
    }
    /**
     * @return NAT Pool Range Start
     * 
     */
    public String ipv4NatRangeStart() {
        return this.ipv4NatRangeStart;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatRangeStartVariable() {
        return this.ipv4NatRangeStartVariable;
    }
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    public Integer ipv4NatTcpTimeout() {
        return this.ipv4NatTcpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatTcpTimeoutVariable() {
        return this.ipv4NatTcpTimeoutVariable;
    }
    /**
     * @return NAT Type
     * 
     */
    public String ipv4NatType() {
        return this.ipv4NatType;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatTypeVariable() {
        return this.ipv4NatTypeVariable;
    }
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    public Integer ipv4NatUdpTimeout() {
        return this.ipv4NatUdpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4NatUdpTimeoutVariable() {
        return this.ipv4NatUdpTimeoutVariable;
    }
    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses() {
        return this.ipv4SecondaryAddresses;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return Enable VRRP
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp> ipv4Vrrps() {
        return this.ipv4Vrrps;
    }
    /**
     * @return IPv6 Address Secondary
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return DHCPv6 Helper
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper> ipv6DhcpHelpers() {
        return this.ipv6DhcpHelpers;
    }
    /**
     * @return secondary IPv6 addresses
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses() {
        return this.ipv6DhcpSecondaryAddresses;
    }
    /**
     * @return enable Network Address Translation ipv6 on this interface
     * 
     */
    public Boolean ipv6Nat() {
        return this.ipv6Nat;
    }
    /**
     * @return Static secondary IPv6 addresses
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses() {
        return this.ipv6SecondaryAddresses;
    }
    /**
     * @return Enable VRRP Ipv6
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp> ipv6Vrrps() {
        return this.ipv6Vrrps;
    }
    /**
     * @return Interval for interface load calculation
     * 
     */
    public Integer loadInterval() {
        return this.loadInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String loadIntervalVariable() {
        return this.loadIntervalVariable;
    }
    /**
     * @return MAC Address
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String macAddressVariable() {
        return this.macAddressVariable;
    }
    /**
     * @return Media type
     * 
     */
    public String mediaType() {
        return this.mediaType;
    }
    /**
     * @return Variable name
     * 
     */
    public String mediaTypeVariable() {
        return this.mediaTypeVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return NAT64 on this interface
     * 
     */
    public Boolean nat64() {
        return this.nat64;
    }
    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    public String serviceLanVpnFeatureId() {
        return this.serviceLanVpnFeatureId;
    }
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Set interface speed
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Variable name
     * 
     */
    public String speedVariable() {
        return this.speedVariable;
    }
    /**
     * @return static NAT
     * 
     */
    public List<GetServiceLanVpnInterfaceEthernetFeatureStaticNat> staticNats() {
        return this.staticNats;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public String tracker() {
        return this.tracker;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerVariable() {
        return this.trackerVariable;
    }
    /**
     * @return Enable/Disable SGT Enforcement on an interface
     * 
     */
    public Boolean trustsecEnableEnforcedPropogation() {
        return this.trustsecEnableEnforcedPropogation;
    }
    /**
     * @return Indicates that the interface is trustworthy for CTS
     * 
     */
    public Boolean trustsecEnableSgtPropogation() {
        return this.trustsecEnableSgtPropogation;
    }
    /**
     * @return SGT value between 2 and 65519
     * 
     */
    public Integer trustsecEnforcedSecurityGroupTag() {
        return this.trustsecEnforcedSecurityGroupTag;
    }
    /**
     * @return Variable name
     * 
     */
    public String trustsecEnforcedSecurityGroupTagVariable() {
        return this.trustsecEnforcedSecurityGroupTagVariable;
    }
    /**
     * @return Enables the interface for CTS SGT authorization and forwarding
     * 
     */
    public Boolean trustsecPropogate() {
        return this.trustsecPropogate;
    }
    /**
     * @return SGT value between 2 and 65519
     * 
     */
    public Integer trustsecSecurityGroupTag() {
        return this.trustsecSecurityGroupTag;
    }
    /**
     * @return Variable name
     * 
     */
    public String trustsecSecurityGroupTagVariable() {
        return this.trustsecSecurityGroupTagVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local LAN interface
     * 
     */
    public String xconnect() {
        return this.xconnect;
    }
    /**
     * @return Variable name
     * 
     */
    public String xconnectVariable() {
        return this.xconnectVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLanVpnInterfaceEthernetFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclIpv4EgressPolicyId;
        private String aclIpv4IngressPolicyId;
        private String aclIpv6EgressPolicyId;
        private String aclIpv6IngressPolicyId;
        private Integer aclShapingRate;
        private String aclShapingRateVariable;
        private Integer arpTimeout;
        private String arpTimeoutVariable;
        private List<GetServiceLanVpnInterfaceEthernetFeatureArp> arps;
        private Boolean autonegotiate;
        private String autonegotiateVariable;
        private String description;
        private String duplex;
        private String duplexVariable;
        private Boolean enableDhcpv6;
        private String featureProfileId;
        private Boolean icmpRedirectDisable;
        private String icmpRedirectDisableVariable;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private Integer ipv4DhcpDistance;
        private String ipv4DhcpDistanceVariable;
        private String ipv4DhcpHelperVariable;
        private List<String> ipv4DhcpHelpers;
        private Boolean ipv4Nat;
        private String ipv4NatLoopback;
        private String ipv4NatLoopbackVariable;
        private Boolean ipv4NatOverload;
        private String ipv4NatOverloadVariable;
        private Integer ipv4NatPrefixLength;
        private String ipv4NatPrefixLengthVariable;
        private String ipv4NatRangeEnd;
        private String ipv4NatRangeEndVariable;
        private String ipv4NatRangeStart;
        private String ipv4NatRangeStartVariable;
        private Integer ipv4NatTcpTimeout;
        private String ipv4NatTcpTimeoutVariable;
        private String ipv4NatType;
        private String ipv4NatTypeVariable;
        private Integer ipv4NatUdpTimeout;
        private String ipv4NatUdpTimeoutVariable;
        private List<GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private List<GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp> ipv4Vrrps;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper> ipv6DhcpHelpers;
        private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses;
        private Boolean ipv6Nat;
        private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses;
        private List<GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp> ipv6Vrrps;
        private Integer loadInterval;
        private String loadIntervalVariable;
        private String macAddress;
        private String macAddressVariable;
        private String mediaType;
        private String mediaTypeVariable;
        private String name;
        private Boolean nat64;
        private String serviceLanVpnFeatureId;
        private Boolean shutdown;
        private String shutdownVariable;
        private String speed;
        private String speedVariable;
        private List<GetServiceLanVpnInterfaceEthernetFeatureStaticNat> staticNats;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String tracker;
        private String trackerVariable;
        private Boolean trustsecEnableEnforcedPropogation;
        private Boolean trustsecEnableSgtPropogation;
        private Integer trustsecEnforcedSecurityGroupTag;
        private String trustsecEnforcedSecurityGroupTagVariable;
        private Boolean trustsecPropogate;
        private Integer trustsecSecurityGroupTag;
        private String trustsecSecurityGroupTagVariable;
        private Integer version;
        private String xconnect;
        private String xconnectVariable;
        public Builder() {}
        public Builder(GetServiceLanVpnInterfaceEthernetFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclIpv4EgressPolicyId = defaults.aclIpv4EgressPolicyId;
    	      this.aclIpv4IngressPolicyId = defaults.aclIpv4IngressPolicyId;
    	      this.aclIpv6EgressPolicyId = defaults.aclIpv6EgressPolicyId;
    	      this.aclIpv6IngressPolicyId = defaults.aclIpv6IngressPolicyId;
    	      this.aclShapingRate = defaults.aclShapingRate;
    	      this.aclShapingRateVariable = defaults.aclShapingRateVariable;
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.arpTimeoutVariable = defaults.arpTimeoutVariable;
    	      this.arps = defaults.arps;
    	      this.autonegotiate = defaults.autonegotiate;
    	      this.autonegotiateVariable = defaults.autonegotiateVariable;
    	      this.description = defaults.description;
    	      this.duplex = defaults.duplex;
    	      this.duplexVariable = defaults.duplexVariable;
    	      this.enableDhcpv6 = defaults.enableDhcpv6;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.icmpRedirectDisable = defaults.icmpRedirectDisable;
    	      this.icmpRedirectDisableVariable = defaults.icmpRedirectDisableVariable;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4DhcpDistance = defaults.ipv4DhcpDistance;
    	      this.ipv4DhcpDistanceVariable = defaults.ipv4DhcpDistanceVariable;
    	      this.ipv4DhcpHelperVariable = defaults.ipv4DhcpHelperVariable;
    	      this.ipv4DhcpHelpers = defaults.ipv4DhcpHelpers;
    	      this.ipv4Nat = defaults.ipv4Nat;
    	      this.ipv4NatLoopback = defaults.ipv4NatLoopback;
    	      this.ipv4NatLoopbackVariable = defaults.ipv4NatLoopbackVariable;
    	      this.ipv4NatOverload = defaults.ipv4NatOverload;
    	      this.ipv4NatOverloadVariable = defaults.ipv4NatOverloadVariable;
    	      this.ipv4NatPrefixLength = defaults.ipv4NatPrefixLength;
    	      this.ipv4NatPrefixLengthVariable = defaults.ipv4NatPrefixLengthVariable;
    	      this.ipv4NatRangeEnd = defaults.ipv4NatRangeEnd;
    	      this.ipv4NatRangeEndVariable = defaults.ipv4NatRangeEndVariable;
    	      this.ipv4NatRangeStart = defaults.ipv4NatRangeStart;
    	      this.ipv4NatRangeStartVariable = defaults.ipv4NatRangeStartVariable;
    	      this.ipv4NatTcpTimeout = defaults.ipv4NatTcpTimeout;
    	      this.ipv4NatTcpTimeoutVariable = defaults.ipv4NatTcpTimeoutVariable;
    	      this.ipv4NatType = defaults.ipv4NatType;
    	      this.ipv4NatTypeVariable = defaults.ipv4NatTypeVariable;
    	      this.ipv4NatUdpTimeout = defaults.ipv4NatUdpTimeout;
    	      this.ipv4NatUdpTimeoutVariable = defaults.ipv4NatUdpTimeoutVariable;
    	      this.ipv4SecondaryAddresses = defaults.ipv4SecondaryAddresses;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.ipv4Vrrps = defaults.ipv4Vrrps;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.ipv6DhcpHelpers = defaults.ipv6DhcpHelpers;
    	      this.ipv6DhcpSecondaryAddresses = defaults.ipv6DhcpSecondaryAddresses;
    	      this.ipv6Nat = defaults.ipv6Nat;
    	      this.ipv6SecondaryAddresses = defaults.ipv6SecondaryAddresses;
    	      this.ipv6Vrrps = defaults.ipv6Vrrps;
    	      this.loadInterval = defaults.loadInterval;
    	      this.loadIntervalVariable = defaults.loadIntervalVariable;
    	      this.macAddress = defaults.macAddress;
    	      this.macAddressVariable = defaults.macAddressVariable;
    	      this.mediaType = defaults.mediaType;
    	      this.mediaTypeVariable = defaults.mediaTypeVariable;
    	      this.name = defaults.name;
    	      this.nat64 = defaults.nat64;
    	      this.serviceLanVpnFeatureId = defaults.serviceLanVpnFeatureId;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.speed = defaults.speed;
    	      this.speedVariable = defaults.speedVariable;
    	      this.staticNats = defaults.staticNats;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.tracker = defaults.tracker;
    	      this.trackerVariable = defaults.trackerVariable;
    	      this.trustsecEnableEnforcedPropogation = defaults.trustsecEnableEnforcedPropogation;
    	      this.trustsecEnableSgtPropogation = defaults.trustsecEnableSgtPropogation;
    	      this.trustsecEnforcedSecurityGroupTag = defaults.trustsecEnforcedSecurityGroupTag;
    	      this.trustsecEnforcedSecurityGroupTagVariable = defaults.trustsecEnforcedSecurityGroupTagVariable;
    	      this.trustsecPropogate = defaults.trustsecPropogate;
    	      this.trustsecSecurityGroupTag = defaults.trustsecSecurityGroupTag;
    	      this.trustsecSecurityGroupTagVariable = defaults.trustsecSecurityGroupTagVariable;
    	      this.version = defaults.version;
    	      this.xconnect = defaults.xconnect;
    	      this.xconnectVariable = defaults.xconnectVariable;
        }

        @CustomType.Setter
        public Builder aclIpv4EgressPolicyId(String aclIpv4EgressPolicyId) {
            if (aclIpv4EgressPolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "aclIpv4EgressPolicyId");
            }
            this.aclIpv4EgressPolicyId = aclIpv4EgressPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv4IngressPolicyId(String aclIpv4IngressPolicyId) {
            if (aclIpv4IngressPolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "aclIpv4IngressPolicyId");
            }
            this.aclIpv4IngressPolicyId = aclIpv4IngressPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6EgressPolicyId(String aclIpv6EgressPolicyId) {
            if (aclIpv6EgressPolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "aclIpv6EgressPolicyId");
            }
            this.aclIpv6EgressPolicyId = aclIpv6EgressPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6IngressPolicyId(String aclIpv6IngressPolicyId) {
            if (aclIpv6IngressPolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "aclIpv6IngressPolicyId");
            }
            this.aclIpv6IngressPolicyId = aclIpv6IngressPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder aclShapingRate(Integer aclShapingRate) {
            if (aclShapingRate == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "aclShapingRate");
            }
            this.aclShapingRate = aclShapingRate;
            return this;
        }
        @CustomType.Setter
        public Builder aclShapingRateVariable(String aclShapingRateVariable) {
            if (aclShapingRateVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "aclShapingRateVariable");
            }
            this.aclShapingRateVariable = aclShapingRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            if (arpTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "arpTimeout");
            }
            this.arpTimeout = arpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            if (arpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "arpTimeoutVariable");
            }
            this.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder arps(List<GetServiceLanVpnInterfaceEthernetFeatureArp> arps) {
            if (arps == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "arps");
            }
            this.arps = arps;
            return this;
        }
        public Builder arps(GetServiceLanVpnInterfaceEthernetFeatureArp... arps) {
            return arps(List.of(arps));
        }
        @CustomType.Setter
        public Builder autonegotiate(Boolean autonegotiate) {
            if (autonegotiate == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "autonegotiate");
            }
            this.autonegotiate = autonegotiate;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiateVariable(String autonegotiateVariable) {
            if (autonegotiateVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "autonegotiateVariable");
            }
            this.autonegotiateVariable = autonegotiateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            if (duplex == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "duplex");
            }
            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder duplexVariable(String duplexVariable) {
            if (duplexVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "duplexVariable");
            }
            this.duplexVariable = duplexVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableDhcpv6(Boolean enableDhcpv6) {
            if (enableDhcpv6 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "enableDhcpv6");
            }
            this.enableDhcpv6 = enableDhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisable(Boolean icmpRedirectDisable) {
            if (icmpRedirectDisable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "icmpRedirectDisable");
            }
            this.icmpRedirectDisable = icmpRedirectDisable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisableVariable(String icmpRedirectDisableVariable) {
            if (icmpRedirectDisableVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "icmpRedirectDisableVariable");
            }
            this.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpDistance(Integer ipv4DhcpDistance) {
            if (ipv4DhcpDistance == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4DhcpDistance");
            }
            this.ipv4DhcpDistance = ipv4DhcpDistance;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpDistanceVariable(String ipv4DhcpDistanceVariable) {
            if (ipv4DhcpDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4DhcpDistanceVariable");
            }
            this.ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelperVariable(String ipv4DhcpHelperVariable) {
            if (ipv4DhcpHelperVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4DhcpHelperVariable");
            }
            this.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            if (ipv4DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4DhcpHelpers");
            }
            this.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv4Nat(Boolean ipv4Nat) {
            if (ipv4Nat == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4Nat");
            }
            this.ipv4Nat = ipv4Nat;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatLoopback(String ipv4NatLoopback) {
            if (ipv4NatLoopback == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatLoopback");
            }
            this.ipv4NatLoopback = ipv4NatLoopback;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatLoopbackVariable(String ipv4NatLoopbackVariable) {
            if (ipv4NatLoopbackVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatLoopbackVariable");
            }
            this.ipv4NatLoopbackVariable = ipv4NatLoopbackVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatOverload(Boolean ipv4NatOverload) {
            if (ipv4NatOverload == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatOverload");
            }
            this.ipv4NatOverload = ipv4NatOverload;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatOverloadVariable(String ipv4NatOverloadVariable) {
            if (ipv4NatOverloadVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatOverloadVariable");
            }
            this.ipv4NatOverloadVariable = ipv4NatOverloadVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatPrefixLength(Integer ipv4NatPrefixLength) {
            if (ipv4NatPrefixLength == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatPrefixLength");
            }
            this.ipv4NatPrefixLength = ipv4NatPrefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatPrefixLengthVariable(String ipv4NatPrefixLengthVariable) {
            if (ipv4NatPrefixLengthVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatPrefixLengthVariable");
            }
            this.ipv4NatPrefixLengthVariable = ipv4NatPrefixLengthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatRangeEnd(String ipv4NatRangeEnd) {
            if (ipv4NatRangeEnd == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatRangeEnd");
            }
            this.ipv4NatRangeEnd = ipv4NatRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatRangeEndVariable(String ipv4NatRangeEndVariable) {
            if (ipv4NatRangeEndVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatRangeEndVariable");
            }
            this.ipv4NatRangeEndVariable = ipv4NatRangeEndVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatRangeStart(String ipv4NatRangeStart) {
            if (ipv4NatRangeStart == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatRangeStart");
            }
            this.ipv4NatRangeStart = ipv4NatRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatRangeStartVariable(String ipv4NatRangeStartVariable) {
            if (ipv4NatRangeStartVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatRangeStartVariable");
            }
            this.ipv4NatRangeStartVariable = ipv4NatRangeStartVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatTcpTimeout(Integer ipv4NatTcpTimeout) {
            if (ipv4NatTcpTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatTcpTimeout");
            }
            this.ipv4NatTcpTimeout = ipv4NatTcpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatTcpTimeoutVariable(String ipv4NatTcpTimeoutVariable) {
            if (ipv4NatTcpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatTcpTimeoutVariable");
            }
            this.ipv4NatTcpTimeoutVariable = ipv4NatTcpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatType(String ipv4NatType) {
            if (ipv4NatType == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatType");
            }
            this.ipv4NatType = ipv4NatType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatTypeVariable(String ipv4NatTypeVariable) {
            if (ipv4NatTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatTypeVariable");
            }
            this.ipv4NatTypeVariable = ipv4NatTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatUdpTimeout(Integer ipv4NatUdpTimeout) {
            if (ipv4NatUdpTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatUdpTimeout");
            }
            this.ipv4NatUdpTimeout = ipv4NatUdpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NatUdpTimeoutVariable(String ipv4NatUdpTimeoutVariable) {
            if (ipv4NatUdpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4NatUdpTimeoutVariable");
            }
            this.ipv4NatUdpTimeoutVariable = ipv4NatUdpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SecondaryAddresses(List<GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses) {
            if (ipv4SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4SecondaryAddresses");
            }
            this.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }
        public Builder ipv4SecondaryAddresses(GetServiceLanVpnInterfaceEthernetFeatureIpv4SecondaryAddress... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Vrrps(List<GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp> ipv4Vrrps) {
            if (ipv4Vrrps == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv4Vrrps");
            }
            this.ipv4Vrrps = ipv4Vrrps;
            return this;
        }
        public Builder ipv4Vrrps(GetServiceLanVpnInterfaceEthernetFeatureIpv4Vrrp... ipv4Vrrps) {
            return ipv4Vrrps(List.of(ipv4Vrrps));
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpHelpers(List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper> ipv6DhcpHelpers) {
            if (ipv6DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6DhcpHelpers");
            }
            this.ipv6DhcpHelpers = ipv6DhcpHelpers;
            return this;
        }
        public Builder ipv6DhcpHelpers(GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpHelper... ipv6DhcpHelpers) {
            return ipv6DhcpHelpers(List.of(ipv6DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv6DhcpSecondaryAddresses(List<GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses) {
            if (ipv6DhcpSecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6DhcpSecondaryAddresses");
            }
            this.ipv6DhcpSecondaryAddresses = ipv6DhcpSecondaryAddresses;
            return this;
        }
        public Builder ipv6DhcpSecondaryAddresses(GetServiceLanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress... ipv6DhcpSecondaryAddresses) {
            return ipv6DhcpSecondaryAddresses(List.of(ipv6DhcpSecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Nat(Boolean ipv6Nat) {
            if (ipv6Nat == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6Nat");
            }
            this.ipv6Nat = ipv6Nat;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6SecondaryAddresses(List<GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses) {
            if (ipv6SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6SecondaryAddresses");
            }
            this.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            return this;
        }
        public Builder ipv6SecondaryAddresses(GetServiceLanVpnInterfaceEthernetFeatureIpv6SecondaryAddress... ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(List.of(ipv6SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Vrrps(List<GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp> ipv6Vrrps) {
            if (ipv6Vrrps == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "ipv6Vrrps");
            }
            this.ipv6Vrrps = ipv6Vrrps;
            return this;
        }
        public Builder ipv6Vrrps(GetServiceLanVpnInterfaceEthernetFeatureIpv6Vrrp... ipv6Vrrps) {
            return ipv6Vrrps(List.of(ipv6Vrrps));
        }
        @CustomType.Setter
        public Builder loadInterval(Integer loadInterval) {
            if (loadInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "loadInterval");
            }
            this.loadInterval = loadInterval;
            return this;
        }
        @CustomType.Setter
        public Builder loadIntervalVariable(String loadIntervalVariable) {
            if (loadIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "loadIntervalVariable");
            }
            this.loadIntervalVariable = loadIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder macAddressVariable(String macAddressVariable) {
            if (macAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "macAddressVariable");
            }
            this.macAddressVariable = macAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mediaType(String mediaType) {
            if (mediaType == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "mediaType");
            }
            this.mediaType = mediaType;
            return this;
        }
        @CustomType.Setter
        public Builder mediaTypeVariable(String mediaTypeVariable) {
            if (mediaTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "mediaTypeVariable");
            }
            this.mediaTypeVariable = mediaTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat64(Boolean nat64) {
            if (nat64 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "nat64");
            }
            this.nat64 = nat64;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLanVpnFeatureId(String serviceLanVpnFeatureId) {
            if (serviceLanVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "serviceLanVpnFeatureId");
            }
            this.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder speedVariable(String speedVariable) {
            if (speedVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "speedVariable");
            }
            this.speedVariable = speedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticNats(List<GetServiceLanVpnInterfaceEthernetFeatureStaticNat> staticNats) {
            if (staticNats == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "staticNats");
            }
            this.staticNats = staticNats;
            return this;
        }
        public Builder staticNats(GetServiceLanVpnInterfaceEthernetFeatureStaticNat... staticNats) {
            return staticNats(List.of(staticNats));
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tracker(String tracker) {
            if (tracker == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "tracker");
            }
            this.tracker = tracker;
            return this;
        }
        @CustomType.Setter
        public Builder trackerVariable(String trackerVariable) {
            if (trackerVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trackerVariable");
            }
            this.trackerVariable = trackerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecEnableEnforcedPropogation(Boolean trustsecEnableEnforcedPropogation) {
            if (trustsecEnableEnforcedPropogation == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecEnableEnforcedPropogation");
            }
            this.trustsecEnableEnforcedPropogation = trustsecEnableEnforcedPropogation;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecEnableSgtPropogation(Boolean trustsecEnableSgtPropogation) {
            if (trustsecEnableSgtPropogation == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecEnableSgtPropogation");
            }
            this.trustsecEnableSgtPropogation = trustsecEnableSgtPropogation;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecEnforcedSecurityGroupTag(Integer trustsecEnforcedSecurityGroupTag) {
            if (trustsecEnforcedSecurityGroupTag == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecEnforcedSecurityGroupTag");
            }
            this.trustsecEnforcedSecurityGroupTag = trustsecEnforcedSecurityGroupTag;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecEnforcedSecurityGroupTagVariable(String trustsecEnforcedSecurityGroupTagVariable) {
            if (trustsecEnforcedSecurityGroupTagVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecEnforcedSecurityGroupTagVariable");
            }
            this.trustsecEnforcedSecurityGroupTagVariable = trustsecEnforcedSecurityGroupTagVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecPropogate(Boolean trustsecPropogate) {
            if (trustsecPropogate == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecPropogate");
            }
            this.trustsecPropogate = trustsecPropogate;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecSecurityGroupTag(Integer trustsecSecurityGroupTag) {
            if (trustsecSecurityGroupTag == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecSecurityGroupTag");
            }
            this.trustsecSecurityGroupTag = trustsecSecurityGroupTag;
            return this;
        }
        @CustomType.Setter
        public Builder trustsecSecurityGroupTagVariable(String trustsecSecurityGroupTagVariable) {
            if (trustsecSecurityGroupTagVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "trustsecSecurityGroupTagVariable");
            }
            this.trustsecSecurityGroupTagVariable = trustsecSecurityGroupTagVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder xconnect(String xconnect) {
            if (xconnect == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "xconnect");
            }
            this.xconnect = xconnect;
            return this;
        }
        @CustomType.Setter
        public Builder xconnectVariable(String xconnectVariable) {
            if (xconnectVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceEthernetFeatureResult", "xconnectVariable");
            }
            this.xconnectVariable = xconnectVariable;
            return this;
        }
        public GetServiceLanVpnInterfaceEthernetFeatureResult build() {
            final var _resultValue = new GetServiceLanVpnInterfaceEthernetFeatureResult();
            _resultValue.aclIpv4EgressPolicyId = aclIpv4EgressPolicyId;
            _resultValue.aclIpv4IngressPolicyId = aclIpv4IngressPolicyId;
            _resultValue.aclIpv6EgressPolicyId = aclIpv6EgressPolicyId;
            _resultValue.aclIpv6IngressPolicyId = aclIpv6IngressPolicyId;
            _resultValue.aclShapingRate = aclShapingRate;
            _resultValue.aclShapingRateVariable = aclShapingRateVariable;
            _resultValue.arpTimeout = arpTimeout;
            _resultValue.arpTimeoutVariable = arpTimeoutVariable;
            _resultValue.arps = arps;
            _resultValue.autonegotiate = autonegotiate;
            _resultValue.autonegotiateVariable = autonegotiateVariable;
            _resultValue.description = description;
            _resultValue.duplex = duplex;
            _resultValue.duplexVariable = duplexVariable;
            _resultValue.enableDhcpv6 = enableDhcpv6;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.icmpRedirectDisable = icmpRedirectDisable;
            _resultValue.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4DhcpDistance = ipv4DhcpDistance;
            _resultValue.ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            _resultValue.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            _resultValue.ipv4DhcpHelpers = ipv4DhcpHelpers;
            _resultValue.ipv4Nat = ipv4Nat;
            _resultValue.ipv4NatLoopback = ipv4NatLoopback;
            _resultValue.ipv4NatLoopbackVariable = ipv4NatLoopbackVariable;
            _resultValue.ipv4NatOverload = ipv4NatOverload;
            _resultValue.ipv4NatOverloadVariable = ipv4NatOverloadVariable;
            _resultValue.ipv4NatPrefixLength = ipv4NatPrefixLength;
            _resultValue.ipv4NatPrefixLengthVariable = ipv4NatPrefixLengthVariable;
            _resultValue.ipv4NatRangeEnd = ipv4NatRangeEnd;
            _resultValue.ipv4NatRangeEndVariable = ipv4NatRangeEndVariable;
            _resultValue.ipv4NatRangeStart = ipv4NatRangeStart;
            _resultValue.ipv4NatRangeStartVariable = ipv4NatRangeStartVariable;
            _resultValue.ipv4NatTcpTimeout = ipv4NatTcpTimeout;
            _resultValue.ipv4NatTcpTimeoutVariable = ipv4NatTcpTimeoutVariable;
            _resultValue.ipv4NatType = ipv4NatType;
            _resultValue.ipv4NatTypeVariable = ipv4NatTypeVariable;
            _resultValue.ipv4NatUdpTimeout = ipv4NatUdpTimeout;
            _resultValue.ipv4NatUdpTimeoutVariable = ipv4NatUdpTimeoutVariable;
            _resultValue.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.ipv4Vrrps = ipv4Vrrps;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.ipv6DhcpHelpers = ipv6DhcpHelpers;
            _resultValue.ipv6DhcpSecondaryAddresses = ipv6DhcpSecondaryAddresses;
            _resultValue.ipv6Nat = ipv6Nat;
            _resultValue.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            _resultValue.ipv6Vrrps = ipv6Vrrps;
            _resultValue.loadInterval = loadInterval;
            _resultValue.loadIntervalVariable = loadIntervalVariable;
            _resultValue.macAddress = macAddress;
            _resultValue.macAddressVariable = macAddressVariable;
            _resultValue.mediaType = mediaType;
            _resultValue.mediaTypeVariable = mediaTypeVariable;
            _resultValue.name = name;
            _resultValue.nat64 = nat64;
            _resultValue.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.speed = speed;
            _resultValue.speedVariable = speedVariable;
            _resultValue.staticNats = staticNats;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.tracker = tracker;
            _resultValue.trackerVariable = trackerVariable;
            _resultValue.trustsecEnableEnforcedPropogation = trustsecEnableEnforcedPropogation;
            _resultValue.trustsecEnableSgtPropogation = trustsecEnableSgtPropogation;
            _resultValue.trustsecEnforcedSecurityGroupTag = trustsecEnforcedSecurityGroupTag;
            _resultValue.trustsecEnforcedSecurityGroupTagVariable = trustsecEnforcedSecurityGroupTagVariable;
            _resultValue.trustsecPropogate = trustsecPropogate;
            _resultValue.trustsecSecurityGroupTag = trustsecSecurityGroupTag;
            _resultValue.trustsecSecurityGroupTagVariable = trustsecSecurityGroupTagVariable;
            _resultValue.version = version;
            _resultValue.xconnect = xconnect;
            _resultValue.xconnectVariable = xconnectVariable;
            return _resultValue;
        }
    }
}
