// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoLoggingFeatureTemplateIpv4Server;
import com.pulumi.sdwan.outputs.GetCiscoLoggingFeatureTemplateIpv6Server;
import com.pulumi.sdwan.outputs.GetCiscoLoggingFeatureTemplateTlsProfile;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoLoggingFeatureTemplateResult {
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Enable logging to local disk
     * 
     */
    private Boolean diskLogging;
    /**
     * @return Variable name
     * 
     */
    private String diskLoggingVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Enable logging to remote server
     * 
     */
    private List<GetCiscoLoggingFeatureTemplateIpv4Server> ipv4Servers;
    /**
     * @return Enable logging to remote IPv6 server
     * 
     */
    private List<GetCiscoLoggingFeatureTemplateIpv6Server> ipv6Servers;
    /**
     * @return Set number of syslog files to create before discarding oldest files
     * 
     */
    private Integer logRotations;
    /**
     * @return Variable name
     * 
     */
    private String logRotationsVariable;
    /**
     * @return Set maximum size of file before it is rotated
     * 
     */
    private Integer maxSize;
    /**
     * @return Variable name
     * 
     */
    private String maxSizeVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Configure a TLS profile
     * 
     */
    private List<GetCiscoLoggingFeatureTemplateTlsProfile> tlsProfiles;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoLoggingFeatureTemplateResult() {}
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Enable logging to local disk
     * 
     */
    public Boolean diskLogging() {
        return this.diskLogging;
    }
    /**
     * @return Variable name
     * 
     */
    public String diskLoggingVariable() {
        return this.diskLoggingVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Enable logging to remote server
     * 
     */
    public List<GetCiscoLoggingFeatureTemplateIpv4Server> ipv4Servers() {
        return this.ipv4Servers;
    }
    /**
     * @return Enable logging to remote IPv6 server
     * 
     */
    public List<GetCiscoLoggingFeatureTemplateIpv6Server> ipv6Servers() {
        return this.ipv6Servers;
    }
    /**
     * @return Set number of syslog files to create before discarding oldest files
     * 
     */
    public Integer logRotations() {
        return this.logRotations;
    }
    /**
     * @return Variable name
     * 
     */
    public String logRotationsVariable() {
        return this.logRotationsVariable;
    }
    /**
     * @return Set maximum size of file before it is rotated
     * 
     */
    public Integer maxSize() {
        return this.maxSize;
    }
    /**
     * @return Variable name
     * 
     */
    public String maxSizeVariable() {
        return this.maxSizeVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Configure a TLS profile
     * 
     */
    public List<GetCiscoLoggingFeatureTemplateTlsProfile> tlsProfiles() {
        return this.tlsProfiles;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoLoggingFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<String> deviceTypes;
        private Boolean diskLogging;
        private String diskLoggingVariable;
        private String id;
        private List<GetCiscoLoggingFeatureTemplateIpv4Server> ipv4Servers;
        private List<GetCiscoLoggingFeatureTemplateIpv6Server> ipv6Servers;
        private Integer logRotations;
        private String logRotationsVariable;
        private Integer maxSize;
        private String maxSizeVariable;
        private String name;
        private String templateType;
        private List<GetCiscoLoggingFeatureTemplateTlsProfile> tlsProfiles;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoLoggingFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.diskLogging = defaults.diskLogging;
    	      this.diskLoggingVariable = defaults.diskLoggingVariable;
    	      this.id = defaults.id;
    	      this.ipv4Servers = defaults.ipv4Servers;
    	      this.ipv6Servers = defaults.ipv6Servers;
    	      this.logRotations = defaults.logRotations;
    	      this.logRotationsVariable = defaults.logRotationsVariable;
    	      this.maxSize = defaults.maxSize;
    	      this.maxSizeVariable = defaults.maxSizeVariable;
    	      this.name = defaults.name;
    	      this.templateType = defaults.templateType;
    	      this.tlsProfiles = defaults.tlsProfiles;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder diskLogging(Boolean diskLogging) {
            if (diskLogging == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "diskLogging");
            }
            this.diskLogging = diskLogging;
            return this;
        }
        @CustomType.Setter
        public Builder diskLoggingVariable(String diskLoggingVariable) {
            if (diskLoggingVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "diskLoggingVariable");
            }
            this.diskLoggingVariable = diskLoggingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Servers(List<GetCiscoLoggingFeatureTemplateIpv4Server> ipv4Servers) {
            if (ipv4Servers == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "ipv4Servers");
            }
            this.ipv4Servers = ipv4Servers;
            return this;
        }
        public Builder ipv4Servers(GetCiscoLoggingFeatureTemplateIpv4Server... ipv4Servers) {
            return ipv4Servers(List.of(ipv4Servers));
        }
        @CustomType.Setter
        public Builder ipv6Servers(List<GetCiscoLoggingFeatureTemplateIpv6Server> ipv6Servers) {
            if (ipv6Servers == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "ipv6Servers");
            }
            this.ipv6Servers = ipv6Servers;
            return this;
        }
        public Builder ipv6Servers(GetCiscoLoggingFeatureTemplateIpv6Server... ipv6Servers) {
            return ipv6Servers(List.of(ipv6Servers));
        }
        @CustomType.Setter
        public Builder logRotations(Integer logRotations) {
            if (logRotations == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "logRotations");
            }
            this.logRotations = logRotations;
            return this;
        }
        @CustomType.Setter
        public Builder logRotationsVariable(String logRotationsVariable) {
            if (logRotationsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "logRotationsVariable");
            }
            this.logRotationsVariable = logRotationsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder maxSize(Integer maxSize) {
            if (maxSize == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "maxSize");
            }
            this.maxSize = maxSize;
            return this;
        }
        @CustomType.Setter
        public Builder maxSizeVariable(String maxSizeVariable) {
            if (maxSizeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "maxSizeVariable");
            }
            this.maxSizeVariable = maxSizeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder tlsProfiles(List<GetCiscoLoggingFeatureTemplateTlsProfile> tlsProfiles) {
            if (tlsProfiles == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "tlsProfiles");
            }
            this.tlsProfiles = tlsProfiles;
            return this;
        }
        public Builder tlsProfiles(GetCiscoLoggingFeatureTemplateTlsProfile... tlsProfiles) {
            return tlsProfiles(List.of(tlsProfiles));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoLoggingFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoLoggingFeatureTemplateResult();
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.diskLogging = diskLogging;
            _resultValue.diskLoggingVariable = diskLoggingVariable;
            _resultValue.id = id;
            _resultValue.ipv4Servers = ipv4Servers;
            _resultValue.ipv6Servers = ipv6Servers;
            _resultValue.logRotations = logRotations;
            _resultValue.logRotationsVariable = logRotationsVariable;
            _resultValue.maxSize = maxSize;
            _resultValue.maxSizeVariable = maxSizeVariable;
            _resultValue.name = name;
            _resultValue.templateType = templateType;
            _resultValue.tlsProfiles = tlsProfiles;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
