// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSwitchportFeatureTemplateInterface {
    /**
     * @return Variable name
     * 
     */
    private String dot1xAuthenticationOrderVariable;
    /**
     * @return Specify authentication methods in the order of preference
     * 
     */
    private List<String> dot1xAuthenticationOrders;
    /**
     * @return Set uni or bi directional authorization mode
     * 
     */
    private String dot1xControlDirection;
    /**
     * @return Variable name
     * 
     */
    private String dot1xControlDirectionVariable;
    /**
     * @return Set Critical VLAN
     * 
     */
    private Integer dot1xCriticalVlan;
    /**
     * @return Variable name
     * 
     */
    private String dot1xCriticalVlanVariable;
    /**
     * @return Set 802.1x on off
     * 
     */
    private Boolean dot1xEnable;
    /**
     * @return Enable Critical Voice VLAN
     * 
     */
    private Boolean dot1xEnableCriticialVoiceVlan;
    /**
     * @return Variable name
     * 
     */
    private String dot1xEnableCriticialVoiceVlanVariable;
    /**
     * @return Enable Periodic Reauthentication
     * 
     */
    private Boolean dot1xEnablePeriodicReauth;
    /**
     * @return Variable name
     * 
     */
    private String dot1xEnablePeriodicReauthVariable;
    /**
     * @return Variable name
     * 
     */
    private String dot1xEnableVariable;
    /**
     * @return Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
     * 
     */
    private Integer dot1xGuestVlan;
    /**
     * @return Variable name
     * 
     */
    private String dot1xGuestVlanVariable;
    /**
     * @return Set host mode
     * 
     */
    private String dot1xHostMode;
    /**
     * @return Variable name
     * 
     */
    private String dot1xHostModeVariable;
    /**
     * @return MAC Authentication Bypass
     * 
     */
    private Boolean dot1xMacAuthenticationBypass;
    /**
     * @return Variable name
     * 
     */
    private String dot1xMacAuthenticationBypassVariable;
    /**
     * @return Set 802.1x Interface Pae Type
     * 
     */
    private Boolean dot1xPaeEnable;
    /**
     * @return Variable name
     * 
     */
    private String dot1xPaeEnableVariable;
    /**
     * @return Periodic Reauthentication Inactivity Timeout (in seconds)
     * 
     */
    private Integer dot1xPeriodicReauthInactivityTimeout;
    /**
     * @return Variable name
     * 
     */
    private String dot1xPeriodicReauthInactivityTimeoutVariable;
    /**
     * @return Periodic Reauthentication Interval (in seconds)
     * 
     */
    private Integer dot1xPeriodicReauthInterval;
    /**
     * @return Variable name
     * 
     */
    private String dot1xPeriodicReauthIntervalVariable;
    /**
     * @return Set Port-Control Mode
     * 
     */
    private String dot1xPortControl;
    /**
     * @return Variable name
     * 
     */
    private String dot1xPortControlVariable;
    /**
     * @return Set Restricted VLAN ID
     * 
     */
    private Integer dot1xRestrictedVlan;
    /**
     * @return Variable name
     * 
     */
    private String dot1xRestrictedVlanVariable;
    /**
     * @return Duplex mode
     * 
     */
    private String duplex;
    /**
     * @return Variable name
     * 
     */
    private String duplexVariable;
    /**
     * @return Set Interface name
     * 
     */
    private String name;
    /**
     * @return Variable name
     * 
     */
    private String nameVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Set interface speed
     * 
     */
    private String speed;
    /**
     * @return Variable name
     * 
     */
    private String speedVariable;
    /**
     * @return Set VLAN identifier associated with bridging domain
     * 
     */
    private Integer switchportAccessVlan;
    /**
     * @return Variable name
     * 
     */
    private String switchportAccessVlanVariable;
    /**
     * @return Set type of switch port: access/trunk
     * 
     */
    private String switchportMode;
    /**
     * @return Configure VLAN IDs used with the trunk
     * 
     */
    private String switchportTrunkAllowedVlans;
    /**
     * @return Variable name
     * 
     */
    private String switchportTrunkAllowedVlansVariable;
    /**
     * @return Configure VLAN ID used for native VLAN
     * 
     */
    private Integer switchportTrunkNativeVlan;
    /**
     * @return Variable name
     * 
     */
    private String switchportTrunkNativeVlanVariable;
    /**
     * @return Configure Voice Vlan
     * 
     */
    private Integer voiceVlan;
    /**
     * @return Variable name
     * 
     */
    private String voiceVlanVariable;

    private GetSwitchportFeatureTemplateInterface() {}
    /**
     * @return Variable name
     * 
     */
    public String dot1xAuthenticationOrderVariable() {
        return this.dot1xAuthenticationOrderVariable;
    }
    /**
     * @return Specify authentication methods in the order of preference
     * 
     */
    public List<String> dot1xAuthenticationOrders() {
        return this.dot1xAuthenticationOrders;
    }
    /**
     * @return Set uni or bi directional authorization mode
     * 
     */
    public String dot1xControlDirection() {
        return this.dot1xControlDirection;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xControlDirectionVariable() {
        return this.dot1xControlDirectionVariable;
    }
    /**
     * @return Set Critical VLAN
     * 
     */
    public Integer dot1xCriticalVlan() {
        return this.dot1xCriticalVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xCriticalVlanVariable() {
        return this.dot1xCriticalVlanVariable;
    }
    /**
     * @return Set 802.1x on off
     * 
     */
    public Boolean dot1xEnable() {
        return this.dot1xEnable;
    }
    /**
     * @return Enable Critical Voice VLAN
     * 
     */
    public Boolean dot1xEnableCriticialVoiceVlan() {
        return this.dot1xEnableCriticialVoiceVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xEnableCriticialVoiceVlanVariable() {
        return this.dot1xEnableCriticialVoiceVlanVariable;
    }
    /**
     * @return Enable Periodic Reauthentication
     * 
     */
    public Boolean dot1xEnablePeriodicReauth() {
        return this.dot1xEnablePeriodicReauth;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xEnablePeriodicReauthVariable() {
        return this.dot1xEnablePeriodicReauthVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xEnableVariable() {
        return this.dot1xEnableVariable;
    }
    /**
     * @return Set vlan to drop non-802.1x enabled clients into if client is not in MAB list
     * 
     */
    public Integer dot1xGuestVlan() {
        return this.dot1xGuestVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xGuestVlanVariable() {
        return this.dot1xGuestVlanVariable;
    }
    /**
     * @return Set host mode
     * 
     */
    public String dot1xHostMode() {
        return this.dot1xHostMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xHostModeVariable() {
        return this.dot1xHostModeVariable;
    }
    /**
     * @return MAC Authentication Bypass
     * 
     */
    public Boolean dot1xMacAuthenticationBypass() {
        return this.dot1xMacAuthenticationBypass;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xMacAuthenticationBypassVariable() {
        return this.dot1xMacAuthenticationBypassVariable;
    }
    /**
     * @return Set 802.1x Interface Pae Type
     * 
     */
    public Boolean dot1xPaeEnable() {
        return this.dot1xPaeEnable;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xPaeEnableVariable() {
        return this.dot1xPaeEnableVariable;
    }
    /**
     * @return Periodic Reauthentication Inactivity Timeout (in seconds)
     * 
     */
    public Integer dot1xPeriodicReauthInactivityTimeout() {
        return this.dot1xPeriodicReauthInactivityTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xPeriodicReauthInactivityTimeoutVariable() {
        return this.dot1xPeriodicReauthInactivityTimeoutVariable;
    }
    /**
     * @return Periodic Reauthentication Interval (in seconds)
     * 
     */
    public Integer dot1xPeriodicReauthInterval() {
        return this.dot1xPeriodicReauthInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xPeriodicReauthIntervalVariable() {
        return this.dot1xPeriodicReauthIntervalVariable;
    }
    /**
     * @return Set Port-Control Mode
     * 
     */
    public String dot1xPortControl() {
        return this.dot1xPortControl;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xPortControlVariable() {
        return this.dot1xPortControlVariable;
    }
    /**
     * @return Set Restricted VLAN ID
     * 
     */
    public Integer dot1xRestrictedVlan() {
        return this.dot1xRestrictedVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xRestrictedVlanVariable() {
        return this.dot1xRestrictedVlanVariable;
    }
    /**
     * @return Duplex mode
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return Variable name
     * 
     */
    public String duplexVariable() {
        return this.duplexVariable;
    }
    /**
     * @return Set Interface name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Variable name
     * 
     */
    public String nameVariable() {
        return this.nameVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Set interface speed
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Variable name
     * 
     */
    public String speedVariable() {
        return this.speedVariable;
    }
    /**
     * @return Set VLAN identifier associated with bridging domain
     * 
     */
    public Integer switchportAccessVlan() {
        return this.switchportAccessVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String switchportAccessVlanVariable() {
        return this.switchportAccessVlanVariable;
    }
    /**
     * @return Set type of switch port: access/trunk
     * 
     */
    public String switchportMode() {
        return this.switchportMode;
    }
    /**
     * @return Configure VLAN IDs used with the trunk
     * 
     */
    public String switchportTrunkAllowedVlans() {
        return this.switchportTrunkAllowedVlans;
    }
    /**
     * @return Variable name
     * 
     */
    public String switchportTrunkAllowedVlansVariable() {
        return this.switchportTrunkAllowedVlansVariable;
    }
    /**
     * @return Configure VLAN ID used for native VLAN
     * 
     */
    public Integer switchportTrunkNativeVlan() {
        return this.switchportTrunkNativeVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String switchportTrunkNativeVlanVariable() {
        return this.switchportTrunkNativeVlanVariable;
    }
    /**
     * @return Configure Voice Vlan
     * 
     */
    public Integer voiceVlan() {
        return this.voiceVlan;
    }
    /**
     * @return Variable name
     * 
     */
    public String voiceVlanVariable() {
        return this.voiceVlanVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSwitchportFeatureTemplateInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dot1xAuthenticationOrderVariable;
        private List<String> dot1xAuthenticationOrders;
        private String dot1xControlDirection;
        private String dot1xControlDirectionVariable;
        private Integer dot1xCriticalVlan;
        private String dot1xCriticalVlanVariable;
        private Boolean dot1xEnable;
        private Boolean dot1xEnableCriticialVoiceVlan;
        private String dot1xEnableCriticialVoiceVlanVariable;
        private Boolean dot1xEnablePeriodicReauth;
        private String dot1xEnablePeriodicReauthVariable;
        private String dot1xEnableVariable;
        private Integer dot1xGuestVlan;
        private String dot1xGuestVlanVariable;
        private String dot1xHostMode;
        private String dot1xHostModeVariable;
        private Boolean dot1xMacAuthenticationBypass;
        private String dot1xMacAuthenticationBypassVariable;
        private Boolean dot1xPaeEnable;
        private String dot1xPaeEnableVariable;
        private Integer dot1xPeriodicReauthInactivityTimeout;
        private String dot1xPeriodicReauthInactivityTimeoutVariable;
        private Integer dot1xPeriodicReauthInterval;
        private String dot1xPeriodicReauthIntervalVariable;
        private String dot1xPortControl;
        private String dot1xPortControlVariable;
        private Integer dot1xRestrictedVlan;
        private String dot1xRestrictedVlanVariable;
        private String duplex;
        private String duplexVariable;
        private String name;
        private String nameVariable;
        private Boolean optional;
        private Boolean shutdown;
        private String shutdownVariable;
        private String speed;
        private String speedVariable;
        private Integer switchportAccessVlan;
        private String switchportAccessVlanVariable;
        private String switchportMode;
        private String switchportTrunkAllowedVlans;
        private String switchportTrunkAllowedVlansVariable;
        private Integer switchportTrunkNativeVlan;
        private String switchportTrunkNativeVlanVariable;
        private Integer voiceVlan;
        private String voiceVlanVariable;
        public Builder() {}
        public Builder(GetSwitchportFeatureTemplateInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dot1xAuthenticationOrderVariable = defaults.dot1xAuthenticationOrderVariable;
    	      this.dot1xAuthenticationOrders = defaults.dot1xAuthenticationOrders;
    	      this.dot1xControlDirection = defaults.dot1xControlDirection;
    	      this.dot1xControlDirectionVariable = defaults.dot1xControlDirectionVariable;
    	      this.dot1xCriticalVlan = defaults.dot1xCriticalVlan;
    	      this.dot1xCriticalVlanVariable = defaults.dot1xCriticalVlanVariable;
    	      this.dot1xEnable = defaults.dot1xEnable;
    	      this.dot1xEnableCriticialVoiceVlan = defaults.dot1xEnableCriticialVoiceVlan;
    	      this.dot1xEnableCriticialVoiceVlanVariable = defaults.dot1xEnableCriticialVoiceVlanVariable;
    	      this.dot1xEnablePeriodicReauth = defaults.dot1xEnablePeriodicReauth;
    	      this.dot1xEnablePeriodicReauthVariable = defaults.dot1xEnablePeriodicReauthVariable;
    	      this.dot1xEnableVariable = defaults.dot1xEnableVariable;
    	      this.dot1xGuestVlan = defaults.dot1xGuestVlan;
    	      this.dot1xGuestVlanVariable = defaults.dot1xGuestVlanVariable;
    	      this.dot1xHostMode = defaults.dot1xHostMode;
    	      this.dot1xHostModeVariable = defaults.dot1xHostModeVariable;
    	      this.dot1xMacAuthenticationBypass = defaults.dot1xMacAuthenticationBypass;
    	      this.dot1xMacAuthenticationBypassVariable = defaults.dot1xMacAuthenticationBypassVariable;
    	      this.dot1xPaeEnable = defaults.dot1xPaeEnable;
    	      this.dot1xPaeEnableVariable = defaults.dot1xPaeEnableVariable;
    	      this.dot1xPeriodicReauthInactivityTimeout = defaults.dot1xPeriodicReauthInactivityTimeout;
    	      this.dot1xPeriodicReauthInactivityTimeoutVariable = defaults.dot1xPeriodicReauthInactivityTimeoutVariable;
    	      this.dot1xPeriodicReauthInterval = defaults.dot1xPeriodicReauthInterval;
    	      this.dot1xPeriodicReauthIntervalVariable = defaults.dot1xPeriodicReauthIntervalVariable;
    	      this.dot1xPortControl = defaults.dot1xPortControl;
    	      this.dot1xPortControlVariable = defaults.dot1xPortControlVariable;
    	      this.dot1xRestrictedVlan = defaults.dot1xRestrictedVlan;
    	      this.dot1xRestrictedVlanVariable = defaults.dot1xRestrictedVlanVariable;
    	      this.duplex = defaults.duplex;
    	      this.duplexVariable = defaults.duplexVariable;
    	      this.name = defaults.name;
    	      this.nameVariable = defaults.nameVariable;
    	      this.optional = defaults.optional;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.speed = defaults.speed;
    	      this.speedVariable = defaults.speedVariable;
    	      this.switchportAccessVlan = defaults.switchportAccessVlan;
    	      this.switchportAccessVlanVariable = defaults.switchportAccessVlanVariable;
    	      this.switchportMode = defaults.switchportMode;
    	      this.switchportTrunkAllowedVlans = defaults.switchportTrunkAllowedVlans;
    	      this.switchportTrunkAllowedVlansVariable = defaults.switchportTrunkAllowedVlansVariable;
    	      this.switchportTrunkNativeVlan = defaults.switchportTrunkNativeVlan;
    	      this.switchportTrunkNativeVlanVariable = defaults.switchportTrunkNativeVlanVariable;
    	      this.voiceVlan = defaults.voiceVlan;
    	      this.voiceVlanVariable = defaults.voiceVlanVariable;
        }

        @CustomType.Setter
        public Builder dot1xAuthenticationOrderVariable(String dot1xAuthenticationOrderVariable) {
            if (dot1xAuthenticationOrderVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xAuthenticationOrderVariable");
            }
            this.dot1xAuthenticationOrderVariable = dot1xAuthenticationOrderVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xAuthenticationOrders(List<String> dot1xAuthenticationOrders) {
            if (dot1xAuthenticationOrders == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xAuthenticationOrders");
            }
            this.dot1xAuthenticationOrders = dot1xAuthenticationOrders;
            return this;
        }
        public Builder dot1xAuthenticationOrders(String... dot1xAuthenticationOrders) {
            return dot1xAuthenticationOrders(List.of(dot1xAuthenticationOrders));
        }
        @CustomType.Setter
        public Builder dot1xControlDirection(String dot1xControlDirection) {
            if (dot1xControlDirection == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xControlDirection");
            }
            this.dot1xControlDirection = dot1xControlDirection;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xControlDirectionVariable(String dot1xControlDirectionVariable) {
            if (dot1xControlDirectionVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xControlDirectionVariable");
            }
            this.dot1xControlDirectionVariable = dot1xControlDirectionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xCriticalVlan(Integer dot1xCriticalVlan) {
            if (dot1xCriticalVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xCriticalVlan");
            }
            this.dot1xCriticalVlan = dot1xCriticalVlan;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xCriticalVlanVariable(String dot1xCriticalVlanVariable) {
            if (dot1xCriticalVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xCriticalVlanVariable");
            }
            this.dot1xCriticalVlanVariable = dot1xCriticalVlanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xEnable(Boolean dot1xEnable) {
            if (dot1xEnable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xEnable");
            }
            this.dot1xEnable = dot1xEnable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xEnableCriticialVoiceVlan(Boolean dot1xEnableCriticialVoiceVlan) {
            if (dot1xEnableCriticialVoiceVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xEnableCriticialVoiceVlan");
            }
            this.dot1xEnableCriticialVoiceVlan = dot1xEnableCriticialVoiceVlan;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xEnableCriticialVoiceVlanVariable(String dot1xEnableCriticialVoiceVlanVariable) {
            if (dot1xEnableCriticialVoiceVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xEnableCriticialVoiceVlanVariable");
            }
            this.dot1xEnableCriticialVoiceVlanVariable = dot1xEnableCriticialVoiceVlanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xEnablePeriodicReauth(Boolean dot1xEnablePeriodicReauth) {
            if (dot1xEnablePeriodicReauth == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xEnablePeriodicReauth");
            }
            this.dot1xEnablePeriodicReauth = dot1xEnablePeriodicReauth;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xEnablePeriodicReauthVariable(String dot1xEnablePeriodicReauthVariable) {
            if (dot1xEnablePeriodicReauthVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xEnablePeriodicReauthVariable");
            }
            this.dot1xEnablePeriodicReauthVariable = dot1xEnablePeriodicReauthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xEnableVariable(String dot1xEnableVariable) {
            if (dot1xEnableVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xEnableVariable");
            }
            this.dot1xEnableVariable = dot1xEnableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xGuestVlan(Integer dot1xGuestVlan) {
            if (dot1xGuestVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xGuestVlan");
            }
            this.dot1xGuestVlan = dot1xGuestVlan;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xGuestVlanVariable(String dot1xGuestVlanVariable) {
            if (dot1xGuestVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xGuestVlanVariable");
            }
            this.dot1xGuestVlanVariable = dot1xGuestVlanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xHostMode(String dot1xHostMode) {
            if (dot1xHostMode == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xHostMode");
            }
            this.dot1xHostMode = dot1xHostMode;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xHostModeVariable(String dot1xHostModeVariable) {
            if (dot1xHostModeVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xHostModeVariable");
            }
            this.dot1xHostModeVariable = dot1xHostModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xMacAuthenticationBypass(Boolean dot1xMacAuthenticationBypass) {
            if (dot1xMacAuthenticationBypass == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xMacAuthenticationBypass");
            }
            this.dot1xMacAuthenticationBypass = dot1xMacAuthenticationBypass;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xMacAuthenticationBypassVariable(String dot1xMacAuthenticationBypassVariable) {
            if (dot1xMacAuthenticationBypassVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xMacAuthenticationBypassVariable");
            }
            this.dot1xMacAuthenticationBypassVariable = dot1xMacAuthenticationBypassVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPaeEnable(Boolean dot1xPaeEnable) {
            if (dot1xPaeEnable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPaeEnable");
            }
            this.dot1xPaeEnable = dot1xPaeEnable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPaeEnableVariable(String dot1xPaeEnableVariable) {
            if (dot1xPaeEnableVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPaeEnableVariable");
            }
            this.dot1xPaeEnableVariable = dot1xPaeEnableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPeriodicReauthInactivityTimeout(Integer dot1xPeriodicReauthInactivityTimeout) {
            if (dot1xPeriodicReauthInactivityTimeout == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPeriodicReauthInactivityTimeout");
            }
            this.dot1xPeriodicReauthInactivityTimeout = dot1xPeriodicReauthInactivityTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPeriodicReauthInactivityTimeoutVariable(String dot1xPeriodicReauthInactivityTimeoutVariable) {
            if (dot1xPeriodicReauthInactivityTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPeriodicReauthInactivityTimeoutVariable");
            }
            this.dot1xPeriodicReauthInactivityTimeoutVariable = dot1xPeriodicReauthInactivityTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPeriodicReauthInterval(Integer dot1xPeriodicReauthInterval) {
            if (dot1xPeriodicReauthInterval == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPeriodicReauthInterval");
            }
            this.dot1xPeriodicReauthInterval = dot1xPeriodicReauthInterval;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPeriodicReauthIntervalVariable(String dot1xPeriodicReauthIntervalVariable) {
            if (dot1xPeriodicReauthIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPeriodicReauthIntervalVariable");
            }
            this.dot1xPeriodicReauthIntervalVariable = dot1xPeriodicReauthIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPortControl(String dot1xPortControl) {
            if (dot1xPortControl == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPortControl");
            }
            this.dot1xPortControl = dot1xPortControl;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xPortControlVariable(String dot1xPortControlVariable) {
            if (dot1xPortControlVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xPortControlVariable");
            }
            this.dot1xPortControlVariable = dot1xPortControlVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xRestrictedVlan(Integer dot1xRestrictedVlan) {
            if (dot1xRestrictedVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xRestrictedVlan");
            }
            this.dot1xRestrictedVlan = dot1xRestrictedVlan;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xRestrictedVlanVariable(String dot1xRestrictedVlanVariable) {
            if (dot1xRestrictedVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "dot1xRestrictedVlanVariable");
            }
            this.dot1xRestrictedVlanVariable = dot1xRestrictedVlanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            if (duplex == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "duplex");
            }
            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder duplexVariable(String duplexVariable) {
            if (duplexVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "duplexVariable");
            }
            this.duplexVariable = duplexVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameVariable(String nameVariable) {
            if (nameVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "nameVariable");
            }
            this.nameVariable = nameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder speedVariable(String speedVariable) {
            if (speedVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "speedVariable");
            }
            this.speedVariable = speedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder switchportAccessVlan(Integer switchportAccessVlan) {
            if (switchportAccessVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportAccessVlan");
            }
            this.switchportAccessVlan = switchportAccessVlan;
            return this;
        }
        @CustomType.Setter
        public Builder switchportAccessVlanVariable(String switchportAccessVlanVariable) {
            if (switchportAccessVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportAccessVlanVariable");
            }
            this.switchportAccessVlanVariable = switchportAccessVlanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder switchportMode(String switchportMode) {
            if (switchportMode == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportMode");
            }
            this.switchportMode = switchportMode;
            return this;
        }
        @CustomType.Setter
        public Builder switchportTrunkAllowedVlans(String switchportTrunkAllowedVlans) {
            if (switchportTrunkAllowedVlans == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportTrunkAllowedVlans");
            }
            this.switchportTrunkAllowedVlans = switchportTrunkAllowedVlans;
            return this;
        }
        @CustomType.Setter
        public Builder switchportTrunkAllowedVlansVariable(String switchportTrunkAllowedVlansVariable) {
            if (switchportTrunkAllowedVlansVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportTrunkAllowedVlansVariable");
            }
            this.switchportTrunkAllowedVlansVariable = switchportTrunkAllowedVlansVariable;
            return this;
        }
        @CustomType.Setter
        public Builder switchportTrunkNativeVlan(Integer switchportTrunkNativeVlan) {
            if (switchportTrunkNativeVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportTrunkNativeVlan");
            }
            this.switchportTrunkNativeVlan = switchportTrunkNativeVlan;
            return this;
        }
        @CustomType.Setter
        public Builder switchportTrunkNativeVlanVariable(String switchportTrunkNativeVlanVariable) {
            if (switchportTrunkNativeVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "switchportTrunkNativeVlanVariable");
            }
            this.switchportTrunkNativeVlanVariable = switchportTrunkNativeVlanVariable;
            return this;
        }
        @CustomType.Setter
        public Builder voiceVlan(Integer voiceVlan) {
            if (voiceVlan == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "voiceVlan");
            }
            this.voiceVlan = voiceVlan;
            return this;
        }
        @CustomType.Setter
        public Builder voiceVlanVariable(String voiceVlanVariable) {
            if (voiceVlanVariable == null) {
              throw new MissingRequiredPropertyException("GetSwitchportFeatureTemplateInterface", "voiceVlanVariable");
            }
            this.voiceVlanVariable = voiceVlanVariable;
            return this;
        }
        public GetSwitchportFeatureTemplateInterface build() {
            final var _resultValue = new GetSwitchportFeatureTemplateInterface();
            _resultValue.dot1xAuthenticationOrderVariable = dot1xAuthenticationOrderVariable;
            _resultValue.dot1xAuthenticationOrders = dot1xAuthenticationOrders;
            _resultValue.dot1xControlDirection = dot1xControlDirection;
            _resultValue.dot1xControlDirectionVariable = dot1xControlDirectionVariable;
            _resultValue.dot1xCriticalVlan = dot1xCriticalVlan;
            _resultValue.dot1xCriticalVlanVariable = dot1xCriticalVlanVariable;
            _resultValue.dot1xEnable = dot1xEnable;
            _resultValue.dot1xEnableCriticialVoiceVlan = dot1xEnableCriticialVoiceVlan;
            _resultValue.dot1xEnableCriticialVoiceVlanVariable = dot1xEnableCriticialVoiceVlanVariable;
            _resultValue.dot1xEnablePeriodicReauth = dot1xEnablePeriodicReauth;
            _resultValue.dot1xEnablePeriodicReauthVariable = dot1xEnablePeriodicReauthVariable;
            _resultValue.dot1xEnableVariable = dot1xEnableVariable;
            _resultValue.dot1xGuestVlan = dot1xGuestVlan;
            _resultValue.dot1xGuestVlanVariable = dot1xGuestVlanVariable;
            _resultValue.dot1xHostMode = dot1xHostMode;
            _resultValue.dot1xHostModeVariable = dot1xHostModeVariable;
            _resultValue.dot1xMacAuthenticationBypass = dot1xMacAuthenticationBypass;
            _resultValue.dot1xMacAuthenticationBypassVariable = dot1xMacAuthenticationBypassVariable;
            _resultValue.dot1xPaeEnable = dot1xPaeEnable;
            _resultValue.dot1xPaeEnableVariable = dot1xPaeEnableVariable;
            _resultValue.dot1xPeriodicReauthInactivityTimeout = dot1xPeriodicReauthInactivityTimeout;
            _resultValue.dot1xPeriodicReauthInactivityTimeoutVariable = dot1xPeriodicReauthInactivityTimeoutVariable;
            _resultValue.dot1xPeriodicReauthInterval = dot1xPeriodicReauthInterval;
            _resultValue.dot1xPeriodicReauthIntervalVariable = dot1xPeriodicReauthIntervalVariable;
            _resultValue.dot1xPortControl = dot1xPortControl;
            _resultValue.dot1xPortControlVariable = dot1xPortControlVariable;
            _resultValue.dot1xRestrictedVlan = dot1xRestrictedVlan;
            _resultValue.dot1xRestrictedVlanVariable = dot1xRestrictedVlanVariable;
            _resultValue.duplex = duplex;
            _resultValue.duplexVariable = duplexVariable;
            _resultValue.name = name;
            _resultValue.nameVariable = nameVariable;
            _resultValue.optional = optional;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.speed = speed;
            _resultValue.speedVariable = speedVariable;
            _resultValue.switchportAccessVlan = switchportAccessVlan;
            _resultValue.switchportAccessVlanVariable = switchportAccessVlanVariable;
            _resultValue.switchportMode = switchportMode;
            _resultValue.switchportTrunkAllowedVlans = switchportTrunkAllowedVlans;
            _resultValue.switchportTrunkAllowedVlansVariable = switchportTrunkAllowedVlansVariable;
            _resultValue.switchportTrunkNativeVlan = switchportTrunkNativeVlan;
            _resultValue.switchportTrunkNativeVlanVariable = switchportTrunkNativeVlanVariable;
            _resultValue.voiceVlan = voiceVlan;
            _resultValue.voiceVlanVariable = voiceVlanVariable;
            return _resultValue;
        }
    }
}
