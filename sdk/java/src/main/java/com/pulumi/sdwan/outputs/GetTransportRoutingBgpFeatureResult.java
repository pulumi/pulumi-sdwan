// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv4AggregateAddress;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv4Neighbor;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv4Network;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv4Redistribute;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv6AggregateAddress;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv6Neighbor;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv6Network;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureIpv6Redistribute;
import com.pulumi.sdwan.outputs.GetTransportRoutingBgpFeatureMplsInterface;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportRoutingBgpFeatureResult {
    /**
     * @return Compare MEDs from all ASs when selecting active BGP paths
     * 
     */
    private Boolean alwaysCompareMed;
    /**
     * @return Variable name
     * 
     */
    private String alwaysCompareMedVariable;
    /**
     * @return Set autonomous system number \n\n or \n\n
     * 
     */
    private Integer asNumber;
    /**
     * @return Variable name
     * 
     */
    private String asNumberVariable;
    /**
     * @return Compare router IDs when selecting active BGP paths
     * 
     */
    private Boolean compareRouterId;
    /**
     * @return Variable name
     * 
     */
    private String compareRouterIdVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Compare MEDs from all routes from same AS when selecting active BGP paths
     * 
     */
    private Boolean deterministicMed;
    /**
     * @return Variable name
     * 
     */
    private String deterministicMedVariable;
    /**
     * @return Set administrative distance for external BGP routes
     * 
     */
    private Integer externalRoutesDistance;
    /**
     * @return Variable name
     * 
     */
    private String externalRoutesDistanceVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return Interval (seconds) not receiving a keepalive message declares a BGP peer down
     * 
     */
    private Integer holdTime;
    /**
     * @return Variable name
     * 
     */
    private String holdTimeVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Set administrative distance for internal BGP routes
     * 
     */
    private Integer internalRoutesDistance;
    /**
     * @return Variable name
     * 
     */
    private String internalRoutesDistanceVariable;
    /**
     * @return Aggregate prefixes in specific range
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv4AggregateAddress> ipv4AggregateAddresses;
    /**
     * @return Set maximum number of parallel IBGP paths for multipath load sharing
     * 
     */
    private Integer ipv4EibgpMaximumPaths;
    /**
     * @return Variable name
     * 
     */
    private String ipv4EibgpMaximumPathsVariable;
    /**
     * @return Set BGP IPv4 neighbors
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv4Neighbor> ipv4Neighbors;
    /**
     * @return Configure the networks for BGP to advertise
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv4Network> ipv4Networks;
    /**
     * @return BGP Default Information Originate
     * 
     */
    private Boolean ipv4Originate;
    /**
     * @return Variable name
     * 
     */
    private String ipv4OriginateVariable;
    /**
     * @return Redistribute routes into BGP
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv4Redistribute> ipv4Redistributes;
    /**
     * @return Table map filtered or not
     * 
     */
    private Boolean ipv4TableMapFilter;
    /**
     * @return Variable name
     * 
     */
    private String ipv4TableMapFilterVariable;
    private String ipv4TableMapRoutePolicyId;
    /**
     * @return IPv6 Aggregate prefixes in specific range
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv6AggregateAddress> ipv6AggregateAddresses;
    /**
     * @return Set maximum number of parallel IBGP paths for multipath load sharing
     * 
     */
    private Integer ipv6EibgpMaximumPaths;
    /**
     * @return Variable name
     * 
     */
    private String ipv6EibgpMaximumPathsVariable;
    /**
     * @return Set BGP IPv6 neighbors
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv6Neighbor> ipv6Neighbors;
    /**
     * @return Configure the networks for BGP to advertise
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv6Network> ipv6Networks;
    /**
     * @return BGP Default Information Originate
     * 
     */
    private Boolean ipv6Originate;
    /**
     * @return Variable name
     * 
     */
    private String ipv6OriginateVariable;
    /**
     * @return Redistribute routes into BGP
     * 
     */
    private List<GetTransportRoutingBgpFeatureIpv6Redistribute> ipv6Redistributes;
    /**
     * @return Table map filtered or not
     * 
     */
    private Boolean ipv6TableMapFilter;
    /**
     * @return Variable name
     * 
     */
    private String ipv6TableMapFilterVariable;
    private String ipv6TableMapRoutePolicyId;
    /**
     * @return Interval (seconds) of keepalive messages sent to its BGP peer
     * 
     */
    private Integer keepaliveTime;
    /**
     * @return Variable name
     * 
     */
    private String keepaliveTimeVariable;
    /**
     * @return Set administrative distance for local BGP routes
     * 
     */
    private Integer localRoutesDistance;
    /**
     * @return Variable name
     * 
     */
    private String localRoutesDistanceVariable;
    /**
     * @return If path has no MED, consider it to be worst path when selecting active BGP paths
     * 
     */
    private Boolean missingMedAsWorst;
    /**
     * @return Variable name
     * 
     */
    private String missingMedAsWorstVariable;
    /**
     * @return MPLS BGP Interface
     * 
     */
    private List<GetTransportRoutingBgpFeatureMplsInterface> mplsInterfaces;
    /**
     * @return Ignore AS for multipath selection
     * 
     */
    private Boolean multipathRelax;
    /**
     * @return Variable name
     * 
     */
    private String multipathRelaxVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Propagate AS Path
     * 
     */
    private Boolean propagateAsPath;
    /**
     * @return Variable name
     * 
     */
    private String propagateAsPathVariable;
    /**
     * @return Propagate Community
     * 
     */
    private Boolean propagateCommunity;
    /**
     * @return Variable name
     * 
     */
    private String propagateCommunityVariable;
    /**
     * @return Configure BGP router identifier
     * 
     */
    private String routerId;
    /**
     * @return Variable name
     * 
     */
    private String routerIdVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetTransportRoutingBgpFeatureResult() {}
    /**
     * @return Compare MEDs from all ASs when selecting active BGP paths
     * 
     */
    public Boolean alwaysCompareMed() {
        return this.alwaysCompareMed;
    }
    /**
     * @return Variable name
     * 
     */
    public String alwaysCompareMedVariable() {
        return this.alwaysCompareMedVariable;
    }
    /**
     * @return Set autonomous system number \n\n or \n\n
     * 
     */
    public Integer asNumber() {
        return this.asNumber;
    }
    /**
     * @return Variable name
     * 
     */
    public String asNumberVariable() {
        return this.asNumberVariable;
    }
    /**
     * @return Compare router IDs when selecting active BGP paths
     * 
     */
    public Boolean compareRouterId() {
        return this.compareRouterId;
    }
    /**
     * @return Variable name
     * 
     */
    public String compareRouterIdVariable() {
        return this.compareRouterIdVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Compare MEDs from all routes from same AS when selecting active BGP paths
     * 
     */
    public Boolean deterministicMed() {
        return this.deterministicMed;
    }
    /**
     * @return Variable name
     * 
     */
    public String deterministicMedVariable() {
        return this.deterministicMedVariable;
    }
    /**
     * @return Set administrative distance for external BGP routes
     * 
     */
    public Integer externalRoutesDistance() {
        return this.externalRoutesDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String externalRoutesDistanceVariable() {
        return this.externalRoutesDistanceVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return Interval (seconds) not receiving a keepalive message declares a BGP peer down
     * 
     */
    public Integer holdTime() {
        return this.holdTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String holdTimeVariable() {
        return this.holdTimeVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set administrative distance for internal BGP routes
     * 
     */
    public Integer internalRoutesDistance() {
        return this.internalRoutesDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String internalRoutesDistanceVariable() {
        return this.internalRoutesDistanceVariable;
    }
    /**
     * @return Aggregate prefixes in specific range
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv4AggregateAddress> ipv4AggregateAddresses() {
        return this.ipv4AggregateAddresses;
    }
    /**
     * @return Set maximum number of parallel IBGP paths for multipath load sharing
     * 
     */
    public Integer ipv4EibgpMaximumPaths() {
        return this.ipv4EibgpMaximumPaths;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4EibgpMaximumPathsVariable() {
        return this.ipv4EibgpMaximumPathsVariable;
    }
    /**
     * @return Set BGP IPv4 neighbors
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv4Neighbor> ipv4Neighbors() {
        return this.ipv4Neighbors;
    }
    /**
     * @return Configure the networks for BGP to advertise
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv4Network> ipv4Networks() {
        return this.ipv4Networks;
    }
    /**
     * @return BGP Default Information Originate
     * 
     */
    public Boolean ipv4Originate() {
        return this.ipv4Originate;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4OriginateVariable() {
        return this.ipv4OriginateVariable;
    }
    /**
     * @return Redistribute routes into BGP
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv4Redistribute> ipv4Redistributes() {
        return this.ipv4Redistributes;
    }
    /**
     * @return Table map filtered or not
     * 
     */
    public Boolean ipv4TableMapFilter() {
        return this.ipv4TableMapFilter;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4TableMapFilterVariable() {
        return this.ipv4TableMapFilterVariable;
    }
    public String ipv4TableMapRoutePolicyId() {
        return this.ipv4TableMapRoutePolicyId;
    }
    /**
     * @return IPv6 Aggregate prefixes in specific range
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv6AggregateAddress> ipv6AggregateAddresses() {
        return this.ipv6AggregateAddresses;
    }
    /**
     * @return Set maximum number of parallel IBGP paths for multipath load sharing
     * 
     */
    public Integer ipv6EibgpMaximumPaths() {
        return this.ipv6EibgpMaximumPaths;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6EibgpMaximumPathsVariable() {
        return this.ipv6EibgpMaximumPathsVariable;
    }
    /**
     * @return Set BGP IPv6 neighbors
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv6Neighbor> ipv6Neighbors() {
        return this.ipv6Neighbors;
    }
    /**
     * @return Configure the networks for BGP to advertise
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv6Network> ipv6Networks() {
        return this.ipv6Networks;
    }
    /**
     * @return BGP Default Information Originate
     * 
     */
    public Boolean ipv6Originate() {
        return this.ipv6Originate;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6OriginateVariable() {
        return this.ipv6OriginateVariable;
    }
    /**
     * @return Redistribute routes into BGP
     * 
     */
    public List<GetTransportRoutingBgpFeatureIpv6Redistribute> ipv6Redistributes() {
        return this.ipv6Redistributes;
    }
    /**
     * @return Table map filtered or not
     * 
     */
    public Boolean ipv6TableMapFilter() {
        return this.ipv6TableMapFilter;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6TableMapFilterVariable() {
        return this.ipv6TableMapFilterVariable;
    }
    public String ipv6TableMapRoutePolicyId() {
        return this.ipv6TableMapRoutePolicyId;
    }
    /**
     * @return Interval (seconds) of keepalive messages sent to its BGP peer
     * 
     */
    public Integer keepaliveTime() {
        return this.keepaliveTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String keepaliveTimeVariable() {
        return this.keepaliveTimeVariable;
    }
    /**
     * @return Set administrative distance for local BGP routes
     * 
     */
    public Integer localRoutesDistance() {
        return this.localRoutesDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String localRoutesDistanceVariable() {
        return this.localRoutesDistanceVariable;
    }
    /**
     * @return If path has no MED, consider it to be worst path when selecting active BGP paths
     * 
     */
    public Boolean missingMedAsWorst() {
        return this.missingMedAsWorst;
    }
    /**
     * @return Variable name
     * 
     */
    public String missingMedAsWorstVariable() {
        return this.missingMedAsWorstVariable;
    }
    /**
     * @return MPLS BGP Interface
     * 
     */
    public List<GetTransportRoutingBgpFeatureMplsInterface> mplsInterfaces() {
        return this.mplsInterfaces;
    }
    /**
     * @return Ignore AS for multipath selection
     * 
     */
    public Boolean multipathRelax() {
        return this.multipathRelax;
    }
    /**
     * @return Variable name
     * 
     */
    public String multipathRelaxVariable() {
        return this.multipathRelaxVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Propagate AS Path
     * 
     */
    public Boolean propagateAsPath() {
        return this.propagateAsPath;
    }
    /**
     * @return Variable name
     * 
     */
    public String propagateAsPathVariable() {
        return this.propagateAsPathVariable;
    }
    /**
     * @return Propagate Community
     * 
     */
    public Boolean propagateCommunity() {
        return this.propagateCommunity;
    }
    /**
     * @return Variable name
     * 
     */
    public String propagateCommunityVariable() {
        return this.propagateCommunityVariable;
    }
    /**
     * @return Configure BGP router identifier
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return Variable name
     * 
     */
    public String routerIdVariable() {
        return this.routerIdVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportRoutingBgpFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean alwaysCompareMed;
        private String alwaysCompareMedVariable;
        private Integer asNumber;
        private String asNumberVariable;
        private Boolean compareRouterId;
        private String compareRouterIdVariable;
        private String description;
        private Boolean deterministicMed;
        private String deterministicMedVariable;
        private Integer externalRoutesDistance;
        private String externalRoutesDistanceVariable;
        private String featureProfileId;
        private Integer holdTime;
        private String holdTimeVariable;
        private String id;
        private Integer internalRoutesDistance;
        private String internalRoutesDistanceVariable;
        private List<GetTransportRoutingBgpFeatureIpv4AggregateAddress> ipv4AggregateAddresses;
        private Integer ipv4EibgpMaximumPaths;
        private String ipv4EibgpMaximumPathsVariable;
        private List<GetTransportRoutingBgpFeatureIpv4Neighbor> ipv4Neighbors;
        private List<GetTransportRoutingBgpFeatureIpv4Network> ipv4Networks;
        private Boolean ipv4Originate;
        private String ipv4OriginateVariable;
        private List<GetTransportRoutingBgpFeatureIpv4Redistribute> ipv4Redistributes;
        private Boolean ipv4TableMapFilter;
        private String ipv4TableMapFilterVariable;
        private String ipv4TableMapRoutePolicyId;
        private List<GetTransportRoutingBgpFeatureIpv6AggregateAddress> ipv6AggregateAddresses;
        private Integer ipv6EibgpMaximumPaths;
        private String ipv6EibgpMaximumPathsVariable;
        private List<GetTransportRoutingBgpFeatureIpv6Neighbor> ipv6Neighbors;
        private List<GetTransportRoutingBgpFeatureIpv6Network> ipv6Networks;
        private Boolean ipv6Originate;
        private String ipv6OriginateVariable;
        private List<GetTransportRoutingBgpFeatureIpv6Redistribute> ipv6Redistributes;
        private Boolean ipv6TableMapFilter;
        private String ipv6TableMapFilterVariable;
        private String ipv6TableMapRoutePolicyId;
        private Integer keepaliveTime;
        private String keepaliveTimeVariable;
        private Integer localRoutesDistance;
        private String localRoutesDistanceVariable;
        private Boolean missingMedAsWorst;
        private String missingMedAsWorstVariable;
        private List<GetTransportRoutingBgpFeatureMplsInterface> mplsInterfaces;
        private Boolean multipathRelax;
        private String multipathRelaxVariable;
        private String name;
        private Boolean propagateAsPath;
        private String propagateAsPathVariable;
        private Boolean propagateCommunity;
        private String propagateCommunityVariable;
        private String routerId;
        private String routerIdVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetTransportRoutingBgpFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alwaysCompareMed = defaults.alwaysCompareMed;
    	      this.alwaysCompareMedVariable = defaults.alwaysCompareMedVariable;
    	      this.asNumber = defaults.asNumber;
    	      this.asNumberVariable = defaults.asNumberVariable;
    	      this.compareRouterId = defaults.compareRouterId;
    	      this.compareRouterIdVariable = defaults.compareRouterIdVariable;
    	      this.description = defaults.description;
    	      this.deterministicMed = defaults.deterministicMed;
    	      this.deterministicMedVariable = defaults.deterministicMedVariable;
    	      this.externalRoutesDistance = defaults.externalRoutesDistance;
    	      this.externalRoutesDistanceVariable = defaults.externalRoutesDistanceVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.holdTime = defaults.holdTime;
    	      this.holdTimeVariable = defaults.holdTimeVariable;
    	      this.id = defaults.id;
    	      this.internalRoutesDistance = defaults.internalRoutesDistance;
    	      this.internalRoutesDistanceVariable = defaults.internalRoutesDistanceVariable;
    	      this.ipv4AggregateAddresses = defaults.ipv4AggregateAddresses;
    	      this.ipv4EibgpMaximumPaths = defaults.ipv4EibgpMaximumPaths;
    	      this.ipv4EibgpMaximumPathsVariable = defaults.ipv4EibgpMaximumPathsVariable;
    	      this.ipv4Neighbors = defaults.ipv4Neighbors;
    	      this.ipv4Networks = defaults.ipv4Networks;
    	      this.ipv4Originate = defaults.ipv4Originate;
    	      this.ipv4OriginateVariable = defaults.ipv4OriginateVariable;
    	      this.ipv4Redistributes = defaults.ipv4Redistributes;
    	      this.ipv4TableMapFilter = defaults.ipv4TableMapFilter;
    	      this.ipv4TableMapFilterVariable = defaults.ipv4TableMapFilterVariable;
    	      this.ipv4TableMapRoutePolicyId = defaults.ipv4TableMapRoutePolicyId;
    	      this.ipv6AggregateAddresses = defaults.ipv6AggregateAddresses;
    	      this.ipv6EibgpMaximumPaths = defaults.ipv6EibgpMaximumPaths;
    	      this.ipv6EibgpMaximumPathsVariable = defaults.ipv6EibgpMaximumPathsVariable;
    	      this.ipv6Neighbors = defaults.ipv6Neighbors;
    	      this.ipv6Networks = defaults.ipv6Networks;
    	      this.ipv6Originate = defaults.ipv6Originate;
    	      this.ipv6OriginateVariable = defaults.ipv6OriginateVariable;
    	      this.ipv6Redistributes = defaults.ipv6Redistributes;
    	      this.ipv6TableMapFilter = defaults.ipv6TableMapFilter;
    	      this.ipv6TableMapFilterVariable = defaults.ipv6TableMapFilterVariable;
    	      this.ipv6TableMapRoutePolicyId = defaults.ipv6TableMapRoutePolicyId;
    	      this.keepaliveTime = defaults.keepaliveTime;
    	      this.keepaliveTimeVariable = defaults.keepaliveTimeVariable;
    	      this.localRoutesDistance = defaults.localRoutesDistance;
    	      this.localRoutesDistanceVariable = defaults.localRoutesDistanceVariable;
    	      this.missingMedAsWorst = defaults.missingMedAsWorst;
    	      this.missingMedAsWorstVariable = defaults.missingMedAsWorstVariable;
    	      this.mplsInterfaces = defaults.mplsInterfaces;
    	      this.multipathRelax = defaults.multipathRelax;
    	      this.multipathRelaxVariable = defaults.multipathRelaxVariable;
    	      this.name = defaults.name;
    	      this.propagateAsPath = defaults.propagateAsPath;
    	      this.propagateAsPathVariable = defaults.propagateAsPathVariable;
    	      this.propagateCommunity = defaults.propagateCommunity;
    	      this.propagateCommunityVariable = defaults.propagateCommunityVariable;
    	      this.routerId = defaults.routerId;
    	      this.routerIdVariable = defaults.routerIdVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder alwaysCompareMed(Boolean alwaysCompareMed) {
            if (alwaysCompareMed == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "alwaysCompareMed");
            }
            this.alwaysCompareMed = alwaysCompareMed;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysCompareMedVariable(String alwaysCompareMedVariable) {
            if (alwaysCompareMedVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "alwaysCompareMedVariable");
            }
            this.alwaysCompareMedVariable = alwaysCompareMedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder asNumber(Integer asNumber) {
            if (asNumber == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "asNumber");
            }
            this.asNumber = asNumber;
            return this;
        }
        @CustomType.Setter
        public Builder asNumberVariable(String asNumberVariable) {
            if (asNumberVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "asNumberVariable");
            }
            this.asNumberVariable = asNumberVariable;
            return this;
        }
        @CustomType.Setter
        public Builder compareRouterId(Boolean compareRouterId) {
            if (compareRouterId == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "compareRouterId");
            }
            this.compareRouterId = compareRouterId;
            return this;
        }
        @CustomType.Setter
        public Builder compareRouterIdVariable(String compareRouterIdVariable) {
            if (compareRouterIdVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "compareRouterIdVariable");
            }
            this.compareRouterIdVariable = compareRouterIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deterministicMed(Boolean deterministicMed) {
            if (deterministicMed == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "deterministicMed");
            }
            this.deterministicMed = deterministicMed;
            return this;
        }
        @CustomType.Setter
        public Builder deterministicMedVariable(String deterministicMedVariable) {
            if (deterministicMedVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "deterministicMedVariable");
            }
            this.deterministicMedVariable = deterministicMedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder externalRoutesDistance(Integer externalRoutesDistance) {
            if (externalRoutesDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "externalRoutesDistance");
            }
            this.externalRoutesDistance = externalRoutesDistance;
            return this;
        }
        @CustomType.Setter
        public Builder externalRoutesDistanceVariable(String externalRoutesDistanceVariable) {
            if (externalRoutesDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "externalRoutesDistanceVariable");
            }
            this.externalRoutesDistanceVariable = externalRoutesDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder holdTime(Integer holdTime) {
            if (holdTime == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "holdTime");
            }
            this.holdTime = holdTime;
            return this;
        }
        @CustomType.Setter
        public Builder holdTimeVariable(String holdTimeVariable) {
            if (holdTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "holdTimeVariable");
            }
            this.holdTimeVariable = holdTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder internalRoutesDistance(Integer internalRoutesDistance) {
            if (internalRoutesDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "internalRoutesDistance");
            }
            this.internalRoutesDistance = internalRoutesDistance;
            return this;
        }
        @CustomType.Setter
        public Builder internalRoutesDistanceVariable(String internalRoutesDistanceVariable) {
            if (internalRoutesDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "internalRoutesDistanceVariable");
            }
            this.internalRoutesDistanceVariable = internalRoutesDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AggregateAddresses(List<GetTransportRoutingBgpFeatureIpv4AggregateAddress> ipv4AggregateAddresses) {
            if (ipv4AggregateAddresses == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4AggregateAddresses");
            }
            this.ipv4AggregateAddresses = ipv4AggregateAddresses;
            return this;
        }
        public Builder ipv4AggregateAddresses(GetTransportRoutingBgpFeatureIpv4AggregateAddress... ipv4AggregateAddresses) {
            return ipv4AggregateAddresses(List.of(ipv4AggregateAddresses));
        }
        @CustomType.Setter
        public Builder ipv4EibgpMaximumPaths(Integer ipv4EibgpMaximumPaths) {
            if (ipv4EibgpMaximumPaths == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4EibgpMaximumPaths");
            }
            this.ipv4EibgpMaximumPaths = ipv4EibgpMaximumPaths;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4EibgpMaximumPathsVariable(String ipv4EibgpMaximumPathsVariable) {
            if (ipv4EibgpMaximumPathsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4EibgpMaximumPathsVariable");
            }
            this.ipv4EibgpMaximumPathsVariable = ipv4EibgpMaximumPathsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Neighbors(List<GetTransportRoutingBgpFeatureIpv4Neighbor> ipv4Neighbors) {
            if (ipv4Neighbors == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4Neighbors");
            }
            this.ipv4Neighbors = ipv4Neighbors;
            return this;
        }
        public Builder ipv4Neighbors(GetTransportRoutingBgpFeatureIpv4Neighbor... ipv4Neighbors) {
            return ipv4Neighbors(List.of(ipv4Neighbors));
        }
        @CustomType.Setter
        public Builder ipv4Networks(List<GetTransportRoutingBgpFeatureIpv4Network> ipv4Networks) {
            if (ipv4Networks == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4Networks");
            }
            this.ipv4Networks = ipv4Networks;
            return this;
        }
        public Builder ipv4Networks(GetTransportRoutingBgpFeatureIpv4Network... ipv4Networks) {
            return ipv4Networks(List.of(ipv4Networks));
        }
        @CustomType.Setter
        public Builder ipv4Originate(Boolean ipv4Originate) {
            if (ipv4Originate == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4Originate");
            }
            this.ipv4Originate = ipv4Originate;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4OriginateVariable(String ipv4OriginateVariable) {
            if (ipv4OriginateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4OriginateVariable");
            }
            this.ipv4OriginateVariable = ipv4OriginateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Redistributes(List<GetTransportRoutingBgpFeatureIpv4Redistribute> ipv4Redistributes) {
            if (ipv4Redistributes == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4Redistributes");
            }
            this.ipv4Redistributes = ipv4Redistributes;
            return this;
        }
        public Builder ipv4Redistributes(GetTransportRoutingBgpFeatureIpv4Redistribute... ipv4Redistributes) {
            return ipv4Redistributes(List.of(ipv4Redistributes));
        }
        @CustomType.Setter
        public Builder ipv4TableMapFilter(Boolean ipv4TableMapFilter) {
            if (ipv4TableMapFilter == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4TableMapFilter");
            }
            this.ipv4TableMapFilter = ipv4TableMapFilter;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4TableMapFilterVariable(String ipv4TableMapFilterVariable) {
            if (ipv4TableMapFilterVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4TableMapFilterVariable");
            }
            this.ipv4TableMapFilterVariable = ipv4TableMapFilterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4TableMapRoutePolicyId(String ipv4TableMapRoutePolicyId) {
            if (ipv4TableMapRoutePolicyId == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv4TableMapRoutePolicyId");
            }
            this.ipv4TableMapRoutePolicyId = ipv4TableMapRoutePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AggregateAddresses(List<GetTransportRoutingBgpFeatureIpv6AggregateAddress> ipv6AggregateAddresses) {
            if (ipv6AggregateAddresses == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6AggregateAddresses");
            }
            this.ipv6AggregateAddresses = ipv6AggregateAddresses;
            return this;
        }
        public Builder ipv6AggregateAddresses(GetTransportRoutingBgpFeatureIpv6AggregateAddress... ipv6AggregateAddresses) {
            return ipv6AggregateAddresses(List.of(ipv6AggregateAddresses));
        }
        @CustomType.Setter
        public Builder ipv6EibgpMaximumPaths(Integer ipv6EibgpMaximumPaths) {
            if (ipv6EibgpMaximumPaths == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6EibgpMaximumPaths");
            }
            this.ipv6EibgpMaximumPaths = ipv6EibgpMaximumPaths;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6EibgpMaximumPathsVariable(String ipv6EibgpMaximumPathsVariable) {
            if (ipv6EibgpMaximumPathsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6EibgpMaximumPathsVariable");
            }
            this.ipv6EibgpMaximumPathsVariable = ipv6EibgpMaximumPathsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Neighbors(List<GetTransportRoutingBgpFeatureIpv6Neighbor> ipv6Neighbors) {
            if (ipv6Neighbors == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6Neighbors");
            }
            this.ipv6Neighbors = ipv6Neighbors;
            return this;
        }
        public Builder ipv6Neighbors(GetTransportRoutingBgpFeatureIpv6Neighbor... ipv6Neighbors) {
            return ipv6Neighbors(List.of(ipv6Neighbors));
        }
        @CustomType.Setter
        public Builder ipv6Networks(List<GetTransportRoutingBgpFeatureIpv6Network> ipv6Networks) {
            if (ipv6Networks == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6Networks");
            }
            this.ipv6Networks = ipv6Networks;
            return this;
        }
        public Builder ipv6Networks(GetTransportRoutingBgpFeatureIpv6Network... ipv6Networks) {
            return ipv6Networks(List.of(ipv6Networks));
        }
        @CustomType.Setter
        public Builder ipv6Originate(Boolean ipv6Originate) {
            if (ipv6Originate == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6Originate");
            }
            this.ipv6Originate = ipv6Originate;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6OriginateVariable(String ipv6OriginateVariable) {
            if (ipv6OriginateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6OriginateVariable");
            }
            this.ipv6OriginateVariable = ipv6OriginateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Redistributes(List<GetTransportRoutingBgpFeatureIpv6Redistribute> ipv6Redistributes) {
            if (ipv6Redistributes == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6Redistributes");
            }
            this.ipv6Redistributes = ipv6Redistributes;
            return this;
        }
        public Builder ipv6Redistributes(GetTransportRoutingBgpFeatureIpv6Redistribute... ipv6Redistributes) {
            return ipv6Redistributes(List.of(ipv6Redistributes));
        }
        @CustomType.Setter
        public Builder ipv6TableMapFilter(Boolean ipv6TableMapFilter) {
            if (ipv6TableMapFilter == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6TableMapFilter");
            }
            this.ipv6TableMapFilter = ipv6TableMapFilter;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6TableMapFilterVariable(String ipv6TableMapFilterVariable) {
            if (ipv6TableMapFilterVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6TableMapFilterVariable");
            }
            this.ipv6TableMapFilterVariable = ipv6TableMapFilterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6TableMapRoutePolicyId(String ipv6TableMapRoutePolicyId) {
            if (ipv6TableMapRoutePolicyId == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "ipv6TableMapRoutePolicyId");
            }
            this.ipv6TableMapRoutePolicyId = ipv6TableMapRoutePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveTime(Integer keepaliveTime) {
            if (keepaliveTime == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "keepaliveTime");
            }
            this.keepaliveTime = keepaliveTime;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveTimeVariable(String keepaliveTimeVariable) {
            if (keepaliveTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "keepaliveTimeVariable");
            }
            this.keepaliveTimeVariable = keepaliveTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder localRoutesDistance(Integer localRoutesDistance) {
            if (localRoutesDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "localRoutesDistance");
            }
            this.localRoutesDistance = localRoutesDistance;
            return this;
        }
        @CustomType.Setter
        public Builder localRoutesDistanceVariable(String localRoutesDistanceVariable) {
            if (localRoutesDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "localRoutesDistanceVariable");
            }
            this.localRoutesDistanceVariable = localRoutesDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder missingMedAsWorst(Boolean missingMedAsWorst) {
            if (missingMedAsWorst == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "missingMedAsWorst");
            }
            this.missingMedAsWorst = missingMedAsWorst;
            return this;
        }
        @CustomType.Setter
        public Builder missingMedAsWorstVariable(String missingMedAsWorstVariable) {
            if (missingMedAsWorstVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "missingMedAsWorstVariable");
            }
            this.missingMedAsWorstVariable = missingMedAsWorstVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mplsInterfaces(List<GetTransportRoutingBgpFeatureMplsInterface> mplsInterfaces) {
            if (mplsInterfaces == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "mplsInterfaces");
            }
            this.mplsInterfaces = mplsInterfaces;
            return this;
        }
        public Builder mplsInterfaces(GetTransportRoutingBgpFeatureMplsInterface... mplsInterfaces) {
            return mplsInterfaces(List.of(mplsInterfaces));
        }
        @CustomType.Setter
        public Builder multipathRelax(Boolean multipathRelax) {
            if (multipathRelax == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "multipathRelax");
            }
            this.multipathRelax = multipathRelax;
            return this;
        }
        @CustomType.Setter
        public Builder multipathRelaxVariable(String multipathRelaxVariable) {
            if (multipathRelaxVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "multipathRelaxVariable");
            }
            this.multipathRelaxVariable = multipathRelaxVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder propagateAsPath(Boolean propagateAsPath) {
            if (propagateAsPath == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "propagateAsPath");
            }
            this.propagateAsPath = propagateAsPath;
            return this;
        }
        @CustomType.Setter
        public Builder propagateAsPathVariable(String propagateAsPathVariable) {
            if (propagateAsPathVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "propagateAsPathVariable");
            }
            this.propagateAsPathVariable = propagateAsPathVariable;
            return this;
        }
        @CustomType.Setter
        public Builder propagateCommunity(Boolean propagateCommunity) {
            if (propagateCommunity == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "propagateCommunity");
            }
            this.propagateCommunity = propagateCommunity;
            return this;
        }
        @CustomType.Setter
        public Builder propagateCommunityVariable(String propagateCommunityVariable) {
            if (propagateCommunityVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "propagateCommunityVariable");
            }
            this.propagateCommunityVariable = propagateCommunityVariable;
            return this;
        }
        @CustomType.Setter
        public Builder routerId(String routerId) {
            if (routerId == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "routerId");
            }
            this.routerId = routerId;
            return this;
        }
        @CustomType.Setter
        public Builder routerIdVariable(String routerIdVariable) {
            if (routerIdVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "routerIdVariable");
            }
            this.routerIdVariable = routerIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportRoutingBgpFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetTransportRoutingBgpFeatureResult build() {
            final var _resultValue = new GetTransportRoutingBgpFeatureResult();
            _resultValue.alwaysCompareMed = alwaysCompareMed;
            _resultValue.alwaysCompareMedVariable = alwaysCompareMedVariable;
            _resultValue.asNumber = asNumber;
            _resultValue.asNumberVariable = asNumberVariable;
            _resultValue.compareRouterId = compareRouterId;
            _resultValue.compareRouterIdVariable = compareRouterIdVariable;
            _resultValue.description = description;
            _resultValue.deterministicMed = deterministicMed;
            _resultValue.deterministicMedVariable = deterministicMedVariable;
            _resultValue.externalRoutesDistance = externalRoutesDistance;
            _resultValue.externalRoutesDistanceVariable = externalRoutesDistanceVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.holdTime = holdTime;
            _resultValue.holdTimeVariable = holdTimeVariable;
            _resultValue.id = id;
            _resultValue.internalRoutesDistance = internalRoutesDistance;
            _resultValue.internalRoutesDistanceVariable = internalRoutesDistanceVariable;
            _resultValue.ipv4AggregateAddresses = ipv4AggregateAddresses;
            _resultValue.ipv4EibgpMaximumPaths = ipv4EibgpMaximumPaths;
            _resultValue.ipv4EibgpMaximumPathsVariable = ipv4EibgpMaximumPathsVariable;
            _resultValue.ipv4Neighbors = ipv4Neighbors;
            _resultValue.ipv4Networks = ipv4Networks;
            _resultValue.ipv4Originate = ipv4Originate;
            _resultValue.ipv4OriginateVariable = ipv4OriginateVariable;
            _resultValue.ipv4Redistributes = ipv4Redistributes;
            _resultValue.ipv4TableMapFilter = ipv4TableMapFilter;
            _resultValue.ipv4TableMapFilterVariable = ipv4TableMapFilterVariable;
            _resultValue.ipv4TableMapRoutePolicyId = ipv4TableMapRoutePolicyId;
            _resultValue.ipv6AggregateAddresses = ipv6AggregateAddresses;
            _resultValue.ipv6EibgpMaximumPaths = ipv6EibgpMaximumPaths;
            _resultValue.ipv6EibgpMaximumPathsVariable = ipv6EibgpMaximumPathsVariable;
            _resultValue.ipv6Neighbors = ipv6Neighbors;
            _resultValue.ipv6Networks = ipv6Networks;
            _resultValue.ipv6Originate = ipv6Originate;
            _resultValue.ipv6OriginateVariable = ipv6OriginateVariable;
            _resultValue.ipv6Redistributes = ipv6Redistributes;
            _resultValue.ipv6TableMapFilter = ipv6TableMapFilter;
            _resultValue.ipv6TableMapFilterVariable = ipv6TableMapFilterVariable;
            _resultValue.ipv6TableMapRoutePolicyId = ipv6TableMapRoutePolicyId;
            _resultValue.keepaliveTime = keepaliveTime;
            _resultValue.keepaliveTimeVariable = keepaliveTimeVariable;
            _resultValue.localRoutesDistance = localRoutesDistance;
            _resultValue.localRoutesDistanceVariable = localRoutesDistanceVariable;
            _resultValue.missingMedAsWorst = missingMedAsWorst;
            _resultValue.missingMedAsWorstVariable = missingMedAsWorstVariable;
            _resultValue.mplsInterfaces = mplsInterfaces;
            _resultValue.multipathRelax = multipathRelax;
            _resultValue.multipathRelaxVariable = multipathRelaxVariable;
            _resultValue.name = name;
            _resultValue.propagateAsPath = propagateAsPath;
            _resultValue.propagateAsPathVariable = propagateAsPathVariable;
            _resultValue.propagateCommunity = propagateCommunity;
            _resultValue.propagateCommunityVariable = propagateCommunityVariable;
            _resultValue.routerId = routerId;
            _resultValue.routerIdVariable = routerIdVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
