// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceWirelessLanFeatureSsid;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceWirelessLanFeatureResult {
    /**
     * @return Select country
     * 
     */
    private String country;
    /**
     * @return Variable name
     * 
     */
    private String countryVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return 2.4GHz Enabled
     * 
     */
    private Boolean enable24g;
    /**
     * @return Variable name
     * 
     */
    private String enable24gVariable;
    /**
     * @return 5GHz Enabled
     * 
     */
    private Boolean enable5g;
    /**
     * @return Variable name
     * 
     */
    private String enable5gVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Set mobile express default gateway
     * 
     */
    private String meDefaultGateway;
    /**
     * @return Variable name
     * 
     */
    private String meDefaultGatewayVariable;
    /**
     * @return ME management IP dynamic allocated by DHCP
     * 
     */
    private Boolean meDynamicIpEnabled;
    /**
     * @return Set mobile express controller address
     * 
     */
    private String meIpv4Address;
    /**
     * @return Variable name
     * 
     */
    private String meIpv4AddressVariable;
    /**
     * @return Set mobile express controller subnet mask
     * 
     */
    private String meSubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String meSubnetMaskVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can&#39;t substitute 1,l,or ! for i,0 for o,$ for s.
     * 
     */
    private String password;
    /**
     * @return Variable name
     * 
     */
    private String passwordVariable;
    /**
     * @return Configure Wi-Fi SSID profile
     * 
     */
    private List<GetServiceWirelessLanFeatureSsid> ssids;
    /**
     * @return Set management username
     * 
     */
    private String username;
    /**
     * @return Variable name
     * 
     */
    private String usernameVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceWirelessLanFeatureResult() {}
    /**
     * @return Select country
     * 
     */
    public String country() {
        return this.country;
    }
    /**
     * @return Variable name
     * 
     */
    public String countryVariable() {
        return this.countryVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 2.4GHz Enabled
     * 
     */
    public Boolean enable24g() {
        return this.enable24g;
    }
    /**
     * @return Variable name
     * 
     */
    public String enable24gVariable() {
        return this.enable24gVariable;
    }
    /**
     * @return 5GHz Enabled
     * 
     */
    public Boolean enable5g() {
        return this.enable5g;
    }
    /**
     * @return Variable name
     * 
     */
    public String enable5gVariable() {
        return this.enable5gVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set mobile express default gateway
     * 
     */
    public String meDefaultGateway() {
        return this.meDefaultGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String meDefaultGatewayVariable() {
        return this.meDefaultGatewayVariable;
    }
    /**
     * @return ME management IP dynamic allocated by DHCP
     * 
     */
    public Boolean meDynamicIpEnabled() {
        return this.meDynamicIpEnabled;
    }
    /**
     * @return Set mobile express controller address
     * 
     */
    public String meIpv4Address() {
        return this.meIpv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String meIpv4AddressVariable() {
        return this.meIpv4AddressVariable;
    }
    /**
     * @return Set mobile express controller subnet mask
     * 
     */
    public String meSubnetMask() {
        return this.meSubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String meSubnetMaskVariable() {
        return this.meSubnetMaskVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set management password,the password must contains characters from all of the following classes,lowercase letters,uppercase letters,digits,and special characters. No character in the password can be repeated more than three times consecutively. The password must not be the same as the associated username or the username reversed. The password must not be cisco,ocsic,or any variant obtained by changing the capitalization of the letters in word cisco. In addition,you can&#39;t substitute 1,l,or ! for i,0 for o,$ for s.
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Variable name
     * 
     */
    public String passwordVariable() {
        return this.passwordVariable;
    }
    /**
     * @return Configure Wi-Fi SSID profile
     * 
     */
    public List<GetServiceWirelessLanFeatureSsid> ssids() {
        return this.ssids;
    }
    /**
     * @return Set management username
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return Variable name
     * 
     */
    public String usernameVariable() {
        return this.usernameVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceWirelessLanFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String country;
        private String countryVariable;
        private String description;
        private Boolean enable24g;
        private String enable24gVariable;
        private Boolean enable5g;
        private String enable5gVariable;
        private String featureProfileId;
        private String id;
        private String meDefaultGateway;
        private String meDefaultGatewayVariable;
        private Boolean meDynamicIpEnabled;
        private String meIpv4Address;
        private String meIpv4AddressVariable;
        private String meSubnetMask;
        private String meSubnetMaskVariable;
        private String name;
        private String password;
        private String passwordVariable;
        private List<GetServiceWirelessLanFeatureSsid> ssids;
        private String username;
        private String usernameVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceWirelessLanFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.country = defaults.country;
    	      this.countryVariable = defaults.countryVariable;
    	      this.description = defaults.description;
    	      this.enable24g = defaults.enable24g;
    	      this.enable24gVariable = defaults.enable24gVariable;
    	      this.enable5g = defaults.enable5g;
    	      this.enable5gVariable = defaults.enable5gVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.meDefaultGateway = defaults.meDefaultGateway;
    	      this.meDefaultGatewayVariable = defaults.meDefaultGatewayVariable;
    	      this.meDynamicIpEnabled = defaults.meDynamicIpEnabled;
    	      this.meIpv4Address = defaults.meIpv4Address;
    	      this.meIpv4AddressVariable = defaults.meIpv4AddressVariable;
    	      this.meSubnetMask = defaults.meSubnetMask;
    	      this.meSubnetMaskVariable = defaults.meSubnetMaskVariable;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.passwordVariable = defaults.passwordVariable;
    	      this.ssids = defaults.ssids;
    	      this.username = defaults.username;
    	      this.usernameVariable = defaults.usernameVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder country(String country) {
            if (country == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "country");
            }
            this.country = country;
            return this;
        }
        @CustomType.Setter
        public Builder countryVariable(String countryVariable) {
            if (countryVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "countryVariable");
            }
            this.countryVariable = countryVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enable24g(Boolean enable24g) {
            if (enable24g == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "enable24g");
            }
            this.enable24g = enable24g;
            return this;
        }
        @CustomType.Setter
        public Builder enable24gVariable(String enable24gVariable) {
            if (enable24gVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "enable24gVariable");
            }
            this.enable24gVariable = enable24gVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enable5g(Boolean enable5g) {
            if (enable5g == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "enable5g");
            }
            this.enable5g = enable5g;
            return this;
        }
        @CustomType.Setter
        public Builder enable5gVariable(String enable5gVariable) {
            if (enable5gVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "enable5gVariable");
            }
            this.enable5gVariable = enable5gVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder meDefaultGateway(String meDefaultGateway) {
            if (meDefaultGateway == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meDefaultGateway");
            }
            this.meDefaultGateway = meDefaultGateway;
            return this;
        }
        @CustomType.Setter
        public Builder meDefaultGatewayVariable(String meDefaultGatewayVariable) {
            if (meDefaultGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meDefaultGatewayVariable");
            }
            this.meDefaultGatewayVariable = meDefaultGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder meDynamicIpEnabled(Boolean meDynamicIpEnabled) {
            if (meDynamicIpEnabled == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meDynamicIpEnabled");
            }
            this.meDynamicIpEnabled = meDynamicIpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder meIpv4Address(String meIpv4Address) {
            if (meIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meIpv4Address");
            }
            this.meIpv4Address = meIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder meIpv4AddressVariable(String meIpv4AddressVariable) {
            if (meIpv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meIpv4AddressVariable");
            }
            this.meIpv4AddressVariable = meIpv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder meSubnetMask(String meSubnetMask) {
            if (meSubnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meSubnetMask");
            }
            this.meSubnetMask = meSubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder meSubnetMaskVariable(String meSubnetMaskVariable) {
            if (meSubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "meSubnetMaskVariable");
            }
            this.meSubnetMaskVariable = meSubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordVariable(String passwordVariable) {
            if (passwordVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "passwordVariable");
            }
            this.passwordVariable = passwordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ssids(List<GetServiceWirelessLanFeatureSsid> ssids) {
            if (ssids == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "ssids");
            }
            this.ssids = ssids;
            return this;
        }
        public Builder ssids(GetServiceWirelessLanFeatureSsid... ssids) {
            return ssids(List.of(ssids));
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder usernameVariable(String usernameVariable) {
            if (usernameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "usernameVariable");
            }
            this.usernameVariable = usernameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceWirelessLanFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceWirelessLanFeatureResult build() {
            final var _resultValue = new GetServiceWirelessLanFeatureResult();
            _resultValue.country = country;
            _resultValue.countryVariable = countryVariable;
            _resultValue.description = description;
            _resultValue.enable24g = enable24g;
            _resultValue.enable24gVariable = enable24gVariable;
            _resultValue.enable5g = enable5g;
            _resultValue.enable5gVariable = enable5gVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.meDefaultGateway = meDefaultGateway;
            _resultValue.meDefaultGatewayVariable = meDefaultGatewayVariable;
            _resultValue.meDynamicIpEnabled = meDynamicIpEnabled;
            _resultValue.meIpv4Address = meIpv4Address;
            _resultValue.meIpv4AddressVariable = meIpv4AddressVariable;
            _resultValue.meSubnetMask = meSubnetMask;
            _resultValue.meSubnetMaskVariable = meSubnetMaskVariable;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.passwordVariable = passwordVariable;
            _resultValue.ssids = ssids;
            _resultValue.username = username;
            _resultValue.usernameVariable = usernameVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
