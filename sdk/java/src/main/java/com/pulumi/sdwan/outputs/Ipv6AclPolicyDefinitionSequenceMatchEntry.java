// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Ipv6AclPolicyDefinitionSequenceMatchEntry {
    /**
     * @return Class map ID, Attribute conditional on `type` being equal to `class`
     * 
     */
    private @Nullable String classMapId;
    /**
     * @return Class map version
     * 
     */
    private @Nullable Integer classMapVersion;
    /**
     * @return Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
     * 
     */
    private @Nullable String destinationDataIpv6PrefixListId;
    /**
     * @return Destination data prefix list version
     * 
     */
    private @Nullable Integer destinationDataIpv6PrefixListVersion;
    /**
     * @return Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
     * 
     */
    private @Nullable String destinationIp;
    /**
     * @return Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
     * 
     */
    private @Nullable String destinationPorts;
    /**
     * @return Next header, Attribute conditional on `type` being equal to `nextHeader`
     *   - Range: `0`-`255`
     * 
     */
    private @Nullable Integer nextHeader;
    /**
     * @return Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     * 
     */
    private @Nullable Integer packetLength;
    /**
     * @return PLP - priority, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `high`, `low`
     * 
     */
    private @Nullable String priority;
    /**
     * @return Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
     * 
     */
    private @Nullable String sourceDataIpv6PrefixListId;
    /**
     * @return Source data IPv6 prefix list version
     * 
     */
    private @Nullable Integer sourceDataIpv6PrefixListVersion;
    /**
     * @return Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
     * 
     */
    private @Nullable String sourceIp;
    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    private @Nullable String sourcePorts;
    /**
     * @return TCP parameters, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     * 
     */
    private @Nullable String tcp;
    /**
     * @return Traffic class, Attribute conditional on `type` being equal to `trafficClass`
     *   - Range: `0`-`63`
     * 
     */
    private @Nullable Integer trafficClass;
    /**
     * @return Type of match entry
     *   - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
     * 
     */
    private String type;

    private Ipv6AclPolicyDefinitionSequenceMatchEntry() {}
    /**
     * @return Class map ID, Attribute conditional on `type` being equal to `class`
     * 
     */
    public Optional<String> classMapId() {
        return Optional.ofNullable(this.classMapId);
    }
    /**
     * @return Class map version
     * 
     */
    public Optional<Integer> classMapVersion() {
        return Optional.ofNullable(this.classMapVersion);
    }
    /**
     * @return Destination dataIPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
     * 
     */
    public Optional<String> destinationDataIpv6PrefixListId() {
        return Optional.ofNullable(this.destinationDataIpv6PrefixListId);
    }
    /**
     * @return Destination data prefix list version
     * 
     */
    public Optional<Integer> destinationDataIpv6PrefixListVersion() {
        return Optional.ofNullable(this.destinationDataIpv6PrefixListVersion);
    }
    /**
     * @return Destination IPv6 prefix, Attribute conditional on `type` being equal to `destinationIpv6`
     * 
     */
    public Optional<String> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }
    /**
     * @return Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
     * 
     */
    public Optional<String> destinationPorts() {
        return Optional.ofNullable(this.destinationPorts);
    }
    /**
     * @return Next header, Attribute conditional on `type` being equal to `nextHeader`
     *   - Range: `0`-`255`
     * 
     */
    public Optional<Integer> nextHeader() {
        return Optional.ofNullable(this.nextHeader);
    }
    /**
     * @return Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Integer> packetLength() {
        return Optional.ofNullable(this.packetLength);
    }
    /**
     * @return PLP - priority, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `high`, `low`
     * 
     */
    public Optional<String> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
     * 
     */
    public Optional<String> sourceDataIpv6PrefixListId() {
        return Optional.ofNullable(this.sourceDataIpv6PrefixListId);
    }
    /**
     * @return Source data IPv6 prefix list version
     * 
     */
    public Optional<Integer> sourceDataIpv6PrefixListVersion() {
        return Optional.ofNullable(this.sourceDataIpv6PrefixListVersion);
    }
    /**
     * @return Source IPv6 prefix, Attribute conditional on `type` being equal to `sourceIpv6`
     * 
     */
    public Optional<String> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }
    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    public Optional<String> sourcePorts() {
        return Optional.ofNullable(this.sourcePorts);
    }
    /**
     * @return TCP parameters, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     * 
     */
    public Optional<String> tcp() {
        return Optional.ofNullable(this.tcp);
    }
    /**
     * @return Traffic class, Attribute conditional on `type` being equal to `trafficClass`
     *   - Range: `0`-`63`
     * 
     */
    public Optional<Integer> trafficClass() {
        return Optional.ofNullable(this.trafficClass);
    }
    /**
     * @return Type of match entry
     *   - Choices: `nextHeader`, `sourceIpv6`, `destinationIpv6`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`, `tcp`, `trafficClass`
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Ipv6AclPolicyDefinitionSequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String classMapId;
        private @Nullable Integer classMapVersion;
        private @Nullable String destinationDataIpv6PrefixListId;
        private @Nullable Integer destinationDataIpv6PrefixListVersion;
        private @Nullable String destinationIp;
        private @Nullable String destinationPorts;
        private @Nullable Integer nextHeader;
        private @Nullable Integer packetLength;
        private @Nullable String priority;
        private @Nullable String sourceDataIpv6PrefixListId;
        private @Nullable Integer sourceDataIpv6PrefixListVersion;
        private @Nullable String sourceIp;
        private @Nullable String sourcePorts;
        private @Nullable String tcp;
        private @Nullable Integer trafficClass;
        private String type;
        public Builder() {}
        public Builder(Ipv6AclPolicyDefinitionSequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.classMapId = defaults.classMapId;
    	      this.classMapVersion = defaults.classMapVersion;
    	      this.destinationDataIpv6PrefixListId = defaults.destinationDataIpv6PrefixListId;
    	      this.destinationDataIpv6PrefixListVersion = defaults.destinationDataIpv6PrefixListVersion;
    	      this.destinationIp = defaults.destinationIp;
    	      this.destinationPorts = defaults.destinationPorts;
    	      this.nextHeader = defaults.nextHeader;
    	      this.packetLength = defaults.packetLength;
    	      this.priority = defaults.priority;
    	      this.sourceDataIpv6PrefixListId = defaults.sourceDataIpv6PrefixListId;
    	      this.sourceDataIpv6PrefixListVersion = defaults.sourceDataIpv6PrefixListVersion;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourcePorts = defaults.sourcePorts;
    	      this.tcp = defaults.tcp;
    	      this.trafficClass = defaults.trafficClass;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder classMapId(@Nullable String classMapId) {

            this.classMapId = classMapId;
            return this;
        }
        @CustomType.Setter
        public Builder classMapVersion(@Nullable Integer classMapVersion) {

            this.classMapVersion = classMapVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv6PrefixListId(@Nullable String destinationDataIpv6PrefixListId) {

            this.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv6PrefixListVersion(@Nullable Integer destinationDataIpv6PrefixListVersion) {

            this.destinationDataIpv6PrefixListVersion = destinationDataIpv6PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIp(@Nullable String destinationIp) {

            this.destinationIp = destinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPorts(@Nullable String destinationPorts) {

            this.destinationPorts = destinationPorts;
            return this;
        }
        @CustomType.Setter
        public Builder nextHeader(@Nullable Integer nextHeader) {

            this.nextHeader = nextHeader;
            return this;
        }
        @CustomType.Setter
        public Builder packetLength(@Nullable Integer packetLength) {

            this.packetLength = packetLength;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable String priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv6PrefixListId(@Nullable String sourceDataIpv6PrefixListId) {

            this.sourceDataIpv6PrefixListId = sourceDataIpv6PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv6PrefixListVersion(@Nullable Integer sourceDataIpv6PrefixListVersion) {

            this.sourceDataIpv6PrefixListVersion = sourceDataIpv6PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable String sourceIp) {

            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePorts(@Nullable String sourcePorts) {

            this.sourcePorts = sourcePorts;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(@Nullable String tcp) {

            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder trafficClass(@Nullable Integer trafficClass) {

            this.trafficClass = trafficClass;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("Ipv6AclPolicyDefinitionSequenceMatchEntry", "type");
            }
            this.type = type;
            return this;
        }
        public Ipv6AclPolicyDefinitionSequenceMatchEntry build() {
            final var _resultValue = new Ipv6AclPolicyDefinitionSequenceMatchEntry();
            _resultValue.classMapId = classMapId;
            _resultValue.classMapVersion = classMapVersion;
            _resultValue.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            _resultValue.destinationDataIpv6PrefixListVersion = destinationDataIpv6PrefixListVersion;
            _resultValue.destinationIp = destinationIp;
            _resultValue.destinationPorts = destinationPorts;
            _resultValue.nextHeader = nextHeader;
            _resultValue.packetLength = packetLength;
            _resultValue.priority = priority;
            _resultValue.sourceDataIpv6PrefixListId = sourceDataIpv6PrefixListId;
            _resultValue.sourceDataIpv6PrefixListVersion = sourceDataIpv6PrefixListVersion;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourcePorts = sourcePorts;
            _resultValue.tcp = tcp;
            _resultValue.trafficClass = trafficClass;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
