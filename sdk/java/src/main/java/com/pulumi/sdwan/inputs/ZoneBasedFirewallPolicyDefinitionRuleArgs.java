// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs;
import com.pulumi.sdwan.inputs.ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneBasedFirewallPolicyDefinitionRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneBasedFirewallPolicyDefinitionRuleArgs Empty = new ZoneBasedFirewallPolicyDefinitionRuleArgs();

    /**
     * List of actions entries
     * 
     */
    @Import(name="actionEntries")
    private @Nullable Output<List<ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs>> actionEntries;

    /**
     * @return List of actions entries
     * 
     */
    public Optional<Output<List<ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs>>> actionEntries() {
        return Optional.ofNullable(this.actionEntries);
    }

    /**
     * Base action
     *   - Choices: `pass`, `drop`, `inspect`
     * 
     */
    @Import(name="baseAction", required=true)
    private Output<String> baseAction;

    /**
     * @return Base action
     *   - Choices: `pass`, `drop`, `inspect`
     * 
     */
    public Output<String> baseAction() {
        return this.baseAction;
    }

    /**
     * List of match entries
     * 
     */
    @Import(name="matchEntries")
    private @Nullable Output<List<ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs>> matchEntries;

    /**
     * @return List of match entries
     * 
     */
    public Optional<Output<List<ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs>>> matchEntries() {
        return Optional.ofNullable(this.matchEntries);
    }

    /**
     * Rule name
     * 
     */
    @Import(name="ruleName", required=true)
    private Output<String> ruleName;

    /**
     * @return Rule name
     * 
     */
    public Output<String> ruleName() {
        return this.ruleName;
    }

    /**
     * Rule
     * 
     */
    @Import(name="ruleOrder", required=true)
    private Output<Integer> ruleOrder;

    /**
     * @return Rule
     * 
     */
    public Output<Integer> ruleOrder() {
        return this.ruleOrder;
    }

    private ZoneBasedFirewallPolicyDefinitionRuleArgs() {}

    private ZoneBasedFirewallPolicyDefinitionRuleArgs(ZoneBasedFirewallPolicyDefinitionRuleArgs $) {
        this.actionEntries = $.actionEntries;
        this.baseAction = $.baseAction;
        this.matchEntries = $.matchEntries;
        this.ruleName = $.ruleName;
        this.ruleOrder = $.ruleOrder;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneBasedFirewallPolicyDefinitionRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneBasedFirewallPolicyDefinitionRuleArgs $;

        public Builder() {
            $ = new ZoneBasedFirewallPolicyDefinitionRuleArgs();
        }

        public Builder(ZoneBasedFirewallPolicyDefinitionRuleArgs defaults) {
            $ = new ZoneBasedFirewallPolicyDefinitionRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param actionEntries List of actions entries
         * 
         * @return builder
         * 
         */
        public Builder actionEntries(@Nullable Output<List<ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs>> actionEntries) {
            $.actionEntries = actionEntries;
            return this;
        }

        /**
         * @param actionEntries List of actions entries
         * 
         * @return builder
         * 
         */
        public Builder actionEntries(List<ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs> actionEntries) {
            return actionEntries(Output.of(actionEntries));
        }

        /**
         * @param actionEntries List of actions entries
         * 
         * @return builder
         * 
         */
        public Builder actionEntries(ZoneBasedFirewallPolicyDefinitionRuleActionEntryArgs... actionEntries) {
            return actionEntries(List.of(actionEntries));
        }

        /**
         * @param baseAction Base action
         *   - Choices: `pass`, `drop`, `inspect`
         * 
         * @return builder
         * 
         */
        public Builder baseAction(Output<String> baseAction) {
            $.baseAction = baseAction;
            return this;
        }

        /**
         * @param baseAction Base action
         *   - Choices: `pass`, `drop`, `inspect`
         * 
         * @return builder
         * 
         */
        public Builder baseAction(String baseAction) {
            return baseAction(Output.of(baseAction));
        }

        /**
         * @param matchEntries List of match entries
         * 
         * @return builder
         * 
         */
        public Builder matchEntries(@Nullable Output<List<ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs>> matchEntries) {
            $.matchEntries = matchEntries;
            return this;
        }

        /**
         * @param matchEntries List of match entries
         * 
         * @return builder
         * 
         */
        public Builder matchEntries(List<ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs> matchEntries) {
            return matchEntries(Output.of(matchEntries));
        }

        /**
         * @param matchEntries List of match entries
         * 
         * @return builder
         * 
         */
        public Builder matchEntries(ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs... matchEntries) {
            return matchEntries(List.of(matchEntries));
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Rule name
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param ruleOrder Rule
         * 
         * @return builder
         * 
         */
        public Builder ruleOrder(Output<Integer> ruleOrder) {
            $.ruleOrder = ruleOrder;
            return this;
        }

        /**
         * @param ruleOrder Rule
         * 
         * @return builder
         * 
         */
        public Builder ruleOrder(Integer ruleOrder) {
            return ruleOrder(Output.of(ruleOrder));
        }

        public ZoneBasedFirewallPolicyDefinitionRuleArgs build() {
            if ($.baseAction == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionRuleArgs", "baseAction");
            }
            if ($.ruleName == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionRuleArgs", "ruleName");
            }
            if ($.ruleOrder == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionRuleArgs", "ruleOrder");
            }
            return $;
        }
    }

}
