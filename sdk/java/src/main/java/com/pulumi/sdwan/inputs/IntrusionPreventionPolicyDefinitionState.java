// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.IntrusionPreventionPolicyDefinitionLoggingArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class IntrusionPreventionPolicyDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final IntrusionPreventionPolicyDefinitionState Empty = new IntrusionPreventionPolicyDefinitionState();

    /**
     * Custom signature
     * 
     */
    @Import(name="customSignature")
    private @Nullable Output<Boolean> customSignature;

    /**
     * @return Custom signature
     * 
     */
    public Optional<Output<Boolean>> customSignature() {
        return Optional.ofNullable(this.customSignature);
    }

    /**
     * The description of the policy definition
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the policy definition
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The inspection mode
     *   - Choices: `protection`, `detection`
     * 
     */
    @Import(name="inspectionMode")
    private @Nullable Output<String> inspectionMode;

    /**
     * @return The inspection mode
     *   - Choices: `protection`, `detection`
     * 
     */
    public Optional<Output<String>> inspectionMode() {
        return Optional.ofNullable(this.inspectionMode);
    }

    /**
     * IPS signature list ID
     * 
     */
    @Import(name="ipsSignatureListId")
    private @Nullable Output<String> ipsSignatureListId;

    /**
     * @return IPS signature list ID
     * 
     */
    public Optional<Output<String>> ipsSignatureListId() {
        return Optional.ofNullable(this.ipsSignatureListId);
    }

    /**
     * IPS signature list version
     * 
     */
    @Import(name="ipsSignatureListVersion")
    private @Nullable Output<Integer> ipsSignatureListVersion;

    /**
     * @return IPS signature list version
     * 
     */
    public Optional<Output<Integer>> ipsSignatureListVersion() {
        return Optional.ofNullable(this.ipsSignatureListVersion);
    }

    /**
     * Log level
     *   - Choices: `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
     * 
     */
    @Import(name="logLevel")
    private @Nullable Output<String> logLevel;

    /**
     * @return Log level
     *   - Choices: `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
     * 
     */
    public Optional<Output<String>> logLevel() {
        return Optional.ofNullable(this.logLevel);
    }

    @Import(name="loggings")
    private @Nullable Output<List<IntrusionPreventionPolicyDefinitionLoggingArgs>> loggings;

    public Optional<Output<List<IntrusionPreventionPolicyDefinitionLoggingArgs>>> loggings() {
        return Optional.ofNullable(this.loggings);
    }

    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the policy definition
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Signature set
     *   - Choices: `balanced`, `connectivity`, `security`
     * 
     */
    @Import(name="signatureSet")
    private @Nullable Output<String> signatureSet;

    /**
     * @return Signature set
     *   - Choices: `balanced`, `connectivity`, `security`
     * 
     */
    public Optional<Output<String>> signatureSet() {
        return Optional.ofNullable(this.signatureSet);
    }

    /**
     * List of VPN IDs
     * 
     */
    @Import(name="targetVpns")
    private @Nullable Output<List<String>> targetVpns;

    /**
     * @return List of VPN IDs
     * 
     */
    public Optional<Output<List<String>>> targetVpns() {
        return Optional.ofNullable(this.targetVpns);
    }

    /**
     * The version of the object
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the object
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private IntrusionPreventionPolicyDefinitionState() {}

    private IntrusionPreventionPolicyDefinitionState(IntrusionPreventionPolicyDefinitionState $) {
        this.customSignature = $.customSignature;
        this.description = $.description;
        this.inspectionMode = $.inspectionMode;
        this.ipsSignatureListId = $.ipsSignatureListId;
        this.ipsSignatureListVersion = $.ipsSignatureListVersion;
        this.logLevel = $.logLevel;
        this.loggings = $.loggings;
        this.mode = $.mode;
        this.name = $.name;
        this.signatureSet = $.signatureSet;
        this.targetVpns = $.targetVpns;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(IntrusionPreventionPolicyDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private IntrusionPreventionPolicyDefinitionState $;

        public Builder() {
            $ = new IntrusionPreventionPolicyDefinitionState();
        }

        public Builder(IntrusionPreventionPolicyDefinitionState defaults) {
            $ = new IntrusionPreventionPolicyDefinitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param customSignature Custom signature
         * 
         * @return builder
         * 
         */
        public Builder customSignature(@Nullable Output<Boolean> customSignature) {
            $.customSignature = customSignature;
            return this;
        }

        /**
         * @param customSignature Custom signature
         * 
         * @return builder
         * 
         */
        public Builder customSignature(Boolean customSignature) {
            return customSignature(Output.of(customSignature));
        }

        /**
         * @param description The description of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param inspectionMode The inspection mode
         *   - Choices: `protection`, `detection`
         * 
         * @return builder
         * 
         */
        public Builder inspectionMode(@Nullable Output<String> inspectionMode) {
            $.inspectionMode = inspectionMode;
            return this;
        }

        /**
         * @param inspectionMode The inspection mode
         *   - Choices: `protection`, `detection`
         * 
         * @return builder
         * 
         */
        public Builder inspectionMode(String inspectionMode) {
            return inspectionMode(Output.of(inspectionMode));
        }

        /**
         * @param ipsSignatureListId IPS signature list ID
         * 
         * @return builder
         * 
         */
        public Builder ipsSignatureListId(@Nullable Output<String> ipsSignatureListId) {
            $.ipsSignatureListId = ipsSignatureListId;
            return this;
        }

        /**
         * @param ipsSignatureListId IPS signature list ID
         * 
         * @return builder
         * 
         */
        public Builder ipsSignatureListId(String ipsSignatureListId) {
            return ipsSignatureListId(Output.of(ipsSignatureListId));
        }

        /**
         * @param ipsSignatureListVersion IPS signature list version
         * 
         * @return builder
         * 
         */
        public Builder ipsSignatureListVersion(@Nullable Output<Integer> ipsSignatureListVersion) {
            $.ipsSignatureListVersion = ipsSignatureListVersion;
            return this;
        }

        /**
         * @param ipsSignatureListVersion IPS signature list version
         * 
         * @return builder
         * 
         */
        public Builder ipsSignatureListVersion(Integer ipsSignatureListVersion) {
            return ipsSignatureListVersion(Output.of(ipsSignatureListVersion));
        }

        /**
         * @param logLevel Log level
         *   - Choices: `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
         * 
         * @return builder
         * 
         */
        public Builder logLevel(@Nullable Output<String> logLevel) {
            $.logLevel = logLevel;
            return this;
        }

        /**
         * @param logLevel Log level
         *   - Choices: `emergency`, `alert`, `critical`, `error`, `warning`, `notice`, `info`, `debug`
         * 
         * @return builder
         * 
         */
        public Builder logLevel(String logLevel) {
            return logLevel(Output.of(logLevel));
        }

        public Builder loggings(@Nullable Output<List<IntrusionPreventionPolicyDefinitionLoggingArgs>> loggings) {
            $.loggings = loggings;
            return this;
        }

        public Builder loggings(List<IntrusionPreventionPolicyDefinitionLoggingArgs> loggings) {
            return loggings(Output.of(loggings));
        }

        public Builder loggings(IntrusionPreventionPolicyDefinitionLoggingArgs... loggings) {
            return loggings(List.of(loggings));
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signatureSet Signature set
         *   - Choices: `balanced`, `connectivity`, `security`
         * 
         * @return builder
         * 
         */
        public Builder signatureSet(@Nullable Output<String> signatureSet) {
            $.signatureSet = signatureSet;
            return this;
        }

        /**
         * @param signatureSet Signature set
         *   - Choices: `balanced`, `connectivity`, `security`
         * 
         * @return builder
         * 
         */
        public Builder signatureSet(String signatureSet) {
            return signatureSet(Output.of(signatureSet));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(@Nullable Output<List<String>> targetVpns) {
            $.targetVpns = targetVpns;
            return this;
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(List<String> targetVpns) {
            return targetVpns(Output.of(targetVpns));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(String... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }

        /**
         * @param version The version of the object
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the object
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public IntrusionPreventionPolicyDefinitionState build() {
            return $;
        }
    }

}
