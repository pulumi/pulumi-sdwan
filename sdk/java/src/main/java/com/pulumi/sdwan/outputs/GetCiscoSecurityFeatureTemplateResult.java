// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoSecurityFeatureTemplateKey;
import com.pulumi.sdwan.outputs.GetCiscoSecurityFeatureTemplateKeychain;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoSecurityFeatureTemplateResult {
    /**
     * @return Variable name
     * 
     */
    private String authenticationTypeVariable;
    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    private List<String> authenticationTypes;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Extended Anti-Replay Window
     * 
     */
    private Integer extendedArWindow;
    /**
     * @return Variable name
     * 
     */
    private String extendedArWindowVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Variable name
     * 
     */
    private String integrityTypeVariable;
    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    private List<String> integrityTypes;
    /**
     * @return Configure a Keychain
     * 
     */
    private List<GetCiscoSecurityFeatureTemplateKeychain> keychains;
    /**
     * @return Configure a Key
     * 
     */
    private List<GetCiscoSecurityFeatureTemplateKey> keys;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Enable or disable IPsec pairwise-keying
     * 
     */
    private Boolean pairwiseKeying;
    /**
     * @return Variable name
     * 
     */
    private String pairwiseKeyingVariable;
    /**
     * @return Set how often to change the AES key for DTLS connections
     * 
     */
    private Integer rekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private String rekeyIntervalVariable;
    /**
     * @return Set the sliding replay window size
     * 
     */
    private String replayWindow;
    /**
     * @return Variable name
     * 
     */
    private String replayWindowVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoSecurityFeatureTemplateResult() {}
    /**
     * @return Variable name
     * 
     */
    public String authenticationTypeVariable() {
        return this.authenticationTypeVariable;
    }
    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    public List<String> authenticationTypes() {
        return this.authenticationTypes;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Extended Anti-Replay Window
     * 
     */
    public Integer extendedArWindow() {
        return this.extendedArWindow;
    }
    /**
     * @return Variable name
     * 
     */
    public String extendedArWindowVariable() {
        return this.extendedArWindowVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Variable name
     * 
     */
    public String integrityTypeVariable() {
        return this.integrityTypeVariable;
    }
    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    public List<String> integrityTypes() {
        return this.integrityTypes;
    }
    /**
     * @return Configure a Keychain
     * 
     */
    public List<GetCiscoSecurityFeatureTemplateKeychain> keychains() {
        return this.keychains;
    }
    /**
     * @return Configure a Key
     * 
     */
    public List<GetCiscoSecurityFeatureTemplateKey> keys() {
        return this.keys;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable or disable IPsec pairwise-keying
     * 
     */
    public Boolean pairwiseKeying() {
        return this.pairwiseKeying;
    }
    /**
     * @return Variable name
     * 
     */
    public String pairwiseKeyingVariable() {
        return this.pairwiseKeyingVariable;
    }
    /**
     * @return Set how often to change the AES key for DTLS connections
     * 
     */
    public Integer rekeyInterval() {
        return this.rekeyInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String rekeyIntervalVariable() {
        return this.rekeyIntervalVariable;
    }
    /**
     * @return Set the sliding replay window size
     * 
     */
    public String replayWindow() {
        return this.replayWindow;
    }
    /**
     * @return Variable name
     * 
     */
    public String replayWindowVariable() {
        return this.replayWindowVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSecurityFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String authenticationTypeVariable;
        private List<String> authenticationTypes;
        private String description;
        private List<String> deviceTypes;
        private Integer extendedArWindow;
        private String extendedArWindowVariable;
        private String id;
        private String integrityTypeVariable;
        private List<String> integrityTypes;
        private List<GetCiscoSecurityFeatureTemplateKeychain> keychains;
        private List<GetCiscoSecurityFeatureTemplateKey> keys;
        private String name;
        private Boolean pairwiseKeying;
        private String pairwiseKeyingVariable;
        private Integer rekeyInterval;
        private String rekeyIntervalVariable;
        private String replayWindow;
        private String replayWindowVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoSecurityFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationTypeVariable = defaults.authenticationTypeVariable;
    	      this.authenticationTypes = defaults.authenticationTypes;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.extendedArWindow = defaults.extendedArWindow;
    	      this.extendedArWindowVariable = defaults.extendedArWindowVariable;
    	      this.id = defaults.id;
    	      this.integrityTypeVariable = defaults.integrityTypeVariable;
    	      this.integrityTypes = defaults.integrityTypes;
    	      this.keychains = defaults.keychains;
    	      this.keys = defaults.keys;
    	      this.name = defaults.name;
    	      this.pairwiseKeying = defaults.pairwiseKeying;
    	      this.pairwiseKeyingVariable = defaults.pairwiseKeyingVariable;
    	      this.rekeyInterval = defaults.rekeyInterval;
    	      this.rekeyIntervalVariable = defaults.rekeyIntervalVariable;
    	      this.replayWindow = defaults.replayWindow;
    	      this.replayWindowVariable = defaults.replayWindowVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder authenticationTypeVariable(String authenticationTypeVariable) {
            if (authenticationTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "authenticationTypeVariable");
            }
            this.authenticationTypeVariable = authenticationTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationTypes(List<String> authenticationTypes) {
            if (authenticationTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "authenticationTypes");
            }
            this.authenticationTypes = authenticationTypes;
            return this;
        }
        public Builder authenticationTypes(String... authenticationTypes) {
            return authenticationTypes(List.of(authenticationTypes));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder extendedArWindow(Integer extendedArWindow) {
            if (extendedArWindow == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "extendedArWindow");
            }
            this.extendedArWindow = extendedArWindow;
            return this;
        }
        @CustomType.Setter
        public Builder extendedArWindowVariable(String extendedArWindowVariable) {
            if (extendedArWindowVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "extendedArWindowVariable");
            }
            this.extendedArWindowVariable = extendedArWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder integrityTypeVariable(String integrityTypeVariable) {
            if (integrityTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "integrityTypeVariable");
            }
            this.integrityTypeVariable = integrityTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder integrityTypes(List<String> integrityTypes) {
            if (integrityTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "integrityTypes");
            }
            this.integrityTypes = integrityTypes;
            return this;
        }
        public Builder integrityTypes(String... integrityTypes) {
            return integrityTypes(List.of(integrityTypes));
        }
        @CustomType.Setter
        public Builder keychains(List<GetCiscoSecurityFeatureTemplateKeychain> keychains) {
            if (keychains == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "keychains");
            }
            this.keychains = keychains;
            return this;
        }
        public Builder keychains(GetCiscoSecurityFeatureTemplateKeychain... keychains) {
            return keychains(List.of(keychains));
        }
        @CustomType.Setter
        public Builder keys(List<GetCiscoSecurityFeatureTemplateKey> keys) {
            if (keys == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "keys");
            }
            this.keys = keys;
            return this;
        }
        public Builder keys(GetCiscoSecurityFeatureTemplateKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pairwiseKeying(Boolean pairwiseKeying) {
            if (pairwiseKeying == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "pairwiseKeying");
            }
            this.pairwiseKeying = pairwiseKeying;
            return this;
        }
        @CustomType.Setter
        public Builder pairwiseKeyingVariable(String pairwiseKeyingVariable) {
            if (pairwiseKeyingVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "pairwiseKeyingVariable");
            }
            this.pairwiseKeyingVariable = pairwiseKeyingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder rekeyInterval(Integer rekeyInterval) {
            if (rekeyInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "rekeyInterval");
            }
            this.rekeyInterval = rekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder rekeyIntervalVariable(String rekeyIntervalVariable) {
            if (rekeyIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "rekeyIntervalVariable");
            }
            this.rekeyIntervalVariable = rekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder replayWindow(String replayWindow) {
            if (replayWindow == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "replayWindow");
            }
            this.replayWindow = replayWindow;
            return this;
        }
        @CustomType.Setter
        public Builder replayWindowVariable(String replayWindowVariable) {
            if (replayWindowVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "replayWindowVariable");
            }
            this.replayWindowVariable = replayWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecurityFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoSecurityFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoSecurityFeatureTemplateResult();
            _resultValue.authenticationTypeVariable = authenticationTypeVariable;
            _resultValue.authenticationTypes = authenticationTypes;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.extendedArWindow = extendedArWindow;
            _resultValue.extendedArWindowVariable = extendedArWindowVariable;
            _resultValue.id = id;
            _resultValue.integrityTypeVariable = integrityTypeVariable;
            _resultValue.integrityTypes = integrityTypes;
            _resultValue.keychains = keychains;
            _resultValue.keys = keys;
            _resultValue.name = name;
            _resultValue.pairwiseKeying = pairwiseKeying;
            _resultValue.pairwiseKeyingVariable = pairwiseKeyingVariable;
            _resultValue.rekeyInterval = rekeyInterval;
            _resultValue.rekeyIntervalVariable = rekeyIntervalVariable;
            _resultValue.replayWindow = replayWindow;
            _resultValue.replayWindowVariable = replayWindowVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
