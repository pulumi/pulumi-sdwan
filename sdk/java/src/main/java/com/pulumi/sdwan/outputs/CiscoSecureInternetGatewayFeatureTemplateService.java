// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.sdwan.outputs.CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoSecureInternetGatewayFeatureTemplateService {
    /**
     * @return Interface Pair for active and backup
     * 
     */
    private @Nullable List<CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Service Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    private @Nullable String serviceType;
    /**
     * @return Umbrella Primary Datacenter
     *   - Default value: `Auto`
     * 
     */
    private @Nullable String umbrellaPrimaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String umbrellaPrimaryDataCenterVariable;
    /**
     * @return Umbrella Secondary Datacenter
     *   - Default value: `Auto`
     * 
     */
    private @Nullable String umbrellaSecondaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String umbrellaSecondaryDataCenterVariable;
    /**
     * @return For first-time Acceptable User Policy behavior, block Internet access
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerAupBlockInternetUntilAccepted;
    /**
     * @return Enable Acceptable User Policy
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerAupEnabled;
    /**
     * @return For first-time Acceptable User Policy behavior, force SSL inspection
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerAupForceSslInspection;
    /**
     * @return Custom Acceptable User Policy frequency in days
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer zscalerAupTimeout;
    /**
     * @return Enforce Authentication
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerAuthenticationRequired;
    /**
     * @return Enable Caution
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerCautionEnabled;
    /**
     * @return Firewall enabled
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerFirewallEnabled;
    /**
     * @return Enable IPS Control
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerIpsControlEnabled;
    /**
     * @return Zscaler location name (optional)
     *   - Default value: `Auto`
     * 
     */
    private @Nullable String zscalerLocationName;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String zscalerLocationNameVariable;
    /**
     * @return Custom Primary Datacenter
     *   - Default value: `Auto`
     * 
     */
    private @Nullable String zscalerPrimaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String zscalerPrimaryDataCenterVariable;
    /**
     * @return Custom Secondary Datacenter
     *   - Default value: `Auto`
     * 
     */
    private @Nullable String zscalerSecondaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String zscalerSecondaryDataCenterVariable;
    /**
     * @return Display time unit
     *   - Choices: `MINUTE`, `HOUR`, `DAY`
     *   - Default value: `MINUTE`
     * 
     */
    private @Nullable String zscalerSurrogateDisplayTimeUnit;
    /**
     * @return Idle time to disassociation
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer zscalerSurrogateIdleTime;
    /**
     * @return Enable Surrogate IP
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerSurrogateIp;
    /**
     * @return Enforce Surrogate IP for known browsers
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerSurrogateIpEnforceForKnownBrowsers;
    /**
     * @return Refresh time for re-validation of surrogacy in minutes
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer zscalerSurrogateRefreshTime;
    /**
     * @return Refresh Time unit
     *   - Choices: `MINUTE`, `HOUR`, `DAY`
     *   - Default value: `MINUTE`
     * 
     */
    private @Nullable String zscalerSurrogateRefreshTimeUnit;
    /**
     * @return XFF forwarding enabled
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean zscalerXffForward;

    private CiscoSecureInternetGatewayFeatureTemplateService() {}
    /**
     * @return Interface Pair for active and backup
     * 
     */
    public List<CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs() {
        return this.interfacePairs == null ? List.of() : this.interfacePairs;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Service Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    public Optional<String> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }
    /**
     * @return Umbrella Primary Datacenter
     *   - Default value: `Auto`
     * 
     */
    public Optional<String> umbrellaPrimaryDataCenter() {
        return Optional.ofNullable(this.umbrellaPrimaryDataCenter);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> umbrellaPrimaryDataCenterVariable() {
        return Optional.ofNullable(this.umbrellaPrimaryDataCenterVariable);
    }
    /**
     * @return Umbrella Secondary Datacenter
     *   - Default value: `Auto`
     * 
     */
    public Optional<String> umbrellaSecondaryDataCenter() {
        return Optional.ofNullable(this.umbrellaSecondaryDataCenter);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> umbrellaSecondaryDataCenterVariable() {
        return Optional.ofNullable(this.umbrellaSecondaryDataCenterVariable);
    }
    /**
     * @return For first-time Acceptable User Policy behavior, block Internet access
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerAupBlockInternetUntilAccepted() {
        return Optional.ofNullable(this.zscalerAupBlockInternetUntilAccepted);
    }
    /**
     * @return Enable Acceptable User Policy
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerAupEnabled() {
        return Optional.ofNullable(this.zscalerAupEnabled);
    }
    /**
     * @return For first-time Acceptable User Policy behavior, force SSL inspection
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerAupForceSslInspection() {
        return Optional.ofNullable(this.zscalerAupForceSslInspection);
    }
    /**
     * @return Custom Acceptable User Policy frequency in days
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> zscalerAupTimeout() {
        return Optional.ofNullable(this.zscalerAupTimeout);
    }
    /**
     * @return Enforce Authentication
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerAuthenticationRequired() {
        return Optional.ofNullable(this.zscalerAuthenticationRequired);
    }
    /**
     * @return Enable Caution
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerCautionEnabled() {
        return Optional.ofNullable(this.zscalerCautionEnabled);
    }
    /**
     * @return Firewall enabled
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerFirewallEnabled() {
        return Optional.ofNullable(this.zscalerFirewallEnabled);
    }
    /**
     * @return Enable IPS Control
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerIpsControlEnabled() {
        return Optional.ofNullable(this.zscalerIpsControlEnabled);
    }
    /**
     * @return Zscaler location name (optional)
     *   - Default value: `Auto`
     * 
     */
    public Optional<String> zscalerLocationName() {
        return Optional.ofNullable(this.zscalerLocationName);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> zscalerLocationNameVariable() {
        return Optional.ofNullable(this.zscalerLocationNameVariable);
    }
    /**
     * @return Custom Primary Datacenter
     *   - Default value: `Auto`
     * 
     */
    public Optional<String> zscalerPrimaryDataCenter() {
        return Optional.ofNullable(this.zscalerPrimaryDataCenter);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> zscalerPrimaryDataCenterVariable() {
        return Optional.ofNullable(this.zscalerPrimaryDataCenterVariable);
    }
    /**
     * @return Custom Secondary Datacenter
     *   - Default value: `Auto`
     * 
     */
    public Optional<String> zscalerSecondaryDataCenter() {
        return Optional.ofNullable(this.zscalerSecondaryDataCenter);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> zscalerSecondaryDataCenterVariable() {
        return Optional.ofNullable(this.zscalerSecondaryDataCenterVariable);
    }
    /**
     * @return Display time unit
     *   - Choices: `MINUTE`, `HOUR`, `DAY`
     *   - Default value: `MINUTE`
     * 
     */
    public Optional<String> zscalerSurrogateDisplayTimeUnit() {
        return Optional.ofNullable(this.zscalerSurrogateDisplayTimeUnit);
    }
    /**
     * @return Idle time to disassociation
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> zscalerSurrogateIdleTime() {
        return Optional.ofNullable(this.zscalerSurrogateIdleTime);
    }
    /**
     * @return Enable Surrogate IP
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerSurrogateIp() {
        return Optional.ofNullable(this.zscalerSurrogateIp);
    }
    /**
     * @return Enforce Surrogate IP for known browsers
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerSurrogateIpEnforceForKnownBrowsers() {
        return Optional.ofNullable(this.zscalerSurrogateIpEnforceForKnownBrowsers);
    }
    /**
     * @return Refresh time for re-validation of surrogacy in minutes
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> zscalerSurrogateRefreshTime() {
        return Optional.ofNullable(this.zscalerSurrogateRefreshTime);
    }
    /**
     * @return Refresh Time unit
     *   - Choices: `MINUTE`, `HOUR`, `DAY`
     *   - Default value: `MINUTE`
     * 
     */
    public Optional<String> zscalerSurrogateRefreshTimeUnit() {
        return Optional.ofNullable(this.zscalerSurrogateRefreshTimeUnit);
    }
    /**
     * @return XFF forwarding enabled
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> zscalerXffForward() {
        return Optional.ofNullable(this.zscalerXffForward);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoSecureInternetGatewayFeatureTemplateService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs;
        private @Nullable Boolean optional;
        private @Nullable String serviceType;
        private @Nullable String umbrellaPrimaryDataCenter;
        private @Nullable String umbrellaPrimaryDataCenterVariable;
        private @Nullable String umbrellaSecondaryDataCenter;
        private @Nullable String umbrellaSecondaryDataCenterVariable;
        private @Nullable Boolean zscalerAupBlockInternetUntilAccepted;
        private @Nullable Boolean zscalerAupEnabled;
        private @Nullable Boolean zscalerAupForceSslInspection;
        private @Nullable Integer zscalerAupTimeout;
        private @Nullable Boolean zscalerAuthenticationRequired;
        private @Nullable Boolean zscalerCautionEnabled;
        private @Nullable Boolean zscalerFirewallEnabled;
        private @Nullable Boolean zscalerIpsControlEnabled;
        private @Nullable String zscalerLocationName;
        private @Nullable String zscalerLocationNameVariable;
        private @Nullable String zscalerPrimaryDataCenter;
        private @Nullable String zscalerPrimaryDataCenterVariable;
        private @Nullable String zscalerSecondaryDataCenter;
        private @Nullable String zscalerSecondaryDataCenterVariable;
        private @Nullable String zscalerSurrogateDisplayTimeUnit;
        private @Nullable Integer zscalerSurrogateIdleTime;
        private @Nullable Boolean zscalerSurrogateIp;
        private @Nullable Boolean zscalerSurrogateIpEnforceForKnownBrowsers;
        private @Nullable Integer zscalerSurrogateRefreshTime;
        private @Nullable String zscalerSurrogateRefreshTimeUnit;
        private @Nullable Boolean zscalerXffForward;
        public Builder() {}
        public Builder(CiscoSecureInternetGatewayFeatureTemplateService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interfacePairs = defaults.interfacePairs;
    	      this.optional = defaults.optional;
    	      this.serviceType = defaults.serviceType;
    	      this.umbrellaPrimaryDataCenter = defaults.umbrellaPrimaryDataCenter;
    	      this.umbrellaPrimaryDataCenterVariable = defaults.umbrellaPrimaryDataCenterVariable;
    	      this.umbrellaSecondaryDataCenter = defaults.umbrellaSecondaryDataCenter;
    	      this.umbrellaSecondaryDataCenterVariable = defaults.umbrellaSecondaryDataCenterVariable;
    	      this.zscalerAupBlockInternetUntilAccepted = defaults.zscalerAupBlockInternetUntilAccepted;
    	      this.zscalerAupEnabled = defaults.zscalerAupEnabled;
    	      this.zscalerAupForceSslInspection = defaults.zscalerAupForceSslInspection;
    	      this.zscalerAupTimeout = defaults.zscalerAupTimeout;
    	      this.zscalerAuthenticationRequired = defaults.zscalerAuthenticationRequired;
    	      this.zscalerCautionEnabled = defaults.zscalerCautionEnabled;
    	      this.zscalerFirewallEnabled = defaults.zscalerFirewallEnabled;
    	      this.zscalerIpsControlEnabled = defaults.zscalerIpsControlEnabled;
    	      this.zscalerLocationName = defaults.zscalerLocationName;
    	      this.zscalerLocationNameVariable = defaults.zscalerLocationNameVariable;
    	      this.zscalerPrimaryDataCenter = defaults.zscalerPrimaryDataCenter;
    	      this.zscalerPrimaryDataCenterVariable = defaults.zscalerPrimaryDataCenterVariable;
    	      this.zscalerSecondaryDataCenter = defaults.zscalerSecondaryDataCenter;
    	      this.zscalerSecondaryDataCenterVariable = defaults.zscalerSecondaryDataCenterVariable;
    	      this.zscalerSurrogateDisplayTimeUnit = defaults.zscalerSurrogateDisplayTimeUnit;
    	      this.zscalerSurrogateIdleTime = defaults.zscalerSurrogateIdleTime;
    	      this.zscalerSurrogateIp = defaults.zscalerSurrogateIp;
    	      this.zscalerSurrogateIpEnforceForKnownBrowsers = defaults.zscalerSurrogateIpEnforceForKnownBrowsers;
    	      this.zscalerSurrogateRefreshTime = defaults.zscalerSurrogateRefreshTime;
    	      this.zscalerSurrogateRefreshTimeUnit = defaults.zscalerSurrogateRefreshTimeUnit;
    	      this.zscalerXffForward = defaults.zscalerXffForward;
        }

        @CustomType.Setter
        public Builder interfacePairs(@Nullable List<CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs) {

            this.interfacePairs = interfacePairs;
            return this;
        }
        public Builder interfacePairs(CiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair... interfacePairs) {
            return interfacePairs(List.of(interfacePairs));
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(@Nullable String serviceType) {

            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaPrimaryDataCenter(@Nullable String umbrellaPrimaryDataCenter) {

            this.umbrellaPrimaryDataCenter = umbrellaPrimaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaPrimaryDataCenterVariable(@Nullable String umbrellaPrimaryDataCenterVariable) {

            this.umbrellaPrimaryDataCenterVariable = umbrellaPrimaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaSecondaryDataCenter(@Nullable String umbrellaSecondaryDataCenter) {

            this.umbrellaSecondaryDataCenter = umbrellaSecondaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaSecondaryDataCenterVariable(@Nullable String umbrellaSecondaryDataCenterVariable) {

            this.umbrellaSecondaryDataCenterVariable = umbrellaSecondaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupBlockInternetUntilAccepted(@Nullable Boolean zscalerAupBlockInternetUntilAccepted) {

            this.zscalerAupBlockInternetUntilAccepted = zscalerAupBlockInternetUntilAccepted;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupEnabled(@Nullable Boolean zscalerAupEnabled) {

            this.zscalerAupEnabled = zscalerAupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupForceSslInspection(@Nullable Boolean zscalerAupForceSslInspection) {

            this.zscalerAupForceSslInspection = zscalerAupForceSslInspection;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupTimeout(@Nullable Integer zscalerAupTimeout) {

            this.zscalerAupTimeout = zscalerAupTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAuthenticationRequired(@Nullable Boolean zscalerAuthenticationRequired) {

            this.zscalerAuthenticationRequired = zscalerAuthenticationRequired;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerCautionEnabled(@Nullable Boolean zscalerCautionEnabled) {

            this.zscalerCautionEnabled = zscalerCautionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerFirewallEnabled(@Nullable Boolean zscalerFirewallEnabled) {

            this.zscalerFirewallEnabled = zscalerFirewallEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerIpsControlEnabled(@Nullable Boolean zscalerIpsControlEnabled) {

            this.zscalerIpsControlEnabled = zscalerIpsControlEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerLocationName(@Nullable String zscalerLocationName) {

            this.zscalerLocationName = zscalerLocationName;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerLocationNameVariable(@Nullable String zscalerLocationNameVariable) {

            this.zscalerLocationNameVariable = zscalerLocationNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerPrimaryDataCenter(@Nullable String zscalerPrimaryDataCenter) {

            this.zscalerPrimaryDataCenter = zscalerPrimaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerPrimaryDataCenterVariable(@Nullable String zscalerPrimaryDataCenterVariable) {

            this.zscalerPrimaryDataCenterVariable = zscalerPrimaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSecondaryDataCenter(@Nullable String zscalerSecondaryDataCenter) {

            this.zscalerSecondaryDataCenter = zscalerSecondaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSecondaryDataCenterVariable(@Nullable String zscalerSecondaryDataCenterVariable) {

            this.zscalerSecondaryDataCenterVariable = zscalerSecondaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateDisplayTimeUnit(@Nullable String zscalerSurrogateDisplayTimeUnit) {

            this.zscalerSurrogateDisplayTimeUnit = zscalerSurrogateDisplayTimeUnit;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateIdleTime(@Nullable Integer zscalerSurrogateIdleTime) {

            this.zscalerSurrogateIdleTime = zscalerSurrogateIdleTime;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateIp(@Nullable Boolean zscalerSurrogateIp) {

            this.zscalerSurrogateIp = zscalerSurrogateIp;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateIpEnforceForKnownBrowsers(@Nullable Boolean zscalerSurrogateIpEnforceForKnownBrowsers) {

            this.zscalerSurrogateIpEnforceForKnownBrowsers = zscalerSurrogateIpEnforceForKnownBrowsers;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateRefreshTime(@Nullable Integer zscalerSurrogateRefreshTime) {

            this.zscalerSurrogateRefreshTime = zscalerSurrogateRefreshTime;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateRefreshTimeUnit(@Nullable String zscalerSurrogateRefreshTimeUnit) {

            this.zscalerSurrogateRefreshTimeUnit = zscalerSurrogateRefreshTimeUnit;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerXffForward(@Nullable Boolean zscalerXffForward) {

            this.zscalerXffForward = zscalerXffForward;
            return this;
        }
        public CiscoSecureInternetGatewayFeatureTemplateService build() {
            final var _resultValue = new CiscoSecureInternetGatewayFeatureTemplateService();
            _resultValue.interfacePairs = interfacePairs;
            _resultValue.optional = optional;
            _resultValue.serviceType = serviceType;
            _resultValue.umbrellaPrimaryDataCenter = umbrellaPrimaryDataCenter;
            _resultValue.umbrellaPrimaryDataCenterVariable = umbrellaPrimaryDataCenterVariable;
            _resultValue.umbrellaSecondaryDataCenter = umbrellaSecondaryDataCenter;
            _resultValue.umbrellaSecondaryDataCenterVariable = umbrellaSecondaryDataCenterVariable;
            _resultValue.zscalerAupBlockInternetUntilAccepted = zscalerAupBlockInternetUntilAccepted;
            _resultValue.zscalerAupEnabled = zscalerAupEnabled;
            _resultValue.zscalerAupForceSslInspection = zscalerAupForceSslInspection;
            _resultValue.zscalerAupTimeout = zscalerAupTimeout;
            _resultValue.zscalerAuthenticationRequired = zscalerAuthenticationRequired;
            _resultValue.zscalerCautionEnabled = zscalerCautionEnabled;
            _resultValue.zscalerFirewallEnabled = zscalerFirewallEnabled;
            _resultValue.zscalerIpsControlEnabled = zscalerIpsControlEnabled;
            _resultValue.zscalerLocationName = zscalerLocationName;
            _resultValue.zscalerLocationNameVariable = zscalerLocationNameVariable;
            _resultValue.zscalerPrimaryDataCenter = zscalerPrimaryDataCenter;
            _resultValue.zscalerPrimaryDataCenterVariable = zscalerPrimaryDataCenterVariable;
            _resultValue.zscalerSecondaryDataCenter = zscalerSecondaryDataCenter;
            _resultValue.zscalerSecondaryDataCenterVariable = zscalerSecondaryDataCenterVariable;
            _resultValue.zscalerSurrogateDisplayTimeUnit = zscalerSurrogateDisplayTimeUnit;
            _resultValue.zscalerSurrogateIdleTime = zscalerSurrogateIdleTime;
            _resultValue.zscalerSurrogateIp = zscalerSurrogateIp;
            _resultValue.zscalerSurrogateIpEnforceForKnownBrowsers = zscalerSurrogateIpEnforceForKnownBrowsers;
            _resultValue.zscalerSurrogateRefreshTime = zscalerSurrogateRefreshTime;
            _resultValue.zscalerSurrogateRefreshTimeUnit = zscalerSurrogateRefreshTimeUnit;
            _resultValue.zscalerXffForward = zscalerXffForward;
            return _resultValue;
        }
    }
}
