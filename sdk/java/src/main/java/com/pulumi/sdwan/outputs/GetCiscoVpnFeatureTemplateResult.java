// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateDnsHost;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateDnsIpv4Server;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateDnsIpv6Server;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateIpv4StaticGreRoute;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateIpv4StaticRoute;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateIpv6StaticRoute;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateNat64Pool;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateNatPool;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplatePortForwardRule;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateRouteGlobalExport;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateRouteGlobalImport;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateRouteVpnImport;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateService;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateStaticNatRule;
import com.pulumi.sdwan.outputs.GetCiscoVpnFeatureTemplateStaticNatSubnetRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoVpnFeatureTemplateResult {
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Static DNS mapping
     * 
     */
    private List<GetCiscoVpnFeatureTemplateDnsHost> dnsHosts;
    /**
     * @return DNS
     * 
     */
    private List<GetCiscoVpnFeatureTemplateDnsIpv4Server> dnsIpv4Servers;
    /**
     * @return DNS
     * 
     */
    private List<GetCiscoVpnFeatureTemplateDnsIpv6Server> dnsIpv6Servers;
    /**
     * @return Optional packet fields for ECMP keying
     * 
     */
    private Boolean enhanceEcmpKeying;
    /**
     * @return Variable name
     * 
     */
    private String enhanceEcmpKeyingVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Configure routes pointing to a GRE tunnel
     * 
     */
    private List<GetCiscoVpnFeatureTemplateIpv4StaticGreRoute> ipv4StaticGreRoutes;
    /**
     * @return Configure routes pointing to a IPSEC tunnel
     * 
     */
    private List<GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute> ipv4StaticIpsecRoutes;
    /**
     * @return Configure IPv4 Static Routes
     * 
     */
    private List<GetCiscoVpnFeatureTemplateIpv4StaticRoute> ipv4StaticRoutes;
    /**
     * @return Configure IPv4 Static Service Routes
     * 
     */
    private List<GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute> ipv4StaticServiceRoutes;
    /**
     * @return Configure IPv6 Static Routes
     * 
     */
    private List<GetCiscoVpnFeatureTemplateIpv6StaticRoute> ipv6StaticRoutes;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Set NAT64 v4 pool range
     * 
     */
    private List<GetCiscoVpnFeatureTemplateNat64Pool> nat64Pools;
    /**
     * @return Configure NAT Pool entries
     * 
     */
    private List<GetCiscoVpnFeatureTemplateNatPool> natPools;
    /**
     * @return omp-admin-distance-ipv4
     * 
     */
    private Integer ompAdminDistanceIpv4;
    /**
     * @return Variable name
     * 
     */
    private String ompAdminDistanceIpv4Variable;
    /**
     * @return omp-admin-distance-ipv6
     * 
     */
    private Integer ompAdminDistanceIpv6;
    /**
     * @return Variable name
     * 
     */
    private String ompAdminDistanceIpv6Variable;
    /**
     * @return Advertise routes to OMP
     * 
     */
    private List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route> ompAdvertiseIpv4Routes;
    /**
     * @return Advertise routes to OMP
     * 
     */
    private List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route> ompAdvertiseIpv6Routes;
    /**
     * @return Org Name selected
     * 
     */
    private String organizationName;
    /**
     * @return Configure Port Forward entries
     * 
     */
    private List<GetCiscoVpnFeatureTemplatePortForwardRule> portForwardRules;
    /**
     * @return Enable route leaking to Global VPN from this Service VPN
     * 
     */
    private List<GetCiscoVpnFeatureTemplateRouteGlobalExport> routeGlobalExports;
    /**
     * @return Enable route leaking from Global VPN to this Service VPN
     * 
     */
    private List<GetCiscoVpnFeatureTemplateRouteGlobalImport> routeGlobalImports;
    /**
     * @return Enable route leak from Service VPN to current VPN
     * 
     */
    private List<GetCiscoVpnFeatureTemplateRouteVpnImport> routeVpnImports;
    /**
     * @return Configure services
     * 
     */
    private List<GetCiscoVpnFeatureTemplateService> services;
    /**
     * @return Configure static NAT entries
     * 
     */
    private List<GetCiscoVpnFeatureTemplateStaticNatRule> staticNatRules;
    /**
     * @return Configure static NAT Subnet entries
     * 
     */
    private List<GetCiscoVpnFeatureTemplateStaticNatSubnetRule> staticNatSubnetRules;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Tenant VPN
     * 
     */
    private Integer tenantVpnId;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;
    /**
     * @return List of VPN instances
     * 
     */
    private Integer vpnId;
    /**
     * @return Name
     * 
     */
    private String vpnName;
    /**
     * @return Variable name
     * 
     */
    private String vpnNameVariable;

    private GetCiscoVpnFeatureTemplateResult() {}
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Static DNS mapping
     * 
     */
    public List<GetCiscoVpnFeatureTemplateDnsHost> dnsHosts() {
        return this.dnsHosts;
    }
    /**
     * @return DNS
     * 
     */
    public List<GetCiscoVpnFeatureTemplateDnsIpv4Server> dnsIpv4Servers() {
        return this.dnsIpv4Servers;
    }
    /**
     * @return DNS
     * 
     */
    public List<GetCiscoVpnFeatureTemplateDnsIpv6Server> dnsIpv6Servers() {
        return this.dnsIpv6Servers;
    }
    /**
     * @return Optional packet fields for ECMP keying
     * 
     */
    public Boolean enhanceEcmpKeying() {
        return this.enhanceEcmpKeying;
    }
    /**
     * @return Variable name
     * 
     */
    public String enhanceEcmpKeyingVariable() {
        return this.enhanceEcmpKeyingVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Configure routes pointing to a GRE tunnel
     * 
     */
    public List<GetCiscoVpnFeatureTemplateIpv4StaticGreRoute> ipv4StaticGreRoutes() {
        return this.ipv4StaticGreRoutes;
    }
    /**
     * @return Configure routes pointing to a IPSEC tunnel
     * 
     */
    public List<GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute> ipv4StaticIpsecRoutes() {
        return this.ipv4StaticIpsecRoutes;
    }
    /**
     * @return Configure IPv4 Static Routes
     * 
     */
    public List<GetCiscoVpnFeatureTemplateIpv4StaticRoute> ipv4StaticRoutes() {
        return this.ipv4StaticRoutes;
    }
    /**
     * @return Configure IPv4 Static Service Routes
     * 
     */
    public List<GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute> ipv4StaticServiceRoutes() {
        return this.ipv4StaticServiceRoutes;
    }
    /**
     * @return Configure IPv6 Static Routes
     * 
     */
    public List<GetCiscoVpnFeatureTemplateIpv6StaticRoute> ipv6StaticRoutes() {
        return this.ipv6StaticRoutes;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set NAT64 v4 pool range
     * 
     */
    public List<GetCiscoVpnFeatureTemplateNat64Pool> nat64Pools() {
        return this.nat64Pools;
    }
    /**
     * @return Configure NAT Pool entries
     * 
     */
    public List<GetCiscoVpnFeatureTemplateNatPool> natPools() {
        return this.natPools;
    }
    /**
     * @return omp-admin-distance-ipv4
     * 
     */
    public Integer ompAdminDistanceIpv4() {
        return this.ompAdminDistanceIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String ompAdminDistanceIpv4Variable() {
        return this.ompAdminDistanceIpv4Variable;
    }
    /**
     * @return omp-admin-distance-ipv6
     * 
     */
    public Integer ompAdminDistanceIpv6() {
        return this.ompAdminDistanceIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String ompAdminDistanceIpv6Variable() {
        return this.ompAdminDistanceIpv6Variable;
    }
    /**
     * @return Advertise routes to OMP
     * 
     */
    public List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route> ompAdvertiseIpv4Routes() {
        return this.ompAdvertiseIpv4Routes;
    }
    /**
     * @return Advertise routes to OMP
     * 
     */
    public List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route> ompAdvertiseIpv6Routes() {
        return this.ompAdvertiseIpv6Routes;
    }
    /**
     * @return Org Name selected
     * 
     */
    public String organizationName() {
        return this.organizationName;
    }
    /**
     * @return Configure Port Forward entries
     * 
     */
    public List<GetCiscoVpnFeatureTemplatePortForwardRule> portForwardRules() {
        return this.portForwardRules;
    }
    /**
     * @return Enable route leaking to Global VPN from this Service VPN
     * 
     */
    public List<GetCiscoVpnFeatureTemplateRouteGlobalExport> routeGlobalExports() {
        return this.routeGlobalExports;
    }
    /**
     * @return Enable route leaking from Global VPN to this Service VPN
     * 
     */
    public List<GetCiscoVpnFeatureTemplateRouteGlobalImport> routeGlobalImports() {
        return this.routeGlobalImports;
    }
    /**
     * @return Enable route leak from Service VPN to current VPN
     * 
     */
    public List<GetCiscoVpnFeatureTemplateRouteVpnImport> routeVpnImports() {
        return this.routeVpnImports;
    }
    /**
     * @return Configure services
     * 
     */
    public List<GetCiscoVpnFeatureTemplateService> services() {
        return this.services;
    }
    /**
     * @return Configure static NAT entries
     * 
     */
    public List<GetCiscoVpnFeatureTemplateStaticNatRule> staticNatRules() {
        return this.staticNatRules;
    }
    /**
     * @return Configure static NAT Subnet entries
     * 
     */
    public List<GetCiscoVpnFeatureTemplateStaticNatSubnetRule> staticNatSubnetRules() {
        return this.staticNatSubnetRules;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Tenant VPN
     * 
     */
    public Integer tenantVpnId() {
        return this.tenantVpnId;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return List of VPN instances
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }
    /**
     * @return Name
     * 
     */
    public String vpnName() {
        return this.vpnName;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnNameVariable() {
        return this.vpnNameVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoVpnFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<String> deviceTypes;
        private List<GetCiscoVpnFeatureTemplateDnsHost> dnsHosts;
        private List<GetCiscoVpnFeatureTemplateDnsIpv4Server> dnsIpv4Servers;
        private List<GetCiscoVpnFeatureTemplateDnsIpv6Server> dnsIpv6Servers;
        private Boolean enhanceEcmpKeying;
        private String enhanceEcmpKeyingVariable;
        private String id;
        private List<GetCiscoVpnFeatureTemplateIpv4StaticGreRoute> ipv4StaticGreRoutes;
        private List<GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute> ipv4StaticIpsecRoutes;
        private List<GetCiscoVpnFeatureTemplateIpv4StaticRoute> ipv4StaticRoutes;
        private List<GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute> ipv4StaticServiceRoutes;
        private List<GetCiscoVpnFeatureTemplateIpv6StaticRoute> ipv6StaticRoutes;
        private String name;
        private List<GetCiscoVpnFeatureTemplateNat64Pool> nat64Pools;
        private List<GetCiscoVpnFeatureTemplateNatPool> natPools;
        private Integer ompAdminDistanceIpv4;
        private String ompAdminDistanceIpv4Variable;
        private Integer ompAdminDistanceIpv6;
        private String ompAdminDistanceIpv6Variable;
        private List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route> ompAdvertiseIpv4Routes;
        private List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route> ompAdvertiseIpv6Routes;
        private String organizationName;
        private List<GetCiscoVpnFeatureTemplatePortForwardRule> portForwardRules;
        private List<GetCiscoVpnFeatureTemplateRouteGlobalExport> routeGlobalExports;
        private List<GetCiscoVpnFeatureTemplateRouteGlobalImport> routeGlobalImports;
        private List<GetCiscoVpnFeatureTemplateRouteVpnImport> routeVpnImports;
        private List<GetCiscoVpnFeatureTemplateService> services;
        private List<GetCiscoVpnFeatureTemplateStaticNatRule> staticNatRules;
        private List<GetCiscoVpnFeatureTemplateStaticNatSubnetRule> staticNatSubnetRules;
        private String templateType;
        private Integer tenantVpnId;
        private Integer version;
        private Integer vpnId;
        private String vpnName;
        private String vpnNameVariable;
        public Builder() {}
        public Builder(GetCiscoVpnFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.dnsHosts = defaults.dnsHosts;
    	      this.dnsIpv4Servers = defaults.dnsIpv4Servers;
    	      this.dnsIpv6Servers = defaults.dnsIpv6Servers;
    	      this.enhanceEcmpKeying = defaults.enhanceEcmpKeying;
    	      this.enhanceEcmpKeyingVariable = defaults.enhanceEcmpKeyingVariable;
    	      this.id = defaults.id;
    	      this.ipv4StaticGreRoutes = defaults.ipv4StaticGreRoutes;
    	      this.ipv4StaticIpsecRoutes = defaults.ipv4StaticIpsecRoutes;
    	      this.ipv4StaticRoutes = defaults.ipv4StaticRoutes;
    	      this.ipv4StaticServiceRoutes = defaults.ipv4StaticServiceRoutes;
    	      this.ipv6StaticRoutes = defaults.ipv6StaticRoutes;
    	      this.name = defaults.name;
    	      this.nat64Pools = defaults.nat64Pools;
    	      this.natPools = defaults.natPools;
    	      this.ompAdminDistanceIpv4 = defaults.ompAdminDistanceIpv4;
    	      this.ompAdminDistanceIpv4Variable = defaults.ompAdminDistanceIpv4Variable;
    	      this.ompAdminDistanceIpv6 = defaults.ompAdminDistanceIpv6;
    	      this.ompAdminDistanceIpv6Variable = defaults.ompAdminDistanceIpv6Variable;
    	      this.ompAdvertiseIpv4Routes = defaults.ompAdvertiseIpv4Routes;
    	      this.ompAdvertiseIpv6Routes = defaults.ompAdvertiseIpv6Routes;
    	      this.organizationName = defaults.organizationName;
    	      this.portForwardRules = defaults.portForwardRules;
    	      this.routeGlobalExports = defaults.routeGlobalExports;
    	      this.routeGlobalImports = defaults.routeGlobalImports;
    	      this.routeVpnImports = defaults.routeVpnImports;
    	      this.services = defaults.services;
    	      this.staticNatRules = defaults.staticNatRules;
    	      this.staticNatSubnetRules = defaults.staticNatSubnetRules;
    	      this.templateType = defaults.templateType;
    	      this.tenantVpnId = defaults.tenantVpnId;
    	      this.version = defaults.version;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnName = defaults.vpnName;
    	      this.vpnNameVariable = defaults.vpnNameVariable;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder dnsHosts(List<GetCiscoVpnFeatureTemplateDnsHost> dnsHosts) {
            if (dnsHosts == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "dnsHosts");
            }
            this.dnsHosts = dnsHosts;
            return this;
        }
        public Builder dnsHosts(GetCiscoVpnFeatureTemplateDnsHost... dnsHosts) {
            return dnsHosts(List.of(dnsHosts));
        }
        @CustomType.Setter
        public Builder dnsIpv4Servers(List<GetCiscoVpnFeatureTemplateDnsIpv4Server> dnsIpv4Servers) {
            if (dnsIpv4Servers == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "dnsIpv4Servers");
            }
            this.dnsIpv4Servers = dnsIpv4Servers;
            return this;
        }
        public Builder dnsIpv4Servers(GetCiscoVpnFeatureTemplateDnsIpv4Server... dnsIpv4Servers) {
            return dnsIpv4Servers(List.of(dnsIpv4Servers));
        }
        @CustomType.Setter
        public Builder dnsIpv6Servers(List<GetCiscoVpnFeatureTemplateDnsIpv6Server> dnsIpv6Servers) {
            if (dnsIpv6Servers == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "dnsIpv6Servers");
            }
            this.dnsIpv6Servers = dnsIpv6Servers;
            return this;
        }
        public Builder dnsIpv6Servers(GetCiscoVpnFeatureTemplateDnsIpv6Server... dnsIpv6Servers) {
            return dnsIpv6Servers(List.of(dnsIpv6Servers));
        }
        @CustomType.Setter
        public Builder enhanceEcmpKeying(Boolean enhanceEcmpKeying) {
            if (enhanceEcmpKeying == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "enhanceEcmpKeying");
            }
            this.enhanceEcmpKeying = enhanceEcmpKeying;
            return this;
        }
        @CustomType.Setter
        public Builder enhanceEcmpKeyingVariable(String enhanceEcmpKeyingVariable) {
            if (enhanceEcmpKeyingVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "enhanceEcmpKeyingVariable");
            }
            this.enhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4StaticGreRoutes(List<GetCiscoVpnFeatureTemplateIpv4StaticGreRoute> ipv4StaticGreRoutes) {
            if (ipv4StaticGreRoutes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ipv4StaticGreRoutes");
            }
            this.ipv4StaticGreRoutes = ipv4StaticGreRoutes;
            return this;
        }
        public Builder ipv4StaticGreRoutes(GetCiscoVpnFeatureTemplateIpv4StaticGreRoute... ipv4StaticGreRoutes) {
            return ipv4StaticGreRoutes(List.of(ipv4StaticGreRoutes));
        }
        @CustomType.Setter
        public Builder ipv4StaticIpsecRoutes(List<GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute> ipv4StaticIpsecRoutes) {
            if (ipv4StaticIpsecRoutes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ipv4StaticIpsecRoutes");
            }
            this.ipv4StaticIpsecRoutes = ipv4StaticIpsecRoutes;
            return this;
        }
        public Builder ipv4StaticIpsecRoutes(GetCiscoVpnFeatureTemplateIpv4StaticIpsecRoute... ipv4StaticIpsecRoutes) {
            return ipv4StaticIpsecRoutes(List.of(ipv4StaticIpsecRoutes));
        }
        @CustomType.Setter
        public Builder ipv4StaticRoutes(List<GetCiscoVpnFeatureTemplateIpv4StaticRoute> ipv4StaticRoutes) {
            if (ipv4StaticRoutes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ipv4StaticRoutes");
            }
            this.ipv4StaticRoutes = ipv4StaticRoutes;
            return this;
        }
        public Builder ipv4StaticRoutes(GetCiscoVpnFeatureTemplateIpv4StaticRoute... ipv4StaticRoutes) {
            return ipv4StaticRoutes(List.of(ipv4StaticRoutes));
        }
        @CustomType.Setter
        public Builder ipv4StaticServiceRoutes(List<GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute> ipv4StaticServiceRoutes) {
            if (ipv4StaticServiceRoutes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ipv4StaticServiceRoutes");
            }
            this.ipv4StaticServiceRoutes = ipv4StaticServiceRoutes;
            return this;
        }
        public Builder ipv4StaticServiceRoutes(GetCiscoVpnFeatureTemplateIpv4StaticServiceRoute... ipv4StaticServiceRoutes) {
            return ipv4StaticServiceRoutes(List.of(ipv4StaticServiceRoutes));
        }
        @CustomType.Setter
        public Builder ipv6StaticRoutes(List<GetCiscoVpnFeatureTemplateIpv6StaticRoute> ipv6StaticRoutes) {
            if (ipv6StaticRoutes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ipv6StaticRoutes");
            }
            this.ipv6StaticRoutes = ipv6StaticRoutes;
            return this;
        }
        public Builder ipv6StaticRoutes(GetCiscoVpnFeatureTemplateIpv6StaticRoute... ipv6StaticRoutes) {
            return ipv6StaticRoutes(List.of(ipv6StaticRoutes));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat64Pools(List<GetCiscoVpnFeatureTemplateNat64Pool> nat64Pools) {
            if (nat64Pools == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "nat64Pools");
            }
            this.nat64Pools = nat64Pools;
            return this;
        }
        public Builder nat64Pools(GetCiscoVpnFeatureTemplateNat64Pool... nat64Pools) {
            return nat64Pools(List.of(nat64Pools));
        }
        @CustomType.Setter
        public Builder natPools(List<GetCiscoVpnFeatureTemplateNatPool> natPools) {
            if (natPools == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "natPools");
            }
            this.natPools = natPools;
            return this;
        }
        public Builder natPools(GetCiscoVpnFeatureTemplateNatPool... natPools) {
            return natPools(List.of(natPools));
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv4(Integer ompAdminDistanceIpv4) {
            if (ompAdminDistanceIpv4 == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ompAdminDistanceIpv4");
            }
            this.ompAdminDistanceIpv4 = ompAdminDistanceIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv4Variable(String ompAdminDistanceIpv4Variable) {
            if (ompAdminDistanceIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ompAdminDistanceIpv4Variable");
            }
            this.ompAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv6(Integer ompAdminDistanceIpv6) {
            if (ompAdminDistanceIpv6 == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ompAdminDistanceIpv6");
            }
            this.ompAdminDistanceIpv6 = ompAdminDistanceIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv6Variable(String ompAdminDistanceIpv6Variable) {
            if (ompAdminDistanceIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ompAdminDistanceIpv6Variable");
            }
            this.ompAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdvertiseIpv4Routes(List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route> ompAdvertiseIpv4Routes) {
            if (ompAdvertiseIpv4Routes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ompAdvertiseIpv4Routes");
            }
            this.ompAdvertiseIpv4Routes = ompAdvertiseIpv4Routes;
            return this;
        }
        public Builder ompAdvertiseIpv4Routes(GetCiscoVpnFeatureTemplateOmpAdvertiseIpv4Route... ompAdvertiseIpv4Routes) {
            return ompAdvertiseIpv4Routes(List.of(ompAdvertiseIpv4Routes));
        }
        @CustomType.Setter
        public Builder ompAdvertiseIpv6Routes(List<GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route> ompAdvertiseIpv6Routes) {
            if (ompAdvertiseIpv6Routes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "ompAdvertiseIpv6Routes");
            }
            this.ompAdvertiseIpv6Routes = ompAdvertiseIpv6Routes;
            return this;
        }
        public Builder ompAdvertiseIpv6Routes(GetCiscoVpnFeatureTemplateOmpAdvertiseIpv6Route... ompAdvertiseIpv6Routes) {
            return ompAdvertiseIpv6Routes(List.of(ompAdvertiseIpv6Routes));
        }
        @CustomType.Setter
        public Builder organizationName(String organizationName) {
            if (organizationName == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "organizationName");
            }
            this.organizationName = organizationName;
            return this;
        }
        @CustomType.Setter
        public Builder portForwardRules(List<GetCiscoVpnFeatureTemplatePortForwardRule> portForwardRules) {
            if (portForwardRules == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "portForwardRules");
            }
            this.portForwardRules = portForwardRules;
            return this;
        }
        public Builder portForwardRules(GetCiscoVpnFeatureTemplatePortForwardRule... portForwardRules) {
            return portForwardRules(List.of(portForwardRules));
        }
        @CustomType.Setter
        public Builder routeGlobalExports(List<GetCiscoVpnFeatureTemplateRouteGlobalExport> routeGlobalExports) {
            if (routeGlobalExports == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "routeGlobalExports");
            }
            this.routeGlobalExports = routeGlobalExports;
            return this;
        }
        public Builder routeGlobalExports(GetCiscoVpnFeatureTemplateRouteGlobalExport... routeGlobalExports) {
            return routeGlobalExports(List.of(routeGlobalExports));
        }
        @CustomType.Setter
        public Builder routeGlobalImports(List<GetCiscoVpnFeatureTemplateRouteGlobalImport> routeGlobalImports) {
            if (routeGlobalImports == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "routeGlobalImports");
            }
            this.routeGlobalImports = routeGlobalImports;
            return this;
        }
        public Builder routeGlobalImports(GetCiscoVpnFeatureTemplateRouteGlobalImport... routeGlobalImports) {
            return routeGlobalImports(List.of(routeGlobalImports));
        }
        @CustomType.Setter
        public Builder routeVpnImports(List<GetCiscoVpnFeatureTemplateRouteVpnImport> routeVpnImports) {
            if (routeVpnImports == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "routeVpnImports");
            }
            this.routeVpnImports = routeVpnImports;
            return this;
        }
        public Builder routeVpnImports(GetCiscoVpnFeatureTemplateRouteVpnImport... routeVpnImports) {
            return routeVpnImports(List.of(routeVpnImports));
        }
        @CustomType.Setter
        public Builder services(List<GetCiscoVpnFeatureTemplateService> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(GetCiscoVpnFeatureTemplateService... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder staticNatRules(List<GetCiscoVpnFeatureTemplateStaticNatRule> staticNatRules) {
            if (staticNatRules == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "staticNatRules");
            }
            this.staticNatRules = staticNatRules;
            return this;
        }
        public Builder staticNatRules(GetCiscoVpnFeatureTemplateStaticNatRule... staticNatRules) {
            return staticNatRules(List.of(staticNatRules));
        }
        @CustomType.Setter
        public Builder staticNatSubnetRules(List<GetCiscoVpnFeatureTemplateStaticNatSubnetRule> staticNatSubnetRules) {
            if (staticNatSubnetRules == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "staticNatSubnetRules");
            }
            this.staticNatSubnetRules = staticNatSubnetRules;
            return this;
        }
        public Builder staticNatSubnetRules(GetCiscoVpnFeatureTemplateStaticNatSubnetRule... staticNatSubnetRules) {
            return staticNatSubnetRules(List.of(staticNatSubnetRules));
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder tenantVpnId(Integer tenantVpnId) {
            if (tenantVpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "tenantVpnId");
            }
            this.tenantVpnId = tenantVpnId;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnName(String vpnName) {
            if (vpnName == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "vpnName");
            }
            this.vpnName = vpnName;
            return this;
        }
        @CustomType.Setter
        public Builder vpnNameVariable(String vpnNameVariable) {
            if (vpnNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateResult", "vpnNameVariable");
            }
            this.vpnNameVariable = vpnNameVariable;
            return this;
        }
        public GetCiscoVpnFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoVpnFeatureTemplateResult();
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.dnsHosts = dnsHosts;
            _resultValue.dnsIpv4Servers = dnsIpv4Servers;
            _resultValue.dnsIpv6Servers = dnsIpv6Servers;
            _resultValue.enhanceEcmpKeying = enhanceEcmpKeying;
            _resultValue.enhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            _resultValue.id = id;
            _resultValue.ipv4StaticGreRoutes = ipv4StaticGreRoutes;
            _resultValue.ipv4StaticIpsecRoutes = ipv4StaticIpsecRoutes;
            _resultValue.ipv4StaticRoutes = ipv4StaticRoutes;
            _resultValue.ipv4StaticServiceRoutes = ipv4StaticServiceRoutes;
            _resultValue.ipv6StaticRoutes = ipv6StaticRoutes;
            _resultValue.name = name;
            _resultValue.nat64Pools = nat64Pools;
            _resultValue.natPools = natPools;
            _resultValue.ompAdminDistanceIpv4 = ompAdminDistanceIpv4;
            _resultValue.ompAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            _resultValue.ompAdminDistanceIpv6 = ompAdminDistanceIpv6;
            _resultValue.ompAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            _resultValue.ompAdvertiseIpv4Routes = ompAdvertiseIpv4Routes;
            _resultValue.ompAdvertiseIpv6Routes = ompAdvertiseIpv6Routes;
            _resultValue.organizationName = organizationName;
            _resultValue.portForwardRules = portForwardRules;
            _resultValue.routeGlobalExports = routeGlobalExports;
            _resultValue.routeGlobalImports = routeGlobalImports;
            _resultValue.routeVpnImports = routeVpnImports;
            _resultValue.services = services;
            _resultValue.staticNatRules = staticNatRules;
            _resultValue.staticNatSubnetRules = staticNatSubnetRules;
            _resultValue.templateType = templateType;
            _resultValue.tenantVpnId = tenantVpnId;
            _resultValue.version = version;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnName = vpnName;
            _resultValue.vpnNameVariable = vpnNameVariable;
            return _resultValue;
        }
    }
}
