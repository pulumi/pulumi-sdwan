// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs Empty = new VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs();

    /**
     * Use link-local IPv6 Address
     * 
     */
    @Import(name="linkLocalAddress")
    private @Nullable Output<String> linkLocalAddress;

    /**
     * @return Use link-local IPv6 Address
     * 
     */
    public Optional<Output<String>> linkLocalAddress() {
        return Optional.ofNullable(this.linkLocalAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="linkLocalAddressVariable")
    private @Nullable Output<String> linkLocalAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> linkLocalAddressVariable() {
        return Optional.ofNullable(this.linkLocalAddressVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Assign Global IPv6 Prefix
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Assign Global IPv6 Prefix
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="prefixVariable")
    private @Nullable Output<String> prefixVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> prefixVariable() {
        return Optional.ofNullable(this.prefixVariable);
    }

    private VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs() {}

    private VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs(VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs $) {
        this.linkLocalAddress = $.linkLocalAddress;
        this.linkLocalAddressVariable = $.linkLocalAddressVariable;
        this.optional = $.optional;
        this.prefix = $.prefix;
        this.prefixVariable = $.prefixVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs $;

        public Builder() {
            $ = new VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs();
        }

        public Builder(VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs defaults) {
            $ = new VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param linkLocalAddress Use link-local IPv6 Address
         * 
         * @return builder
         * 
         */
        public Builder linkLocalAddress(@Nullable Output<String> linkLocalAddress) {
            $.linkLocalAddress = linkLocalAddress;
            return this;
        }

        /**
         * @param linkLocalAddress Use link-local IPv6 Address
         * 
         * @return builder
         * 
         */
        public Builder linkLocalAddress(String linkLocalAddress) {
            return linkLocalAddress(Output.of(linkLocalAddress));
        }

        /**
         * @param linkLocalAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder linkLocalAddressVariable(@Nullable Output<String> linkLocalAddressVariable) {
            $.linkLocalAddressVariable = linkLocalAddressVariable;
            return this;
        }

        /**
         * @param linkLocalAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder linkLocalAddressVariable(String linkLocalAddressVariable) {
            return linkLocalAddressVariable(Output.of(linkLocalAddressVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param prefix Assign Global IPv6 Prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Assign Global IPv6 Prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param prefixVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder prefixVariable(@Nullable Output<String> prefixVariable) {
            $.prefixVariable = prefixVariable;
            return this;
        }

        /**
         * @param prefixVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder prefixVariable(String prefixVariable) {
            return prefixVariable(Output.of(prefixVariable));
        }

        public VpnInterfaceSviFeatureTemplateIpv6VrrpIpv6AddressArgs build() {
            return $;
        }
    }

}
