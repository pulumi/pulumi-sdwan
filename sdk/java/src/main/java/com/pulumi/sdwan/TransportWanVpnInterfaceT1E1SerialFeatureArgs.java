// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransportWanVpnInterfaceT1E1SerialFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransportWanVpnInterfaceT1E1SerialFeatureArgs Empty = new TransportWanVpnInterfaceT1E1SerialFeatureArgs();

    @Import(name="aclIpv4EgressFeatureId")
    private @Nullable Output<String> aclIpv4EgressFeatureId;

    public Optional<Output<String>> aclIpv4EgressFeatureId() {
        return Optional.ofNullable(this.aclIpv4EgressFeatureId);
    }

    @Import(name="aclIpv4IngressFeatureId")
    private @Nullable Output<String> aclIpv4IngressFeatureId;

    public Optional<Output<String>> aclIpv4IngressFeatureId() {
        return Optional.ofNullable(this.aclIpv4IngressFeatureId);
    }

    @Import(name="aclIpv6EgressFeatureId")
    private @Nullable Output<String> aclIpv6EgressFeatureId;

    public Optional<Output<String>> aclIpv6EgressFeatureId() {
        return Optional.ofNullable(this.aclIpv6EgressFeatureId);
    }

    @Import(name="aclIpv6IngressFeatureId")
    private @Nullable Output<String> aclIpv6IngressFeatureId;

    public Optional<Output<String>> aclIpv6IngressFeatureId() {
        return Optional.ofNullable(this.aclIpv6IngressFeatureId);
    }

    /**
     * Interface bandwidth capacity, in kbps
     *   - Range: `1`-`200000000`
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return Interface bandwidth capacity, in kbps
     *   - Range: `1`-`200000000`
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    @Import(name="bandwidthDownstream")
    private @Nullable Output<Integer> bandwidthDownstream;

    /**
     * @return Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> bandwidthDownstream() {
        return Optional.ofNullable(this.bandwidthDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthDownstreamVariable")
    private @Nullable Output<String> bandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthDownstreamVariable() {
        return Optional.ofNullable(this.bandwidthDownstreamVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthVariable")
    private @Nullable Output<String> bandwidthVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthVariable() {
        return Optional.ofNullable(this.bandwidthVariable);
    }

    /**
     * Set preference for interface Clock speed
     *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     * 
     */
    @Import(name="clockRate")
    private @Nullable Output<String> clockRate;

    /**
     * @return Set preference for interface Clock speed
     *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     * 
     */
    public Optional<Output<String>> clockRate() {
        return Optional.ofNullable(this.clockRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clockRateVariable")
    private @Nullable Output<String> clockRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clockRateVariable() {
        return Optional.ofNullable(this.clockRateVariable);
    }

    /**
     * The description of the Feature
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`, `frame-relay`
     * 
     */
    @Import(name="encapsulation")
    private @Nullable Output<String> encapsulation;

    /**
     * @return Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`, `frame-relay`
     * 
     */
    public Optional<Output<String>> encapsulation() {
        return Optional.ofNullable(this.encapsulation);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="encapsulationVariable")
    private @Nullable Output<String> encapsulationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> encapsulationVariable() {
        return Optional.ofNullable(this.encapsulationVariable);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId", required=true)
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }

    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceNameVariable")
    private @Nullable Output<String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceNameVariable() {
        return Optional.ofNullable(this.interfaceNameVariable);
    }

    /**
     * Set ip mtu
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     * 
     */
    @Import(name="ipMtu")
    private @Nullable Output<Integer> ipMtu;

    /**
     * @return Set ip mtu
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> ipMtu() {
        return Optional.ofNullable(this.ipMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipMtuVariable")
    private @Nullable Output<String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipMtuVariable() {
        return Optional.ofNullable(this.ipMtuVariable);
    }

    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4AddressVariable")
    private @Nullable Output<String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4AddressVariable() {
        return Optional.ofNullable(this.ipv4AddressVariable);
    }

    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="ipv4SubnetMask")
    private @Nullable Output<String> ipv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> ipv4SubnetMask() {
        return Optional.ofNullable(this.ipv4SubnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4SubnetMaskVariable")
    private @Nullable Output<String> ipv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4SubnetMaskVariable() {
        return Optional.ofNullable(this.ipv4SubnetMaskVariable);
    }

    /**
     * Assign IPv6 address
     * 
     */
    @Import(name="ipv6Address")
    private @Nullable Output<String> ipv6Address;

    /**
     * @return Assign IPv6 address
     * 
     */
    public Optional<Output<String>> ipv6Address() {
        return Optional.ofNullable(this.ipv6Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv6AddressVariable")
    private @Nullable Output<String> ipv6AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv6AddressVariable() {
        return Optional.ofNullable(this.ipv6AddressVariable);
    }

    /**
     * Interface MTU &lt;68...2000&gt;, in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Interface MTU &lt;68...2000&gt;, in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="mtuVariable")
    private @Nullable Output<String> mtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> mtuVariable() {
        return Optional.ofNullable(this.mtuVariable);
    }

    /**
     * The name of the Feature
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Per-tunnel Qos
     *   - Default value: `false`
     * 
     */
    @Import(name="perTunnelQos")
    private @Nullable Output<Boolean> perTunnelQos;

    /**
     * @return Per-tunnel Qos
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> perTunnelQos() {
        return Optional.ofNullable(this.perTunnelQos);
    }

    /**
     * Per-tunnel QoS Aggregator
     *   - Default value: `false`
     * 
     */
    @Import(name="perTunnelQosAggregator")
    private @Nullable Output<Boolean> perTunnelQosAggregator;

    /**
     * @return Per-tunnel QoS Aggregator
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> perTunnelQosAggregator() {
        return Optional.ofNullable(this.perTunnelQosAggregator);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perTunnelQosAggregatorVariable")
    private @Nullable Output<String> perTunnelQosAggregatorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perTunnelQosAggregatorVariable() {
        return Optional.ofNullable(this.perTunnelQosAggregatorVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perTunnelQosVariable")
    private @Nullable Output<String> perTunnelQosVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perTunnelQosVariable() {
        return Optional.ofNullable(this.perTunnelQosVariable);
    }

    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosShapingRate")
    private @Nullable Output<Integer> qosShapingRate;

    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosShapingRate() {
        return Optional.ofNullable(this.qosShapingRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosShapingRateVariable")
    private @Nullable Output<String> qosShapingRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosShapingRateVariable() {
        return Optional.ofNullable(this.qosShapingRateVariable);
    }

    /**
     * Administrative state
     *   - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tcpMss")
    private @Nullable Output<Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tcpMss() {
        return Optional.ofNullable(this.tcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssVariable")
    private @Nullable Output<String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssVariable() {
        return Optional.ofNullable(this.tcpMssVariable);
    }

    /**
     * Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    @Import(name="tlocExtension")
    private @Nullable Output<String> tlocExtension;

    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public Optional<Output<String>> tlocExtension() {
        return Optional.ofNullable(this.tlocExtension);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tlocExtensionVariable")
    private @Nullable Output<String> tlocExtensionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tlocExtensionVariable() {
        return Optional.ofNullable(this.tlocExtensionVariable);
    }

    /**
     * Transport WAN VPN Feature ID
     * 
     */
    @Import(name="transportWanVpnFeatureId", required=true)
    private Output<String> transportWanVpnFeatureId;

    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    public Output<String> transportWanVpnFeatureId() {
        return this.transportWanVpnFeatureId;
    }

    /**
     * Tunnel Interface
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterface")
    private @Nullable Output<Boolean> tunnelInterface;

    /**
     * @return Tunnel Interface
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterface() {
        return Optional.ofNullable(this.tunnelInterface);
    }

    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowAll")
    private @Nullable Output<Boolean> tunnelInterfaceAllowAll;

    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowAll() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAll);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowAllVariable")
    private @Nullable Output<String> tunnelInterfaceAllowAllVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowAllVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAllVariable);
    }

    /**
     * Allow/Deny BFD
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowBfd")
    private @Nullable Output<Boolean> tunnelInterfaceAllowBfd;

    /**
     * @return Allow/Deny BFD
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowBfd() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBfd);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowBfdVariable")
    private @Nullable Output<String> tunnelInterfaceAllowBfdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowBfdVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBfdVariable);
    }

    /**
     * Allow/deny BGP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowBgp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowBgp;

    /**
     * @return Allow/deny BGP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowBgp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowBgpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowBgpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowBgpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgpVariable);
    }

    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDhcp;

    /**
     * @return Allow/Deny DHCP
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDhcp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDhcpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcpVariable);
    }

    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDns")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDns;

    /**
     * @return Allow/Deny DNS
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDns() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDns);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDnsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDnsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDnsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDnsVariable);
    }

    /**
     * Allow/Deny Https
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowHttps")
    private @Nullable Output<Boolean> tunnelInterfaceAllowHttps;

    /**
     * @return Allow/Deny Https
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowHttps() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttps);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowHttpsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowHttpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowHttpsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttpsVariable);
    }

    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowIcmp;

    /**
     * @return Allow/Deny ICMP
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowIcmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowIcmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowIcmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmpVariable);
    }

    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNetconf;

    /**
     * @return Allow/Deny NETCONF
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNetconf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNetconfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNetconfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconfVariable);
    }

    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNtp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNtp;

    /**
     * @return Allow/Deny NTP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNtp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNtpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNtpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNtpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtpVariable);
    }

    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowOspf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowOspf;

    /**
     * @return Allow/Deny OSPF
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowOspf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowOspfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowOspfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowOspfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspfVariable);
    }

    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSnmp;

    /**
     * @return Allow/Deny SNMP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSnmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSnmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSnmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmpVariable);
    }

    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSsh")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSsh;

    /**
     * @return Allow/Deny SSH
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSsh() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSsh);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSshVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSshVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSshVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSshVariable);
    }

    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowStun")
    private @Nullable Output<Boolean> tunnelInterfaceAllowStun;

    /**
     * @return Allow/Deny STUN
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowStun() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStun);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowStunVariable")
    private @Nullable Output<String> tunnelInterfaceAllowStunVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowStunVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStunVariable);
    }

    /**
     * Bind loopback tunnel interface to a physical interface
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnel")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnel;

    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnel() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnel);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnelVariable")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnelVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnelVariable);
    }

    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceBorder")
    private @Nullable Output<Boolean> tunnelInterfaceBorder;

    /**
     * @return Set TLOC as border TLOC
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceBorder() {
        return Optional.ofNullable(this.tunnelInterfaceBorder);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBorderVariable")
    private @Nullable Output<String> tunnelInterfaceBorderVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBorderVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBorderVariable);
    }

    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceCarrier")
    private @Nullable Output<String> tunnelInterfaceCarrier;

    /**
     * @return Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrier() {
        return Optional.ofNullable(this.tunnelInterfaceCarrier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceCarrierVariable")
    private @Nullable Output<String> tunnelInterfaceCarrierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrierVariable() {
        return Optional.ofNullable(this.tunnelInterfaceCarrierVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragment")
    private @Nullable Output<Boolean> tunnelInterfaceClearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceClearDontFragment() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragmentVariable")
    private @Nullable Output<String> tunnelInterfaceClearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceClearDontFragmentVariable() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragmentVariable);
    }

    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceClearNetworkBroadcast")
    private @Nullable Output<Boolean> tunnelInterfaceClearNetworkBroadcast;

    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceClearNetworkBroadcast() {
        return Optional.ofNullable(this.tunnelInterfaceClearNetworkBroadcast);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceClearNetworkBroadcastVariable")
    private @Nullable Output<String> tunnelInterfaceClearNetworkBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceClearNetworkBroadcastVariable() {
        return Optional.ofNullable(this.tunnelInterfaceClearNetworkBroadcastVariable);
    }

    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceColor")
    private @Nullable Output<String> tunnelInterfaceColor;

    /**
     * @return Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColor() {
        return Optional.ofNullable(this.tunnelInterfaceColor);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceColorVariable")
    private @Nullable Output<String> tunnelInterfaceColorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColorVariable() {
        return Optional.ofNullable(this.tunnelInterfaceColorVariable);
    }

    /**
     * Encapsulation for TLOC
     * 
     */
    @Import(name="tunnelInterfaceEncapsulations")
    private @Nullable Output<List<TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations;

    /**
     * @return Encapsulation for TLOC
     * 
     */
    public Optional<Output<List<TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs>>> tunnelInterfaceEncapsulations() {
        return Optional.ofNullable(this.tunnelInterfaceEncapsulations);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupListVariable")
    private @Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceExcludeControllerGroupListVariable() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupListVariable);
    }

    /**
     * Exclude the following controller groups defined in this list
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupLists")
    private @Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists;

    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceExcludeControllerGroupLists() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupLists);
    }

    /**
     * List of groups
     *   - Range: `1`-`4294967295`
     * 
     */
    @Import(name="tunnelInterfaceGroups")
    private @Nullable Output<Integer> tunnelInterfaceGroups;

    /**
     * @return List of groups
     *   - Range: `1`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceGroups() {
        return Optional.ofNullable(this.tunnelInterfaceGroups);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceGroupsVariable")
    private @Nullable Output<String> tunnelInterfaceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceGroupsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceGroupsVariable);
    }

    /**
     * Set time period of control hello packets &lt;100..600000&gt; milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     * 
     */
    @Import(name="tunnelInterfaceHelloInterval")
    private @Nullable Output<Integer> tunnelInterfaceHelloInterval;

    /**
     * @return Set time period of control hello packets &lt;100..600000&gt; milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloInterval() {
        return Optional.ofNullable(this.tunnelInterfaceHelloInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceHelloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloIntervalVariable);
    }

    /**
     * Set tolerance of control hello packets &lt;12..6000&gt; seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     * 
     */
    @Import(name="tunnelInterfaceHelloTolerance")
    private @Nullable Output<Integer> tunnelInterfaceHelloTolerance;

    /**
     * @return Set tolerance of control hello packets &lt;12..6000&gt; seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloTolerance() {
        return Optional.ofNullable(this.tunnelInterfaceHelloTolerance);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloToleranceVariable")
    private @Nullable Output<String> tunnelInterfaceHelloToleranceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloToleranceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloToleranceVariable);
    }

    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuit")
    private @Nullable Output<Boolean> tunnelInterfaceLastResortCircuit;

    /**
     * @return Set TLOC as last resort
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLastResortCircuit() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuit);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuitVariable")
    private @Nullable Output<String> tunnelInterfaceLastResortCircuitVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLastResortCircuitVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuitVariable);
    }

    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLink")
    private @Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink;

    /**
     * @return Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLowBandwidthLink() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLink);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLinkVariable")
    private @Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLowBandwidthLinkVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLinkVariable);
    }

    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     * 
     */
    @Import(name="tunnelInterfaceMaxControlConnections")
    private @Nullable Output<Integer> tunnelInterfaceMaxControlConnections;

    /**
     * @return Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceMaxControlConnections() {
        return Optional.ofNullable(this.tunnelInterfaceMaxControlConnections);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceMaxControlConnectionsVariable")
    private @Nullable Output<String> tunnelInterfaceMaxControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceMaxControlConnectionsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceMaxControlConnectionsVariable);
    }

    /**
     * Set time period of nat refresh packets &lt;1...60&gt; seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshInterval")
    private @Nullable Output<Integer> tunnelInterfaceNatRefreshInterval;

    /**
     * @return Set time period of nat refresh packets &lt;1...60&gt; seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceNatRefreshInterval() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNatRefreshIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshIntervalVariable);
    }

    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfacePortHop")
    private @Nullable Output<Boolean> tunnelInterfacePortHop;

    /**
     * @return Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfacePortHop() {
        return Optional.ofNullable(this.tunnelInterfacePortHop);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfacePortHopVariable")
    private @Nullable Output<String> tunnelInterfacePortHopVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfacePortHopVariable() {
        return Optional.ofNullable(this.tunnelInterfacePortHopVariable);
    }

    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceRestrict")
    private @Nullable Output<Boolean> tunnelInterfaceRestrict;

    /**
     * @return Restrict this TLOC behavior
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceRestrict() {
        return Optional.ofNullable(this.tunnelInterfaceRestrict);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceRestrictVariable")
    private @Nullable Output<String> tunnelInterfaceRestrictVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceRestrictVariable() {
        return Optional.ofNullable(this.tunnelInterfaceRestrictVariable);
    }

    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMss")
    private @Nullable Output<Integer> tunnelInterfaceTunnelTcpMss;

    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceTunnelTcpMss() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMssVariable")
    private @Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceTunnelTcpMssVariable() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMssVariable);
    }

    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServer")
    private @Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer;

    /**
     * @return Put this wan interface in STUN mode only
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceVbondAsStunServer() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServer);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServerVariable")
    private @Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVbondAsStunServerVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServerVariable);
    }

    /**
     * Set interface preference for control connection to vManage &lt;0..8&gt;
     *   - Range: `0`-`8`
     *   - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreference")
    private @Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference;

    /**
     * @return Set interface preference for control connection to vManage &lt;0..8&gt;
     *   - Range: `0`-`8`
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceVmanageConnectionPreference() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreference);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    private @Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreferenceVariable);
    }

    /**
     * Set tunnel QoS mode
     *   - Choices: `spoke`, `hub`
     * 
     */
    @Import(name="tunnelQosMode")
    private @Nullable Output<String> tunnelQosMode;

    /**
     * @return Set tunnel QoS mode
     *   - Choices: `spoke`, `hub`
     * 
     */
    public Optional<Output<String>> tunnelQosMode() {
        return Optional.ofNullable(this.tunnelQosMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelQosModeVariable")
    private @Nullable Output<String> tunnelQosModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelQosModeVariable() {
        return Optional.ofNullable(this.tunnelQosModeVariable);
    }

    private TransportWanVpnInterfaceT1E1SerialFeatureArgs() {}

    private TransportWanVpnInterfaceT1E1SerialFeatureArgs(TransportWanVpnInterfaceT1E1SerialFeatureArgs $) {
        this.aclIpv4EgressFeatureId = $.aclIpv4EgressFeatureId;
        this.aclIpv4IngressFeatureId = $.aclIpv4IngressFeatureId;
        this.aclIpv6EgressFeatureId = $.aclIpv6EgressFeatureId;
        this.aclIpv6IngressFeatureId = $.aclIpv6IngressFeatureId;
        this.bandwidth = $.bandwidth;
        this.bandwidthDownstream = $.bandwidthDownstream;
        this.bandwidthDownstreamVariable = $.bandwidthDownstreamVariable;
        this.bandwidthVariable = $.bandwidthVariable;
        this.clockRate = $.clockRate;
        this.clockRateVariable = $.clockRateVariable;
        this.description = $.description;
        this.encapsulation = $.encapsulation;
        this.encapsulationVariable = $.encapsulationVariable;
        this.featureProfileId = $.featureProfileId;
        this.interfaceName = $.interfaceName;
        this.interfaceNameVariable = $.interfaceNameVariable;
        this.ipMtu = $.ipMtu;
        this.ipMtuVariable = $.ipMtuVariable;
        this.ipv4Address = $.ipv4Address;
        this.ipv4AddressVariable = $.ipv4AddressVariable;
        this.ipv4SubnetMask = $.ipv4SubnetMask;
        this.ipv4SubnetMaskVariable = $.ipv4SubnetMaskVariable;
        this.ipv6Address = $.ipv6Address;
        this.ipv6AddressVariable = $.ipv6AddressVariable;
        this.mtu = $.mtu;
        this.mtuVariable = $.mtuVariable;
        this.name = $.name;
        this.perTunnelQos = $.perTunnelQos;
        this.perTunnelQosAggregator = $.perTunnelQosAggregator;
        this.perTunnelQosAggregatorVariable = $.perTunnelQosAggregatorVariable;
        this.perTunnelQosVariable = $.perTunnelQosVariable;
        this.qosShapingRate = $.qosShapingRate;
        this.qosShapingRateVariable = $.qosShapingRateVariable;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.tcpMss = $.tcpMss;
        this.tcpMssVariable = $.tcpMssVariable;
        this.tlocExtension = $.tlocExtension;
        this.tlocExtensionVariable = $.tlocExtensionVariable;
        this.transportWanVpnFeatureId = $.transportWanVpnFeatureId;
        this.tunnelInterface = $.tunnelInterface;
        this.tunnelInterfaceAllowAll = $.tunnelInterfaceAllowAll;
        this.tunnelInterfaceAllowAllVariable = $.tunnelInterfaceAllowAllVariable;
        this.tunnelInterfaceAllowBfd = $.tunnelInterfaceAllowBfd;
        this.tunnelInterfaceAllowBfdVariable = $.tunnelInterfaceAllowBfdVariable;
        this.tunnelInterfaceAllowBgp = $.tunnelInterfaceAllowBgp;
        this.tunnelInterfaceAllowBgpVariable = $.tunnelInterfaceAllowBgpVariable;
        this.tunnelInterfaceAllowDhcp = $.tunnelInterfaceAllowDhcp;
        this.tunnelInterfaceAllowDhcpVariable = $.tunnelInterfaceAllowDhcpVariable;
        this.tunnelInterfaceAllowDns = $.tunnelInterfaceAllowDns;
        this.tunnelInterfaceAllowDnsVariable = $.tunnelInterfaceAllowDnsVariable;
        this.tunnelInterfaceAllowHttps = $.tunnelInterfaceAllowHttps;
        this.tunnelInterfaceAllowHttpsVariable = $.tunnelInterfaceAllowHttpsVariable;
        this.tunnelInterfaceAllowIcmp = $.tunnelInterfaceAllowIcmp;
        this.tunnelInterfaceAllowIcmpVariable = $.tunnelInterfaceAllowIcmpVariable;
        this.tunnelInterfaceAllowNetconf = $.tunnelInterfaceAllowNetconf;
        this.tunnelInterfaceAllowNetconfVariable = $.tunnelInterfaceAllowNetconfVariable;
        this.tunnelInterfaceAllowNtp = $.tunnelInterfaceAllowNtp;
        this.tunnelInterfaceAllowNtpVariable = $.tunnelInterfaceAllowNtpVariable;
        this.tunnelInterfaceAllowOspf = $.tunnelInterfaceAllowOspf;
        this.tunnelInterfaceAllowOspfVariable = $.tunnelInterfaceAllowOspfVariable;
        this.tunnelInterfaceAllowSnmp = $.tunnelInterfaceAllowSnmp;
        this.tunnelInterfaceAllowSnmpVariable = $.tunnelInterfaceAllowSnmpVariable;
        this.tunnelInterfaceAllowSsh = $.tunnelInterfaceAllowSsh;
        this.tunnelInterfaceAllowSshVariable = $.tunnelInterfaceAllowSshVariable;
        this.tunnelInterfaceAllowStun = $.tunnelInterfaceAllowStun;
        this.tunnelInterfaceAllowStunVariable = $.tunnelInterfaceAllowStunVariable;
        this.tunnelInterfaceBindLoopbackTunnel = $.tunnelInterfaceBindLoopbackTunnel;
        this.tunnelInterfaceBindLoopbackTunnelVariable = $.tunnelInterfaceBindLoopbackTunnelVariable;
        this.tunnelInterfaceBorder = $.tunnelInterfaceBorder;
        this.tunnelInterfaceBorderVariable = $.tunnelInterfaceBorderVariable;
        this.tunnelInterfaceCarrier = $.tunnelInterfaceCarrier;
        this.tunnelInterfaceCarrierVariable = $.tunnelInterfaceCarrierVariable;
        this.tunnelInterfaceClearDontFragment = $.tunnelInterfaceClearDontFragment;
        this.tunnelInterfaceClearDontFragmentVariable = $.tunnelInterfaceClearDontFragmentVariable;
        this.tunnelInterfaceClearNetworkBroadcast = $.tunnelInterfaceClearNetworkBroadcast;
        this.tunnelInterfaceClearNetworkBroadcastVariable = $.tunnelInterfaceClearNetworkBroadcastVariable;
        this.tunnelInterfaceColor = $.tunnelInterfaceColor;
        this.tunnelInterfaceColorVariable = $.tunnelInterfaceColorVariable;
        this.tunnelInterfaceEncapsulations = $.tunnelInterfaceEncapsulations;
        this.tunnelInterfaceExcludeControllerGroupListVariable = $.tunnelInterfaceExcludeControllerGroupListVariable;
        this.tunnelInterfaceExcludeControllerGroupLists = $.tunnelInterfaceExcludeControllerGroupLists;
        this.tunnelInterfaceGroups = $.tunnelInterfaceGroups;
        this.tunnelInterfaceGroupsVariable = $.tunnelInterfaceGroupsVariable;
        this.tunnelInterfaceHelloInterval = $.tunnelInterfaceHelloInterval;
        this.tunnelInterfaceHelloIntervalVariable = $.tunnelInterfaceHelloIntervalVariable;
        this.tunnelInterfaceHelloTolerance = $.tunnelInterfaceHelloTolerance;
        this.tunnelInterfaceHelloToleranceVariable = $.tunnelInterfaceHelloToleranceVariable;
        this.tunnelInterfaceLastResortCircuit = $.tunnelInterfaceLastResortCircuit;
        this.tunnelInterfaceLastResortCircuitVariable = $.tunnelInterfaceLastResortCircuitVariable;
        this.tunnelInterfaceLowBandwidthLink = $.tunnelInterfaceLowBandwidthLink;
        this.tunnelInterfaceLowBandwidthLinkVariable = $.tunnelInterfaceLowBandwidthLinkVariable;
        this.tunnelInterfaceMaxControlConnections = $.tunnelInterfaceMaxControlConnections;
        this.tunnelInterfaceMaxControlConnectionsVariable = $.tunnelInterfaceMaxControlConnectionsVariable;
        this.tunnelInterfaceNatRefreshInterval = $.tunnelInterfaceNatRefreshInterval;
        this.tunnelInterfaceNatRefreshIntervalVariable = $.tunnelInterfaceNatRefreshIntervalVariable;
        this.tunnelInterfacePortHop = $.tunnelInterfacePortHop;
        this.tunnelInterfacePortHopVariable = $.tunnelInterfacePortHopVariable;
        this.tunnelInterfaceRestrict = $.tunnelInterfaceRestrict;
        this.tunnelInterfaceRestrictVariable = $.tunnelInterfaceRestrictVariable;
        this.tunnelInterfaceTunnelTcpMss = $.tunnelInterfaceTunnelTcpMss;
        this.tunnelInterfaceTunnelTcpMssVariable = $.tunnelInterfaceTunnelTcpMssVariable;
        this.tunnelInterfaceVbondAsStunServer = $.tunnelInterfaceVbondAsStunServer;
        this.tunnelInterfaceVbondAsStunServerVariable = $.tunnelInterfaceVbondAsStunServerVariable;
        this.tunnelInterfaceVmanageConnectionPreference = $.tunnelInterfaceVmanageConnectionPreference;
        this.tunnelInterfaceVmanageConnectionPreferenceVariable = $.tunnelInterfaceVmanageConnectionPreferenceVariable;
        this.tunnelQosMode = $.tunnelQosMode;
        this.tunnelQosModeVariable = $.tunnelQosModeVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransportWanVpnInterfaceT1E1SerialFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransportWanVpnInterfaceT1E1SerialFeatureArgs $;

        public Builder() {
            $ = new TransportWanVpnInterfaceT1E1SerialFeatureArgs();
        }

        public Builder(TransportWanVpnInterfaceT1E1SerialFeatureArgs defaults) {
            $ = new TransportWanVpnInterfaceT1E1SerialFeatureArgs(Objects.requireNonNull(defaults));
        }

        public Builder aclIpv4EgressFeatureId(@Nullable Output<String> aclIpv4EgressFeatureId) {
            $.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            return this;
        }

        public Builder aclIpv4EgressFeatureId(String aclIpv4EgressFeatureId) {
            return aclIpv4EgressFeatureId(Output.of(aclIpv4EgressFeatureId));
        }

        public Builder aclIpv4IngressFeatureId(@Nullable Output<String> aclIpv4IngressFeatureId) {
            $.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            return this;
        }

        public Builder aclIpv4IngressFeatureId(String aclIpv4IngressFeatureId) {
            return aclIpv4IngressFeatureId(Output.of(aclIpv4IngressFeatureId));
        }

        public Builder aclIpv6EgressFeatureId(@Nullable Output<String> aclIpv6EgressFeatureId) {
            $.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            return this;
        }

        public Builder aclIpv6EgressFeatureId(String aclIpv6EgressFeatureId) {
            return aclIpv6EgressFeatureId(Output.of(aclIpv6EgressFeatureId));
        }

        public Builder aclIpv6IngressFeatureId(@Nullable Output<String> aclIpv6IngressFeatureId) {
            $.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            return this;
        }

        public Builder aclIpv6IngressFeatureId(String aclIpv6IngressFeatureId) {
            return aclIpv6IngressFeatureId(Output.of(aclIpv6IngressFeatureId));
        }

        /**
         * @param bandwidth Interface bandwidth capacity, in kbps
         *   - Range: `1`-`200000000`
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Interface bandwidth capacity, in kbps
         *   - Range: `1`-`200000000`
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param bandwidthDownstream Interface downstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstream(@Nullable Output<Integer> bandwidthDownstream) {
            $.bandwidthDownstream = bandwidthDownstream;
            return this;
        }

        /**
         * @param bandwidthDownstream Interface downstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            return bandwidthDownstream(Output.of(bandwidthDownstream));
        }

        /**
         * @param bandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstreamVariable(@Nullable Output<String> bandwidthDownstreamVariable) {
            $.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }

        /**
         * @param bandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            return bandwidthDownstreamVariable(Output.of(bandwidthDownstreamVariable));
        }

        /**
         * @param bandwidthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthVariable(@Nullable Output<String> bandwidthVariable) {
            $.bandwidthVariable = bandwidthVariable;
            return this;
        }

        /**
         * @param bandwidthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthVariable(String bandwidthVariable) {
            return bandwidthVariable(Output.of(bandwidthVariable));
        }

        /**
         * @param clockRate Set preference for interface Clock speed
         *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
         * 
         * @return builder
         * 
         */
        public Builder clockRate(@Nullable Output<String> clockRate) {
            $.clockRate = clockRate;
            return this;
        }

        /**
         * @param clockRate Set preference for interface Clock speed
         *   - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
         * 
         * @return builder
         * 
         */
        public Builder clockRate(String clockRate) {
            return clockRate(Output.of(clockRate));
        }

        /**
         * @param clockRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clockRateVariable(@Nullable Output<String> clockRateVariable) {
            $.clockRateVariable = clockRateVariable;
            return this;
        }

        /**
         * @param clockRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clockRateVariable(String clockRateVariable) {
            return clockRateVariable(Output.of(clockRateVariable));
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param encapsulation Configure Encapsulation for interface
         *   - Choices: `hdlc`, `ppp`, `frame-relay`
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(@Nullable Output<String> encapsulation) {
            $.encapsulation = encapsulation;
            return this;
        }

        /**
         * @param encapsulation Configure Encapsulation for interface
         *   - Choices: `hdlc`, `ppp`, `frame-relay`
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(String encapsulation) {
            return encapsulation(Output.of(encapsulation));
        }

        /**
         * @param encapsulationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapsulationVariable(@Nullable Output<String> encapsulationVariable) {
            $.encapsulationVariable = encapsulationVariable;
            return this;
        }

        /**
         * @param encapsulationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapsulationVariable(String encapsulationVariable) {
            return encapsulationVariable(Output.of(encapsulationVariable));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param interfaceName Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(@Nullable Output<String> interfaceNameVariable) {
            $.interfaceNameVariable = interfaceNameVariable;
            return this;
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            return interfaceNameVariable(Output.of(interfaceNameVariable));
        }

        /**
         * @param ipMtu Set ip mtu
         *   - Range: `576`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(@Nullable Output<Integer> ipMtu) {
            $.ipMtu = ipMtu;
            return this;
        }

        /**
         * @param ipMtu Set ip mtu
         *   - Range: `576`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(Integer ipMtu) {
            return ipMtu(Output.of(ipMtu));
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(@Nullable Output<String> ipMtuVariable) {
            $.ipMtuVariable = ipMtuVariable;
            return this;
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(String ipMtuVariable) {
            return ipMtuVariable(Output.of(ipMtuVariable));
        }

        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(@Nullable Output<String> ipv4AddressVariable) {
            $.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            return ipv4AddressVariable(Output.of(ipv4AddressVariable));
        }

        /**
         * @param ipv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMask(@Nullable Output<String> ipv4SubnetMask) {
            $.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }

        /**
         * @param ipv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            return ipv4SubnetMask(Output.of(ipv4SubnetMask));
        }

        /**
         * @param ipv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMaskVariable(@Nullable Output<String> ipv4SubnetMaskVariable) {
            $.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }

        /**
         * @param ipv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            return ipv4SubnetMaskVariable(Output.of(ipv4SubnetMaskVariable));
        }

        /**
         * @param ipv6Address Assign IPv6 address
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(@Nullable Output<String> ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * @param ipv6Address Assign IPv6 address
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            return ipv6Address(Output.of(ipv6Address));
        }

        /**
         * @param ipv6AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressVariable(@Nullable Output<String> ipv6AddressVariable) {
            $.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }

        /**
         * @param ipv6AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            return ipv6AddressVariable(Output.of(ipv6AddressVariable));
        }

        /**
         * @param mtu Interface MTU &lt;68...2000&gt;, in bytes
         *   - Range: `576`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Interface MTU &lt;68...2000&gt;, in bytes
         *   - Range: `576`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param mtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mtuVariable(@Nullable Output<String> mtuVariable) {
            $.mtuVariable = mtuVariable;
            return this;
        }

        /**
         * @param mtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mtuVariable(String mtuVariable) {
            return mtuVariable(Output.of(mtuVariable));
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param perTunnelQos Per-tunnel Qos
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQos(@Nullable Output<Boolean> perTunnelQos) {
            $.perTunnelQos = perTunnelQos;
            return this;
        }

        /**
         * @param perTunnelQos Per-tunnel Qos
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQos(Boolean perTunnelQos) {
            return perTunnelQos(Output.of(perTunnelQos));
        }

        /**
         * @param perTunnelQosAggregator Per-tunnel QoS Aggregator
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregator(@Nullable Output<Boolean> perTunnelQosAggregator) {
            $.perTunnelQosAggregator = perTunnelQosAggregator;
            return this;
        }

        /**
         * @param perTunnelQosAggregator Per-tunnel QoS Aggregator
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregator(Boolean perTunnelQosAggregator) {
            return perTunnelQosAggregator(Output.of(perTunnelQosAggregator));
        }

        /**
         * @param perTunnelQosAggregatorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregatorVariable(@Nullable Output<String> perTunnelQosAggregatorVariable) {
            $.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            return this;
        }

        /**
         * @param perTunnelQosAggregatorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregatorVariable(String perTunnelQosAggregatorVariable) {
            return perTunnelQosAggregatorVariable(Output.of(perTunnelQosAggregatorVariable));
        }

        /**
         * @param perTunnelQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosVariable(@Nullable Output<String> perTunnelQosVariable) {
            $.perTunnelQosVariable = perTunnelQosVariable;
            return this;
        }

        /**
         * @param perTunnelQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosVariable(String perTunnelQosVariable) {
            return perTunnelQosVariable(Output.of(perTunnelQosVariable));
        }

        /**
         * @param qosShapingRate 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosShapingRate(@Nullable Output<Integer> qosShapingRate) {
            $.qosShapingRate = qosShapingRate;
            return this;
        }

        /**
         * @param qosShapingRate 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosShapingRate(Integer qosShapingRate) {
            return qosShapingRate(Output.of(qosShapingRate));
        }

        /**
         * @param qosShapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosShapingRateVariable(@Nullable Output<String> qosShapingRateVariable) {
            $.qosShapingRateVariable = qosShapingRateVariable;
            return this;
        }

        /**
         * @param qosShapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosShapingRateVariable(String qosShapingRateVariable) {
            return qosShapingRateVariable(Output.of(qosShapingRateVariable));
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(@Nullable Output<Integer> tcpMss) {
            $.tcpMss = tcpMss;
            return this;
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(Integer tcpMss) {
            return tcpMss(Output.of(tcpMss));
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(@Nullable Output<String> tcpMssVariable) {
            $.tcpMssVariable = tcpMssVariable;
            return this;
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(String tcpMssVariable) {
            return tcpMssVariable(Output.of(tcpMssVariable));
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(@Nullable Output<String> tlocExtension) {
            $.tlocExtension = tlocExtension;
            return this;
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(String tlocExtension) {
            return tlocExtension(Output.of(tlocExtension));
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(@Nullable Output<String> tlocExtensionVariable) {
            $.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            return tlocExtensionVariable(Output.of(tlocExtensionVariable));
        }

        /**
         * @param transportWanVpnFeatureId Transport WAN VPN Feature ID
         * 
         * @return builder
         * 
         */
        public Builder transportWanVpnFeatureId(Output<String> transportWanVpnFeatureId) {
            $.transportWanVpnFeatureId = transportWanVpnFeatureId;
            return this;
        }

        /**
         * @param transportWanVpnFeatureId Transport WAN VPN Feature ID
         * 
         * @return builder
         * 
         */
        public Builder transportWanVpnFeatureId(String transportWanVpnFeatureId) {
            return transportWanVpnFeatureId(Output.of(transportWanVpnFeatureId));
        }

        /**
         * @param tunnelInterface Tunnel Interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterface(@Nullable Output<Boolean> tunnelInterface) {
            $.tunnelInterface = tunnelInterface;
            return this;
        }

        /**
         * @param tunnelInterface Tunnel Interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterface(Boolean tunnelInterface) {
            return tunnelInterface(Output.of(tunnelInterface));
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(@Nullable Output<Boolean> tunnelInterfaceAllowAll) {
            $.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            return tunnelInterfaceAllowAll(Output.of(tunnelInterfaceAllowAll));
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(@Nullable Output<String> tunnelInterfaceAllowAllVariable) {
            $.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            return tunnelInterfaceAllowAllVariable(Output.of(tunnelInterfaceAllowAllVariable));
        }

        /**
         * @param tunnelInterfaceAllowBfd Allow/Deny BFD
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBfd(@Nullable Output<Boolean> tunnelInterfaceAllowBfd) {
            $.tunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBfd Allow/Deny BFD
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBfd(Boolean tunnelInterfaceAllowBfd) {
            return tunnelInterfaceAllowBfd(Output.of(tunnelInterfaceAllowBfd));
        }

        /**
         * @param tunnelInterfaceAllowBfdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBfdVariable(@Nullable Output<String> tunnelInterfaceAllowBfdVariable) {
            $.tunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBfdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBfdVariable(String tunnelInterfaceAllowBfdVariable) {
            return tunnelInterfaceAllowBfdVariable(Output.of(tunnelInterfaceAllowBfdVariable));
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(@Nullable Output<Boolean> tunnelInterfaceAllowBgp) {
            $.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            return tunnelInterfaceAllowBgp(Output.of(tunnelInterfaceAllowBgp));
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(@Nullable Output<String> tunnelInterfaceAllowBgpVariable) {
            $.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            return tunnelInterfaceAllowBgpVariable(Output.of(tunnelInterfaceAllowBgpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(@Nullable Output<Boolean> tunnelInterfaceAllowDhcp) {
            $.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            return tunnelInterfaceAllowDhcp(Output.of(tunnelInterfaceAllowDhcp));
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(@Nullable Output<String> tunnelInterfaceAllowDhcpVariable) {
            $.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            return tunnelInterfaceAllowDhcpVariable(Output.of(tunnelInterfaceAllowDhcpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(@Nullable Output<Boolean> tunnelInterfaceAllowDns) {
            $.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            return tunnelInterfaceAllowDns(Output.of(tunnelInterfaceAllowDns));
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(@Nullable Output<String> tunnelInterfaceAllowDnsVariable) {
            $.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            return tunnelInterfaceAllowDnsVariable(Output.of(tunnelInterfaceAllowDnsVariable));
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(@Nullable Output<Boolean> tunnelInterfaceAllowHttps) {
            $.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            return tunnelInterfaceAllowHttps(Output.of(tunnelInterfaceAllowHttps));
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(@Nullable Output<String> tunnelInterfaceAllowHttpsVariable) {
            $.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            return tunnelInterfaceAllowHttpsVariable(Output.of(tunnelInterfaceAllowHttpsVariable));
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(@Nullable Output<Boolean> tunnelInterfaceAllowIcmp) {
            $.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            return tunnelInterfaceAllowIcmp(Output.of(tunnelInterfaceAllowIcmp));
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(@Nullable Output<String> tunnelInterfaceAllowIcmpVariable) {
            $.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            return tunnelInterfaceAllowIcmpVariable(Output.of(tunnelInterfaceAllowIcmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(@Nullable Output<Boolean> tunnelInterfaceAllowNetconf) {
            $.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            return tunnelInterfaceAllowNetconf(Output.of(tunnelInterfaceAllowNetconf));
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(@Nullable Output<String> tunnelInterfaceAllowNetconfVariable) {
            $.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            return tunnelInterfaceAllowNetconfVariable(Output.of(tunnelInterfaceAllowNetconfVariable));
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(@Nullable Output<Boolean> tunnelInterfaceAllowNtp) {
            $.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            return tunnelInterfaceAllowNtp(Output.of(tunnelInterfaceAllowNtp));
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(@Nullable Output<String> tunnelInterfaceAllowNtpVariable) {
            $.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            return tunnelInterfaceAllowNtpVariable(Output.of(tunnelInterfaceAllowNtpVariable));
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(@Nullable Output<Boolean> tunnelInterfaceAllowOspf) {
            $.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            return tunnelInterfaceAllowOspf(Output.of(tunnelInterfaceAllowOspf));
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(@Nullable Output<String> tunnelInterfaceAllowOspfVariable) {
            $.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            return tunnelInterfaceAllowOspfVariable(Output.of(tunnelInterfaceAllowOspfVariable));
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(@Nullable Output<Boolean> tunnelInterfaceAllowSnmp) {
            $.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            return tunnelInterfaceAllowSnmp(Output.of(tunnelInterfaceAllowSnmp));
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(@Nullable Output<String> tunnelInterfaceAllowSnmpVariable) {
            $.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            return tunnelInterfaceAllowSnmpVariable(Output.of(tunnelInterfaceAllowSnmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(@Nullable Output<Boolean> tunnelInterfaceAllowSsh) {
            $.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            return tunnelInterfaceAllowSsh(Output.of(tunnelInterfaceAllowSsh));
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(@Nullable Output<String> tunnelInterfaceAllowSshVariable) {
            $.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            return tunnelInterfaceAllowSshVariable(Output.of(tunnelInterfaceAllowSshVariable));
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(@Nullable Output<Boolean> tunnelInterfaceAllowStun) {
            $.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            return tunnelInterfaceAllowStun(Output.of(tunnelInterfaceAllowStun));
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(@Nullable Output<String> tunnelInterfaceAllowStunVariable) {
            $.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            return tunnelInterfaceAllowStunVariable(Output.of(tunnelInterfaceAllowStunVariable));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnel) {
            $.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            return tunnelInterfaceBindLoopbackTunnel(Output.of(tunnelInterfaceBindLoopbackTunnel));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable) {
            $.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            return tunnelInterfaceBindLoopbackTunnelVariable(Output.of(tunnelInterfaceBindLoopbackTunnelVariable));
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(@Nullable Output<Boolean> tunnelInterfaceBorder) {
            $.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            return tunnelInterfaceBorder(Output.of(tunnelInterfaceBorder));
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(@Nullable Output<String> tunnelInterfaceBorderVariable) {
            $.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            return tunnelInterfaceBorderVariable(Output.of(tunnelInterfaceBorderVariable));
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(@Nullable Output<String> tunnelInterfaceCarrier) {
            $.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            return tunnelInterfaceCarrier(Output.of(tunnelInterfaceCarrier));
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(@Nullable Output<String> tunnelInterfaceCarrierVariable) {
            $.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            return tunnelInterfaceCarrierVariable(Output.of(tunnelInterfaceCarrierVariable));
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(@Nullable Output<Boolean> tunnelInterfaceClearDontFragment) {
            $.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            return tunnelInterfaceClearDontFragment(Output.of(tunnelInterfaceClearDontFragment));
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(@Nullable Output<String> tunnelInterfaceClearDontFragmentVariable) {
            $.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            return tunnelInterfaceClearDontFragmentVariable(Output.of(tunnelInterfaceClearDontFragmentVariable));
        }

        /**
         * @param tunnelInterfaceClearNetworkBroadcast Accept and respond to network-prefix-directed broadcasts)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearNetworkBroadcast(@Nullable Output<Boolean> tunnelInterfaceClearNetworkBroadcast) {
            $.tunnelInterfaceClearNetworkBroadcast = tunnelInterfaceClearNetworkBroadcast;
            return this;
        }

        /**
         * @param tunnelInterfaceClearNetworkBroadcast Accept and respond to network-prefix-directed broadcasts)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearNetworkBroadcast(Boolean tunnelInterfaceClearNetworkBroadcast) {
            return tunnelInterfaceClearNetworkBroadcast(Output.of(tunnelInterfaceClearNetworkBroadcast));
        }

        /**
         * @param tunnelInterfaceClearNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearNetworkBroadcastVariable(@Nullable Output<String> tunnelInterfaceClearNetworkBroadcastVariable) {
            $.tunnelInterfaceClearNetworkBroadcastVariable = tunnelInterfaceClearNetworkBroadcastVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceClearNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearNetworkBroadcastVariable(String tunnelInterfaceClearNetworkBroadcastVariable) {
            return tunnelInterfaceClearNetworkBroadcastVariable(Output.of(tunnelInterfaceClearNetworkBroadcastVariable));
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(@Nullable Output<String> tunnelInterfaceColor) {
            $.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            return tunnelInterfaceColor(Output.of(tunnelInterfaceColor));
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(@Nullable Output<String> tunnelInterfaceColorVariable) {
            $.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            return tunnelInterfaceColorVariable(Output.of(tunnelInterfaceColorVariable));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(@Nullable Output<List<TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations) {
            $.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(List<TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs> tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(Output.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(@Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable) {
            $.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            return tunnelInterfaceExcludeControllerGroupListVariable(Output.of(tunnelInterfaceExcludeControllerGroupListVariable));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(@Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists) {
            $.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(Output.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(@Nullable Output<Integer> tunnelInterfaceGroups) {
            $.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         *   - Range: `1`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(Integer tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(Output.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(@Nullable Output<String> tunnelInterfaceGroupsVariable) {
            $.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            return tunnelInterfaceGroupsVariable(Output.of(tunnelInterfaceGroupsVariable));
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds
         *   - Range: `100`-`600000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(@Nullable Output<Integer> tunnelInterfaceHelloInterval) {
            $.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds
         *   - Range: `100`-`600000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            return tunnelInterfaceHelloInterval(Output.of(tunnelInterfaceHelloInterval));
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(@Nullable Output<String> tunnelInterfaceHelloIntervalVariable) {
            $.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            return tunnelInterfaceHelloIntervalVariable(Output.of(tunnelInterfaceHelloIntervalVariable));
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds
         *   - Range: `12`-`6000`
         *   - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(@Nullable Output<Integer> tunnelInterfaceHelloTolerance) {
            $.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds
         *   - Range: `12`-`6000`
         *   - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            return tunnelInterfaceHelloTolerance(Output.of(tunnelInterfaceHelloTolerance));
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(@Nullable Output<String> tunnelInterfaceHelloToleranceVariable) {
            $.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            return tunnelInterfaceHelloToleranceVariable(Output.of(tunnelInterfaceHelloToleranceVariable));
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(@Nullable Output<Boolean> tunnelInterfaceLastResortCircuit) {
            $.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            return tunnelInterfaceLastResortCircuit(Output.of(tunnelInterfaceLastResortCircuit));
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(@Nullable Output<String> tunnelInterfaceLastResortCircuitVariable) {
            $.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            return tunnelInterfaceLastResortCircuitVariable(Output.of(tunnelInterfaceLastResortCircuitVariable));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(@Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink) {
            $.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            return tunnelInterfaceLowBandwidthLink(Output.of(tunnelInterfaceLowBandwidthLink));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(@Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable) {
            $.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            return tunnelInterfaceLowBandwidthLinkVariable(Output.of(tunnelInterfaceLowBandwidthLinkVariable));
        }

        /**
         * @param tunnelInterfaceMaxControlConnections Set the maximum number of control connections for this TLOC
         *   - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnections(@Nullable Output<Integer> tunnelInterfaceMaxControlConnections) {
            $.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }

        /**
         * @param tunnelInterfaceMaxControlConnections Set the maximum number of control connections for this TLOC
         *   - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            return tunnelInterfaceMaxControlConnections(Output.of(tunnelInterfaceMaxControlConnections));
        }

        /**
         * @param tunnelInterfaceMaxControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnectionsVariable(@Nullable Output<String> tunnelInterfaceMaxControlConnectionsVariable) {
            $.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceMaxControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            return tunnelInterfaceMaxControlConnectionsVariable(Output.of(tunnelInterfaceMaxControlConnectionsVariable));
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds
         *   - Range: `1`-`60`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(@Nullable Output<Integer> tunnelInterfaceNatRefreshInterval) {
            $.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds
         *   - Range: `1`-`60`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            return tunnelInterfaceNatRefreshInterval(Output.of(tunnelInterfaceNatRefreshInterval));
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(@Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable) {
            $.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            return tunnelInterfaceNatRefreshIntervalVariable(Output.of(tunnelInterfaceNatRefreshIntervalVariable));
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(@Nullable Output<Boolean> tunnelInterfacePortHop) {
            $.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            return tunnelInterfacePortHop(Output.of(tunnelInterfacePortHop));
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(@Nullable Output<String> tunnelInterfacePortHopVariable) {
            $.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            return tunnelInterfacePortHopVariable(Output.of(tunnelInterfacePortHopVariable));
        }

        /**
         * @param tunnelInterfaceRestrict Restrict this TLOC behavior
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrict(@Nullable Output<Boolean> tunnelInterfaceRestrict) {
            $.tunnelInterfaceRestrict = tunnelInterfaceRestrict;
            return this;
        }

        /**
         * @param tunnelInterfaceRestrict Restrict this TLOC behavior
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrict(Boolean tunnelInterfaceRestrict) {
            return tunnelInterfaceRestrict(Output.of(tunnelInterfaceRestrict));
        }

        /**
         * @param tunnelInterfaceRestrictVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrictVariable(@Nullable Output<String> tunnelInterfaceRestrictVariable) {
            $.tunnelInterfaceRestrictVariable = tunnelInterfaceRestrictVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceRestrictVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrictVariable(String tunnelInterfaceRestrictVariable) {
            return tunnelInterfaceRestrictVariable(Output.of(tunnelInterfaceRestrictVariable));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(@Nullable Output<Integer> tunnelInterfaceTunnelTcpMss) {
            $.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            return tunnelInterfaceTunnelTcpMss(Output.of(tunnelInterfaceTunnelTcpMss));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(@Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable) {
            $.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            return tunnelInterfaceTunnelTcpMssVariable(Output.of(tunnelInterfaceTunnelTcpMssVariable));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(@Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer) {
            $.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            return tunnelInterfaceVbondAsStunServer(Output.of(tunnelInterfaceVbondAsStunServer));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(@Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable) {
            $.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            return tunnelInterfaceVbondAsStunServerVariable(Output.of(tunnelInterfaceVbondAsStunServerVariable));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt;
         *   - Range: `0`-`8`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(@Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference) {
            $.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt;
         *   - Range: `0`-`8`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            return tunnelInterfaceVmanageConnectionPreference(Output.of(tunnelInterfaceVmanageConnectionPreference));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(@Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable) {
            $.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            return tunnelInterfaceVmanageConnectionPreferenceVariable(Output.of(tunnelInterfaceVmanageConnectionPreferenceVariable));
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode
         *   - Choices: `spoke`, `hub`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(@Nullable Output<String> tunnelQosMode) {
            $.tunnelQosMode = tunnelQosMode;
            return this;
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode
         *   - Choices: `spoke`, `hub`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(String tunnelQosMode) {
            return tunnelQosMode(Output.of(tunnelQosMode));
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(@Nullable Output<String> tunnelQosModeVariable) {
            $.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            return tunnelQosModeVariable(Output.of(tunnelQosModeVariable));
        }

        public TransportWanVpnInterfaceT1E1SerialFeatureArgs build() {
            if ($.featureProfileId == null) {
                throw new MissingRequiredPropertyException("TransportWanVpnInterfaceT1E1SerialFeatureArgs", "featureProfileId");
            }
            if ($.transportWanVpnFeatureId == null) {
                throw new MissingRequiredPropertyException("TransportWanVpnInterfaceT1E1SerialFeatureArgs", "transportWanVpnFeatureId");
            }
            return $;
        }
    }

}
