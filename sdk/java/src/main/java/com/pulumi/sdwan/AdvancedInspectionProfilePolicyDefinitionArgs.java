// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdvancedInspectionProfilePolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdvancedInspectionProfilePolicyDefinitionArgs Empty = new AdvancedInspectionProfilePolicyDefinitionArgs();

    /**
     * Advanced malware protection ID
     * 
     */
    @Import(name="advancedMalwareProtectionId")
    private @Nullable Output<String> advancedMalwareProtectionId;

    /**
     * @return Advanced malware protection ID
     * 
     */
    public Optional<Output<String>> advancedMalwareProtectionId() {
        return Optional.ofNullable(this.advancedMalwareProtectionId);
    }

    /**
     * Advanced malware protection version
     * 
     */
    @Import(name="advancedMalwareProtectionVersion")
    private @Nullable Output<Integer> advancedMalwareProtectionVersion;

    /**
     * @return Advanced malware protection version
     * 
     */
    public Optional<Output<Integer>> advancedMalwareProtectionVersion() {
        return Optional.ofNullable(this.advancedMalwareProtectionVersion);
    }

    /**
     * The description of the policy definition.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the policy definition.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Intrusion prevention ID (unified mode)
     * 
     */
    @Import(name="intrusionPreventionId")
    private @Nullable Output<String> intrusionPreventionId;

    /**
     * @return Intrusion prevention ID (unified mode)
     * 
     */
    public Optional<Output<String>> intrusionPreventionId() {
        return Optional.ofNullable(this.intrusionPreventionId);
    }

    /**
     * Intrusion prevention version
     * 
     */
    @Import(name="intrusionPreventionVersion")
    private @Nullable Output<Integer> intrusionPreventionVersion;

    /**
     * @return Intrusion prevention version
     * 
     */
    public Optional<Output<Integer>> intrusionPreventionVersion() {
        return Optional.ofNullable(this.intrusionPreventionVersion);
    }

    /**
     * The name of the policy definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * TLS Action
     *   - Choices: `decrypt`, `skipDecrypt`, `doNotDecrypt`
     * 
     */
    @Import(name="tlsAction")
    private @Nullable Output<String> tlsAction;

    /**
     * @return TLS Action
     *   - Choices: `decrypt`, `skipDecrypt`, `doNotDecrypt`
     * 
     */
    public Optional<Output<String>> tlsAction() {
        return Optional.ofNullable(this.tlsAction);
    }

    /**
     * TLS/SSL decryption ID
     * 
     */
    @Import(name="tlsSslDecryptionId")
    private @Nullable Output<String> tlsSslDecryptionId;

    /**
     * @return TLS/SSL decryption ID
     * 
     */
    public Optional<Output<String>> tlsSslDecryptionId() {
        return Optional.ofNullable(this.tlsSslDecryptionId);
    }

    /**
     * TLS/SSL decryption version
     * 
     */
    @Import(name="tlsSslDecryptionVersion")
    private @Nullable Output<Integer> tlsSslDecryptionVersion;

    /**
     * @return TLS/SSL decryption version
     * 
     */
    public Optional<Output<Integer>> tlsSslDecryptionVersion() {
        return Optional.ofNullable(this.tlsSslDecryptionVersion);
    }

    /**
     * URL filtering ID (unified mode)
     * 
     */
    @Import(name="urlFilteringId")
    private @Nullable Output<String> urlFilteringId;

    /**
     * @return URL filtering ID (unified mode)
     * 
     */
    public Optional<Output<String>> urlFilteringId() {
        return Optional.ofNullable(this.urlFilteringId);
    }

    /**
     * URL filtering version
     * 
     */
    @Import(name="urlFilteringVersion")
    private @Nullable Output<Integer> urlFilteringVersion;

    /**
     * @return URL filtering version
     * 
     */
    public Optional<Output<Integer>> urlFilteringVersion() {
        return Optional.ofNullable(this.urlFilteringVersion);
    }

    private AdvancedInspectionProfilePolicyDefinitionArgs() {}

    private AdvancedInspectionProfilePolicyDefinitionArgs(AdvancedInspectionProfilePolicyDefinitionArgs $) {
        this.advancedMalwareProtectionId = $.advancedMalwareProtectionId;
        this.advancedMalwareProtectionVersion = $.advancedMalwareProtectionVersion;
        this.description = $.description;
        this.intrusionPreventionId = $.intrusionPreventionId;
        this.intrusionPreventionVersion = $.intrusionPreventionVersion;
        this.name = $.name;
        this.tlsAction = $.tlsAction;
        this.tlsSslDecryptionId = $.tlsSslDecryptionId;
        this.tlsSslDecryptionVersion = $.tlsSslDecryptionVersion;
        this.urlFilteringId = $.urlFilteringId;
        this.urlFilteringVersion = $.urlFilteringVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedInspectionProfilePolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedInspectionProfilePolicyDefinitionArgs $;

        public Builder() {
            $ = new AdvancedInspectionProfilePolicyDefinitionArgs();
        }

        public Builder(AdvancedInspectionProfilePolicyDefinitionArgs defaults) {
            $ = new AdvancedInspectionProfilePolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedMalwareProtectionId Advanced malware protection ID
         * 
         * @return builder
         * 
         */
        public Builder advancedMalwareProtectionId(@Nullable Output<String> advancedMalwareProtectionId) {
            $.advancedMalwareProtectionId = advancedMalwareProtectionId;
            return this;
        }

        /**
         * @param advancedMalwareProtectionId Advanced malware protection ID
         * 
         * @return builder
         * 
         */
        public Builder advancedMalwareProtectionId(String advancedMalwareProtectionId) {
            return advancedMalwareProtectionId(Output.of(advancedMalwareProtectionId));
        }

        /**
         * @param advancedMalwareProtectionVersion Advanced malware protection version
         * 
         * @return builder
         * 
         */
        public Builder advancedMalwareProtectionVersion(@Nullable Output<Integer> advancedMalwareProtectionVersion) {
            $.advancedMalwareProtectionVersion = advancedMalwareProtectionVersion;
            return this;
        }

        /**
         * @param advancedMalwareProtectionVersion Advanced malware protection version
         * 
         * @return builder
         * 
         */
        public Builder advancedMalwareProtectionVersion(Integer advancedMalwareProtectionVersion) {
            return advancedMalwareProtectionVersion(Output.of(advancedMalwareProtectionVersion));
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param intrusionPreventionId Intrusion prevention ID (unified mode)
         * 
         * @return builder
         * 
         */
        public Builder intrusionPreventionId(@Nullable Output<String> intrusionPreventionId) {
            $.intrusionPreventionId = intrusionPreventionId;
            return this;
        }

        /**
         * @param intrusionPreventionId Intrusion prevention ID (unified mode)
         * 
         * @return builder
         * 
         */
        public Builder intrusionPreventionId(String intrusionPreventionId) {
            return intrusionPreventionId(Output.of(intrusionPreventionId));
        }

        /**
         * @param intrusionPreventionVersion Intrusion prevention version
         * 
         * @return builder
         * 
         */
        public Builder intrusionPreventionVersion(@Nullable Output<Integer> intrusionPreventionVersion) {
            $.intrusionPreventionVersion = intrusionPreventionVersion;
            return this;
        }

        /**
         * @param intrusionPreventionVersion Intrusion prevention version
         * 
         * @return builder
         * 
         */
        public Builder intrusionPreventionVersion(Integer intrusionPreventionVersion) {
            return intrusionPreventionVersion(Output.of(intrusionPreventionVersion));
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tlsAction TLS Action
         *   - Choices: `decrypt`, `skipDecrypt`, `doNotDecrypt`
         * 
         * @return builder
         * 
         */
        public Builder tlsAction(@Nullable Output<String> tlsAction) {
            $.tlsAction = tlsAction;
            return this;
        }

        /**
         * @param tlsAction TLS Action
         *   - Choices: `decrypt`, `skipDecrypt`, `doNotDecrypt`
         * 
         * @return builder
         * 
         */
        public Builder tlsAction(String tlsAction) {
            return tlsAction(Output.of(tlsAction));
        }

        /**
         * @param tlsSslDecryptionId TLS/SSL decryption ID
         * 
         * @return builder
         * 
         */
        public Builder tlsSslDecryptionId(@Nullable Output<String> tlsSslDecryptionId) {
            $.tlsSslDecryptionId = tlsSslDecryptionId;
            return this;
        }

        /**
         * @param tlsSslDecryptionId TLS/SSL decryption ID
         * 
         * @return builder
         * 
         */
        public Builder tlsSslDecryptionId(String tlsSslDecryptionId) {
            return tlsSslDecryptionId(Output.of(tlsSslDecryptionId));
        }

        /**
         * @param tlsSslDecryptionVersion TLS/SSL decryption version
         * 
         * @return builder
         * 
         */
        public Builder tlsSslDecryptionVersion(@Nullable Output<Integer> tlsSslDecryptionVersion) {
            $.tlsSslDecryptionVersion = tlsSslDecryptionVersion;
            return this;
        }

        /**
         * @param tlsSslDecryptionVersion TLS/SSL decryption version
         * 
         * @return builder
         * 
         */
        public Builder tlsSslDecryptionVersion(Integer tlsSslDecryptionVersion) {
            return tlsSslDecryptionVersion(Output.of(tlsSslDecryptionVersion));
        }

        /**
         * @param urlFilteringId URL filtering ID (unified mode)
         * 
         * @return builder
         * 
         */
        public Builder urlFilteringId(@Nullable Output<String> urlFilteringId) {
            $.urlFilteringId = urlFilteringId;
            return this;
        }

        /**
         * @param urlFilteringId URL filtering ID (unified mode)
         * 
         * @return builder
         * 
         */
        public Builder urlFilteringId(String urlFilteringId) {
            return urlFilteringId(Output.of(urlFilteringId));
        }

        /**
         * @param urlFilteringVersion URL filtering version
         * 
         * @return builder
         * 
         */
        public Builder urlFilteringVersion(@Nullable Output<Integer> urlFilteringVersion) {
            $.urlFilteringVersion = urlFilteringVersion;
            return this;
        }

        /**
         * @param urlFilteringVersion URL filtering version
         * 
         * @return builder
         * 
         */
        public Builder urlFilteringVersion(Integer urlFilteringVersion) {
            return urlFilteringVersion(Output.of(urlFilteringVersion));
        }

        public AdvancedInspectionProfilePolicyDefinitionArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("AdvancedInspectionProfilePolicyDefinitionArgs", "description");
            }
            return $;
        }
    }

}
