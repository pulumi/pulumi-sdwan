// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily {
    /**
     * @return Set BGP address family
     * 
     */
    private String familyType;
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    private Integer maximumPrefixes;
    /**
     * @return Set when to restart BGP connection if threshold is exceeded
     * 
     */
    private Integer maximumPrefixesRestart;
    /**
     * @return Variable name
     * 
     */
    private String maximumPrefixesRestartVariable;
    /**
     * @return Set threshold at which to generate a warning message
     * 
     */
    private Integer maximumPrefixesThreshold;
    /**
     * @return Variable name
     * 
     */
    private String maximumPrefixesThresholdVariable;
    /**
     * @return Variable name
     * 
     */
    private String maximumPrefixesVariable;
    /**
     * @return Display only a warning message when threshold is exceeded
     * 
     */
    private Boolean maximumPrefixesWarningOnly;
    /**
     * @return Variable name
     * 
     */
    private String maximumPrefixesWarningOnlyVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Select route policy to apply to prefixes received from BGP neighbor
     * 
     */
    private List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy> routePolicies;

    private GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily() {}
    /**
     * @return Set BGP address family
     * 
     */
    public String familyType() {
        return this.familyType;
    }
    /**
     * @return Set maximum number of prefixes accepted from BGP peer
     * 
     */
    public Integer maximumPrefixes() {
        return this.maximumPrefixes;
    }
    /**
     * @return Set when to restart BGP connection if threshold is exceeded
     * 
     */
    public Integer maximumPrefixesRestart() {
        return this.maximumPrefixesRestart;
    }
    /**
     * @return Variable name
     * 
     */
    public String maximumPrefixesRestartVariable() {
        return this.maximumPrefixesRestartVariable;
    }
    /**
     * @return Set threshold at which to generate a warning message
     * 
     */
    public Integer maximumPrefixesThreshold() {
        return this.maximumPrefixesThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String maximumPrefixesThresholdVariable() {
        return this.maximumPrefixesThresholdVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String maximumPrefixesVariable() {
        return this.maximumPrefixesVariable;
    }
    /**
     * @return Display only a warning message when threshold is exceeded
     * 
     */
    public Boolean maximumPrefixesWarningOnly() {
        return this.maximumPrefixesWarningOnly;
    }
    /**
     * @return Variable name
     * 
     */
    public String maximumPrefixesWarningOnlyVariable() {
        return this.maximumPrefixesWarningOnlyVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Select route policy to apply to prefixes received from BGP neighbor
     * 
     */
    public List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy> routePolicies() {
        return this.routePolicies;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String familyType;
        private Integer maximumPrefixes;
        private Integer maximumPrefixesRestart;
        private String maximumPrefixesRestartVariable;
        private Integer maximumPrefixesThreshold;
        private String maximumPrefixesThresholdVariable;
        private String maximumPrefixesVariable;
        private Boolean maximumPrefixesWarningOnly;
        private String maximumPrefixesWarningOnlyVariable;
        private Boolean optional;
        private List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy> routePolicies;
        public Builder() {}
        public Builder(GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.familyType = defaults.familyType;
    	      this.maximumPrefixes = defaults.maximumPrefixes;
    	      this.maximumPrefixesRestart = defaults.maximumPrefixesRestart;
    	      this.maximumPrefixesRestartVariable = defaults.maximumPrefixesRestartVariable;
    	      this.maximumPrefixesThreshold = defaults.maximumPrefixesThreshold;
    	      this.maximumPrefixesThresholdVariable = defaults.maximumPrefixesThresholdVariable;
    	      this.maximumPrefixesVariable = defaults.maximumPrefixesVariable;
    	      this.maximumPrefixesWarningOnly = defaults.maximumPrefixesWarningOnly;
    	      this.maximumPrefixesWarningOnlyVariable = defaults.maximumPrefixesWarningOnlyVariable;
    	      this.optional = defaults.optional;
    	      this.routePolicies = defaults.routePolicies;
        }

        @CustomType.Setter
        public Builder familyType(String familyType) {
            if (familyType == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "familyType");
            }
            this.familyType = familyType;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixes(Integer maximumPrefixes) {
            if (maximumPrefixes == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixes");
            }
            this.maximumPrefixes = maximumPrefixes;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesRestart(Integer maximumPrefixesRestart) {
            if (maximumPrefixesRestart == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesRestart");
            }
            this.maximumPrefixesRestart = maximumPrefixesRestart;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesRestartVariable(String maximumPrefixesRestartVariable) {
            if (maximumPrefixesRestartVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesRestartVariable");
            }
            this.maximumPrefixesRestartVariable = maximumPrefixesRestartVariable;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesThreshold(Integer maximumPrefixesThreshold) {
            if (maximumPrefixesThreshold == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesThreshold");
            }
            this.maximumPrefixesThreshold = maximumPrefixesThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesThresholdVariable(String maximumPrefixesThresholdVariable) {
            if (maximumPrefixesThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesThresholdVariable");
            }
            this.maximumPrefixesThresholdVariable = maximumPrefixesThresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesVariable(String maximumPrefixesVariable) {
            if (maximumPrefixesVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesVariable");
            }
            this.maximumPrefixesVariable = maximumPrefixesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesWarningOnly(Boolean maximumPrefixesWarningOnly) {
            if (maximumPrefixesWarningOnly == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesWarningOnly");
            }
            this.maximumPrefixesWarningOnly = maximumPrefixesWarningOnly;
            return this;
        }
        @CustomType.Setter
        public Builder maximumPrefixesWarningOnlyVariable(String maximumPrefixesWarningOnlyVariable) {
            if (maximumPrefixesWarningOnlyVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "maximumPrefixesWarningOnlyVariable");
            }
            this.maximumPrefixesWarningOnlyVariable = maximumPrefixesWarningOnlyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder routePolicies(List<GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy> routePolicies) {
            if (routePolicies == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily", "routePolicies");
            }
            this.routePolicies = routePolicies;
            return this;
        }
        public Builder routePolicies(GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamilyRoutePolicy... routePolicies) {
            return routePolicies(List.of(routePolicies));
        }
        public GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily build() {
            final var _resultValue = new GetCiscoBgpFeatureTemplateIpv4NeighborAddressFamily();
            _resultValue.familyType = familyType;
            _resultValue.maximumPrefixes = maximumPrefixes;
            _resultValue.maximumPrefixesRestart = maximumPrefixesRestart;
            _resultValue.maximumPrefixesRestartVariable = maximumPrefixesRestartVariable;
            _resultValue.maximumPrefixesThreshold = maximumPrefixesThreshold;
            _resultValue.maximumPrefixesThresholdVariable = maximumPrefixesThresholdVariable;
            _resultValue.maximumPrefixesVariable = maximumPrefixesVariable;
            _resultValue.maximumPrefixesWarningOnly = maximumPrefixesWarningOnly;
            _resultValue.maximumPrefixesWarningOnlyVariable = maximumPrefixesWarningOnlyVariable;
            _resultValue.optional = optional;
            _resultValue.routePolicies = routePolicies;
            return _resultValue;
        }
    }
}
