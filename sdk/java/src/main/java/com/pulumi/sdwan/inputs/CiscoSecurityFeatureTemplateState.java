// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.CiscoSecurityFeatureTemplateKeyArgs;
import com.pulumi.sdwan.inputs.CiscoSecurityFeatureTemplateKeychainArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoSecurityFeatureTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final CiscoSecurityFeatureTemplateState Empty = new CiscoSecurityFeatureTemplateState();

    /**
     * Variable name
     * 
     */
    @Import(name="authenticationTypeVariable")
    private @Nullable Output<String> authenticationTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> authenticationTypeVariable() {
        return Optional.ofNullable(this.authenticationTypeVariable);
    }

    /**
     * Set the authentication type for DTLS connections
     * 
     */
    @Import(name="authenticationTypes")
    private @Nullable Output<List<String>> authenticationTypes;

    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    public Optional<Output<List<String>>> authenticationTypes() {
        return Optional.ofNullable(this.authenticationTypes);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes")
    private @Nullable Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Optional<Output<List<String>>> deviceTypes() {
        return Optional.ofNullable(this.deviceTypes);
    }

    /**
     * Extended Anti-Replay Window
     *   - Range: `10`-`2048`
     *   - Default value: `256`
     * 
     */
    @Import(name="extendedArWindow")
    private @Nullable Output<Integer> extendedArWindow;

    /**
     * @return Extended Anti-Replay Window
     *   - Range: `10`-`2048`
     *   - Default value: `256`
     * 
     */
    public Optional<Output<Integer>> extendedArWindow() {
        return Optional.ofNullable(this.extendedArWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="extendedArWindowVariable")
    private @Nullable Output<String> extendedArWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> extendedArWindowVariable() {
        return Optional.ofNullable(this.extendedArWindowVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="integrityTypeVariable")
    private @Nullable Output<String> integrityTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> integrityTypeVariable() {
        return Optional.ofNullable(this.integrityTypeVariable);
    }

    /**
     * Set the authentication type for DTLS connections
     * 
     */
    @Import(name="integrityTypes")
    private @Nullable Output<List<String>> integrityTypes;

    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    public Optional<Output<List<String>>> integrityTypes() {
        return Optional.ofNullable(this.integrityTypes);
    }

    /**
     * Configure a Keychain
     * 
     */
    @Import(name="keychains")
    private @Nullable Output<List<CiscoSecurityFeatureTemplateKeychainArgs>> keychains;

    /**
     * @return Configure a Keychain
     * 
     */
    public Optional<Output<List<CiscoSecurityFeatureTemplateKeychainArgs>>> keychains() {
        return Optional.ofNullable(this.keychains);
    }

    /**
     * Configure a Key
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<CiscoSecurityFeatureTemplateKeyArgs>> keys;

    /**
     * @return Configure a Key
     * 
     */
    public Optional<Output<List<CiscoSecurityFeatureTemplateKeyArgs>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enable or disable IPsec pairwise-keying
     *   - Default value: `false`
     * 
     */
    @Import(name="pairwiseKeying")
    private @Nullable Output<Boolean> pairwiseKeying;

    /**
     * @return Enable or disable IPsec pairwise-keying
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> pairwiseKeying() {
        return Optional.ofNullable(this.pairwiseKeying);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="pairwiseKeyingVariable")
    private @Nullable Output<String> pairwiseKeyingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> pairwiseKeyingVariable() {
        return Optional.ofNullable(this.pairwiseKeyingVariable);
    }

    /**
     * Set how often to change the AES key for DTLS connections
     *   - Range: `10`-`1209600`
     *   - Default value: `86400`
     * 
     */
    @Import(name="rekeyInterval")
    private @Nullable Output<Integer> rekeyInterval;

    /**
     * @return Set how often to change the AES key for DTLS connections
     *   - Range: `10`-`1209600`
     *   - Default value: `86400`
     * 
     */
    public Optional<Output<Integer>> rekeyInterval() {
        return Optional.ofNullable(this.rekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="rekeyIntervalVariable")
    private @Nullable Output<String> rekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> rekeyIntervalVariable() {
        return Optional.ofNullable(this.rekeyIntervalVariable);
    }

    /**
     * Set the sliding replay window size
     *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
     *   - Default value: `512`
     * 
     */
    @Import(name="replayWindow")
    private @Nullable Output<String> replayWindow;

    /**
     * @return Set the sliding replay window size
     *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
     *   - Default value: `512`
     * 
     */
    public Optional<Output<String>> replayWindow() {
        return Optional.ofNullable(this.replayWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="replayWindowVariable")
    private @Nullable Output<String> replayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> replayWindowVariable() {
        return Optional.ofNullable(this.replayWindowVariable);
    }

    /**
     * The template type
     * 
     */
    @Import(name="templateType")
    private @Nullable Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Optional<Output<String>> templateType() {
        return Optional.ofNullable(this.templateType);
    }

    /**
     * The version of the feature template
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private CiscoSecurityFeatureTemplateState() {}

    private CiscoSecurityFeatureTemplateState(CiscoSecurityFeatureTemplateState $) {
        this.authenticationTypeVariable = $.authenticationTypeVariable;
        this.authenticationTypes = $.authenticationTypes;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.extendedArWindow = $.extendedArWindow;
        this.extendedArWindowVariable = $.extendedArWindowVariable;
        this.integrityTypeVariable = $.integrityTypeVariable;
        this.integrityTypes = $.integrityTypes;
        this.keychains = $.keychains;
        this.keys = $.keys;
        this.name = $.name;
        this.pairwiseKeying = $.pairwiseKeying;
        this.pairwiseKeyingVariable = $.pairwiseKeyingVariable;
        this.rekeyInterval = $.rekeyInterval;
        this.rekeyIntervalVariable = $.rekeyIntervalVariable;
        this.replayWindow = $.replayWindow;
        this.replayWindowVariable = $.replayWindowVariable;
        this.templateType = $.templateType;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoSecurityFeatureTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoSecurityFeatureTemplateState $;

        public Builder() {
            $ = new CiscoSecurityFeatureTemplateState();
        }

        public Builder(CiscoSecurityFeatureTemplateState defaults) {
            $ = new CiscoSecurityFeatureTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authenticationTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypeVariable(@Nullable Output<String> authenticationTypeVariable) {
            $.authenticationTypeVariable = authenticationTypeVariable;
            return this;
        }

        /**
         * @param authenticationTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypeVariable(String authenticationTypeVariable) {
            return authenticationTypeVariable(Output.of(authenticationTypeVariable));
        }

        /**
         * @param authenticationTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypes(@Nullable Output<List<String>> authenticationTypes) {
            $.authenticationTypes = authenticationTypes;
            return this;
        }

        /**
         * @param authenticationTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypes(List<String> authenticationTypes) {
            return authenticationTypes(Output.of(authenticationTypes));
        }

        /**
         * @param authenticationTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder authenticationTypes(String... authenticationTypes) {
            return authenticationTypes(List.of(authenticationTypes));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(@Nullable Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param extendedArWindow Extended Anti-Replay Window
         *   - Range: `10`-`2048`
         *   - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder extendedArWindow(@Nullable Output<Integer> extendedArWindow) {
            $.extendedArWindow = extendedArWindow;
            return this;
        }

        /**
         * @param extendedArWindow Extended Anti-Replay Window
         *   - Range: `10`-`2048`
         *   - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder extendedArWindow(Integer extendedArWindow) {
            return extendedArWindow(Output.of(extendedArWindow));
        }

        /**
         * @param extendedArWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder extendedArWindowVariable(@Nullable Output<String> extendedArWindowVariable) {
            $.extendedArWindowVariable = extendedArWindowVariable;
            return this;
        }

        /**
         * @param extendedArWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder extendedArWindowVariable(String extendedArWindowVariable) {
            return extendedArWindowVariable(Output.of(extendedArWindowVariable));
        }

        /**
         * @param integrityTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder integrityTypeVariable(@Nullable Output<String> integrityTypeVariable) {
            $.integrityTypeVariable = integrityTypeVariable;
            return this;
        }

        /**
         * @param integrityTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder integrityTypeVariable(String integrityTypeVariable) {
            return integrityTypeVariable(Output.of(integrityTypeVariable));
        }

        /**
         * @param integrityTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder integrityTypes(@Nullable Output<List<String>> integrityTypes) {
            $.integrityTypes = integrityTypes;
            return this;
        }

        /**
         * @param integrityTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder integrityTypes(List<String> integrityTypes) {
            return integrityTypes(Output.of(integrityTypes));
        }

        /**
         * @param integrityTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder integrityTypes(String... integrityTypes) {
            return integrityTypes(List.of(integrityTypes));
        }

        /**
         * @param keychains Configure a Keychain
         * 
         * @return builder
         * 
         */
        public Builder keychains(@Nullable Output<List<CiscoSecurityFeatureTemplateKeychainArgs>> keychains) {
            $.keychains = keychains;
            return this;
        }

        /**
         * @param keychains Configure a Keychain
         * 
         * @return builder
         * 
         */
        public Builder keychains(List<CiscoSecurityFeatureTemplateKeychainArgs> keychains) {
            return keychains(Output.of(keychains));
        }

        /**
         * @param keychains Configure a Keychain
         * 
         * @return builder
         * 
         */
        public Builder keychains(CiscoSecurityFeatureTemplateKeychainArgs... keychains) {
            return keychains(List.of(keychains));
        }

        /**
         * @param keys Configure a Key
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<CiscoSecurityFeatureTemplateKeyArgs>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Configure a Key
         * 
         * @return builder
         * 
         */
        public Builder keys(List<CiscoSecurityFeatureTemplateKeyArgs> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys Configure a Key
         * 
         * @return builder
         * 
         */
        public Builder keys(CiscoSecurityFeatureTemplateKeyArgs... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pairwiseKeying Enable or disable IPsec pairwise-keying
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder pairwiseKeying(@Nullable Output<Boolean> pairwiseKeying) {
            $.pairwiseKeying = pairwiseKeying;
            return this;
        }

        /**
         * @param pairwiseKeying Enable or disable IPsec pairwise-keying
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder pairwiseKeying(Boolean pairwiseKeying) {
            return pairwiseKeying(Output.of(pairwiseKeying));
        }

        /**
         * @param pairwiseKeyingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pairwiseKeyingVariable(@Nullable Output<String> pairwiseKeyingVariable) {
            $.pairwiseKeyingVariable = pairwiseKeyingVariable;
            return this;
        }

        /**
         * @param pairwiseKeyingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pairwiseKeyingVariable(String pairwiseKeyingVariable) {
            return pairwiseKeyingVariable(Output.of(pairwiseKeyingVariable));
        }

        /**
         * @param rekeyInterval Set how often to change the AES key for DTLS connections
         *   - Range: `10`-`1209600`
         *   - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder rekeyInterval(@Nullable Output<Integer> rekeyInterval) {
            $.rekeyInterval = rekeyInterval;
            return this;
        }

        /**
         * @param rekeyInterval Set how often to change the AES key for DTLS connections
         *   - Range: `10`-`1209600`
         *   - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder rekeyInterval(Integer rekeyInterval) {
            return rekeyInterval(Output.of(rekeyInterval));
        }

        /**
         * @param rekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rekeyIntervalVariable(@Nullable Output<String> rekeyIntervalVariable) {
            $.rekeyIntervalVariable = rekeyIntervalVariable;
            return this;
        }

        /**
         * @param rekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rekeyIntervalVariable(String rekeyIntervalVariable) {
            return rekeyIntervalVariable(Output.of(rekeyIntervalVariable));
        }

        /**
         * @param replayWindow Set the sliding replay window size
         *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
         *   - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder replayWindow(@Nullable Output<String> replayWindow) {
            $.replayWindow = replayWindow;
            return this;
        }

        /**
         * @param replayWindow Set the sliding replay window size
         *   - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192`
         *   - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder replayWindow(String replayWindow) {
            return replayWindow(Output.of(replayWindow));
        }

        /**
         * @param replayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder replayWindowVariable(@Nullable Output<String> replayWindowVariable) {
            $.replayWindowVariable = replayWindowVariable;
            return this;
        }

        /**
         * @param replayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder replayWindowVariable(String replayWindowVariable) {
            return replayWindowVariable(Output.of(replayWindowVariable));
        }

        /**
         * @param templateType The template type
         * 
         * @return builder
         * 
         */
        public Builder templateType(@Nullable Output<String> templateType) {
            $.templateType = templateType;
            return this;
        }

        /**
         * @param templateType The template type
         * 
         * @return builder
         * 
         */
        public Builder templateType(String templateType) {
            return templateType(Output.of(templateType));
        }

        /**
         * @param version The version of the feature template
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the feature template
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CiscoSecurityFeatureTemplateState build() {
            return $;
        }
    }

}
