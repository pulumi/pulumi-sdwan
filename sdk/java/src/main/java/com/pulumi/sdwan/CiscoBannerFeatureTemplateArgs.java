// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoBannerFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoBannerFeatureTemplateArgs Empty = new CiscoBannerFeatureTemplateArgs();

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Set message to display before login prompt
     * 
     */
    @Import(name="login")
    private @Nullable Output<String> login;

    /**
     * @return Set message to display before login prompt
     * 
     */
    public Optional<Output<String>> login() {
        return Optional.ofNullable(this.login);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="loginVariable")
    private @Nullable Output<String> loginVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> loginVariable() {
        return Optional.ofNullable(this.loginVariable);
    }

    /**
     * Set message to display after a user logs in
     * 
     */
    @Import(name="motd")
    private @Nullable Output<String> motd;

    /**
     * @return Set message to display after a user logs in
     * 
     */
    public Optional<Output<String>> motd() {
        return Optional.ofNullable(this.motd);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="motdVariable")
    private @Nullable Output<String> motdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> motdVariable() {
        return Optional.ofNullable(this.motdVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private CiscoBannerFeatureTemplateArgs() {}

    private CiscoBannerFeatureTemplateArgs(CiscoBannerFeatureTemplateArgs $) {
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.login = $.login;
        this.loginVariable = $.loginVariable;
        this.motd = $.motd;
        this.motdVariable = $.motdVariable;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoBannerFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoBannerFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoBannerFeatureTemplateArgs();
        }

        public Builder(CiscoBannerFeatureTemplateArgs defaults) {
            $ = new CiscoBannerFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param login Set message to display before login prompt
         * 
         * @return builder
         * 
         */
        public Builder login(@Nullable Output<String> login) {
            $.login = login;
            return this;
        }

        /**
         * @param login Set message to display before login prompt
         * 
         * @return builder
         * 
         */
        public Builder login(String login) {
            return login(Output.of(login));
        }

        /**
         * @param loginVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder loginVariable(@Nullable Output<String> loginVariable) {
            $.loginVariable = loginVariable;
            return this;
        }

        /**
         * @param loginVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder loginVariable(String loginVariable) {
            return loginVariable(Output.of(loginVariable));
        }

        /**
         * @param motd Set message to display after a user logs in
         * 
         * @return builder
         * 
         */
        public Builder motd(@Nullable Output<String> motd) {
            $.motd = motd;
            return this;
        }

        /**
         * @param motd Set message to display after a user logs in
         * 
         * @return builder
         * 
         */
        public Builder motd(String motd) {
            return motd(Output.of(motd));
        }

        /**
         * @param motdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder motdVariable(@Nullable Output<String> motdVariable) {
            $.motdVariable = motdVariable;
            return this;
        }

        /**
         * @param motdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder motdVariable(String motdVariable) {
            return motdVariable(Output.of(motdVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public CiscoBannerFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoBannerFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoBannerFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
