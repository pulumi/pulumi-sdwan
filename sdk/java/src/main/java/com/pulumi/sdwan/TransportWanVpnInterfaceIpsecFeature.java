// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.TransportWanVpnInterfaceIpsecFeatureArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.TransportWanVpnInterfaceIpsecFeatureState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a Transport WAN VPN Interface IPSEC Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.TransportWanVpnInterfaceIpsecFeature;
 * import com.pulumi.sdwan.TransportWanVpnInterfaceIpsecFeatureArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new TransportWanVpnInterfaceIpsecFeature("example", TransportWanVpnInterfaceIpsecFeatureArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .featureProfileId("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
 *             .transportWanVpnFeatureId("140331f6-5418-4755-a059-13c77eb96037")
 *             .interfaceName("ipsec987")
 *             .shutdown(true)
 *             .interfaceDescription("ipsec987")
 *             .ipv4Address("9.7.5.4")
 *             .ipv4SubnetMask("255.255.255.0")
 *             .tunnelSourceIpv4Address("1.3.5.88")
 *             .tunnelSourceIpv4SubnetMask("255.255.255.0")
 *             .tunnelSourceInterface("GigabitEthernet8")
 *             .tunnelDestinationIpv4Address("2.55.67.99")
 *             .tunnelDestinationIpv4SubnetMask("255.255.255.0")
 *             .applicationTunnelType("none")
 *             .tcpMss(1460)
 *             .clearDontFragment(false)
 *             .ipMtu(1500)
 *             .dpdInterval(10)
 *             .dpdRetries(3)
 *             .ikePresharedKey("123")
 *             .ikeVersion(1)
 *             .ikeIntegrityProtocol("main")
 *             .ikeRekeyInterval(14400)
 *             .ikeCiphersuite("aes256-cbc-sha1")
 *             .ikeDiffieHellmanGroup("16")
 *             .ikeIdLocalEndPoint("xxx")
 *             .ikeIdRemoteEndPoint("xxx")
 *             .ipsecRekeyInterval(3600)
 *             .ipsecReplayWindow(512)
 *             .ipsecCiphersuite("aes256-gcm")
 *             .perfectForwardSecrecy("group-16")
 *             .tunnelRouteVia("2222")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * Expected import identifier with the format: &#34;transport_wan_vpn_interface_ipsec_feature_id,feature_profile_id,transport_wan_vpn_feature_id&#34;
 * 
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnInterfaceIpsecFeature:TransportWanVpnInterfaceIpsecFeature example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/transportWanVpnInterfaceIpsecFeature:TransportWanVpnInterfaceIpsecFeature")
public class TransportWanVpnInterfaceIpsecFeature extends com.pulumi.resources.CustomResource {
    /**
     * Enable Application Tunnel Type
     *   - Choices: `none`, `sig`
     * 
     */
    @Export(name="applicationTunnelType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> applicationTunnelType;

    /**
     * @return Enable Application Tunnel Type
     *   - Choices: `none`, `sig`
     * 
     */
    public Output<Optional<String>> applicationTunnelType() {
        return Codegen.optional(this.applicationTunnelType);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="applicationTunnelTypeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> applicationTunnelTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> applicationTunnelTypeVariable() {
        return Codegen.optional(this.applicationTunnelTypeVariable);
    }
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    @Export(name="clearDontFragment", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> clearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> clearDontFragment() {
        return Codegen.optional(this.clearDontFragment);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="clearDontFragmentVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> clearDontFragmentVariable() {
        return Codegen.optional(this.clearDontFragmentVariable);
    }
    /**
     * The description of the Feature
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * IKE keepalive interval (seconds)
     *   - Range: `10`-`3600`
     *   - Default value: `10`
     * 
     */
    @Export(name="dpdInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dpdInterval;

    /**
     * @return IKE keepalive interval (seconds)
     *   - Range: `10`-`3600`
     *   - Default value: `10`
     * 
     */
    public Output<Optional<Integer>> dpdInterval() {
        return Codegen.optional(this.dpdInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="dpdIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dpdIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> dpdIntervalVariable() {
        return Codegen.optional(this.dpdIntervalVariable);
    }
    /**
     * IKE keepalive retries
     *   - Range: `2`-`60`
     *   - Default value: `3`
     * 
     */
    @Export(name="dpdRetries", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dpdRetries;

    /**
     * @return IKE keepalive retries
     *   - Range: `2`-`60`
     *   - Default value: `3`
     * 
     */
    public Output<Optional<Integer>> dpdRetries() {
        return Codegen.optional(this.dpdRetries);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="dpdRetriesVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dpdRetriesVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> dpdRetriesVariable() {
        return Codegen.optional(this.dpdRetriesVariable);
    }
    /**
     * Feature Profile ID
     * 
     */
    @Export(name="featureProfileId", refs={String.class}, tree="[0]")
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    @Export(name="ikeCiphersuite", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeCiphersuite;

    /**
     * @return IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    public Output<Optional<String>> ikeCiphersuite() {
        return Codegen.optional(this.ikeCiphersuite);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeCiphersuiteVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeCiphersuiteVariable() {
        return Codegen.optional(this.ikeCiphersuiteVariable);
    }
    /**
     * IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24`
     *   - Default value: `16`
     * 
     */
    @Export(name="ikeDiffieHellmanGroup", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeDiffieHellmanGroup;

    /**
     * @return IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24`
     *   - Default value: `16`
     * 
     */
    public Output<Optional<String>> ikeDiffieHellmanGroup() {
        return Codegen.optional(this.ikeDiffieHellmanGroup);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeDiffieHellmanGroupVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeDiffieHellmanGroupVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeDiffieHellmanGroupVariable() {
        return Codegen.optional(this.ikeDiffieHellmanGroupVariable);
    }
    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Export(name="ikeIdLocalEndPoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeIdLocalEndPoint;

    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Output<Optional<String>> ikeIdLocalEndPoint() {
        return Codegen.optional(this.ikeIdLocalEndPoint);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeIdLocalEndPointVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeIdLocalEndPointVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeIdLocalEndPointVariable() {
        return Codegen.optional(this.ikeIdLocalEndPointVariable);
    }
    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Export(name="ikeIdRemoteEndPoint", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeIdRemoteEndPoint;

    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Output<Optional<String>> ikeIdRemoteEndPoint() {
        return Codegen.optional(this.ikeIdRemoteEndPoint);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeIdRemoteEndPointVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeIdRemoteEndPointVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeIdRemoteEndPointVariable() {
        return Codegen.optional(this.ikeIdRemoteEndPointVariable);
    }
    /**
     * IKE integrity protocol
     *   - Choices: `main`, `aggressive`
     *   - Default value: `main`
     * 
     */
    @Export(name="ikeIntegrityProtocol", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeIntegrityProtocol;

    /**
     * @return IKE integrity protocol
     *   - Choices: `main`, `aggressive`
     *   - Default value: `main`
     * 
     */
    public Output<Optional<String>> ikeIntegrityProtocol() {
        return Codegen.optional(this.ikeIntegrityProtocol);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeIntegrityProtocolVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeIntegrityProtocolVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeIntegrityProtocolVariable() {
        return Codegen.optional(this.ikeIntegrityProtocolVariable);
    }
    /**
     * Use preshared key to authenticate IKE peer
     * 
     */
    @Export(name="ikePresharedKey", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePresharedKey;

    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Output<Optional<String>> ikePresharedKey() {
        return Codegen.optional(this.ikePresharedKey);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikePresharedKeyVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikePresharedKeyVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikePresharedKeyVariable() {
        return Codegen.optional(this.ikePresharedKeyVariable);
    }
    /**
     * IKE rekey interval &lt;60..86400&gt; seconds
     *   - Range: `60`-`86400`
     *   - Default value: `14400`
     * 
     */
    @Export(name="ikeRekeyInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ikeRekeyInterval;

    /**
     * @return IKE rekey interval &lt;60..86400&gt; seconds
     *   - Range: `60`-`86400`
     *   - Default value: `14400`
     * 
     */
    public Output<Optional<Integer>> ikeRekeyInterval() {
        return Codegen.optional(this.ikeRekeyInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ikeRekeyIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ikeRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ikeRekeyIntervalVariable() {
        return Codegen.optional(this.ikeRekeyIntervalVariable);
    }
    /**
     * IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `1`
     * 
     */
    @Export(name="ikeVersion", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ikeVersion;

    /**
     * @return IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `1`
     * 
     */
    public Output<Optional<Integer>> ikeVersion() {
        return Codegen.optional(this.ikeVersion);
    }
    /**
     * Interface description
     * 
     */
    @Export(name="interfaceDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Output<Optional<String>> interfaceDescription() {
        return Codegen.optional(this.interfaceDescription);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceDescriptionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceDescriptionVariable() {
        return Codegen.optional(this.interfaceDescriptionVariable);
    }
    /**
     * Interface name: IPsec when present
     * 
     */
    @Export(name="interfaceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceName;

    /**
     * @return Interface name: IPsec when present
     * 
     */
    public Output<Optional<String>> interfaceName() {
        return Codegen.optional(this.interfaceName);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceNameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceNameVariable() {
        return Codegen.optional(this.interfaceNameVariable);
    }
    /**
     * Interface MTU &lt;68..9216&gt;, in bytes
     *   - Range: `68`-`9216`
     *   - Default value: `1500`
     * 
     */
    @Export(name="ipMtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipMtu;

    /**
     * @return Interface MTU &lt;68..9216&gt;, in bytes
     *   - Range: `68`-`9216`
     *   - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> ipMtu() {
        return Codegen.optional(this.ipMtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipMtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipMtuVariable() {
        return Codegen.optional(this.ipMtuVariable);
    }
    /**
     * IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    @Export(name="ipsecCiphersuite", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecCiphersuite;

    /**
     * @return IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    public Output<Optional<String>> ipsecCiphersuite() {
        return Codegen.optional(this.ipsecCiphersuite);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecCiphersuiteVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecCiphersuiteVariable() {
        return Codegen.optional(this.ipsecCiphersuiteVariable);
    }
    /**
     * IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `120`-`2592000`
     *   - Default value: `3600`
     * 
     */
    @Export(name="ipsecRekeyInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipsecRekeyInterval;

    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `120`-`2592000`
     *   - Default value: `3600`
     * 
     */
    public Output<Optional<Integer>> ipsecRekeyInterval() {
        return Codegen.optional(this.ipsecRekeyInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecRekeyIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecRekeyIntervalVariable() {
        return Codegen.optional(this.ipsecRekeyIntervalVariable);
    }
    /**
     * Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    @Export(name="ipsecReplayWindow", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipsecReplayWindow;

    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    public Output<Optional<Integer>> ipsecReplayWindow() {
        return Codegen.optional(this.ipsecReplayWindow);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipsecReplayWindowVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipsecReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipsecReplayWindowVariable() {
        return Codegen.optional(this.ipsecReplayWindowVariable);
    }
    @Export(name="ipv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4Address;

    public Output<Optional<String>> ipv4Address() {
        return Codegen.optional(this.ipv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4AddressVariable() {
        return Codegen.optional(this.ipv4AddressVariable);
    }
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Export(name="ipv4SubnetMask", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Output<Optional<String>> ipv4SubnetMask() {
        return Codegen.optional(this.ipv4SubnetMask);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4SubnetMaskVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4SubnetMaskVariable() {
        return Codegen.optional(this.ipv4SubnetMaskVariable);
    }
    /**
     * The name of the Feature
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * IPsec perfect forward secrecy settings
     *   - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`, `group-19`, `group-20`, `group-21`, `group-24`, `none`
     *   - Default value: `group-16`
     * 
     */
    @Export(name="perfectForwardSecrecy", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> perfectForwardSecrecy;

    /**
     * @return IPsec perfect forward secrecy settings
     *   - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`, `group-19`, `group-20`, `group-21`, `group-24`, `none`
     *   - Default value: `group-16`
     * 
     */
    public Output<Optional<String>> perfectForwardSecrecy() {
        return Codegen.optional(this.perfectForwardSecrecy);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="perfectForwardSecrecyVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> perfectForwardSecrecyVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> perfectForwardSecrecyVariable() {
        return Codegen.optional(this.perfectForwardSecrecyVariable);
    }
    /**
     * Administrative state
     *   - Default value: `true`
     * 
     */
    @Export(name="shutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shutdown;

    /**
     * @return Administrative state
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> shutdown() {
        return Codegen.optional(this.shutdown);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shutdownVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shutdownVariable() {
        return Codegen.optional(this.shutdownVariable);
    }
    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Export(name="tcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tcpMss() {
        return Codegen.optional(this.tcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpMssVariable() {
        return Codegen.optional(this.tcpMssVariable);
    }
    /**
     * Enable tracker for this interface
     * 
     */
    @Export(name="trackerId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackerId;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Output<Optional<String>> trackerId() {
        return Codegen.optional(this.trackerId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="trackerIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackerIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> trackerIdVariable() {
        return Codegen.optional(this.trackerIdVariable);
    }
    /**
     * Transport WAN VPN Feature ID
     * 
     */
    @Export(name="transportWanVpnFeatureId", refs={String.class}, tree="[0]")
    private Output<String> transportWanVpnFeatureId;

    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    public Output<String> transportWanVpnFeatureId() {
        return this.transportWanVpnFeatureId;
    }
    @Export(name="tunnelDestinationIpv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationIpv4Address;

    public Output<Optional<String>> tunnelDestinationIpv4Address() {
        return Codegen.optional(this.tunnelDestinationIpv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelDestinationIpv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationIpv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelDestinationIpv4AddressVariable() {
        return Codegen.optional(this.tunnelDestinationIpv4AddressVariable);
    }
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Export(name="tunnelDestinationIpv4SubnetMask", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationIpv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Output<Optional<String>> tunnelDestinationIpv4SubnetMask() {
        return Codegen.optional(this.tunnelDestinationIpv4SubnetMask);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelDestinationIpv4SubnetMaskVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationIpv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelDestinationIpv4SubnetMaskVariable() {
        return Codegen.optional(this.tunnelDestinationIpv4SubnetMaskVariable);
    }
    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Export(name="tunnelRouteVia", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelRouteVia;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Output<Optional<String>> tunnelRouteVia() {
        return Codegen.optional(this.tunnelRouteVia);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelRouteViaVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelRouteViaVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelRouteViaVariable() {
        return Codegen.optional(this.tunnelRouteViaVariable);
    }
    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Export(name="tunnelSourceInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Output<Optional<String>> tunnelSourceInterface() {
        return Codegen.optional(this.tunnelSourceInterface);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceInterfaceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceInterfaceVariable() {
        return Codegen.optional(this.tunnelSourceInterfaceVariable);
    }
    @Export(name="tunnelSourceIpv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceIpv4Address;

    public Output<Optional<String>> tunnelSourceIpv4Address() {
        return Codegen.optional(this.tunnelSourceIpv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceIpv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceIpv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceIpv4AddressVariable() {
        return Codegen.optional(this.tunnelSourceIpv4AddressVariable);
    }
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Export(name="tunnelSourceIpv4SubnetMask", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceIpv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Output<Optional<String>> tunnelSourceIpv4SubnetMask() {
        return Codegen.optional(this.tunnelSourceIpv4SubnetMask);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceIpv4SubnetMaskVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceIpv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceIpv4SubnetMaskVariable() {
        return Codegen.optional(this.tunnelSourceIpv4SubnetMaskVariable);
    }
    /**
     * The version of the Feature
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the Feature
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TransportWanVpnInterfaceIpsecFeature(java.lang.String name) {
        this(name, TransportWanVpnInterfaceIpsecFeatureArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TransportWanVpnInterfaceIpsecFeature(java.lang.String name, TransportWanVpnInterfaceIpsecFeatureArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TransportWanVpnInterfaceIpsecFeature(java.lang.String name, TransportWanVpnInterfaceIpsecFeatureArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/transportWanVpnInterfaceIpsecFeature:TransportWanVpnInterfaceIpsecFeature", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TransportWanVpnInterfaceIpsecFeature(java.lang.String name, Output<java.lang.String> id, @Nullable TransportWanVpnInterfaceIpsecFeatureState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/transportWanVpnInterfaceIpsecFeature:TransportWanVpnInterfaceIpsecFeature", name, state, makeResourceOptions(options, id), false);
    }

    private static TransportWanVpnInterfaceIpsecFeatureArgs makeArgs(TransportWanVpnInterfaceIpsecFeatureArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TransportWanVpnInterfaceIpsecFeatureArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TransportWanVpnInterfaceIpsecFeature get(java.lang.String name, Output<java.lang.String> id, @Nullable TransportWanVpnInterfaceIpsecFeatureState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TransportWanVpnInterfaceIpsecFeature(name, id, state, options);
    }
}
