// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportManagementVpnProfileParcelIpv4StaticRouteIpv4RouteGatewayNextHo;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportManagementVpnProfileParcelIpv4StaticRoute {
    /**
     * @return Administrative distance
     * 
     */
    private Integer administrativeDistance;
    /**
     * @return Variable name
     * 
     */
    private String administrativeDistanceVariable;
    /**
     * @return Gateway
     * 
     */
    private String gateway;
    /**
     * @return IPv4 Route Gateway Next Hop
     * 
     */
    private List<GetTransportManagementVpnProfileParcelIpv4StaticRouteIpv4RouteGatewayNextHo> ipv4RouteGatewayNextHos;
    /**
     * @return IP Address
     * 
     */
    private String networkAddress;
    /**
     * @return Variable name
     * 
     */
    private String networkAddressVariable;
    /**
     * @return Subnet Mask
     * 
     */
    private String subnetMask;
    /**
     * @return Variable name
     * 
     */
    private String subnetMaskVariable;

    private GetTransportManagementVpnProfileParcelIpv4StaticRoute() {}
    /**
     * @return Administrative distance
     * 
     */
    public Integer administrativeDistance() {
        return this.administrativeDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String administrativeDistanceVariable() {
        return this.administrativeDistanceVariable;
    }
    /**
     * @return Gateway
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return IPv4 Route Gateway Next Hop
     * 
     */
    public List<GetTransportManagementVpnProfileParcelIpv4StaticRouteIpv4RouteGatewayNextHo> ipv4RouteGatewayNextHos() {
        return this.ipv4RouteGatewayNextHos;
    }
    /**
     * @return IP Address
     * 
     */
    public String networkAddress() {
        return this.networkAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String networkAddressVariable() {
        return this.networkAddressVariable;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String subnetMask() {
        return this.subnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String subnetMaskVariable() {
        return this.subnetMaskVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportManagementVpnProfileParcelIpv4StaticRoute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer administrativeDistance;
        private String administrativeDistanceVariable;
        private String gateway;
        private List<GetTransportManagementVpnProfileParcelIpv4StaticRouteIpv4RouteGatewayNextHo> ipv4RouteGatewayNextHos;
        private String networkAddress;
        private String networkAddressVariable;
        private String subnetMask;
        private String subnetMaskVariable;
        public Builder() {}
        public Builder(GetTransportManagementVpnProfileParcelIpv4StaticRoute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administrativeDistance = defaults.administrativeDistance;
    	      this.administrativeDistanceVariable = defaults.administrativeDistanceVariable;
    	      this.gateway = defaults.gateway;
    	      this.ipv4RouteGatewayNextHos = defaults.ipv4RouteGatewayNextHos;
    	      this.networkAddress = defaults.networkAddress;
    	      this.networkAddressVariable = defaults.networkAddressVariable;
    	      this.subnetMask = defaults.subnetMask;
    	      this.subnetMaskVariable = defaults.subnetMaskVariable;
        }

        @CustomType.Setter
        public Builder administrativeDistance(Integer administrativeDistance) {
            if (administrativeDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "administrativeDistance");
            }
            this.administrativeDistance = administrativeDistance;
            return this;
        }
        @CustomType.Setter
        public Builder administrativeDistanceVariable(String administrativeDistanceVariable) {
            if (administrativeDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "administrativeDistanceVariable");
            }
            this.administrativeDistanceVariable = administrativeDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4RouteGatewayNextHos(List<GetTransportManagementVpnProfileParcelIpv4StaticRouteIpv4RouteGatewayNextHo> ipv4RouteGatewayNextHos) {
            if (ipv4RouteGatewayNextHos == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "ipv4RouteGatewayNextHos");
            }
            this.ipv4RouteGatewayNextHos = ipv4RouteGatewayNextHos;
            return this;
        }
        public Builder ipv4RouteGatewayNextHos(GetTransportManagementVpnProfileParcelIpv4StaticRouteIpv4RouteGatewayNextHo... ipv4RouteGatewayNextHos) {
            return ipv4RouteGatewayNextHos(List.of(ipv4RouteGatewayNextHos));
        }
        @CustomType.Setter
        public Builder networkAddress(String networkAddress) {
            if (networkAddress == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "networkAddress");
            }
            this.networkAddress = networkAddress;
            return this;
        }
        @CustomType.Setter
        public Builder networkAddressVariable(String networkAddressVariable) {
            if (networkAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "networkAddressVariable");
            }
            this.networkAddressVariable = networkAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder subnetMask(String subnetMask) {
            if (subnetMask == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "subnetMask");
            }
            this.subnetMask = subnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder subnetMaskVariable(String subnetMaskVariable) {
            if (subnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnProfileParcelIpv4StaticRoute", "subnetMaskVariable");
            }
            this.subnetMaskVariable = subnetMaskVariable;
            return this;
        }
        public GetTransportManagementVpnProfileParcelIpv4StaticRoute build() {
            final var _resultValue = new GetTransportManagementVpnProfileParcelIpv4StaticRoute();
            _resultValue.administrativeDistance = administrativeDistance;
            _resultValue.administrativeDistanceVariable = administrativeDistanceVariable;
            _resultValue.gateway = gateway;
            _resultValue.ipv4RouteGatewayNextHos = ipv4RouteGatewayNextHos;
            _resultValue.networkAddress = networkAddress;
            _resultValue.networkAddressVariable = networkAddressVariable;
            _resultValue.subnetMask = subnetMask;
            _resultValue.subnetMaskVariable = subnetMaskVariable;
            return _resultValue;
        }
    }
}
