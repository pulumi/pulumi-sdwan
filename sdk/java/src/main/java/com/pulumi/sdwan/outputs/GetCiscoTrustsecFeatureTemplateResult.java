// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoTrustsecFeatureTemplateSxpConnection;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoTrustsecFeatureTemplateResult {
    /**
     * @return Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
     * 
     */
    private String credentialsId;
    /**
     * @return Variable name
     * 
     */
    private String credentialsIdVariable;
    /**
     * @return Set the password for the device
     * 
     */
    private String credentialsPassword;
    /**
     * @return Variable name
     * 
     */
    private String credentialsPasswordVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return Configure Local device security group \n\n
     * 
     */
    private Integer deviceSgt;
    /**
     * @return Variable name
     * 
     */
    private String deviceSgtVariable;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Enable Role-based Access Control enforcement
     * 
     */
    private Boolean enableEnforcement;
    /**
     * @return Variable name
     * 
     */
    private String enableEnforcementVariable;
    /**
     * @return Enable CTS SXP support
     * 
     */
    private Boolean enableSxp;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Configure Maximum allowed hold-time for listener in seconds \n\n
     * 
     */
    private Integer maximumListenerHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String maximumListenerHoldTimeVariable;
    /**
     * @return Configure Minimum allowed hold-time for listener in seconds \n\n
     * 
     */
    private Integer minimumListenerHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String minimumListenerHoldTimeVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Configure Speaker hold-time in seconds \n\n
     * 
     */
    private Integer speakerHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String speakerHoldTimeVariable;
    /**
     * @return Configure SXP Connections
     * 
     */
    private List<GetCiscoTrustsecFeatureTemplateSxpConnection> sxpConnections;
    /**
     * @return Configure SXP default password
     * 
     */
    private String sxpDefaultPassword;
    /**
     * @return Variable name
     * 
     */
    private String sxpDefaultPasswordVariable;
    /**
     * @return Configure SXP key-chain
     * 
     */
    private String sxpKeyChain;
    /**
     * @return Variable name
     * 
     */
    private String sxpKeyChainVariable;
    /**
     * @return Enables logging for IP-to-SGT binding changes
     * 
     */
    private Boolean sxpLogBindingChanges;
    /**
     * @return Variable name
     * 
     */
    private String sxpLogBindingChangesVariable;
    /**
     * @return Configure SXP Node ID \n\n
     * 
     */
    private String sxpNodeId;
    /**
     * @return Define SXP Node ID type \n\n
     * 
     */
    private String sxpNodeIdType;
    /**
     * @return Variable name
     * 
     */
    private String sxpNodeIdVariable;
    /**
     * @return Configure the SXP reconciliation period in seconds \n\n
     * 
     */
    private Integer sxpReconciliationPeriod;
    /**
     * @return Variable name
     * 
     */
    private String sxpReconciliationPeriodVariable;
    /**
     * @return Configure Retry period for SXP connection in seconds \n\n
     * 
     */
    private Integer sxpRetryPeriod;
    /**
     * @return Variable name
     * 
     */
    private String sxpRetryPeriodVariable;
    /**
     * @return SXP Source IP
     * 
     */
    private String sxpSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String sxpSourceIpVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoTrustsecFeatureTemplateResult() {}
    /**
     * @return Specify the TrustSec Network Access Device ID, should be same as mentioned in the Identity Services Engine (upto 32 char)
     * 
     */
    public String credentialsId() {
        return this.credentialsId;
    }
    /**
     * @return Variable name
     * 
     */
    public String credentialsIdVariable() {
        return this.credentialsIdVariable;
    }
    /**
     * @return Set the password for the device
     * 
     */
    public String credentialsPassword() {
        return this.credentialsPassword;
    }
    /**
     * @return Variable name
     * 
     */
    public String credentialsPasswordVariable() {
        return this.credentialsPasswordVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Configure Local device security group \n\n
     * 
     */
    public Integer deviceSgt() {
        return this.deviceSgt;
    }
    /**
     * @return Variable name
     * 
     */
    public String deviceSgtVariable() {
        return this.deviceSgtVariable;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Enable Role-based Access Control enforcement
     * 
     */
    public Boolean enableEnforcement() {
        return this.enableEnforcement;
    }
    /**
     * @return Variable name
     * 
     */
    public String enableEnforcementVariable() {
        return this.enableEnforcementVariable;
    }
    /**
     * @return Enable CTS SXP support
     * 
     */
    public Boolean enableSxp() {
        return this.enableSxp;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Configure Maximum allowed hold-time for listener in seconds \n\n
     * 
     */
    public Integer maximumListenerHoldTime() {
        return this.maximumListenerHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String maximumListenerHoldTimeVariable() {
        return this.maximumListenerHoldTimeVariable;
    }
    /**
     * @return Configure Minimum allowed hold-time for listener in seconds \n\n
     * 
     */
    public Integer minimumListenerHoldTime() {
        return this.minimumListenerHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String minimumListenerHoldTimeVariable() {
        return this.minimumListenerHoldTimeVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Configure Speaker hold-time in seconds \n\n
     * 
     */
    public Integer speakerHoldTime() {
        return this.speakerHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String speakerHoldTimeVariable() {
        return this.speakerHoldTimeVariable;
    }
    /**
     * @return Configure SXP Connections
     * 
     */
    public List<GetCiscoTrustsecFeatureTemplateSxpConnection> sxpConnections() {
        return this.sxpConnections;
    }
    /**
     * @return Configure SXP default password
     * 
     */
    public String sxpDefaultPassword() {
        return this.sxpDefaultPassword;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpDefaultPasswordVariable() {
        return this.sxpDefaultPasswordVariable;
    }
    /**
     * @return Configure SXP key-chain
     * 
     */
    public String sxpKeyChain() {
        return this.sxpKeyChain;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpKeyChainVariable() {
        return this.sxpKeyChainVariable;
    }
    /**
     * @return Enables logging for IP-to-SGT binding changes
     * 
     */
    public Boolean sxpLogBindingChanges() {
        return this.sxpLogBindingChanges;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpLogBindingChangesVariable() {
        return this.sxpLogBindingChangesVariable;
    }
    /**
     * @return Configure SXP Node ID \n\n
     * 
     */
    public String sxpNodeId() {
        return this.sxpNodeId;
    }
    /**
     * @return Define SXP Node ID type \n\n
     * 
     */
    public String sxpNodeIdType() {
        return this.sxpNodeIdType;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpNodeIdVariable() {
        return this.sxpNodeIdVariable;
    }
    /**
     * @return Configure the SXP reconciliation period in seconds \n\n
     * 
     */
    public Integer sxpReconciliationPeriod() {
        return this.sxpReconciliationPeriod;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpReconciliationPeriodVariable() {
        return this.sxpReconciliationPeriodVariable;
    }
    /**
     * @return Configure Retry period for SXP connection in seconds \n\n
     * 
     */
    public Integer sxpRetryPeriod() {
        return this.sxpRetryPeriod;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpRetryPeriodVariable() {
        return this.sxpRetryPeriodVariable;
    }
    /**
     * @return SXP Source IP
     * 
     */
    public String sxpSourceIp() {
        return this.sxpSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String sxpSourceIpVariable() {
        return this.sxpSourceIpVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoTrustsecFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String credentialsId;
        private String credentialsIdVariable;
        private String credentialsPassword;
        private String credentialsPasswordVariable;
        private String description;
        private Integer deviceSgt;
        private String deviceSgtVariable;
        private List<String> deviceTypes;
        private Boolean enableEnforcement;
        private String enableEnforcementVariable;
        private Boolean enableSxp;
        private String id;
        private Integer maximumListenerHoldTime;
        private String maximumListenerHoldTimeVariable;
        private Integer minimumListenerHoldTime;
        private String minimumListenerHoldTimeVariable;
        private String name;
        private Integer speakerHoldTime;
        private String speakerHoldTimeVariable;
        private List<GetCiscoTrustsecFeatureTemplateSxpConnection> sxpConnections;
        private String sxpDefaultPassword;
        private String sxpDefaultPasswordVariable;
        private String sxpKeyChain;
        private String sxpKeyChainVariable;
        private Boolean sxpLogBindingChanges;
        private String sxpLogBindingChangesVariable;
        private String sxpNodeId;
        private String sxpNodeIdType;
        private String sxpNodeIdVariable;
        private Integer sxpReconciliationPeriod;
        private String sxpReconciliationPeriodVariable;
        private Integer sxpRetryPeriod;
        private String sxpRetryPeriodVariable;
        private String sxpSourceIp;
        private String sxpSourceIpVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoTrustsecFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.credentialsId = defaults.credentialsId;
    	      this.credentialsIdVariable = defaults.credentialsIdVariable;
    	      this.credentialsPassword = defaults.credentialsPassword;
    	      this.credentialsPasswordVariable = defaults.credentialsPasswordVariable;
    	      this.description = defaults.description;
    	      this.deviceSgt = defaults.deviceSgt;
    	      this.deviceSgtVariable = defaults.deviceSgtVariable;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.enableEnforcement = defaults.enableEnforcement;
    	      this.enableEnforcementVariable = defaults.enableEnforcementVariable;
    	      this.enableSxp = defaults.enableSxp;
    	      this.id = defaults.id;
    	      this.maximumListenerHoldTime = defaults.maximumListenerHoldTime;
    	      this.maximumListenerHoldTimeVariable = defaults.maximumListenerHoldTimeVariable;
    	      this.minimumListenerHoldTime = defaults.minimumListenerHoldTime;
    	      this.minimumListenerHoldTimeVariable = defaults.minimumListenerHoldTimeVariable;
    	      this.name = defaults.name;
    	      this.speakerHoldTime = defaults.speakerHoldTime;
    	      this.speakerHoldTimeVariable = defaults.speakerHoldTimeVariable;
    	      this.sxpConnections = defaults.sxpConnections;
    	      this.sxpDefaultPassword = defaults.sxpDefaultPassword;
    	      this.sxpDefaultPasswordVariable = defaults.sxpDefaultPasswordVariable;
    	      this.sxpKeyChain = defaults.sxpKeyChain;
    	      this.sxpKeyChainVariable = defaults.sxpKeyChainVariable;
    	      this.sxpLogBindingChanges = defaults.sxpLogBindingChanges;
    	      this.sxpLogBindingChangesVariable = defaults.sxpLogBindingChangesVariable;
    	      this.sxpNodeId = defaults.sxpNodeId;
    	      this.sxpNodeIdType = defaults.sxpNodeIdType;
    	      this.sxpNodeIdVariable = defaults.sxpNodeIdVariable;
    	      this.sxpReconciliationPeriod = defaults.sxpReconciliationPeriod;
    	      this.sxpReconciliationPeriodVariable = defaults.sxpReconciliationPeriodVariable;
    	      this.sxpRetryPeriod = defaults.sxpRetryPeriod;
    	      this.sxpRetryPeriodVariable = defaults.sxpRetryPeriodVariable;
    	      this.sxpSourceIp = defaults.sxpSourceIp;
    	      this.sxpSourceIpVariable = defaults.sxpSourceIpVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder credentialsId(String credentialsId) {
            if (credentialsId == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "credentialsId");
            }
            this.credentialsId = credentialsId;
            return this;
        }
        @CustomType.Setter
        public Builder credentialsIdVariable(String credentialsIdVariable) {
            if (credentialsIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "credentialsIdVariable");
            }
            this.credentialsIdVariable = credentialsIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder credentialsPassword(String credentialsPassword) {
            if (credentialsPassword == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "credentialsPassword");
            }
            this.credentialsPassword = credentialsPassword;
            return this;
        }
        @CustomType.Setter
        public Builder credentialsPasswordVariable(String credentialsPasswordVariable) {
            if (credentialsPasswordVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "credentialsPasswordVariable");
            }
            this.credentialsPasswordVariable = credentialsPasswordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceSgt(Integer deviceSgt) {
            if (deviceSgt == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "deviceSgt");
            }
            this.deviceSgt = deviceSgt;
            return this;
        }
        @CustomType.Setter
        public Builder deviceSgtVariable(String deviceSgtVariable) {
            if (deviceSgtVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "deviceSgtVariable");
            }
            this.deviceSgtVariable = deviceSgtVariable;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder enableEnforcement(Boolean enableEnforcement) {
            if (enableEnforcement == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "enableEnforcement");
            }
            this.enableEnforcement = enableEnforcement;
            return this;
        }
        @CustomType.Setter
        public Builder enableEnforcementVariable(String enableEnforcementVariable) {
            if (enableEnforcementVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "enableEnforcementVariable");
            }
            this.enableEnforcementVariable = enableEnforcementVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableSxp(Boolean enableSxp) {
            if (enableSxp == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "enableSxp");
            }
            this.enableSxp = enableSxp;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder maximumListenerHoldTime(Integer maximumListenerHoldTime) {
            if (maximumListenerHoldTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "maximumListenerHoldTime");
            }
            this.maximumListenerHoldTime = maximumListenerHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder maximumListenerHoldTimeVariable(String maximumListenerHoldTimeVariable) {
            if (maximumListenerHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "maximumListenerHoldTimeVariable");
            }
            this.maximumListenerHoldTimeVariable = maximumListenerHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder minimumListenerHoldTime(Integer minimumListenerHoldTime) {
            if (minimumListenerHoldTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "minimumListenerHoldTime");
            }
            this.minimumListenerHoldTime = minimumListenerHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder minimumListenerHoldTimeVariable(String minimumListenerHoldTimeVariable) {
            if (minimumListenerHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "minimumListenerHoldTimeVariable");
            }
            this.minimumListenerHoldTimeVariable = minimumListenerHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder speakerHoldTime(Integer speakerHoldTime) {
            if (speakerHoldTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "speakerHoldTime");
            }
            this.speakerHoldTime = speakerHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder speakerHoldTimeVariable(String speakerHoldTimeVariable) {
            if (speakerHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "speakerHoldTimeVariable");
            }
            this.speakerHoldTimeVariable = speakerHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpConnections(List<GetCiscoTrustsecFeatureTemplateSxpConnection> sxpConnections) {
            if (sxpConnections == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpConnections");
            }
            this.sxpConnections = sxpConnections;
            return this;
        }
        public Builder sxpConnections(GetCiscoTrustsecFeatureTemplateSxpConnection... sxpConnections) {
            return sxpConnections(List.of(sxpConnections));
        }
        @CustomType.Setter
        public Builder sxpDefaultPassword(String sxpDefaultPassword) {
            if (sxpDefaultPassword == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpDefaultPassword");
            }
            this.sxpDefaultPassword = sxpDefaultPassword;
            return this;
        }
        @CustomType.Setter
        public Builder sxpDefaultPasswordVariable(String sxpDefaultPasswordVariable) {
            if (sxpDefaultPasswordVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpDefaultPasswordVariable");
            }
            this.sxpDefaultPasswordVariable = sxpDefaultPasswordVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpKeyChain(String sxpKeyChain) {
            if (sxpKeyChain == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpKeyChain");
            }
            this.sxpKeyChain = sxpKeyChain;
            return this;
        }
        @CustomType.Setter
        public Builder sxpKeyChainVariable(String sxpKeyChainVariable) {
            if (sxpKeyChainVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpKeyChainVariable");
            }
            this.sxpKeyChainVariable = sxpKeyChainVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpLogBindingChanges(Boolean sxpLogBindingChanges) {
            if (sxpLogBindingChanges == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpLogBindingChanges");
            }
            this.sxpLogBindingChanges = sxpLogBindingChanges;
            return this;
        }
        @CustomType.Setter
        public Builder sxpLogBindingChangesVariable(String sxpLogBindingChangesVariable) {
            if (sxpLogBindingChangesVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpLogBindingChangesVariable");
            }
            this.sxpLogBindingChangesVariable = sxpLogBindingChangesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpNodeId(String sxpNodeId) {
            if (sxpNodeId == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpNodeId");
            }
            this.sxpNodeId = sxpNodeId;
            return this;
        }
        @CustomType.Setter
        public Builder sxpNodeIdType(String sxpNodeIdType) {
            if (sxpNodeIdType == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpNodeIdType");
            }
            this.sxpNodeIdType = sxpNodeIdType;
            return this;
        }
        @CustomType.Setter
        public Builder sxpNodeIdVariable(String sxpNodeIdVariable) {
            if (sxpNodeIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpNodeIdVariable");
            }
            this.sxpNodeIdVariable = sxpNodeIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpReconciliationPeriod(Integer sxpReconciliationPeriod) {
            if (sxpReconciliationPeriod == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpReconciliationPeriod");
            }
            this.sxpReconciliationPeriod = sxpReconciliationPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder sxpReconciliationPeriodVariable(String sxpReconciliationPeriodVariable) {
            if (sxpReconciliationPeriodVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpReconciliationPeriodVariable");
            }
            this.sxpReconciliationPeriodVariable = sxpReconciliationPeriodVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpRetryPeriod(Integer sxpRetryPeriod) {
            if (sxpRetryPeriod == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpRetryPeriod");
            }
            this.sxpRetryPeriod = sxpRetryPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder sxpRetryPeriodVariable(String sxpRetryPeriodVariable) {
            if (sxpRetryPeriodVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpRetryPeriodVariable");
            }
            this.sxpRetryPeriodVariable = sxpRetryPeriodVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sxpSourceIp(String sxpSourceIp) {
            if (sxpSourceIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpSourceIp");
            }
            this.sxpSourceIp = sxpSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sxpSourceIpVariable(String sxpSourceIpVariable) {
            if (sxpSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "sxpSourceIpVariable");
            }
            this.sxpSourceIpVariable = sxpSourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoTrustsecFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoTrustsecFeatureTemplateResult();
            _resultValue.credentialsId = credentialsId;
            _resultValue.credentialsIdVariable = credentialsIdVariable;
            _resultValue.credentialsPassword = credentialsPassword;
            _resultValue.credentialsPasswordVariable = credentialsPasswordVariable;
            _resultValue.description = description;
            _resultValue.deviceSgt = deviceSgt;
            _resultValue.deviceSgtVariable = deviceSgtVariable;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.enableEnforcement = enableEnforcement;
            _resultValue.enableEnforcementVariable = enableEnforcementVariable;
            _resultValue.enableSxp = enableSxp;
            _resultValue.id = id;
            _resultValue.maximumListenerHoldTime = maximumListenerHoldTime;
            _resultValue.maximumListenerHoldTimeVariable = maximumListenerHoldTimeVariable;
            _resultValue.minimumListenerHoldTime = minimumListenerHoldTime;
            _resultValue.minimumListenerHoldTimeVariable = minimumListenerHoldTimeVariable;
            _resultValue.name = name;
            _resultValue.speakerHoldTime = speakerHoldTime;
            _resultValue.speakerHoldTimeVariable = speakerHoldTimeVariable;
            _resultValue.sxpConnections = sxpConnections;
            _resultValue.sxpDefaultPassword = sxpDefaultPassword;
            _resultValue.sxpDefaultPasswordVariable = sxpDefaultPasswordVariable;
            _resultValue.sxpKeyChain = sxpKeyChain;
            _resultValue.sxpKeyChainVariable = sxpKeyChainVariable;
            _resultValue.sxpLogBindingChanges = sxpLogBindingChanges;
            _resultValue.sxpLogBindingChangesVariable = sxpLogBindingChangesVariable;
            _resultValue.sxpNodeId = sxpNodeId;
            _resultValue.sxpNodeIdType = sxpNodeIdType;
            _resultValue.sxpNodeIdVariable = sxpNodeIdVariable;
            _resultValue.sxpReconciliationPeriod = sxpReconciliationPeriod;
            _resultValue.sxpReconciliationPeriodVariable = sxpReconciliationPeriodVariable;
            _resultValue.sxpRetryPeriod = sxpRetryPeriod;
            _resultValue.sxpRetryPeriodVariable = sxpRetryPeriodVariable;
            _resultValue.sxpSourceIp = sxpSourceIp;
            _resultValue.sxpSourceIpVariable = sxpSourceIpVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
