// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Ipv4AclPolicyDefinitionSequenceMatchEntry {
    /**
     * @return Class map ID
     * 
     */
    private @Nullable String classMapId;
    /**
     * @return Class map version
     * 
     */
    private @Nullable Integer classMapVersion;
    /**
     * @return Destination data IPv4 prefix list ID
     * 
     */
    private @Nullable String destinationDataIpv4PrefixListId;
    /**
     * @return Destination data IPv4 prefix list version
     * 
     */
    private @Nullable Integer destinationDataIpv4PrefixListVersion;
    /**
     * @return Destination IP prefix
     * 
     */
    private @Nullable String destinationIp;
    /**
     * @return Destination ports. Single value (0-65535) or ranges separated by spaces.
     * 
     */
    private @Nullable String destinationPorts;
    /**
     * @return DSCP value
     *   - Range: `0`-`63`
     * 
     */
    private @Nullable Integer dscp;
    /**
     * @return ICMP Message
     * 
     */
    private @Nullable String icmpMessage;
    /**
     * @return Packet length
     *   - Range: `0`-`65535`
     * 
     */
    private @Nullable Integer packetLength;
    /**
     * @return PLP - priority
     *   - Choices: `high`, `low`
     * 
     */
    private @Nullable String priority;
    /**
     * @return Single value (0-255) or multiple values separated by spaces
     * 
     */
    private @Nullable String protocol;
    /**
     * @return Source data IPv4 prefix list ID
     * 
     */
    private @Nullable String sourceDataIpv4PrefixListId;
    /**
     * @return Source data IPv4 prefix list version
     * 
     */
    private @Nullable Integer sourceDataIpv4PrefixListVersion;
    /**
     * @return Source IP prefix
     * 
     */
    private @Nullable String sourceIp;
    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces.
     * 
     */
    private @Nullable String sourcePorts;
    /**
     * @return TCP parameters
     *   - Choices: `syn`
     * 
     */
    private @Nullable String tcp;
    /**
     * @return Type of match entry
     *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
     * 
     */
    private String type;

    private Ipv4AclPolicyDefinitionSequenceMatchEntry() {}
    /**
     * @return Class map ID
     * 
     */
    public Optional<String> classMapId() {
        return Optional.ofNullable(this.classMapId);
    }
    /**
     * @return Class map version
     * 
     */
    public Optional<Integer> classMapVersion() {
        return Optional.ofNullable(this.classMapVersion);
    }
    /**
     * @return Destination data IPv4 prefix list ID
     * 
     */
    public Optional<String> destinationDataIpv4PrefixListId() {
        return Optional.ofNullable(this.destinationDataIpv4PrefixListId);
    }
    /**
     * @return Destination data IPv4 prefix list version
     * 
     */
    public Optional<Integer> destinationDataIpv4PrefixListVersion() {
        return Optional.ofNullable(this.destinationDataIpv4PrefixListVersion);
    }
    /**
     * @return Destination IP prefix
     * 
     */
    public Optional<String> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }
    /**
     * @return Destination ports. Single value (0-65535) or ranges separated by spaces.
     * 
     */
    public Optional<String> destinationPorts() {
        return Optional.ofNullable(this.destinationPorts);
    }
    /**
     * @return DSCP value
     *   - Range: `0`-`63`
     * 
     */
    public Optional<Integer> dscp() {
        return Optional.ofNullable(this.dscp);
    }
    /**
     * @return ICMP Message
     * 
     */
    public Optional<String> icmpMessage() {
        return Optional.ofNullable(this.icmpMessage);
    }
    /**
     * @return Packet length
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Integer> packetLength() {
        return Optional.ofNullable(this.packetLength);
    }
    /**
     * @return PLP - priority
     *   - Choices: `high`, `low`
     * 
     */
    public Optional<String> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Single value (0-255) or multiple values separated by spaces
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }
    /**
     * @return Source data IPv4 prefix list ID
     * 
     */
    public Optional<String> sourceDataIpv4PrefixListId() {
        return Optional.ofNullable(this.sourceDataIpv4PrefixListId);
    }
    /**
     * @return Source data IPv4 prefix list version
     * 
     */
    public Optional<Integer> sourceDataIpv4PrefixListVersion() {
        return Optional.ofNullable(this.sourceDataIpv4PrefixListVersion);
    }
    /**
     * @return Source IP prefix
     * 
     */
    public Optional<String> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }
    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces.
     * 
     */
    public Optional<String> sourcePorts() {
        return Optional.ofNullable(this.sourcePorts);
    }
    /**
     * @return TCP parameters
     *   - Choices: `syn`
     * 
     */
    public Optional<String> tcp() {
        return Optional.ofNullable(this.tcp);
    }
    /**
     * @return Type of match entry
     *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Ipv4AclPolicyDefinitionSequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String classMapId;
        private @Nullable Integer classMapVersion;
        private @Nullable String destinationDataIpv4PrefixListId;
        private @Nullable Integer destinationDataIpv4PrefixListVersion;
        private @Nullable String destinationIp;
        private @Nullable String destinationPorts;
        private @Nullable Integer dscp;
        private @Nullable String icmpMessage;
        private @Nullable Integer packetLength;
        private @Nullable String priority;
        private @Nullable String protocol;
        private @Nullable String sourceDataIpv4PrefixListId;
        private @Nullable Integer sourceDataIpv4PrefixListVersion;
        private @Nullable String sourceIp;
        private @Nullable String sourcePorts;
        private @Nullable String tcp;
        private String type;
        public Builder() {}
        public Builder(Ipv4AclPolicyDefinitionSequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.classMapId = defaults.classMapId;
    	      this.classMapVersion = defaults.classMapVersion;
    	      this.destinationDataIpv4PrefixListId = defaults.destinationDataIpv4PrefixListId;
    	      this.destinationDataIpv4PrefixListVersion = defaults.destinationDataIpv4PrefixListVersion;
    	      this.destinationIp = defaults.destinationIp;
    	      this.destinationPorts = defaults.destinationPorts;
    	      this.dscp = defaults.dscp;
    	      this.icmpMessage = defaults.icmpMessage;
    	      this.packetLength = defaults.packetLength;
    	      this.priority = defaults.priority;
    	      this.protocol = defaults.protocol;
    	      this.sourceDataIpv4PrefixListId = defaults.sourceDataIpv4PrefixListId;
    	      this.sourceDataIpv4PrefixListVersion = defaults.sourceDataIpv4PrefixListVersion;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourcePorts = defaults.sourcePorts;
    	      this.tcp = defaults.tcp;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder classMapId(@Nullable String classMapId) {

            this.classMapId = classMapId;
            return this;
        }
        @CustomType.Setter
        public Builder classMapVersion(@Nullable Integer classMapVersion) {

            this.classMapVersion = classMapVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv4PrefixListId(@Nullable String destinationDataIpv4PrefixListId) {

            this.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv4PrefixListVersion(@Nullable Integer destinationDataIpv4PrefixListVersion) {

            this.destinationDataIpv4PrefixListVersion = destinationDataIpv4PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIp(@Nullable String destinationIp) {

            this.destinationIp = destinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPorts(@Nullable String destinationPorts) {

            this.destinationPorts = destinationPorts;
            return this;
        }
        @CustomType.Setter
        public Builder dscp(@Nullable Integer dscp) {

            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder icmpMessage(@Nullable String icmpMessage) {

            this.icmpMessage = icmpMessage;
            return this;
        }
        @CustomType.Setter
        public Builder packetLength(@Nullable Integer packetLength) {

            this.packetLength = packetLength;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable String priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv4PrefixListId(@Nullable String sourceDataIpv4PrefixListId) {

            this.sourceDataIpv4PrefixListId = sourceDataIpv4PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv4PrefixListVersion(@Nullable Integer sourceDataIpv4PrefixListVersion) {

            this.sourceDataIpv4PrefixListVersion = sourceDataIpv4PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(@Nullable String sourceIp) {

            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePorts(@Nullable String sourcePorts) {

            this.sourcePorts = sourcePorts;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(@Nullable String tcp) {

            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("Ipv4AclPolicyDefinitionSequenceMatchEntry", "type");
            }
            this.type = type;
            return this;
        }
        public Ipv4AclPolicyDefinitionSequenceMatchEntry build() {
            final var _resultValue = new Ipv4AclPolicyDefinitionSequenceMatchEntry();
            _resultValue.classMapId = classMapId;
            _resultValue.classMapVersion = classMapVersion;
            _resultValue.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            _resultValue.destinationDataIpv4PrefixListVersion = destinationDataIpv4PrefixListVersion;
            _resultValue.destinationIp = destinationIp;
            _resultValue.destinationPorts = destinationPorts;
            _resultValue.dscp = dscp;
            _resultValue.icmpMessage = icmpMessage;
            _resultValue.packetLength = packetLength;
            _resultValue.priority = priority;
            _resultValue.protocol = protocol;
            _resultValue.sourceDataIpv4PrefixListId = sourceDataIpv4PrefixListId;
            _resultValue.sourceDataIpv4PrefixListVersion = sourceDataIpv4PrefixListVersion;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourcePorts = sourcePorts;
            _resultValue.tcp = tcp;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
