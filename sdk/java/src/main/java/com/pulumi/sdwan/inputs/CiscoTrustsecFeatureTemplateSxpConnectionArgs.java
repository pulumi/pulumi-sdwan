// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoTrustsecFeatureTemplateSxpConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoTrustsecFeatureTemplateSxpConnectionArgs Empty = new CiscoTrustsecFeatureTemplateSxpConnectionArgs();

    /**
     * Configure Connection Maximum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    @Import(name="maximumHoldTime")
    private @Nullable Output<Integer> maximumHoldTime;

    /**
     * @return Configure Connection Maximum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> maximumHoldTime() {
        return Optional.ofNullable(this.maximumHoldTime);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="maximumHoldTimeVariable")
    private @Nullable Output<String> maximumHoldTimeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> maximumHoldTimeVariable() {
        return Optional.ofNullable(this.maximumHoldTimeVariable);
    }

    /**
     * Configure Connection Minimum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    @Import(name="minimumHoldTime")
    private @Nullable Output<Integer> minimumHoldTime;

    /**
     * @return Configure Connection Minimum hold time &lt;0..65535&gt;
     *   - Range: `0`-`65535`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> minimumHoldTime() {
        return Optional.ofNullable(this.minimumHoldTime);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="minimumHoldTimeVariable")
    private @Nullable Output<String> minimumHoldTimeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> minimumHoldTimeVariable() {
        return Optional.ofNullable(this.minimumHoldTimeVariable);
    }

    /**
     * Define Mode of connection
     *   - Choices: `local`, `peer`
     *   - Default value: `local`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return Define Mode of connection
     *   - Choices: `local`, `peer`
     *   - Default value: `local`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * Define Role of a device &lt;speaker/listener/both&gt;
     *   - Choices: `listener`, `speaker`, `both`
     *   - Default value: `speaker`
     * 
     */
    @Import(name="modeType")
    private @Nullable Output<String> modeType;

    /**
     * @return Define Role of a device &lt;speaker/listener/both&gt;
     *   - Choices: `listener`, `speaker`, `both`
     *   - Default value: `speaker`
     * 
     */
    public Optional<Output<String>> modeType() {
        return Optional.ofNullable(this.modeType);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Configure SXP Peer IP address (IPv4)
     * 
     */
    @Import(name="peerIp")
    private @Nullable Output<String> peerIp;

    /**
     * @return Configure SXP Peer IP address (IPv4)
     * 
     */
    public Optional<Output<String>> peerIp() {
        return Optional.ofNullable(this.peerIp);
    }

    /**
     * Define Preshared Key type
     *   - Choices: `default`, `key-chain`, `none`
     *   - Default value: `none`
     * 
     */
    @Import(name="presharedKey")
    private @Nullable Output<String> presharedKey;

    /**
     * @return Define Preshared Key type
     *   - Choices: `default`, `key-chain`, `none`
     *   - Default value: `none`
     * 
     */
    public Optional<Output<String>> presharedKey() {
        return Optional.ofNullable(this.presharedKey);
    }

    /**
     * Configure SXP Source IP address (IPv4)
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return Configure SXP Source IP address (IPv4)
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="sourceIpVariable")
    private @Nullable Output<String> sourceIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> sourceIpVariable() {
        return Optional.ofNullable(this.sourceIpVariable);
    }

    /**
     * Configure Connection VPN (VRF) ID
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return Configure Connection VPN (VRF) ID
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vpnIdVariable")
    private @Nullable Output<String> vpnIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    private CiscoTrustsecFeatureTemplateSxpConnectionArgs() {}

    private CiscoTrustsecFeatureTemplateSxpConnectionArgs(CiscoTrustsecFeatureTemplateSxpConnectionArgs $) {
        this.maximumHoldTime = $.maximumHoldTime;
        this.maximumHoldTimeVariable = $.maximumHoldTimeVariable;
        this.minimumHoldTime = $.minimumHoldTime;
        this.minimumHoldTimeVariable = $.minimumHoldTimeVariable;
        this.mode = $.mode;
        this.modeType = $.modeType;
        this.optional = $.optional;
        this.peerIp = $.peerIp;
        this.presharedKey = $.presharedKey;
        this.sourceIp = $.sourceIp;
        this.sourceIpVariable = $.sourceIpVariable;
        this.vpnId = $.vpnId;
        this.vpnIdVariable = $.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoTrustsecFeatureTemplateSxpConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoTrustsecFeatureTemplateSxpConnectionArgs $;

        public Builder() {
            $ = new CiscoTrustsecFeatureTemplateSxpConnectionArgs();
        }

        public Builder(CiscoTrustsecFeatureTemplateSxpConnectionArgs defaults) {
            $ = new CiscoTrustsecFeatureTemplateSxpConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param maximumHoldTime Configure Connection Maximum hold time &lt;0..65535&gt;
         *   - Range: `0`-`65535`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder maximumHoldTime(@Nullable Output<Integer> maximumHoldTime) {
            $.maximumHoldTime = maximumHoldTime;
            return this;
        }

        /**
         * @param maximumHoldTime Configure Connection Maximum hold time &lt;0..65535&gt;
         *   - Range: `0`-`65535`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder maximumHoldTime(Integer maximumHoldTime) {
            return maximumHoldTime(Output.of(maximumHoldTime));
        }

        /**
         * @param maximumHoldTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder maximumHoldTimeVariable(@Nullable Output<String> maximumHoldTimeVariable) {
            $.maximumHoldTimeVariable = maximumHoldTimeVariable;
            return this;
        }

        /**
         * @param maximumHoldTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder maximumHoldTimeVariable(String maximumHoldTimeVariable) {
            return maximumHoldTimeVariable(Output.of(maximumHoldTimeVariable));
        }

        /**
         * @param minimumHoldTime Configure Connection Minimum hold time &lt;0..65535&gt;
         *   - Range: `0`-`65535`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder minimumHoldTime(@Nullable Output<Integer> minimumHoldTime) {
            $.minimumHoldTime = minimumHoldTime;
            return this;
        }

        /**
         * @param minimumHoldTime Configure Connection Minimum hold time &lt;0..65535&gt;
         *   - Range: `0`-`65535`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder minimumHoldTime(Integer minimumHoldTime) {
            return minimumHoldTime(Output.of(minimumHoldTime));
        }

        /**
         * @param minimumHoldTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder minimumHoldTimeVariable(@Nullable Output<String> minimumHoldTimeVariable) {
            $.minimumHoldTimeVariable = minimumHoldTimeVariable;
            return this;
        }

        /**
         * @param minimumHoldTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder minimumHoldTimeVariable(String minimumHoldTimeVariable) {
            return minimumHoldTimeVariable(Output.of(minimumHoldTimeVariable));
        }

        /**
         * @param mode Define Mode of connection
         *   - Choices: `local`, `peer`
         *   - Default value: `local`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode Define Mode of connection
         *   - Choices: `local`, `peer`
         *   - Default value: `local`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param modeType Define Role of a device &lt;speaker/listener/both&gt;
         *   - Choices: `listener`, `speaker`, `both`
         *   - Default value: `speaker`
         * 
         * @return builder
         * 
         */
        public Builder modeType(@Nullable Output<String> modeType) {
            $.modeType = modeType;
            return this;
        }

        /**
         * @param modeType Define Role of a device &lt;speaker/listener/both&gt;
         *   - Choices: `listener`, `speaker`, `both`
         *   - Default value: `speaker`
         * 
         * @return builder
         * 
         */
        public Builder modeType(String modeType) {
            return modeType(Output.of(modeType));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param peerIp Configure SXP Peer IP address (IPv4)
         * 
         * @return builder
         * 
         */
        public Builder peerIp(@Nullable Output<String> peerIp) {
            $.peerIp = peerIp;
            return this;
        }

        /**
         * @param peerIp Configure SXP Peer IP address (IPv4)
         * 
         * @return builder
         * 
         */
        public Builder peerIp(String peerIp) {
            return peerIp(Output.of(peerIp));
        }

        /**
         * @param presharedKey Define Preshared Key type
         *   - Choices: `default`, `key-chain`, `none`
         *   - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder presharedKey(@Nullable Output<String> presharedKey) {
            $.presharedKey = presharedKey;
            return this;
        }

        /**
         * @param presharedKey Define Preshared Key type
         *   - Choices: `default`, `key-chain`, `none`
         *   - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder presharedKey(String presharedKey) {
            return presharedKey(Output.of(presharedKey));
        }

        /**
         * @param sourceIp Configure SXP Source IP address (IPv4)
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp Configure SXP Source IP address (IPv4)
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourceIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceIpVariable(@Nullable Output<String> sourceIpVariable) {
            $.sourceIpVariable = sourceIpVariable;
            return this;
        }

        /**
         * @param sourceIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceIpVariable(String sourceIpVariable) {
            return sourceIpVariable(Output.of(sourceIpVariable));
        }

        /**
         * @param vpnId Configure Connection VPN (VRF) ID
         *   - Range: `0`-`65527`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId Configure Connection VPN (VRF) ID
         *   - Range: `0`-`65527`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(@Nullable Output<String> vpnIdVariable) {
            $.vpnIdVariable = vpnIdVariable;
            return this;
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(String vpnIdVariable) {
            return vpnIdVariable(Output.of(vpnIdVariable));
        }

        public CiscoTrustsecFeatureTemplateSxpConnectionArgs build() {
            return $;
        }
    }

}
