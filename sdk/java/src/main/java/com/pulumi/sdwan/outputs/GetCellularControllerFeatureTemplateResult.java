// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCellularControllerFeatureTemplateDataProfile;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCellularControllerFeatureTemplateResult {
    /**
     * @return Cellular interface name
     * 
     */
    private String cellularInterfaceId;
    /**
     * @return Variable name
     * 
     */
    private String cellularInterfaceIdVariable;
    /**
     * @return Data Profile List
     * 
     */
    private List<GetCellularControllerFeatureTemplateDataProfile> dataProfiles;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Enable/Disable Firmware Auto Sim
     * 
     */
    private Boolean firmwareAutoSim;
    /**
     * @return Variable name
     * 
     */
    private String firmwareAutoSimVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Set primary SIM slot
     * 
     */
    private Integer primarySimSlot;
    /**
     * @return Variable name
     * 
     */
    private String primarySimSlotVariable;
    /**
     * @return Set SIM failover retries
     * 
     */
    private Integer simFailoverRetries;
    /**
     * @return Variable name
     * 
     */
    private String simFailoverRetriesVariable;
    /**
     * @return Set SIM failover timeout in minutes
     * 
     */
    private Integer simFailoverTimeout;
    /**
     * @return Variable name
     * 
     */
    private String simFailoverTimeoutVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCellularControllerFeatureTemplateResult() {}
    /**
     * @return Cellular interface name
     * 
     */
    public String cellularInterfaceId() {
        return this.cellularInterfaceId;
    }
    /**
     * @return Variable name
     * 
     */
    public String cellularInterfaceIdVariable() {
        return this.cellularInterfaceIdVariable;
    }
    /**
     * @return Data Profile List
     * 
     */
    public List<GetCellularControllerFeatureTemplateDataProfile> dataProfiles() {
        return this.dataProfiles;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Enable/Disable Firmware Auto Sim
     * 
     */
    public Boolean firmwareAutoSim() {
        return this.firmwareAutoSim;
    }
    /**
     * @return Variable name
     * 
     */
    public String firmwareAutoSimVariable() {
        return this.firmwareAutoSimVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set primary SIM slot
     * 
     */
    public Integer primarySimSlot() {
        return this.primarySimSlot;
    }
    /**
     * @return Variable name
     * 
     */
    public String primarySimSlotVariable() {
        return this.primarySimSlotVariable;
    }
    /**
     * @return Set SIM failover retries
     * 
     */
    public Integer simFailoverRetries() {
        return this.simFailoverRetries;
    }
    /**
     * @return Variable name
     * 
     */
    public String simFailoverRetriesVariable() {
        return this.simFailoverRetriesVariable;
    }
    /**
     * @return Set SIM failover timeout in minutes
     * 
     */
    public Integer simFailoverTimeout() {
        return this.simFailoverTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String simFailoverTimeoutVariable() {
        return this.simFailoverTimeoutVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCellularControllerFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cellularInterfaceId;
        private String cellularInterfaceIdVariable;
        private List<GetCellularControllerFeatureTemplateDataProfile> dataProfiles;
        private String description;
        private List<String> deviceTypes;
        private Boolean firmwareAutoSim;
        private String firmwareAutoSimVariable;
        private String id;
        private String name;
        private Integer primarySimSlot;
        private String primarySimSlotVariable;
        private Integer simFailoverRetries;
        private String simFailoverRetriesVariable;
        private Integer simFailoverTimeout;
        private String simFailoverTimeoutVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetCellularControllerFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cellularInterfaceId = defaults.cellularInterfaceId;
    	      this.cellularInterfaceIdVariable = defaults.cellularInterfaceIdVariable;
    	      this.dataProfiles = defaults.dataProfiles;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.firmwareAutoSim = defaults.firmwareAutoSim;
    	      this.firmwareAutoSimVariable = defaults.firmwareAutoSimVariable;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.primarySimSlot = defaults.primarySimSlot;
    	      this.primarySimSlotVariable = defaults.primarySimSlotVariable;
    	      this.simFailoverRetries = defaults.simFailoverRetries;
    	      this.simFailoverRetriesVariable = defaults.simFailoverRetriesVariable;
    	      this.simFailoverTimeout = defaults.simFailoverTimeout;
    	      this.simFailoverTimeoutVariable = defaults.simFailoverTimeoutVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder cellularInterfaceId(String cellularInterfaceId) {
            if (cellularInterfaceId == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "cellularInterfaceId");
            }
            this.cellularInterfaceId = cellularInterfaceId;
            return this;
        }
        @CustomType.Setter
        public Builder cellularInterfaceIdVariable(String cellularInterfaceIdVariable) {
            if (cellularInterfaceIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "cellularInterfaceIdVariable");
            }
            this.cellularInterfaceIdVariable = cellularInterfaceIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dataProfiles(List<GetCellularControllerFeatureTemplateDataProfile> dataProfiles) {
            if (dataProfiles == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "dataProfiles");
            }
            this.dataProfiles = dataProfiles;
            return this;
        }
        public Builder dataProfiles(GetCellularControllerFeatureTemplateDataProfile... dataProfiles) {
            return dataProfiles(List.of(dataProfiles));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder firmwareAutoSim(Boolean firmwareAutoSim) {
            if (firmwareAutoSim == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "firmwareAutoSim");
            }
            this.firmwareAutoSim = firmwareAutoSim;
            return this;
        }
        @CustomType.Setter
        public Builder firmwareAutoSimVariable(String firmwareAutoSimVariable) {
            if (firmwareAutoSimVariable == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "firmwareAutoSimVariable");
            }
            this.firmwareAutoSimVariable = firmwareAutoSimVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder primarySimSlot(Integer primarySimSlot) {
            if (primarySimSlot == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "primarySimSlot");
            }
            this.primarySimSlot = primarySimSlot;
            return this;
        }
        @CustomType.Setter
        public Builder primarySimSlotVariable(String primarySimSlotVariable) {
            if (primarySimSlotVariable == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "primarySimSlotVariable");
            }
            this.primarySimSlotVariable = primarySimSlotVariable;
            return this;
        }
        @CustomType.Setter
        public Builder simFailoverRetries(Integer simFailoverRetries) {
            if (simFailoverRetries == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "simFailoverRetries");
            }
            this.simFailoverRetries = simFailoverRetries;
            return this;
        }
        @CustomType.Setter
        public Builder simFailoverRetriesVariable(String simFailoverRetriesVariable) {
            if (simFailoverRetriesVariable == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "simFailoverRetriesVariable");
            }
            this.simFailoverRetriesVariable = simFailoverRetriesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder simFailoverTimeout(Integer simFailoverTimeout) {
            if (simFailoverTimeout == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "simFailoverTimeout");
            }
            this.simFailoverTimeout = simFailoverTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder simFailoverTimeoutVariable(String simFailoverTimeoutVariable) {
            if (simFailoverTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "simFailoverTimeoutVariable");
            }
            this.simFailoverTimeoutVariable = simFailoverTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCellularControllerFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCellularControllerFeatureTemplateResult build() {
            final var _resultValue = new GetCellularControllerFeatureTemplateResult();
            _resultValue.cellularInterfaceId = cellularInterfaceId;
            _resultValue.cellularInterfaceIdVariable = cellularInterfaceIdVariable;
            _resultValue.dataProfiles = dataProfiles;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.firmwareAutoSim = firmwareAutoSim;
            _resultValue.firmwareAutoSimVariable = firmwareAutoSimVariable;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.primarySimSlot = primarySimSlot;
            _resultValue.primarySimSlotVariable = primarySimSlotVariable;
            _resultValue.simFailoverRetries = simFailoverRetries;
            _resultValue.simFailoverRetriesVariable = simFailoverRetriesVariable;
            _resultValue.simFailoverTimeout = simFailoverTimeout;
            _resultValue.simFailoverTimeoutVariable = simFailoverTimeoutVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
