// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.CedgeGlobalFeatureTemplateArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.CedgeGlobalFeatureTemplateState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a cEdge Global feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.CedgeGlobalFeatureTemplate;
 * import com.pulumi.sdwan.CedgeGlobalFeatureTemplateArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new CedgeGlobalFeatureTemplate("example", CedgeGlobalFeatureTemplateArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .deviceTypes("vedge-C8000V")
 *             .nat64UdpTimeout(300)
 *             .nat64TcpTimeout(3600)
 *             .httpAuthentication("local")
 *             .sshVersion(2)
 *             .httpServer(true)
 *             .httpsServer(true)
 *             .sourceInterface("e1")
 *             .ipSourceRouting(true)
 *             .arpProxy(true)
 *             .ftpPassive(true)
 *             .rshRcp(true)
 *             .bootp(true)
 *             .domainLookup(true)
 *             .tcpKeepalivesOut(true)
 *             .tcpKeepalivesIn(true)
 *             .tcpSmallServers(true)
 *             .udpSmallServers(true)
 *             .lldp(true)
 *             .cdp(true)
 *             .snmpIfindexPersist(true)
 *             .consoleLogging(true)
 *             .vtyLogging(true)
 *             .lineVty(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * ```sh
 * $ pulumi import sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate")
public class CedgeGlobalFeatureTemplate extends com.pulumi.resources.CustomResource {
    /**
     * Set ARP Proxy
     *   - Default value: `false`
     * 
     */
    @Export(name="arpProxy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> arpProxy;

    /**
     * @return Set ARP Proxy
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> arpProxy() {
        return Codegen.optional(this.arpProxy);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="arpProxyVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> arpProxyVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> arpProxyVariable() {
        return Codegen.optional(this.arpProxyVariable);
    }
    /**
     * Configure Ignore BOOTP
     *   - Default value: `true`
     * 
     */
    @Export(name="bootp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> bootp;

    /**
     * @return Configure Ignore BOOTP
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> bootp() {
        return Codegen.optional(this.bootp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="bootpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bootpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> bootpVariable() {
        return Codegen.optional(this.bootpVariable);
    }
    /**
     * Configure CDP
     *   - Default value: `true`
     * 
     */
    @Export(name="cdp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> cdp;

    /**
     * @return Configure CDP
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> cdp() {
        return Codegen.optional(this.cdp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="cdpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> cdpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> cdpVariable() {
        return Codegen.optional(this.cdpVariable);
    }
    /**
     * Configure Console Logging
     *   - Default value: `true`
     * 
     */
    @Export(name="consoleLogging", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> consoleLogging;

    /**
     * @return Configure Console Logging
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> consoleLogging() {
        return Codegen.optional(this.consoleLogging);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="consoleLoggingVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consoleLoggingVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> consoleLoggingVariable() {
        return Codegen.optional(this.consoleLoggingVariable);
    }
    /**
     * The description of the feature template
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Export(name="deviceTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * Configure Domain-Lookup
     *   - Default value: `false`
     * 
     */
    @Export(name="domainLookup", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> domainLookup;

    /**
     * @return Configure Domain-Lookup
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> domainLookup() {
        return Codegen.optional(this.domainLookup);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="domainLookupVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> domainLookupVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> domainLookupVariable() {
        return Codegen.optional(this.domainLookupVariable);
    }
    /**
     * Set Passive FTP
     *   - Default value: `false`
     * 
     */
    @Export(name="ftpPassive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ftpPassive;

    /**
     * @return Set Passive FTP
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> ftpPassive() {
        return Codegen.optional(this.ftpPassive);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ftpPassiveVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ftpPassiveVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ftpPassiveVariable() {
        return Codegen.optional(this.ftpPassiveVariable);
    }
    /**
     * Set preference for HTTP Authentication
     *   - Choices: `local`, `aaa`
     * 
     */
    @Export(name="httpAuthentication", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpAuthentication;

    /**
     * @return Set preference for HTTP Authentication
     *   - Choices: `local`, `aaa`
     * 
     */
    public Output<Optional<String>> httpAuthentication() {
        return Codegen.optional(this.httpAuthentication);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="httpAuthenticationVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpAuthenticationVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> httpAuthenticationVariable() {
        return Codegen.optional(this.httpAuthenticationVariable);
    }
    /**
     * Set HTTP Server
     *   - Default value: `false`
     * 
     */
    @Export(name="httpServer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> httpServer;

    /**
     * @return Set HTTP Server
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> httpServer() {
        return Codegen.optional(this.httpServer);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="httpServerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> httpServerVariable() {
        return Codegen.optional(this.httpServerVariable);
    }
    /**
     * Set HTTPS Server
     *   - Default value: `false`
     * 
     */
    @Export(name="httpsServer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> httpsServer;

    /**
     * @return Set HTTPS Server
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> httpsServer() {
        return Codegen.optional(this.httpsServer);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="httpsServerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> httpsServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> httpsServerVariable() {
        return Codegen.optional(this.httpsServerVariable);
    }
    /**
     * Set Source Route
     *   - Default value: `false`
     * 
     */
    @Export(name="ipSourceRouting", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ipSourceRouting;

    /**
     * @return Set Source Route
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> ipSourceRouting() {
        return Codegen.optional(this.ipSourceRouting);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipSourceRoutingVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipSourceRoutingVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipSourceRoutingVariable() {
        return Codegen.optional(this.ipSourceRoutingVariable);
    }
    /**
     * Configure Telnet (Outbound)
     *   - Default value: `false`
     * 
     */
    @Export(name="lineVty", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> lineVty;

    /**
     * @return Configure Telnet (Outbound)
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> lineVty() {
        return Codegen.optional(this.lineVty);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="lineVtyVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lineVtyVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> lineVtyVariable() {
        return Codegen.optional(this.lineVtyVariable);
    }
    /**
     * Configure LLDP
     *   - Default value: `true`
     * 
     */
    @Export(name="lldp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> lldp;

    /**
     * @return Configure LLDP
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> lldp() {
        return Codegen.optional(this.lldp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="lldpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> lldpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> lldpVariable() {
        return Codegen.optional(this.lldpVariable);
    }
    /**
     * The name of the feature template
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Set NAT64 TCP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `3600`
     * 
     */
    @Export(name="nat64TcpTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> nat64TcpTimeout;

    /**
     * @return Set NAT64 TCP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `3600`
     * 
     */
    public Output<Optional<Integer>> nat64TcpTimeout() {
        return Codegen.optional(this.nat64TcpTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="nat64TcpTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nat64TcpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> nat64TcpTimeoutVariable() {
        return Codegen.optional(this.nat64TcpTimeoutVariable);
    }
    /**
     * Set NAT64 UDP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `300`
     * 
     */
    @Export(name="nat64UdpTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> nat64UdpTimeout;

    /**
     * @return Set NAT64 UDP session timeout, in seconds
     *   - Range: `1`-`536870`
     *   - Default value: `300`
     * 
     */
    public Output<Optional<Integer>> nat64UdpTimeout() {
        return Codegen.optional(this.nat64UdpTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="nat64UdpTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> nat64UdpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> nat64UdpTimeoutVariable() {
        return Codegen.optional(this.nat64UdpTimeoutVariable);
    }
    /**
     * Set RSH/RCP
     *   - Default value: `false`
     * 
     */
    @Export(name="rshRcp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> rshRcp;

    /**
     * @return Set RSH/RCP
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> rshRcp() {
        return Codegen.optional(this.rshRcp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="rshRcpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> rshRcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> rshRcpVariable() {
        return Codegen.optional(this.rshRcpVariable);
    }
    /**
     * Configure SNMP Ifindex Persist
     *   - Default value: `true`
     * 
     */
    @Export(name="snmpIfindexPersist", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> snmpIfindexPersist;

    /**
     * @return Configure SNMP Ifindex Persist
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> snmpIfindexPersist() {
        return Codegen.optional(this.snmpIfindexPersist);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="snmpIfindexPersistVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> snmpIfindexPersistVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> snmpIfindexPersistVariable() {
        return Codegen.optional(this.snmpIfindexPersistVariable);
    }
    /**
     * Specify interface for source address in all HTTP(S) client connections
     * 
     */
    @Export(name="sourceInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterface;

    /**
     * @return Specify interface for source address in all HTTP(S) client connections
     * 
     */
    public Output<Optional<String>> sourceInterface() {
        return Codegen.optional(this.sourceInterface);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="sourceInterfaceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> sourceInterfaceVariable() {
        return Codegen.optional(this.sourceInterfaceVariable);
    }
    /**
     * Set SSH version
     *   - Range: `1`-`2`
     * 
     */
    @Export(name="sshVersion", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sshVersion;

    /**
     * @return Set SSH version
     *   - Range: `1`-`2`
     * 
     */
    public Output<Optional<Integer>> sshVersion() {
        return Codegen.optional(this.sshVersion);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="sshVersionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sshVersionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> sshVersionVariable() {
        return Codegen.optional(this.sshVersionVariable);
    }
    /**
     * Configure tcp-keepalives-in
     *   - Default value: `true`
     * 
     */
    @Export(name="tcpKeepalivesIn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tcpKeepalivesIn;

    /**
     * @return Configure tcp-keepalives-in
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tcpKeepalivesIn() {
        return Codegen.optional(this.tcpKeepalivesIn);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpKeepalivesInVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpKeepalivesInVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpKeepalivesInVariable() {
        return Codegen.optional(this.tcpKeepalivesInVariable);
    }
    /**
     * Configure tcp-keepalives-out
     *   - Default value: `true`
     * 
     */
    @Export(name="tcpKeepalivesOut", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tcpKeepalivesOut;

    /**
     * @return Configure tcp-keepalives-out
     *   - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tcpKeepalivesOut() {
        return Codegen.optional(this.tcpKeepalivesOut);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpKeepalivesOutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpKeepalivesOutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpKeepalivesOutVariable() {
        return Codegen.optional(this.tcpKeepalivesOutVariable);
    }
    /**
     * Configure tcp-small-servers
     *   - Default value: `false`
     * 
     */
    @Export(name="tcpSmallServers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tcpSmallServers;

    /**
     * @return Configure tcp-small-servers
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tcpSmallServers() {
        return Codegen.optional(this.tcpSmallServers);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpSmallServersVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpSmallServersVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpSmallServersVariable() {
        return Codegen.optional(this.tcpSmallServersVariable);
    }
    /**
     * The template type
     * 
     */
    @Export(name="templateType", refs={String.class}, tree="[0]")
    private Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Output<String> templateType() {
        return this.templateType;
    }
    /**
     * Configure udp-small-servers
     *   - Default value: `false`
     * 
     */
    @Export(name="udpSmallServers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> udpSmallServers;

    /**
     * @return Configure udp-small-servers
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> udpSmallServers() {
        return Codegen.optional(this.udpSmallServers);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="udpSmallServersVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> udpSmallServersVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> udpSmallServersVariable() {
        return Codegen.optional(this.udpSmallServersVariable);
    }
    /**
     * The version of the feature template
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }
    /**
     * Configure VTY Line Logging
     *   - Default value: `false`
     * 
     */
    @Export(name="vtyLogging", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> vtyLogging;

    /**
     * @return Configure VTY Line Logging
     *   - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> vtyLogging() {
        return Codegen.optional(this.vtyLogging);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="vtyLoggingVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vtyLoggingVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> vtyLoggingVariable() {
        return Codegen.optional(this.vtyLoggingVariable);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CedgeGlobalFeatureTemplate(java.lang.String name) {
        this(name, CedgeGlobalFeatureTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CedgeGlobalFeatureTemplate(java.lang.String name, CedgeGlobalFeatureTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CedgeGlobalFeatureTemplate(java.lang.String name, CedgeGlobalFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CedgeGlobalFeatureTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable CedgeGlobalFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/cedgeGlobalFeatureTemplate:CedgeGlobalFeatureTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static CedgeGlobalFeatureTemplateArgs makeArgs(CedgeGlobalFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CedgeGlobalFeatureTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CedgeGlobalFeatureTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable CedgeGlobalFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CedgeGlobalFeatureTemplate(name, id, state, options);
    }
}
