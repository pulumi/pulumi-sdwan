// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDnsSecurityPolicyDefinitionTargetVpn {
    /**
     * @return Only relevant when `umbrellaDnsDefault` is `false`
     * 
     */
    private String customDnsServerIp;
    /**
     * @return Should the local domain bypass list be enabled
     * 
     */
    private Boolean localDomainBypassEnabled;
    /**
     * @return Should use umbrella as DNS Server
     * 
     */
    private Boolean umbrellaDnsDefault;
    /**
     * @return VPN ID&#39;s separated by Comma
     * 
     */
    private List<String> vpnIds;

    private GetDnsSecurityPolicyDefinitionTargetVpn() {}
    /**
     * @return Only relevant when `umbrellaDnsDefault` is `false`
     * 
     */
    public String customDnsServerIp() {
        return this.customDnsServerIp;
    }
    /**
     * @return Should the local domain bypass list be enabled
     * 
     */
    public Boolean localDomainBypassEnabled() {
        return this.localDomainBypassEnabled;
    }
    /**
     * @return Should use umbrella as DNS Server
     * 
     */
    public Boolean umbrellaDnsDefault() {
        return this.umbrellaDnsDefault;
    }
    /**
     * @return VPN ID&#39;s separated by Comma
     * 
     */
    public List<String> vpnIds() {
        return this.vpnIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsSecurityPolicyDefinitionTargetVpn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String customDnsServerIp;
        private Boolean localDomainBypassEnabled;
        private Boolean umbrellaDnsDefault;
        private List<String> vpnIds;
        public Builder() {}
        public Builder(GetDnsSecurityPolicyDefinitionTargetVpn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customDnsServerIp = defaults.customDnsServerIp;
    	      this.localDomainBypassEnabled = defaults.localDomainBypassEnabled;
    	      this.umbrellaDnsDefault = defaults.umbrellaDnsDefault;
    	      this.vpnIds = defaults.vpnIds;
        }

        @CustomType.Setter
        public Builder customDnsServerIp(String customDnsServerIp) {
            if (customDnsServerIp == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionTargetVpn", "customDnsServerIp");
            }
            this.customDnsServerIp = customDnsServerIp;
            return this;
        }
        @CustomType.Setter
        public Builder localDomainBypassEnabled(Boolean localDomainBypassEnabled) {
            if (localDomainBypassEnabled == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionTargetVpn", "localDomainBypassEnabled");
            }
            this.localDomainBypassEnabled = localDomainBypassEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaDnsDefault(Boolean umbrellaDnsDefault) {
            if (umbrellaDnsDefault == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionTargetVpn", "umbrellaDnsDefault");
            }
            this.umbrellaDnsDefault = umbrellaDnsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIds(List<String> vpnIds) {
            if (vpnIds == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionTargetVpn", "vpnIds");
            }
            this.vpnIds = vpnIds;
            return this;
        }
        public Builder vpnIds(String... vpnIds) {
            return vpnIds(List.of(vpnIds));
        }
        public GetDnsSecurityPolicyDefinitionTargetVpn build() {
            final var _resultValue = new GetDnsSecurityPolicyDefinitionTargetVpn();
            _resultValue.customDnsServerIp = customDnsServerIp;
            _resultValue.localDomainBypassEnabled = localDomainBypassEnabled;
            _resultValue.umbrellaDnsDefault = umbrellaDnsDefault;
            _resultValue.vpnIds = vpnIds;
            return _resultValue;
        }
    }
}
