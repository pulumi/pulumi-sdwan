// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnFeatureTemplateNat64PoolArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnFeatureTemplateNat64PoolArgs Empty = new CiscoVpnFeatureTemplateNat64PoolArgs();

    /**
     * Ending IP address of NAT pool range
     * 
     */
    @Import(name="endAddress")
    private @Nullable Output<String> endAddress;

    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    public Optional<Output<String>> endAddress() {
        return Optional.ofNullable(this.endAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endAddressVariable")
    private @Nullable Output<String> endAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endAddressVariable() {
        return Optional.ofNullable(this.endAddressVariable);
    }

    /**
     * Enable Route Leaking from Global VPN to this Service VPN
     *   - Default value: `false`
     * 
     */
    @Import(name="leakFromGlobal")
    private @Nullable Output<Boolean> leakFromGlobal;

    /**
     * @return Enable Route Leaking from Global VPN to this Service VPN
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> leakFromGlobal() {
        return Optional.ofNullable(this.leakFromGlobal);
    }

    /**
     * Select protocol for route leaking
     *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
     * 
     */
    @Import(name="leakFromGlobalProtocol")
    private @Nullable Output<String> leakFromGlobalProtocol;

    /**
     * @return Select protocol for route leaking
     *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
     * 
     */
    public Optional<Output<String>> leakFromGlobalProtocol() {
        return Optional.ofNullable(this.leakFromGlobalProtocol);
    }

    /**
     * Enable Route Leaking from this Service VPN to Global VPN
     *   - Default value: `false`
     * 
     */
    @Import(name="leakToGlobal")
    private @Nullable Output<Boolean> leakToGlobal;

    /**
     * @return Enable Route Leaking from this Service VPN to Global VPN
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> leakToGlobal() {
        return Optional.ofNullable(this.leakToGlobal);
    }

    /**
     * NAT64 Pool name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return NAT64 Pool name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * NAT 64 Overload Option
     *   - Default value: `false`
     * 
     */
    @Import(name="overload")
    private @Nullable Output<Boolean> overload;

    /**
     * @return NAT 64 Overload Option
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> overload() {
        return Optional.ofNullable(this.overload);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="overloadVariable")
    private @Nullable Output<String> overloadVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> overloadVariable() {
        return Optional.ofNullable(this.overloadVariable);
    }

    /**
     * Starting IP address of NAT pool range
     * 
     */
    @Import(name="startAddress")
    private @Nullable Output<String> startAddress;

    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    public Optional<Output<String>> startAddress() {
        return Optional.ofNullable(this.startAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="startAddressVariable")
    private @Nullable Output<String> startAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> startAddressVariable() {
        return Optional.ofNullable(this.startAddressVariable);
    }

    private CiscoVpnFeatureTemplateNat64PoolArgs() {}

    private CiscoVpnFeatureTemplateNat64PoolArgs(CiscoVpnFeatureTemplateNat64PoolArgs $) {
        this.endAddress = $.endAddress;
        this.endAddressVariable = $.endAddressVariable;
        this.leakFromGlobal = $.leakFromGlobal;
        this.leakFromGlobalProtocol = $.leakFromGlobalProtocol;
        this.leakToGlobal = $.leakToGlobal;
        this.name = $.name;
        this.optional = $.optional;
        this.overload = $.overload;
        this.overloadVariable = $.overloadVariable;
        this.startAddress = $.startAddress;
        this.startAddressVariable = $.startAddressVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnFeatureTemplateNat64PoolArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnFeatureTemplateNat64PoolArgs $;

        public Builder() {
            $ = new CiscoVpnFeatureTemplateNat64PoolArgs();
        }

        public Builder(CiscoVpnFeatureTemplateNat64PoolArgs defaults) {
            $ = new CiscoVpnFeatureTemplateNat64PoolArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param endAddress Ending IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder endAddress(@Nullable Output<String> endAddress) {
            $.endAddress = endAddress;
            return this;
        }

        /**
         * @param endAddress Ending IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder endAddress(String endAddress) {
            return endAddress(Output.of(endAddress));
        }

        /**
         * @param endAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endAddressVariable(@Nullable Output<String> endAddressVariable) {
            $.endAddressVariable = endAddressVariable;
            return this;
        }

        /**
         * @param endAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endAddressVariable(String endAddressVariable) {
            return endAddressVariable(Output.of(endAddressVariable));
        }

        /**
         * @param leakFromGlobal Enable Route Leaking from Global VPN to this Service VPN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder leakFromGlobal(@Nullable Output<Boolean> leakFromGlobal) {
            $.leakFromGlobal = leakFromGlobal;
            return this;
        }

        /**
         * @param leakFromGlobal Enable Route Leaking from Global VPN to this Service VPN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder leakFromGlobal(Boolean leakFromGlobal) {
            return leakFromGlobal(Output.of(leakFromGlobal));
        }

        /**
         * @param leakFromGlobalProtocol Select protocol for route leaking
         *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
         * 
         * @return builder
         * 
         */
        public Builder leakFromGlobalProtocol(@Nullable Output<String> leakFromGlobalProtocol) {
            $.leakFromGlobalProtocol = leakFromGlobalProtocol;
            return this;
        }

        /**
         * @param leakFromGlobalProtocol Select protocol for route leaking
         *   - Choices: `all`, `static`, `mobile`, `connected`, `rip`, `odr`
         * 
         * @return builder
         * 
         */
        public Builder leakFromGlobalProtocol(String leakFromGlobalProtocol) {
            return leakFromGlobalProtocol(Output.of(leakFromGlobalProtocol));
        }

        /**
         * @param leakToGlobal Enable Route Leaking from this Service VPN to Global VPN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder leakToGlobal(@Nullable Output<Boolean> leakToGlobal) {
            $.leakToGlobal = leakToGlobal;
            return this;
        }

        /**
         * @param leakToGlobal Enable Route Leaking from this Service VPN to Global VPN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder leakToGlobal(Boolean leakToGlobal) {
            return leakToGlobal(Output.of(leakToGlobal));
        }

        /**
         * @param name NAT64 Pool name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name NAT64 Pool name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param overload NAT 64 Overload Option
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder overload(@Nullable Output<Boolean> overload) {
            $.overload = overload;
            return this;
        }

        /**
         * @param overload NAT 64 Overload Option
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder overload(Boolean overload) {
            return overload(Output.of(overload));
        }

        /**
         * @param overloadVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder overloadVariable(@Nullable Output<String> overloadVariable) {
            $.overloadVariable = overloadVariable;
            return this;
        }

        /**
         * @param overloadVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder overloadVariable(String overloadVariable) {
            return overloadVariable(Output.of(overloadVariable));
        }

        /**
         * @param startAddress Starting IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder startAddress(@Nullable Output<String> startAddress) {
            $.startAddress = startAddress;
            return this;
        }

        /**
         * @param startAddress Starting IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder startAddress(String startAddress) {
            return startAddress(Output.of(startAddress));
        }

        /**
         * @param startAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder startAddressVariable(@Nullable Output<String> startAddressVariable) {
            $.startAddressVariable = startAddressVariable;
            return this;
        }

        /**
         * @param startAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder startAddressVariable(String startAddressVariable) {
            return startAddressVariable(Output.of(startAddressVariable));
        }

        public CiscoVpnFeatureTemplateNat64PoolArgs build() {
            return $;
        }
    }

}
