// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportManagementVpnFeatureIpv4StaticRouteNextHop;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportManagementVpnFeatureIpv4StaticRoute {
    /**
     * @return Administrative distance
     * 
     */
    private Integer administrativeDistance;
    /**
     * @return Variable name
     * 
     */
    private String administrativeDistanceVariable;
    /**
     * @return Gateway
     * 
     */
    private String gateway;
    /**
     * @return IP Address
     * 
     */
    private String networkAddress;
    /**
     * @return Variable name
     * 
     */
    private String networkAddressVariable;
    /**
     * @return IPv4 Route Gateway Next Hop
     * 
     */
    private List<GetTransportManagementVpnFeatureIpv4StaticRouteNextHop> nextHops;
    /**
     * @return Subnet Mask
     * 
     */
    private String subnetMask;
    /**
     * @return Variable name
     * 
     */
    private String subnetMaskVariable;

    private GetTransportManagementVpnFeatureIpv4StaticRoute() {}
    /**
     * @return Administrative distance
     * 
     */
    public Integer administrativeDistance() {
        return this.administrativeDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String administrativeDistanceVariable() {
        return this.administrativeDistanceVariable;
    }
    /**
     * @return Gateway
     * 
     */
    public String gateway() {
        return this.gateway;
    }
    /**
     * @return IP Address
     * 
     */
    public String networkAddress() {
        return this.networkAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String networkAddressVariable() {
        return this.networkAddressVariable;
    }
    /**
     * @return IPv4 Route Gateway Next Hop
     * 
     */
    public List<GetTransportManagementVpnFeatureIpv4StaticRouteNextHop> nextHops() {
        return this.nextHops;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String subnetMask() {
        return this.subnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String subnetMaskVariable() {
        return this.subnetMaskVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportManagementVpnFeatureIpv4StaticRoute defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer administrativeDistance;
        private String administrativeDistanceVariable;
        private String gateway;
        private String networkAddress;
        private String networkAddressVariable;
        private List<GetTransportManagementVpnFeatureIpv4StaticRouteNextHop> nextHops;
        private String subnetMask;
        private String subnetMaskVariable;
        public Builder() {}
        public Builder(GetTransportManagementVpnFeatureIpv4StaticRoute defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.administrativeDistance = defaults.administrativeDistance;
    	      this.administrativeDistanceVariable = defaults.administrativeDistanceVariable;
    	      this.gateway = defaults.gateway;
    	      this.networkAddress = defaults.networkAddress;
    	      this.networkAddressVariable = defaults.networkAddressVariable;
    	      this.nextHops = defaults.nextHops;
    	      this.subnetMask = defaults.subnetMask;
    	      this.subnetMaskVariable = defaults.subnetMaskVariable;
        }

        @CustomType.Setter
        public Builder administrativeDistance(Integer administrativeDistance) {
            if (administrativeDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "administrativeDistance");
            }
            this.administrativeDistance = administrativeDistance;
            return this;
        }
        @CustomType.Setter
        public Builder administrativeDistanceVariable(String administrativeDistanceVariable) {
            if (administrativeDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "administrativeDistanceVariable");
            }
            this.administrativeDistanceVariable = administrativeDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder gateway(String gateway) {
            if (gateway == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "gateway");
            }
            this.gateway = gateway;
            return this;
        }
        @CustomType.Setter
        public Builder networkAddress(String networkAddress) {
            if (networkAddress == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "networkAddress");
            }
            this.networkAddress = networkAddress;
            return this;
        }
        @CustomType.Setter
        public Builder networkAddressVariable(String networkAddressVariable) {
            if (networkAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "networkAddressVariable");
            }
            this.networkAddressVariable = networkAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nextHops(List<GetTransportManagementVpnFeatureIpv4StaticRouteNextHop> nextHops) {
            if (nextHops == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "nextHops");
            }
            this.nextHops = nextHops;
            return this;
        }
        public Builder nextHops(GetTransportManagementVpnFeatureIpv4StaticRouteNextHop... nextHops) {
            return nextHops(List.of(nextHops));
        }
        @CustomType.Setter
        public Builder subnetMask(String subnetMask) {
            if (subnetMask == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "subnetMask");
            }
            this.subnetMask = subnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder subnetMaskVariable(String subnetMaskVariable) {
            if (subnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnFeatureIpv4StaticRoute", "subnetMaskVariable");
            }
            this.subnetMaskVariable = subnetMaskVariable;
            return this;
        }
        public GetTransportManagementVpnFeatureIpv4StaticRoute build() {
            final var _resultValue = new GetTransportManagementVpnFeatureIpv4StaticRoute();
            _resultValue.administrativeDistance = administrativeDistance;
            _resultValue.administrativeDistanceVariable = administrativeDistanceVariable;
            _resultValue.gateway = gateway;
            _resultValue.networkAddress = networkAddress;
            _resultValue.networkAddressVariable = networkAddressVariable;
            _resultValue.nextHops = nextHops;
            _resultValue.subnetMask = subnetMask;
            _resultValue.subnetMaskVariable = subnetMaskVariable;
            return _resultValue;
        }
    }
}
