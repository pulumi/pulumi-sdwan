// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateAddressFamily;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateIpv4Neighbor;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateIpv4RouteTarget;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateIpv6Neighbor;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateIpv6RouteTarget;
import com.pulumi.sdwan.outputs.GetCiscoBgpFeatureTemplateMplsInterface;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoBgpFeatureTemplateResult {
    /**
     * @return Set BGP address family
     * 
     */
    private List<GetCiscoBgpFeatureTemplateAddressFamily> addressFamilies;
    /**
     * @return Compare MEDs from all ASs when selecting active BGP paths
     * 
     */
    private Boolean alwaysCompareMed;
    /**
     * @return Variable name
     * 
     */
    private String alwaysCompareMedVariable;
    /**
     * @return Set autonomous system number \n\n or \n\n
     * 
     */
    private String asNumber;
    /**
     * @return Variable name
     * 
     */
    private String asNumberVariable;
    /**
     * @return Compare router IDs when selecting active BGP paths
     * 
     */
    private Boolean compareRouterId;
    /**
     * @return Variable name
     * 
     */
    private String compareRouterIdVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return Compare MEDs from all routes from same AS when selecting active BGP paths
     * 
     */
    private Boolean deterministicMed;
    /**
     * @return Variable name
     * 
     */
    private String deterministicMedVariable;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Set administrative distance for external BGP routes
     * 
     */
    private Integer distanceExternal;
    /**
     * @return Variable name
     * 
     */
    private String distanceExternalVariable;
    /**
     * @return Set administrative distance for internal BGP routes
     * 
     */
    private Integer distanceInternal;
    /**
     * @return Variable name
     * 
     */
    private String distanceInternalVariable;
    /**
     * @return Set administrative distance for local BGP routes
     * 
     */
    private Integer distanceLocal;
    /**
     * @return Variable name
     * 
     */
    private String distanceLocalVariable;
    /**
     * @return Set the interval when BGP considers a neighbor to be down
     * 
     */
    private Integer holdtime;
    /**
     * @return Variable name
     * 
     */
    private String holdtimeVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Set BGP neighbors
     * 
     */
    private List<GetCiscoBgpFeatureTemplateIpv4Neighbor> ipv4Neighbors;
    /**
     * @return Router Target for IPV4
     * 
     */
    private List<GetCiscoBgpFeatureTemplateIpv4RouteTarget> ipv4RouteTargets;
    /**
     * @return Set BGP IPv6 neighbors
     * 
     */
    private List<GetCiscoBgpFeatureTemplateIpv6Neighbor> ipv6Neighbors;
    /**
     * @return Router Target for IPV6
     * 
     */
    private List<GetCiscoBgpFeatureTemplateIpv6RouteTarget> ipv6RouteTargets;
    /**
     * @return Set how often keepalive messages are sent to BGP peer
     * 
     */
    private Integer keepalive;
    /**
     * @return Variable name
     * 
     */
    private String keepaliveVariable;
    /**
     * @return If path has no MED, consider it to be worst path when selecting active BGP paths
     * 
     */
    private Boolean missingMedWorst;
    /**
     * @return Variable name
     * 
     */
    private String missingMedWorstVariable;
    /**
     * @return MPLS BGP Interface
     * 
     */
    private List<GetCiscoBgpFeatureTemplateMplsInterface> mplsInterfaces;
    /**
     * @return Ignore AS for multipath selection
     * 
     */
    private Boolean multipathRelax;
    /**
     * @return Variable name
     * 
     */
    private String multipathRelaxVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Propagate AS Path
     * 
     */
    private Boolean propagateAspath;
    /**
     * @return Variable name
     * 
     */
    private String propagateAspathVariable;
    /**
     * @return Propagate Community
     * 
     */
    private Boolean propagateCommunity;
    /**
     * @return Variable name
     * 
     */
    private String propagateCommunityVariable;
    /**
     * @return Configure BGP router identifier
     * 
     */
    private String routerId;
    /**
     * @return Variable name
     * 
     */
    private String routerIdVariable;
    /**
     * @return Enable or disable BGP
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoBgpFeatureTemplateResult() {}
    /**
     * @return Set BGP address family
     * 
     */
    public List<GetCiscoBgpFeatureTemplateAddressFamily> addressFamilies() {
        return this.addressFamilies;
    }
    /**
     * @return Compare MEDs from all ASs when selecting active BGP paths
     * 
     */
    public Boolean alwaysCompareMed() {
        return this.alwaysCompareMed;
    }
    /**
     * @return Variable name
     * 
     */
    public String alwaysCompareMedVariable() {
        return this.alwaysCompareMedVariable;
    }
    /**
     * @return Set autonomous system number \n\n or \n\n
     * 
     */
    public String asNumber() {
        return this.asNumber;
    }
    /**
     * @return Variable name
     * 
     */
    public String asNumberVariable() {
        return this.asNumberVariable;
    }
    /**
     * @return Compare router IDs when selecting active BGP paths
     * 
     */
    public Boolean compareRouterId() {
        return this.compareRouterId;
    }
    /**
     * @return Variable name
     * 
     */
    public String compareRouterIdVariable() {
        return this.compareRouterIdVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Compare MEDs from all routes from same AS when selecting active BGP paths
     * 
     */
    public Boolean deterministicMed() {
        return this.deterministicMed;
    }
    /**
     * @return Variable name
     * 
     */
    public String deterministicMedVariable() {
        return this.deterministicMedVariable;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Set administrative distance for external BGP routes
     * 
     */
    public Integer distanceExternal() {
        return this.distanceExternal;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceExternalVariable() {
        return this.distanceExternalVariable;
    }
    /**
     * @return Set administrative distance for internal BGP routes
     * 
     */
    public Integer distanceInternal() {
        return this.distanceInternal;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceInternalVariable() {
        return this.distanceInternalVariable;
    }
    /**
     * @return Set administrative distance for local BGP routes
     * 
     */
    public Integer distanceLocal() {
        return this.distanceLocal;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceLocalVariable() {
        return this.distanceLocalVariable;
    }
    /**
     * @return Set the interval when BGP considers a neighbor to be down
     * 
     */
    public Integer holdtime() {
        return this.holdtime;
    }
    /**
     * @return Variable name
     * 
     */
    public String holdtimeVariable() {
        return this.holdtimeVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set BGP neighbors
     * 
     */
    public List<GetCiscoBgpFeatureTemplateIpv4Neighbor> ipv4Neighbors() {
        return this.ipv4Neighbors;
    }
    /**
     * @return Router Target for IPV4
     * 
     */
    public List<GetCiscoBgpFeatureTemplateIpv4RouteTarget> ipv4RouteTargets() {
        return this.ipv4RouteTargets;
    }
    /**
     * @return Set BGP IPv6 neighbors
     * 
     */
    public List<GetCiscoBgpFeatureTemplateIpv6Neighbor> ipv6Neighbors() {
        return this.ipv6Neighbors;
    }
    /**
     * @return Router Target for IPV6
     * 
     */
    public List<GetCiscoBgpFeatureTemplateIpv6RouteTarget> ipv6RouteTargets() {
        return this.ipv6RouteTargets;
    }
    /**
     * @return Set how often keepalive messages are sent to BGP peer
     * 
     */
    public Integer keepalive() {
        return this.keepalive;
    }
    /**
     * @return Variable name
     * 
     */
    public String keepaliveVariable() {
        return this.keepaliveVariable;
    }
    /**
     * @return If path has no MED, consider it to be worst path when selecting active BGP paths
     * 
     */
    public Boolean missingMedWorst() {
        return this.missingMedWorst;
    }
    /**
     * @return Variable name
     * 
     */
    public String missingMedWorstVariable() {
        return this.missingMedWorstVariable;
    }
    /**
     * @return MPLS BGP Interface
     * 
     */
    public List<GetCiscoBgpFeatureTemplateMplsInterface> mplsInterfaces() {
        return this.mplsInterfaces;
    }
    /**
     * @return Ignore AS for multipath selection
     * 
     */
    public Boolean multipathRelax() {
        return this.multipathRelax;
    }
    /**
     * @return Variable name
     * 
     */
    public String multipathRelaxVariable() {
        return this.multipathRelaxVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Propagate AS Path
     * 
     */
    public Boolean propagateAspath() {
        return this.propagateAspath;
    }
    /**
     * @return Variable name
     * 
     */
    public String propagateAspathVariable() {
        return this.propagateAspathVariable;
    }
    /**
     * @return Propagate Community
     * 
     */
    public Boolean propagateCommunity() {
        return this.propagateCommunity;
    }
    /**
     * @return Variable name
     * 
     */
    public String propagateCommunityVariable() {
        return this.propagateCommunityVariable;
    }
    /**
     * @return Configure BGP router identifier
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return Variable name
     * 
     */
    public String routerIdVariable() {
        return this.routerIdVariable;
    }
    /**
     * @return Enable or disable BGP
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoBgpFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCiscoBgpFeatureTemplateAddressFamily> addressFamilies;
        private Boolean alwaysCompareMed;
        private String alwaysCompareMedVariable;
        private String asNumber;
        private String asNumberVariable;
        private Boolean compareRouterId;
        private String compareRouterIdVariable;
        private String description;
        private Boolean deterministicMed;
        private String deterministicMedVariable;
        private List<String> deviceTypes;
        private Integer distanceExternal;
        private String distanceExternalVariable;
        private Integer distanceInternal;
        private String distanceInternalVariable;
        private Integer distanceLocal;
        private String distanceLocalVariable;
        private Integer holdtime;
        private String holdtimeVariable;
        private String id;
        private List<GetCiscoBgpFeatureTemplateIpv4Neighbor> ipv4Neighbors;
        private List<GetCiscoBgpFeatureTemplateIpv4RouteTarget> ipv4RouteTargets;
        private List<GetCiscoBgpFeatureTemplateIpv6Neighbor> ipv6Neighbors;
        private List<GetCiscoBgpFeatureTemplateIpv6RouteTarget> ipv6RouteTargets;
        private Integer keepalive;
        private String keepaliveVariable;
        private Boolean missingMedWorst;
        private String missingMedWorstVariable;
        private List<GetCiscoBgpFeatureTemplateMplsInterface> mplsInterfaces;
        private Boolean multipathRelax;
        private String multipathRelaxVariable;
        private String name;
        private Boolean propagateAspath;
        private String propagateAspathVariable;
        private Boolean propagateCommunity;
        private String propagateCommunityVariable;
        private String routerId;
        private String routerIdVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoBgpFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressFamilies = defaults.addressFamilies;
    	      this.alwaysCompareMed = defaults.alwaysCompareMed;
    	      this.alwaysCompareMedVariable = defaults.alwaysCompareMedVariable;
    	      this.asNumber = defaults.asNumber;
    	      this.asNumberVariable = defaults.asNumberVariable;
    	      this.compareRouterId = defaults.compareRouterId;
    	      this.compareRouterIdVariable = defaults.compareRouterIdVariable;
    	      this.description = defaults.description;
    	      this.deterministicMed = defaults.deterministicMed;
    	      this.deterministicMedVariable = defaults.deterministicMedVariable;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.distanceExternal = defaults.distanceExternal;
    	      this.distanceExternalVariable = defaults.distanceExternalVariable;
    	      this.distanceInternal = defaults.distanceInternal;
    	      this.distanceInternalVariable = defaults.distanceInternalVariable;
    	      this.distanceLocal = defaults.distanceLocal;
    	      this.distanceLocalVariable = defaults.distanceLocalVariable;
    	      this.holdtime = defaults.holdtime;
    	      this.holdtimeVariable = defaults.holdtimeVariable;
    	      this.id = defaults.id;
    	      this.ipv4Neighbors = defaults.ipv4Neighbors;
    	      this.ipv4RouteTargets = defaults.ipv4RouteTargets;
    	      this.ipv6Neighbors = defaults.ipv6Neighbors;
    	      this.ipv6RouteTargets = defaults.ipv6RouteTargets;
    	      this.keepalive = defaults.keepalive;
    	      this.keepaliveVariable = defaults.keepaliveVariable;
    	      this.missingMedWorst = defaults.missingMedWorst;
    	      this.missingMedWorstVariable = defaults.missingMedWorstVariable;
    	      this.mplsInterfaces = defaults.mplsInterfaces;
    	      this.multipathRelax = defaults.multipathRelax;
    	      this.multipathRelaxVariable = defaults.multipathRelaxVariable;
    	      this.name = defaults.name;
    	      this.propagateAspath = defaults.propagateAspath;
    	      this.propagateAspathVariable = defaults.propagateAspathVariable;
    	      this.propagateCommunity = defaults.propagateCommunity;
    	      this.propagateCommunityVariable = defaults.propagateCommunityVariable;
    	      this.routerId = defaults.routerId;
    	      this.routerIdVariable = defaults.routerIdVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder addressFamilies(List<GetCiscoBgpFeatureTemplateAddressFamily> addressFamilies) {
            if (addressFamilies == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "addressFamilies");
            }
            this.addressFamilies = addressFamilies;
            return this;
        }
        public Builder addressFamilies(GetCiscoBgpFeatureTemplateAddressFamily... addressFamilies) {
            return addressFamilies(List.of(addressFamilies));
        }
        @CustomType.Setter
        public Builder alwaysCompareMed(Boolean alwaysCompareMed) {
            if (alwaysCompareMed == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "alwaysCompareMed");
            }
            this.alwaysCompareMed = alwaysCompareMed;
            return this;
        }
        @CustomType.Setter
        public Builder alwaysCompareMedVariable(String alwaysCompareMedVariable) {
            if (alwaysCompareMedVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "alwaysCompareMedVariable");
            }
            this.alwaysCompareMedVariable = alwaysCompareMedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder asNumber(String asNumber) {
            if (asNumber == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "asNumber");
            }
            this.asNumber = asNumber;
            return this;
        }
        @CustomType.Setter
        public Builder asNumberVariable(String asNumberVariable) {
            if (asNumberVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "asNumberVariable");
            }
            this.asNumberVariable = asNumberVariable;
            return this;
        }
        @CustomType.Setter
        public Builder compareRouterId(Boolean compareRouterId) {
            if (compareRouterId == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "compareRouterId");
            }
            this.compareRouterId = compareRouterId;
            return this;
        }
        @CustomType.Setter
        public Builder compareRouterIdVariable(String compareRouterIdVariable) {
            if (compareRouterIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "compareRouterIdVariable");
            }
            this.compareRouterIdVariable = compareRouterIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deterministicMed(Boolean deterministicMed) {
            if (deterministicMed == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "deterministicMed");
            }
            this.deterministicMed = deterministicMed;
            return this;
        }
        @CustomType.Setter
        public Builder deterministicMedVariable(String deterministicMedVariable) {
            if (deterministicMedVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "deterministicMedVariable");
            }
            this.deterministicMedVariable = deterministicMedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder distanceExternal(Integer distanceExternal) {
            if (distanceExternal == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "distanceExternal");
            }
            this.distanceExternal = distanceExternal;
            return this;
        }
        @CustomType.Setter
        public Builder distanceExternalVariable(String distanceExternalVariable) {
            if (distanceExternalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "distanceExternalVariable");
            }
            this.distanceExternalVariable = distanceExternalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder distanceInternal(Integer distanceInternal) {
            if (distanceInternal == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "distanceInternal");
            }
            this.distanceInternal = distanceInternal;
            return this;
        }
        @CustomType.Setter
        public Builder distanceInternalVariable(String distanceInternalVariable) {
            if (distanceInternalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "distanceInternalVariable");
            }
            this.distanceInternalVariable = distanceInternalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder distanceLocal(Integer distanceLocal) {
            if (distanceLocal == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "distanceLocal");
            }
            this.distanceLocal = distanceLocal;
            return this;
        }
        @CustomType.Setter
        public Builder distanceLocalVariable(String distanceLocalVariable) {
            if (distanceLocalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "distanceLocalVariable");
            }
            this.distanceLocalVariable = distanceLocalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder holdtime(Integer holdtime) {
            if (holdtime == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "holdtime");
            }
            this.holdtime = holdtime;
            return this;
        }
        @CustomType.Setter
        public Builder holdtimeVariable(String holdtimeVariable) {
            if (holdtimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "holdtimeVariable");
            }
            this.holdtimeVariable = holdtimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Neighbors(List<GetCiscoBgpFeatureTemplateIpv4Neighbor> ipv4Neighbors) {
            if (ipv4Neighbors == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "ipv4Neighbors");
            }
            this.ipv4Neighbors = ipv4Neighbors;
            return this;
        }
        public Builder ipv4Neighbors(GetCiscoBgpFeatureTemplateIpv4Neighbor... ipv4Neighbors) {
            return ipv4Neighbors(List.of(ipv4Neighbors));
        }
        @CustomType.Setter
        public Builder ipv4RouteTargets(List<GetCiscoBgpFeatureTemplateIpv4RouteTarget> ipv4RouteTargets) {
            if (ipv4RouteTargets == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "ipv4RouteTargets");
            }
            this.ipv4RouteTargets = ipv4RouteTargets;
            return this;
        }
        public Builder ipv4RouteTargets(GetCiscoBgpFeatureTemplateIpv4RouteTarget... ipv4RouteTargets) {
            return ipv4RouteTargets(List.of(ipv4RouteTargets));
        }
        @CustomType.Setter
        public Builder ipv6Neighbors(List<GetCiscoBgpFeatureTemplateIpv6Neighbor> ipv6Neighbors) {
            if (ipv6Neighbors == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "ipv6Neighbors");
            }
            this.ipv6Neighbors = ipv6Neighbors;
            return this;
        }
        public Builder ipv6Neighbors(GetCiscoBgpFeatureTemplateIpv6Neighbor... ipv6Neighbors) {
            return ipv6Neighbors(List.of(ipv6Neighbors));
        }
        @CustomType.Setter
        public Builder ipv6RouteTargets(List<GetCiscoBgpFeatureTemplateIpv6RouteTarget> ipv6RouteTargets) {
            if (ipv6RouteTargets == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "ipv6RouteTargets");
            }
            this.ipv6RouteTargets = ipv6RouteTargets;
            return this;
        }
        public Builder ipv6RouteTargets(GetCiscoBgpFeatureTemplateIpv6RouteTarget... ipv6RouteTargets) {
            return ipv6RouteTargets(List.of(ipv6RouteTargets));
        }
        @CustomType.Setter
        public Builder keepalive(Integer keepalive) {
            if (keepalive == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "keepalive");
            }
            this.keepalive = keepalive;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveVariable(String keepaliveVariable) {
            if (keepaliveVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "keepaliveVariable");
            }
            this.keepaliveVariable = keepaliveVariable;
            return this;
        }
        @CustomType.Setter
        public Builder missingMedWorst(Boolean missingMedWorst) {
            if (missingMedWorst == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "missingMedWorst");
            }
            this.missingMedWorst = missingMedWorst;
            return this;
        }
        @CustomType.Setter
        public Builder missingMedWorstVariable(String missingMedWorstVariable) {
            if (missingMedWorstVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "missingMedWorstVariable");
            }
            this.missingMedWorstVariable = missingMedWorstVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mplsInterfaces(List<GetCiscoBgpFeatureTemplateMplsInterface> mplsInterfaces) {
            if (mplsInterfaces == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "mplsInterfaces");
            }
            this.mplsInterfaces = mplsInterfaces;
            return this;
        }
        public Builder mplsInterfaces(GetCiscoBgpFeatureTemplateMplsInterface... mplsInterfaces) {
            return mplsInterfaces(List.of(mplsInterfaces));
        }
        @CustomType.Setter
        public Builder multipathRelax(Boolean multipathRelax) {
            if (multipathRelax == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "multipathRelax");
            }
            this.multipathRelax = multipathRelax;
            return this;
        }
        @CustomType.Setter
        public Builder multipathRelaxVariable(String multipathRelaxVariable) {
            if (multipathRelaxVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "multipathRelaxVariable");
            }
            this.multipathRelaxVariable = multipathRelaxVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder propagateAspath(Boolean propagateAspath) {
            if (propagateAspath == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "propagateAspath");
            }
            this.propagateAspath = propagateAspath;
            return this;
        }
        @CustomType.Setter
        public Builder propagateAspathVariable(String propagateAspathVariable) {
            if (propagateAspathVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "propagateAspathVariable");
            }
            this.propagateAspathVariable = propagateAspathVariable;
            return this;
        }
        @CustomType.Setter
        public Builder propagateCommunity(Boolean propagateCommunity) {
            if (propagateCommunity == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "propagateCommunity");
            }
            this.propagateCommunity = propagateCommunity;
            return this;
        }
        @CustomType.Setter
        public Builder propagateCommunityVariable(String propagateCommunityVariable) {
            if (propagateCommunityVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "propagateCommunityVariable");
            }
            this.propagateCommunityVariable = propagateCommunityVariable;
            return this;
        }
        @CustomType.Setter
        public Builder routerId(String routerId) {
            if (routerId == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "routerId");
            }
            this.routerId = routerId;
            return this;
        }
        @CustomType.Setter
        public Builder routerIdVariable(String routerIdVariable) {
            if (routerIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "routerIdVariable");
            }
            this.routerIdVariable = routerIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoBgpFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoBgpFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoBgpFeatureTemplateResult();
            _resultValue.addressFamilies = addressFamilies;
            _resultValue.alwaysCompareMed = alwaysCompareMed;
            _resultValue.alwaysCompareMedVariable = alwaysCompareMedVariable;
            _resultValue.asNumber = asNumber;
            _resultValue.asNumberVariable = asNumberVariable;
            _resultValue.compareRouterId = compareRouterId;
            _resultValue.compareRouterIdVariable = compareRouterIdVariable;
            _resultValue.description = description;
            _resultValue.deterministicMed = deterministicMed;
            _resultValue.deterministicMedVariable = deterministicMedVariable;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.distanceExternal = distanceExternal;
            _resultValue.distanceExternalVariable = distanceExternalVariable;
            _resultValue.distanceInternal = distanceInternal;
            _resultValue.distanceInternalVariable = distanceInternalVariable;
            _resultValue.distanceLocal = distanceLocal;
            _resultValue.distanceLocalVariable = distanceLocalVariable;
            _resultValue.holdtime = holdtime;
            _resultValue.holdtimeVariable = holdtimeVariable;
            _resultValue.id = id;
            _resultValue.ipv4Neighbors = ipv4Neighbors;
            _resultValue.ipv4RouteTargets = ipv4RouteTargets;
            _resultValue.ipv6Neighbors = ipv6Neighbors;
            _resultValue.ipv6RouteTargets = ipv6RouteTargets;
            _resultValue.keepalive = keepalive;
            _resultValue.keepaliveVariable = keepaliveVariable;
            _resultValue.missingMedWorst = missingMedWorst;
            _resultValue.missingMedWorstVariable = missingMedWorstVariable;
            _resultValue.mplsInterfaces = mplsInterfaces;
            _resultValue.multipathRelax = multipathRelax;
            _resultValue.multipathRelaxVariable = multipathRelaxVariable;
            _resultValue.name = name;
            _resultValue.propagateAspath = propagateAspath;
            _resultValue.propagateAspathVariable = propagateAspathVariable;
            _resultValue.propagateCommunity = propagateCommunity;
            _resultValue.propagateCommunityVariable = propagateCommunityVariable;
            _resultValue.routerId = routerId;
            _resultValue.routerIdVariable = routerIdVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
