// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyObjectSlaClassListEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyObjectSlaClassListEntryArgs Empty = new PolicyObjectSlaClassListEntryArgs();

    @Import(name="appProbeClassListId")
    private @Nullable Output<String> appProbeClassListId;

    public Optional<Output<String>> appProbeClassListId() {
        return Optional.ofNullable(this.appProbeClassListId);
    }

    /**
     * - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
     * 
     */
    @Import(name="fallbackBestTunnelCriteria")
    private @Nullable Output<String> fallbackBestTunnelCriteria;

    /**
     * @return - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
     * 
     */
    public Optional<Output<String>> fallbackBestTunnelCriteria() {
        return Optional.ofNullable(this.fallbackBestTunnelCriteria);
    }

    /**
     * - Range: `1`-`1000`
     * 
     */
    @Import(name="fallbackBestTunnelJitterVariance")
    private @Nullable Output<Integer> fallbackBestTunnelJitterVariance;

    /**
     * @return - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> fallbackBestTunnelJitterVariance() {
        return Optional.ofNullable(this.fallbackBestTunnelJitterVariance);
    }

    /**
     * - Range: `1`-`1000`
     * 
     */
    @Import(name="fallbackBestTunnelLatencyVariance")
    private @Nullable Output<Integer> fallbackBestTunnelLatencyVariance;

    /**
     * @return - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> fallbackBestTunnelLatencyVariance() {
        return Optional.ofNullable(this.fallbackBestTunnelLatencyVariance);
    }

    /**
     * - Range: `0`-`100`
     * 
     */
    @Import(name="fallbackBestTunnelLossVariance")
    private @Nullable Output<Integer> fallbackBestTunnelLossVariance;

    /**
     * @return - Range: `0`-`100`
     * 
     */
    public Optional<Output<Integer>> fallbackBestTunnelLossVariance() {
        return Optional.ofNullable(this.fallbackBestTunnelLossVariance);
    }

    /**
     * - Range: `1`-`1000`
     * 
     */
    @Import(name="jitter")
    private @Nullable Output<Integer> jitter;

    /**
     * @return - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> jitter() {
        return Optional.ofNullable(this.jitter);
    }

    /**
     * - Range: `1`-`1000`
     * 
     */
    @Import(name="latency")
    private @Nullable Output<Integer> latency;

    /**
     * @return - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> latency() {
        return Optional.ofNullable(this.latency);
    }

    /**
     * - Range: `0`-`100`
     * 
     */
    @Import(name="loss")
    private @Nullable Output<Integer> loss;

    /**
     * @return - Range: `0`-`100`
     * 
     */
    public Optional<Output<Integer>> loss() {
        return Optional.ofNullable(this.loss);
    }

    private PolicyObjectSlaClassListEntryArgs() {}

    private PolicyObjectSlaClassListEntryArgs(PolicyObjectSlaClassListEntryArgs $) {
        this.appProbeClassListId = $.appProbeClassListId;
        this.fallbackBestTunnelCriteria = $.fallbackBestTunnelCriteria;
        this.fallbackBestTunnelJitterVariance = $.fallbackBestTunnelJitterVariance;
        this.fallbackBestTunnelLatencyVariance = $.fallbackBestTunnelLatencyVariance;
        this.fallbackBestTunnelLossVariance = $.fallbackBestTunnelLossVariance;
        this.jitter = $.jitter;
        this.latency = $.latency;
        this.loss = $.loss;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyObjectSlaClassListEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyObjectSlaClassListEntryArgs $;

        public Builder() {
            $ = new PolicyObjectSlaClassListEntryArgs();
        }

        public Builder(PolicyObjectSlaClassListEntryArgs defaults) {
            $ = new PolicyObjectSlaClassListEntryArgs(Objects.requireNonNull(defaults));
        }

        public Builder appProbeClassListId(@Nullable Output<String> appProbeClassListId) {
            $.appProbeClassListId = appProbeClassListId;
            return this;
        }

        public Builder appProbeClassListId(String appProbeClassListId) {
            return appProbeClassListId(Output.of(appProbeClassListId));
        }

        /**
         * @param fallbackBestTunnelCriteria - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelCriteria(@Nullable Output<String> fallbackBestTunnelCriteria) {
            $.fallbackBestTunnelCriteria = fallbackBestTunnelCriteria;
            return this;
        }

        /**
         * @param fallbackBestTunnelCriteria - Choices: `jitter`, `latency`, `loss`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`, `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`, `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelCriteria(String fallbackBestTunnelCriteria) {
            return fallbackBestTunnelCriteria(Output.of(fallbackBestTunnelCriteria));
        }

        /**
         * @param fallbackBestTunnelJitterVariance - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelJitterVariance(@Nullable Output<Integer> fallbackBestTunnelJitterVariance) {
            $.fallbackBestTunnelJitterVariance = fallbackBestTunnelJitterVariance;
            return this;
        }

        /**
         * @param fallbackBestTunnelJitterVariance - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelJitterVariance(Integer fallbackBestTunnelJitterVariance) {
            return fallbackBestTunnelJitterVariance(Output.of(fallbackBestTunnelJitterVariance));
        }

        /**
         * @param fallbackBestTunnelLatencyVariance - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLatencyVariance(@Nullable Output<Integer> fallbackBestTunnelLatencyVariance) {
            $.fallbackBestTunnelLatencyVariance = fallbackBestTunnelLatencyVariance;
            return this;
        }

        /**
         * @param fallbackBestTunnelLatencyVariance - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLatencyVariance(Integer fallbackBestTunnelLatencyVariance) {
            return fallbackBestTunnelLatencyVariance(Output.of(fallbackBestTunnelLatencyVariance));
        }

        /**
         * @param fallbackBestTunnelLossVariance - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLossVariance(@Nullable Output<Integer> fallbackBestTunnelLossVariance) {
            $.fallbackBestTunnelLossVariance = fallbackBestTunnelLossVariance;
            return this;
        }

        /**
         * @param fallbackBestTunnelLossVariance - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLossVariance(Integer fallbackBestTunnelLossVariance) {
            return fallbackBestTunnelLossVariance(Output.of(fallbackBestTunnelLossVariance));
        }

        /**
         * @param jitter - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder jitter(@Nullable Output<Integer> jitter) {
            $.jitter = jitter;
            return this;
        }

        /**
         * @param jitter - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder jitter(Integer jitter) {
            return jitter(Output.of(jitter));
        }

        /**
         * @param latency - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder latency(@Nullable Output<Integer> latency) {
            $.latency = latency;
            return this;
        }

        /**
         * @param latency - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder latency(Integer latency) {
            return latency(Output.of(latency));
        }

        /**
         * @param loss - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder loss(@Nullable Output<Integer> loss) {
            $.loss = loss;
            return this;
        }

        /**
         * @param loss - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder loss(Integer loss) {
            return loss(Output.of(loss));
        }

        public PolicyObjectSlaClassListEntryArgs build() {
            return $;
        }
    }

}
