// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetDnsSecurityPolicyTargetVpn;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDnsSecurityPolicyResult {
    /**
     * @return String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
     * 
     */
    private String childOrgId;
    /**
     * @return The description of the Policy
     * 
     */
    private String description;
    /**
     * @return If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
     * 
     */
    private Boolean dnsCrypt;
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    private String dnsServerIp;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Policy
     * 
     */
    private String id;
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    private Boolean localDomainBypassEnabled;
    private String localDomainBypassListId;
    /**
     * @return If this is true, there shouldn&#39;t be a targetVpns field, if false then targetVpns field should be there
     * 
     */
    private Boolean matchAllVpn;
    /**
     * @return The name of the Policy
     * 
     */
    private String name;
    /**
     * @return Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload
     * 
     */
    private List<GetDnsSecurityPolicyTargetVpn> targetVpns;
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    private Boolean umbrellaDefault;
    /**
     * @return The version of the Policy
     * 
     */
    private Integer version;

    private GetDnsSecurityPolicyResult() {}
    /**
     * @return String that is a number that corresponds to Umbrella Multi Org, can be empty if not using Umbrella Multi Org
     * 
     */
    public String childOrgId() {
        return this.childOrgId;
    }
    /**
     * @return The description of the Policy
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return If matchAllVpn is false, this field is only true if at least one of the targetVpns entires contains an umbrellaDefault true
     * 
     */
    public Boolean dnsCrypt() {
        return this.dnsCrypt;
    }
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    public String dnsServerIp() {
        return this.dnsServerIp;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Policy
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    public Boolean localDomainBypassEnabled() {
        return this.localDomainBypassEnabled;
    }
    public String localDomainBypassListId() {
        return this.localDomainBypassListId;
    }
    /**
     * @return If this is true, there shouldn&#39;t be a targetVpns field, if false then targetVpns field should be there
     * 
     */
    public Boolean matchAllVpn() {
        return this.matchAllVpn;
    }
    /**
     * @return The name of the Policy
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Will be under data field only if matchAllVpn is false, if matchAllVpn is true field should not be in payload
     * 
     */
    public List<GetDnsSecurityPolicyTargetVpn> targetVpns() {
        return this.targetVpns;
    }
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    public Boolean umbrellaDefault() {
        return this.umbrellaDefault;
    }
    /**
     * @return The version of the Policy
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsSecurityPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String childOrgId;
        private String description;
        private Boolean dnsCrypt;
        private String dnsServerIp;
        private String featureProfileId;
        private String id;
        private Boolean localDomainBypassEnabled;
        private String localDomainBypassListId;
        private Boolean matchAllVpn;
        private String name;
        private List<GetDnsSecurityPolicyTargetVpn> targetVpns;
        private Boolean umbrellaDefault;
        private Integer version;
        public Builder() {}
        public Builder(GetDnsSecurityPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.childOrgId = defaults.childOrgId;
    	      this.description = defaults.description;
    	      this.dnsCrypt = defaults.dnsCrypt;
    	      this.dnsServerIp = defaults.dnsServerIp;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.localDomainBypassEnabled = defaults.localDomainBypassEnabled;
    	      this.localDomainBypassListId = defaults.localDomainBypassListId;
    	      this.matchAllVpn = defaults.matchAllVpn;
    	      this.name = defaults.name;
    	      this.targetVpns = defaults.targetVpns;
    	      this.umbrellaDefault = defaults.umbrellaDefault;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder childOrgId(String childOrgId) {
            if (childOrgId == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "childOrgId");
            }
            this.childOrgId = childOrgId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsCrypt(Boolean dnsCrypt) {
            if (dnsCrypt == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "dnsCrypt");
            }
            this.dnsCrypt = dnsCrypt;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServerIp(String dnsServerIp) {
            if (dnsServerIp == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "dnsServerIp");
            }
            this.dnsServerIp = dnsServerIp;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder localDomainBypassEnabled(Boolean localDomainBypassEnabled) {
            if (localDomainBypassEnabled == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "localDomainBypassEnabled");
            }
            this.localDomainBypassEnabled = localDomainBypassEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder localDomainBypassListId(String localDomainBypassListId) {
            if (localDomainBypassListId == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "localDomainBypassListId");
            }
            this.localDomainBypassListId = localDomainBypassListId;
            return this;
        }
        @CustomType.Setter
        public Builder matchAllVpn(Boolean matchAllVpn) {
            if (matchAllVpn == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "matchAllVpn");
            }
            this.matchAllVpn = matchAllVpn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder targetVpns(List<GetDnsSecurityPolicyTargetVpn> targetVpns) {
            if (targetVpns == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "targetVpns");
            }
            this.targetVpns = targetVpns;
            return this;
        }
        public Builder targetVpns(GetDnsSecurityPolicyTargetVpn... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }
        @CustomType.Setter
        public Builder umbrellaDefault(Boolean umbrellaDefault) {
            if (umbrellaDefault == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "umbrellaDefault");
            }
            this.umbrellaDefault = umbrellaDefault;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetDnsSecurityPolicyResult build() {
            final var _resultValue = new GetDnsSecurityPolicyResult();
            _resultValue.childOrgId = childOrgId;
            _resultValue.description = description;
            _resultValue.dnsCrypt = dnsCrypt;
            _resultValue.dnsServerIp = dnsServerIp;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.localDomainBypassEnabled = localDomainBypassEnabled;
            _resultValue.localDomainBypassListId = localDomainBypassListId;
            _resultValue.matchAllVpn = matchAllVpn;
            _resultValue.name = name;
            _resultValue.targetVpns = targetVpns;
            _resultValue.umbrellaDefault = umbrellaDefault;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
