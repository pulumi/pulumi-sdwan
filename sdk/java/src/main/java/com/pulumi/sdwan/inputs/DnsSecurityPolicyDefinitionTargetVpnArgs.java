// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsSecurityPolicyDefinitionTargetVpnArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsSecurityPolicyDefinitionTargetVpnArgs Empty = new DnsSecurityPolicyDefinitionTargetVpnArgs();

    /**
     * Only relevant when `umbrella_dns_default` is `false`
     * 
     */
    @Import(name="customDnsServerIp")
    private @Nullable Output<String> customDnsServerIp;

    /**
     * @return Only relevant when `umbrella_dns_default` is `false`
     * 
     */
    public Optional<Output<String>> customDnsServerIp() {
        return Optional.ofNullable(this.customDnsServerIp);
    }

    /**
     * Should the local domain bypass list be enabled
     * 
     */
    @Import(name="localDomainBypassEnabled")
    private @Nullable Output<Boolean> localDomainBypassEnabled;

    /**
     * @return Should the local domain bypass list be enabled
     * 
     */
    public Optional<Output<Boolean>> localDomainBypassEnabled() {
        return Optional.ofNullable(this.localDomainBypassEnabled);
    }

    /**
     * Should use umbrella as DNS Server
     * 
     */
    @Import(name="umbrellaDnsDefault")
    private @Nullable Output<Boolean> umbrellaDnsDefault;

    /**
     * @return Should use umbrella as DNS Server
     * 
     */
    public Optional<Output<Boolean>> umbrellaDnsDefault() {
        return Optional.ofNullable(this.umbrellaDnsDefault);
    }

    /**
     * VPN ID&#39;s separated by Comma
     * 
     */
    @Import(name="vpnIds")
    private @Nullable Output<List<String>> vpnIds;

    /**
     * @return VPN ID&#39;s separated by Comma
     * 
     */
    public Optional<Output<List<String>>> vpnIds() {
        return Optional.ofNullable(this.vpnIds);
    }

    private DnsSecurityPolicyDefinitionTargetVpnArgs() {}

    private DnsSecurityPolicyDefinitionTargetVpnArgs(DnsSecurityPolicyDefinitionTargetVpnArgs $) {
        this.customDnsServerIp = $.customDnsServerIp;
        this.localDomainBypassEnabled = $.localDomainBypassEnabled;
        this.umbrellaDnsDefault = $.umbrellaDnsDefault;
        this.vpnIds = $.vpnIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsSecurityPolicyDefinitionTargetVpnArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsSecurityPolicyDefinitionTargetVpnArgs $;

        public Builder() {
            $ = new DnsSecurityPolicyDefinitionTargetVpnArgs();
        }

        public Builder(DnsSecurityPolicyDefinitionTargetVpnArgs defaults) {
            $ = new DnsSecurityPolicyDefinitionTargetVpnArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customDnsServerIp Only relevant when `umbrella_dns_default` is `false`
         * 
         * @return builder
         * 
         */
        public Builder customDnsServerIp(@Nullable Output<String> customDnsServerIp) {
            $.customDnsServerIp = customDnsServerIp;
            return this;
        }

        /**
         * @param customDnsServerIp Only relevant when `umbrella_dns_default` is `false`
         * 
         * @return builder
         * 
         */
        public Builder customDnsServerIp(String customDnsServerIp) {
            return customDnsServerIp(Output.of(customDnsServerIp));
        }

        /**
         * @param localDomainBypassEnabled Should the local domain bypass list be enabled
         * 
         * @return builder
         * 
         */
        public Builder localDomainBypassEnabled(@Nullable Output<Boolean> localDomainBypassEnabled) {
            $.localDomainBypassEnabled = localDomainBypassEnabled;
            return this;
        }

        /**
         * @param localDomainBypassEnabled Should the local domain bypass list be enabled
         * 
         * @return builder
         * 
         */
        public Builder localDomainBypassEnabled(Boolean localDomainBypassEnabled) {
            return localDomainBypassEnabled(Output.of(localDomainBypassEnabled));
        }

        /**
         * @param umbrellaDnsDefault Should use umbrella as DNS Server
         * 
         * @return builder
         * 
         */
        public Builder umbrellaDnsDefault(@Nullable Output<Boolean> umbrellaDnsDefault) {
            $.umbrellaDnsDefault = umbrellaDnsDefault;
            return this;
        }

        /**
         * @param umbrellaDnsDefault Should use umbrella as DNS Server
         * 
         * @return builder
         * 
         */
        public Builder umbrellaDnsDefault(Boolean umbrellaDnsDefault) {
            return umbrellaDnsDefault(Output.of(umbrellaDnsDefault));
        }

        /**
         * @param vpnIds VPN ID&#39;s separated by Comma
         * 
         * @return builder
         * 
         */
        public Builder vpnIds(@Nullable Output<List<String>> vpnIds) {
            $.vpnIds = vpnIds;
            return this;
        }

        /**
         * @param vpnIds VPN ID&#39;s separated by Comma
         * 
         * @return builder
         * 
         */
        public Builder vpnIds(List<String> vpnIds) {
            return vpnIds(Output.of(vpnIds));
        }

        /**
         * @param vpnIds VPN ID&#39;s separated by Comma
         * 
         * @return builder
         * 
         */
        public Builder vpnIds(String... vpnIds) {
            return vpnIds(List.of(vpnIds));
        }

        public DnsSecurityPolicyDefinitionTargetVpnArgs build() {
            return $;
        }
    }

}
