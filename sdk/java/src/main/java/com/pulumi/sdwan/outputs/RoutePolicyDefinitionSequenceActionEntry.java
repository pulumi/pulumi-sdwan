// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class RoutePolicyDefinitionSequenceActionEntry {
    /**
     * @return Aggregator, Attribute conditional on `type` being equal to `aggregator`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer aggregator;
    /**
     * @return IP address, Attribute conditional on `type` being equal to `aggregator`
     * 
     */
    private @Nullable String aggregatorIpAddress;
    /**
     * @return Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
     * 
     */
    private @Nullable String asPathExclude;
    /**
     * @return Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
     * 
     */
    private @Nullable String asPathPrepend;
    /**
     * @return Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
     * 
     */
    private @Nullable Boolean atomicAggregate;
    /**
     * @return Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     * 
     */
    private @Nullable String community;
    /**
     * @return Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     * 
     */
    private @Nullable Boolean communityAdditive;
    /**
     * @return Local preference, Attribute conditional on `type` being equal to `localPreference`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer localPreference;
    /**
     * @return Metric, Attribute conditional on `type` being equal to `metric`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer metric;
    /**
     * @return Metric type, Attribute conditional on `type` being equal to `metricType`
     *   - Choices: `type1`, `type2`
     * 
     */
    private @Nullable String metricType;
    /**
     * @return Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     * 
     */
    private @Nullable String nextHop;
    /**
     * @return OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer ompTag;
    /**
     * @return Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`
     * 
     */
    private @Nullable String origin;
    /**
     * @return Originator IP, Attribute conditional on `type` being equal to `originator`
     * 
     */
    private @Nullable String originator;
    /**
     * @return OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer ospfTag;
    /**
     * @return Type of action entry
     *   - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
     * 
     */
    private String type;
    /**
     * @return Weight, Attribute conditional on `type` being equal to `weight`
     *   - Range: `0`-`4294967295`
     * 
     */
    private @Nullable Integer weight;

    private RoutePolicyDefinitionSequenceActionEntry() {}
    /**
     * @return Aggregator, Attribute conditional on `type` being equal to `aggregator`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> aggregator() {
        return Optional.ofNullable(this.aggregator);
    }
    /**
     * @return IP address, Attribute conditional on `type` being equal to `aggregator`
     * 
     */
    public Optional<String> aggregatorIpAddress() {
        return Optional.ofNullable(this.aggregatorIpAddress);
    }
    /**
     * @return Space separated list of ASN to exclude, Attribute conditional on `type` being equal to `asPath`
     * 
     */
    public Optional<String> asPathExclude() {
        return Optional.ofNullable(this.asPathExclude);
    }
    /**
     * @return Space separated list of ASN to prepend, Attribute conditional on `type` being equal to `asPath`
     * 
     */
    public Optional<String> asPathPrepend() {
        return Optional.ofNullable(this.asPathPrepend);
    }
    /**
     * @return Atomic aggregate, Attribute conditional on `type` being equal to `atomicAggregate`
     * 
     */
    public Optional<Boolean> atomicAggregate() {
        return Optional.ofNullable(this.atomicAggregate);
    }
    /**
     * @return Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     * 
     */
    public Optional<String> community() {
        return Optional.ofNullable(this.community);
    }
    /**
     * @return Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     * 
     */
    public Optional<Boolean> communityAdditive() {
        return Optional.ofNullable(this.communityAdditive);
    }
    /**
     * @return Local preference, Attribute conditional on `type` being equal to `localPreference`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> localPreference() {
        return Optional.ofNullable(this.localPreference);
    }
    /**
     * @return Metric, Attribute conditional on `type` being equal to `metric`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> metric() {
        return Optional.ofNullable(this.metric);
    }
    /**
     * @return Metric type, Attribute conditional on `type` being equal to `metricType`
     *   - Choices: `type1`, `type2`
     * 
     */
    public Optional<String> metricType() {
        return Optional.ofNullable(this.metricType);
    }
    /**
     * @return Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     * 
     */
    public Optional<String> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }
    /**
     * @return OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> ompTag() {
        return Optional.ofNullable(this.ompTag);
    }
    /**
     * @return Origin, Attribute conditional on `type` being equal to `origin`
     *   - Choices: `igp`, `egp`, `incomplete`
     * 
     */
    public Optional<String> origin() {
        return Optional.ofNullable(this.origin);
    }
    /**
     * @return Originator IP, Attribute conditional on `type` being equal to `originator`
     * 
     */
    public Optional<String> originator() {
        return Optional.ofNullable(this.originator);
    }
    /**
     * @return OSPF tag, Attribute conditional on `type` being equal to `ospfTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> ospfTag() {
        return Optional.ofNullable(this.ospfTag);
    }
    /**
     * @return Type of action entry
     *   - Choices: `aggregator`, `asPath`, `atomicAggregate`, `community`, `communityAdditive`, `localPreference`, `metric`, `weight`, `metricType`, `nextHop`, `ompTag`, `ospfTag`, `origin`, `originator`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return Weight, Attribute conditional on `type` being equal to `weight`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(RoutePolicyDefinitionSequenceActionEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer aggregator;
        private @Nullable String aggregatorIpAddress;
        private @Nullable String asPathExclude;
        private @Nullable String asPathPrepend;
        private @Nullable Boolean atomicAggregate;
        private @Nullable String community;
        private @Nullable Boolean communityAdditive;
        private @Nullable Integer localPreference;
        private @Nullable Integer metric;
        private @Nullable String metricType;
        private @Nullable String nextHop;
        private @Nullable Integer ompTag;
        private @Nullable String origin;
        private @Nullable String originator;
        private @Nullable Integer ospfTag;
        private String type;
        private @Nullable Integer weight;
        public Builder() {}
        public Builder(RoutePolicyDefinitionSequenceActionEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aggregator = defaults.aggregator;
    	      this.aggregatorIpAddress = defaults.aggregatorIpAddress;
    	      this.asPathExclude = defaults.asPathExclude;
    	      this.asPathPrepend = defaults.asPathPrepend;
    	      this.atomicAggregate = defaults.atomicAggregate;
    	      this.community = defaults.community;
    	      this.communityAdditive = defaults.communityAdditive;
    	      this.localPreference = defaults.localPreference;
    	      this.metric = defaults.metric;
    	      this.metricType = defaults.metricType;
    	      this.nextHop = defaults.nextHop;
    	      this.ompTag = defaults.ompTag;
    	      this.origin = defaults.origin;
    	      this.originator = defaults.originator;
    	      this.ospfTag = defaults.ospfTag;
    	      this.type = defaults.type;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder aggregator(@Nullable Integer aggregator) {

            this.aggregator = aggregator;
            return this;
        }
        @CustomType.Setter
        public Builder aggregatorIpAddress(@Nullable String aggregatorIpAddress) {

            this.aggregatorIpAddress = aggregatorIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder asPathExclude(@Nullable String asPathExclude) {

            this.asPathExclude = asPathExclude;
            return this;
        }
        @CustomType.Setter
        public Builder asPathPrepend(@Nullable String asPathPrepend) {

            this.asPathPrepend = asPathPrepend;
            return this;
        }
        @CustomType.Setter
        public Builder atomicAggregate(@Nullable Boolean atomicAggregate) {

            this.atomicAggregate = atomicAggregate;
            return this;
        }
        @CustomType.Setter
        public Builder community(@Nullable String community) {

            this.community = community;
            return this;
        }
        @CustomType.Setter
        public Builder communityAdditive(@Nullable Boolean communityAdditive) {

            this.communityAdditive = communityAdditive;
            return this;
        }
        @CustomType.Setter
        public Builder localPreference(@Nullable Integer localPreference) {

            this.localPreference = localPreference;
            return this;
        }
        @CustomType.Setter
        public Builder metric(@Nullable Integer metric) {

            this.metric = metric;
            return this;
        }
        @CustomType.Setter
        public Builder metricType(@Nullable String metricType) {

            this.metricType = metricType;
            return this;
        }
        @CustomType.Setter
        public Builder nextHop(@Nullable String nextHop) {

            this.nextHop = nextHop;
            return this;
        }
        @CustomType.Setter
        public Builder ompTag(@Nullable Integer ompTag) {

            this.ompTag = ompTag;
            return this;
        }
        @CustomType.Setter
        public Builder origin(@Nullable String origin) {

            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder originator(@Nullable String originator) {

            this.originator = originator;
            return this;
        }
        @CustomType.Setter
        public Builder ospfTag(@Nullable Integer ospfTag) {

            this.ospfTag = ospfTag;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("RoutePolicyDefinitionSequenceActionEntry", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {

            this.weight = weight;
            return this;
        }
        public RoutePolicyDefinitionSequenceActionEntry build() {
            final var _resultValue = new RoutePolicyDefinitionSequenceActionEntry();
            _resultValue.aggregator = aggregator;
            _resultValue.aggregatorIpAddress = aggregatorIpAddress;
            _resultValue.asPathExclude = asPathExclude;
            _resultValue.asPathPrepend = asPathPrepend;
            _resultValue.atomicAggregate = atomicAggregate;
            _resultValue.community = community;
            _resultValue.communityAdditive = communityAdditive;
            _resultValue.localPreference = localPreference;
            _resultValue.metric = metric;
            _resultValue.metricType = metricType;
            _resultValue.nextHop = nextHop;
            _resultValue.ompTag = ompTag;
            _resultValue.origin = origin;
            _resultValue.originator = originator;
            _resultValue.ospfTag = ospfTag;
            _resultValue.type = type;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
