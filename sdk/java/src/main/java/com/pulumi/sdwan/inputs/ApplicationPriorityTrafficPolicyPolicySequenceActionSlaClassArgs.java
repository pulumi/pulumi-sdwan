// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs Empty = new ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs();

    @Import(name="fallbackToBestPath")
    private @Nullable Output<Boolean> fallbackToBestPath;

    public Optional<Output<Boolean>> fallbackToBestPath() {
        return Optional.ofNullable(this.fallbackToBestPath);
    }

    @Import(name="preferredColorGroupListId")
    private @Nullable Output<String> preferredColorGroupListId;

    public Optional<Output<String>> preferredColorGroupListId() {
        return Optional.ofNullable(this.preferredColorGroupListId);
    }

    @Import(name="preferredColors")
    private @Nullable Output<List<String>> preferredColors;

    public Optional<Output<List<String>>> preferredColors() {
        return Optional.ofNullable(this.preferredColors);
    }

    @Import(name="preferredRemoteColors")
    private @Nullable Output<List<String>> preferredRemoteColors;

    public Optional<Output<List<String>>> preferredRemoteColors() {
        return Optional.ofNullable(this.preferredRemoteColors);
    }

    @Import(name="remoteColorRestrict")
    private @Nullable Output<Boolean> remoteColorRestrict;

    public Optional<Output<Boolean>> remoteColorRestrict() {
        return Optional.ofNullable(this.remoteColorRestrict);
    }

    @Import(name="slaClassListId")
    private @Nullable Output<String> slaClassListId;

    public Optional<Output<String>> slaClassListId() {
        return Optional.ofNullable(this.slaClassListId);
    }

    @Import(name="strict")
    private @Nullable Output<Boolean> strict;

    public Optional<Output<Boolean>> strict() {
        return Optional.ofNullable(this.strict);
    }

    private ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs() {}

    private ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs(ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs $) {
        this.fallbackToBestPath = $.fallbackToBestPath;
        this.preferredColorGroupListId = $.preferredColorGroupListId;
        this.preferredColors = $.preferredColors;
        this.preferredRemoteColors = $.preferredRemoteColors;
        this.remoteColorRestrict = $.remoteColorRestrict;
        this.slaClassListId = $.slaClassListId;
        this.strict = $.strict;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs $;

        public Builder() {
            $ = new ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs();
        }

        public Builder(ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs defaults) {
            $ = new ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs(Objects.requireNonNull(defaults));
        }

        public Builder fallbackToBestPath(@Nullable Output<Boolean> fallbackToBestPath) {
            $.fallbackToBestPath = fallbackToBestPath;
            return this;
        }

        public Builder fallbackToBestPath(Boolean fallbackToBestPath) {
            return fallbackToBestPath(Output.of(fallbackToBestPath));
        }

        public Builder preferredColorGroupListId(@Nullable Output<String> preferredColorGroupListId) {
            $.preferredColorGroupListId = preferredColorGroupListId;
            return this;
        }

        public Builder preferredColorGroupListId(String preferredColorGroupListId) {
            return preferredColorGroupListId(Output.of(preferredColorGroupListId));
        }

        public Builder preferredColors(@Nullable Output<List<String>> preferredColors) {
            $.preferredColors = preferredColors;
            return this;
        }

        public Builder preferredColors(List<String> preferredColors) {
            return preferredColors(Output.of(preferredColors));
        }

        public Builder preferredColors(String... preferredColors) {
            return preferredColors(List.of(preferredColors));
        }

        public Builder preferredRemoteColors(@Nullable Output<List<String>> preferredRemoteColors) {
            $.preferredRemoteColors = preferredRemoteColors;
            return this;
        }

        public Builder preferredRemoteColors(List<String> preferredRemoteColors) {
            return preferredRemoteColors(Output.of(preferredRemoteColors));
        }

        public Builder preferredRemoteColors(String... preferredRemoteColors) {
            return preferredRemoteColors(List.of(preferredRemoteColors));
        }

        public Builder remoteColorRestrict(@Nullable Output<Boolean> remoteColorRestrict) {
            $.remoteColorRestrict = remoteColorRestrict;
            return this;
        }

        public Builder remoteColorRestrict(Boolean remoteColorRestrict) {
            return remoteColorRestrict(Output.of(remoteColorRestrict));
        }

        public Builder slaClassListId(@Nullable Output<String> slaClassListId) {
            $.slaClassListId = slaClassListId;
            return this;
        }

        public Builder slaClassListId(String slaClassListId) {
            return slaClassListId(Output.of(slaClassListId));
        }

        public Builder strict(@Nullable Output<Boolean> strict) {
            $.strict = strict;
            return this;
        }

        public Builder strict(Boolean strict) {
            return strict(Output.of(strict));
        }

        public ApplicationPriorityTrafficPolicyPolicySequenceActionSlaClassArgs build() {
            return $;
        }
    }

}
