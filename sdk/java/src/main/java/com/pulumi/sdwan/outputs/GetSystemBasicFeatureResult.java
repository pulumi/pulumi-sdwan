// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetSystemBasicFeatureAffinityPerVrf;
import com.pulumi.sdwan.outputs.GetSystemBasicFeatureGpsSmsMobileNumber;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSystemBasicFeatureResult {
    /**
     * @return Collect admin-tech before reboot due to daemon failure
     * 
     */
    private Boolean adminTechOnFailure;
    /**
     * @return Variable name
     * 
     */
    private String adminTechOnFailureVariable;
    /**
     * @return Affinity Group Number
     * 
     */
    private Integer affinityGroupNumber;
    /**
     * @return Variable name
     * 
     */
    private String affinityGroupNumberVariable;
    /**
     * @return Affinity Group Preference
     * 
     */
    private List<Integer> affinityGroupPreferences;
    /**
     * @return Variable name
     * 
     */
    private String affinityGroupPreferencesVariable;
    /**
     * @return Affinity Group Number for VRFs
     * 
     */
    private List<GetSystemBasicFeatureAffinityPerVrf> affinityPerVrfs;
    /**
     * @return Affinity Group Preference Auto
     * 
     */
    private Boolean affinityPreferenceAuto;
    /**
     * @return Variable name
     * 
     */
    private String affinityPreferenceAutoVariable;
    /**
     * @return Set a text description of the device
     * 
     */
    private String configDescription;
    /**
     * @return Variable name
     * 
     */
    private String configDescriptionVariable;
    /**
     * @return Set the console baud rate
     * 
     */
    private String consoleBaudRate;
    /**
     * @return Variable name
     * 
     */
    private String consoleBaudRateVariable;
    /**
     * @return Set the policer rate for control sessions
     * 
     */
    private Integer controlSessionPps;
    /**
     * @return Variable name
     * 
     */
    private String controlSessionPpsVariable;
    /**
     * @return Configure a list of comma-separated controller groups
     * 
     */
    private List<Integer> controllerGroups;
    /**
     * @return Variable name
     * 
     */
    private String controllerGroupsVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Device groups
     * 
     */
    private List<String> deviceGroups;
    /**
     * @return Variable name
     * 
     */
    private String deviceGroupsVariable;
    /**
     * @return Enable SLA Dampening and Enhanced App Routing.
     * 
     */
    private String enhancedAppAwareRouting;
    /**
     * @return Variable name
     * 
     */
    private String enhancedAppAwareRoutingVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return Enable Geo fencing
     * 
     */
    private Boolean gpsGeoFencingEnable;
    /**
     * @return Set the device’s geo fencing range
     * 
     */
    private Integer gpsGeoFencingRange;
    /**
     * @return Variable name
     * 
     */
    private String gpsGeoFencingRangeVariable;
    /**
     * @return Set the device physical latitude
     * 
     */
    private Double gpsLatitude;
    /**
     * @return Variable name
     * 
     */
    private String gpsLatitudeVariable;
    /**
     * @return Set the device physical longitude
     * 
     */
    private Double gpsLongitude;
    /**
     * @return Variable name
     * 
     */
    private String gpsLongitudeVariable;
    /**
     * @return Enable device’s geo fencing SMS
     * 
     */
    private Boolean gpsSmsEnable;
    /**
     * @return Set device’s geo fencing SMS phone number
     * 
     */
    private List<GetSystemBasicFeatureGpsSmsMobileNumber> gpsSmsMobileNumbers;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Idle CLI timeout in minutes
     * 
     */
    private Integer idleTimeout;
    /**
     * @return Variable name
     * 
     */
    private String idleTimeoutVariable;
    /**
     * @return Set the location of the device
     * 
     */
    private String location;
    /**
     * @return Variable name
     * 
     */
    private String locationVariable;
    /**
     * @return Set the maximum number of OMP sessions \n\n the device can have
     * 
     */
    private Integer maxOmpSessions;
    /**
     * @return Variable name
     * 
     */
    private String maxOmpSessionsVariable;
    /**
     * @return Device is multi-tenant
     * 
     */
    private Boolean multiTenant;
    /**
     * @return Variable name
     * 
     */
    private String multiTenantVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Enable or disable On-demand Tunnel
     * 
     */
    private Boolean onDemandEnable;
    /**
     * @return Variable name
     * 
     */
    private String onDemandEnableVariable;
    /**
     * @return Set the idle timeout for on-demand tunnels
     * 
     */
    private Integer onDemandIdleTimeout;
    /**
     * @return Variable name
     * 
     */
    private String onDemandIdleTimeoutVariable;
    /**
     * @return Set the Overlay ID
     * 
     */
    private Integer overlayId;
    /**
     * @return Variable name
     * 
     */
    private String overlayIdVariable;
    /**
     * @return Enable port hopping
     * 
     */
    private Boolean portHopping;
    /**
     * @return Variable name
     * 
     */
    private String portHoppingVariable;
    /**
     * @return Set the TLOC port offset when multiple devices are behind a NAT
     * 
     */
    private Integer portOffset;
    /**
     * @return Variable name
     * 
     */
    private String portOffsetVariable;
    /**
     * @return Site Type
     * 
     */
    private List<String> siteTypes;
    /**
     * @return Variable name
     * 
     */
    private String siteTypesVariable;
    /**
     * @return Set the timezone
     * 
     */
    private String timezone;
    /**
     * @return Variable name
     * 
     */
    private String timezoneVariable;
    /**
     * @return Enable or disable default gateway tracking
     * 
     */
    private Boolean trackDefaultGateway;
    /**
     * @return Variable name
     * 
     */
    private String trackDefaultGatewayVariable;
    /**
     * @return OMP Tag attached to routes based on interface tracking
     * 
     */
    private Integer trackInterfaceTag;
    /**
     * @return Variable name
     * 
     */
    private String trackInterfaceTagVariable;
    /**
     * @return Configure tracking of transport
     * 
     */
    private Boolean trackTransport;
    /**
     * @return Variable name
     * 
     */
    private String trackTransportVariable;
    /**
     * @return Enable transport gateway
     * 
     */
    private Boolean transportGateway;
    /**
     * @return Variable name
     * 
     */
    private String transportGatewayVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetSystemBasicFeatureResult() {}
    /**
     * @return Collect admin-tech before reboot due to daemon failure
     * 
     */
    public Boolean adminTechOnFailure() {
        return this.adminTechOnFailure;
    }
    /**
     * @return Variable name
     * 
     */
    public String adminTechOnFailureVariable() {
        return this.adminTechOnFailureVariable;
    }
    /**
     * @return Affinity Group Number
     * 
     */
    public Integer affinityGroupNumber() {
        return this.affinityGroupNumber;
    }
    /**
     * @return Variable name
     * 
     */
    public String affinityGroupNumberVariable() {
        return this.affinityGroupNumberVariable;
    }
    /**
     * @return Affinity Group Preference
     * 
     */
    public List<Integer> affinityGroupPreferences() {
        return this.affinityGroupPreferences;
    }
    /**
     * @return Variable name
     * 
     */
    public String affinityGroupPreferencesVariable() {
        return this.affinityGroupPreferencesVariable;
    }
    /**
     * @return Affinity Group Number for VRFs
     * 
     */
    public List<GetSystemBasicFeatureAffinityPerVrf> affinityPerVrfs() {
        return this.affinityPerVrfs;
    }
    /**
     * @return Affinity Group Preference Auto
     * 
     */
    public Boolean affinityPreferenceAuto() {
        return this.affinityPreferenceAuto;
    }
    /**
     * @return Variable name
     * 
     */
    public String affinityPreferenceAutoVariable() {
        return this.affinityPreferenceAutoVariable;
    }
    /**
     * @return Set a text description of the device
     * 
     */
    public String configDescription() {
        return this.configDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String configDescriptionVariable() {
        return this.configDescriptionVariable;
    }
    /**
     * @return Set the console baud rate
     * 
     */
    public String consoleBaudRate() {
        return this.consoleBaudRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String consoleBaudRateVariable() {
        return this.consoleBaudRateVariable;
    }
    /**
     * @return Set the policer rate for control sessions
     * 
     */
    public Integer controlSessionPps() {
        return this.controlSessionPps;
    }
    /**
     * @return Variable name
     * 
     */
    public String controlSessionPpsVariable() {
        return this.controlSessionPpsVariable;
    }
    /**
     * @return Configure a list of comma-separated controller groups
     * 
     */
    public List<Integer> controllerGroups() {
        return this.controllerGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String controllerGroupsVariable() {
        return this.controllerGroupsVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Device groups
     * 
     */
    public List<String> deviceGroups() {
        return this.deviceGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String deviceGroupsVariable() {
        return this.deviceGroupsVariable;
    }
    /**
     * @return Enable SLA Dampening and Enhanced App Routing.
     * 
     */
    public String enhancedAppAwareRouting() {
        return this.enhancedAppAwareRouting;
    }
    /**
     * @return Variable name
     * 
     */
    public String enhancedAppAwareRoutingVariable() {
        return this.enhancedAppAwareRoutingVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return Enable Geo fencing
     * 
     */
    public Boolean gpsGeoFencingEnable() {
        return this.gpsGeoFencingEnable;
    }
    /**
     * @return Set the device’s geo fencing range
     * 
     */
    public Integer gpsGeoFencingRange() {
        return this.gpsGeoFencingRange;
    }
    /**
     * @return Variable name
     * 
     */
    public String gpsGeoFencingRangeVariable() {
        return this.gpsGeoFencingRangeVariable;
    }
    /**
     * @return Set the device physical latitude
     * 
     */
    public Double gpsLatitude() {
        return this.gpsLatitude;
    }
    /**
     * @return Variable name
     * 
     */
    public String gpsLatitudeVariable() {
        return this.gpsLatitudeVariable;
    }
    /**
     * @return Set the device physical longitude
     * 
     */
    public Double gpsLongitude() {
        return this.gpsLongitude;
    }
    /**
     * @return Variable name
     * 
     */
    public String gpsLongitudeVariable() {
        return this.gpsLongitudeVariable;
    }
    /**
     * @return Enable device’s geo fencing SMS
     * 
     */
    public Boolean gpsSmsEnable() {
        return this.gpsSmsEnable;
    }
    /**
     * @return Set device’s geo fencing SMS phone number
     * 
     */
    public List<GetSystemBasicFeatureGpsSmsMobileNumber> gpsSmsMobileNumbers() {
        return this.gpsSmsMobileNumbers;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Idle CLI timeout in minutes
     * 
     */
    public Integer idleTimeout() {
        return this.idleTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String idleTimeoutVariable() {
        return this.idleTimeoutVariable;
    }
    /**
     * @return Set the location of the device
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Variable name
     * 
     */
    public String locationVariable() {
        return this.locationVariable;
    }
    /**
     * @return Set the maximum number of OMP sessions \n\n the device can have
     * 
     */
    public Integer maxOmpSessions() {
        return this.maxOmpSessions;
    }
    /**
     * @return Variable name
     * 
     */
    public String maxOmpSessionsVariable() {
        return this.maxOmpSessionsVariable;
    }
    /**
     * @return Device is multi-tenant
     * 
     */
    public Boolean multiTenant() {
        return this.multiTenant;
    }
    /**
     * @return Variable name
     * 
     */
    public String multiTenantVariable() {
        return this.multiTenantVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable or disable On-demand Tunnel
     * 
     */
    public Boolean onDemandEnable() {
        return this.onDemandEnable;
    }
    /**
     * @return Variable name
     * 
     */
    public String onDemandEnableVariable() {
        return this.onDemandEnableVariable;
    }
    /**
     * @return Set the idle timeout for on-demand tunnels
     * 
     */
    public Integer onDemandIdleTimeout() {
        return this.onDemandIdleTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String onDemandIdleTimeoutVariable() {
        return this.onDemandIdleTimeoutVariable;
    }
    /**
     * @return Set the Overlay ID
     * 
     */
    public Integer overlayId() {
        return this.overlayId;
    }
    /**
     * @return Variable name
     * 
     */
    public String overlayIdVariable() {
        return this.overlayIdVariable;
    }
    /**
     * @return Enable port hopping
     * 
     */
    public Boolean portHopping() {
        return this.portHopping;
    }
    /**
     * @return Variable name
     * 
     */
    public String portHoppingVariable() {
        return this.portHoppingVariable;
    }
    /**
     * @return Set the TLOC port offset when multiple devices are behind a NAT
     * 
     */
    public Integer portOffset() {
        return this.portOffset;
    }
    /**
     * @return Variable name
     * 
     */
    public String portOffsetVariable() {
        return this.portOffsetVariable;
    }
    /**
     * @return Site Type
     * 
     */
    public List<String> siteTypes() {
        return this.siteTypes;
    }
    /**
     * @return Variable name
     * 
     */
    public String siteTypesVariable() {
        return this.siteTypesVariable;
    }
    /**
     * @return Set the timezone
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return Variable name
     * 
     */
    public String timezoneVariable() {
        return this.timezoneVariable;
    }
    /**
     * @return Enable or disable default gateway tracking
     * 
     */
    public Boolean trackDefaultGateway() {
        return this.trackDefaultGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackDefaultGatewayVariable() {
        return this.trackDefaultGatewayVariable;
    }
    /**
     * @return OMP Tag attached to routes based on interface tracking
     * 
     */
    public Integer trackInterfaceTag() {
        return this.trackInterfaceTag;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackInterfaceTagVariable() {
        return this.trackInterfaceTagVariable;
    }
    /**
     * @return Configure tracking of transport
     * 
     */
    public Boolean trackTransport() {
        return this.trackTransport;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackTransportVariable() {
        return this.trackTransportVariable;
    }
    /**
     * @return Enable transport gateway
     * 
     */
    public Boolean transportGateway() {
        return this.transportGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String transportGatewayVariable() {
        return this.transportGatewayVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemBasicFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean adminTechOnFailure;
        private String adminTechOnFailureVariable;
        private Integer affinityGroupNumber;
        private String affinityGroupNumberVariable;
        private List<Integer> affinityGroupPreferences;
        private String affinityGroupPreferencesVariable;
        private List<GetSystemBasicFeatureAffinityPerVrf> affinityPerVrfs;
        private Boolean affinityPreferenceAuto;
        private String affinityPreferenceAutoVariable;
        private String configDescription;
        private String configDescriptionVariable;
        private String consoleBaudRate;
        private String consoleBaudRateVariable;
        private Integer controlSessionPps;
        private String controlSessionPpsVariable;
        private List<Integer> controllerGroups;
        private String controllerGroupsVariable;
        private String description;
        private List<String> deviceGroups;
        private String deviceGroupsVariable;
        private String enhancedAppAwareRouting;
        private String enhancedAppAwareRoutingVariable;
        private String featureProfileId;
        private Boolean gpsGeoFencingEnable;
        private Integer gpsGeoFencingRange;
        private String gpsGeoFencingRangeVariable;
        private Double gpsLatitude;
        private String gpsLatitudeVariable;
        private Double gpsLongitude;
        private String gpsLongitudeVariable;
        private Boolean gpsSmsEnable;
        private List<GetSystemBasicFeatureGpsSmsMobileNumber> gpsSmsMobileNumbers;
        private String id;
        private Integer idleTimeout;
        private String idleTimeoutVariable;
        private String location;
        private String locationVariable;
        private Integer maxOmpSessions;
        private String maxOmpSessionsVariable;
        private Boolean multiTenant;
        private String multiTenantVariable;
        private String name;
        private Boolean onDemandEnable;
        private String onDemandEnableVariable;
        private Integer onDemandIdleTimeout;
        private String onDemandIdleTimeoutVariable;
        private Integer overlayId;
        private String overlayIdVariable;
        private Boolean portHopping;
        private String portHoppingVariable;
        private Integer portOffset;
        private String portOffsetVariable;
        private List<String> siteTypes;
        private String siteTypesVariable;
        private String timezone;
        private String timezoneVariable;
        private Boolean trackDefaultGateway;
        private String trackDefaultGatewayVariable;
        private Integer trackInterfaceTag;
        private String trackInterfaceTagVariable;
        private Boolean trackTransport;
        private String trackTransportVariable;
        private Boolean transportGateway;
        private String transportGatewayVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetSystemBasicFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminTechOnFailure = defaults.adminTechOnFailure;
    	      this.adminTechOnFailureVariable = defaults.adminTechOnFailureVariable;
    	      this.affinityGroupNumber = defaults.affinityGroupNumber;
    	      this.affinityGroupNumberVariable = defaults.affinityGroupNumberVariable;
    	      this.affinityGroupPreferences = defaults.affinityGroupPreferences;
    	      this.affinityGroupPreferencesVariable = defaults.affinityGroupPreferencesVariable;
    	      this.affinityPerVrfs = defaults.affinityPerVrfs;
    	      this.affinityPreferenceAuto = defaults.affinityPreferenceAuto;
    	      this.affinityPreferenceAutoVariable = defaults.affinityPreferenceAutoVariable;
    	      this.configDescription = defaults.configDescription;
    	      this.configDescriptionVariable = defaults.configDescriptionVariable;
    	      this.consoleBaudRate = defaults.consoleBaudRate;
    	      this.consoleBaudRateVariable = defaults.consoleBaudRateVariable;
    	      this.controlSessionPps = defaults.controlSessionPps;
    	      this.controlSessionPpsVariable = defaults.controlSessionPpsVariable;
    	      this.controllerGroups = defaults.controllerGroups;
    	      this.controllerGroupsVariable = defaults.controllerGroupsVariable;
    	      this.description = defaults.description;
    	      this.deviceGroups = defaults.deviceGroups;
    	      this.deviceGroupsVariable = defaults.deviceGroupsVariable;
    	      this.enhancedAppAwareRouting = defaults.enhancedAppAwareRouting;
    	      this.enhancedAppAwareRoutingVariable = defaults.enhancedAppAwareRoutingVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.gpsGeoFencingEnable = defaults.gpsGeoFencingEnable;
    	      this.gpsGeoFencingRange = defaults.gpsGeoFencingRange;
    	      this.gpsGeoFencingRangeVariable = defaults.gpsGeoFencingRangeVariable;
    	      this.gpsLatitude = defaults.gpsLatitude;
    	      this.gpsLatitudeVariable = defaults.gpsLatitudeVariable;
    	      this.gpsLongitude = defaults.gpsLongitude;
    	      this.gpsLongitudeVariable = defaults.gpsLongitudeVariable;
    	      this.gpsSmsEnable = defaults.gpsSmsEnable;
    	      this.gpsSmsMobileNumbers = defaults.gpsSmsMobileNumbers;
    	      this.id = defaults.id;
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.idleTimeoutVariable = defaults.idleTimeoutVariable;
    	      this.location = defaults.location;
    	      this.locationVariable = defaults.locationVariable;
    	      this.maxOmpSessions = defaults.maxOmpSessions;
    	      this.maxOmpSessionsVariable = defaults.maxOmpSessionsVariable;
    	      this.multiTenant = defaults.multiTenant;
    	      this.multiTenantVariable = defaults.multiTenantVariable;
    	      this.name = defaults.name;
    	      this.onDemandEnable = defaults.onDemandEnable;
    	      this.onDemandEnableVariable = defaults.onDemandEnableVariable;
    	      this.onDemandIdleTimeout = defaults.onDemandIdleTimeout;
    	      this.onDemandIdleTimeoutVariable = defaults.onDemandIdleTimeoutVariable;
    	      this.overlayId = defaults.overlayId;
    	      this.overlayIdVariable = defaults.overlayIdVariable;
    	      this.portHopping = defaults.portHopping;
    	      this.portHoppingVariable = defaults.portHoppingVariable;
    	      this.portOffset = defaults.portOffset;
    	      this.portOffsetVariable = defaults.portOffsetVariable;
    	      this.siteTypes = defaults.siteTypes;
    	      this.siteTypesVariable = defaults.siteTypesVariable;
    	      this.timezone = defaults.timezone;
    	      this.timezoneVariable = defaults.timezoneVariable;
    	      this.trackDefaultGateway = defaults.trackDefaultGateway;
    	      this.trackDefaultGatewayVariable = defaults.trackDefaultGatewayVariable;
    	      this.trackInterfaceTag = defaults.trackInterfaceTag;
    	      this.trackInterfaceTagVariable = defaults.trackInterfaceTagVariable;
    	      this.trackTransport = defaults.trackTransport;
    	      this.trackTransportVariable = defaults.trackTransportVariable;
    	      this.transportGateway = defaults.transportGateway;
    	      this.transportGatewayVariable = defaults.transportGatewayVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder adminTechOnFailure(Boolean adminTechOnFailure) {
            if (adminTechOnFailure == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "adminTechOnFailure");
            }
            this.adminTechOnFailure = adminTechOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder adminTechOnFailureVariable(String adminTechOnFailureVariable) {
            if (adminTechOnFailureVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "adminTechOnFailureVariable");
            }
            this.adminTechOnFailureVariable = adminTechOnFailureVariable;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupNumber(Integer affinityGroupNumber) {
            if (affinityGroupNumber == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityGroupNumber");
            }
            this.affinityGroupNumber = affinityGroupNumber;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupNumberVariable(String affinityGroupNumberVariable) {
            if (affinityGroupNumberVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityGroupNumberVariable");
            }
            this.affinityGroupNumberVariable = affinityGroupNumberVariable;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupPreferences(List<Integer> affinityGroupPreferences) {
            if (affinityGroupPreferences == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityGroupPreferences");
            }
            this.affinityGroupPreferences = affinityGroupPreferences;
            return this;
        }
        public Builder affinityGroupPreferences(Integer... affinityGroupPreferences) {
            return affinityGroupPreferences(List.of(affinityGroupPreferences));
        }
        @CustomType.Setter
        public Builder affinityGroupPreferencesVariable(String affinityGroupPreferencesVariable) {
            if (affinityGroupPreferencesVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityGroupPreferencesVariable");
            }
            this.affinityGroupPreferencesVariable = affinityGroupPreferencesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder affinityPerVrfs(List<GetSystemBasicFeatureAffinityPerVrf> affinityPerVrfs) {
            if (affinityPerVrfs == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityPerVrfs");
            }
            this.affinityPerVrfs = affinityPerVrfs;
            return this;
        }
        public Builder affinityPerVrfs(GetSystemBasicFeatureAffinityPerVrf... affinityPerVrfs) {
            return affinityPerVrfs(List.of(affinityPerVrfs));
        }
        @CustomType.Setter
        public Builder affinityPreferenceAuto(Boolean affinityPreferenceAuto) {
            if (affinityPreferenceAuto == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityPreferenceAuto");
            }
            this.affinityPreferenceAuto = affinityPreferenceAuto;
            return this;
        }
        @CustomType.Setter
        public Builder affinityPreferenceAutoVariable(String affinityPreferenceAutoVariable) {
            if (affinityPreferenceAutoVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "affinityPreferenceAutoVariable");
            }
            this.affinityPreferenceAutoVariable = affinityPreferenceAutoVariable;
            return this;
        }
        @CustomType.Setter
        public Builder configDescription(String configDescription) {
            if (configDescription == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "configDescription");
            }
            this.configDescription = configDescription;
            return this;
        }
        @CustomType.Setter
        public Builder configDescriptionVariable(String configDescriptionVariable) {
            if (configDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "configDescriptionVariable");
            }
            this.configDescriptionVariable = configDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder consoleBaudRate(String consoleBaudRate) {
            if (consoleBaudRate == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "consoleBaudRate");
            }
            this.consoleBaudRate = consoleBaudRate;
            return this;
        }
        @CustomType.Setter
        public Builder consoleBaudRateVariable(String consoleBaudRateVariable) {
            if (consoleBaudRateVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "consoleBaudRateVariable");
            }
            this.consoleBaudRateVariable = consoleBaudRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder controlSessionPps(Integer controlSessionPps) {
            if (controlSessionPps == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "controlSessionPps");
            }
            this.controlSessionPps = controlSessionPps;
            return this;
        }
        @CustomType.Setter
        public Builder controlSessionPpsVariable(String controlSessionPpsVariable) {
            if (controlSessionPpsVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "controlSessionPpsVariable");
            }
            this.controlSessionPpsVariable = controlSessionPpsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder controllerGroups(List<Integer> controllerGroups) {
            if (controllerGroups == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "controllerGroups");
            }
            this.controllerGroups = controllerGroups;
            return this;
        }
        public Builder controllerGroups(Integer... controllerGroups) {
            return controllerGroups(List.of(controllerGroups));
        }
        @CustomType.Setter
        public Builder controllerGroupsVariable(String controllerGroupsVariable) {
            if (controllerGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "controllerGroupsVariable");
            }
            this.controllerGroupsVariable = controllerGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceGroups(List<String> deviceGroups) {
            if (deviceGroups == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "deviceGroups");
            }
            this.deviceGroups = deviceGroups;
            return this;
        }
        public Builder deviceGroups(String... deviceGroups) {
            return deviceGroups(List.of(deviceGroups));
        }
        @CustomType.Setter
        public Builder deviceGroupsVariable(String deviceGroupsVariable) {
            if (deviceGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "deviceGroupsVariable");
            }
            this.deviceGroupsVariable = deviceGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enhancedAppAwareRouting(String enhancedAppAwareRouting) {
            if (enhancedAppAwareRouting == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "enhancedAppAwareRouting");
            }
            this.enhancedAppAwareRouting = enhancedAppAwareRouting;
            return this;
        }
        @CustomType.Setter
        public Builder enhancedAppAwareRoutingVariable(String enhancedAppAwareRoutingVariable) {
            if (enhancedAppAwareRoutingVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "enhancedAppAwareRoutingVariable");
            }
            this.enhancedAppAwareRoutingVariable = enhancedAppAwareRoutingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder gpsGeoFencingEnable(Boolean gpsGeoFencingEnable) {
            if (gpsGeoFencingEnable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsGeoFencingEnable");
            }
            this.gpsGeoFencingEnable = gpsGeoFencingEnable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsGeoFencingRange(Integer gpsGeoFencingRange) {
            if (gpsGeoFencingRange == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsGeoFencingRange");
            }
            this.gpsGeoFencingRange = gpsGeoFencingRange;
            return this;
        }
        @CustomType.Setter
        public Builder gpsGeoFencingRangeVariable(String gpsGeoFencingRangeVariable) {
            if (gpsGeoFencingRangeVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsGeoFencingRangeVariable");
            }
            this.gpsGeoFencingRangeVariable = gpsGeoFencingRangeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsLatitude(Double gpsLatitude) {
            if (gpsLatitude == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsLatitude");
            }
            this.gpsLatitude = gpsLatitude;
            return this;
        }
        @CustomType.Setter
        public Builder gpsLatitudeVariable(String gpsLatitudeVariable) {
            if (gpsLatitudeVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsLatitudeVariable");
            }
            this.gpsLatitudeVariable = gpsLatitudeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsLongitude(Double gpsLongitude) {
            if (gpsLongitude == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsLongitude");
            }
            this.gpsLongitude = gpsLongitude;
            return this;
        }
        @CustomType.Setter
        public Builder gpsLongitudeVariable(String gpsLongitudeVariable) {
            if (gpsLongitudeVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsLongitudeVariable");
            }
            this.gpsLongitudeVariable = gpsLongitudeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsSmsEnable(Boolean gpsSmsEnable) {
            if (gpsSmsEnable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsSmsEnable");
            }
            this.gpsSmsEnable = gpsSmsEnable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsSmsMobileNumbers(List<GetSystemBasicFeatureGpsSmsMobileNumber> gpsSmsMobileNumbers) {
            if (gpsSmsMobileNumbers == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "gpsSmsMobileNumbers");
            }
            this.gpsSmsMobileNumbers = gpsSmsMobileNumbers;
            return this;
        }
        public Builder gpsSmsMobileNumbers(GetSystemBasicFeatureGpsSmsMobileNumber... gpsSmsMobileNumbers) {
            return gpsSmsMobileNumbers(List.of(gpsSmsMobileNumbers));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeout(Integer idleTimeout) {
            if (idleTimeout == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "idleTimeout");
            }
            this.idleTimeout = idleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutVariable(String idleTimeoutVariable) {
            if (idleTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "idleTimeoutVariable");
            }
            this.idleTimeoutVariable = idleTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder locationVariable(String locationVariable) {
            if (locationVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "locationVariable");
            }
            this.locationVariable = locationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder maxOmpSessions(Integer maxOmpSessions) {
            if (maxOmpSessions == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "maxOmpSessions");
            }
            this.maxOmpSessions = maxOmpSessions;
            return this;
        }
        @CustomType.Setter
        public Builder maxOmpSessionsVariable(String maxOmpSessionsVariable) {
            if (maxOmpSessionsVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "maxOmpSessionsVariable");
            }
            this.maxOmpSessionsVariable = maxOmpSessionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder multiTenant(Boolean multiTenant) {
            if (multiTenant == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "multiTenant");
            }
            this.multiTenant = multiTenant;
            return this;
        }
        @CustomType.Setter
        public Builder multiTenantVariable(String multiTenantVariable) {
            if (multiTenantVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "multiTenantVariable");
            }
            this.multiTenantVariable = multiTenantVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandEnable(Boolean onDemandEnable) {
            if (onDemandEnable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "onDemandEnable");
            }
            this.onDemandEnable = onDemandEnable;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandEnableVariable(String onDemandEnableVariable) {
            if (onDemandEnableVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "onDemandEnableVariable");
            }
            this.onDemandEnableVariable = onDemandEnableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandIdleTimeout(Integer onDemandIdleTimeout) {
            if (onDemandIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "onDemandIdleTimeout");
            }
            this.onDemandIdleTimeout = onDemandIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandIdleTimeoutVariable(String onDemandIdleTimeoutVariable) {
            if (onDemandIdleTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "onDemandIdleTimeoutVariable");
            }
            this.onDemandIdleTimeoutVariable = onDemandIdleTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder overlayId(Integer overlayId) {
            if (overlayId == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "overlayId");
            }
            this.overlayId = overlayId;
            return this;
        }
        @CustomType.Setter
        public Builder overlayIdVariable(String overlayIdVariable) {
            if (overlayIdVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "overlayIdVariable");
            }
            this.overlayIdVariable = overlayIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder portHopping(Boolean portHopping) {
            if (portHopping == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "portHopping");
            }
            this.portHopping = portHopping;
            return this;
        }
        @CustomType.Setter
        public Builder portHoppingVariable(String portHoppingVariable) {
            if (portHoppingVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "portHoppingVariable");
            }
            this.portHoppingVariable = portHoppingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder portOffset(Integer portOffset) {
            if (portOffset == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "portOffset");
            }
            this.portOffset = portOffset;
            return this;
        }
        @CustomType.Setter
        public Builder portOffsetVariable(String portOffsetVariable) {
            if (portOffsetVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "portOffsetVariable");
            }
            this.portOffsetVariable = portOffsetVariable;
            return this;
        }
        @CustomType.Setter
        public Builder siteTypes(List<String> siteTypes) {
            if (siteTypes == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "siteTypes");
            }
            this.siteTypes = siteTypes;
            return this;
        }
        public Builder siteTypes(String... siteTypes) {
            return siteTypes(List.of(siteTypes));
        }
        @CustomType.Setter
        public Builder siteTypesVariable(String siteTypesVariable) {
            if (siteTypesVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "siteTypesVariable");
            }
            this.siteTypesVariable = siteTypesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder timezoneVariable(String timezoneVariable) {
            if (timezoneVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "timezoneVariable");
            }
            this.timezoneVariable = timezoneVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackDefaultGateway(Boolean trackDefaultGateway) {
            if (trackDefaultGateway == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "trackDefaultGateway");
            }
            this.trackDefaultGateway = trackDefaultGateway;
            return this;
        }
        @CustomType.Setter
        public Builder trackDefaultGatewayVariable(String trackDefaultGatewayVariable) {
            if (trackDefaultGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "trackDefaultGatewayVariable");
            }
            this.trackDefaultGatewayVariable = trackDefaultGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackInterfaceTag(Integer trackInterfaceTag) {
            if (trackInterfaceTag == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "trackInterfaceTag");
            }
            this.trackInterfaceTag = trackInterfaceTag;
            return this;
        }
        @CustomType.Setter
        public Builder trackInterfaceTagVariable(String trackInterfaceTagVariable) {
            if (trackInterfaceTagVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "trackInterfaceTagVariable");
            }
            this.trackInterfaceTagVariable = trackInterfaceTagVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackTransport(Boolean trackTransport) {
            if (trackTransport == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "trackTransport");
            }
            this.trackTransport = trackTransport;
            return this;
        }
        @CustomType.Setter
        public Builder trackTransportVariable(String trackTransportVariable) {
            if (trackTransportVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "trackTransportVariable");
            }
            this.trackTransportVariable = trackTransportVariable;
            return this;
        }
        @CustomType.Setter
        public Builder transportGateway(Boolean transportGateway) {
            if (transportGateway == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "transportGateway");
            }
            this.transportGateway = transportGateway;
            return this;
        }
        @CustomType.Setter
        public Builder transportGatewayVariable(String transportGatewayVariable) {
            if (transportGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "transportGatewayVariable");
            }
            this.transportGatewayVariable = transportGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSystemBasicFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetSystemBasicFeatureResult build() {
            final var _resultValue = new GetSystemBasicFeatureResult();
            _resultValue.adminTechOnFailure = adminTechOnFailure;
            _resultValue.adminTechOnFailureVariable = adminTechOnFailureVariable;
            _resultValue.affinityGroupNumber = affinityGroupNumber;
            _resultValue.affinityGroupNumberVariable = affinityGroupNumberVariable;
            _resultValue.affinityGroupPreferences = affinityGroupPreferences;
            _resultValue.affinityGroupPreferencesVariable = affinityGroupPreferencesVariable;
            _resultValue.affinityPerVrfs = affinityPerVrfs;
            _resultValue.affinityPreferenceAuto = affinityPreferenceAuto;
            _resultValue.affinityPreferenceAutoVariable = affinityPreferenceAutoVariable;
            _resultValue.configDescription = configDescription;
            _resultValue.configDescriptionVariable = configDescriptionVariable;
            _resultValue.consoleBaudRate = consoleBaudRate;
            _resultValue.consoleBaudRateVariable = consoleBaudRateVariable;
            _resultValue.controlSessionPps = controlSessionPps;
            _resultValue.controlSessionPpsVariable = controlSessionPpsVariable;
            _resultValue.controllerGroups = controllerGroups;
            _resultValue.controllerGroupsVariable = controllerGroupsVariable;
            _resultValue.description = description;
            _resultValue.deviceGroups = deviceGroups;
            _resultValue.deviceGroupsVariable = deviceGroupsVariable;
            _resultValue.enhancedAppAwareRouting = enhancedAppAwareRouting;
            _resultValue.enhancedAppAwareRoutingVariable = enhancedAppAwareRoutingVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.gpsGeoFencingEnable = gpsGeoFencingEnable;
            _resultValue.gpsGeoFencingRange = gpsGeoFencingRange;
            _resultValue.gpsGeoFencingRangeVariable = gpsGeoFencingRangeVariable;
            _resultValue.gpsLatitude = gpsLatitude;
            _resultValue.gpsLatitudeVariable = gpsLatitudeVariable;
            _resultValue.gpsLongitude = gpsLongitude;
            _resultValue.gpsLongitudeVariable = gpsLongitudeVariable;
            _resultValue.gpsSmsEnable = gpsSmsEnable;
            _resultValue.gpsSmsMobileNumbers = gpsSmsMobileNumbers;
            _resultValue.id = id;
            _resultValue.idleTimeout = idleTimeout;
            _resultValue.idleTimeoutVariable = idleTimeoutVariable;
            _resultValue.location = location;
            _resultValue.locationVariable = locationVariable;
            _resultValue.maxOmpSessions = maxOmpSessions;
            _resultValue.maxOmpSessionsVariable = maxOmpSessionsVariable;
            _resultValue.multiTenant = multiTenant;
            _resultValue.multiTenantVariable = multiTenantVariable;
            _resultValue.name = name;
            _resultValue.onDemandEnable = onDemandEnable;
            _resultValue.onDemandEnableVariable = onDemandEnableVariable;
            _resultValue.onDemandIdleTimeout = onDemandIdleTimeout;
            _resultValue.onDemandIdleTimeoutVariable = onDemandIdleTimeoutVariable;
            _resultValue.overlayId = overlayId;
            _resultValue.overlayIdVariable = overlayIdVariable;
            _resultValue.portHopping = portHopping;
            _resultValue.portHoppingVariable = portHoppingVariable;
            _resultValue.portOffset = portOffset;
            _resultValue.portOffsetVariable = portOffsetVariable;
            _resultValue.siteTypes = siteTypes;
            _resultValue.siteTypesVariable = siteTypesVariable;
            _resultValue.timezone = timezone;
            _resultValue.timezoneVariable = timezoneVariable;
            _resultValue.trackDefaultGateway = trackDefaultGateway;
            _resultValue.trackDefaultGatewayVariable = trackDefaultGatewayVariable;
            _resultValue.trackInterfaceTag = trackInterfaceTag;
            _resultValue.trackInterfaceTagVariable = trackInterfaceTagVariable;
            _resultValue.trackTransport = trackTransport;
            _resultValue.trackTransportVariable = trackTransportVariable;
            _resultValue.transportGateway = transportGateway;
            _resultValue.transportGatewayVariable = transportGatewayVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
