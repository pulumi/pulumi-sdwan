// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs Empty = new ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs();

    /**
     * preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
     * 
     */
    @Import(name="preferredColor")
    private @Nullable Output<String> preferredColor;

    /**
     * @return preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
     * 
     */
    public Optional<Output<String>> preferredColor() {
        return Optional.ofNullable(this.preferredColor);
    }

    /**
     * Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     * 
     */
    @Import(name="preferredColorGroupListId")
    private @Nullable Output<String> preferredColorGroupListId;

    /**
     * @return Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     * 
     */
    public Optional<Output<String>> preferredColorGroupListId() {
        return Optional.ofNullable(this.preferredColorGroupListId);
    }

    /**
     * Preferred color group list version
     * 
     */
    @Import(name="preferredColorGroupListVersion")
    private @Nullable Output<Integer> preferredColorGroupListVersion;

    /**
     * @return Preferred color group list version
     * 
     */
    public Optional<Output<Integer>> preferredColorGroupListVersion() {
        return Optional.ofNullable(this.preferredColorGroupListVersion);
    }

    /**
     * SLA class list ID, Attribute conditional on `type` being equal to `name`
     * 
     */
    @Import(name="slaClassListId")
    private @Nullable Output<String> slaClassListId;

    /**
     * @return SLA class list ID, Attribute conditional on `type` being equal to `name`
     * 
     */
    public Optional<Output<String>> slaClassListId() {
        return Optional.ofNullable(this.slaClassListId);
    }

    /**
     * SLA class list version
     * 
     */
    @Import(name="slaClassListVersion")
    private @Nullable Output<Integer> slaClassListVersion;

    /**
     * @return SLA class list version
     * 
     */
    public Optional<Output<Integer>> slaClassListVersion() {
        return Optional.ofNullable(this.slaClassListVersion);
    }

    /**
     * Type of SLA class parameter
     *   - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of SLA class parameter
     *   - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs() {}

    private ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs(ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs $) {
        this.preferredColor = $.preferredColor;
        this.preferredColorGroupListId = $.preferredColorGroupListId;
        this.preferredColorGroupListVersion = $.preferredColorGroupListVersion;
        this.slaClassListId = $.slaClassListId;
        this.slaClassListVersion = $.slaClassListVersion;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs $;

        public Builder() {
            $ = new ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs();
        }

        public Builder(ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs defaults) {
            $ = new ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param preferredColor preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
         * 
         * @return builder
         * 
         */
        public Builder preferredColor(@Nullable Output<String> preferredColor) {
            $.preferredColor = preferredColor;
            return this;
        }

        /**
         * @param preferredColor preferred color (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `preferredColor`
         * 
         * @return builder
         * 
         */
        public Builder preferredColor(String preferredColor) {
            return preferredColor(Output.of(preferredColor));
        }

        /**
         * @param preferredColorGroupListId Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListId(@Nullable Output<String> preferredColorGroupListId) {
            $.preferredColorGroupListId = preferredColorGroupListId;
            return this;
        }

        /**
         * @param preferredColorGroupListId Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListId(String preferredColorGroupListId) {
            return preferredColorGroupListId(Output.of(preferredColorGroupListId));
        }

        /**
         * @param preferredColorGroupListVersion Preferred color group list version
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListVersion(@Nullable Output<Integer> preferredColorGroupListVersion) {
            $.preferredColorGroupListVersion = preferredColorGroupListVersion;
            return this;
        }

        /**
         * @param preferredColorGroupListVersion Preferred color group list version
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListVersion(Integer preferredColorGroupListVersion) {
            return preferredColorGroupListVersion(Output.of(preferredColorGroupListVersion));
        }

        /**
         * @param slaClassListId SLA class list ID, Attribute conditional on `type` being equal to `name`
         * 
         * @return builder
         * 
         */
        public Builder slaClassListId(@Nullable Output<String> slaClassListId) {
            $.slaClassListId = slaClassListId;
            return this;
        }

        /**
         * @param slaClassListId SLA class list ID, Attribute conditional on `type` being equal to `name`
         * 
         * @return builder
         * 
         */
        public Builder slaClassListId(String slaClassListId) {
            return slaClassListId(Output.of(slaClassListId));
        }

        /**
         * @param slaClassListVersion SLA class list version
         * 
         * @return builder
         * 
         */
        public Builder slaClassListVersion(@Nullable Output<Integer> slaClassListVersion) {
            $.slaClassListVersion = slaClassListVersion;
            return this;
        }

        /**
         * @param slaClassListVersion SLA class list version
         * 
         * @return builder
         * 
         */
        public Builder slaClassListVersion(Integer slaClassListVersion) {
            return slaClassListVersion(Output.of(slaClassListVersion));
        }

        /**
         * @param type Type of SLA class parameter
         *   - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of SLA class parameter
         *   - Choices: `name`, `preferredColor`, `preferredColorGroup`, `strict`, `fallbackToBestPath`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ApplicationAwareRoutingPolicyDefinitionSequenceActionEntrySlaClassParameterArgs", "type");
            }
            return $;
        }
    }

}
