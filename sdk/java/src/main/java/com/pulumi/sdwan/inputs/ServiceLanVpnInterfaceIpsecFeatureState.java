// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceLanVpnInterfaceIpsecFeatureState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLanVpnInterfaceIpsecFeatureState Empty = new ServiceLanVpnInterfaceIpsecFeatureState();

    /**
     * Enable Application Tunnel Type - Choices: `none`, `sig`
     * 
     */
    @Import(name="applicationTunnelType")
    private @Nullable Output<String> applicationTunnelType;

    /**
     * @return Enable Application Tunnel Type - Choices: `none`, `sig`
     * 
     */
    public Optional<Output<String>> applicationTunnelType() {
        return Optional.ofNullable(this.applicationTunnelType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="applicationTunnelTypeVariable")
    private @Nullable Output<String> applicationTunnelTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> applicationTunnelTypeVariable() {
        return Optional.ofNullable(this.applicationTunnelTypeVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Import(name="clearDontFragment")
    private @Nullable Output<Boolean> clearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> clearDontFragment() {
        return Optional.ofNullable(this.clearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clearDontFragmentVariable")
    private @Nullable Output<String> clearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clearDontFragmentVariable() {
        return Optional.ofNullable(this.clearDontFragmentVariable);
    }

    /**
     * The description of the Feature
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
     * 
     */
    @Import(name="dpdInterval")
    private @Nullable Output<Integer> dpdInterval;

    /**
     * @return IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> dpdInterval() {
        return Optional.ofNullable(this.dpdInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dpdIntervalVariable")
    private @Nullable Output<String> dpdIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dpdIntervalVariable() {
        return Optional.ofNullable(this.dpdIntervalVariable);
    }

    /**
     * IKE keepalive retries - Range: `2`-`60` - Default value: `3`
     * 
     */
    @Import(name="dpdRetries")
    private @Nullable Output<Integer> dpdRetries;

    /**
     * @return IKE keepalive retries - Range: `2`-`60` - Default value: `3`
     * 
     */
    public Optional<Output<Integer>> dpdRetries() {
        return Optional.ofNullable(this.dpdRetries);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dpdRetriesVariable")
    private @Nullable Output<String> dpdRetriesVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dpdRetriesVariable() {
        return Optional.ofNullable(this.dpdRetriesVariable);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId")
    private @Nullable Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Optional<Output<String>> featureProfileId() {
        return Optional.ofNullable(this.featureProfileId);
    }

    /**
     * IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
     * `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
     * 
     */
    @Import(name="ikeCiphersuite")
    private @Nullable Output<String> ikeCiphersuite;

    /**
     * @return IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
     * `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
     * 
     */
    public Optional<Output<String>> ikeCiphersuite() {
        return Optional.ofNullable(this.ikeCiphersuite);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeCiphersuiteVariable")
    private @Nullable Output<String> ikeCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeCiphersuiteVariable() {
        return Optional.ofNullable(this.ikeCiphersuiteVariable);
    }

    /**
     * IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
     * 
     */
    @Import(name="ikeDiffieHellmanGroup")
    private @Nullable Output<String> ikeDiffieHellmanGroup;

    /**
     * @return IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
     * 
     */
    public Optional<Output<String>> ikeDiffieHellmanGroup() {
        return Optional.ofNullable(this.ikeDiffieHellmanGroup);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeDiffieHellmanGroupVariable")
    private @Nullable Output<String> ikeDiffieHellmanGroupVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeDiffieHellmanGroupVariable() {
        return Optional.ofNullable(this.ikeDiffieHellmanGroupVariable);
    }

    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Import(name="ikeIdLocalEndPoint")
    private @Nullable Output<String> ikeIdLocalEndPoint;

    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<Output<String>> ikeIdLocalEndPoint() {
        return Optional.ofNullable(this.ikeIdLocalEndPoint);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeIdLocalEndPointVariable")
    private @Nullable Output<String> ikeIdLocalEndPointVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeIdLocalEndPointVariable() {
        return Optional.ofNullable(this.ikeIdLocalEndPointVariable);
    }

    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Import(name="ikeIdRemoteEndPoint")
    private @Nullable Output<String> ikeIdRemoteEndPoint;

    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<Output<String>> ikeIdRemoteEndPoint() {
        return Optional.ofNullable(this.ikeIdRemoteEndPoint);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeIdRemoteEndPointVariable")
    private @Nullable Output<String> ikeIdRemoteEndPointVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeIdRemoteEndPointVariable() {
        return Optional.ofNullable(this.ikeIdRemoteEndPointVariable);
    }

    /**
     * IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
     * 
     */
    @Import(name="ikeIntegrityProtocol")
    private @Nullable Output<String> ikeIntegrityProtocol;

    /**
     * @return IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
     * 
     */
    public Optional<Output<String>> ikeIntegrityProtocol() {
        return Optional.ofNullable(this.ikeIntegrityProtocol);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeIntegrityProtocolVariable")
    private @Nullable Output<String> ikeIntegrityProtocolVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeIntegrityProtocolVariable() {
        return Optional.ofNullable(this.ikeIntegrityProtocolVariable);
    }

    /**
     * Use preshared key to authenticate IKE peer
     * 
     */
    @Import(name="ikePresharedKey")
    private @Nullable Output<String> ikePresharedKey;

    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Optional<Output<String>> ikePresharedKey() {
        return Optional.ofNullable(this.ikePresharedKey);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePresharedKeyVariable")
    private @Nullable Output<String> ikePresharedKeyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePresharedKeyVariable() {
        return Optional.ofNullable(this.ikePresharedKeyVariable);
    }

    /**
     * IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
     * 
     */
    @Import(name="ikeRekeyInterval")
    private @Nullable Output<Integer> ikeRekeyInterval;

    /**
     * @return IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
     * 
     */
    public Optional<Output<Integer>> ikeRekeyInterval() {
        return Optional.ofNullable(this.ikeRekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeRekeyIntervalVariable")
    private @Nullable Output<String> ikeRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeRekeyIntervalVariable() {
        return Optional.ofNullable(this.ikeRekeyIntervalVariable);
    }

    /**
     * IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<Integer> ikeVersion;

    /**
     * @return IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * Interface name: IPsec when present
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return Interface name: IPsec when present
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceNameVariable")
    private @Nullable Output<String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceNameVariable() {
        return Optional.ofNullable(this.interfaceNameVariable);
    }

    /**
     * Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
     * 
     */
    @Import(name="ipMtu")
    private @Nullable Output<Integer> ipMtu;

    /**
     * @return Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> ipMtu() {
        return Optional.ofNullable(this.ipMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipMtuVariable")
    private @Nullable Output<String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipMtuVariable() {
        return Optional.ofNullable(this.ipMtuVariable);
    }

    /**
     * IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
     * `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
     * `aes256-gcm`
     * 
     */
    @Import(name="ipsecCiphersuite")
    private @Nullable Output<String> ipsecCiphersuite;

    /**
     * @return IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
     * `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
     * `aes256-gcm`
     * 
     */
    public Optional<Output<String>> ipsecCiphersuite() {
        return Optional.ofNullable(this.ipsecCiphersuite);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecCiphersuiteVariable")
    private @Nullable Output<String> ipsecCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecCiphersuiteVariable() {
        return Optional.ofNullable(this.ipsecCiphersuiteVariable);
    }

    /**
     * IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
     * 
     */
    @Import(name="ipsecRekeyInterval")
    private @Nullable Output<Integer> ipsecRekeyInterval;

    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
     * 
     */
    public Optional<Output<Integer>> ipsecRekeyInterval() {
        return Optional.ofNullable(this.ipsecRekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecRekeyIntervalVariable")
    private @Nullable Output<String> ipsecRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecRekeyIntervalVariable() {
        return Optional.ofNullable(this.ipsecRekeyIntervalVariable);
    }

    /**
     * Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
     * 
     */
    @Import(name="ipsecReplayWindow")
    private @Nullable Output<Integer> ipsecReplayWindow;

    /**
     * @return Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
     * 
     */
    public Optional<Output<Integer>> ipsecReplayWindow() {
        return Optional.ofNullable(this.ipsecReplayWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecReplayWindowVariable")
    private @Nullable Output<String> ipsecReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecReplayWindowVariable() {
        return Optional.ofNullable(this.ipsecReplayWindowVariable);
    }

    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4AddressVariable")
    private @Nullable Output<String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4AddressVariable() {
        return Optional.ofNullable(this.ipv4AddressVariable);
    }

    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     *   `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     *   `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     *   `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     *   `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="ipv4SubnetMask")
    private @Nullable Output<String> ipv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> ipv4SubnetMask() {
        return Optional.ofNullable(this.ipv4SubnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4SubnetMaskVariable")
    private @Nullable Output<String> ipv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4SubnetMaskVariable() {
        return Optional.ofNullable(this.ipv4SubnetMaskVariable);
    }

    /**
     * The name of the Feature
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
     * `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
     * 
     */
    @Import(name="perfectForwardSecrecy")
    private @Nullable Output<String> perfectForwardSecrecy;

    /**
     * @return IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
     * `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
     * 
     */
    public Optional<Output<String>> perfectForwardSecrecy() {
        return Optional.ofNullable(this.perfectForwardSecrecy);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perfectForwardSecrecyVariable")
    private @Nullable Output<String> perfectForwardSecrecyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perfectForwardSecrecyVariable() {
        return Optional.ofNullable(this.perfectForwardSecrecyVariable);
    }

    /**
     * Service LAN VPN Feature ID
     * 
     */
    @Import(name="serviceLanVpnFeatureId")
    private @Nullable Output<String> serviceLanVpnFeatureId;

    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    public Optional<Output<String>> serviceLanVpnFeatureId() {
        return Optional.ofNullable(this.serviceLanVpnFeatureId);
    }

    /**
     * Administrative state - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Import(name="tcpMss")
    private @Nullable Output<Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tcpMss() {
        return Optional.ofNullable(this.tcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssVariable")
    private @Nullable Output<String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssVariable() {
        return Optional.ofNullable(this.tcpMssVariable);
    }

    /**
     * Enable tracker for this interface
     * 
     */
    @Import(name="trackerId")
    private @Nullable Output<String> trackerId;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<Output<String>> trackerId() {
        return Optional.ofNullable(this.trackerId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerIdVariable")
    private @Nullable Output<String> trackerIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerIdVariable() {
        return Optional.ofNullable(this.trackerIdVariable);
    }

    @Import(name="tunnelDestinationIpv4Address")
    private @Nullable Output<String> tunnelDestinationIpv4Address;

    public Optional<Output<String>> tunnelDestinationIpv4Address() {
        return Optional.ofNullable(this.tunnelDestinationIpv4Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelDestinationIpv4AddressVariable")
    private @Nullable Output<String> tunnelDestinationIpv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelDestinationIpv4AddressVariable() {
        return Optional.ofNullable(this.tunnelDestinationIpv4AddressVariable);
    }

    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     *   `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     *   `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     *   `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     *   `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="tunnelDestinationIpv4SubnetMask")
    private @Nullable Output<String> tunnelDestinationIpv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> tunnelDestinationIpv4SubnetMask() {
        return Optional.ofNullable(this.tunnelDestinationIpv4SubnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelDestinationIpv4SubnetMaskVariable")
    private @Nullable Output<String> tunnelDestinationIpv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelDestinationIpv4SubnetMaskVariable() {
        return Optional.ofNullable(this.tunnelDestinationIpv4SubnetMaskVariable);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelRouteVia")
    private @Nullable Output<String> tunnelRouteVia;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelRouteVia() {
        return Optional.ofNullable(this.tunnelRouteVia);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelRouteViaVariable")
    private @Nullable Output<String> tunnelRouteViaVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelRouteViaVariable() {
        return Optional.ofNullable(this.tunnelRouteViaVariable);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelSourceInterface")
    private @Nullable Output<String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelSourceInterface() {
        return Optional.ofNullable(this.tunnelSourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceInterfaceVariable")
    private @Nullable Output<String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceInterfaceVariable() {
        return Optional.ofNullable(this.tunnelSourceInterfaceVariable);
    }

    @Import(name="tunnelSourceIpv4Address")
    private @Nullable Output<String> tunnelSourceIpv4Address;

    public Optional<Output<String>> tunnelSourceIpv4Address() {
        return Optional.ofNullable(this.tunnelSourceIpv4Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceIpv4AddressVariable")
    private @Nullable Output<String> tunnelSourceIpv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceIpv4AddressVariable() {
        return Optional.ofNullable(this.tunnelSourceIpv4AddressVariable);
    }

    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     *   `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     *   `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     *   `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     *   `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="tunnelSourceIpv4SubnetMask")
    private @Nullable Output<String> tunnelSourceIpv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> tunnelSourceIpv4SubnetMask() {
        return Optional.ofNullable(this.tunnelSourceIpv4SubnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceIpv4SubnetMaskVariable")
    private @Nullable Output<String> tunnelSourceIpv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceIpv4SubnetMaskVariable() {
        return Optional.ofNullable(this.tunnelSourceIpv4SubnetMaskVariable);
    }

    /**
     * The version of the Feature
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the Feature
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private ServiceLanVpnInterfaceIpsecFeatureState() {}

    private ServiceLanVpnInterfaceIpsecFeatureState(ServiceLanVpnInterfaceIpsecFeatureState $) {
        this.applicationTunnelType = $.applicationTunnelType;
        this.applicationTunnelTypeVariable = $.applicationTunnelTypeVariable;
        this.clearDontFragment = $.clearDontFragment;
        this.clearDontFragmentVariable = $.clearDontFragmentVariable;
        this.description = $.description;
        this.dpdInterval = $.dpdInterval;
        this.dpdIntervalVariable = $.dpdIntervalVariable;
        this.dpdRetries = $.dpdRetries;
        this.dpdRetriesVariable = $.dpdRetriesVariable;
        this.featureProfileId = $.featureProfileId;
        this.ikeCiphersuite = $.ikeCiphersuite;
        this.ikeCiphersuiteVariable = $.ikeCiphersuiteVariable;
        this.ikeDiffieHellmanGroup = $.ikeDiffieHellmanGroup;
        this.ikeDiffieHellmanGroupVariable = $.ikeDiffieHellmanGroupVariable;
        this.ikeIdLocalEndPoint = $.ikeIdLocalEndPoint;
        this.ikeIdLocalEndPointVariable = $.ikeIdLocalEndPointVariable;
        this.ikeIdRemoteEndPoint = $.ikeIdRemoteEndPoint;
        this.ikeIdRemoteEndPointVariable = $.ikeIdRemoteEndPointVariable;
        this.ikeIntegrityProtocol = $.ikeIntegrityProtocol;
        this.ikeIntegrityProtocolVariable = $.ikeIntegrityProtocolVariable;
        this.ikePresharedKey = $.ikePresharedKey;
        this.ikePresharedKeyVariable = $.ikePresharedKeyVariable;
        this.ikeRekeyInterval = $.ikeRekeyInterval;
        this.ikeRekeyIntervalVariable = $.ikeRekeyIntervalVariable;
        this.ikeVersion = $.ikeVersion;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.interfaceName = $.interfaceName;
        this.interfaceNameVariable = $.interfaceNameVariable;
        this.ipMtu = $.ipMtu;
        this.ipMtuVariable = $.ipMtuVariable;
        this.ipsecCiphersuite = $.ipsecCiphersuite;
        this.ipsecCiphersuiteVariable = $.ipsecCiphersuiteVariable;
        this.ipsecRekeyInterval = $.ipsecRekeyInterval;
        this.ipsecRekeyIntervalVariable = $.ipsecRekeyIntervalVariable;
        this.ipsecReplayWindow = $.ipsecReplayWindow;
        this.ipsecReplayWindowVariable = $.ipsecReplayWindowVariable;
        this.ipv4Address = $.ipv4Address;
        this.ipv4AddressVariable = $.ipv4AddressVariable;
        this.ipv4SubnetMask = $.ipv4SubnetMask;
        this.ipv4SubnetMaskVariable = $.ipv4SubnetMaskVariable;
        this.name = $.name;
        this.perfectForwardSecrecy = $.perfectForwardSecrecy;
        this.perfectForwardSecrecyVariable = $.perfectForwardSecrecyVariable;
        this.serviceLanVpnFeatureId = $.serviceLanVpnFeatureId;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.tcpMss = $.tcpMss;
        this.tcpMssVariable = $.tcpMssVariable;
        this.trackerId = $.trackerId;
        this.trackerIdVariable = $.trackerIdVariable;
        this.tunnelDestinationIpv4Address = $.tunnelDestinationIpv4Address;
        this.tunnelDestinationIpv4AddressVariable = $.tunnelDestinationIpv4AddressVariable;
        this.tunnelDestinationIpv4SubnetMask = $.tunnelDestinationIpv4SubnetMask;
        this.tunnelDestinationIpv4SubnetMaskVariable = $.tunnelDestinationIpv4SubnetMaskVariable;
        this.tunnelRouteVia = $.tunnelRouteVia;
        this.tunnelRouteViaVariable = $.tunnelRouteViaVariable;
        this.tunnelSourceInterface = $.tunnelSourceInterface;
        this.tunnelSourceInterfaceVariable = $.tunnelSourceInterfaceVariable;
        this.tunnelSourceIpv4Address = $.tunnelSourceIpv4Address;
        this.tunnelSourceIpv4AddressVariable = $.tunnelSourceIpv4AddressVariable;
        this.tunnelSourceIpv4SubnetMask = $.tunnelSourceIpv4SubnetMask;
        this.tunnelSourceIpv4SubnetMaskVariable = $.tunnelSourceIpv4SubnetMaskVariable;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLanVpnInterfaceIpsecFeatureState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLanVpnInterfaceIpsecFeatureState $;

        public Builder() {
            $ = new ServiceLanVpnInterfaceIpsecFeatureState();
        }

        public Builder(ServiceLanVpnInterfaceIpsecFeatureState defaults) {
            $ = new ServiceLanVpnInterfaceIpsecFeatureState(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationTunnelType Enable Application Tunnel Type - Choices: `none`, `sig`
         * 
         * @return builder
         * 
         */
        public Builder applicationTunnelType(@Nullable Output<String> applicationTunnelType) {
            $.applicationTunnelType = applicationTunnelType;
            return this;
        }

        /**
         * @param applicationTunnelType Enable Application Tunnel Type - Choices: `none`, `sig`
         * 
         * @return builder
         * 
         */
        public Builder applicationTunnelType(String applicationTunnelType) {
            return applicationTunnelType(Output.of(applicationTunnelType));
        }

        /**
         * @param applicationTunnelTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder applicationTunnelTypeVariable(@Nullable Output<String> applicationTunnelTypeVariable) {
            $.applicationTunnelTypeVariable = applicationTunnelTypeVariable;
            return this;
        }

        /**
         * @param applicationTunnelTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder applicationTunnelTypeVariable(String applicationTunnelTypeVariable) {
            return applicationTunnelTypeVariable(Output.of(applicationTunnelTypeVariable));
        }

        /**
         * @param clearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragment(@Nullable Output<Boolean> clearDontFragment) {
            $.clearDontFragment = clearDontFragment;
            return this;
        }

        /**
         * @param clearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragment(Boolean clearDontFragment) {
            return clearDontFragment(Output.of(clearDontFragment));
        }

        /**
         * @param clearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentVariable(@Nullable Output<String> clearDontFragmentVariable) {
            $.clearDontFragmentVariable = clearDontFragmentVariable;
            return this;
        }

        /**
         * @param clearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentVariable(String clearDontFragmentVariable) {
            return clearDontFragmentVariable(Output.of(clearDontFragmentVariable));
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dpdInterval IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder dpdInterval(@Nullable Output<Integer> dpdInterval) {
            $.dpdInterval = dpdInterval;
            return this;
        }

        /**
         * @param dpdInterval IKE keepalive interval (seconds) - Range: `10`-`3600` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder dpdInterval(Integer dpdInterval) {
            return dpdInterval(Output.of(dpdInterval));
        }

        /**
         * @param dpdIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dpdIntervalVariable(@Nullable Output<String> dpdIntervalVariable) {
            $.dpdIntervalVariable = dpdIntervalVariable;
            return this;
        }

        /**
         * @param dpdIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dpdIntervalVariable(String dpdIntervalVariable) {
            return dpdIntervalVariable(Output.of(dpdIntervalVariable));
        }

        /**
         * @param dpdRetries IKE keepalive retries - Range: `2`-`60` - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder dpdRetries(@Nullable Output<Integer> dpdRetries) {
            $.dpdRetries = dpdRetries;
            return this;
        }

        /**
         * @param dpdRetries IKE keepalive retries - Range: `2`-`60` - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder dpdRetries(Integer dpdRetries) {
            return dpdRetries(Output.of(dpdRetries));
        }

        /**
         * @param dpdRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dpdRetriesVariable(@Nullable Output<String> dpdRetriesVariable) {
            $.dpdRetriesVariable = dpdRetriesVariable;
            return this;
        }

        /**
         * @param dpdRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dpdRetriesVariable(String dpdRetriesVariable) {
            return dpdRetriesVariable(Output.of(dpdRetriesVariable));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(@Nullable Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param ikeCiphersuite IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
         * `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuite(@Nullable Output<String> ikeCiphersuite) {
            $.ikeCiphersuite = ikeCiphersuite;
            return this;
        }

        /**
         * @param ikeCiphersuite IKE identity the IKE preshared secret belongs to - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`,
         * `aes128-cbc-sha2` - Default value: `aes256-cbc-sha1`
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuite(String ikeCiphersuite) {
            return ikeCiphersuite(Output.of(ikeCiphersuite));
        }

        /**
         * @param ikeCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuiteVariable(@Nullable Output<String> ikeCiphersuiteVariable) {
            $.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            return this;
        }

        /**
         * @param ikeCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuiteVariable(String ikeCiphersuiteVariable) {
            return ikeCiphersuiteVariable(Output.of(ikeCiphersuiteVariable));
        }

        /**
         * @param ikeDiffieHellmanGroup IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroup(@Nullable Output<String> ikeDiffieHellmanGroup) {
            $.ikeDiffieHellmanGroup = ikeDiffieHellmanGroup;
            return this;
        }

        /**
         * @param ikeDiffieHellmanGroup IKE Diffie Hellman Groups - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24` - Default value: `16`
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroup(String ikeDiffieHellmanGroup) {
            return ikeDiffieHellmanGroup(Output.of(ikeDiffieHellmanGroup));
        }

        /**
         * @param ikeDiffieHellmanGroupVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroupVariable(@Nullable Output<String> ikeDiffieHellmanGroupVariable) {
            $.ikeDiffieHellmanGroupVariable = ikeDiffieHellmanGroupVariable;
            return this;
        }

        /**
         * @param ikeDiffieHellmanGroupVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeDiffieHellmanGroupVariable(String ikeDiffieHellmanGroupVariable) {
            return ikeDiffieHellmanGroupVariable(Output.of(ikeDiffieHellmanGroupVariable));
        }

        /**
         * @param ikeIdLocalEndPoint IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikeIdLocalEndPoint(@Nullable Output<String> ikeIdLocalEndPoint) {
            $.ikeIdLocalEndPoint = ikeIdLocalEndPoint;
            return this;
        }

        /**
         * @param ikeIdLocalEndPoint IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikeIdLocalEndPoint(String ikeIdLocalEndPoint) {
            return ikeIdLocalEndPoint(Output.of(ikeIdLocalEndPoint));
        }

        /**
         * @param ikeIdLocalEndPointVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeIdLocalEndPointVariable(@Nullable Output<String> ikeIdLocalEndPointVariable) {
            $.ikeIdLocalEndPointVariable = ikeIdLocalEndPointVariable;
            return this;
        }

        /**
         * @param ikeIdLocalEndPointVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeIdLocalEndPointVariable(String ikeIdLocalEndPointVariable) {
            return ikeIdLocalEndPointVariable(Output.of(ikeIdLocalEndPointVariable));
        }

        /**
         * @param ikeIdRemoteEndPoint IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikeIdRemoteEndPoint(@Nullable Output<String> ikeIdRemoteEndPoint) {
            $.ikeIdRemoteEndPoint = ikeIdRemoteEndPoint;
            return this;
        }

        /**
         * @param ikeIdRemoteEndPoint IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikeIdRemoteEndPoint(String ikeIdRemoteEndPoint) {
            return ikeIdRemoteEndPoint(Output.of(ikeIdRemoteEndPoint));
        }

        /**
         * @param ikeIdRemoteEndPointVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeIdRemoteEndPointVariable(@Nullable Output<String> ikeIdRemoteEndPointVariable) {
            $.ikeIdRemoteEndPointVariable = ikeIdRemoteEndPointVariable;
            return this;
        }

        /**
         * @param ikeIdRemoteEndPointVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeIdRemoteEndPointVariable(String ikeIdRemoteEndPointVariable) {
            return ikeIdRemoteEndPointVariable(Output.of(ikeIdRemoteEndPointVariable));
        }

        /**
         * @param ikeIntegrityProtocol IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
         * 
         * @return builder
         * 
         */
        public Builder ikeIntegrityProtocol(@Nullable Output<String> ikeIntegrityProtocol) {
            $.ikeIntegrityProtocol = ikeIntegrityProtocol;
            return this;
        }

        /**
         * @param ikeIntegrityProtocol IKE integrity protocol - Choices: `main`, `aggressive` - Default value: `main`
         * 
         * @return builder
         * 
         */
        public Builder ikeIntegrityProtocol(String ikeIntegrityProtocol) {
            return ikeIntegrityProtocol(Output.of(ikeIntegrityProtocol));
        }

        /**
         * @param ikeIntegrityProtocolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeIntegrityProtocolVariable(@Nullable Output<String> ikeIntegrityProtocolVariable) {
            $.ikeIntegrityProtocolVariable = ikeIntegrityProtocolVariable;
            return this;
        }

        /**
         * @param ikeIntegrityProtocolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeIntegrityProtocolVariable(String ikeIntegrityProtocolVariable) {
            return ikeIntegrityProtocolVariable(Output.of(ikeIntegrityProtocolVariable));
        }

        /**
         * @param ikePresharedKey Use preshared key to authenticate IKE peer
         * 
         * @return builder
         * 
         */
        public Builder ikePresharedKey(@Nullable Output<String> ikePresharedKey) {
            $.ikePresharedKey = ikePresharedKey;
            return this;
        }

        /**
         * @param ikePresharedKey Use preshared key to authenticate IKE peer
         * 
         * @return builder
         * 
         */
        public Builder ikePresharedKey(String ikePresharedKey) {
            return ikePresharedKey(Output.of(ikePresharedKey));
        }

        /**
         * @param ikePresharedKeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePresharedKeyVariable(@Nullable Output<String> ikePresharedKeyVariable) {
            $.ikePresharedKeyVariable = ikePresharedKeyVariable;
            return this;
        }

        /**
         * @param ikePresharedKeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePresharedKeyVariable(String ikePresharedKeyVariable) {
            return ikePresharedKeyVariable(Output.of(ikePresharedKeyVariable));
        }

        /**
         * @param ikeRekeyInterval IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyInterval(@Nullable Output<Integer> ikeRekeyInterval) {
            $.ikeRekeyInterval = ikeRekeyInterval;
            return this;
        }

        /**
         * @param ikeRekeyInterval IKE rekey interval &lt;60..86400&gt; seconds - Range: `60`-`86400` - Default value: `14400`
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyInterval(Integer ikeRekeyInterval) {
            return ikeRekeyInterval(Output.of(ikeRekeyInterval));
        }

        /**
         * @param ikeRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyIntervalVariable(@Nullable Output<String> ikeRekeyIntervalVariable) {
            $.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            return this;
        }

        /**
         * @param ikeRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyIntervalVariable(String ikeRekeyIntervalVariable) {
            return ikeRekeyIntervalVariable(Output.of(ikeRekeyIntervalVariable));
        }

        /**
         * @param ikeVersion IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<Integer> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion IKE Version &lt;1..2&gt; - Range: `1`-`2` - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(Integer ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param interfaceName Interface name: IPsec when present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName Interface name: IPsec when present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(@Nullable Output<String> interfaceNameVariable) {
            $.interfaceNameVariable = interfaceNameVariable;
            return this;
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            return interfaceNameVariable(Output.of(interfaceNameVariable));
        }

        /**
         * @param ipMtu Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(@Nullable Output<Integer> ipMtu) {
            $.ipMtu = ipMtu;
            return this;
        }

        /**
         * @param ipMtu Interface MTU &lt;68..9216&gt;, in bytes - Range: `68`-`9216` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(Integer ipMtu) {
            return ipMtu(Output.of(ipMtu));
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(@Nullable Output<String> ipMtuVariable) {
            $.ipMtuVariable = ipMtuVariable;
            return this;
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(String ipMtuVariable) {
            return ipMtuVariable(Output.of(ipMtuVariable));
        }

        /**
         * @param ipsecCiphersuite IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
         * `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
         * `aes256-gcm`
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuite(@Nullable Output<String> ipsecCiphersuite) {
            $.ipsecCiphersuite = ipsecCiphersuite;
            return this;
        }

        /**
         * @param ipsecCiphersuite IPsec(ESP) encryption and integrity protocol - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`,
         * `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512` - Default value:
         * `aes256-gcm`
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuite(String ipsecCiphersuite) {
            return ipsecCiphersuite(Output.of(ipsecCiphersuite));
        }

        /**
         * @param ipsecCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuiteVariable(@Nullable Output<String> ipsecCiphersuiteVariable) {
            $.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            return this;
        }

        /**
         * @param ipsecCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuiteVariable(String ipsecCiphersuiteVariable) {
            return ipsecCiphersuiteVariable(Output.of(ipsecCiphersuiteVariable));
        }

        /**
         * @param ipsecRekeyInterval IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyInterval(@Nullable Output<Integer> ipsecRekeyInterval) {
            $.ipsecRekeyInterval = ipsecRekeyInterval;
            return this;
        }

        /**
         * @param ipsecRekeyInterval IPsec rekey interval &lt;300..1209600&gt; seconds - Range: `120`-`2592000` - Default value: `3600`
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyInterval(Integer ipsecRekeyInterval) {
            return ipsecRekeyInterval(Output.of(ipsecRekeyInterval));
        }

        /**
         * @param ipsecRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyIntervalVariable(@Nullable Output<String> ipsecRekeyIntervalVariable) {
            $.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            return this;
        }

        /**
         * @param ipsecRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyIntervalVariable(String ipsecRekeyIntervalVariable) {
            return ipsecRekeyIntervalVariable(Output.of(ipsecRekeyIntervalVariable));
        }

        /**
         * @param ipsecReplayWindow Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindow(@Nullable Output<Integer> ipsecReplayWindow) {
            $.ipsecReplayWindow = ipsecReplayWindow;
            return this;
        }

        /**
         * @param ipsecReplayWindow Replay window size 32..8192 (must be a power of 2) - Range: `64`-`4096` - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindow(Integer ipsecReplayWindow) {
            return ipsecReplayWindow(Output.of(ipsecReplayWindow));
        }

        /**
         * @param ipsecReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindowVariable(@Nullable Output<String> ipsecReplayWindowVariable) {
            $.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            return this;
        }

        /**
         * @param ipsecReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindowVariable(String ipsecReplayWindowVariable) {
            return ipsecReplayWindowVariable(Output.of(ipsecReplayWindowVariable));
        }

        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(@Nullable Output<String> ipv4AddressVariable) {
            $.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            return ipv4AddressVariable(Output.of(ipv4AddressVariable));
        }

        /**
         * @param ipv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
         * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
         * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
         * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
         * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMask(@Nullable Output<String> ipv4SubnetMask) {
            $.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }

        /**
         * @param ipv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
         * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
         * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
         * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
         * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            return ipv4SubnetMask(Output.of(ipv4SubnetMask));
        }

        /**
         * @param ipv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMaskVariable(@Nullable Output<String> ipv4SubnetMaskVariable) {
            $.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }

        /**
         * @param ipv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            return ipv4SubnetMaskVariable(Output.of(ipv4SubnetMaskVariable));
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param perfectForwardSecrecy IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
         * `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
         * 
         * @return builder
         * 
         */
        public Builder perfectForwardSecrecy(@Nullable Output<String> perfectForwardSecrecy) {
            $.perfectForwardSecrecy = perfectForwardSecrecy;
            return this;
        }

        /**
         * @param perfectForwardSecrecy IPsec perfect forward secrecy settings - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`,
         * `group-19`, `group-20`, `group-21`, `group-24`, `none` - Default value: `group-16`
         * 
         * @return builder
         * 
         */
        public Builder perfectForwardSecrecy(String perfectForwardSecrecy) {
            return perfectForwardSecrecy(Output.of(perfectForwardSecrecy));
        }

        /**
         * @param perfectForwardSecrecyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perfectForwardSecrecyVariable(@Nullable Output<String> perfectForwardSecrecyVariable) {
            $.perfectForwardSecrecyVariable = perfectForwardSecrecyVariable;
            return this;
        }

        /**
         * @param perfectForwardSecrecyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perfectForwardSecrecyVariable(String perfectForwardSecrecyVariable) {
            return perfectForwardSecrecyVariable(Output.of(perfectForwardSecrecyVariable));
        }

        /**
         * @param serviceLanVpnFeatureId Service LAN VPN Feature ID
         * 
         * @return builder
         * 
         */
        public Builder serviceLanVpnFeatureId(@Nullable Output<String> serviceLanVpnFeatureId) {
            $.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            return this;
        }

        /**
         * @param serviceLanVpnFeatureId Service LAN VPN Feature ID
         * 
         * @return builder
         * 
         */
        public Builder serviceLanVpnFeatureId(String serviceLanVpnFeatureId) {
            return serviceLanVpnFeatureId(Output.of(serviceLanVpnFeatureId));
        }

        /**
         * @param shutdown Administrative state - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(@Nullable Output<Integer> tcpMss) {
            $.tcpMss = tcpMss;
            return this;
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(Integer tcpMss) {
            return tcpMss(Output.of(tcpMss));
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(@Nullable Output<String> tcpMssVariable) {
            $.tcpMssVariable = tcpMssVariable;
            return this;
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(String tcpMssVariable) {
            return tcpMssVariable(Output.of(tcpMssVariable));
        }

        /**
         * @param trackerId Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackerId(@Nullable Output<String> trackerId) {
            $.trackerId = trackerId;
            return this;
        }

        /**
         * @param trackerId Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackerId(String trackerId) {
            return trackerId(Output.of(trackerId));
        }

        /**
         * @param trackerIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerIdVariable(@Nullable Output<String> trackerIdVariable) {
            $.trackerIdVariable = trackerIdVariable;
            return this;
        }

        /**
         * @param trackerIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerIdVariable(String trackerIdVariable) {
            return trackerIdVariable(Output.of(trackerIdVariable));
        }

        public Builder tunnelDestinationIpv4Address(@Nullable Output<String> tunnelDestinationIpv4Address) {
            $.tunnelDestinationIpv4Address = tunnelDestinationIpv4Address;
            return this;
        }

        public Builder tunnelDestinationIpv4Address(String tunnelDestinationIpv4Address) {
            return tunnelDestinationIpv4Address(Output.of(tunnelDestinationIpv4Address));
        }

        /**
         * @param tunnelDestinationIpv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationIpv4AddressVariable(@Nullable Output<String> tunnelDestinationIpv4AddressVariable) {
            $.tunnelDestinationIpv4AddressVariable = tunnelDestinationIpv4AddressVariable;
            return this;
        }

        /**
         * @param tunnelDestinationIpv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationIpv4AddressVariable(String tunnelDestinationIpv4AddressVariable) {
            return tunnelDestinationIpv4AddressVariable(Output.of(tunnelDestinationIpv4AddressVariable));
        }

        /**
         * @param tunnelDestinationIpv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
         * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
         * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
         * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
         * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationIpv4SubnetMask(@Nullable Output<String> tunnelDestinationIpv4SubnetMask) {
            $.tunnelDestinationIpv4SubnetMask = tunnelDestinationIpv4SubnetMask;
            return this;
        }

        /**
         * @param tunnelDestinationIpv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
         * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
         * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
         * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
         * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationIpv4SubnetMask(String tunnelDestinationIpv4SubnetMask) {
            return tunnelDestinationIpv4SubnetMask(Output.of(tunnelDestinationIpv4SubnetMask));
        }

        /**
         * @param tunnelDestinationIpv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationIpv4SubnetMaskVariable(@Nullable Output<String> tunnelDestinationIpv4SubnetMaskVariable) {
            $.tunnelDestinationIpv4SubnetMaskVariable = tunnelDestinationIpv4SubnetMaskVariable;
            return this;
        }

        /**
         * @param tunnelDestinationIpv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationIpv4SubnetMaskVariable(String tunnelDestinationIpv4SubnetMaskVariable) {
            return tunnelDestinationIpv4SubnetMaskVariable(Output.of(tunnelDestinationIpv4SubnetMaskVariable));
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(@Nullable Output<String> tunnelRouteVia) {
            $.tunnelRouteVia = tunnelRouteVia;
            return this;
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            return tunnelRouteVia(Output.of(tunnelRouteVia));
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(@Nullable Output<String> tunnelRouteViaVariable) {
            $.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            return tunnelRouteViaVariable(Output.of(tunnelRouteViaVariable));
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(@Nullable Output<String> tunnelSourceInterface) {
            $.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            return tunnelSourceInterface(Output.of(tunnelSourceInterface));
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(@Nullable Output<String> tunnelSourceInterfaceVariable) {
            $.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            return tunnelSourceInterfaceVariable(Output.of(tunnelSourceInterfaceVariable));
        }

        public Builder tunnelSourceIpv4Address(@Nullable Output<String> tunnelSourceIpv4Address) {
            $.tunnelSourceIpv4Address = tunnelSourceIpv4Address;
            return this;
        }

        public Builder tunnelSourceIpv4Address(String tunnelSourceIpv4Address) {
            return tunnelSourceIpv4Address(Output.of(tunnelSourceIpv4Address));
        }

        /**
         * @param tunnelSourceIpv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceIpv4AddressVariable(@Nullable Output<String> tunnelSourceIpv4AddressVariable) {
            $.tunnelSourceIpv4AddressVariable = tunnelSourceIpv4AddressVariable;
            return this;
        }

        /**
         * @param tunnelSourceIpv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceIpv4AddressVariable(String tunnelSourceIpv4AddressVariable) {
            return tunnelSourceIpv4AddressVariable(Output.of(tunnelSourceIpv4AddressVariable));
        }

        /**
         * @param tunnelSourceIpv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
         * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
         * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
         * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
         * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceIpv4SubnetMask(@Nullable Output<String> tunnelSourceIpv4SubnetMask) {
            $.tunnelSourceIpv4SubnetMask = tunnelSourceIpv4SubnetMask;
            return this;
        }

        /**
         * @param tunnelSourceIpv4SubnetMask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
         * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
         * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
         * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
         * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceIpv4SubnetMask(String tunnelSourceIpv4SubnetMask) {
            return tunnelSourceIpv4SubnetMask(Output.of(tunnelSourceIpv4SubnetMask));
        }

        /**
         * @param tunnelSourceIpv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceIpv4SubnetMaskVariable(@Nullable Output<String> tunnelSourceIpv4SubnetMaskVariable) {
            $.tunnelSourceIpv4SubnetMaskVariable = tunnelSourceIpv4SubnetMaskVariable;
            return this;
        }

        /**
         * @param tunnelSourceIpv4SubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceIpv4SubnetMaskVariable(String tunnelSourceIpv4SubnetMaskVariable) {
            return tunnelSourceIpv4SubnetMaskVariable(Output.of(tunnelSourceIpv4SubnetMaskVariable));
        }

        /**
         * @param version The version of the Feature
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the Feature
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public ServiceLanVpnInterfaceIpsecFeatureState build() {
            return $;
        }
    }

}
