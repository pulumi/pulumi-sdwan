// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoBfdFeatureTemplateColor;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoBfdFeatureTemplateResult {
    /**
     * @return Set color that identifies the WAN transport tunnel
     * 
     */
    private List<GetCiscoBfdFeatureTemplateColor> colors;
    /**
     * @return Set default DSCP value for BFD packets
     * 
     */
    private Integer defaultDscp;
    /**
     * @return Variable name
     * 
     */
    private String defaultDscpVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Set the number of polling intervals used to determine tunnel SLA class
     * 
     */
    private Integer multiplier;
    /**
     * @return Variable name
     * 
     */
    private String multiplierVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Set how often BFD polls tunnels to collect packet latency, loss, and statistics
     * 
     */
    private Integer pollInterval;
    /**
     * @return Variable name
     * 
     */
    private String pollIntervalVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoBfdFeatureTemplateResult() {}
    /**
     * @return Set color that identifies the WAN transport tunnel
     * 
     */
    public List<GetCiscoBfdFeatureTemplateColor> colors() {
        return this.colors;
    }
    /**
     * @return Set default DSCP value for BFD packets
     * 
     */
    public Integer defaultDscp() {
        return this.defaultDscp;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultDscpVariable() {
        return this.defaultDscpVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set the number of polling intervals used to determine tunnel SLA class
     * 
     */
    public Integer multiplier() {
        return this.multiplier;
    }
    /**
     * @return Variable name
     * 
     */
    public String multiplierVariable() {
        return this.multiplierVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set how often BFD polls tunnels to collect packet latency, loss, and statistics
     * 
     */
    public Integer pollInterval() {
        return this.pollInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String pollIntervalVariable() {
        return this.pollIntervalVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoBfdFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCiscoBfdFeatureTemplateColor> colors;
        private Integer defaultDscp;
        private String defaultDscpVariable;
        private String description;
        private List<String> deviceTypes;
        private String id;
        private Integer multiplier;
        private String multiplierVariable;
        private String name;
        private Integer pollInterval;
        private String pollIntervalVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoBfdFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.colors = defaults.colors;
    	      this.defaultDscp = defaults.defaultDscp;
    	      this.defaultDscpVariable = defaults.defaultDscpVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.id = defaults.id;
    	      this.multiplier = defaults.multiplier;
    	      this.multiplierVariable = defaults.multiplierVariable;
    	      this.name = defaults.name;
    	      this.pollInterval = defaults.pollInterval;
    	      this.pollIntervalVariable = defaults.pollIntervalVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder colors(List<GetCiscoBfdFeatureTemplateColor> colors) {
            if (colors == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "colors");
            }
            this.colors = colors;
            return this;
        }
        public Builder colors(GetCiscoBfdFeatureTemplateColor... colors) {
            return colors(List.of(colors));
        }
        @CustomType.Setter
        public Builder defaultDscp(Integer defaultDscp) {
            if (defaultDscp == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "defaultDscp");
            }
            this.defaultDscp = defaultDscp;
            return this;
        }
        @CustomType.Setter
        public Builder defaultDscpVariable(String defaultDscpVariable) {
            if (defaultDscpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "defaultDscpVariable");
            }
            this.defaultDscpVariable = defaultDscpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder multiplier(Integer multiplier) {
            if (multiplier == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "multiplier");
            }
            this.multiplier = multiplier;
            return this;
        }
        @CustomType.Setter
        public Builder multiplierVariable(String multiplierVariable) {
            if (multiplierVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "multiplierVariable");
            }
            this.multiplierVariable = multiplierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pollInterval(Integer pollInterval) {
            if (pollInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "pollInterval");
            }
            this.pollInterval = pollInterval;
            return this;
        }
        @CustomType.Setter
        public Builder pollIntervalVariable(String pollIntervalVariable) {
            if (pollIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "pollIntervalVariable");
            }
            this.pollIntervalVariable = pollIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoBfdFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoBfdFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoBfdFeatureTemplateResult();
            _resultValue.colors = colors;
            _resultValue.defaultDscp = defaultDscp;
            _resultValue.defaultDscpVariable = defaultDscpVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.id = id;
            _resultValue.multiplier = multiplier;
            _resultValue.multiplierVariable = multiplierVariable;
            _resultValue.name = name;
            _resultValue.pollInterval = pollInterval;
            _resultValue.pollIntervalVariable = pollIntervalVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
