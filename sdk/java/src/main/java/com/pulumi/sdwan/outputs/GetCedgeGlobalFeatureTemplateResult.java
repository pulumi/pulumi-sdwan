// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCedgeGlobalFeatureTemplateResult {
    /**
     * @return Set ARP Proxy
     * 
     */
    private Boolean arpProxy;
    /**
     * @return Variable name
     * 
     */
    private String arpProxyVariable;
    /**
     * @return Configure Ignore BOOTP
     * 
     */
    private Boolean bootp;
    /**
     * @return Variable name
     * 
     */
    private String bootpVariable;
    /**
     * @return Configure CDP
     * 
     */
    private Boolean cdp;
    /**
     * @return Variable name
     * 
     */
    private String cdpVariable;
    /**
     * @return Configure Console Logging
     * 
     */
    private Boolean consoleLogging;
    /**
     * @return Variable name
     * 
     */
    private String consoleLoggingVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Configure Domain-Lookup
     * 
     */
    private Boolean domainLookup;
    /**
     * @return Variable name
     * 
     */
    private String domainLookupVariable;
    /**
     * @return Set Passive FTP
     * 
     */
    private Boolean ftpPassive;
    /**
     * @return Variable name
     * 
     */
    private String ftpPassiveVariable;
    /**
     * @return Set preference for HTTP Authentication
     * 
     */
    private String httpAuthentication;
    /**
     * @return Variable name
     * 
     */
    private String httpAuthenticationVariable;
    /**
     * @return Set HTTP Server
     * 
     */
    private Boolean httpServer;
    /**
     * @return Variable name
     * 
     */
    private String httpServerVariable;
    /**
     * @return Set HTTPS Server
     * 
     */
    private Boolean httpsServer;
    /**
     * @return Variable name
     * 
     */
    private String httpsServerVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Set Source Route
     * 
     */
    private Boolean ipSourceRouting;
    /**
     * @return Variable name
     * 
     */
    private String ipSourceRoutingVariable;
    /**
     * @return Configure Telnet (Outbound)
     * 
     */
    private Boolean lineVty;
    /**
     * @return Variable name
     * 
     */
    private String lineVtyVariable;
    /**
     * @return Configure LLDP
     * 
     */
    private Boolean lldp;
    /**
     * @return Variable name
     * 
     */
    private String lldpVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Set NAT64 TCP session timeout, in seconds
     * 
     */
    private Integer nat64TcpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String nat64TcpTimeoutVariable;
    /**
     * @return Set NAT64 UDP session timeout, in seconds
     * 
     */
    private Integer nat64UdpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String nat64UdpTimeoutVariable;
    /**
     * @return Set RSH/RCP
     * 
     */
    private Boolean rshRcp;
    /**
     * @return Variable name
     * 
     */
    private String rshRcpVariable;
    /**
     * @return Configure SNMP Ifindex Persist
     * 
     */
    private Boolean snmpIfindexPersist;
    /**
     * @return Variable name
     * 
     */
    private String snmpIfindexPersistVariable;
    /**
     * @return Specify interface for source address in all HTTP(S) client connections
     * 
     */
    private String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String sourceInterfaceVariable;
    /**
     * @return Set SSH version
     * 
     */
    private Integer sshVersion;
    /**
     * @return Variable name
     * 
     */
    private String sshVersionVariable;
    /**
     * @return Configure tcp-keepalives-in
     * 
     */
    private Boolean tcpKeepalivesIn;
    /**
     * @return Variable name
     * 
     */
    private String tcpKeepalivesInVariable;
    /**
     * @return Configure tcp-keepalives-out
     * 
     */
    private Boolean tcpKeepalivesOut;
    /**
     * @return Variable name
     * 
     */
    private String tcpKeepalivesOutVariable;
    /**
     * @return Configure tcp-small-servers
     * 
     */
    private Boolean tcpSmallServers;
    /**
     * @return Variable name
     * 
     */
    private String tcpSmallServersVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Configure udp-small-servers
     * 
     */
    private Boolean udpSmallServers;
    /**
     * @return Variable name
     * 
     */
    private String udpSmallServersVariable;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;
    /**
     * @return Configure VTY Line Logging
     * 
     */
    private Boolean vtyLogging;
    /**
     * @return Variable name
     * 
     */
    private String vtyLoggingVariable;

    private GetCedgeGlobalFeatureTemplateResult() {}
    /**
     * @return Set ARP Proxy
     * 
     */
    public Boolean arpProxy() {
        return this.arpProxy;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpProxyVariable() {
        return this.arpProxyVariable;
    }
    /**
     * @return Configure Ignore BOOTP
     * 
     */
    public Boolean bootp() {
        return this.bootp;
    }
    /**
     * @return Variable name
     * 
     */
    public String bootpVariable() {
        return this.bootpVariable;
    }
    /**
     * @return Configure CDP
     * 
     */
    public Boolean cdp() {
        return this.cdp;
    }
    /**
     * @return Variable name
     * 
     */
    public String cdpVariable() {
        return this.cdpVariable;
    }
    /**
     * @return Configure Console Logging
     * 
     */
    public Boolean consoleLogging() {
        return this.consoleLogging;
    }
    /**
     * @return Variable name
     * 
     */
    public String consoleLoggingVariable() {
        return this.consoleLoggingVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Configure Domain-Lookup
     * 
     */
    public Boolean domainLookup() {
        return this.domainLookup;
    }
    /**
     * @return Variable name
     * 
     */
    public String domainLookupVariable() {
        return this.domainLookupVariable;
    }
    /**
     * @return Set Passive FTP
     * 
     */
    public Boolean ftpPassive() {
        return this.ftpPassive;
    }
    /**
     * @return Variable name
     * 
     */
    public String ftpPassiveVariable() {
        return this.ftpPassiveVariable;
    }
    /**
     * @return Set preference for HTTP Authentication
     * 
     */
    public String httpAuthentication() {
        return this.httpAuthentication;
    }
    /**
     * @return Variable name
     * 
     */
    public String httpAuthenticationVariable() {
        return this.httpAuthenticationVariable;
    }
    /**
     * @return Set HTTP Server
     * 
     */
    public Boolean httpServer() {
        return this.httpServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String httpServerVariable() {
        return this.httpServerVariable;
    }
    /**
     * @return Set HTTPS Server
     * 
     */
    public Boolean httpsServer() {
        return this.httpsServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String httpsServerVariable() {
        return this.httpsServerVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set Source Route
     * 
     */
    public Boolean ipSourceRouting() {
        return this.ipSourceRouting;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipSourceRoutingVariable() {
        return this.ipSourceRoutingVariable;
    }
    /**
     * @return Configure Telnet (Outbound)
     * 
     */
    public Boolean lineVty() {
        return this.lineVty;
    }
    /**
     * @return Variable name
     * 
     */
    public String lineVtyVariable() {
        return this.lineVtyVariable;
    }
    /**
     * @return Configure LLDP
     * 
     */
    public Boolean lldp() {
        return this.lldp;
    }
    /**
     * @return Variable name
     * 
     */
    public String lldpVariable() {
        return this.lldpVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set NAT64 TCP session timeout, in seconds
     * 
     */
    public Integer nat64TcpTimeout() {
        return this.nat64TcpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String nat64TcpTimeoutVariable() {
        return this.nat64TcpTimeoutVariable;
    }
    /**
     * @return Set NAT64 UDP session timeout, in seconds
     * 
     */
    public Integer nat64UdpTimeout() {
        return this.nat64UdpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String nat64UdpTimeoutVariable() {
        return this.nat64UdpTimeoutVariable;
    }
    /**
     * @return Set RSH/RCP
     * 
     */
    public Boolean rshRcp() {
        return this.rshRcp;
    }
    /**
     * @return Variable name
     * 
     */
    public String rshRcpVariable() {
        return this.rshRcpVariable;
    }
    /**
     * @return Configure SNMP Ifindex Persist
     * 
     */
    public Boolean snmpIfindexPersist() {
        return this.snmpIfindexPersist;
    }
    /**
     * @return Variable name
     * 
     */
    public String snmpIfindexPersistVariable() {
        return this.snmpIfindexPersistVariable;
    }
    /**
     * @return Specify interface for source address in all HTTP(S) client connections
     * 
     */
    public String sourceInterface() {
        return this.sourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceInterfaceVariable() {
        return this.sourceInterfaceVariable;
    }
    /**
     * @return Set SSH version
     * 
     */
    public Integer sshVersion() {
        return this.sshVersion;
    }
    /**
     * @return Variable name
     * 
     */
    public String sshVersionVariable() {
        return this.sshVersionVariable;
    }
    /**
     * @return Configure tcp-keepalives-in
     * 
     */
    public Boolean tcpKeepalivesIn() {
        return this.tcpKeepalivesIn;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpKeepalivesInVariable() {
        return this.tcpKeepalivesInVariable;
    }
    /**
     * @return Configure tcp-keepalives-out
     * 
     */
    public Boolean tcpKeepalivesOut() {
        return this.tcpKeepalivesOut;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpKeepalivesOutVariable() {
        return this.tcpKeepalivesOutVariable;
    }
    /**
     * @return Configure tcp-small-servers
     * 
     */
    public Boolean tcpSmallServers() {
        return this.tcpSmallServers;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpSmallServersVariable() {
        return this.tcpSmallServersVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Configure udp-small-servers
     * 
     */
    public Boolean udpSmallServers() {
        return this.udpSmallServers;
    }
    /**
     * @return Variable name
     * 
     */
    public String udpSmallServersVariable() {
        return this.udpSmallServersVariable;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Configure VTY Line Logging
     * 
     */
    public Boolean vtyLogging() {
        return this.vtyLogging;
    }
    /**
     * @return Variable name
     * 
     */
    public String vtyLoggingVariable() {
        return this.vtyLoggingVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCedgeGlobalFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean arpProxy;
        private String arpProxyVariable;
        private Boolean bootp;
        private String bootpVariable;
        private Boolean cdp;
        private String cdpVariable;
        private Boolean consoleLogging;
        private String consoleLoggingVariable;
        private String description;
        private List<String> deviceTypes;
        private Boolean domainLookup;
        private String domainLookupVariable;
        private Boolean ftpPassive;
        private String ftpPassiveVariable;
        private String httpAuthentication;
        private String httpAuthenticationVariable;
        private Boolean httpServer;
        private String httpServerVariable;
        private Boolean httpsServer;
        private String httpsServerVariable;
        private String id;
        private Boolean ipSourceRouting;
        private String ipSourceRoutingVariable;
        private Boolean lineVty;
        private String lineVtyVariable;
        private Boolean lldp;
        private String lldpVariable;
        private String name;
        private Integer nat64TcpTimeout;
        private String nat64TcpTimeoutVariable;
        private Integer nat64UdpTimeout;
        private String nat64UdpTimeoutVariable;
        private Boolean rshRcp;
        private String rshRcpVariable;
        private Boolean snmpIfindexPersist;
        private String snmpIfindexPersistVariable;
        private String sourceInterface;
        private String sourceInterfaceVariable;
        private Integer sshVersion;
        private String sshVersionVariable;
        private Boolean tcpKeepalivesIn;
        private String tcpKeepalivesInVariable;
        private Boolean tcpKeepalivesOut;
        private String tcpKeepalivesOutVariable;
        private Boolean tcpSmallServers;
        private String tcpSmallServersVariable;
        private String templateType;
        private Boolean udpSmallServers;
        private String udpSmallServersVariable;
        private Integer version;
        private Boolean vtyLogging;
        private String vtyLoggingVariable;
        public Builder() {}
        public Builder(GetCedgeGlobalFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arpProxy = defaults.arpProxy;
    	      this.arpProxyVariable = defaults.arpProxyVariable;
    	      this.bootp = defaults.bootp;
    	      this.bootpVariable = defaults.bootpVariable;
    	      this.cdp = defaults.cdp;
    	      this.cdpVariable = defaults.cdpVariable;
    	      this.consoleLogging = defaults.consoleLogging;
    	      this.consoleLoggingVariable = defaults.consoleLoggingVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.domainLookup = defaults.domainLookup;
    	      this.domainLookupVariable = defaults.domainLookupVariable;
    	      this.ftpPassive = defaults.ftpPassive;
    	      this.ftpPassiveVariable = defaults.ftpPassiveVariable;
    	      this.httpAuthentication = defaults.httpAuthentication;
    	      this.httpAuthenticationVariable = defaults.httpAuthenticationVariable;
    	      this.httpServer = defaults.httpServer;
    	      this.httpServerVariable = defaults.httpServerVariable;
    	      this.httpsServer = defaults.httpsServer;
    	      this.httpsServerVariable = defaults.httpsServerVariable;
    	      this.id = defaults.id;
    	      this.ipSourceRouting = defaults.ipSourceRouting;
    	      this.ipSourceRoutingVariable = defaults.ipSourceRoutingVariable;
    	      this.lineVty = defaults.lineVty;
    	      this.lineVtyVariable = defaults.lineVtyVariable;
    	      this.lldp = defaults.lldp;
    	      this.lldpVariable = defaults.lldpVariable;
    	      this.name = defaults.name;
    	      this.nat64TcpTimeout = defaults.nat64TcpTimeout;
    	      this.nat64TcpTimeoutVariable = defaults.nat64TcpTimeoutVariable;
    	      this.nat64UdpTimeout = defaults.nat64UdpTimeout;
    	      this.nat64UdpTimeoutVariable = defaults.nat64UdpTimeoutVariable;
    	      this.rshRcp = defaults.rshRcp;
    	      this.rshRcpVariable = defaults.rshRcpVariable;
    	      this.snmpIfindexPersist = defaults.snmpIfindexPersist;
    	      this.snmpIfindexPersistVariable = defaults.snmpIfindexPersistVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.sshVersion = defaults.sshVersion;
    	      this.sshVersionVariable = defaults.sshVersionVariable;
    	      this.tcpKeepalivesIn = defaults.tcpKeepalivesIn;
    	      this.tcpKeepalivesInVariable = defaults.tcpKeepalivesInVariable;
    	      this.tcpKeepalivesOut = defaults.tcpKeepalivesOut;
    	      this.tcpKeepalivesOutVariable = defaults.tcpKeepalivesOutVariable;
    	      this.tcpSmallServers = defaults.tcpSmallServers;
    	      this.tcpSmallServersVariable = defaults.tcpSmallServersVariable;
    	      this.templateType = defaults.templateType;
    	      this.udpSmallServers = defaults.udpSmallServers;
    	      this.udpSmallServersVariable = defaults.udpSmallServersVariable;
    	      this.version = defaults.version;
    	      this.vtyLogging = defaults.vtyLogging;
    	      this.vtyLoggingVariable = defaults.vtyLoggingVariable;
        }

        @CustomType.Setter
        public Builder arpProxy(Boolean arpProxy) {
            if (arpProxy == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "arpProxy");
            }
            this.arpProxy = arpProxy;
            return this;
        }
        @CustomType.Setter
        public Builder arpProxyVariable(String arpProxyVariable) {
            if (arpProxyVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "arpProxyVariable");
            }
            this.arpProxyVariable = arpProxyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bootp(Boolean bootp) {
            if (bootp == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "bootp");
            }
            this.bootp = bootp;
            return this;
        }
        @CustomType.Setter
        public Builder bootpVariable(String bootpVariable) {
            if (bootpVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "bootpVariable");
            }
            this.bootpVariable = bootpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder cdp(Boolean cdp) {
            if (cdp == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "cdp");
            }
            this.cdp = cdp;
            return this;
        }
        @CustomType.Setter
        public Builder cdpVariable(String cdpVariable) {
            if (cdpVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "cdpVariable");
            }
            this.cdpVariable = cdpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder consoleLogging(Boolean consoleLogging) {
            if (consoleLogging == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "consoleLogging");
            }
            this.consoleLogging = consoleLogging;
            return this;
        }
        @CustomType.Setter
        public Builder consoleLoggingVariable(String consoleLoggingVariable) {
            if (consoleLoggingVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "consoleLoggingVariable");
            }
            this.consoleLoggingVariable = consoleLoggingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder domainLookup(Boolean domainLookup) {
            if (domainLookup == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "domainLookup");
            }
            this.domainLookup = domainLookup;
            return this;
        }
        @CustomType.Setter
        public Builder domainLookupVariable(String domainLookupVariable) {
            if (domainLookupVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "domainLookupVariable");
            }
            this.domainLookupVariable = domainLookupVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPassive(Boolean ftpPassive) {
            if (ftpPassive == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "ftpPassive");
            }
            this.ftpPassive = ftpPassive;
            return this;
        }
        @CustomType.Setter
        public Builder ftpPassiveVariable(String ftpPassiveVariable) {
            if (ftpPassiveVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "ftpPassiveVariable");
            }
            this.ftpPassiveVariable = ftpPassiveVariable;
            return this;
        }
        @CustomType.Setter
        public Builder httpAuthentication(String httpAuthentication) {
            if (httpAuthentication == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "httpAuthentication");
            }
            this.httpAuthentication = httpAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder httpAuthenticationVariable(String httpAuthenticationVariable) {
            if (httpAuthenticationVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "httpAuthenticationVariable");
            }
            this.httpAuthenticationVariable = httpAuthenticationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder httpServer(Boolean httpServer) {
            if (httpServer == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "httpServer");
            }
            this.httpServer = httpServer;
            return this;
        }
        @CustomType.Setter
        public Builder httpServerVariable(String httpServerVariable) {
            if (httpServerVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "httpServerVariable");
            }
            this.httpServerVariable = httpServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder httpsServer(Boolean httpsServer) {
            if (httpsServer == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "httpsServer");
            }
            this.httpsServer = httpsServer;
            return this;
        }
        @CustomType.Setter
        public Builder httpsServerVariable(String httpsServerVariable) {
            if (httpsServerVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "httpsServerVariable");
            }
            this.httpsServerVariable = httpsServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipSourceRouting(Boolean ipSourceRouting) {
            if (ipSourceRouting == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "ipSourceRouting");
            }
            this.ipSourceRouting = ipSourceRouting;
            return this;
        }
        @CustomType.Setter
        public Builder ipSourceRoutingVariable(String ipSourceRoutingVariable) {
            if (ipSourceRoutingVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "ipSourceRoutingVariable");
            }
            this.ipSourceRoutingVariable = ipSourceRoutingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder lineVty(Boolean lineVty) {
            if (lineVty == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "lineVty");
            }
            this.lineVty = lineVty;
            return this;
        }
        @CustomType.Setter
        public Builder lineVtyVariable(String lineVtyVariable) {
            if (lineVtyVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "lineVtyVariable");
            }
            this.lineVtyVariable = lineVtyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder lldp(Boolean lldp) {
            if (lldp == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "lldp");
            }
            this.lldp = lldp;
            return this;
        }
        @CustomType.Setter
        public Builder lldpVariable(String lldpVariable) {
            if (lldpVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "lldpVariable");
            }
            this.lldpVariable = lldpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat64TcpTimeout(Integer nat64TcpTimeout) {
            if (nat64TcpTimeout == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "nat64TcpTimeout");
            }
            this.nat64TcpTimeout = nat64TcpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder nat64TcpTimeoutVariable(String nat64TcpTimeoutVariable) {
            if (nat64TcpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "nat64TcpTimeoutVariable");
            }
            this.nat64TcpTimeoutVariable = nat64TcpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nat64UdpTimeout(Integer nat64UdpTimeout) {
            if (nat64UdpTimeout == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "nat64UdpTimeout");
            }
            this.nat64UdpTimeout = nat64UdpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder nat64UdpTimeoutVariable(String nat64UdpTimeoutVariable) {
            if (nat64UdpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "nat64UdpTimeoutVariable");
            }
            this.nat64UdpTimeoutVariable = nat64UdpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder rshRcp(Boolean rshRcp) {
            if (rshRcp == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "rshRcp");
            }
            this.rshRcp = rshRcp;
            return this;
        }
        @CustomType.Setter
        public Builder rshRcpVariable(String rshRcpVariable) {
            if (rshRcpVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "rshRcpVariable");
            }
            this.rshRcpVariable = rshRcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder snmpIfindexPersist(Boolean snmpIfindexPersist) {
            if (snmpIfindexPersist == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "snmpIfindexPersist");
            }
            this.snmpIfindexPersist = snmpIfindexPersist;
            return this;
        }
        @CustomType.Setter
        public Builder snmpIfindexPersistVariable(String snmpIfindexPersistVariable) {
            if (snmpIfindexPersistVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "snmpIfindexPersistVariable");
            }
            this.snmpIfindexPersistVariable = snmpIfindexPersistVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(String sourceInterface) {
            if (sourceInterface == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "sourceInterface");
            }
            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            if (sourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "sourceInterfaceVariable");
            }
            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sshVersion(Integer sshVersion) {
            if (sshVersion == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "sshVersion");
            }
            this.sshVersion = sshVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sshVersionVariable(String sshVersionVariable) {
            if (sshVersionVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "sshVersionVariable");
            }
            this.sshVersionVariable = sshVersionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpKeepalivesIn(Boolean tcpKeepalivesIn) {
            if (tcpKeepalivesIn == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "tcpKeepalivesIn");
            }
            this.tcpKeepalivesIn = tcpKeepalivesIn;
            return this;
        }
        @CustomType.Setter
        public Builder tcpKeepalivesInVariable(String tcpKeepalivesInVariable) {
            if (tcpKeepalivesInVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "tcpKeepalivesInVariable");
            }
            this.tcpKeepalivesInVariable = tcpKeepalivesInVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpKeepalivesOut(Boolean tcpKeepalivesOut) {
            if (tcpKeepalivesOut == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "tcpKeepalivesOut");
            }
            this.tcpKeepalivesOut = tcpKeepalivesOut;
            return this;
        }
        @CustomType.Setter
        public Builder tcpKeepalivesOutVariable(String tcpKeepalivesOutVariable) {
            if (tcpKeepalivesOutVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "tcpKeepalivesOutVariable");
            }
            this.tcpKeepalivesOutVariable = tcpKeepalivesOutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpSmallServers(Boolean tcpSmallServers) {
            if (tcpSmallServers == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "tcpSmallServers");
            }
            this.tcpSmallServers = tcpSmallServers;
            return this;
        }
        @CustomType.Setter
        public Builder tcpSmallServersVariable(String tcpSmallServersVariable) {
            if (tcpSmallServersVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "tcpSmallServersVariable");
            }
            this.tcpSmallServersVariable = tcpSmallServersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder udpSmallServers(Boolean udpSmallServers) {
            if (udpSmallServers == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "udpSmallServers");
            }
            this.udpSmallServers = udpSmallServers;
            return this;
        }
        @CustomType.Setter
        public Builder udpSmallServersVariable(String udpSmallServersVariable) {
            if (udpSmallServersVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "udpSmallServersVariable");
            }
            this.udpSmallServersVariable = udpSmallServersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vtyLogging(Boolean vtyLogging) {
            if (vtyLogging == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "vtyLogging");
            }
            this.vtyLogging = vtyLogging;
            return this;
        }
        @CustomType.Setter
        public Builder vtyLoggingVariable(String vtyLoggingVariable) {
            if (vtyLoggingVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeGlobalFeatureTemplateResult", "vtyLoggingVariable");
            }
            this.vtyLoggingVariable = vtyLoggingVariable;
            return this;
        }
        public GetCedgeGlobalFeatureTemplateResult build() {
            final var _resultValue = new GetCedgeGlobalFeatureTemplateResult();
            _resultValue.arpProxy = arpProxy;
            _resultValue.arpProxyVariable = arpProxyVariable;
            _resultValue.bootp = bootp;
            _resultValue.bootpVariable = bootpVariable;
            _resultValue.cdp = cdp;
            _resultValue.cdpVariable = cdpVariable;
            _resultValue.consoleLogging = consoleLogging;
            _resultValue.consoleLoggingVariable = consoleLoggingVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.domainLookup = domainLookup;
            _resultValue.domainLookupVariable = domainLookupVariable;
            _resultValue.ftpPassive = ftpPassive;
            _resultValue.ftpPassiveVariable = ftpPassiveVariable;
            _resultValue.httpAuthentication = httpAuthentication;
            _resultValue.httpAuthenticationVariable = httpAuthenticationVariable;
            _resultValue.httpServer = httpServer;
            _resultValue.httpServerVariable = httpServerVariable;
            _resultValue.httpsServer = httpsServer;
            _resultValue.httpsServerVariable = httpsServerVariable;
            _resultValue.id = id;
            _resultValue.ipSourceRouting = ipSourceRouting;
            _resultValue.ipSourceRoutingVariable = ipSourceRoutingVariable;
            _resultValue.lineVty = lineVty;
            _resultValue.lineVtyVariable = lineVtyVariable;
            _resultValue.lldp = lldp;
            _resultValue.lldpVariable = lldpVariable;
            _resultValue.name = name;
            _resultValue.nat64TcpTimeout = nat64TcpTimeout;
            _resultValue.nat64TcpTimeoutVariable = nat64TcpTimeoutVariable;
            _resultValue.nat64UdpTimeout = nat64UdpTimeout;
            _resultValue.nat64UdpTimeoutVariable = nat64UdpTimeoutVariable;
            _resultValue.rshRcp = rshRcp;
            _resultValue.rshRcpVariable = rshRcpVariable;
            _resultValue.snmpIfindexPersist = snmpIfindexPersist;
            _resultValue.snmpIfindexPersistVariable = snmpIfindexPersistVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.sshVersion = sshVersion;
            _resultValue.sshVersionVariable = sshVersionVariable;
            _resultValue.tcpKeepalivesIn = tcpKeepalivesIn;
            _resultValue.tcpKeepalivesInVariable = tcpKeepalivesInVariable;
            _resultValue.tcpKeepalivesOut = tcpKeepalivesOut;
            _resultValue.tcpKeepalivesOutVariable = tcpKeepalivesOutVariable;
            _resultValue.tcpSmallServers = tcpSmallServers;
            _resultValue.tcpSmallServersVariable = tcpSmallServersVariable;
            _resultValue.templateType = templateType;
            _resultValue.udpSmallServers = udpSmallServers;
            _resultValue.udpSmallServersVariable = udpSmallServersVariable;
            _resultValue.version = version;
            _resultValue.vtyLogging = vtyLogging;
            _resultValue.vtyLoggingVariable = vtyLoggingVariable;
            return _resultValue;
        }
    }
}
