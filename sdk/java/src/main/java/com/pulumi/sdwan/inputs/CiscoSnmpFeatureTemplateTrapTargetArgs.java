// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoSnmpFeatureTemplateTrapTargetArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoSnmpFeatureTemplateTrapTargetArgs Empty = new CiscoSnmpFeatureTemplateTrapTargetArgs();

    /**
     * Set name of the SNMP community
     * 
     */
    @Import(name="communityName")
    private @Nullable Output<String> communityName;

    /**
     * @return Set name of the SNMP community
     * 
     */
    public Optional<Output<String>> communityName() {
        return Optional.ofNullable(this.communityName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="communityNameVariable")
    private @Nullable Output<String> communityNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> communityNameVariable() {
        return Optional.ofNullable(this.communityNameVariable);
    }

    /**
     * Set IPv4/IPv6 address of SNMP server
     * 
     */
    @Import(name="ip")
    private @Nullable Output<String> ip;

    /**
     * @return Set IPv4/IPv6 address of SNMP server
     * 
     */
    public Optional<Output<String>> ip() {
        return Optional.ofNullable(this.ip);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipVariable")
    private @Nullable Output<String> ipVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipVariable() {
        return Optional.ofNullable(this.ipVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Source interface for outgoing SNMP traps
     * 
     */
    @Import(name="sourceInterface")
    private @Nullable Output<String> sourceInterface;

    /**
     * @return Source interface for outgoing SNMP traps
     * 
     */
    public Optional<Output<String>> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="sourceInterfaceVariable")
    private @Nullable Output<String> sourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }

    /**
     * Set UDP port number to connect to SNMP server
     *   - Range: `1`-`65535`
     * 
     */
    @Import(name="udpPort")
    private @Nullable Output<Integer> udpPort;

    /**
     * @return Set UDP port number to connect to SNMP server
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> udpPort() {
        return Optional.ofNullable(this.udpPort);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="udpPortVariable")
    private @Nullable Output<String> udpPortVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> udpPortVariable() {
        return Optional.ofNullable(this.udpPortVariable);
    }

    /**
     * Set name of the SNMP user
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return Set name of the SNMP user
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="userVariable")
    private @Nullable Output<String> userVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> userVariable() {
        return Optional.ofNullable(this.userVariable);
    }

    /**
     * Set VPN in which SNMP server is located
     *   - Range: `0`-`65530`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return Set VPN in which SNMP server is located
     *   - Range: `0`-`65530`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vpnIdVariable")
    private @Nullable Output<String> vpnIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    private CiscoSnmpFeatureTemplateTrapTargetArgs() {}

    private CiscoSnmpFeatureTemplateTrapTargetArgs(CiscoSnmpFeatureTemplateTrapTargetArgs $) {
        this.communityName = $.communityName;
        this.communityNameVariable = $.communityNameVariable;
        this.ip = $.ip;
        this.ipVariable = $.ipVariable;
        this.optional = $.optional;
        this.sourceInterface = $.sourceInterface;
        this.sourceInterfaceVariable = $.sourceInterfaceVariable;
        this.udpPort = $.udpPort;
        this.udpPortVariable = $.udpPortVariable;
        this.user = $.user;
        this.userVariable = $.userVariable;
        this.vpnId = $.vpnId;
        this.vpnIdVariable = $.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoSnmpFeatureTemplateTrapTargetArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoSnmpFeatureTemplateTrapTargetArgs $;

        public Builder() {
            $ = new CiscoSnmpFeatureTemplateTrapTargetArgs();
        }

        public Builder(CiscoSnmpFeatureTemplateTrapTargetArgs defaults) {
            $ = new CiscoSnmpFeatureTemplateTrapTargetArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param communityName Set name of the SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communityName(@Nullable Output<String> communityName) {
            $.communityName = communityName;
            return this;
        }

        /**
         * @param communityName Set name of the SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communityName(String communityName) {
            return communityName(Output.of(communityName));
        }

        /**
         * @param communityNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder communityNameVariable(@Nullable Output<String> communityNameVariable) {
            $.communityNameVariable = communityNameVariable;
            return this;
        }

        /**
         * @param communityNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder communityNameVariable(String communityNameVariable) {
            return communityNameVariable(Output.of(communityNameVariable));
        }

        /**
         * @param ip Set IPv4/IPv6 address of SNMP server
         * 
         * @return builder
         * 
         */
        public Builder ip(@Nullable Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip Set IPv4/IPv6 address of SNMP server
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param ipVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipVariable(@Nullable Output<String> ipVariable) {
            $.ipVariable = ipVariable;
            return this;
        }

        /**
         * @param ipVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipVariable(String ipVariable) {
            return ipVariable(Output.of(ipVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param sourceInterface Source interface for outgoing SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder sourceInterface(@Nullable Output<String> sourceInterface) {
            $.sourceInterface = sourceInterface;
            return this;
        }

        /**
         * @param sourceInterface Source interface for outgoing SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder sourceInterface(String sourceInterface) {
            return sourceInterface(Output.of(sourceInterface));
        }

        /**
         * @param sourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceVariable(@Nullable Output<String> sourceInterfaceVariable) {
            $.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }

        /**
         * @param sourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            return sourceInterfaceVariable(Output.of(sourceInterfaceVariable));
        }

        /**
         * @param udpPort Set UDP port number to connect to SNMP server
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder udpPort(@Nullable Output<Integer> udpPort) {
            $.udpPort = udpPort;
            return this;
        }

        /**
         * @param udpPort Set UDP port number to connect to SNMP server
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder udpPort(Integer udpPort) {
            return udpPort(Output.of(udpPort));
        }

        /**
         * @param udpPortVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder udpPortVariable(@Nullable Output<String> udpPortVariable) {
            $.udpPortVariable = udpPortVariable;
            return this;
        }

        /**
         * @param udpPortVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder udpPortVariable(String udpPortVariable) {
            return udpPortVariable(Output.of(udpPortVariable));
        }

        /**
         * @param user Set name of the SNMP user
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user Set name of the SNMP user
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param userVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder userVariable(@Nullable Output<String> userVariable) {
            $.userVariable = userVariable;
            return this;
        }

        /**
         * @param userVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder userVariable(String userVariable) {
            return userVariable(Output.of(userVariable));
        }

        /**
         * @param vpnId Set VPN in which SNMP server is located
         *   - Range: `0`-`65530`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId Set VPN in which SNMP server is located
         *   - Range: `0`-`65530`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(@Nullable Output<String> vpnIdVariable) {
            $.vpnIdVariable = vpnIdVariable;
            return this;
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(String vpnIdVariable) {
            return vpnIdVariable(Output.of(vpnIdVariable));
        }

        public CiscoSnmpFeatureTemplateTrapTargetArgs build() {
            return $;
        }
    }

}
