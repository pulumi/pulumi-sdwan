// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub {
    /**
     * @return List of IPv4 prefix list IDs
     * 
     */
    private List<String> ipv4PrefixListIds;
    /**
     * @return List of IPv6 prefix list IDs
     * 
     */
    private List<String> ipv6PrefixListIds;
    /**
     * @return Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `allHubsAreEqual` is &#39;false&#39;)
     * 
     */
    private String preference;
    /**
     * @return Site list ID
     * 
     */
    private String siteListId;
    /**
     * @return Site list version
     * 
     */
    private Integer siteListVersion;

    private GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub() {}
    /**
     * @return List of IPv4 prefix list IDs
     * 
     */
    public List<String> ipv4PrefixListIds() {
        return this.ipv4PrefixListIds;
    }
    /**
     * @return List of IPv6 prefix list IDs
     * 
     */
    public List<String> ipv6PrefixListIds() {
        return this.ipv6PrefixListIds;
    }
    /**
     * @return Preference, multiple of 10 (for example 70, 80, 90, 100). The higher the value the higher the priority of the associated hub (required when `allHubsAreEqual` is &#39;false&#39;)
     * 
     */
    public String preference() {
        return this.preference;
    }
    /**
     * @return Site list ID
     * 
     */
    public String siteListId() {
        return this.siteListId;
    }
    /**
     * @return Site list version
     * 
     */
    public Integer siteListVersion() {
        return this.siteListVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> ipv4PrefixListIds;
        private List<String> ipv6PrefixListIds;
        private String preference;
        private String siteListId;
        private Integer siteListVersion;
        public Builder() {}
        public Builder(GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipv4PrefixListIds = defaults.ipv4PrefixListIds;
    	      this.ipv6PrefixListIds = defaults.ipv6PrefixListIds;
    	      this.preference = defaults.preference;
    	      this.siteListId = defaults.siteListId;
    	      this.siteListVersion = defaults.siteListVersion;
        }

        @CustomType.Setter
        public Builder ipv4PrefixListIds(List<String> ipv4PrefixListIds) {
            if (ipv4PrefixListIds == null) {
              throw new MissingRequiredPropertyException("GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub", "ipv4PrefixListIds");
            }
            this.ipv4PrefixListIds = ipv4PrefixListIds;
            return this;
        }
        public Builder ipv4PrefixListIds(String... ipv4PrefixListIds) {
            return ipv4PrefixListIds(List.of(ipv4PrefixListIds));
        }
        @CustomType.Setter
        public Builder ipv6PrefixListIds(List<String> ipv6PrefixListIds) {
            if (ipv6PrefixListIds == null) {
              throw new MissingRequiredPropertyException("GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub", "ipv6PrefixListIds");
            }
            this.ipv6PrefixListIds = ipv6PrefixListIds;
            return this;
        }
        public Builder ipv6PrefixListIds(String... ipv6PrefixListIds) {
            return ipv6PrefixListIds(List.of(ipv6PrefixListIds));
        }
        @CustomType.Setter
        public Builder preference(String preference) {
            if (preference == null) {
              throw new MissingRequiredPropertyException("GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub", "preference");
            }
            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder siteListId(String siteListId) {
            if (siteListId == null) {
              throw new MissingRequiredPropertyException("GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub", "siteListId");
            }
            this.siteListId = siteListId;
            return this;
        }
        @CustomType.Setter
        public Builder siteListVersion(Integer siteListVersion) {
            if (siteListVersion == null) {
              throw new MissingRequiredPropertyException("GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub", "siteListVersion");
            }
            this.siteListVersion = siteListVersion;
            return this;
        }
        public GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub build() {
            final var _resultValue = new GetHubAndSpokeTopologyPolicyDefinitionTopologySpokeHub();
            _resultValue.ipv4PrefixListIds = ipv4PrefixListIds;
            _resultValue.ipv6PrefixListIds = ipv6PrefixListIds;
            _resultValue.preference = preference;
            _resultValue.siteListId = siteListId;
            _resultValue.siteListVersion = siteListVersion;
            return _resultValue;
        }
    }
}
