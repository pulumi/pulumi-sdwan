// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.ServiceLanVpnProfileParcelIpv4StaticRouteNextHopArgs;
import com.pulumi.sdwan.inputs.ServiceLanVpnProfileParcelIpv4StaticRouteNextHopWithTrackerArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceLanVpnProfileParcelIpv4StaticRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceLanVpnProfileParcelIpv4StaticRouteArgs Empty = new ServiceLanVpnProfileParcelIpv4StaticRouteArgs();

    /**
     * IPv4 Route Gateway DHCP
     * 
     */
    @Import(name="gatewayDhcp")
    private @Nullable Output<Boolean> gatewayDhcp;

    /**
     * @return IPv4 Route Gateway DHCP
     * 
     */
    public Optional<Output<Boolean>> gatewayDhcp() {
        return Optional.ofNullable(this.gatewayDhcp);
    }

    /**
     * IP Address
     * 
     */
    @Import(name="networkAddress")
    private @Nullable Output<String> networkAddress;

    /**
     * @return IP Address
     * 
     */
    public Optional<Output<String>> networkAddress() {
        return Optional.ofNullable(this.networkAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="networkAddressVariable")
    private @Nullable Output<String> networkAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> networkAddressVariable() {
        return Optional.ofNullable(this.networkAddressVariable);
    }

    /**
     * IPv4 Route Gateway Next Hop with Tracker
     * 
     */
    @Import(name="nextHopWithTrackers")
    private @Nullable Output<List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopWithTrackerArgs>> nextHopWithTrackers;

    /**
     * @return IPv4 Route Gateway Next Hop with Tracker
     * 
     */
    public Optional<Output<List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopWithTrackerArgs>>> nextHopWithTrackers() {
        return Optional.ofNullable(this.nextHopWithTrackers);
    }

    /**
     * IPv4 Route Gateway Next Hop
     * 
     */
    @Import(name="nextHops")
    private @Nullable Output<List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopArgs>> nextHops;

    /**
     * @return IPv4 Route Gateway Next Hop
     * 
     */
    public Optional<Output<List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopArgs>>> nextHops() {
        return Optional.ofNullable(this.nextHops);
    }

    /**
     * IPv4 Route Gateway Next Hop
     * 
     */
    @Import(name="null0")
    private @Nullable Output<Boolean> null0;

    /**
     * @return IPv4 Route Gateway Next Hop
     * 
     */
    public Optional<Output<Boolean>> null0() {
        return Optional.ofNullable(this.null0);
    }

    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="subnetMask")
    private @Nullable Output<String> subnetMask;

    /**
     * @return Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="subnetMaskVariable")
    private @Nullable Output<String> subnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> subnetMaskVariable() {
        return Optional.ofNullable(this.subnetMaskVariable);
    }

    /**
     * IPv4 Route Gateway VPN
     * 
     */
    @Import(name="vpn")
    private @Nullable Output<Boolean> vpn;

    /**
     * @return IPv4 Route Gateway VPN
     * 
     */
    public Optional<Output<Boolean>> vpn() {
        return Optional.ofNullable(this.vpn);
    }

    private ServiceLanVpnProfileParcelIpv4StaticRouteArgs() {}

    private ServiceLanVpnProfileParcelIpv4StaticRouteArgs(ServiceLanVpnProfileParcelIpv4StaticRouteArgs $) {
        this.gatewayDhcp = $.gatewayDhcp;
        this.networkAddress = $.networkAddress;
        this.networkAddressVariable = $.networkAddressVariable;
        this.nextHopWithTrackers = $.nextHopWithTrackers;
        this.nextHops = $.nextHops;
        this.null0 = $.null0;
        this.subnetMask = $.subnetMask;
        this.subnetMaskVariable = $.subnetMaskVariable;
        this.vpn = $.vpn;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceLanVpnProfileParcelIpv4StaticRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceLanVpnProfileParcelIpv4StaticRouteArgs $;

        public Builder() {
            $ = new ServiceLanVpnProfileParcelIpv4StaticRouteArgs();
        }

        public Builder(ServiceLanVpnProfileParcelIpv4StaticRouteArgs defaults) {
            $ = new ServiceLanVpnProfileParcelIpv4StaticRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param gatewayDhcp IPv4 Route Gateway DHCP
         * 
         * @return builder
         * 
         */
        public Builder gatewayDhcp(@Nullable Output<Boolean> gatewayDhcp) {
            $.gatewayDhcp = gatewayDhcp;
            return this;
        }

        /**
         * @param gatewayDhcp IPv4 Route Gateway DHCP
         * 
         * @return builder
         * 
         */
        public Builder gatewayDhcp(Boolean gatewayDhcp) {
            return gatewayDhcp(Output.of(gatewayDhcp));
        }

        /**
         * @param networkAddress IP Address
         * 
         * @return builder
         * 
         */
        public Builder networkAddress(@Nullable Output<String> networkAddress) {
            $.networkAddress = networkAddress;
            return this;
        }

        /**
         * @param networkAddress IP Address
         * 
         * @return builder
         * 
         */
        public Builder networkAddress(String networkAddress) {
            return networkAddress(Output.of(networkAddress));
        }

        /**
         * @param networkAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder networkAddressVariable(@Nullable Output<String> networkAddressVariable) {
            $.networkAddressVariable = networkAddressVariable;
            return this;
        }

        /**
         * @param networkAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder networkAddressVariable(String networkAddressVariable) {
            return networkAddressVariable(Output.of(networkAddressVariable));
        }

        /**
         * @param nextHopWithTrackers IPv4 Route Gateway Next Hop with Tracker
         * 
         * @return builder
         * 
         */
        public Builder nextHopWithTrackers(@Nullable Output<List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopWithTrackerArgs>> nextHopWithTrackers) {
            $.nextHopWithTrackers = nextHopWithTrackers;
            return this;
        }

        /**
         * @param nextHopWithTrackers IPv4 Route Gateway Next Hop with Tracker
         * 
         * @return builder
         * 
         */
        public Builder nextHopWithTrackers(List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopWithTrackerArgs> nextHopWithTrackers) {
            return nextHopWithTrackers(Output.of(nextHopWithTrackers));
        }

        /**
         * @param nextHopWithTrackers IPv4 Route Gateway Next Hop with Tracker
         * 
         * @return builder
         * 
         */
        public Builder nextHopWithTrackers(ServiceLanVpnProfileParcelIpv4StaticRouteNextHopWithTrackerArgs... nextHopWithTrackers) {
            return nextHopWithTrackers(List.of(nextHopWithTrackers));
        }

        /**
         * @param nextHops IPv4 Route Gateway Next Hop
         * 
         * @return builder
         * 
         */
        public Builder nextHops(@Nullable Output<List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopArgs>> nextHops) {
            $.nextHops = nextHops;
            return this;
        }

        /**
         * @param nextHops IPv4 Route Gateway Next Hop
         * 
         * @return builder
         * 
         */
        public Builder nextHops(List<ServiceLanVpnProfileParcelIpv4StaticRouteNextHopArgs> nextHops) {
            return nextHops(Output.of(nextHops));
        }

        /**
         * @param nextHops IPv4 Route Gateway Next Hop
         * 
         * @return builder
         * 
         */
        public Builder nextHops(ServiceLanVpnProfileParcelIpv4StaticRouteNextHopArgs... nextHops) {
            return nextHops(List.of(nextHops));
        }

        /**
         * @param null0 IPv4 Route Gateway Next Hop
         * 
         * @return builder
         * 
         */
        public Builder null0(@Nullable Output<Boolean> null0) {
            $.null0 = null0;
            return this;
        }

        /**
         * @param null0 IPv4 Route Gateway Next Hop
         * 
         * @return builder
         * 
         */
        public Builder null0(Boolean null0) {
            return null0(Output.of(null0));
        }

        /**
         * @param subnetMask Subnet Mask
         *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(@Nullable Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask Subnet Mask
         *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        /**
         * @param subnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder subnetMaskVariable(@Nullable Output<String> subnetMaskVariable) {
            $.subnetMaskVariable = subnetMaskVariable;
            return this;
        }

        /**
         * @param subnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder subnetMaskVariable(String subnetMaskVariable) {
            return subnetMaskVariable(Output.of(subnetMaskVariable));
        }

        /**
         * @param vpn IPv4 Route Gateway VPN
         * 
         * @return builder
         * 
         */
        public Builder vpn(@Nullable Output<Boolean> vpn) {
            $.vpn = vpn;
            return this;
        }

        /**
         * @param vpn IPv4 Route Gateway VPN
         * 
         * @return builder
         * 
         */
        public Builder vpn(Boolean vpn) {
            return vpn(Output.of(vpn));
        }

        public ServiceLanVpnProfileParcelIpv4StaticRouteArgs build() {
            return $;
        }
    }

}
