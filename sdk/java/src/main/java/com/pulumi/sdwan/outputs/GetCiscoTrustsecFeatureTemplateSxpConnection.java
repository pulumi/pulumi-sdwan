// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoTrustsecFeatureTemplateSxpConnection {
    /**
     * @return Configure Connection Maximum hold time \n\n
     * 
     */
    private Integer maximumHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String maximumHoldTimeVariable;
    /**
     * @return Configure Connection Minimum hold time \n\n
     * 
     */
    private Integer minimumHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String minimumHoldTimeVariable;
    /**
     * @return Define Mode of connection
     * 
     */
    private String mode;
    /**
     * @return Define Role of a device \n\n
     * 
     */
    private String modeType;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Configure SXP Peer IP address (IPv4)
     * 
     */
    private String peerIp;
    /**
     * @return Define Preshared Key type
     * 
     */
    private String presharedKey;
    /**
     * @return Configure SXP Source IP address (IPv4)
     * 
     */
    private String sourceIp;
    /**
     * @return Variable name
     * 
     */
    private String sourceIpVariable;
    /**
     * @return Configure Connection VPN (VRF) ID
     * 
     */
    private Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private String vpnIdVariable;

    private GetCiscoTrustsecFeatureTemplateSxpConnection() {}
    /**
     * @return Configure Connection Maximum hold time \n\n
     * 
     */
    public Integer maximumHoldTime() {
        return this.maximumHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String maximumHoldTimeVariable() {
        return this.maximumHoldTimeVariable;
    }
    /**
     * @return Configure Connection Minimum hold time \n\n
     * 
     */
    public Integer minimumHoldTime() {
        return this.minimumHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String minimumHoldTimeVariable() {
        return this.minimumHoldTimeVariable;
    }
    /**
     * @return Define Mode of connection
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return Define Role of a device \n\n
     * 
     */
    public String modeType() {
        return this.modeType;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Configure SXP Peer IP address (IPv4)
     * 
     */
    public String peerIp() {
        return this.peerIp;
    }
    /**
     * @return Define Preshared Key type
     * 
     */
    public String presharedKey() {
        return this.presharedKey;
    }
    /**
     * @return Configure SXP Source IP address (IPv4)
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceIpVariable() {
        return this.sourceIpVariable;
    }
    /**
     * @return Configure Connection VPN (VRF) ID
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnIdVariable() {
        return this.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoTrustsecFeatureTemplateSxpConnection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer maximumHoldTime;
        private String maximumHoldTimeVariable;
        private Integer minimumHoldTime;
        private String minimumHoldTimeVariable;
        private String mode;
        private String modeType;
        private Boolean optional;
        private String peerIp;
        private String presharedKey;
        private String sourceIp;
        private String sourceIpVariable;
        private Integer vpnId;
        private String vpnIdVariable;
        public Builder() {}
        public Builder(GetCiscoTrustsecFeatureTemplateSxpConnection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.maximumHoldTime = defaults.maximumHoldTime;
    	      this.maximumHoldTimeVariable = defaults.maximumHoldTimeVariable;
    	      this.minimumHoldTime = defaults.minimumHoldTime;
    	      this.minimumHoldTimeVariable = defaults.minimumHoldTimeVariable;
    	      this.mode = defaults.mode;
    	      this.modeType = defaults.modeType;
    	      this.optional = defaults.optional;
    	      this.peerIp = defaults.peerIp;
    	      this.presharedKey = defaults.presharedKey;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceIpVariable = defaults.sourceIpVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder maximumHoldTime(Integer maximumHoldTime) {
            if (maximumHoldTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "maximumHoldTime");
            }
            this.maximumHoldTime = maximumHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder maximumHoldTimeVariable(String maximumHoldTimeVariable) {
            if (maximumHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "maximumHoldTimeVariable");
            }
            this.maximumHoldTimeVariable = maximumHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder minimumHoldTime(Integer minimumHoldTime) {
            if (minimumHoldTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "minimumHoldTime");
            }
            this.minimumHoldTime = minimumHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder minimumHoldTimeVariable(String minimumHoldTimeVariable) {
            if (minimumHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "minimumHoldTimeVariable");
            }
            this.minimumHoldTimeVariable = minimumHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder modeType(String modeType) {
            if (modeType == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "modeType");
            }
            this.modeType = modeType;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder peerIp(String peerIp) {
            if (peerIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "peerIp");
            }
            this.peerIp = peerIp;
            return this;
        }
        @CustomType.Setter
        public Builder presharedKey(String presharedKey) {
            if (presharedKey == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "presharedKey");
            }
            this.presharedKey = presharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(String sourceIp) {
            if (sourceIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "sourceIp");
            }
            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpVariable(String sourceIpVariable) {
            if (sourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "sourceIpVariable");
            }
            this.sourceIpVariable = sourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(String vpnIdVariable) {
            if (vpnIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoTrustsecFeatureTemplateSxpConnection", "vpnIdVariable");
            }
            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public GetCiscoTrustsecFeatureTemplateSxpConnection build() {
            final var _resultValue = new GetCiscoTrustsecFeatureTemplateSxpConnection();
            _resultValue.maximumHoldTime = maximumHoldTime;
            _resultValue.maximumHoldTimeVariable = maximumHoldTimeVariable;
            _resultValue.minimumHoldTime = minimumHoldTime;
            _resultValue.minimumHoldTimeVariable = minimumHoldTimeVariable;
            _resultValue.mode = mode;
            _resultValue.modeType = modeType;
            _resultValue.optional = optional;
            _resultValue.peerIp = peerIp;
            _resultValue.presharedKey = presharedKey;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourceIpVariable = sourceIpVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
