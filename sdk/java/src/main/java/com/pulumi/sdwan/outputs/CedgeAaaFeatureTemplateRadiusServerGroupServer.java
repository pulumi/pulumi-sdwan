// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CedgeAaaFeatureTemplateRadiusServerGroupServer {
    /**
     * @return Set Accounting port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1813`
     * 
     */
    private @Nullable Integer accountingPort;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String accountingPortVariable;
    /**
     * @return Set IP address of Radius server
     * 
     */
    private @Nullable String address;
    /**
     * @return Set Authentication port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1812`
     * 
     */
    private @Nullable Integer authenticationPort;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String authenticationPortVariable;
    /**
     * @return Type of encyption. To be used for type 6
     *   - Choices: `6`, `7`
     * 
     */
    private @Nullable String encryptionType;
    /**
     * @return Set the Radius server shared key
     * 
     */
    private @Nullable String key;
    /**
     * @return key type
     *   - Choices: `key`, `pac`
     *   - Default value: `key`
     * 
     */
    private @Nullable String keyType;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String keyTypeVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Configure how many times to contact this Radius server
     *   - Range: `1`-`100`
     *   - Default value: `3`
     * 
     */
    private @Nullable Integer retransmit;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String retransmitVariable;
    /**
     * @return Set the Radius server shared type 7 encrypted key
     * 
     */
    private @Nullable String secretKey;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String secretKeyVariable;
    /**
     * @return Configure how long to wait for replies from the Radius server
     *   - Range: `1`-`1000`
     *   - Default value: `5`
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String timeoutVariable;

    private CedgeAaaFeatureTemplateRadiusServerGroupServer() {}
    /**
     * @return Set Accounting port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1813`
     * 
     */
    public Optional<Integer> accountingPort() {
        return Optional.ofNullable(this.accountingPort);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> accountingPortVariable() {
        return Optional.ofNullable(this.accountingPortVariable);
    }
    /**
     * @return Set IP address of Radius server
     * 
     */
    public Optional<String> address() {
        return Optional.ofNullable(this.address);
    }
    /**
     * @return Set Authentication port to use to connect to Radius server
     *   - Range: `1`-`65534`
     *   - Default value: `1812`
     * 
     */
    public Optional<Integer> authenticationPort() {
        return Optional.ofNullable(this.authenticationPort);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> authenticationPortVariable() {
        return Optional.ofNullable(this.authenticationPortVariable);
    }
    /**
     * @return Type of encyption. To be used for type 6
     *   - Choices: `6`, `7`
     * 
     */
    public Optional<String> encryptionType() {
        return Optional.ofNullable(this.encryptionType);
    }
    /**
     * @return Set the Radius server shared key
     * 
     */
    public Optional<String> key() {
        return Optional.ofNullable(this.key);
    }
    /**
     * @return key type
     *   - Choices: `key`, `pac`
     *   - Default value: `key`
     * 
     */
    public Optional<String> keyType() {
        return Optional.ofNullable(this.keyType);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> keyTypeVariable() {
        return Optional.ofNullable(this.keyTypeVariable);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Configure how many times to contact this Radius server
     *   - Range: `1`-`100`
     *   - Default value: `3`
     * 
     */
    public Optional<Integer> retransmit() {
        return Optional.ofNullable(this.retransmit);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> retransmitVariable() {
        return Optional.ofNullable(this.retransmitVariable);
    }
    /**
     * @return Set the Radius server shared type 7 encrypted key
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> secretKeyVariable() {
        return Optional.ofNullable(this.secretKeyVariable);
    }
    /**
     * @return Configure how long to wait for replies from the Radius server
     *   - Range: `1`-`1000`
     *   - Default value: `5`
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> timeoutVariable() {
        return Optional.ofNullable(this.timeoutVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CedgeAaaFeatureTemplateRadiusServerGroupServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer accountingPort;
        private @Nullable String accountingPortVariable;
        private @Nullable String address;
        private @Nullable Integer authenticationPort;
        private @Nullable String authenticationPortVariable;
        private @Nullable String encryptionType;
        private @Nullable String key;
        private @Nullable String keyType;
        private @Nullable String keyTypeVariable;
        private @Nullable Boolean optional;
        private @Nullable Integer retransmit;
        private @Nullable String retransmitVariable;
        private @Nullable String secretKey;
        private @Nullable String secretKeyVariable;
        private @Nullable Integer timeout;
        private @Nullable String timeoutVariable;
        public Builder() {}
        public Builder(CedgeAaaFeatureTemplateRadiusServerGroupServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountingPort = defaults.accountingPort;
    	      this.accountingPortVariable = defaults.accountingPortVariable;
    	      this.address = defaults.address;
    	      this.authenticationPort = defaults.authenticationPort;
    	      this.authenticationPortVariable = defaults.authenticationPortVariable;
    	      this.encryptionType = defaults.encryptionType;
    	      this.key = defaults.key;
    	      this.keyType = defaults.keyType;
    	      this.keyTypeVariable = defaults.keyTypeVariable;
    	      this.optional = defaults.optional;
    	      this.retransmit = defaults.retransmit;
    	      this.retransmitVariable = defaults.retransmitVariable;
    	      this.secretKey = defaults.secretKey;
    	      this.secretKeyVariable = defaults.secretKeyVariable;
    	      this.timeout = defaults.timeout;
    	      this.timeoutVariable = defaults.timeoutVariable;
        }

        @CustomType.Setter
        public Builder accountingPort(@Nullable Integer accountingPort) {

            this.accountingPort = accountingPort;
            return this;
        }
        @CustomType.Setter
        public Builder accountingPortVariable(@Nullable String accountingPortVariable) {

            this.accountingPortVariable = accountingPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder address(@Nullable String address) {

            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationPort(@Nullable Integer authenticationPort) {

            this.authenticationPort = authenticationPort;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationPortVariable(@Nullable String authenticationPortVariable) {

            this.authenticationPortVariable = authenticationPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionType(@Nullable String encryptionType) {

            this.encryptionType = encryptionType;
            return this;
        }
        @CustomType.Setter
        public Builder key(@Nullable String key) {

            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(@Nullable String keyType) {

            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder keyTypeVariable(@Nullable String keyTypeVariable) {

            this.keyTypeVariable = keyTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder retransmit(@Nullable Integer retransmit) {

            this.retransmit = retransmit;
            return this;
        }
        @CustomType.Setter
        public Builder retransmitVariable(@Nullable String retransmitVariable) {

            this.retransmitVariable = retransmitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {

            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder secretKeyVariable(@Nullable String secretKeyVariable) {

            this.secretKeyVariable = secretKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutVariable(@Nullable String timeoutVariable) {

            this.timeoutVariable = timeoutVariable;
            return this;
        }
        public CedgeAaaFeatureTemplateRadiusServerGroupServer build() {
            final var _resultValue = new CedgeAaaFeatureTemplateRadiusServerGroupServer();
            _resultValue.accountingPort = accountingPort;
            _resultValue.accountingPortVariable = accountingPortVariable;
            _resultValue.address = address;
            _resultValue.authenticationPort = authenticationPort;
            _resultValue.authenticationPortVariable = authenticationPortVariable;
            _resultValue.encryptionType = encryptionType;
            _resultValue.key = key;
            _resultValue.keyType = keyType;
            _resultValue.keyTypeVariable = keyTypeVariable;
            _resultValue.optional = optional;
            _resultValue.retransmit = retransmit;
            _resultValue.retransmitVariable = retransmitVariable;
            _resultValue.secretKey = secretKey;
            _resultValue.secretKeyVariable = secretKeyVariable;
            _resultValue.timeout = timeout;
            _resultValue.timeoutVariable = timeoutVariable;
            return _resultValue;
        }
    }
}
