// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoLoggingFeatureTemplateIpv6Server {
    /**
     * @return Define custom profile
     * 
     */
    private Boolean customProfile;
    /**
     * @return Variable name
     * 
     */
    private String customProfileVariable;
    /**
     * @return Enable TLS
     * 
     */
    private Boolean enableTls;
    /**
     * @return Variable name
     * 
     */
    private String enableTlsVariable;
    /**
     * @return Set IPv6 hostname or IPv6 address of server
     * 
     */
    private String hostnameIp;
    /**
     * @return Variable name
     * 
     */
    private String hostnameIpVariable;
    /**
     * @return Set logging level for messages logged to server
     * 
     */
    private String loggingLevel;
    /**
     * @return Variable name
     * 
     */
    private String loggingLevelVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Configure a TLS profile
     * 
     */
    private String profile;
    /**
     * @return Variable name
     * 
     */
    private String profileVariable;
    /**
     * @return Set interface to use to reach syslog server
     * 
     */
    private String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String sourceInterfaceVariable;
    /**
     * @return Set VPN in which syslog server is located
     * 
     */
    private Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private String vpnIdVariable;

    private GetCiscoLoggingFeatureTemplateIpv6Server() {}
    /**
     * @return Define custom profile
     * 
     */
    public Boolean customProfile() {
        return this.customProfile;
    }
    /**
     * @return Variable name
     * 
     */
    public String customProfileVariable() {
        return this.customProfileVariable;
    }
    /**
     * @return Enable TLS
     * 
     */
    public Boolean enableTls() {
        return this.enableTls;
    }
    /**
     * @return Variable name
     * 
     */
    public String enableTlsVariable() {
        return this.enableTlsVariable;
    }
    /**
     * @return Set IPv6 hostname or IPv6 address of server
     * 
     */
    public String hostnameIp() {
        return this.hostnameIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String hostnameIpVariable() {
        return this.hostnameIpVariable;
    }
    /**
     * @return Set logging level for messages logged to server
     * 
     */
    public String loggingLevel() {
        return this.loggingLevel;
    }
    /**
     * @return Variable name
     * 
     */
    public String loggingLevelVariable() {
        return this.loggingLevelVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Configure a TLS profile
     * 
     */
    public String profile() {
        return this.profile;
    }
    /**
     * @return Variable name
     * 
     */
    public String profileVariable() {
        return this.profileVariable;
    }
    /**
     * @return Set interface to use to reach syslog server
     * 
     */
    public String sourceInterface() {
        return this.sourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceInterfaceVariable() {
        return this.sourceInterfaceVariable;
    }
    /**
     * @return Set VPN in which syslog server is located
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnIdVariable() {
        return this.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoLoggingFeatureTemplateIpv6Server defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean customProfile;
        private String customProfileVariable;
        private Boolean enableTls;
        private String enableTlsVariable;
        private String hostnameIp;
        private String hostnameIpVariable;
        private String loggingLevel;
        private String loggingLevelVariable;
        private Boolean optional;
        private String profile;
        private String profileVariable;
        private String sourceInterface;
        private String sourceInterfaceVariable;
        private Integer vpnId;
        private String vpnIdVariable;
        public Builder() {}
        public Builder(GetCiscoLoggingFeatureTemplateIpv6Server defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customProfile = defaults.customProfile;
    	      this.customProfileVariable = defaults.customProfileVariable;
    	      this.enableTls = defaults.enableTls;
    	      this.enableTlsVariable = defaults.enableTlsVariable;
    	      this.hostnameIp = defaults.hostnameIp;
    	      this.hostnameIpVariable = defaults.hostnameIpVariable;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.loggingLevelVariable = defaults.loggingLevelVariable;
    	      this.optional = defaults.optional;
    	      this.profile = defaults.profile;
    	      this.profileVariable = defaults.profileVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder customProfile(Boolean customProfile) {
            if (customProfile == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "customProfile");
            }
            this.customProfile = customProfile;
            return this;
        }
        @CustomType.Setter
        public Builder customProfileVariable(String customProfileVariable) {
            if (customProfileVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "customProfileVariable");
            }
            this.customProfileVariable = customProfileVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableTls(Boolean enableTls) {
            if (enableTls == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "enableTls");
            }
            this.enableTls = enableTls;
            return this;
        }
        @CustomType.Setter
        public Builder enableTlsVariable(String enableTlsVariable) {
            if (enableTlsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "enableTlsVariable");
            }
            this.enableTlsVariable = enableTlsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIp(String hostnameIp) {
            if (hostnameIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "hostnameIp");
            }
            this.hostnameIp = hostnameIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpVariable(String hostnameIpVariable) {
            if (hostnameIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "hostnameIpVariable");
            }
            this.hostnameIpVariable = hostnameIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder loggingLevel(String loggingLevel) {
            if (loggingLevel == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "loggingLevel");
            }
            this.loggingLevel = loggingLevel;
            return this;
        }
        @CustomType.Setter
        public Builder loggingLevelVariable(String loggingLevelVariable) {
            if (loggingLevelVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "loggingLevelVariable");
            }
            this.loggingLevelVariable = loggingLevelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder profile(String profile) {
            if (profile == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "profile");
            }
            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder profileVariable(String profileVariable) {
            if (profileVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "profileVariable");
            }
            this.profileVariable = profileVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(String sourceInterface) {
            if (sourceInterface == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "sourceInterface");
            }
            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            if (sourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "sourceInterfaceVariable");
            }
            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(String vpnIdVariable) {
            if (vpnIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoLoggingFeatureTemplateIpv6Server", "vpnIdVariable");
            }
            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public GetCiscoLoggingFeatureTemplateIpv6Server build() {
            final var _resultValue = new GetCiscoLoggingFeatureTemplateIpv6Server();
            _resultValue.customProfile = customProfile;
            _resultValue.customProfileVariable = customProfileVariable;
            _resultValue.enableTls = enableTls;
            _resultValue.enableTlsVariable = enableTlsVariable;
            _resultValue.hostnameIp = hostnameIp;
            _resultValue.hostnameIpVariable = hostnameIpVariable;
            _resultValue.loggingLevel = loggingLevel;
            _resultValue.loggingLevelVariable = loggingLevelVariable;
            _resultValue.optional = optional;
            _resultValue.profile = profile;
            _resultValue.profileVariable = profileVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
