// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAdvancedMalwareProtectionPolicyDefinitionResult {
    /**
     * @return File reputation alerts Log level
     * 
     */
    private String alertLogLevel;
    /**
     * @return AMP Cloud Region
     * 
     */
    private String ampCloudRegion;
    /**
     * @return AMP Cloud Region
     * 
     */
    private String ampCloudRegionEstServer;
    /**
     * @return The description of the policy definition
     * 
     */
    private String description;
    /**
     * @return Should file analysis be enabled
     * 
     */
    private Boolean fileAnalysis;
    /**
     * @return File analysis alerts Log level
     * 
     */
    private String fileAnalysisAlertLogLevel;
    /**
     * @return TG Cloud Region
     * 
     */
    private String fileAnalysisCloudRegion;
    /**
     * @return List of file type
     * 
     */
    private List<String> fileAnalysisFileTypes;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Should match all VPNs
     * 
     */
    private Boolean matchAllVpn;
    /**
     * @return The policy mode
     * 
     */
    private String mode;
    /**
     * @return The name of the policy definition
     * 
     */
    private String name;
    /**
     * @return List of VPN IDs
     * 
     */
    private List<String> targetVpns;
    /**
     * @return The version of the object
     * 
     */
    private Integer version;

    private GetAdvancedMalwareProtectionPolicyDefinitionResult() {}
    /**
     * @return File reputation alerts Log level
     * 
     */
    public String alertLogLevel() {
        return this.alertLogLevel;
    }
    /**
     * @return AMP Cloud Region
     * 
     */
    public String ampCloudRegion() {
        return this.ampCloudRegion;
    }
    /**
     * @return AMP Cloud Region
     * 
     */
    public String ampCloudRegionEstServer() {
        return this.ampCloudRegionEstServer;
    }
    /**
     * @return The description of the policy definition
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Should file analysis be enabled
     * 
     */
    public Boolean fileAnalysis() {
        return this.fileAnalysis;
    }
    /**
     * @return File analysis alerts Log level
     * 
     */
    public String fileAnalysisAlertLogLevel() {
        return this.fileAnalysisAlertLogLevel;
    }
    /**
     * @return TG Cloud Region
     * 
     */
    public String fileAnalysisCloudRegion() {
        return this.fileAnalysisCloudRegion;
    }
    /**
     * @return List of file type
     * 
     */
    public List<String> fileAnalysisFileTypes() {
        return this.fileAnalysisFileTypes;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Should match all VPNs
     * 
     */
    public Boolean matchAllVpn() {
        return this.matchAllVpn;
    }
    /**
     * @return The policy mode
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The name of the policy definition
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of VPN IDs
     * 
     */
    public List<String> targetVpns() {
        return this.targetVpns;
    }
    /**
     * @return The version of the object
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAdvancedMalwareProtectionPolicyDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String alertLogLevel;
        private String ampCloudRegion;
        private String ampCloudRegionEstServer;
        private String description;
        private Boolean fileAnalysis;
        private String fileAnalysisAlertLogLevel;
        private String fileAnalysisCloudRegion;
        private List<String> fileAnalysisFileTypes;
        private String id;
        private Boolean matchAllVpn;
        private String mode;
        private String name;
        private List<String> targetVpns;
        private Integer version;
        public Builder() {}
        public Builder(GetAdvancedMalwareProtectionPolicyDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alertLogLevel = defaults.alertLogLevel;
    	      this.ampCloudRegion = defaults.ampCloudRegion;
    	      this.ampCloudRegionEstServer = defaults.ampCloudRegionEstServer;
    	      this.description = defaults.description;
    	      this.fileAnalysis = defaults.fileAnalysis;
    	      this.fileAnalysisAlertLogLevel = defaults.fileAnalysisAlertLogLevel;
    	      this.fileAnalysisCloudRegion = defaults.fileAnalysisCloudRegion;
    	      this.fileAnalysisFileTypes = defaults.fileAnalysisFileTypes;
    	      this.id = defaults.id;
    	      this.matchAllVpn = defaults.matchAllVpn;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.targetVpns = defaults.targetVpns;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder alertLogLevel(String alertLogLevel) {
            if (alertLogLevel == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "alertLogLevel");
            }
            this.alertLogLevel = alertLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder ampCloudRegion(String ampCloudRegion) {
            if (ampCloudRegion == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "ampCloudRegion");
            }
            this.ampCloudRegion = ampCloudRegion;
            return this;
        }
        @CustomType.Setter
        public Builder ampCloudRegionEstServer(String ampCloudRegionEstServer) {
            if (ampCloudRegionEstServer == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "ampCloudRegionEstServer");
            }
            this.ampCloudRegionEstServer = ampCloudRegionEstServer;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fileAnalysis(Boolean fileAnalysis) {
            if (fileAnalysis == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "fileAnalysis");
            }
            this.fileAnalysis = fileAnalysis;
            return this;
        }
        @CustomType.Setter
        public Builder fileAnalysisAlertLogLevel(String fileAnalysisAlertLogLevel) {
            if (fileAnalysisAlertLogLevel == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "fileAnalysisAlertLogLevel");
            }
            this.fileAnalysisAlertLogLevel = fileAnalysisAlertLogLevel;
            return this;
        }
        @CustomType.Setter
        public Builder fileAnalysisCloudRegion(String fileAnalysisCloudRegion) {
            if (fileAnalysisCloudRegion == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "fileAnalysisCloudRegion");
            }
            this.fileAnalysisCloudRegion = fileAnalysisCloudRegion;
            return this;
        }
        @CustomType.Setter
        public Builder fileAnalysisFileTypes(List<String> fileAnalysisFileTypes) {
            if (fileAnalysisFileTypes == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "fileAnalysisFileTypes");
            }
            this.fileAnalysisFileTypes = fileAnalysisFileTypes;
            return this;
        }
        public Builder fileAnalysisFileTypes(String... fileAnalysisFileTypes) {
            return fileAnalysisFileTypes(List.of(fileAnalysisFileTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder matchAllVpn(Boolean matchAllVpn) {
            if (matchAllVpn == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "matchAllVpn");
            }
            this.matchAllVpn = matchAllVpn;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder targetVpns(List<String> targetVpns) {
            if (targetVpns == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "targetVpns");
            }
            this.targetVpns = targetVpns;
            return this;
        }
        public Builder targetVpns(String... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetAdvancedMalwareProtectionPolicyDefinitionResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetAdvancedMalwareProtectionPolicyDefinitionResult build() {
            final var _resultValue = new GetAdvancedMalwareProtectionPolicyDefinitionResult();
            _resultValue.alertLogLevel = alertLogLevel;
            _resultValue.ampCloudRegion = ampCloudRegion;
            _resultValue.ampCloudRegionEstServer = ampCloudRegionEstServer;
            _resultValue.description = description;
            _resultValue.fileAnalysis = fileAnalysis;
            _resultValue.fileAnalysisAlertLogLevel = fileAnalysisAlertLogLevel;
            _resultValue.fileAnalysisCloudRegion = fileAnalysisCloudRegion;
            _resultValue.fileAnalysisFileTypes = fileAnalysisFileTypes;
            _resultValue.id = id;
            _resultValue.matchAllVpn = matchAllVpn;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.targetVpns = targetVpns;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
