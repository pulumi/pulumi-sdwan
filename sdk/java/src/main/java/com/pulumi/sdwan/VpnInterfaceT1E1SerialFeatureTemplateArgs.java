// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs;
import com.pulumi.sdwan.inputs.VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs;
import com.pulumi.sdwan.inputs.VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnInterfaceT1E1SerialFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnInterfaceT1E1SerialFeatureTemplateArgs Empty = new VpnInterfaceT1E1SerialFeatureTemplateArgs();

    /**
     * Link autonegotiation - Default value: `true`
     * 
     */
    @Import(name="autonegotiate")
    private @Nullable Output<Boolean> autonegotiate;

    /**
     * @return Link autonegotiation - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> autonegotiate() {
        return Optional.ofNullable(this.autonegotiate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="autonegotiateVariable")
    private @Nullable Output<String> autonegotiateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> autonegotiateVariable() {
        return Optional.ofNullable(this.autonegotiateVariable);
    }

    /**
     * Clear don&#39;t fragment bit - Default value: `false`
     * 
     */
    @Import(name="clearDontFragmentBit")
    private @Nullable Output<Boolean> clearDontFragmentBit;

    /**
     * @return Clear don&#39;t fragment bit - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> clearDontFragmentBit() {
        return Optional.ofNullable(this.clearDontFragmentBit);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clearDontFragmentBitVariable")
    private @Nullable Output<String> clearDontFragmentBitVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clearDontFragmentBitVariable() {
        return Optional.ofNullable(this.clearDontFragmentBitVariable);
    }

    /**
     * Set preference for interface Clock speed - Choices: `1200`, `2400`, `3600`, `4800`, `9600`, `14400`, `19200`, `28800`,
     * `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`,
     * `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     * 
     */
    @Import(name="clockRate")
    private @Nullable Output<String> clockRate;

    /**
     * @return Set preference for interface Clock speed - Choices: `1200`, `2400`, `3600`, `4800`, `9600`, `14400`, `19200`, `28800`,
     * `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`,
     * `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     * 
     */
    public Optional<Output<String>> clockRate() {
        return Optional.ofNullable(this.clockRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clockRateVariable")
    private @Nullable Output<String> clockRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clockRateVariable() {
        return Optional.ofNullable(this.clockRateVariable);
    }

    /**
     * Enable core region - Choices: `core`, `core-shared` - Default value: `core`
     * 
     */
    @Import(name="coreRegion")
    private @Nullable Output<String> coreRegion;

    /**
     * @return Enable core region - Choices: `core`, `core-shared` - Default value: `core`
     * 
     */
    public Optional<Output<String>> coreRegion() {
        return Optional.ofNullable(this.coreRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="coreRegionVariable")
    private @Nullable Output<String> coreRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> coreRegionVariable() {
        return Optional.ofNullable(this.coreRegionVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Enable core region - Default value: `false`
     * 
     */
    @Import(name="enableCoreRegion")
    private @Nullable Output<Boolean> enableCoreRegion;

    /**
     * @return Enable core region - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableCoreRegion() {
        return Optional.ofNullable(this.enableCoreRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="enableCoreRegionVariable")
    private @Nullable Output<String> enableCoreRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> enableCoreRegionVariable() {
        return Optional.ofNullable(this.enableCoreRegionVariable);
    }

    /**
     * Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     * 
     */
    @Import(name="encapsulation")
    private @Nullable Output<String> encapsulation;

    /**
     * @return Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     * 
     */
    public Optional<Output<String>> encapsulation() {
        return Optional.ofNullable(this.encapsulation);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="encapsulationVariable")
    private @Nullable Output<String> encapsulationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> encapsulationVariable() {
        return Optional.ofNullable(this.encapsulationVariable);
    }

    /**
     * Interface bandwidth capacity, in kbps - Range: `1`-`128`
     * 
     */
    @Import(name="interfaceBandwidthCapacity")
    private @Nullable Output<Integer> interfaceBandwidthCapacity;

    /**
     * @return Interface bandwidth capacity, in kbps - Range: `1`-`128`
     * 
     */
    public Optional<Output<Integer>> interfaceBandwidthCapacity() {
        return Optional.ofNullable(this.interfaceBandwidthCapacity);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceBandwidthCapacityVariable")
    private @Nullable Output<String> interfaceBandwidthCapacityVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceBandwidthCapacityVariable() {
        return Optional.ofNullable(this.interfaceBandwidthCapacityVariable);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    @Import(name="interfaceDownstreamBandwidthCapacity")
    private @Nullable Output<Integer> interfaceDownstreamBandwidthCapacity;

    /**
     * @return Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> interfaceDownstreamBandwidthCapacity() {
        return Optional.ofNullable(this.interfaceDownstreamBandwidthCapacity);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDownstreamBandwidthCapacityVariable")
    private @Nullable Output<String> interfaceDownstreamBandwidthCapacityVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDownstreamBandwidthCapacityVariable() {
        return Optional.ofNullable(this.interfaceDownstreamBandwidthCapacityVariable);
    }

    /**
     * Interface MTU &lt;68...2000&gt;, in bytes - Range: `68`-`2000` - Default value: `1500`
     * 
     */
    @Import(name="ipMtu")
    private @Nullable Output<Integer> ipMtu;

    /**
     * @return Interface MTU &lt;68...2000&gt;, in bytes - Range: `68`-`2000` - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> ipMtu() {
        return Optional.ofNullable(this.ipMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipMtuVariable")
    private @Nullable Output<String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipMtuVariable() {
        return Optional.ofNullable(this.ipMtuVariable);
    }

    /**
     * Apply ACL
     * 
     */
    @Import(name="ipv4AccessLists")
    private @Nullable Output<List<VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs>> ipv4AccessLists;

    /**
     * @return Apply ACL
     * 
     */
    public Optional<Output<List<VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs>>> ipv4AccessLists() {
        return Optional.ofNullable(this.ipv4AccessLists);
    }

    /**
     * Assign IPv4 address
     * 
     */
    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    /**
     * @return Assign IPv4 address
     * 
     */
    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4AddressVariable")
    private @Nullable Output<String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4AddressVariable() {
        return Optional.ofNullable(this.ipv4AddressVariable);
    }

    /**
     * Apply IPv6 access list
     * 
     */
    @Import(name="ipv6AccessLists")
    private @Nullable Output<List<VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs>> ipv6AccessLists;

    /**
     * @return Apply IPv6 access list
     * 
     */
    public Optional<Output<List<VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs>>> ipv6AccessLists() {
        return Optional.ofNullable(this.ipv6AccessLists);
    }

    /**
     * Assign IPv6 address
     * 
     */
    @Import(name="ipv6Address")
    private @Nullable Output<String> ipv6Address;

    /**
     * @return Assign IPv6 address
     * 
     */
    public Optional<Output<String>> ipv6Address() {
        return Optional.ofNullable(this.ipv6Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv6AddressVariable")
    private @Nullable Output<String> ipv6AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv6AddressVariable() {
        return Optional.ofNullable(this.ipv6AddressVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Per-tunnel Qos - Default value: `false`
     * 
     */
    @Import(name="perTunnelQos")
    private @Nullable Output<Boolean> perTunnelQos;

    /**
     * @return Per-tunnel Qos - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> perTunnelQos() {
        return Optional.ofNullable(this.perTunnelQos);
    }

    /**
     * Per-tunnel QoS Aggregator - Default value: `false`
     * 
     */
    @Import(name="perTunnelQosAggregator")
    private @Nullable Output<Boolean> perTunnelQosAggregator;

    /**
     * @return Per-tunnel QoS Aggregator - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> perTunnelQosAggregator() {
        return Optional.ofNullable(this.perTunnelQosAggregator);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perTunnelQosAggregatorVariable")
    private @Nullable Output<String> perTunnelQosAggregatorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perTunnelQosAggregatorVariable() {
        return Optional.ofNullable(this.perTunnelQosAggregatorVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="perTunnelQosVariable")
    private @Nullable Output<String> perTunnelQosVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> perTunnelQosVariable() {
        return Optional.ofNullable(this.perTunnelQosVariable);
    }

    /**
     * Path MTU Discovery - Default value: `false`
     * 
     */
    @Import(name="pmtuDiscovery")
    private @Nullable Output<Boolean> pmtuDiscovery;

    /**
     * @return Path MTU Discovery - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> pmtuDiscovery() {
        return Optional.ofNullable(this.pmtuDiscovery);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="pmtuDiscoveryVariable")
    private @Nullable Output<String> pmtuDiscoveryVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> pmtuDiscoveryVariable() {
        return Optional.ofNullable(this.pmtuDiscoveryVariable);
    }

    /**
     * Name of QoS map
     * 
     */
    @Import(name="qosMap")
    private @Nullable Output<String> qosMap;

    /**
     * @return Name of QoS map
     * 
     */
    public Optional<Output<String>> qosMap() {
        return Optional.ofNullable(this.qosMap);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosMapVariable")
    private @Nullable Output<String> qosMapVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosMapVariable() {
        return Optional.ofNullable(this.qosMapVariable);
    }

    /**
     * Name of VPN QoS map
     * 
     */
    @Import(name="qosMapVpn")
    private @Nullable Output<String> qosMapVpn;

    /**
     * @return Name of VPN QoS map
     * 
     */
    public Optional<Output<String>> qosMapVpn() {
        return Optional.ofNullable(this.qosMapVpn);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosMapVpnVariable")
    private @Nullable Output<String> qosMapVpnVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosMapVpnVariable() {
        return Optional.ofNullable(this.qosMapVpnVariable);
    }

    /**
     * Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
     * 
     */
    @Import(name="secondaryRegion")
    private @Nullable Output<String> secondaryRegion;

    /**
     * @return Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
     * 
     */
    public Optional<Output<String>> secondaryRegion() {
        return Optional.ofNullable(this.secondaryRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="secondaryRegionVariable")
    private @Nullable Output<String> secondaryRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> secondaryRegionVariable() {
        return Optional.ofNullable(this.secondaryRegionVariable);
    }

    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    @Import(name="serialInterfaceName")
    private @Nullable Output<String> serialInterfaceName;

    /**
     * @return Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    public Optional<Output<String>> serialInterfaceName() {
        return Optional.ofNullable(this.serialInterfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="serialInterfaceNameVariable")
    private @Nullable Output<String> serialInterfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> serialInterfaceNameVariable() {
        return Optional.ofNullable(this.serialInterfaceNameVariable);
    }

    /**
     * 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     * 
     */
    @Import(name="shapingRate")
    private @Nullable Output<Integer> shapingRate;

    /**
     * @return 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> shapingRate() {
        return Optional.ofNullable(this.shapingRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shapingRateVariable")
    private @Nullable Output<String> shapingRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shapingRateVariable() {
        return Optional.ofNullable(this.shapingRateVariable);
    }

    /**
     * Administrative state - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * Static ingress QoS for the port - Range: `0`-`7`
     * 
     */
    @Import(name="staticIngressQos")
    private @Nullable Output<Integer> staticIngressQos;

    /**
     * @return Static ingress QoS for the port - Range: `0`-`7`
     * 
     */
    public Optional<Output<Integer>> staticIngressQos() {
        return Optional.ofNullable(this.staticIngressQos);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="staticIngressQosVariable")
    private @Nullable Output<String> staticIngressQosVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> staticIngressQosVariable() {
        return Optional.ofNullable(this.staticIngressQosVariable);
    }

    /**
     * TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
     * 
     */
    @Import(name="tcpMss")
    private @Nullable Output<Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
     * 
     */
    public Optional<Output<Integer>> tcpMss() {
        return Optional.ofNullable(this.tcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssVariable")
    private @Nullable Output<String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssVariable() {
        return Optional.ofNullable(this.tcpMssVariable);
    }

    /**
     * Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    @Import(name="tlocExtension")
    private @Nullable Output<String> tlocExtension;

    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public Optional<Output<String>> tlocExtension() {
        return Optional.ofNullable(this.tlocExtension);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tlocExtensionVariable")
    private @Nullable Output<String> tlocExtensionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tlocExtensionVariable() {
        return Optional.ofNullable(this.tlocExtensionVariable);
    }

    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowAll")
    private @Nullable Output<Boolean> tunnelInterfaceAllowAll;

    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowAll() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAll);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowAllVariable")
    private @Nullable Output<String> tunnelInterfaceAllowAllVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowAllVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAllVariable);
    }

    /**
     * Allow/deny BGP - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowBgp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowBgp;

    /**
     * @return Allow/deny BGP - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowBgp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowBgpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowBgpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowBgpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgpVariable);
    }

    /**
     * Allow/Deny DHCP - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDhcp;

    /**
     * @return Allow/Deny DHCP - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDhcp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDhcpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcpVariable);
    }

    /**
     * Allow/Deny DNS - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDns")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDns;

    /**
     * @return Allow/Deny DNS - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDns() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDns);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDnsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDnsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDnsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDnsVariable);
    }

    /**
     * Allow/Deny Https - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowHttps")
    private @Nullable Output<Boolean> tunnelInterfaceAllowHttps;

    /**
     * @return Allow/Deny Https - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowHttps() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttps);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowHttpsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowHttpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowHttpsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttpsVariable);
    }

    /**
     * Allow/Deny ICMP - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowIcmp;

    /**
     * @return Allow/Deny ICMP - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowIcmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowIcmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowIcmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmpVariable);
    }

    /**
     * Allow/Deny NETCONF - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNetconf;

    /**
     * @return Allow/Deny NETCONF - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNetconf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNetconfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNetconfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconfVariable);
    }

    /**
     * Allow/Deny NTP - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNtp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNtp;

    /**
     * @return Allow/Deny NTP - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNtp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNtpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNtpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNtpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtpVariable);
    }

    /**
     * Allow/Deny OSPF - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowOspf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowOspf;

    /**
     * @return Allow/Deny OSPF - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowOspf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowOspfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowOspfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowOspfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspfVariable);
    }

    /**
     * Allow/Deny SNMP - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSnmp;

    /**
     * @return Allow/Deny SNMP - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSnmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSnmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSnmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmpVariable);
    }

    /**
     * Allow/Deny SSH - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSsh")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSsh;

    /**
     * @return Allow/Deny SSH - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSsh() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSsh);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSshVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSshVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSshVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSshVariable);
    }

    /**
     * Allow/Deny STUN - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowStun")
    private @Nullable Output<Boolean> tunnelInterfaceAllowStun;

    /**
     * @return Allow/Deny STUN - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowStun() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStun);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowStunVariable")
    private @Nullable Output<String> tunnelInterfaceAllowStunVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowStunVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStunVariable);
    }

    /**
     * Bind loopback tunnel interface to a physical interface
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnel")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnel;

    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnel() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnel);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnelVariable")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnelVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnelVariable);
    }

    /**
     * Set TLOC as border TLOC - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceBorder")
    private @Nullable Output<Boolean> tunnelInterfaceBorder;

    /**
     * @return Set TLOC as border TLOC - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceBorder() {
        return Optional.ofNullable(this.tunnelInterfaceBorder);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBorderVariable")
    private @Nullable Output<String> tunnelInterfaceBorderVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBorderVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBorderVariable);
    }

    /**
     * Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceCarrier")
    private @Nullable Output<String> tunnelInterfaceCarrier;

    /**
     * @return Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrier() {
        return Optional.ofNullable(this.tunnelInterfaceCarrier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceCarrierVariable")
    private @Nullable Output<String> tunnelInterfaceCarrierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrierVariable() {
        return Optional.ofNullable(this.tunnelInterfaceCarrierVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragment")
    private @Nullable Output<Boolean> tunnelInterfaceClearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceClearDontFragment() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragmentVariable")
    private @Nullable Output<String> tunnelInterfaceClearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceClearDontFragmentVariable() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragmentVariable);
    }

    /**
     * Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceColor")
    private @Nullable Output<String> tunnelInterfaceColor;

    /**
     * @return Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColor() {
        return Optional.ofNullable(this.tunnelInterfaceColor);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceColorVariable")
    private @Nullable Output<String> tunnelInterfaceColorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColorVariable() {
        return Optional.ofNullable(this.tunnelInterfaceColorVariable);
    }

    /**
     * Set the maximum number of control connections for this TLOC - Range: `0`-`8`
     * 
     */
    @Import(name="tunnelInterfaceControlConnections")
    private @Nullable Output<Integer> tunnelInterfaceControlConnections;

    /**
     * @return Set the maximum number of control connections for this TLOC - Range: `0`-`8`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceControlConnections() {
        return Optional.ofNullable(this.tunnelInterfaceControlConnections);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceControlConnectionsVariable")
    private @Nullable Output<String> tunnelInterfaceControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceControlConnectionsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceControlConnectionsVariable);
    }

    /**
     * Encapsulation for TLOC
     * 
     */
    @Import(name="tunnelInterfaceEncapsulations")
    private @Nullable Output<List<VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations;

    /**
     * @return Encapsulation for TLOC
     * 
     */
    public Optional<Output<List<VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs>>> tunnelInterfaceEncapsulations() {
        return Optional.ofNullable(this.tunnelInterfaceEncapsulations);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupListVariable")
    private @Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceExcludeControllerGroupListVariable() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupListVariable);
    }

    /**
     * Exclude the following controller groups defined in this list
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupLists")
    private @Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists;

    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceExcludeControllerGroupLists() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupLists);
    }

    /**
     * List of groups
     * 
     */
    @Import(name="tunnelInterfaceGroups")
    private @Nullable Output<List<Integer>> tunnelInterfaceGroups;

    /**
     * @return List of groups
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceGroups() {
        return Optional.ofNullable(this.tunnelInterfaceGroups);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceGroupsVariable")
    private @Nullable Output<String> tunnelInterfaceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceGroupsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceGroupsVariable);
    }

    /**
     * Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
     * 
     */
    @Import(name="tunnelInterfaceHelloInterval")
    private @Nullable Output<Integer> tunnelInterfaceHelloInterval;

    /**
     * @return Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloInterval() {
        return Optional.ofNullable(this.tunnelInterfaceHelloInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceHelloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloIntervalVariable);
    }

    /**
     * Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
     * 
     */
    @Import(name="tunnelInterfaceHelloTolerance")
    private @Nullable Output<Integer> tunnelInterfaceHelloTolerance;

    /**
     * @return Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloTolerance() {
        return Optional.ofNullable(this.tunnelInterfaceHelloTolerance);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloToleranceVariable")
    private @Nullable Output<String> tunnelInterfaceHelloToleranceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloToleranceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloToleranceVariable);
    }

    /**
     * Set TLOC as last resort - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuit")
    private @Nullable Output<Boolean> tunnelInterfaceLastResortCircuit;

    /**
     * @return Set TLOC as last resort - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLastResortCircuit() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuit);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuitVariable")
    private @Nullable Output<String> tunnelInterfaceLastResortCircuitVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLastResortCircuitVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuitVariable);
    }

    /**
     * Set the interface as a low-bandwidth circuit - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLink")
    private @Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink;

    /**
     * @return Set the interface as a low-bandwidth circuit - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLowBandwidthLink() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLink);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLinkVariable")
    private @Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLowBandwidthLinkVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLinkVariable);
    }

    /**
     * Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshInterval")
    private @Nullable Output<Integer> tunnelInterfaceNatRefreshInterval;

    /**
     * @return Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceNatRefreshInterval() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNatRefreshIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshIntervalVariable);
    }

    /**
     * Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceNetworkBroadcast")
    private @Nullable Output<Boolean> tunnelInterfaceNetworkBroadcast;

    /**
     * @return Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceNetworkBroadcast() {
        return Optional.ofNullable(this.tunnelInterfaceNetworkBroadcast);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNetworkBroadcastVariable")
    private @Nullable Output<String> tunnelInterfaceNetworkBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNetworkBroadcastVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNetworkBroadcastVariable);
    }

    /**
     * Disallow port hopping on the tunnel interface - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfacePortHop")
    private @Nullable Output<Boolean> tunnelInterfacePortHop;

    /**
     * @return Disallow port hopping on the tunnel interface - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfacePortHop() {
        return Optional.ofNullable(this.tunnelInterfacePortHop);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfacePortHopVariable")
    private @Nullable Output<String> tunnelInterfacePortHopVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfacePortHopVariable() {
        return Optional.ofNullable(this.tunnelInterfacePortHopVariable);
    }

    /**
     * Restrict this TLOC behavior - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceRestrict")
    private @Nullable Output<Boolean> tunnelInterfaceRestrict;

    /**
     * @return Restrict this TLOC behavior - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceRestrict() {
        return Optional.ofNullable(this.tunnelInterfaceRestrict);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceRestrictVariable")
    private @Nullable Output<String> tunnelInterfaceRestrictVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceRestrictVariable() {
        return Optional.ofNullable(this.tunnelInterfaceRestrictVariable);
    }

    /**
     * Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMss")
    private @Nullable Output<Integer> tunnelInterfaceTunnelTcpMss;

    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceTunnelTcpMss() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMssVariable")
    private @Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceTunnelTcpMssVariable() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMssVariable);
    }

    /**
     * Put this wan interface in STUN mode only - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServer")
    private @Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer;

    /**
     * @return Put this wan interface in STUN mode only - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceVbondAsStunServer() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServer);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServerVariable")
    private @Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVbondAsStunServerVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServerVariable);
    }

    /**
     * Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreference")
    private @Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference;

    /**
     * @return Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceVmanageConnectionPreference() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreference);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    private @Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreferenceVariable);
    }

    /**
     * Set tunnel QoS mode - Choices: `spoke`
     * 
     */
    @Import(name="tunnelQosMode")
    private @Nullable Output<String> tunnelQosMode;

    /**
     * @return Set tunnel QoS mode - Choices: `spoke`
     * 
     */
    public Optional<Output<String>> tunnelQosMode() {
        return Optional.ofNullable(this.tunnelQosMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelQosModeVariable")
    private @Nullable Output<String> tunnelQosModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelQosModeVariable() {
        return Optional.ofNullable(this.tunnelQosModeVariable);
    }

    /**
     * Name of rewrite rule
     * 
     */
    @Import(name="writeRule")
    private @Nullable Output<String> writeRule;

    /**
     * @return Name of rewrite rule
     * 
     */
    public Optional<Output<String>> writeRule() {
        return Optional.ofNullable(this.writeRule);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="writeRuleVariable")
    private @Nullable Output<String> writeRuleVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> writeRuleVariable() {
        return Optional.ofNullable(this.writeRuleVariable);
    }

    private VpnInterfaceT1E1SerialFeatureTemplateArgs() {}

    private VpnInterfaceT1E1SerialFeatureTemplateArgs(VpnInterfaceT1E1SerialFeatureTemplateArgs $) {
        this.autonegotiate = $.autonegotiate;
        this.autonegotiateVariable = $.autonegotiateVariable;
        this.clearDontFragmentBit = $.clearDontFragmentBit;
        this.clearDontFragmentBitVariable = $.clearDontFragmentBitVariable;
        this.clockRate = $.clockRate;
        this.clockRateVariable = $.clockRateVariable;
        this.coreRegion = $.coreRegion;
        this.coreRegionVariable = $.coreRegionVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.enableCoreRegion = $.enableCoreRegion;
        this.enableCoreRegionVariable = $.enableCoreRegionVariable;
        this.encapsulation = $.encapsulation;
        this.encapsulationVariable = $.encapsulationVariable;
        this.interfaceBandwidthCapacity = $.interfaceBandwidthCapacity;
        this.interfaceBandwidthCapacityVariable = $.interfaceBandwidthCapacityVariable;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.interfaceDownstreamBandwidthCapacity = $.interfaceDownstreamBandwidthCapacity;
        this.interfaceDownstreamBandwidthCapacityVariable = $.interfaceDownstreamBandwidthCapacityVariable;
        this.ipMtu = $.ipMtu;
        this.ipMtuVariable = $.ipMtuVariable;
        this.ipv4AccessLists = $.ipv4AccessLists;
        this.ipv4Address = $.ipv4Address;
        this.ipv4AddressVariable = $.ipv4AddressVariable;
        this.ipv6AccessLists = $.ipv6AccessLists;
        this.ipv6Address = $.ipv6Address;
        this.ipv6AddressVariable = $.ipv6AddressVariable;
        this.name = $.name;
        this.perTunnelQos = $.perTunnelQos;
        this.perTunnelQosAggregator = $.perTunnelQosAggregator;
        this.perTunnelQosAggregatorVariable = $.perTunnelQosAggregatorVariable;
        this.perTunnelQosVariable = $.perTunnelQosVariable;
        this.pmtuDiscovery = $.pmtuDiscovery;
        this.pmtuDiscoveryVariable = $.pmtuDiscoveryVariable;
        this.qosMap = $.qosMap;
        this.qosMapVariable = $.qosMapVariable;
        this.qosMapVpn = $.qosMapVpn;
        this.qosMapVpnVariable = $.qosMapVpnVariable;
        this.secondaryRegion = $.secondaryRegion;
        this.secondaryRegionVariable = $.secondaryRegionVariable;
        this.serialInterfaceName = $.serialInterfaceName;
        this.serialInterfaceNameVariable = $.serialInterfaceNameVariable;
        this.shapingRate = $.shapingRate;
        this.shapingRateVariable = $.shapingRateVariable;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.staticIngressQos = $.staticIngressQos;
        this.staticIngressQosVariable = $.staticIngressQosVariable;
        this.tcpMss = $.tcpMss;
        this.tcpMssVariable = $.tcpMssVariable;
        this.tlocExtension = $.tlocExtension;
        this.tlocExtensionVariable = $.tlocExtensionVariable;
        this.tunnelInterfaceAllowAll = $.tunnelInterfaceAllowAll;
        this.tunnelInterfaceAllowAllVariable = $.tunnelInterfaceAllowAllVariable;
        this.tunnelInterfaceAllowBgp = $.tunnelInterfaceAllowBgp;
        this.tunnelInterfaceAllowBgpVariable = $.tunnelInterfaceAllowBgpVariable;
        this.tunnelInterfaceAllowDhcp = $.tunnelInterfaceAllowDhcp;
        this.tunnelInterfaceAllowDhcpVariable = $.tunnelInterfaceAllowDhcpVariable;
        this.tunnelInterfaceAllowDns = $.tunnelInterfaceAllowDns;
        this.tunnelInterfaceAllowDnsVariable = $.tunnelInterfaceAllowDnsVariable;
        this.tunnelInterfaceAllowHttps = $.tunnelInterfaceAllowHttps;
        this.tunnelInterfaceAllowHttpsVariable = $.tunnelInterfaceAllowHttpsVariable;
        this.tunnelInterfaceAllowIcmp = $.tunnelInterfaceAllowIcmp;
        this.tunnelInterfaceAllowIcmpVariable = $.tunnelInterfaceAllowIcmpVariable;
        this.tunnelInterfaceAllowNetconf = $.tunnelInterfaceAllowNetconf;
        this.tunnelInterfaceAllowNetconfVariable = $.tunnelInterfaceAllowNetconfVariable;
        this.tunnelInterfaceAllowNtp = $.tunnelInterfaceAllowNtp;
        this.tunnelInterfaceAllowNtpVariable = $.tunnelInterfaceAllowNtpVariable;
        this.tunnelInterfaceAllowOspf = $.tunnelInterfaceAllowOspf;
        this.tunnelInterfaceAllowOspfVariable = $.tunnelInterfaceAllowOspfVariable;
        this.tunnelInterfaceAllowSnmp = $.tunnelInterfaceAllowSnmp;
        this.tunnelInterfaceAllowSnmpVariable = $.tunnelInterfaceAllowSnmpVariable;
        this.tunnelInterfaceAllowSsh = $.tunnelInterfaceAllowSsh;
        this.tunnelInterfaceAllowSshVariable = $.tunnelInterfaceAllowSshVariable;
        this.tunnelInterfaceAllowStun = $.tunnelInterfaceAllowStun;
        this.tunnelInterfaceAllowStunVariable = $.tunnelInterfaceAllowStunVariable;
        this.tunnelInterfaceBindLoopbackTunnel = $.tunnelInterfaceBindLoopbackTunnel;
        this.tunnelInterfaceBindLoopbackTunnelVariable = $.tunnelInterfaceBindLoopbackTunnelVariable;
        this.tunnelInterfaceBorder = $.tunnelInterfaceBorder;
        this.tunnelInterfaceBorderVariable = $.tunnelInterfaceBorderVariable;
        this.tunnelInterfaceCarrier = $.tunnelInterfaceCarrier;
        this.tunnelInterfaceCarrierVariable = $.tunnelInterfaceCarrierVariable;
        this.tunnelInterfaceClearDontFragment = $.tunnelInterfaceClearDontFragment;
        this.tunnelInterfaceClearDontFragmentVariable = $.tunnelInterfaceClearDontFragmentVariable;
        this.tunnelInterfaceColor = $.tunnelInterfaceColor;
        this.tunnelInterfaceColorVariable = $.tunnelInterfaceColorVariable;
        this.tunnelInterfaceControlConnections = $.tunnelInterfaceControlConnections;
        this.tunnelInterfaceControlConnectionsVariable = $.tunnelInterfaceControlConnectionsVariable;
        this.tunnelInterfaceEncapsulations = $.tunnelInterfaceEncapsulations;
        this.tunnelInterfaceExcludeControllerGroupListVariable = $.tunnelInterfaceExcludeControllerGroupListVariable;
        this.tunnelInterfaceExcludeControllerGroupLists = $.tunnelInterfaceExcludeControllerGroupLists;
        this.tunnelInterfaceGroups = $.tunnelInterfaceGroups;
        this.tunnelInterfaceGroupsVariable = $.tunnelInterfaceGroupsVariable;
        this.tunnelInterfaceHelloInterval = $.tunnelInterfaceHelloInterval;
        this.tunnelInterfaceHelloIntervalVariable = $.tunnelInterfaceHelloIntervalVariable;
        this.tunnelInterfaceHelloTolerance = $.tunnelInterfaceHelloTolerance;
        this.tunnelInterfaceHelloToleranceVariable = $.tunnelInterfaceHelloToleranceVariable;
        this.tunnelInterfaceLastResortCircuit = $.tunnelInterfaceLastResortCircuit;
        this.tunnelInterfaceLastResortCircuitVariable = $.tunnelInterfaceLastResortCircuitVariable;
        this.tunnelInterfaceLowBandwidthLink = $.tunnelInterfaceLowBandwidthLink;
        this.tunnelInterfaceLowBandwidthLinkVariable = $.tunnelInterfaceLowBandwidthLinkVariable;
        this.tunnelInterfaceNatRefreshInterval = $.tunnelInterfaceNatRefreshInterval;
        this.tunnelInterfaceNatRefreshIntervalVariable = $.tunnelInterfaceNatRefreshIntervalVariable;
        this.tunnelInterfaceNetworkBroadcast = $.tunnelInterfaceNetworkBroadcast;
        this.tunnelInterfaceNetworkBroadcastVariable = $.tunnelInterfaceNetworkBroadcastVariable;
        this.tunnelInterfacePortHop = $.tunnelInterfacePortHop;
        this.tunnelInterfacePortHopVariable = $.tunnelInterfacePortHopVariable;
        this.tunnelInterfaceRestrict = $.tunnelInterfaceRestrict;
        this.tunnelInterfaceRestrictVariable = $.tunnelInterfaceRestrictVariable;
        this.tunnelInterfaceTunnelTcpMss = $.tunnelInterfaceTunnelTcpMss;
        this.tunnelInterfaceTunnelTcpMssVariable = $.tunnelInterfaceTunnelTcpMssVariable;
        this.tunnelInterfaceVbondAsStunServer = $.tunnelInterfaceVbondAsStunServer;
        this.tunnelInterfaceVbondAsStunServerVariable = $.tunnelInterfaceVbondAsStunServerVariable;
        this.tunnelInterfaceVmanageConnectionPreference = $.tunnelInterfaceVmanageConnectionPreference;
        this.tunnelInterfaceVmanageConnectionPreferenceVariable = $.tunnelInterfaceVmanageConnectionPreferenceVariable;
        this.tunnelQosMode = $.tunnelQosMode;
        this.tunnelQosModeVariable = $.tunnelQosModeVariable;
        this.writeRule = $.writeRule;
        this.writeRuleVariable = $.writeRuleVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnInterfaceT1E1SerialFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnInterfaceT1E1SerialFeatureTemplateArgs $;

        public Builder() {
            $ = new VpnInterfaceT1E1SerialFeatureTemplateArgs();
        }

        public Builder(VpnInterfaceT1E1SerialFeatureTemplateArgs defaults) {
            $ = new VpnInterfaceT1E1SerialFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autonegotiate Link autonegotiation - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder autonegotiate(@Nullable Output<Boolean> autonegotiate) {
            $.autonegotiate = autonegotiate;
            return this;
        }

        /**
         * @param autonegotiate Link autonegotiation - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder autonegotiate(Boolean autonegotiate) {
            return autonegotiate(Output.of(autonegotiate));
        }

        /**
         * @param autonegotiateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder autonegotiateVariable(@Nullable Output<String> autonegotiateVariable) {
            $.autonegotiateVariable = autonegotiateVariable;
            return this;
        }

        /**
         * @param autonegotiateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder autonegotiateVariable(String autonegotiateVariable) {
            return autonegotiateVariable(Output.of(autonegotiateVariable));
        }

        /**
         * @param clearDontFragmentBit Clear don&#39;t fragment bit - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentBit(@Nullable Output<Boolean> clearDontFragmentBit) {
            $.clearDontFragmentBit = clearDontFragmentBit;
            return this;
        }

        /**
         * @param clearDontFragmentBit Clear don&#39;t fragment bit - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentBit(Boolean clearDontFragmentBit) {
            return clearDontFragmentBit(Output.of(clearDontFragmentBit));
        }

        /**
         * @param clearDontFragmentBitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentBitVariable(@Nullable Output<String> clearDontFragmentBitVariable) {
            $.clearDontFragmentBitVariable = clearDontFragmentBitVariable;
            return this;
        }

        /**
         * @param clearDontFragmentBitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentBitVariable(String clearDontFragmentBitVariable) {
            return clearDontFragmentBitVariable(Output.of(clearDontFragmentBitVariable));
        }

        /**
         * @param clockRate Set preference for interface Clock speed - Choices: `1200`, `2400`, `3600`, `4800`, `9600`, `14400`, `19200`, `28800`,
         * `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`,
         * `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
         * 
         * @return builder
         * 
         */
        public Builder clockRate(@Nullable Output<String> clockRate) {
            $.clockRate = clockRate;
            return this;
        }

        /**
         * @param clockRate Set preference for interface Clock speed - Choices: `1200`, `2400`, `3600`, `4800`, `9600`, `14400`, `19200`, `28800`,
         * `32000`, `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`,
         * `256000`, `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
         * 
         * @return builder
         * 
         */
        public Builder clockRate(String clockRate) {
            return clockRate(Output.of(clockRate));
        }

        /**
         * @param clockRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clockRateVariable(@Nullable Output<String> clockRateVariable) {
            $.clockRateVariable = clockRateVariable;
            return this;
        }

        /**
         * @param clockRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clockRateVariable(String clockRateVariable) {
            return clockRateVariable(Output.of(clockRateVariable));
        }

        /**
         * @param coreRegion Enable core region - Choices: `core`, `core-shared` - Default value: `core`
         * 
         * @return builder
         * 
         */
        public Builder coreRegion(@Nullable Output<String> coreRegion) {
            $.coreRegion = coreRegion;
            return this;
        }

        /**
         * @param coreRegion Enable core region - Choices: `core`, `core-shared` - Default value: `core`
         * 
         * @return builder
         * 
         */
        public Builder coreRegion(String coreRegion) {
            return coreRegion(Output.of(coreRegion));
        }

        /**
         * @param coreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder coreRegionVariable(@Nullable Output<String> coreRegionVariable) {
            $.coreRegionVariable = coreRegionVariable;
            return this;
        }

        /**
         * @param coreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder coreRegionVariable(String coreRegionVariable) {
            return coreRegionVariable(Output.of(coreRegionVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param enableCoreRegion Enable core region - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegion(@Nullable Output<Boolean> enableCoreRegion) {
            $.enableCoreRegion = enableCoreRegion;
            return this;
        }

        /**
         * @param enableCoreRegion Enable core region - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegion(Boolean enableCoreRegion) {
            return enableCoreRegion(Output.of(enableCoreRegion));
        }

        /**
         * @param enableCoreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegionVariable(@Nullable Output<String> enableCoreRegionVariable) {
            $.enableCoreRegionVariable = enableCoreRegionVariable;
            return this;
        }

        /**
         * @param enableCoreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegionVariable(String enableCoreRegionVariable) {
            return enableCoreRegionVariable(Output.of(enableCoreRegionVariable));
        }

        /**
         * @param encapsulation Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(@Nullable Output<String> encapsulation) {
            $.encapsulation = encapsulation;
            return this;
        }

        /**
         * @param encapsulation Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
         * 
         * @return builder
         * 
         */
        public Builder encapsulation(String encapsulation) {
            return encapsulation(Output.of(encapsulation));
        }

        /**
         * @param encapsulationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapsulationVariable(@Nullable Output<String> encapsulationVariable) {
            $.encapsulationVariable = encapsulationVariable;
            return this;
        }

        /**
         * @param encapsulationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapsulationVariable(String encapsulationVariable) {
            return encapsulationVariable(Output.of(encapsulationVariable));
        }

        /**
         * @param interfaceBandwidthCapacity Interface bandwidth capacity, in kbps - Range: `1`-`128`
         * 
         * @return builder
         * 
         */
        public Builder interfaceBandwidthCapacity(@Nullable Output<Integer> interfaceBandwidthCapacity) {
            $.interfaceBandwidthCapacity = interfaceBandwidthCapacity;
            return this;
        }

        /**
         * @param interfaceBandwidthCapacity Interface bandwidth capacity, in kbps - Range: `1`-`128`
         * 
         * @return builder
         * 
         */
        public Builder interfaceBandwidthCapacity(Integer interfaceBandwidthCapacity) {
            return interfaceBandwidthCapacity(Output.of(interfaceBandwidthCapacity));
        }

        /**
         * @param interfaceBandwidthCapacityVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceBandwidthCapacityVariable(@Nullable Output<String> interfaceBandwidthCapacityVariable) {
            $.interfaceBandwidthCapacityVariable = interfaceBandwidthCapacityVariable;
            return this;
        }

        /**
         * @param interfaceBandwidthCapacityVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceBandwidthCapacityVariable(String interfaceBandwidthCapacityVariable) {
            return interfaceBandwidthCapacityVariable(Output.of(interfaceBandwidthCapacityVariable));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param interfaceDownstreamBandwidthCapacity Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder interfaceDownstreamBandwidthCapacity(@Nullable Output<Integer> interfaceDownstreamBandwidthCapacity) {
            $.interfaceDownstreamBandwidthCapacity = interfaceDownstreamBandwidthCapacity;
            return this;
        }

        /**
         * @param interfaceDownstreamBandwidthCapacity Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder interfaceDownstreamBandwidthCapacity(Integer interfaceDownstreamBandwidthCapacity) {
            return interfaceDownstreamBandwidthCapacity(Output.of(interfaceDownstreamBandwidthCapacity));
        }

        /**
         * @param interfaceDownstreamBandwidthCapacityVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDownstreamBandwidthCapacityVariable(@Nullable Output<String> interfaceDownstreamBandwidthCapacityVariable) {
            $.interfaceDownstreamBandwidthCapacityVariable = interfaceDownstreamBandwidthCapacityVariable;
            return this;
        }

        /**
         * @param interfaceDownstreamBandwidthCapacityVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDownstreamBandwidthCapacityVariable(String interfaceDownstreamBandwidthCapacityVariable) {
            return interfaceDownstreamBandwidthCapacityVariable(Output.of(interfaceDownstreamBandwidthCapacityVariable));
        }

        /**
         * @param ipMtu Interface MTU &lt;68...2000&gt;, in bytes - Range: `68`-`2000` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(@Nullable Output<Integer> ipMtu) {
            $.ipMtu = ipMtu;
            return this;
        }

        /**
         * @param ipMtu Interface MTU &lt;68...2000&gt;, in bytes - Range: `68`-`2000` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(Integer ipMtu) {
            return ipMtu(Output.of(ipMtu));
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(@Nullable Output<String> ipMtuVariable) {
            $.ipMtuVariable = ipMtuVariable;
            return this;
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(String ipMtuVariable) {
            return ipMtuVariable(Output.of(ipMtuVariable));
        }

        /**
         * @param ipv4AccessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder ipv4AccessLists(@Nullable Output<List<VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs>> ipv4AccessLists) {
            $.ipv4AccessLists = ipv4AccessLists;
            return this;
        }

        /**
         * @param ipv4AccessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder ipv4AccessLists(List<VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs> ipv4AccessLists) {
            return ipv4AccessLists(Output.of(ipv4AccessLists));
        }

        /**
         * @param ipv4AccessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder ipv4AccessLists(VpnInterfaceT1E1SerialFeatureTemplateIpv4AccessListArgs... ipv4AccessLists) {
            return ipv4AccessLists(List.of(ipv4AccessLists));
        }

        /**
         * @param ipv4Address Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        /**
         * @param ipv4Address Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(@Nullable Output<String> ipv4AddressVariable) {
            $.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            return ipv4AddressVariable(Output.of(ipv4AddressVariable));
        }

        /**
         * @param ipv6AccessLists Apply IPv6 access list
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessLists(@Nullable Output<List<VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs>> ipv6AccessLists) {
            $.ipv6AccessLists = ipv6AccessLists;
            return this;
        }

        /**
         * @param ipv6AccessLists Apply IPv6 access list
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessLists(List<VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs> ipv6AccessLists) {
            return ipv6AccessLists(Output.of(ipv6AccessLists));
        }

        /**
         * @param ipv6AccessLists Apply IPv6 access list
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessLists(VpnInterfaceT1E1SerialFeatureTemplateIpv6AccessListArgs... ipv6AccessLists) {
            return ipv6AccessLists(List.of(ipv6AccessLists));
        }

        /**
         * @param ipv6Address Assign IPv6 address
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(@Nullable Output<String> ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * @param ipv6Address Assign IPv6 address
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            return ipv6Address(Output.of(ipv6Address));
        }

        /**
         * @param ipv6AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressVariable(@Nullable Output<String> ipv6AddressVariable) {
            $.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }

        /**
         * @param ipv6AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            return ipv6AddressVariable(Output.of(ipv6AddressVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param perTunnelQos Per-tunnel Qos - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQos(@Nullable Output<Boolean> perTunnelQos) {
            $.perTunnelQos = perTunnelQos;
            return this;
        }

        /**
         * @param perTunnelQos Per-tunnel Qos - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQos(Boolean perTunnelQos) {
            return perTunnelQos(Output.of(perTunnelQos));
        }

        /**
         * @param perTunnelQosAggregator Per-tunnel QoS Aggregator - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregator(@Nullable Output<Boolean> perTunnelQosAggregator) {
            $.perTunnelQosAggregator = perTunnelQosAggregator;
            return this;
        }

        /**
         * @param perTunnelQosAggregator Per-tunnel QoS Aggregator - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregator(Boolean perTunnelQosAggregator) {
            return perTunnelQosAggregator(Output.of(perTunnelQosAggregator));
        }

        /**
         * @param perTunnelQosAggregatorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregatorVariable(@Nullable Output<String> perTunnelQosAggregatorVariable) {
            $.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            return this;
        }

        /**
         * @param perTunnelQosAggregatorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosAggregatorVariable(String perTunnelQosAggregatorVariable) {
            return perTunnelQosAggregatorVariable(Output.of(perTunnelQosAggregatorVariable));
        }

        /**
         * @param perTunnelQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosVariable(@Nullable Output<String> perTunnelQosVariable) {
            $.perTunnelQosVariable = perTunnelQosVariable;
            return this;
        }

        /**
         * @param perTunnelQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder perTunnelQosVariable(String perTunnelQosVariable) {
            return perTunnelQosVariable(Output.of(perTunnelQosVariable));
        }

        /**
         * @param pmtuDiscovery Path MTU Discovery - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscovery(@Nullable Output<Boolean> pmtuDiscovery) {
            $.pmtuDiscovery = pmtuDiscovery;
            return this;
        }

        /**
         * @param pmtuDiscovery Path MTU Discovery - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscovery(Boolean pmtuDiscovery) {
            return pmtuDiscovery(Output.of(pmtuDiscovery));
        }

        /**
         * @param pmtuDiscoveryVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscoveryVariable(@Nullable Output<String> pmtuDiscoveryVariable) {
            $.pmtuDiscoveryVariable = pmtuDiscoveryVariable;
            return this;
        }

        /**
         * @param pmtuDiscoveryVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscoveryVariable(String pmtuDiscoveryVariable) {
            return pmtuDiscoveryVariable(Output.of(pmtuDiscoveryVariable));
        }

        /**
         * @param qosMap Name of QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMap(@Nullable Output<String> qosMap) {
            $.qosMap = qosMap;
            return this;
        }

        /**
         * @param qosMap Name of QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMap(String qosMap) {
            return qosMap(Output.of(qosMap));
        }

        /**
         * @param qosMapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVariable(@Nullable Output<String> qosMapVariable) {
            $.qosMapVariable = qosMapVariable;
            return this;
        }

        /**
         * @param qosMapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVariable(String qosMapVariable) {
            return qosMapVariable(Output.of(qosMapVariable));
        }

        /**
         * @param qosMapVpn Name of VPN QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpn(@Nullable Output<String> qosMapVpn) {
            $.qosMapVpn = qosMapVpn;
            return this;
        }

        /**
         * @param qosMapVpn Name of VPN QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpn(String qosMapVpn) {
            return qosMapVpn(Output.of(qosMapVpn));
        }

        /**
         * @param qosMapVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpnVariable(@Nullable Output<String> qosMapVpnVariable) {
            $.qosMapVpnVariable = qosMapVpnVariable;
            return this;
        }

        /**
         * @param qosMapVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpnVariable(String qosMapVpnVariable) {
            return qosMapVpnVariable(Output.of(qosMapVpnVariable));
        }

        /**
         * @param secondaryRegion Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegion(@Nullable Output<String> secondaryRegion) {
            $.secondaryRegion = secondaryRegion;
            return this;
        }

        /**
         * @param secondaryRegion Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegion(String secondaryRegion) {
            return secondaryRegion(Output.of(secondaryRegion));
        }

        /**
         * @param secondaryRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionVariable(@Nullable Output<String> secondaryRegionVariable) {
            $.secondaryRegionVariable = secondaryRegionVariable;
            return this;
        }

        /**
         * @param secondaryRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionVariable(String secondaryRegionVariable) {
            return secondaryRegionVariable(Output.of(secondaryRegionVariable));
        }

        /**
         * @param serialInterfaceName Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
         * 
         * @return builder
         * 
         */
        public Builder serialInterfaceName(@Nullable Output<String> serialInterfaceName) {
            $.serialInterfaceName = serialInterfaceName;
            return this;
        }

        /**
         * @param serialInterfaceName Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
         * 
         * @return builder
         * 
         */
        public Builder serialInterfaceName(String serialInterfaceName) {
            return serialInterfaceName(Output.of(serialInterfaceName));
        }

        /**
         * @param serialInterfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder serialInterfaceNameVariable(@Nullable Output<String> serialInterfaceNameVariable) {
            $.serialInterfaceNameVariable = serialInterfaceNameVariable;
            return this;
        }

        /**
         * @param serialInterfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder serialInterfaceNameVariable(String serialInterfaceNameVariable) {
            return serialInterfaceNameVariable(Output.of(serialInterfaceNameVariable));
        }

        /**
         * @param shapingRate 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder shapingRate(@Nullable Output<Integer> shapingRate) {
            $.shapingRate = shapingRate;
            return this;
        }

        /**
         * @param shapingRate 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder shapingRate(Integer shapingRate) {
            return shapingRate(Output.of(shapingRate));
        }

        /**
         * @param shapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shapingRateVariable(@Nullable Output<String> shapingRateVariable) {
            $.shapingRateVariable = shapingRateVariable;
            return this;
        }

        /**
         * @param shapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shapingRateVariable(String shapingRateVariable) {
            return shapingRateVariable(Output.of(shapingRateVariable));
        }

        /**
         * @param shutdown Administrative state - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param staticIngressQos Static ingress QoS for the port - Range: `0`-`7`
         * 
         * @return builder
         * 
         */
        public Builder staticIngressQos(@Nullable Output<Integer> staticIngressQos) {
            $.staticIngressQos = staticIngressQos;
            return this;
        }

        /**
         * @param staticIngressQos Static ingress QoS for the port - Range: `0`-`7`
         * 
         * @return builder
         * 
         */
        public Builder staticIngressQos(Integer staticIngressQos) {
            return staticIngressQos(Output.of(staticIngressQos));
        }

        /**
         * @param staticIngressQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder staticIngressQosVariable(@Nullable Output<String> staticIngressQosVariable) {
            $.staticIngressQosVariable = staticIngressQosVariable;
            return this;
        }

        /**
         * @param staticIngressQosVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder staticIngressQosVariable(String staticIngressQosVariable) {
            return staticIngressQosVariable(Output.of(staticIngressQosVariable));
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(@Nullable Output<Integer> tcpMss) {
            $.tcpMss = tcpMss;
            return this;
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(Integer tcpMss) {
            return tcpMss(Output.of(tcpMss));
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(@Nullable Output<String> tcpMssVariable) {
            $.tcpMssVariable = tcpMssVariable;
            return this;
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(String tcpMssVariable) {
            return tcpMssVariable(Output.of(tcpMssVariable));
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(@Nullable Output<String> tlocExtension) {
            $.tlocExtension = tlocExtension;
            return this;
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(String tlocExtension) {
            return tlocExtension(Output.of(tlocExtension));
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(@Nullable Output<String> tlocExtensionVariable) {
            $.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            return tlocExtensionVariable(Output.of(tlocExtensionVariable));
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(@Nullable Output<Boolean> tunnelInterfaceAllowAll) {
            $.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            return tunnelInterfaceAllowAll(Output.of(tunnelInterfaceAllowAll));
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(@Nullable Output<String> tunnelInterfaceAllowAllVariable) {
            $.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            return tunnelInterfaceAllowAllVariable(Output.of(tunnelInterfaceAllowAllVariable));
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(@Nullable Output<Boolean> tunnelInterfaceAllowBgp) {
            $.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            return tunnelInterfaceAllowBgp(Output.of(tunnelInterfaceAllowBgp));
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(@Nullable Output<String> tunnelInterfaceAllowBgpVariable) {
            $.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            return tunnelInterfaceAllowBgpVariable(Output.of(tunnelInterfaceAllowBgpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(@Nullable Output<Boolean> tunnelInterfaceAllowDhcp) {
            $.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            return tunnelInterfaceAllowDhcp(Output.of(tunnelInterfaceAllowDhcp));
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(@Nullable Output<String> tunnelInterfaceAllowDhcpVariable) {
            $.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            return tunnelInterfaceAllowDhcpVariable(Output.of(tunnelInterfaceAllowDhcpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(@Nullable Output<Boolean> tunnelInterfaceAllowDns) {
            $.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            return tunnelInterfaceAllowDns(Output.of(tunnelInterfaceAllowDns));
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(@Nullable Output<String> tunnelInterfaceAllowDnsVariable) {
            $.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            return tunnelInterfaceAllowDnsVariable(Output.of(tunnelInterfaceAllowDnsVariable));
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(@Nullable Output<Boolean> tunnelInterfaceAllowHttps) {
            $.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            return tunnelInterfaceAllowHttps(Output.of(tunnelInterfaceAllowHttps));
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(@Nullable Output<String> tunnelInterfaceAllowHttpsVariable) {
            $.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            return tunnelInterfaceAllowHttpsVariable(Output.of(tunnelInterfaceAllowHttpsVariable));
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(@Nullable Output<Boolean> tunnelInterfaceAllowIcmp) {
            $.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            return tunnelInterfaceAllowIcmp(Output.of(tunnelInterfaceAllowIcmp));
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(@Nullable Output<String> tunnelInterfaceAllowIcmpVariable) {
            $.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            return tunnelInterfaceAllowIcmpVariable(Output.of(tunnelInterfaceAllowIcmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(@Nullable Output<Boolean> tunnelInterfaceAllowNetconf) {
            $.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            return tunnelInterfaceAllowNetconf(Output.of(tunnelInterfaceAllowNetconf));
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(@Nullable Output<String> tunnelInterfaceAllowNetconfVariable) {
            $.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            return tunnelInterfaceAllowNetconfVariable(Output.of(tunnelInterfaceAllowNetconfVariable));
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(@Nullable Output<Boolean> tunnelInterfaceAllowNtp) {
            $.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            return tunnelInterfaceAllowNtp(Output.of(tunnelInterfaceAllowNtp));
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(@Nullable Output<String> tunnelInterfaceAllowNtpVariable) {
            $.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            return tunnelInterfaceAllowNtpVariable(Output.of(tunnelInterfaceAllowNtpVariable));
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(@Nullable Output<Boolean> tunnelInterfaceAllowOspf) {
            $.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            return tunnelInterfaceAllowOspf(Output.of(tunnelInterfaceAllowOspf));
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(@Nullable Output<String> tunnelInterfaceAllowOspfVariable) {
            $.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            return tunnelInterfaceAllowOspfVariable(Output.of(tunnelInterfaceAllowOspfVariable));
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(@Nullable Output<Boolean> tunnelInterfaceAllowSnmp) {
            $.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            return tunnelInterfaceAllowSnmp(Output.of(tunnelInterfaceAllowSnmp));
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(@Nullable Output<String> tunnelInterfaceAllowSnmpVariable) {
            $.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            return tunnelInterfaceAllowSnmpVariable(Output.of(tunnelInterfaceAllowSnmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(@Nullable Output<Boolean> tunnelInterfaceAllowSsh) {
            $.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            return tunnelInterfaceAllowSsh(Output.of(tunnelInterfaceAllowSsh));
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(@Nullable Output<String> tunnelInterfaceAllowSshVariable) {
            $.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            return tunnelInterfaceAllowSshVariable(Output.of(tunnelInterfaceAllowSshVariable));
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(@Nullable Output<Boolean> tunnelInterfaceAllowStun) {
            $.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            return tunnelInterfaceAllowStun(Output.of(tunnelInterfaceAllowStun));
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(@Nullable Output<String> tunnelInterfaceAllowStunVariable) {
            $.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            return tunnelInterfaceAllowStunVariable(Output.of(tunnelInterfaceAllowStunVariable));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnel) {
            $.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            return tunnelInterfaceBindLoopbackTunnel(Output.of(tunnelInterfaceBindLoopbackTunnel));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable) {
            $.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            return tunnelInterfaceBindLoopbackTunnelVariable(Output.of(tunnelInterfaceBindLoopbackTunnelVariable));
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(@Nullable Output<Boolean> tunnelInterfaceBorder) {
            $.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            return tunnelInterfaceBorder(Output.of(tunnelInterfaceBorder));
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(@Nullable Output<String> tunnelInterfaceBorderVariable) {
            $.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            return tunnelInterfaceBorderVariable(Output.of(tunnelInterfaceBorderVariable));
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
         * `carrier7`, `carrier8` - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(@Nullable Output<String> tunnelInterfaceCarrier) {
            $.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
         * `carrier7`, `carrier8` - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            return tunnelInterfaceCarrier(Output.of(tunnelInterfaceCarrier));
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(@Nullable Output<String> tunnelInterfaceCarrierVariable) {
            $.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            return tunnelInterfaceCarrierVariable(Output.of(tunnelInterfaceCarrierVariable));
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(@Nullable Output<Boolean> tunnelInterfaceClearDontFragment) {
            $.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            return tunnelInterfaceClearDontFragment(Output.of(tunnelInterfaceClearDontFragment));
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(@Nullable Output<String> tunnelInterfaceClearDontFragmentVariable) {
            $.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            return tunnelInterfaceClearDontFragmentVariable(Output.of(tunnelInterfaceClearDontFragmentVariable));
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
         * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
         * `private4`, `private5`, `private6` - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(@Nullable Output<String> tunnelInterfaceColor) {
            $.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
         * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
         * `private4`, `private5`, `private6` - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            return tunnelInterfaceColor(Output.of(tunnelInterfaceColor));
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(@Nullable Output<String> tunnelInterfaceColorVariable) {
            $.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            return tunnelInterfaceColorVariable(Output.of(tunnelInterfaceColorVariable));
        }

        /**
         * @param tunnelInterfaceControlConnections Set the maximum number of control connections for this TLOC - Range: `0`-`8`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnections(@Nullable Output<Integer> tunnelInterfaceControlConnections) {
            $.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            return this;
        }

        /**
         * @param tunnelInterfaceControlConnections Set the maximum number of control connections for this TLOC - Range: `0`-`8`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnections(Integer tunnelInterfaceControlConnections) {
            return tunnelInterfaceControlConnections(Output.of(tunnelInterfaceControlConnections));
        }

        /**
         * @param tunnelInterfaceControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnectionsVariable(@Nullable Output<String> tunnelInterfaceControlConnectionsVariable) {
            $.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnectionsVariable(String tunnelInterfaceControlConnectionsVariable) {
            return tunnelInterfaceControlConnectionsVariable(Output.of(tunnelInterfaceControlConnectionsVariable));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(@Nullable Output<List<VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations) {
            $.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(List<VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs> tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(Output.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(VpnInterfaceT1E1SerialFeatureTemplateTunnelInterfaceEncapsulationArgs... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(@Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable) {
            $.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            return tunnelInterfaceExcludeControllerGroupListVariable(Output.of(tunnelInterfaceExcludeControllerGroupListVariable));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(@Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists) {
            $.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(Output.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(@Nullable Output<List<Integer>> tunnelInterfaceGroups) {
            $.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(List<Integer> tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(Output.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(Integer... tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(List.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(@Nullable Output<String> tunnelInterfaceGroupsVariable) {
            $.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            return tunnelInterfaceGroupsVariable(Output.of(tunnelInterfaceGroupsVariable));
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(@Nullable Output<Integer> tunnelInterfaceHelloInterval) {
            $.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            return tunnelInterfaceHelloInterval(Output.of(tunnelInterfaceHelloInterval));
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(@Nullable Output<String> tunnelInterfaceHelloIntervalVariable) {
            $.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            return tunnelInterfaceHelloIntervalVariable(Output.of(tunnelInterfaceHelloIntervalVariable));
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(@Nullable Output<Integer> tunnelInterfaceHelloTolerance) {
            $.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            return tunnelInterfaceHelloTolerance(Output.of(tunnelInterfaceHelloTolerance));
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(@Nullable Output<String> tunnelInterfaceHelloToleranceVariable) {
            $.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            return tunnelInterfaceHelloToleranceVariable(Output.of(tunnelInterfaceHelloToleranceVariable));
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(@Nullable Output<Boolean> tunnelInterfaceLastResortCircuit) {
            $.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            return tunnelInterfaceLastResortCircuit(Output.of(tunnelInterfaceLastResortCircuit));
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(@Nullable Output<String> tunnelInterfaceLastResortCircuitVariable) {
            $.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            return tunnelInterfaceLastResortCircuitVariable(Output.of(tunnelInterfaceLastResortCircuitVariable));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(@Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink) {
            $.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            return tunnelInterfaceLowBandwidthLink(Output.of(tunnelInterfaceLowBandwidthLink));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(@Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable) {
            $.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            return tunnelInterfaceLowBandwidthLinkVariable(Output.of(tunnelInterfaceLowBandwidthLinkVariable));
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(@Nullable Output<Integer> tunnelInterfaceNatRefreshInterval) {
            $.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            return tunnelInterfaceNatRefreshInterval(Output.of(tunnelInterfaceNatRefreshInterval));
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(@Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable) {
            $.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            return tunnelInterfaceNatRefreshIntervalVariable(Output.of(tunnelInterfaceNatRefreshIntervalVariable));
        }

        /**
         * @param tunnelInterfaceNetworkBroadcast Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcast(@Nullable Output<Boolean> tunnelInterfaceNetworkBroadcast) {
            $.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            return this;
        }

        /**
         * @param tunnelInterfaceNetworkBroadcast Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcast(Boolean tunnelInterfaceNetworkBroadcast) {
            return tunnelInterfaceNetworkBroadcast(Output.of(tunnelInterfaceNetworkBroadcast));
        }

        /**
         * @param tunnelInterfaceNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcastVariable(@Nullable Output<String> tunnelInterfaceNetworkBroadcastVariable) {
            $.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcastVariable(String tunnelInterfaceNetworkBroadcastVariable) {
            return tunnelInterfaceNetworkBroadcastVariable(Output.of(tunnelInterfaceNetworkBroadcastVariable));
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(@Nullable Output<Boolean> tunnelInterfacePortHop) {
            $.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            return tunnelInterfacePortHop(Output.of(tunnelInterfacePortHop));
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(@Nullable Output<String> tunnelInterfacePortHopVariable) {
            $.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            return tunnelInterfacePortHopVariable(Output.of(tunnelInterfacePortHopVariable));
        }

        /**
         * @param tunnelInterfaceRestrict Restrict this TLOC behavior - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrict(@Nullable Output<Boolean> tunnelInterfaceRestrict) {
            $.tunnelInterfaceRestrict = tunnelInterfaceRestrict;
            return this;
        }

        /**
         * @param tunnelInterfaceRestrict Restrict this TLOC behavior - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrict(Boolean tunnelInterfaceRestrict) {
            return tunnelInterfaceRestrict(Output.of(tunnelInterfaceRestrict));
        }

        /**
         * @param tunnelInterfaceRestrictVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrictVariable(@Nullable Output<String> tunnelInterfaceRestrictVariable) {
            $.tunnelInterfaceRestrictVariable = tunnelInterfaceRestrictVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceRestrictVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceRestrictVariable(String tunnelInterfaceRestrictVariable) {
            return tunnelInterfaceRestrictVariable(Output.of(tunnelInterfaceRestrictVariable));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(@Nullable Output<Integer> tunnelInterfaceTunnelTcpMss) {
            $.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            return tunnelInterfaceTunnelTcpMss(Output.of(tunnelInterfaceTunnelTcpMss));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(@Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable) {
            $.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            return tunnelInterfaceTunnelTcpMssVariable(Output.of(tunnelInterfaceTunnelTcpMssVariable));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(@Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer) {
            $.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            return tunnelInterfaceVbondAsStunServer(Output.of(tunnelInterfaceVbondAsStunServer));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(@Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable) {
            $.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            return tunnelInterfaceVbondAsStunServerVariable(Output.of(tunnelInterfaceVbondAsStunServerVariable));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(@Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference) {
            $.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            return tunnelInterfaceVmanageConnectionPreference(Output.of(tunnelInterfaceVmanageConnectionPreference));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(@Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable) {
            $.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            return tunnelInterfaceVmanageConnectionPreferenceVariable(Output.of(tunnelInterfaceVmanageConnectionPreferenceVariable));
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode - Choices: `spoke`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(@Nullable Output<String> tunnelQosMode) {
            $.tunnelQosMode = tunnelQosMode;
            return this;
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode - Choices: `spoke`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(String tunnelQosMode) {
            return tunnelQosMode(Output.of(tunnelQosMode));
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(@Nullable Output<String> tunnelQosModeVariable) {
            $.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            return tunnelQosModeVariable(Output.of(tunnelQosModeVariable));
        }

        /**
         * @param writeRule Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder writeRule(@Nullable Output<String> writeRule) {
            $.writeRule = writeRule;
            return this;
        }

        /**
         * @param writeRule Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder writeRule(String writeRule) {
            return writeRule(Output.of(writeRule));
        }

        /**
         * @param writeRuleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder writeRuleVariable(@Nullable Output<String> writeRuleVariable) {
            $.writeRuleVariable = writeRuleVariable;
            return this;
        }

        /**
         * @param writeRuleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder writeRuleVariable(String writeRuleVariable) {
            return writeRuleVariable(Output.of(writeRuleVariable));
        }

        public VpnInterfaceT1E1SerialFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("VpnInterfaceT1E1SerialFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("VpnInterfaceT1E1SerialFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
