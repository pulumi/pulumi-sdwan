// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceTrackerFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceTrackerFeatureArgs Empty = new ServiceTrackerFeatureArgs();

    /**
     * The description of the Feature
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * API url of endpoint
     * 
     */
    @Import(name="endpointApiUrl")
    private @Nullable Output<String> endpointApiUrl;

    /**
     * @return API url of endpoint
     * 
     */
    public Optional<Output<String>> endpointApiUrl() {
        return Optional.ofNullable(this.endpointApiUrl);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointApiUrlVariable")
    private @Nullable Output<String> endpointApiUrlVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointApiUrlVariable() {
        return Optional.ofNullable(this.endpointApiUrlVariable);
    }

    /**
     * Endpoint DNS Name
     * 
     */
    @Import(name="endpointDnsName")
    private @Nullable Output<String> endpointDnsName;

    /**
     * @return Endpoint DNS Name
     * 
     */
    public Optional<Output<String>> endpointDnsName() {
        return Optional.ofNullable(this.endpointDnsName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointDnsNameVariable")
    private @Nullable Output<String> endpointDnsNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointDnsNameVariable() {
        return Optional.ofNullable(this.endpointDnsNameVariable);
    }

    /**
     * Endpoint IP
     * 
     */
    @Import(name="endpointIp")
    private @Nullable Output<String> endpointIp;

    /**
     * @return Endpoint IP
     * 
     */
    public Optional<Output<String>> endpointIp() {
        return Optional.ofNullable(this.endpointIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointIpVariable")
    private @Nullable Output<String> endpointIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointIpVariable() {
        return Optional.ofNullable(this.endpointIpVariable);
    }

    /**
     * Endpoint Tracker Type - Choices: `static-route` - Default value: `static-route`
     * 
     */
    @Import(name="endpointTrackerType")
    private @Nullable Output<String> endpointTrackerType;

    /**
     * @return Endpoint Tracker Type - Choices: `static-route` - Default value: `static-route`
     * 
     */
    public Optional<Output<String>> endpointTrackerType() {
        return Optional.ofNullable(this.endpointTrackerType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointTrackerTypeVariable")
    private @Nullable Output<String> endpointTrackerTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointTrackerTypeVariable() {
        return Optional.ofNullable(this.endpointTrackerTypeVariable);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId", required=true)
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }

    /**
     * Interval - Range: `20`-`600` - Default value: `60`
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return Interval - Range: `20`-`600` - Default value: `60`
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="intervalVariable")
    private @Nullable Output<String> intervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> intervalVariable() {
        return Optional.ofNullable(this.intervalVariable);
    }

    /**
     * Multiplier - Range: `1`-`10` - Default value: `3`
     * 
     */
    @Import(name="multiplier")
    private @Nullable Output<Integer> multiplier;

    /**
     * @return Multiplier - Range: `1`-`10` - Default value: `3`
     * 
     */
    public Optional<Output<Integer>> multiplier() {
        return Optional.ofNullable(this.multiplier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="multiplierVariable")
    private @Nullable Output<String> multiplierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> multiplierVariable() {
        return Optional.ofNullable(this.multiplierVariable);
    }

    /**
     * The name of the Feature
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * - Range: `1`-`65535`
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="portVariable")
    private @Nullable Output<String> portVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> portVariable() {
        return Optional.ofNullable(this.portVariable);
    }

    /**
     * - Choices: `tcp`, `udp`
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return - Choices: `tcp`, `udp`
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="protocolVariable")
    private @Nullable Output<String> protocolVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> protocolVariable() {
        return Optional.ofNullable(this.protocolVariable);
    }

    /**
     * Threshold - Range: `100`-`1000` - Default value: `300`
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return Threshold - Range: `100`-`1000` - Default value: `300`
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="thresholdVariable")
    private @Nullable Output<String> thresholdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> thresholdVariable() {
        return Optional.ofNullable(this.thresholdVariable);
    }

    /**
     * Tracker Name
     * 
     */
    @Import(name="trackerName")
    private @Nullable Output<String> trackerName;

    /**
     * @return Tracker Name
     * 
     */
    public Optional<Output<String>> trackerName() {
        return Optional.ofNullable(this.trackerName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerNameVariable")
    private @Nullable Output<String> trackerNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerNameVariable() {
        return Optional.ofNullable(this.trackerNameVariable);
    }

    /**
     * Tracker Type - Choices: `endpoint` - Default value: `endpoint`
     * 
     */
    @Import(name="trackerType")
    private @Nullable Output<String> trackerType;

    /**
     * @return Tracker Type - Choices: `endpoint` - Default value: `endpoint`
     * 
     */
    public Optional<Output<String>> trackerType() {
        return Optional.ofNullable(this.trackerType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerTypeVariable")
    private @Nullable Output<String> trackerTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerTypeVariable() {
        return Optional.ofNullable(this.trackerTypeVariable);
    }

    private ServiceTrackerFeatureArgs() {}

    private ServiceTrackerFeatureArgs(ServiceTrackerFeatureArgs $) {
        this.description = $.description;
        this.endpointApiUrl = $.endpointApiUrl;
        this.endpointApiUrlVariable = $.endpointApiUrlVariable;
        this.endpointDnsName = $.endpointDnsName;
        this.endpointDnsNameVariable = $.endpointDnsNameVariable;
        this.endpointIp = $.endpointIp;
        this.endpointIpVariable = $.endpointIpVariable;
        this.endpointTrackerType = $.endpointTrackerType;
        this.endpointTrackerTypeVariable = $.endpointTrackerTypeVariable;
        this.featureProfileId = $.featureProfileId;
        this.interval = $.interval;
        this.intervalVariable = $.intervalVariable;
        this.multiplier = $.multiplier;
        this.multiplierVariable = $.multiplierVariable;
        this.name = $.name;
        this.port = $.port;
        this.portVariable = $.portVariable;
        this.protocol = $.protocol;
        this.protocolVariable = $.protocolVariable;
        this.threshold = $.threshold;
        this.thresholdVariable = $.thresholdVariable;
        this.trackerName = $.trackerName;
        this.trackerNameVariable = $.trackerNameVariable;
        this.trackerType = $.trackerType;
        this.trackerTypeVariable = $.trackerTypeVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceTrackerFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceTrackerFeatureArgs $;

        public Builder() {
            $ = new ServiceTrackerFeatureArgs();
        }

        public Builder(ServiceTrackerFeatureArgs defaults) {
            $ = new ServiceTrackerFeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param endpointApiUrl API url of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrl(@Nullable Output<String> endpointApiUrl) {
            $.endpointApiUrl = endpointApiUrl;
            return this;
        }

        /**
         * @param endpointApiUrl API url of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrl(String endpointApiUrl) {
            return endpointApiUrl(Output.of(endpointApiUrl));
        }

        /**
         * @param endpointApiUrlVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrlVariable(@Nullable Output<String> endpointApiUrlVariable) {
            $.endpointApiUrlVariable = endpointApiUrlVariable;
            return this;
        }

        /**
         * @param endpointApiUrlVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrlVariable(String endpointApiUrlVariable) {
            return endpointApiUrlVariable(Output.of(endpointApiUrlVariable));
        }

        /**
         * @param endpointDnsName Endpoint DNS Name
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsName(@Nullable Output<String> endpointDnsName) {
            $.endpointDnsName = endpointDnsName;
            return this;
        }

        /**
         * @param endpointDnsName Endpoint DNS Name
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsName(String endpointDnsName) {
            return endpointDnsName(Output.of(endpointDnsName));
        }

        /**
         * @param endpointDnsNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsNameVariable(@Nullable Output<String> endpointDnsNameVariable) {
            $.endpointDnsNameVariable = endpointDnsNameVariable;
            return this;
        }

        /**
         * @param endpointDnsNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsNameVariable(String endpointDnsNameVariable) {
            return endpointDnsNameVariable(Output.of(endpointDnsNameVariable));
        }

        /**
         * @param endpointIp Endpoint IP
         * 
         * @return builder
         * 
         */
        public Builder endpointIp(@Nullable Output<String> endpointIp) {
            $.endpointIp = endpointIp;
            return this;
        }

        /**
         * @param endpointIp Endpoint IP
         * 
         * @return builder
         * 
         */
        public Builder endpointIp(String endpointIp) {
            return endpointIp(Output.of(endpointIp));
        }

        /**
         * @param endpointIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointIpVariable(@Nullable Output<String> endpointIpVariable) {
            $.endpointIpVariable = endpointIpVariable;
            return this;
        }

        /**
         * @param endpointIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointIpVariable(String endpointIpVariable) {
            return endpointIpVariable(Output.of(endpointIpVariable));
        }

        /**
         * @param endpointTrackerType Endpoint Tracker Type - Choices: `static-route` - Default value: `static-route`
         * 
         * @return builder
         * 
         */
        public Builder endpointTrackerType(@Nullable Output<String> endpointTrackerType) {
            $.endpointTrackerType = endpointTrackerType;
            return this;
        }

        /**
         * @param endpointTrackerType Endpoint Tracker Type - Choices: `static-route` - Default value: `static-route`
         * 
         * @return builder
         * 
         */
        public Builder endpointTrackerType(String endpointTrackerType) {
            return endpointTrackerType(Output.of(endpointTrackerType));
        }

        /**
         * @param endpointTrackerTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointTrackerTypeVariable(@Nullable Output<String> endpointTrackerTypeVariable) {
            $.endpointTrackerTypeVariable = endpointTrackerTypeVariable;
            return this;
        }

        /**
         * @param endpointTrackerTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointTrackerTypeVariable(String endpointTrackerTypeVariable) {
            return endpointTrackerTypeVariable(Output.of(endpointTrackerTypeVariable));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param interval Interval - Range: `20`-`600` - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Interval - Range: `20`-`600` - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param intervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder intervalVariable(@Nullable Output<String> intervalVariable) {
            $.intervalVariable = intervalVariable;
            return this;
        }

        /**
         * @param intervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder intervalVariable(String intervalVariable) {
            return intervalVariable(Output.of(intervalVariable));
        }

        /**
         * @param multiplier Multiplier - Range: `1`-`10` - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder multiplier(@Nullable Output<Integer> multiplier) {
            $.multiplier = multiplier;
            return this;
        }

        /**
         * @param multiplier Multiplier - Range: `1`-`10` - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder multiplier(Integer multiplier) {
            return multiplier(Output.of(multiplier));
        }

        /**
         * @param multiplierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiplierVariable(@Nullable Output<String> multiplierVariable) {
            $.multiplierVariable = multiplierVariable;
            return this;
        }

        /**
         * @param multiplierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiplierVariable(String multiplierVariable) {
            return multiplierVariable(Output.of(multiplierVariable));
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param portVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder portVariable(@Nullable Output<String> portVariable) {
            $.portVariable = portVariable;
            return this;
        }

        /**
         * @param portVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder portVariable(String portVariable) {
            return portVariable(Output.of(portVariable));
        }

        /**
         * @param protocol - Choices: `tcp`, `udp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol - Choices: `tcp`, `udp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param protocolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder protocolVariable(@Nullable Output<String> protocolVariable) {
            $.protocolVariable = protocolVariable;
            return this;
        }

        /**
         * @param protocolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder protocolVariable(String protocolVariable) {
            return protocolVariable(Output.of(protocolVariable));
        }

        /**
         * @param threshold Threshold - Range: `100`-`1000` - Default value: `300`
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Threshold - Range: `100`-`1000` - Default value: `300`
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param thresholdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder thresholdVariable(@Nullable Output<String> thresholdVariable) {
            $.thresholdVariable = thresholdVariable;
            return this;
        }

        /**
         * @param thresholdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder thresholdVariable(String thresholdVariable) {
            return thresholdVariable(Output.of(thresholdVariable));
        }

        /**
         * @param trackerName Tracker Name
         * 
         * @return builder
         * 
         */
        public Builder trackerName(@Nullable Output<String> trackerName) {
            $.trackerName = trackerName;
            return this;
        }

        /**
         * @param trackerName Tracker Name
         * 
         * @return builder
         * 
         */
        public Builder trackerName(String trackerName) {
            return trackerName(Output.of(trackerName));
        }

        /**
         * @param trackerNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerNameVariable(@Nullable Output<String> trackerNameVariable) {
            $.trackerNameVariable = trackerNameVariable;
            return this;
        }

        /**
         * @param trackerNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerNameVariable(String trackerNameVariable) {
            return trackerNameVariable(Output.of(trackerNameVariable));
        }

        /**
         * @param trackerType Tracker Type - Choices: `endpoint` - Default value: `endpoint`
         * 
         * @return builder
         * 
         */
        public Builder trackerType(@Nullable Output<String> trackerType) {
            $.trackerType = trackerType;
            return this;
        }

        /**
         * @param trackerType Tracker Type - Choices: `endpoint` - Default value: `endpoint`
         * 
         * @return builder
         * 
         */
        public Builder trackerType(String trackerType) {
            return trackerType(Output.of(trackerType));
        }

        /**
         * @param trackerTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerTypeVariable(@Nullable Output<String> trackerTypeVariable) {
            $.trackerTypeVariable = trackerTypeVariable;
            return this;
        }

        /**
         * @param trackerTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerTypeVariable(String trackerTypeVariable) {
            return trackerTypeVariable(Output.of(trackerTypeVariable));
        }

        public ServiceTrackerFeatureArgs build() {
            if ($.featureProfileId == null) {
                throw new MissingRequiredPropertyException("ServiceTrackerFeatureArgs", "featureProfileId");
            }
            return $;
        }
    }

}
