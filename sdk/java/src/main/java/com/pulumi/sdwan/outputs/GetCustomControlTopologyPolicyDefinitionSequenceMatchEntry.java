// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry {
    /**
     * @return Carrier
     * 
     */
    private String carrier;
    /**
     * @return Color list ID
     * 
     */
    private String colorListId;
    /**
     * @return Color list version
     * 
     */
    private Integer colorListVersion;
    /**
     * @return Community list ID
     * 
     */
    private String communityListId;
    /**
     * @return Community list version
     * 
     */
    private Integer communityListVersion;
    /**
     * @return Domain ID
     * 
     */
    private Integer domainId;
    /**
     * @return Expanded community list ID
     * 
     */
    private String expandedCommunityListId;
    /**
     * @return Expanded community list version
     * 
     */
    private Integer expandedCommunityListVersion;
    /**
     * @return Group ID
     * 
     */
    private Integer groupId;
    /**
     * @return OMP tag
     * 
     */
    private Integer ompTag;
    /**
     * @return Origin
     * 
     */
    private String origin;
    /**
     * @return Originator IP
     * 
     */
    private String originator;
    /**
     * @return Path type
     * 
     */
    private String pathType;
    /**
     * @return Preference
     * 
     */
    private Integer preference;
    /**
     * @return Prefix list ID
     * 
     */
    private String prefixListId;
    /**
     * @return Prefix list version
     * 
     */
    private Integer prefixListVersion;
    /**
     * @return Site ID
     * 
     */
    private Integer siteId;
    /**
     * @return Site list ID
     * 
     */
    private String siteListId;
    /**
     * @return Site list version
     * 
     */
    private Integer siteListVersion;
    /**
     * @return TLOC color
     * 
     */
    private String tlocColor;
    /**
     * @return TLOC encapsulation
     * 
     */
    private String tlocEncapsulation;
    /**
     * @return TLOC IP address
     * 
     */
    private String tlocIp;
    /**
     * @return TLOC list ID
     * 
     */
    private String tlocListId;
    /**
     * @return TLOC list version
     * 
     */
    private Integer tlocListVersion;
    /**
     * @return Type of match entry
     * 
     */
    private String type;
    /**
     * @return VPN ID
     * 
     */
    private Integer vpnId;
    /**
     * @return VPN list ID
     * 
     */
    private String vpnListId;
    /**
     * @return VPN list version
     * 
     */
    private Integer vpnListVersion;

    private GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry() {}
    /**
     * @return Carrier
     * 
     */
    public String carrier() {
        return this.carrier;
    }
    /**
     * @return Color list ID
     * 
     */
    public String colorListId() {
        return this.colorListId;
    }
    /**
     * @return Color list version
     * 
     */
    public Integer colorListVersion() {
        return this.colorListVersion;
    }
    /**
     * @return Community list ID
     * 
     */
    public String communityListId() {
        return this.communityListId;
    }
    /**
     * @return Community list version
     * 
     */
    public Integer communityListVersion() {
        return this.communityListVersion;
    }
    /**
     * @return Domain ID
     * 
     */
    public Integer domainId() {
        return this.domainId;
    }
    /**
     * @return Expanded community list ID
     * 
     */
    public String expandedCommunityListId() {
        return this.expandedCommunityListId;
    }
    /**
     * @return Expanded community list version
     * 
     */
    public Integer expandedCommunityListVersion() {
        return this.expandedCommunityListVersion;
    }
    /**
     * @return Group ID
     * 
     */
    public Integer groupId() {
        return this.groupId;
    }
    /**
     * @return OMP tag
     * 
     */
    public Integer ompTag() {
        return this.ompTag;
    }
    /**
     * @return Origin
     * 
     */
    public String origin() {
        return this.origin;
    }
    /**
     * @return Originator IP
     * 
     */
    public String originator() {
        return this.originator;
    }
    /**
     * @return Path type
     * 
     */
    public String pathType() {
        return this.pathType;
    }
    /**
     * @return Preference
     * 
     */
    public Integer preference() {
        return this.preference;
    }
    /**
     * @return Prefix list ID
     * 
     */
    public String prefixListId() {
        return this.prefixListId;
    }
    /**
     * @return Prefix list version
     * 
     */
    public Integer prefixListVersion() {
        return this.prefixListVersion;
    }
    /**
     * @return Site ID
     * 
     */
    public Integer siteId() {
        return this.siteId;
    }
    /**
     * @return Site list ID
     * 
     */
    public String siteListId() {
        return this.siteListId;
    }
    /**
     * @return Site list version
     * 
     */
    public Integer siteListVersion() {
        return this.siteListVersion;
    }
    /**
     * @return TLOC color
     * 
     */
    public String tlocColor() {
        return this.tlocColor;
    }
    /**
     * @return TLOC encapsulation
     * 
     */
    public String tlocEncapsulation() {
        return this.tlocEncapsulation;
    }
    /**
     * @return TLOC IP address
     * 
     */
    public String tlocIp() {
        return this.tlocIp;
    }
    /**
     * @return TLOC list ID
     * 
     */
    public String tlocListId() {
        return this.tlocListId;
    }
    /**
     * @return TLOC list version
     * 
     */
    public Integer tlocListVersion() {
        return this.tlocListVersion;
    }
    /**
     * @return Type of match entry
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return VPN ID
     * 
     */
    public Integer vpnId() {
        return this.vpnId;
    }
    /**
     * @return VPN list ID
     * 
     */
    public String vpnListId() {
        return this.vpnListId;
    }
    /**
     * @return VPN list version
     * 
     */
    public Integer vpnListVersion() {
        return this.vpnListVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String carrier;
        private String colorListId;
        private Integer colorListVersion;
        private String communityListId;
        private Integer communityListVersion;
        private Integer domainId;
        private String expandedCommunityListId;
        private Integer expandedCommunityListVersion;
        private Integer groupId;
        private Integer ompTag;
        private String origin;
        private String originator;
        private String pathType;
        private Integer preference;
        private String prefixListId;
        private Integer prefixListVersion;
        private Integer siteId;
        private String siteListId;
        private Integer siteListVersion;
        private String tlocColor;
        private String tlocEncapsulation;
        private String tlocIp;
        private String tlocListId;
        private Integer tlocListVersion;
        private String type;
        private Integer vpnId;
        private String vpnListId;
        private Integer vpnListVersion;
        public Builder() {}
        public Builder(GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.carrier = defaults.carrier;
    	      this.colorListId = defaults.colorListId;
    	      this.colorListVersion = defaults.colorListVersion;
    	      this.communityListId = defaults.communityListId;
    	      this.communityListVersion = defaults.communityListVersion;
    	      this.domainId = defaults.domainId;
    	      this.expandedCommunityListId = defaults.expandedCommunityListId;
    	      this.expandedCommunityListVersion = defaults.expandedCommunityListVersion;
    	      this.groupId = defaults.groupId;
    	      this.ompTag = defaults.ompTag;
    	      this.origin = defaults.origin;
    	      this.originator = defaults.originator;
    	      this.pathType = defaults.pathType;
    	      this.preference = defaults.preference;
    	      this.prefixListId = defaults.prefixListId;
    	      this.prefixListVersion = defaults.prefixListVersion;
    	      this.siteId = defaults.siteId;
    	      this.siteListId = defaults.siteListId;
    	      this.siteListVersion = defaults.siteListVersion;
    	      this.tlocColor = defaults.tlocColor;
    	      this.tlocEncapsulation = defaults.tlocEncapsulation;
    	      this.tlocIp = defaults.tlocIp;
    	      this.tlocListId = defaults.tlocListId;
    	      this.tlocListVersion = defaults.tlocListVersion;
    	      this.type = defaults.type;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnListId = defaults.vpnListId;
    	      this.vpnListVersion = defaults.vpnListVersion;
        }

        @CustomType.Setter
        public Builder carrier(String carrier) {
            if (carrier == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "carrier");
            }
            this.carrier = carrier;
            return this;
        }
        @CustomType.Setter
        public Builder colorListId(String colorListId) {
            if (colorListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "colorListId");
            }
            this.colorListId = colorListId;
            return this;
        }
        @CustomType.Setter
        public Builder colorListVersion(Integer colorListVersion) {
            if (colorListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "colorListVersion");
            }
            this.colorListVersion = colorListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder communityListId(String communityListId) {
            if (communityListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "communityListId");
            }
            this.communityListId = communityListId;
            return this;
        }
        @CustomType.Setter
        public Builder communityListVersion(Integer communityListVersion) {
            if (communityListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "communityListVersion");
            }
            this.communityListVersion = communityListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder domainId(Integer domainId) {
            if (domainId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "domainId");
            }
            this.domainId = domainId;
            return this;
        }
        @CustomType.Setter
        public Builder expandedCommunityListId(String expandedCommunityListId) {
            if (expandedCommunityListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "expandedCommunityListId");
            }
            this.expandedCommunityListId = expandedCommunityListId;
            return this;
        }
        @CustomType.Setter
        public Builder expandedCommunityListVersion(Integer expandedCommunityListVersion) {
            if (expandedCommunityListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "expandedCommunityListVersion");
            }
            this.expandedCommunityListVersion = expandedCommunityListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder groupId(Integer groupId) {
            if (groupId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "groupId");
            }
            this.groupId = groupId;
            return this;
        }
        @CustomType.Setter
        public Builder ompTag(Integer ompTag) {
            if (ompTag == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "ompTag");
            }
            this.ompTag = ompTag;
            return this;
        }
        @CustomType.Setter
        public Builder origin(String origin) {
            if (origin == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "origin");
            }
            this.origin = origin;
            return this;
        }
        @CustomType.Setter
        public Builder originator(String originator) {
            if (originator == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "originator");
            }
            this.originator = originator;
            return this;
        }
        @CustomType.Setter
        public Builder pathType(String pathType) {
            if (pathType == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "pathType");
            }
            this.pathType = pathType;
            return this;
        }
        @CustomType.Setter
        public Builder preference(Integer preference) {
            if (preference == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "preference");
            }
            this.preference = preference;
            return this;
        }
        @CustomType.Setter
        public Builder prefixListId(String prefixListId) {
            if (prefixListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "prefixListId");
            }
            this.prefixListId = prefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder prefixListVersion(Integer prefixListVersion) {
            if (prefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "prefixListVersion");
            }
            this.prefixListVersion = prefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(Integer siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder siteListId(String siteListId) {
            if (siteListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "siteListId");
            }
            this.siteListId = siteListId;
            return this;
        }
        @CustomType.Setter
        public Builder siteListVersion(Integer siteListVersion) {
            if (siteListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "siteListVersion");
            }
            this.siteListVersion = siteListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder tlocColor(String tlocColor) {
            if (tlocColor == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "tlocColor");
            }
            this.tlocColor = tlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder tlocEncapsulation(String tlocEncapsulation) {
            if (tlocEncapsulation == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "tlocEncapsulation");
            }
            this.tlocEncapsulation = tlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder tlocIp(String tlocIp) {
            if (tlocIp == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "tlocIp");
            }
            this.tlocIp = tlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListId(String tlocListId) {
            if (tlocListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "tlocListId");
            }
            this.tlocListId = tlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListVersion(Integer tlocListVersion) {
            if (tlocListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "tlocListVersion");
            }
            this.tlocListVersion = tlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(Integer vpnId) {
            if (vpnId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "vpnId");
            }
            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnListId(String vpnListId) {
            if (vpnListId == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "vpnListId");
            }
            this.vpnListId = vpnListId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnListVersion(Integer vpnListVersion) {
            if (vpnListVersion == null) {
              throw new MissingRequiredPropertyException("GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry", "vpnListVersion");
            }
            this.vpnListVersion = vpnListVersion;
            return this;
        }
        public GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry build() {
            final var _resultValue = new GetCustomControlTopologyPolicyDefinitionSequenceMatchEntry();
            _resultValue.carrier = carrier;
            _resultValue.colorListId = colorListId;
            _resultValue.colorListVersion = colorListVersion;
            _resultValue.communityListId = communityListId;
            _resultValue.communityListVersion = communityListVersion;
            _resultValue.domainId = domainId;
            _resultValue.expandedCommunityListId = expandedCommunityListId;
            _resultValue.expandedCommunityListVersion = expandedCommunityListVersion;
            _resultValue.groupId = groupId;
            _resultValue.ompTag = ompTag;
            _resultValue.origin = origin;
            _resultValue.originator = originator;
            _resultValue.pathType = pathType;
            _resultValue.preference = preference;
            _resultValue.prefixListId = prefixListId;
            _resultValue.prefixListVersion = prefixListVersion;
            _resultValue.siteId = siteId;
            _resultValue.siteListId = siteListId;
            _resultValue.siteListVersion = siteListVersion;
            _resultValue.tlocColor = tlocColor;
            _resultValue.tlocEncapsulation = tlocEncapsulation;
            _resultValue.tlocIp = tlocIp;
            _resultValue.tlocListId = tlocListId;
            _resultValue.tlocListVersion = tlocListVersion;
            _resultValue.type = type;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnListId = vpnListId;
            _resultValue.vpnListVersion = vpnListVersion;
            return _resultValue;
        }
    }
}
