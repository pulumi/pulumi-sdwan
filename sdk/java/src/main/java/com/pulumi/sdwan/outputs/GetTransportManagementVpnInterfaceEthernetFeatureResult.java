// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportManagementVpnInterfaceEthernetFeatureArpEntry;
import com.pulumi.sdwan.outputs.GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportManagementVpnInterfaceEthernetFeatureResult {
    /**
     * @return Configure ARP entries
     * 
     */
    private List<GetTransportManagementVpnInterfaceEthernetFeatureArpEntry> arpEntries;
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    private Integer arpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String arpTimeoutVariable;
    /**
     * @return Link autonegotiation
     * 
     */
    private Boolean autonegotiate;
    /**
     * @return Variable name
     * 
     */
    private String autonegotiateVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Duplex mode
     * 
     */
    private String duplex;
    /**
     * @return Variable name
     * 
     */
    private String duplexVariable;
    /**
     * @return Enable DHCPv6
     * 
     */
    private Boolean enableDhcpv6;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    private Boolean icmpRedirectDisable;
    /**
     * @return Variable name
     * 
     */
    private String icmpRedirectDisableVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface MTU
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return IP Address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return Interface auto detect bandwidth
     * 
     */
    private Boolean ipv4AutoDetectBandwidth;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AutoDetectBandwidthVariable;
    /**
     * @return DHCP Distance
     * 
     */
    private Integer ipv4DhcpDistance;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpDistanceVariable;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpHelperVariable;
    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    private List<String> ipv4DhcpHelpers;
    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    private String ipv4IperfServer;
    /**
     * @return Variable name
     * 
     */
    private String ipv4IperfServerVariable;
    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    private List<GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
    /**
     * @return Subnet Mask
     * 
     */
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return IPv6 Address Secondary
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return Interval for interface load calculation
     * 
     */
    private Integer loadInterval;
    /**
     * @return Variable name
     * 
     */
    private String loadIntervalVariable;
    /**
     * @return MAC Address
     * 
     */
    private String macAddress;
    /**
     * @return Variable name
     * 
     */
    private String macAddressVariable;
    /**
     * @return Media type
     * 
     */
    private String mediaType;
    /**
     * @return Variable name
     * 
     */
    private String mediaTypeVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Set interface speed
     * 
     */
    private String speed;
    /**
     * @return Variable name
     * 
     */
    private String speedVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Transport Management VPN Feature ID
     * 
     */
    private String transportManagementVpnFeatureId;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetTransportManagementVpnInterfaceEthernetFeatureResult() {}
    /**
     * @return Configure ARP entries
     * 
     */
    public List<GetTransportManagementVpnInterfaceEthernetFeatureArpEntry> arpEntries() {
        return this.arpEntries;
    }
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpTimeoutVariable() {
        return this.arpTimeoutVariable;
    }
    /**
     * @return Link autonegotiation
     * 
     */
    public Boolean autonegotiate() {
        return this.autonegotiate;
    }
    /**
     * @return Variable name
     * 
     */
    public String autonegotiateVariable() {
        return this.autonegotiateVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Duplex mode
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return Variable name
     * 
     */
    public String duplexVariable() {
        return this.duplexVariable;
    }
    /**
     * @return Enable DHCPv6
     * 
     */
    public Boolean enableDhcpv6() {
        return this.enableDhcpv6;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    public Boolean icmpRedirectDisable() {
        return this.icmpRedirectDisable;
    }
    /**
     * @return Variable name
     * 
     */
    public String icmpRedirectDisableVariable() {
        return this.icmpRedirectDisableVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface MTU
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return IP Address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return Interface auto detect bandwidth
     * 
     */
    public Boolean ipv4AutoDetectBandwidth() {
        return this.ipv4AutoDetectBandwidth;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AutoDetectBandwidthVariable() {
        return this.ipv4AutoDetectBandwidthVariable;
    }
    /**
     * @return DHCP Distance
     * 
     */
    public Integer ipv4DhcpDistance() {
        return this.ipv4DhcpDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpDistanceVariable() {
        return this.ipv4DhcpDistanceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpHelperVariable() {
        return this.ipv4DhcpHelperVariable;
    }
    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    public List<String> ipv4DhcpHelpers() {
        return this.ipv4DhcpHelpers;
    }
    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    public String ipv4IperfServer() {
        return this.ipv4IperfServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4IperfServerVariable() {
        return this.ipv4IperfServerVariable;
    }
    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    public List<GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses() {
        return this.ipv4SecondaryAddresses;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return IPv6 Address Secondary
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return Interval for interface load calculation
     * 
     */
    public Integer loadInterval() {
        return this.loadInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String loadIntervalVariable() {
        return this.loadIntervalVariable;
    }
    /**
     * @return MAC Address
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String macAddressVariable() {
        return this.macAddressVariable;
    }
    /**
     * @return Media type
     * 
     */
    public String mediaType() {
        return this.mediaType;
    }
    /**
     * @return Variable name
     * 
     */
    public String mediaTypeVariable() {
        return this.mediaTypeVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Set interface speed
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Variable name
     * 
     */
    public String speedVariable() {
        return this.speedVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Transport Management VPN Feature ID
     * 
     */
    public String transportManagementVpnFeatureId() {
        return this.transportManagementVpnFeatureId;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportManagementVpnInterfaceEthernetFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetTransportManagementVpnInterfaceEthernetFeatureArpEntry> arpEntries;
        private Integer arpTimeout;
        private String arpTimeoutVariable;
        private Boolean autonegotiate;
        private String autonegotiateVariable;
        private String description;
        private String duplex;
        private String duplexVariable;
        private Boolean enableDhcpv6;
        private String featureProfileId;
        private Boolean icmpRedirectDisable;
        private String icmpRedirectDisableVariable;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private Boolean ipv4AutoDetectBandwidth;
        private String ipv4AutoDetectBandwidthVariable;
        private Integer ipv4DhcpDistance;
        private String ipv4DhcpDistanceVariable;
        private String ipv4DhcpHelperVariable;
        private List<String> ipv4DhcpHelpers;
        private String ipv4IperfServer;
        private String ipv4IperfServerVariable;
        private List<GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private Integer loadInterval;
        private String loadIntervalVariable;
        private String macAddress;
        private String macAddressVariable;
        private String mediaType;
        private String mediaTypeVariable;
        private String name;
        private Boolean shutdown;
        private String shutdownVariable;
        private String speed;
        private String speedVariable;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String transportManagementVpnFeatureId;
        private Integer version;
        public Builder() {}
        public Builder(GetTransportManagementVpnInterfaceEthernetFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arpEntries = defaults.arpEntries;
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.arpTimeoutVariable = defaults.arpTimeoutVariable;
    	      this.autonegotiate = defaults.autonegotiate;
    	      this.autonegotiateVariable = defaults.autonegotiateVariable;
    	      this.description = defaults.description;
    	      this.duplex = defaults.duplex;
    	      this.duplexVariable = defaults.duplexVariable;
    	      this.enableDhcpv6 = defaults.enableDhcpv6;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.icmpRedirectDisable = defaults.icmpRedirectDisable;
    	      this.icmpRedirectDisableVariable = defaults.icmpRedirectDisableVariable;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4AutoDetectBandwidth = defaults.ipv4AutoDetectBandwidth;
    	      this.ipv4AutoDetectBandwidthVariable = defaults.ipv4AutoDetectBandwidthVariable;
    	      this.ipv4DhcpDistance = defaults.ipv4DhcpDistance;
    	      this.ipv4DhcpDistanceVariable = defaults.ipv4DhcpDistanceVariable;
    	      this.ipv4DhcpHelperVariable = defaults.ipv4DhcpHelperVariable;
    	      this.ipv4DhcpHelpers = defaults.ipv4DhcpHelpers;
    	      this.ipv4IperfServer = defaults.ipv4IperfServer;
    	      this.ipv4IperfServerVariable = defaults.ipv4IperfServerVariable;
    	      this.ipv4SecondaryAddresses = defaults.ipv4SecondaryAddresses;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.loadInterval = defaults.loadInterval;
    	      this.loadIntervalVariable = defaults.loadIntervalVariable;
    	      this.macAddress = defaults.macAddress;
    	      this.macAddressVariable = defaults.macAddressVariable;
    	      this.mediaType = defaults.mediaType;
    	      this.mediaTypeVariable = defaults.mediaTypeVariable;
    	      this.name = defaults.name;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.speed = defaults.speed;
    	      this.speedVariable = defaults.speedVariable;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.transportManagementVpnFeatureId = defaults.transportManagementVpnFeatureId;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder arpEntries(List<GetTransportManagementVpnInterfaceEthernetFeatureArpEntry> arpEntries) {
            if (arpEntries == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "arpEntries");
            }
            this.arpEntries = arpEntries;
            return this;
        }
        public Builder arpEntries(GetTransportManagementVpnInterfaceEthernetFeatureArpEntry... arpEntries) {
            return arpEntries(List.of(arpEntries));
        }
        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            if (arpTimeout == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "arpTimeout");
            }
            this.arpTimeout = arpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            if (arpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "arpTimeoutVariable");
            }
            this.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiate(Boolean autonegotiate) {
            if (autonegotiate == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "autonegotiate");
            }
            this.autonegotiate = autonegotiate;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiateVariable(String autonegotiateVariable) {
            if (autonegotiateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "autonegotiateVariable");
            }
            this.autonegotiateVariable = autonegotiateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            if (duplex == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "duplex");
            }
            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder duplexVariable(String duplexVariable) {
            if (duplexVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "duplexVariable");
            }
            this.duplexVariable = duplexVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableDhcpv6(Boolean enableDhcpv6) {
            if (enableDhcpv6 == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "enableDhcpv6");
            }
            this.enableDhcpv6 = enableDhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisable(Boolean icmpRedirectDisable) {
            if (icmpRedirectDisable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "icmpRedirectDisable");
            }
            this.icmpRedirectDisable = icmpRedirectDisable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisableVariable(String icmpRedirectDisableVariable) {
            if (icmpRedirectDisableVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "icmpRedirectDisableVariable");
            }
            this.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AutoDetectBandwidth(Boolean ipv4AutoDetectBandwidth) {
            if (ipv4AutoDetectBandwidth == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4AutoDetectBandwidth");
            }
            this.ipv4AutoDetectBandwidth = ipv4AutoDetectBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AutoDetectBandwidthVariable(String ipv4AutoDetectBandwidthVariable) {
            if (ipv4AutoDetectBandwidthVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4AutoDetectBandwidthVariable");
            }
            this.ipv4AutoDetectBandwidthVariable = ipv4AutoDetectBandwidthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpDistance(Integer ipv4DhcpDistance) {
            if (ipv4DhcpDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4DhcpDistance");
            }
            this.ipv4DhcpDistance = ipv4DhcpDistance;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpDistanceVariable(String ipv4DhcpDistanceVariable) {
            if (ipv4DhcpDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4DhcpDistanceVariable");
            }
            this.ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelperVariable(String ipv4DhcpHelperVariable) {
            if (ipv4DhcpHelperVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4DhcpHelperVariable");
            }
            this.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            if (ipv4DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4DhcpHelpers");
            }
            this.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv4IperfServer(String ipv4IperfServer) {
            if (ipv4IperfServer == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4IperfServer");
            }
            this.ipv4IperfServer = ipv4IperfServer;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4IperfServerVariable(String ipv4IperfServerVariable) {
            if (ipv4IperfServerVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4IperfServerVariable");
            }
            this.ipv4IperfServerVariable = ipv4IperfServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SecondaryAddresses(List<GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses) {
            if (ipv4SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4SecondaryAddresses");
            }
            this.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }
        public Builder ipv4SecondaryAddresses(GetTransportManagementVpnInterfaceEthernetFeatureIpv4SecondaryAddress... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder loadInterval(Integer loadInterval) {
            if (loadInterval == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "loadInterval");
            }
            this.loadInterval = loadInterval;
            return this;
        }
        @CustomType.Setter
        public Builder loadIntervalVariable(String loadIntervalVariable) {
            if (loadIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "loadIntervalVariable");
            }
            this.loadIntervalVariable = loadIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder macAddressVariable(String macAddressVariable) {
            if (macAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "macAddressVariable");
            }
            this.macAddressVariable = macAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mediaType(String mediaType) {
            if (mediaType == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "mediaType");
            }
            this.mediaType = mediaType;
            return this;
        }
        @CustomType.Setter
        public Builder mediaTypeVariable(String mediaTypeVariable) {
            if (mediaTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "mediaTypeVariable");
            }
            this.mediaTypeVariable = mediaTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder speedVariable(String speedVariable) {
            if (speedVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "speedVariable");
            }
            this.speedVariable = speedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder transportManagementVpnFeatureId(String transportManagementVpnFeatureId) {
            if (transportManagementVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "transportManagementVpnFeatureId");
            }
            this.transportManagementVpnFeatureId = transportManagementVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportManagementVpnInterfaceEthernetFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetTransportManagementVpnInterfaceEthernetFeatureResult build() {
            final var _resultValue = new GetTransportManagementVpnInterfaceEthernetFeatureResult();
            _resultValue.arpEntries = arpEntries;
            _resultValue.arpTimeout = arpTimeout;
            _resultValue.arpTimeoutVariable = arpTimeoutVariable;
            _resultValue.autonegotiate = autonegotiate;
            _resultValue.autonegotiateVariable = autonegotiateVariable;
            _resultValue.description = description;
            _resultValue.duplex = duplex;
            _resultValue.duplexVariable = duplexVariable;
            _resultValue.enableDhcpv6 = enableDhcpv6;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.icmpRedirectDisable = icmpRedirectDisable;
            _resultValue.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4AutoDetectBandwidth = ipv4AutoDetectBandwidth;
            _resultValue.ipv4AutoDetectBandwidthVariable = ipv4AutoDetectBandwidthVariable;
            _resultValue.ipv4DhcpDistance = ipv4DhcpDistance;
            _resultValue.ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            _resultValue.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            _resultValue.ipv4DhcpHelpers = ipv4DhcpHelpers;
            _resultValue.ipv4IperfServer = ipv4IperfServer;
            _resultValue.ipv4IperfServerVariable = ipv4IperfServerVariable;
            _resultValue.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.loadInterval = loadInterval;
            _resultValue.loadIntervalVariable = loadIntervalVariable;
            _resultValue.macAddress = macAddress;
            _resultValue.macAddressVariable = macAddressVariable;
            _resultValue.mediaType = mediaType;
            _resultValue.mediaTypeVariable = mediaTypeVariable;
            _resultValue.name = name;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.speed = speed;
            _resultValue.speedVariable = speedVariable;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.transportManagementVpnFeatureId = transportManagementVpnFeatureId;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
