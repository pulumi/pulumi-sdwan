// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv4;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelAdvertiseOmpIpv6;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelGreRoute;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelHostMapping;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpsecRoute;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpv4ExportRouteTarget;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpv4ImportRouteTarget;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpv4StaticRoute;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpv6ExportRouteTarget;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpv6ImportRouteTarget;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelIpv6StaticRoute;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelNat64V4Pool;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelNatPool;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelNatPortForward;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelRouteLeakFromOtherService;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelService;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelServiceRoute;
import com.pulumi.sdwan.outputs.GetServiceLanVpnProfileParcelStaticNat;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceLanVpnProfileParcelResult {
    /**
     * @return OMP Advertise IPv4
     * 
     */
    private List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv4> advertiseOmpIpv4s;
    /**
     * @return OMP Advertise IPv6
     * 
     */
    private List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv6> advertiseOmpIpv6s;
    /**
     * @return Name
     * 
     */
    private String configDescription;
    /**
     * @return Variable name
     * 
     */
    private String configDescriptionVariable;
    /**
     * @return The description of the profile parcel
     * 
     */
    private String description;
    /**
     * @return Enable SDWAN Remote Access
     * 
     */
    private Boolean enableSdwanRemoteAccess;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return IPv4 Static GRE Route
     * 
     */
    private List<GetServiceLanVpnProfileParcelGreRoute> greRoutes;
    private List<GetServiceLanVpnProfileParcelHostMapping> hostMappings;
    /**
     * @return The id of the profile parcel
     * 
     */
    private String id;
    /**
     * @return IPv4 Static IPSEC Route
     * 
     */
    private List<GetServiceLanVpnProfileParcelIpsecRoute> ipsecRoutes;
    private List<GetServiceLanVpnProfileParcelIpv4ExportRouteTarget> ipv4ExportRouteTargets;
    private List<GetServiceLanVpnProfileParcelIpv4ImportRouteTarget> ipv4ImportRouteTargets;
    /**
     * @return IPv4 Static Route
     * 
     */
    private List<GetServiceLanVpnProfileParcelIpv4StaticRoute> ipv4StaticRoutes;
    private List<GetServiceLanVpnProfileParcelIpv6ExportRouteTarget> ipv6ExportRouteTargets;
    private List<GetServiceLanVpnProfileParcelIpv6ImportRouteTarget> ipv6ImportRouteTargets;
    /**
     * @return IPv6 Static Route
     * 
     */
    private List<GetServiceLanVpnProfileParcelIpv6StaticRoute> ipv6StaticRoutes;
    /**
     * @return The name of the profile parcel
     * 
     */
    private String name;
    /**
     * @return NAT64 V4 Pool
     * 
     */
    private List<GetServiceLanVpnProfileParcelNat64V4Pool> nat64V4Pools;
    /**
     * @return NAT Pool
     * 
     */
    private List<GetServiceLanVpnProfileParcelNatPool> natPools;
    /**
     * @return NAT Port Forward
     * 
     */
    private List<GetServiceLanVpnProfileParcelNatPortForward> natPortForwards;
    /**
     * @return OMP Admin Distance IPv4
     * 
     */
    private Integer ompAdminDistanceIpv4;
    /**
     * @return Variable name
     * 
     */
    private String ompAdminDistanceIpv4Variable;
    /**
     * @return OMP Admin Distance IPv6
     * 
     */
    private Integer ompAdminDistanceIpv6;
    /**
     * @return Variable name
     * 
     */
    private String ompAdminDistanceIpv6Variable;
    /**
     * @return Primary DNS Address (IPv4)
     * 
     */
    private String primaryDnsAddressIpv4;
    /**
     * @return Variable name
     * 
     */
    private String primaryDnsAddressIpv4Variable;
    /**
     * @return Primary DNS Address (IPv6)
     * 
     */
    private String primaryDnsAddressIpv6;
    /**
     * @return Variable name
     * 
     */
    private String primaryDnsAddressIpv6Variable;
    /**
     * @return Enable route leaking from Global to Service VPN
     * 
     */
    private List<GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn> routeLeakFromGlobalVpns;
    /**
     * @return Enable route leak from another Service VPN to current Service VPN
     * 
     */
    private List<GetServiceLanVpnProfileParcelRouteLeakFromOtherService> routeLeakFromOtherServices;
    /**
     * @return Enable route leaking from Service to Global VPN
     * 
     */
    private List<GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn> routeLeakToGlobalVpns;
    /**
     * @return Secondary DNS Address (IPv4)
     * 
     */
    private String secondaryDnsAddressIpv4;
    /**
     * @return Variable name
     * 
     */
    private String secondaryDnsAddressIpv4Variable;
    /**
     * @return Secondary DNS Address (IPv6)
     * 
     */
    private String secondaryDnsAddressIpv6;
    /**
     * @return Variable name
     * 
     */
    private String secondaryDnsAddressIpv6Variable;
    /**
     * @return Service
     * 
     */
    private List<GetServiceLanVpnProfileParcelServiceRoute> serviceRoutes;
    /**
     * @return Service
     * 
     */
    private List<GetServiceLanVpnProfileParcelService> services;
    /**
     * @return Static NAT Rules
     * 
     */
    private List<GetServiceLanVpnProfileParcelStaticNat> staticNats;
    /**
     * @return The version of the profile parcel
     * 
     */
    private Integer version;
    /**
     * @return VPN
     * 
     */
    private Integer vpn;
    /**
     * @return Variable name
     * 
     */
    private String vpnVariable;

    private GetServiceLanVpnProfileParcelResult() {}
    /**
     * @return OMP Advertise IPv4
     * 
     */
    public List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv4> advertiseOmpIpv4s() {
        return this.advertiseOmpIpv4s;
    }
    /**
     * @return OMP Advertise IPv6
     * 
     */
    public List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv6> advertiseOmpIpv6s() {
        return this.advertiseOmpIpv6s;
    }
    /**
     * @return Name
     * 
     */
    public String configDescription() {
        return this.configDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String configDescriptionVariable() {
        return this.configDescriptionVariable;
    }
    /**
     * @return The description of the profile parcel
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enable SDWAN Remote Access
     * 
     */
    public Boolean enableSdwanRemoteAccess() {
        return this.enableSdwanRemoteAccess;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return IPv4 Static GRE Route
     * 
     */
    public List<GetServiceLanVpnProfileParcelGreRoute> greRoutes() {
        return this.greRoutes;
    }
    public List<GetServiceLanVpnProfileParcelHostMapping> hostMappings() {
        return this.hostMappings;
    }
    /**
     * @return The id of the profile parcel
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IPv4 Static IPSEC Route
     * 
     */
    public List<GetServiceLanVpnProfileParcelIpsecRoute> ipsecRoutes() {
        return this.ipsecRoutes;
    }
    public List<GetServiceLanVpnProfileParcelIpv4ExportRouteTarget> ipv4ExportRouteTargets() {
        return this.ipv4ExportRouteTargets;
    }
    public List<GetServiceLanVpnProfileParcelIpv4ImportRouteTarget> ipv4ImportRouteTargets() {
        return this.ipv4ImportRouteTargets;
    }
    /**
     * @return IPv4 Static Route
     * 
     */
    public List<GetServiceLanVpnProfileParcelIpv4StaticRoute> ipv4StaticRoutes() {
        return this.ipv4StaticRoutes;
    }
    public List<GetServiceLanVpnProfileParcelIpv6ExportRouteTarget> ipv6ExportRouteTargets() {
        return this.ipv6ExportRouteTargets;
    }
    public List<GetServiceLanVpnProfileParcelIpv6ImportRouteTarget> ipv6ImportRouteTargets() {
        return this.ipv6ImportRouteTargets;
    }
    /**
     * @return IPv6 Static Route
     * 
     */
    public List<GetServiceLanVpnProfileParcelIpv6StaticRoute> ipv6StaticRoutes() {
        return this.ipv6StaticRoutes;
    }
    /**
     * @return The name of the profile parcel
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return NAT64 V4 Pool
     * 
     */
    public List<GetServiceLanVpnProfileParcelNat64V4Pool> nat64V4Pools() {
        return this.nat64V4Pools;
    }
    /**
     * @return NAT Pool
     * 
     */
    public List<GetServiceLanVpnProfileParcelNatPool> natPools() {
        return this.natPools;
    }
    /**
     * @return NAT Port Forward
     * 
     */
    public List<GetServiceLanVpnProfileParcelNatPortForward> natPortForwards() {
        return this.natPortForwards;
    }
    /**
     * @return OMP Admin Distance IPv4
     * 
     */
    public Integer ompAdminDistanceIpv4() {
        return this.ompAdminDistanceIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String ompAdminDistanceIpv4Variable() {
        return this.ompAdminDistanceIpv4Variable;
    }
    /**
     * @return OMP Admin Distance IPv6
     * 
     */
    public Integer ompAdminDistanceIpv6() {
        return this.ompAdminDistanceIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String ompAdminDistanceIpv6Variable() {
        return this.ompAdminDistanceIpv6Variable;
    }
    /**
     * @return Primary DNS Address (IPv4)
     * 
     */
    public String primaryDnsAddressIpv4() {
        return this.primaryDnsAddressIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String primaryDnsAddressIpv4Variable() {
        return this.primaryDnsAddressIpv4Variable;
    }
    /**
     * @return Primary DNS Address (IPv6)
     * 
     */
    public String primaryDnsAddressIpv6() {
        return this.primaryDnsAddressIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String primaryDnsAddressIpv6Variable() {
        return this.primaryDnsAddressIpv6Variable;
    }
    /**
     * @return Enable route leaking from Global to Service VPN
     * 
     */
    public List<GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn> routeLeakFromGlobalVpns() {
        return this.routeLeakFromGlobalVpns;
    }
    /**
     * @return Enable route leak from another Service VPN to current Service VPN
     * 
     */
    public List<GetServiceLanVpnProfileParcelRouteLeakFromOtherService> routeLeakFromOtherServices() {
        return this.routeLeakFromOtherServices;
    }
    /**
     * @return Enable route leaking from Service to Global VPN
     * 
     */
    public List<GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn> routeLeakToGlobalVpns() {
        return this.routeLeakToGlobalVpns;
    }
    /**
     * @return Secondary DNS Address (IPv4)
     * 
     */
    public String secondaryDnsAddressIpv4() {
        return this.secondaryDnsAddressIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String secondaryDnsAddressIpv4Variable() {
        return this.secondaryDnsAddressIpv4Variable;
    }
    /**
     * @return Secondary DNS Address (IPv6)
     * 
     */
    public String secondaryDnsAddressIpv6() {
        return this.secondaryDnsAddressIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String secondaryDnsAddressIpv6Variable() {
        return this.secondaryDnsAddressIpv6Variable;
    }
    /**
     * @return Service
     * 
     */
    public List<GetServiceLanVpnProfileParcelServiceRoute> serviceRoutes() {
        return this.serviceRoutes;
    }
    /**
     * @return Service
     * 
     */
    public List<GetServiceLanVpnProfileParcelService> services() {
        return this.services;
    }
    /**
     * @return Static NAT Rules
     * 
     */
    public List<GetServiceLanVpnProfileParcelStaticNat> staticNats() {
        return this.staticNats;
    }
    /**
     * @return The version of the profile parcel
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return VPN
     * 
     */
    public Integer vpn() {
        return this.vpn;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnVariable() {
        return this.vpnVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLanVpnProfileParcelResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv4> advertiseOmpIpv4s;
        private List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv6> advertiseOmpIpv6s;
        private String configDescription;
        private String configDescriptionVariable;
        private String description;
        private Boolean enableSdwanRemoteAccess;
        private String featureProfileId;
        private List<GetServiceLanVpnProfileParcelGreRoute> greRoutes;
        private List<GetServiceLanVpnProfileParcelHostMapping> hostMappings;
        private String id;
        private List<GetServiceLanVpnProfileParcelIpsecRoute> ipsecRoutes;
        private List<GetServiceLanVpnProfileParcelIpv4ExportRouteTarget> ipv4ExportRouteTargets;
        private List<GetServiceLanVpnProfileParcelIpv4ImportRouteTarget> ipv4ImportRouteTargets;
        private List<GetServiceLanVpnProfileParcelIpv4StaticRoute> ipv4StaticRoutes;
        private List<GetServiceLanVpnProfileParcelIpv6ExportRouteTarget> ipv6ExportRouteTargets;
        private List<GetServiceLanVpnProfileParcelIpv6ImportRouteTarget> ipv6ImportRouteTargets;
        private List<GetServiceLanVpnProfileParcelIpv6StaticRoute> ipv6StaticRoutes;
        private String name;
        private List<GetServiceLanVpnProfileParcelNat64V4Pool> nat64V4Pools;
        private List<GetServiceLanVpnProfileParcelNatPool> natPools;
        private List<GetServiceLanVpnProfileParcelNatPortForward> natPortForwards;
        private Integer ompAdminDistanceIpv4;
        private String ompAdminDistanceIpv4Variable;
        private Integer ompAdminDistanceIpv6;
        private String ompAdminDistanceIpv6Variable;
        private String primaryDnsAddressIpv4;
        private String primaryDnsAddressIpv4Variable;
        private String primaryDnsAddressIpv6;
        private String primaryDnsAddressIpv6Variable;
        private List<GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn> routeLeakFromGlobalVpns;
        private List<GetServiceLanVpnProfileParcelRouteLeakFromOtherService> routeLeakFromOtherServices;
        private List<GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn> routeLeakToGlobalVpns;
        private String secondaryDnsAddressIpv4;
        private String secondaryDnsAddressIpv4Variable;
        private String secondaryDnsAddressIpv6;
        private String secondaryDnsAddressIpv6Variable;
        private List<GetServiceLanVpnProfileParcelServiceRoute> serviceRoutes;
        private List<GetServiceLanVpnProfileParcelService> services;
        private List<GetServiceLanVpnProfileParcelStaticNat> staticNats;
        private Integer version;
        private Integer vpn;
        private String vpnVariable;
        public Builder() {}
        public Builder(GetServiceLanVpnProfileParcelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.advertiseOmpIpv4s = defaults.advertiseOmpIpv4s;
    	      this.advertiseOmpIpv6s = defaults.advertiseOmpIpv6s;
    	      this.configDescription = defaults.configDescription;
    	      this.configDescriptionVariable = defaults.configDescriptionVariable;
    	      this.description = defaults.description;
    	      this.enableSdwanRemoteAccess = defaults.enableSdwanRemoteAccess;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.greRoutes = defaults.greRoutes;
    	      this.hostMappings = defaults.hostMappings;
    	      this.id = defaults.id;
    	      this.ipsecRoutes = defaults.ipsecRoutes;
    	      this.ipv4ExportRouteTargets = defaults.ipv4ExportRouteTargets;
    	      this.ipv4ImportRouteTargets = defaults.ipv4ImportRouteTargets;
    	      this.ipv4StaticRoutes = defaults.ipv4StaticRoutes;
    	      this.ipv6ExportRouteTargets = defaults.ipv6ExportRouteTargets;
    	      this.ipv6ImportRouteTargets = defaults.ipv6ImportRouteTargets;
    	      this.ipv6StaticRoutes = defaults.ipv6StaticRoutes;
    	      this.name = defaults.name;
    	      this.nat64V4Pools = defaults.nat64V4Pools;
    	      this.natPools = defaults.natPools;
    	      this.natPortForwards = defaults.natPortForwards;
    	      this.ompAdminDistanceIpv4 = defaults.ompAdminDistanceIpv4;
    	      this.ompAdminDistanceIpv4Variable = defaults.ompAdminDistanceIpv4Variable;
    	      this.ompAdminDistanceIpv6 = defaults.ompAdminDistanceIpv6;
    	      this.ompAdminDistanceIpv6Variable = defaults.ompAdminDistanceIpv6Variable;
    	      this.primaryDnsAddressIpv4 = defaults.primaryDnsAddressIpv4;
    	      this.primaryDnsAddressIpv4Variable = defaults.primaryDnsAddressIpv4Variable;
    	      this.primaryDnsAddressIpv6 = defaults.primaryDnsAddressIpv6;
    	      this.primaryDnsAddressIpv6Variable = defaults.primaryDnsAddressIpv6Variable;
    	      this.routeLeakFromGlobalVpns = defaults.routeLeakFromGlobalVpns;
    	      this.routeLeakFromOtherServices = defaults.routeLeakFromOtherServices;
    	      this.routeLeakToGlobalVpns = defaults.routeLeakToGlobalVpns;
    	      this.secondaryDnsAddressIpv4 = defaults.secondaryDnsAddressIpv4;
    	      this.secondaryDnsAddressIpv4Variable = defaults.secondaryDnsAddressIpv4Variable;
    	      this.secondaryDnsAddressIpv6 = defaults.secondaryDnsAddressIpv6;
    	      this.secondaryDnsAddressIpv6Variable = defaults.secondaryDnsAddressIpv6Variable;
    	      this.serviceRoutes = defaults.serviceRoutes;
    	      this.services = defaults.services;
    	      this.staticNats = defaults.staticNats;
    	      this.version = defaults.version;
    	      this.vpn = defaults.vpn;
    	      this.vpnVariable = defaults.vpnVariable;
        }

        @CustomType.Setter
        public Builder advertiseOmpIpv4s(List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv4> advertiseOmpIpv4s) {
            if (advertiseOmpIpv4s == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "advertiseOmpIpv4s");
            }
            this.advertiseOmpIpv4s = advertiseOmpIpv4s;
            return this;
        }
        public Builder advertiseOmpIpv4s(GetServiceLanVpnProfileParcelAdvertiseOmpIpv4... advertiseOmpIpv4s) {
            return advertiseOmpIpv4s(List.of(advertiseOmpIpv4s));
        }
        @CustomType.Setter
        public Builder advertiseOmpIpv6s(List<GetServiceLanVpnProfileParcelAdvertiseOmpIpv6> advertiseOmpIpv6s) {
            if (advertiseOmpIpv6s == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "advertiseOmpIpv6s");
            }
            this.advertiseOmpIpv6s = advertiseOmpIpv6s;
            return this;
        }
        public Builder advertiseOmpIpv6s(GetServiceLanVpnProfileParcelAdvertiseOmpIpv6... advertiseOmpIpv6s) {
            return advertiseOmpIpv6s(List.of(advertiseOmpIpv6s));
        }
        @CustomType.Setter
        public Builder configDescription(String configDescription) {
            if (configDescription == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "configDescription");
            }
            this.configDescription = configDescription;
            return this;
        }
        @CustomType.Setter
        public Builder configDescriptionVariable(String configDescriptionVariable) {
            if (configDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "configDescriptionVariable");
            }
            this.configDescriptionVariable = configDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableSdwanRemoteAccess(Boolean enableSdwanRemoteAccess) {
            if (enableSdwanRemoteAccess == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "enableSdwanRemoteAccess");
            }
            this.enableSdwanRemoteAccess = enableSdwanRemoteAccess;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder greRoutes(List<GetServiceLanVpnProfileParcelGreRoute> greRoutes) {
            if (greRoutes == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "greRoutes");
            }
            this.greRoutes = greRoutes;
            return this;
        }
        public Builder greRoutes(GetServiceLanVpnProfileParcelGreRoute... greRoutes) {
            return greRoutes(List.of(greRoutes));
        }
        @CustomType.Setter
        public Builder hostMappings(List<GetServiceLanVpnProfileParcelHostMapping> hostMappings) {
            if (hostMappings == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "hostMappings");
            }
            this.hostMappings = hostMappings;
            return this;
        }
        public Builder hostMappings(GetServiceLanVpnProfileParcelHostMapping... hostMappings) {
            return hostMappings(List.of(hostMappings));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRoutes(List<GetServiceLanVpnProfileParcelIpsecRoute> ipsecRoutes) {
            if (ipsecRoutes == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipsecRoutes");
            }
            this.ipsecRoutes = ipsecRoutes;
            return this;
        }
        public Builder ipsecRoutes(GetServiceLanVpnProfileParcelIpsecRoute... ipsecRoutes) {
            return ipsecRoutes(List.of(ipsecRoutes));
        }
        @CustomType.Setter
        public Builder ipv4ExportRouteTargets(List<GetServiceLanVpnProfileParcelIpv4ExportRouteTarget> ipv4ExportRouteTargets) {
            if (ipv4ExportRouteTargets == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipv4ExportRouteTargets");
            }
            this.ipv4ExportRouteTargets = ipv4ExportRouteTargets;
            return this;
        }
        public Builder ipv4ExportRouteTargets(GetServiceLanVpnProfileParcelIpv4ExportRouteTarget... ipv4ExportRouteTargets) {
            return ipv4ExportRouteTargets(List.of(ipv4ExportRouteTargets));
        }
        @CustomType.Setter
        public Builder ipv4ImportRouteTargets(List<GetServiceLanVpnProfileParcelIpv4ImportRouteTarget> ipv4ImportRouteTargets) {
            if (ipv4ImportRouteTargets == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipv4ImportRouteTargets");
            }
            this.ipv4ImportRouteTargets = ipv4ImportRouteTargets;
            return this;
        }
        public Builder ipv4ImportRouteTargets(GetServiceLanVpnProfileParcelIpv4ImportRouteTarget... ipv4ImportRouteTargets) {
            return ipv4ImportRouteTargets(List.of(ipv4ImportRouteTargets));
        }
        @CustomType.Setter
        public Builder ipv4StaticRoutes(List<GetServiceLanVpnProfileParcelIpv4StaticRoute> ipv4StaticRoutes) {
            if (ipv4StaticRoutes == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipv4StaticRoutes");
            }
            this.ipv4StaticRoutes = ipv4StaticRoutes;
            return this;
        }
        public Builder ipv4StaticRoutes(GetServiceLanVpnProfileParcelIpv4StaticRoute... ipv4StaticRoutes) {
            return ipv4StaticRoutes(List.of(ipv4StaticRoutes));
        }
        @CustomType.Setter
        public Builder ipv6ExportRouteTargets(List<GetServiceLanVpnProfileParcelIpv6ExportRouteTarget> ipv6ExportRouteTargets) {
            if (ipv6ExportRouteTargets == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipv6ExportRouteTargets");
            }
            this.ipv6ExportRouteTargets = ipv6ExportRouteTargets;
            return this;
        }
        public Builder ipv6ExportRouteTargets(GetServiceLanVpnProfileParcelIpv6ExportRouteTarget... ipv6ExportRouteTargets) {
            return ipv6ExportRouteTargets(List.of(ipv6ExportRouteTargets));
        }
        @CustomType.Setter
        public Builder ipv6ImportRouteTargets(List<GetServiceLanVpnProfileParcelIpv6ImportRouteTarget> ipv6ImportRouteTargets) {
            if (ipv6ImportRouteTargets == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipv6ImportRouteTargets");
            }
            this.ipv6ImportRouteTargets = ipv6ImportRouteTargets;
            return this;
        }
        public Builder ipv6ImportRouteTargets(GetServiceLanVpnProfileParcelIpv6ImportRouteTarget... ipv6ImportRouteTargets) {
            return ipv6ImportRouteTargets(List.of(ipv6ImportRouteTargets));
        }
        @CustomType.Setter
        public Builder ipv6StaticRoutes(List<GetServiceLanVpnProfileParcelIpv6StaticRoute> ipv6StaticRoutes) {
            if (ipv6StaticRoutes == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ipv6StaticRoutes");
            }
            this.ipv6StaticRoutes = ipv6StaticRoutes;
            return this;
        }
        public Builder ipv6StaticRoutes(GetServiceLanVpnProfileParcelIpv6StaticRoute... ipv6StaticRoutes) {
            return ipv6StaticRoutes(List.of(ipv6StaticRoutes));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat64V4Pools(List<GetServiceLanVpnProfileParcelNat64V4Pool> nat64V4Pools) {
            if (nat64V4Pools == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "nat64V4Pools");
            }
            this.nat64V4Pools = nat64V4Pools;
            return this;
        }
        public Builder nat64V4Pools(GetServiceLanVpnProfileParcelNat64V4Pool... nat64V4Pools) {
            return nat64V4Pools(List.of(nat64V4Pools));
        }
        @CustomType.Setter
        public Builder natPools(List<GetServiceLanVpnProfileParcelNatPool> natPools) {
            if (natPools == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "natPools");
            }
            this.natPools = natPools;
            return this;
        }
        public Builder natPools(GetServiceLanVpnProfileParcelNatPool... natPools) {
            return natPools(List.of(natPools));
        }
        @CustomType.Setter
        public Builder natPortForwards(List<GetServiceLanVpnProfileParcelNatPortForward> natPortForwards) {
            if (natPortForwards == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "natPortForwards");
            }
            this.natPortForwards = natPortForwards;
            return this;
        }
        public Builder natPortForwards(GetServiceLanVpnProfileParcelNatPortForward... natPortForwards) {
            return natPortForwards(List.of(natPortForwards));
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv4(Integer ompAdminDistanceIpv4) {
            if (ompAdminDistanceIpv4 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ompAdminDistanceIpv4");
            }
            this.ompAdminDistanceIpv4 = ompAdminDistanceIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv4Variable(String ompAdminDistanceIpv4Variable) {
            if (ompAdminDistanceIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ompAdminDistanceIpv4Variable");
            }
            this.ompAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv6(Integer ompAdminDistanceIpv6) {
            if (ompAdminDistanceIpv6 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ompAdminDistanceIpv6");
            }
            this.ompAdminDistanceIpv6 = ompAdminDistanceIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder ompAdminDistanceIpv6Variable(String ompAdminDistanceIpv6Variable) {
            if (ompAdminDistanceIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "ompAdminDistanceIpv6Variable");
            }
            this.ompAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv4(String primaryDnsAddressIpv4) {
            if (primaryDnsAddressIpv4 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "primaryDnsAddressIpv4");
            }
            this.primaryDnsAddressIpv4 = primaryDnsAddressIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv4Variable(String primaryDnsAddressIpv4Variable) {
            if (primaryDnsAddressIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "primaryDnsAddressIpv4Variable");
            }
            this.primaryDnsAddressIpv4Variable = primaryDnsAddressIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv6(String primaryDnsAddressIpv6) {
            if (primaryDnsAddressIpv6 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "primaryDnsAddressIpv6");
            }
            this.primaryDnsAddressIpv6 = primaryDnsAddressIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv6Variable(String primaryDnsAddressIpv6Variable) {
            if (primaryDnsAddressIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "primaryDnsAddressIpv6Variable");
            }
            this.primaryDnsAddressIpv6Variable = primaryDnsAddressIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder routeLeakFromGlobalVpns(List<GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn> routeLeakFromGlobalVpns) {
            if (routeLeakFromGlobalVpns == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "routeLeakFromGlobalVpns");
            }
            this.routeLeakFromGlobalVpns = routeLeakFromGlobalVpns;
            return this;
        }
        public Builder routeLeakFromGlobalVpns(GetServiceLanVpnProfileParcelRouteLeakFromGlobalVpn... routeLeakFromGlobalVpns) {
            return routeLeakFromGlobalVpns(List.of(routeLeakFromGlobalVpns));
        }
        @CustomType.Setter
        public Builder routeLeakFromOtherServices(List<GetServiceLanVpnProfileParcelRouteLeakFromOtherService> routeLeakFromOtherServices) {
            if (routeLeakFromOtherServices == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "routeLeakFromOtherServices");
            }
            this.routeLeakFromOtherServices = routeLeakFromOtherServices;
            return this;
        }
        public Builder routeLeakFromOtherServices(GetServiceLanVpnProfileParcelRouteLeakFromOtherService... routeLeakFromOtherServices) {
            return routeLeakFromOtherServices(List.of(routeLeakFromOtherServices));
        }
        @CustomType.Setter
        public Builder routeLeakToGlobalVpns(List<GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn> routeLeakToGlobalVpns) {
            if (routeLeakToGlobalVpns == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "routeLeakToGlobalVpns");
            }
            this.routeLeakToGlobalVpns = routeLeakToGlobalVpns;
            return this;
        }
        public Builder routeLeakToGlobalVpns(GetServiceLanVpnProfileParcelRouteLeakToGlobalVpn... routeLeakToGlobalVpns) {
            return routeLeakToGlobalVpns(List.of(routeLeakToGlobalVpns));
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv4(String secondaryDnsAddressIpv4) {
            if (secondaryDnsAddressIpv4 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "secondaryDnsAddressIpv4");
            }
            this.secondaryDnsAddressIpv4 = secondaryDnsAddressIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv4Variable(String secondaryDnsAddressIpv4Variable) {
            if (secondaryDnsAddressIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "secondaryDnsAddressIpv4Variable");
            }
            this.secondaryDnsAddressIpv4Variable = secondaryDnsAddressIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv6(String secondaryDnsAddressIpv6) {
            if (secondaryDnsAddressIpv6 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "secondaryDnsAddressIpv6");
            }
            this.secondaryDnsAddressIpv6 = secondaryDnsAddressIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv6Variable(String secondaryDnsAddressIpv6Variable) {
            if (secondaryDnsAddressIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "secondaryDnsAddressIpv6Variable");
            }
            this.secondaryDnsAddressIpv6Variable = secondaryDnsAddressIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder serviceRoutes(List<GetServiceLanVpnProfileParcelServiceRoute> serviceRoutes) {
            if (serviceRoutes == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "serviceRoutes");
            }
            this.serviceRoutes = serviceRoutes;
            return this;
        }
        public Builder serviceRoutes(GetServiceLanVpnProfileParcelServiceRoute... serviceRoutes) {
            return serviceRoutes(List.of(serviceRoutes));
        }
        @CustomType.Setter
        public Builder services(List<GetServiceLanVpnProfileParcelService> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(GetServiceLanVpnProfileParcelService... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder staticNats(List<GetServiceLanVpnProfileParcelStaticNat> staticNats) {
            if (staticNats == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "staticNats");
            }
            this.staticNats = staticNats;
            return this;
        }
        public Builder staticNats(GetServiceLanVpnProfileParcelStaticNat... staticNats) {
            return staticNats(List.of(staticNats));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vpn(Integer vpn) {
            if (vpn == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "vpn");
            }
            this.vpn = vpn;
            return this;
        }
        @CustomType.Setter
        public Builder vpnVariable(String vpnVariable) {
            if (vpnVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnProfileParcelResult", "vpnVariable");
            }
            this.vpnVariable = vpnVariable;
            return this;
        }
        public GetServiceLanVpnProfileParcelResult build() {
            final var _resultValue = new GetServiceLanVpnProfileParcelResult();
            _resultValue.advertiseOmpIpv4s = advertiseOmpIpv4s;
            _resultValue.advertiseOmpIpv6s = advertiseOmpIpv6s;
            _resultValue.configDescription = configDescription;
            _resultValue.configDescriptionVariable = configDescriptionVariable;
            _resultValue.description = description;
            _resultValue.enableSdwanRemoteAccess = enableSdwanRemoteAccess;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.greRoutes = greRoutes;
            _resultValue.hostMappings = hostMappings;
            _resultValue.id = id;
            _resultValue.ipsecRoutes = ipsecRoutes;
            _resultValue.ipv4ExportRouteTargets = ipv4ExportRouteTargets;
            _resultValue.ipv4ImportRouteTargets = ipv4ImportRouteTargets;
            _resultValue.ipv4StaticRoutes = ipv4StaticRoutes;
            _resultValue.ipv6ExportRouteTargets = ipv6ExportRouteTargets;
            _resultValue.ipv6ImportRouteTargets = ipv6ImportRouteTargets;
            _resultValue.ipv6StaticRoutes = ipv6StaticRoutes;
            _resultValue.name = name;
            _resultValue.nat64V4Pools = nat64V4Pools;
            _resultValue.natPools = natPools;
            _resultValue.natPortForwards = natPortForwards;
            _resultValue.ompAdminDistanceIpv4 = ompAdminDistanceIpv4;
            _resultValue.ompAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            _resultValue.ompAdminDistanceIpv6 = ompAdminDistanceIpv6;
            _resultValue.ompAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            _resultValue.primaryDnsAddressIpv4 = primaryDnsAddressIpv4;
            _resultValue.primaryDnsAddressIpv4Variable = primaryDnsAddressIpv4Variable;
            _resultValue.primaryDnsAddressIpv6 = primaryDnsAddressIpv6;
            _resultValue.primaryDnsAddressIpv6Variable = primaryDnsAddressIpv6Variable;
            _resultValue.routeLeakFromGlobalVpns = routeLeakFromGlobalVpns;
            _resultValue.routeLeakFromOtherServices = routeLeakFromOtherServices;
            _resultValue.routeLeakToGlobalVpns = routeLeakToGlobalVpns;
            _resultValue.secondaryDnsAddressIpv4 = secondaryDnsAddressIpv4;
            _resultValue.secondaryDnsAddressIpv4Variable = secondaryDnsAddressIpv4Variable;
            _resultValue.secondaryDnsAddressIpv6 = secondaryDnsAddressIpv6;
            _resultValue.secondaryDnsAddressIpv6Variable = secondaryDnsAddressIpv6Variable;
            _resultValue.serviceRoutes = serviceRoutes;
            _resultValue.services = services;
            _resultValue.staticNats = staticNats;
            _resultValue.version = version;
            _resultValue.vpn = vpn;
            _resultValue.vpnVariable = vpnVariable;
            return _resultValue;
        }
    }
}
