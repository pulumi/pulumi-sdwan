// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs Empty = new TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs();

    /**
     * DSCP, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     * 
     */
    @Import(name="dscp")
    private @Nullable Output<Integer> dscp;

    /**
     * @return DSCP, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     * 
     */
    public Optional<Output<Integer>> dscp() {
        return Optional.ofNullable(this.dscp);
    }

    /**
     * Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
     * 
     */
    @Import(name="forwardingClass")
    private @Nullable Output<String> forwardingClass;

    /**
     * @return Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
     * 
     */
    public Optional<Output<String>> forwardingClass() {
        return Optional.ofNullable(this.forwardingClass);
    }

    /**
     * Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    @Import(name="localTlocListColor")
    private @Nullable Output<String> localTlocListColor;

    /**
     * @return Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    public Optional<Output<String>> localTlocListColor() {
        return Optional.ofNullable(this.localTlocListColor);
    }

    /**
     * Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    @Import(name="localTlocListEncap")
    private @Nullable Output<String> localTlocListEncap;

    /**
     * @return Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    public Optional<Output<String>> localTlocListEncap() {
        return Optional.ofNullable(this.localTlocListEncap);
    }

    /**
     * Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    @Import(name="localTlocListRestrict")
    private @Nullable Output<Boolean> localTlocListRestrict;

    /**
     * @return Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    public Optional<Output<Boolean>> localTlocListRestrict() {
        return Optional.ofNullable(this.localTlocListRestrict);
    }

    /**
     * Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     * 
     */
    @Import(name="nextHop")
    private @Nullable Output<String> nextHop;

    /**
     * @return Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     * 
     */
    public Optional<Output<String>> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }

    /**
     * Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
     * 
     */
    @Import(name="nextHopLoose")
    private @Nullable Output<Boolean> nextHopLoose;

    /**
     * @return Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
     * 
     */
    public Optional<Output<Boolean>> nextHopLoose() {
        return Optional.ofNullable(this.nextHopLoose);
    }

    /**
     * Policer list ID, Attribute conditional on `type` being equal to `policer`
     * 
     */
    @Import(name="policerListId")
    private @Nullable Output<String> policerListId;

    /**
     * @return Policer list ID, Attribute conditional on `type` being equal to `policer`
     * 
     */
    public Optional<Output<String>> policerListId() {
        return Optional.ofNullable(this.policerListId);
    }

    /**
     * Policer list version
     * 
     */
    @Import(name="policerListVersion")
    private @Nullable Output<Integer> policerListVersion;

    /**
     * @return Policer list version
     * 
     */
    public Optional<Output<Integer>> policerListVersion() {
        return Optional.ofNullable(this.policerListVersion);
    }

    /**
     * Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     * 
     */
    @Import(name="preferredColorGroupListId")
    private @Nullable Output<String> preferredColorGroupListId;

    /**
     * @return Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     * 
     */
    public Optional<Output<String>> preferredColorGroupListId() {
        return Optional.ofNullable(this.preferredColorGroupListId);
    }

    /**
     * Preferred color group list version
     * 
     */
    @Import(name="preferredColorGroupListVersion")
    private @Nullable Output<Integer> preferredColorGroupListVersion;

    /**
     * @return Preferred color group list version
     * 
     */
    public Optional<Output<Integer>> preferredColorGroupListVersion() {
        return Optional.ofNullable(this.preferredColorGroupListVersion);
    }

    /**
     * Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocColor")
    private @Nullable Output<String> serviceTlocColor;

    /**
     * @return Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<String>> serviceTlocColor() {
        return Optional.ofNullable(this.serviceTlocColor);
    }

    /**
     * Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    @Import(name="serviceTlocEncapsulation")
    private @Nullable Output<String> serviceTlocEncapsulation;

    /**
     * @return Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    public Optional<Output<String>> serviceTlocEncapsulation() {
        return Optional.ofNullable(this.serviceTlocEncapsulation);
    }

    /**
     * Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocIp")
    private @Nullable Output<String> serviceTlocIp;

    /**
     * @return Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<String>> serviceTlocIp() {
        return Optional.ofNullable(this.serviceTlocIp);
    }

    /**
     * Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocListId")
    private @Nullable Output<String> serviceTlocListId;

    /**
     * @return Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<String>> serviceTlocListId() {
        return Optional.ofNullable(this.serviceTlocListId);
    }

    /**
     * Service TLOC list version
     * 
     */
    @Import(name="serviceTlocListVersion")
    private @Nullable Output<Integer> serviceTlocListVersion;

    /**
     * @return Service TLOC list version
     * 
     */
    public Optional<Output<Integer>> serviceTlocListVersion() {
        return Optional.ofNullable(this.serviceTlocListVersion);
    }

    /**
     * Service TLOC Local, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocLocal")
    private @Nullable Output<Boolean> serviceTlocLocal;

    /**
     * @return Service TLOC Local, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<Boolean>> serviceTlocLocal() {
        return Optional.ofNullable(this.serviceTlocLocal);
    }

    /**
     * Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocRestrict")
    private @Nullable Output<Boolean> serviceTlocRestrict;

    /**
     * @return Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<Boolean>> serviceTlocRestrict() {
        return Optional.ofNullable(this.serviceTlocRestrict);
    }

    /**
     * Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    @Import(name="serviceVpnId")
    private @Nullable Output<Integer> serviceVpnId;

    /**
     * @return Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    public Optional<Output<Integer>> serviceVpnId() {
        return Optional.ofNullable(this.serviceVpnId);
    }

    /**
     * TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    @Import(name="tlocColor")
    private @Nullable Output<String> tlocColor;

    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<Output<String>> tlocColor() {
        return Optional.ofNullable(this.tlocColor);
    }

    /**
     * TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    @Import(name="tlocEncapsulation")
    private @Nullable Output<String> tlocEncapsulation;

    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    public Optional<Output<String>> tlocEncapsulation() {
        return Optional.ofNullable(this.tlocEncapsulation);
    }

    /**
     * TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    @Import(name="tlocIp")
    private @Nullable Output<String> tlocIp;

    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<Output<String>> tlocIp() {
        return Optional.ofNullable(this.tlocIp);
    }

    /**
     * TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    @Import(name="tlocListId")
    private @Nullable Output<String> tlocListId;

    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    public Optional<Output<String>> tlocListId() {
        return Optional.ofNullable(this.tlocListId);
    }

    /**
     * TLOC list version
     * 
     */
    @Import(name="tlocListVersion")
    private @Nullable Output<Integer> tlocListVersion;

    /**
     * @return TLOC list version
     * 
     */
    public Optional<Output<Integer>> tlocListVersion() {
        return Optional.ofNullable(this.tlocListVersion);
    }

    /**
     * Type of set parameter
     *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of set parameter
     *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * DSCP, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65530`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return DSCP, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65530`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    private TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs() {}

    private TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs(TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs $) {
        this.dscp = $.dscp;
        this.forwardingClass = $.forwardingClass;
        this.localTlocListColor = $.localTlocListColor;
        this.localTlocListEncap = $.localTlocListEncap;
        this.localTlocListRestrict = $.localTlocListRestrict;
        this.nextHop = $.nextHop;
        this.nextHopLoose = $.nextHopLoose;
        this.policerListId = $.policerListId;
        this.policerListVersion = $.policerListVersion;
        this.preferredColorGroupListId = $.preferredColorGroupListId;
        this.preferredColorGroupListVersion = $.preferredColorGroupListVersion;
        this.serviceTlocColor = $.serviceTlocColor;
        this.serviceTlocEncapsulation = $.serviceTlocEncapsulation;
        this.serviceTlocIp = $.serviceTlocIp;
        this.serviceTlocListId = $.serviceTlocListId;
        this.serviceTlocListVersion = $.serviceTlocListVersion;
        this.serviceTlocLocal = $.serviceTlocLocal;
        this.serviceTlocRestrict = $.serviceTlocRestrict;
        this.serviceType = $.serviceType;
        this.serviceVpnId = $.serviceVpnId;
        this.tlocColor = $.tlocColor;
        this.tlocEncapsulation = $.tlocEncapsulation;
        this.tlocIp = $.tlocIp;
        this.tlocListId = $.tlocListId;
        this.tlocListVersion = $.tlocListVersion;
        this.type = $.type;
        this.vpnId = $.vpnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs $;

        public Builder() {
            $ = new TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs();
        }

        public Builder(TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs defaults) {
            $ = new TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dscp DSCP, Attribute conditional on `type` being equal to `dscp`
         *   - Range: `0`-`63`
         * 
         * @return builder
         * 
         */
        public Builder dscp(@Nullable Output<Integer> dscp) {
            $.dscp = dscp;
            return this;
        }

        /**
         * @param dscp DSCP, Attribute conditional on `type` being equal to `dscp`
         *   - Range: `0`-`63`
         * 
         * @return builder
         * 
         */
        public Builder dscp(Integer dscp) {
            return dscp(Output.of(dscp));
        }

        /**
         * @param forwardingClass Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
         * 
         * @return builder
         * 
         */
        public Builder forwardingClass(@Nullable Output<String> forwardingClass) {
            $.forwardingClass = forwardingClass;
            return this;
        }

        /**
         * @param forwardingClass Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
         * 
         * @return builder
         * 
         */
        public Builder forwardingClass(String forwardingClass) {
            return forwardingClass(Output.of(forwardingClass));
        }

        /**
         * @param localTlocListColor Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
         * 
         * @return builder
         * 
         */
        public Builder localTlocListColor(@Nullable Output<String> localTlocListColor) {
            $.localTlocListColor = localTlocListColor;
            return this;
        }

        /**
         * @param localTlocListColor Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
         * 
         * @return builder
         * 
         */
        public Builder localTlocListColor(String localTlocListColor) {
            return localTlocListColor(Output.of(localTlocListColor));
        }

        /**
         * @param localTlocListEncap Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
         *   - Choices: `ipsec`, `gre`, `ipsec gre`
         * 
         * @return builder
         * 
         */
        public Builder localTlocListEncap(@Nullable Output<String> localTlocListEncap) {
            $.localTlocListEncap = localTlocListEncap;
            return this;
        }

        /**
         * @param localTlocListEncap Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
         *   - Choices: `ipsec`, `gre`, `ipsec gre`
         * 
         * @return builder
         * 
         */
        public Builder localTlocListEncap(String localTlocListEncap) {
            return localTlocListEncap(Output.of(localTlocListEncap));
        }

        /**
         * @param localTlocListRestrict Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
         * 
         * @return builder
         * 
         */
        public Builder localTlocListRestrict(@Nullable Output<Boolean> localTlocListRestrict) {
            $.localTlocListRestrict = localTlocListRestrict;
            return this;
        }

        /**
         * @param localTlocListRestrict Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
         * 
         * @return builder
         * 
         */
        public Builder localTlocListRestrict(Boolean localTlocListRestrict) {
            return localTlocListRestrict(Output.of(localTlocListRestrict));
        }

        /**
         * @param nextHop Next hop IP, Attribute conditional on `type` being equal to `nextHop`
         * 
         * @return builder
         * 
         */
        public Builder nextHop(@Nullable Output<String> nextHop) {
            $.nextHop = nextHop;
            return this;
        }

        /**
         * @param nextHop Next hop IP, Attribute conditional on `type` being equal to `nextHop`
         * 
         * @return builder
         * 
         */
        public Builder nextHop(String nextHop) {
            return nextHop(Output.of(nextHop));
        }

        /**
         * @param nextHopLoose Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
         * 
         * @return builder
         * 
         */
        public Builder nextHopLoose(@Nullable Output<Boolean> nextHopLoose) {
            $.nextHopLoose = nextHopLoose;
            return this;
        }

        /**
         * @param nextHopLoose Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
         * 
         * @return builder
         * 
         */
        public Builder nextHopLoose(Boolean nextHopLoose) {
            return nextHopLoose(Output.of(nextHopLoose));
        }

        /**
         * @param policerListId Policer list ID, Attribute conditional on `type` being equal to `policer`
         * 
         * @return builder
         * 
         */
        public Builder policerListId(@Nullable Output<String> policerListId) {
            $.policerListId = policerListId;
            return this;
        }

        /**
         * @param policerListId Policer list ID, Attribute conditional on `type` being equal to `policer`
         * 
         * @return builder
         * 
         */
        public Builder policerListId(String policerListId) {
            return policerListId(Output.of(policerListId));
        }

        /**
         * @param policerListVersion Policer list version
         * 
         * @return builder
         * 
         */
        public Builder policerListVersion(@Nullable Output<Integer> policerListVersion) {
            $.policerListVersion = policerListVersion;
            return this;
        }

        /**
         * @param policerListVersion Policer list version
         * 
         * @return builder
         * 
         */
        public Builder policerListVersion(Integer policerListVersion) {
            return policerListVersion(Output.of(policerListVersion));
        }

        /**
         * @param preferredColorGroupListId Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListId(@Nullable Output<String> preferredColorGroupListId) {
            $.preferredColorGroupListId = preferredColorGroupListId;
            return this;
        }

        /**
         * @param preferredColorGroupListId Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListId(String preferredColorGroupListId) {
            return preferredColorGroupListId(Output.of(preferredColorGroupListId));
        }

        /**
         * @param preferredColorGroupListVersion Preferred color group list version
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListVersion(@Nullable Output<Integer> preferredColorGroupListVersion) {
            $.preferredColorGroupListVersion = preferredColorGroupListVersion;
            return this;
        }

        /**
         * @param preferredColorGroupListVersion Preferred color group list version
         * 
         * @return builder
         * 
         */
        public Builder preferredColorGroupListVersion(Integer preferredColorGroupListVersion) {
            return preferredColorGroupListVersion(Output.of(preferredColorGroupListVersion));
        }

        /**
         * @param serviceTlocColor Service TLOC color, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocColor(@Nullable Output<String> serviceTlocColor) {
            $.serviceTlocColor = serviceTlocColor;
            return this;
        }

        /**
         * @param serviceTlocColor Service TLOC color, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocColor(String serviceTlocColor) {
            return serviceTlocColor(Output.of(serviceTlocColor));
        }

        /**
         * @param serviceTlocEncapsulation Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
         *   - Choices: `ipsec`, `gre`, `ipsec gre`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocEncapsulation(@Nullable Output<String> serviceTlocEncapsulation) {
            $.serviceTlocEncapsulation = serviceTlocEncapsulation;
            return this;
        }

        /**
         * @param serviceTlocEncapsulation Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
         *   - Choices: `ipsec`, `gre`, `ipsec gre`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocEncapsulation(String serviceTlocEncapsulation) {
            return serviceTlocEncapsulation(Output.of(serviceTlocEncapsulation));
        }

        /**
         * @param serviceTlocIp Service TLOC IP address, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocIp(@Nullable Output<String> serviceTlocIp) {
            $.serviceTlocIp = serviceTlocIp;
            return this;
        }

        /**
         * @param serviceTlocIp Service TLOC IP address, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocIp(String serviceTlocIp) {
            return serviceTlocIp(Output.of(serviceTlocIp));
        }

        /**
         * @param serviceTlocListId Service TLOC list ID, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListId(@Nullable Output<String> serviceTlocListId) {
            $.serviceTlocListId = serviceTlocListId;
            return this;
        }

        /**
         * @param serviceTlocListId Service TLOC list ID, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListId(String serviceTlocListId) {
            return serviceTlocListId(Output.of(serviceTlocListId));
        }

        /**
         * @param serviceTlocListVersion Service TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListVersion(@Nullable Output<Integer> serviceTlocListVersion) {
            $.serviceTlocListVersion = serviceTlocListVersion;
            return this;
        }

        /**
         * @param serviceTlocListVersion Service TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListVersion(Integer serviceTlocListVersion) {
            return serviceTlocListVersion(Output.of(serviceTlocListVersion));
        }

        /**
         * @param serviceTlocLocal Service TLOC Local, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocLocal(@Nullable Output<Boolean> serviceTlocLocal) {
            $.serviceTlocLocal = serviceTlocLocal;
            return this;
        }

        /**
         * @param serviceTlocLocal Service TLOC Local, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocLocal(Boolean serviceTlocLocal) {
            return serviceTlocLocal(Output.of(serviceTlocLocal));
        }

        /**
         * @param serviceTlocRestrict Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocRestrict(@Nullable Output<Boolean> serviceTlocRestrict) {
            $.serviceTlocRestrict = serviceTlocRestrict;
            return this;
        }

        /**
         * @param serviceTlocRestrict Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocRestrict(Boolean serviceTlocRestrict) {
            return serviceTlocRestrict(Output.of(serviceTlocRestrict));
        }

        /**
         * @param serviceType Service type, Attribute conditional on `type` being equal to `service`
         *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType Service type, Attribute conditional on `type` being equal to `service`
         *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param serviceVpnId Service VPN ID, Attribute conditional on `type` being equal to `service`
         *   - Range: `0`-`65536`
         * 
         * @return builder
         * 
         */
        public Builder serviceVpnId(@Nullable Output<Integer> serviceVpnId) {
            $.serviceVpnId = serviceVpnId;
            return this;
        }

        /**
         * @param serviceVpnId Service VPN ID, Attribute conditional on `type` being equal to `service`
         *   - Range: `0`-`65536`
         * 
         * @return builder
         * 
         */
        public Builder serviceVpnId(Integer serviceVpnId) {
            return serviceVpnId(Output.of(serviceVpnId));
        }

        /**
         * @param tlocColor TLOC color, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocColor(@Nullable Output<String> tlocColor) {
            $.tlocColor = tlocColor;
            return this;
        }

        /**
         * @param tlocColor TLOC color, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocColor(String tlocColor) {
            return tlocColor(Output.of(tlocColor));
        }

        /**
         * @param tlocEncapsulation TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
         *   - Choices: `ipsec`, `gre`, `ipsec gre`
         * 
         * @return builder
         * 
         */
        public Builder tlocEncapsulation(@Nullable Output<String> tlocEncapsulation) {
            $.tlocEncapsulation = tlocEncapsulation;
            return this;
        }

        /**
         * @param tlocEncapsulation TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
         *   - Choices: `ipsec`, `gre`, `ipsec gre`
         * 
         * @return builder
         * 
         */
        public Builder tlocEncapsulation(String tlocEncapsulation) {
            return tlocEncapsulation(Output.of(tlocEncapsulation));
        }

        /**
         * @param tlocIp TLOC IP address, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocIp(@Nullable Output<String> tlocIp) {
            $.tlocIp = tlocIp;
            return this;
        }

        /**
         * @param tlocIp TLOC IP address, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocIp(String tlocIp) {
            return tlocIp(Output.of(tlocIp));
        }

        /**
         * @param tlocListId TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(@Nullable Output<String> tlocListId) {
            $.tlocListId = tlocListId;
            return this;
        }

        /**
         * @param tlocListId TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(String tlocListId) {
            return tlocListId(Output.of(tlocListId));
        }

        /**
         * @param tlocListVersion TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder tlocListVersion(@Nullable Output<Integer> tlocListVersion) {
            $.tlocListVersion = tlocListVersion;
            return this;
        }

        /**
         * @param tlocListVersion TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder tlocListVersion(Integer tlocListVersion) {
            return tlocListVersion(Output.of(tlocListVersion));
        }

        /**
         * @param type Type of set parameter
         *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of set parameter
         *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpnId DSCP, Attribute conditional on `type` being equal to `vpn`
         *   - Range: `0`-`65530`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId DSCP, Attribute conditional on `type` being equal to `vpn`
         *   - Range: `0`-`65530`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        public TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("TrafficDataPolicyDefinitionSequenceActionEntrySetParameterArgs", "type");
            }
            return $;
        }
    }

}
