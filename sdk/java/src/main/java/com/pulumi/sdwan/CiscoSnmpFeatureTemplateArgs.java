// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.CiscoSnmpFeatureTemplateCommunityArgs;
import com.pulumi.sdwan.inputs.CiscoSnmpFeatureTemplateGroupArgs;
import com.pulumi.sdwan.inputs.CiscoSnmpFeatureTemplateTrapTargetArgs;
import com.pulumi.sdwan.inputs.CiscoSnmpFeatureTemplateUserArgs;
import com.pulumi.sdwan.inputs.CiscoSnmpFeatureTemplateViewArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoSnmpFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoSnmpFeatureTemplateArgs Empty = new CiscoSnmpFeatureTemplateArgs();

    /**
     * Configure SNMP community
     * 
     */
    @Import(name="communities")
    private @Nullable Output<List<CiscoSnmpFeatureTemplateCommunityArgs>> communities;

    /**
     * @return Configure SNMP community
     * 
     */
    public Optional<Output<List<CiscoSnmpFeatureTemplateCommunityArgs>>> communities() {
        return Optional.ofNullable(this.communities);
    }

    /**
     * Set the contact for this managed node
     * 
     */
    @Import(name="contact")
    private @Nullable Output<String> contact;

    /**
     * @return Set the contact for this managed node
     * 
     */
    public Optional<Output<String>> contact() {
        return Optional.ofNullable(this.contact);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="contactVariable")
    private @Nullable Output<String> contactVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> contactVariable() {
        return Optional.ofNullable(this.contactVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Configure an SNMP group
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<CiscoSnmpFeatureTemplateGroupArgs>> groups;

    /**
     * @return Configure an SNMP group
     * 
     */
    public Optional<Output<List<CiscoSnmpFeatureTemplateGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Set the physical location of this managed node
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Set the physical location of this managed node
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="locationVariable")
    private @Nullable Output<String> locationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> locationVariable() {
        return Optional.ofNullable(this.locationVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enable or disable SNMP - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Enable or disable SNMP - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * Configure SNMP server to receive SNMP traps
     * 
     */
    @Import(name="trapTargets")
    private @Nullable Output<List<CiscoSnmpFeatureTemplateTrapTargetArgs>> trapTargets;

    /**
     * @return Configure SNMP server to receive SNMP traps
     * 
     */
    public Optional<Output<List<CiscoSnmpFeatureTemplateTrapTargetArgs>>> trapTargets() {
        return Optional.ofNullable(this.trapTargets);
    }

    /**
     * Configure an SNMP user
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<CiscoSnmpFeatureTemplateUserArgs>> users;

    /**
     * @return Configure an SNMP user
     * 
     */
    public Optional<Output<List<CiscoSnmpFeatureTemplateUserArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    /**
     * Configure a view record
     * 
     */
    @Import(name="views")
    private @Nullable Output<List<CiscoSnmpFeatureTemplateViewArgs>> views;

    /**
     * @return Configure a view record
     * 
     */
    public Optional<Output<List<CiscoSnmpFeatureTemplateViewArgs>>> views() {
        return Optional.ofNullable(this.views);
    }

    private CiscoSnmpFeatureTemplateArgs() {}

    private CiscoSnmpFeatureTemplateArgs(CiscoSnmpFeatureTemplateArgs $) {
        this.communities = $.communities;
        this.contact = $.contact;
        this.contactVariable = $.contactVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.groups = $.groups;
        this.location = $.location;
        this.locationVariable = $.locationVariable;
        this.name = $.name;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.trapTargets = $.trapTargets;
        this.users = $.users;
        this.views = $.views;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoSnmpFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoSnmpFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoSnmpFeatureTemplateArgs();
        }

        public Builder(CiscoSnmpFeatureTemplateArgs defaults) {
            $ = new CiscoSnmpFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param communities Configure SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communities(@Nullable Output<List<CiscoSnmpFeatureTemplateCommunityArgs>> communities) {
            $.communities = communities;
            return this;
        }

        /**
         * @param communities Configure SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communities(List<CiscoSnmpFeatureTemplateCommunityArgs> communities) {
            return communities(Output.of(communities));
        }

        /**
         * @param communities Configure SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communities(CiscoSnmpFeatureTemplateCommunityArgs... communities) {
            return communities(List.of(communities));
        }

        /**
         * @param contact Set the contact for this managed node
         * 
         * @return builder
         * 
         */
        public Builder contact(@Nullable Output<String> contact) {
            $.contact = contact;
            return this;
        }

        /**
         * @param contact Set the contact for this managed node
         * 
         * @return builder
         * 
         */
        public Builder contact(String contact) {
            return contact(Output.of(contact));
        }

        /**
         * @param contactVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder contactVariable(@Nullable Output<String> contactVariable) {
            $.contactVariable = contactVariable;
            return this;
        }

        /**
         * @param contactVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder contactVariable(String contactVariable) {
            return contactVariable(Output.of(contactVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param groups Configure an SNMP group
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<CiscoSnmpFeatureTemplateGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups Configure an SNMP group
         * 
         * @return builder
         * 
         */
        public Builder groups(List<CiscoSnmpFeatureTemplateGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups Configure an SNMP group
         * 
         * @return builder
         * 
         */
        public Builder groups(CiscoSnmpFeatureTemplateGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param location Set the physical location of this managed node
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Set the physical location of this managed node
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param locationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder locationVariable(@Nullable Output<String> locationVariable) {
            $.locationVariable = locationVariable;
            return this;
        }

        /**
         * @param locationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder locationVariable(String locationVariable) {
            return locationVariable(Output.of(locationVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param shutdown Enable or disable SNMP - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Enable or disable SNMP - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param trapTargets Configure SNMP server to receive SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder trapTargets(@Nullable Output<List<CiscoSnmpFeatureTemplateTrapTargetArgs>> trapTargets) {
            $.trapTargets = trapTargets;
            return this;
        }

        /**
         * @param trapTargets Configure SNMP server to receive SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder trapTargets(List<CiscoSnmpFeatureTemplateTrapTargetArgs> trapTargets) {
            return trapTargets(Output.of(trapTargets));
        }

        /**
         * @param trapTargets Configure SNMP server to receive SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder trapTargets(CiscoSnmpFeatureTemplateTrapTargetArgs... trapTargets) {
            return trapTargets(List.of(trapTargets));
        }

        /**
         * @param users Configure an SNMP user
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<CiscoSnmpFeatureTemplateUserArgs>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users Configure an SNMP user
         * 
         * @return builder
         * 
         */
        public Builder users(List<CiscoSnmpFeatureTemplateUserArgs> users) {
            return users(Output.of(users));
        }

        /**
         * @param users Configure an SNMP user
         * 
         * @return builder
         * 
         */
        public Builder users(CiscoSnmpFeatureTemplateUserArgs... users) {
            return users(List.of(users));
        }

        /**
         * @param views Configure a view record
         * 
         * @return builder
         * 
         */
        public Builder views(@Nullable Output<List<CiscoSnmpFeatureTemplateViewArgs>> views) {
            $.views = views;
            return this;
        }

        /**
         * @param views Configure a view record
         * 
         * @return builder
         * 
         */
        public Builder views(List<CiscoSnmpFeatureTemplateViewArgs> views) {
            return views(Output.of(views));
        }

        /**
         * @param views Configure a view record
         * 
         * @return builder
         * 
         */
        public Builder views(CiscoSnmpFeatureTemplateViewArgs... views) {
            return views(List.of(views));
        }

        public CiscoSnmpFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoSnmpFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoSnmpFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
