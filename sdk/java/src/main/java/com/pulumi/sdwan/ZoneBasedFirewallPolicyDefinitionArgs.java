// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs;
import com.pulumi.sdwan.inputs.ZoneBasedFirewallPolicyDefinitionRuleArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneBasedFirewallPolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneBasedFirewallPolicyDefinitionArgs Empty = new ZoneBasedFirewallPolicyDefinitionArgs();

    /**
     * , Attribute conditional on `mode` being equal to `security`
     * 
     */
    @Import(name="applyZonePairs")
    private @Nullable Output<List<ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs>> applyZonePairs;

    /**
     * @return , Attribute conditional on `mode` being equal to `security`
     * 
     */
    public Optional<Output<List<ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs>>> applyZonePairs() {
        return Optional.ofNullable(this.applyZonePairs);
    }

    /**
     * Default Action
     *   - Choices: `pass`, `drop`
     * 
     */
    @Import(name="defaultAction", required=true)
    private Output<String> defaultAction;

    /**
     * @return Default Action
     *   - Choices: `pass`, `drop`
     * 
     */
    public Output<String> defaultAction() {
        return this.defaultAction;
    }

    /**
     * The description of the policy definition
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the policy definition
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The name of the policy definition
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="rules", required=true)
    private Output<List<ZoneBasedFirewallPolicyDefinitionRuleArgs>> rules;

    public Output<List<ZoneBasedFirewallPolicyDefinitionRuleArgs>> rules() {
        return this.rules;
    }

    private ZoneBasedFirewallPolicyDefinitionArgs() {}

    private ZoneBasedFirewallPolicyDefinitionArgs(ZoneBasedFirewallPolicyDefinitionArgs $) {
        this.applyZonePairs = $.applyZonePairs;
        this.defaultAction = $.defaultAction;
        this.description = $.description;
        this.mode = $.mode;
        this.name = $.name;
        this.rules = $.rules;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneBasedFirewallPolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneBasedFirewallPolicyDefinitionArgs $;

        public Builder() {
            $ = new ZoneBasedFirewallPolicyDefinitionArgs();
        }

        public Builder(ZoneBasedFirewallPolicyDefinitionArgs defaults) {
            $ = new ZoneBasedFirewallPolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applyZonePairs , Attribute conditional on `mode` being equal to `security`
         * 
         * @return builder
         * 
         */
        public Builder applyZonePairs(@Nullable Output<List<ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs>> applyZonePairs) {
            $.applyZonePairs = applyZonePairs;
            return this;
        }

        /**
         * @param applyZonePairs , Attribute conditional on `mode` being equal to `security`
         * 
         * @return builder
         * 
         */
        public Builder applyZonePairs(List<ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs> applyZonePairs) {
            return applyZonePairs(Output.of(applyZonePairs));
        }

        /**
         * @param applyZonePairs , Attribute conditional on `mode` being equal to `security`
         * 
         * @return builder
         * 
         */
        public Builder applyZonePairs(ZoneBasedFirewallPolicyDefinitionApplyZonePairArgs... applyZonePairs) {
            return applyZonePairs(List.of(applyZonePairs));
        }

        /**
         * @param defaultAction Default Action
         *   - Choices: `pass`, `drop`
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(Output<String> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        /**
         * @param defaultAction Default Action
         *   - Choices: `pass`, `drop`
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(String defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        /**
         * @param description The description of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder rules(Output<List<ZoneBasedFirewallPolicyDefinitionRuleArgs>> rules) {
            $.rules = rules;
            return this;
        }

        public Builder rules(List<ZoneBasedFirewallPolicyDefinitionRuleArgs> rules) {
            return rules(Output.of(rules));
        }

        public Builder rules(ZoneBasedFirewallPolicyDefinitionRuleArgs... rules) {
            return rules(List.of(rules));
        }

        public ZoneBasedFirewallPolicyDefinitionArgs build() {
            if ($.defaultAction == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionArgs", "defaultAction");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionArgs", "description");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionArgs", "mode");
            }
            if ($.rules == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionArgs", "rules");
            }
            return $;
        }
    }

}
