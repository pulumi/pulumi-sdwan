// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRuleSetPolicyDefinitionRule {
    /**
     * @return Destination data FQDN prefix list ID
     * 
     */
    private String destinationDataFqdnPrefixListId;
    /**
     * @return Destination data FQDN prefix list version
     * 
     */
    private Integer destinationDataFqdnPrefixListVersion;
    /**
     * @return Destination data IPv4 prefix list ID
     * 
     */
    private String destinationDataIpv4PrefixListId;
    /**
     * @return Destination data IPv4 prefix list version
     * 
     */
    private Integer destinationDataIpv4PrefixListVersion;
    /**
     * @return Destination fully qualified domain name
     * 
     */
    private String destinationFqdn;
    /**
     * @return Destination geo location
     * 
     */
    private String destinationGeoLocation;
    /**
     * @return Destination geo location list ID
     * 
     */
    private String destinationGeoLocationListId;
    /**
     * @return Destination geo location list version
     * 
     */
    private Integer destinationGeoLocationListVersion;
    /**
     * @return Destination IPv4 prefix
     * 
     */
    private String destinationIpv4Prefix;
    /**
     * @return Destination IPv4 prefix variable name
     * 
     */
    private String destinationIpv4PrefixVariable;
    /**
     * @return Destination object group ID
     * 
     */
    private String destinationObjectGroupId;
    /**
     * @return Destination object group version
     * 
     */
    private Integer destinationObjectGroupVersion;
    /**
     * @return Destination port or range of ports
     * 
     */
    private String destinationPort;
    /**
     * @return Destination port list ID
     * 
     */
    private String destinationPortListId;
    /**
     * @return Destination port list version
     * 
     */
    private Integer destinationPortListVersion;
    /**
     * @return The name of the rule
     * 
     */
    private String name;
    /**
     * @return The order of the rule
     * 
     */
    private Integer order;
    /**
     * @return Protocol name
     * 
     */
    private String protocol;
    /**
     * @return Protocol list ID
     * 
     */
    private String protocolListId;
    /**
     * @return Protocol list version
     * 
     */
    private Integer protocolListVersion;
    /**
     * @return Protocol number
     * 
     */
    private Integer protocolNumber;
    /**
     * @return Source data FQDN prefix list ID
     * 
     */
    private String sourceDataFqdnPrefixListId;
    /**
     * @return Source data FQDN prefix list version
     * 
     */
    private Integer sourceDataFqdnPrefixListVersion;
    /**
     * @return Source data IPv4 prefix list ID
     * 
     */
    private String sourceDataIpv4PrefixListId;
    /**
     * @return Source data IPv4 prefix list version
     * 
     */
    private Integer sourceDataIpv4PrefixListVersion;
    /**
     * @return Source fully qualified domain name
     * 
     */
    private String sourceFqdn;
    /**
     * @return Source geo location
     * 
     */
    private String sourceGeoLocation;
    /**
     * @return Source geo location list ID
     * 
     */
    private String sourceGeoLocationListId;
    /**
     * @return Source geo location list version
     * 
     */
    private Integer sourceGeoLocationListVersion;
    /**
     * @return Source IPv4 prefix
     * 
     */
    private String sourceIpv4Prefix;
    /**
     * @return Source IPv4 prefix variable name
     * 
     */
    private String sourceIpv4PrefixVariable;
    /**
     * @return Source object group ID
     * 
     */
    private String sourceObjectGroupId;
    /**
     * @return Source object group version
     * 
     */
    private Integer sourceObjectGroupVersion;
    /**
     * @return Source port or range of ports
     * 
     */
    private String sourcePort;
    /**
     * @return Source port list ID
     * 
     */
    private String sourcePortListId;
    /**
     * @return Source port list version
     * 
     */
    private Integer sourcePortListVersion;

    private GetRuleSetPolicyDefinitionRule() {}
    /**
     * @return Destination data FQDN prefix list ID
     * 
     */
    public String destinationDataFqdnPrefixListId() {
        return this.destinationDataFqdnPrefixListId;
    }
    /**
     * @return Destination data FQDN prefix list version
     * 
     */
    public Integer destinationDataFqdnPrefixListVersion() {
        return this.destinationDataFqdnPrefixListVersion;
    }
    /**
     * @return Destination data IPv4 prefix list ID
     * 
     */
    public String destinationDataIpv4PrefixListId() {
        return this.destinationDataIpv4PrefixListId;
    }
    /**
     * @return Destination data IPv4 prefix list version
     * 
     */
    public Integer destinationDataIpv4PrefixListVersion() {
        return this.destinationDataIpv4PrefixListVersion;
    }
    /**
     * @return Destination fully qualified domain name
     * 
     */
    public String destinationFqdn() {
        return this.destinationFqdn;
    }
    /**
     * @return Destination geo location
     * 
     */
    public String destinationGeoLocation() {
        return this.destinationGeoLocation;
    }
    /**
     * @return Destination geo location list ID
     * 
     */
    public String destinationGeoLocationListId() {
        return this.destinationGeoLocationListId;
    }
    /**
     * @return Destination geo location list version
     * 
     */
    public Integer destinationGeoLocationListVersion() {
        return this.destinationGeoLocationListVersion;
    }
    /**
     * @return Destination IPv4 prefix
     * 
     */
    public String destinationIpv4Prefix() {
        return this.destinationIpv4Prefix;
    }
    /**
     * @return Destination IPv4 prefix variable name
     * 
     */
    public String destinationIpv4PrefixVariable() {
        return this.destinationIpv4PrefixVariable;
    }
    /**
     * @return Destination object group ID
     * 
     */
    public String destinationObjectGroupId() {
        return this.destinationObjectGroupId;
    }
    /**
     * @return Destination object group version
     * 
     */
    public Integer destinationObjectGroupVersion() {
        return this.destinationObjectGroupVersion;
    }
    /**
     * @return Destination port or range of ports
     * 
     */
    public String destinationPort() {
        return this.destinationPort;
    }
    /**
     * @return Destination port list ID
     * 
     */
    public String destinationPortListId() {
        return this.destinationPortListId;
    }
    /**
     * @return Destination port list version
     * 
     */
    public Integer destinationPortListVersion() {
        return this.destinationPortListVersion;
    }
    /**
     * @return The name of the rule
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The order of the rule
     * 
     */
    public Integer order() {
        return this.order;
    }
    /**
     * @return Protocol name
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Protocol list ID
     * 
     */
    public String protocolListId() {
        return this.protocolListId;
    }
    /**
     * @return Protocol list version
     * 
     */
    public Integer protocolListVersion() {
        return this.protocolListVersion;
    }
    /**
     * @return Protocol number
     * 
     */
    public Integer protocolNumber() {
        return this.protocolNumber;
    }
    /**
     * @return Source data FQDN prefix list ID
     * 
     */
    public String sourceDataFqdnPrefixListId() {
        return this.sourceDataFqdnPrefixListId;
    }
    /**
     * @return Source data FQDN prefix list version
     * 
     */
    public Integer sourceDataFqdnPrefixListVersion() {
        return this.sourceDataFqdnPrefixListVersion;
    }
    /**
     * @return Source data IPv4 prefix list ID
     * 
     */
    public String sourceDataIpv4PrefixListId() {
        return this.sourceDataIpv4PrefixListId;
    }
    /**
     * @return Source data IPv4 prefix list version
     * 
     */
    public Integer sourceDataIpv4PrefixListVersion() {
        return this.sourceDataIpv4PrefixListVersion;
    }
    /**
     * @return Source fully qualified domain name
     * 
     */
    public String sourceFqdn() {
        return this.sourceFqdn;
    }
    /**
     * @return Source geo location
     * 
     */
    public String sourceGeoLocation() {
        return this.sourceGeoLocation;
    }
    /**
     * @return Source geo location list ID
     * 
     */
    public String sourceGeoLocationListId() {
        return this.sourceGeoLocationListId;
    }
    /**
     * @return Source geo location list version
     * 
     */
    public Integer sourceGeoLocationListVersion() {
        return this.sourceGeoLocationListVersion;
    }
    /**
     * @return Source IPv4 prefix
     * 
     */
    public String sourceIpv4Prefix() {
        return this.sourceIpv4Prefix;
    }
    /**
     * @return Source IPv4 prefix variable name
     * 
     */
    public String sourceIpv4PrefixVariable() {
        return this.sourceIpv4PrefixVariable;
    }
    /**
     * @return Source object group ID
     * 
     */
    public String sourceObjectGroupId() {
        return this.sourceObjectGroupId;
    }
    /**
     * @return Source object group version
     * 
     */
    public Integer sourceObjectGroupVersion() {
        return this.sourceObjectGroupVersion;
    }
    /**
     * @return Source port or range of ports
     * 
     */
    public String sourcePort() {
        return this.sourcePort;
    }
    /**
     * @return Source port list ID
     * 
     */
    public String sourcePortListId() {
        return this.sourcePortListId;
    }
    /**
     * @return Source port list version
     * 
     */
    public Integer sourcePortListVersion() {
        return this.sourcePortListVersion;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRuleSetPolicyDefinitionRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationDataFqdnPrefixListId;
        private Integer destinationDataFqdnPrefixListVersion;
        private String destinationDataIpv4PrefixListId;
        private Integer destinationDataIpv4PrefixListVersion;
        private String destinationFqdn;
        private String destinationGeoLocation;
        private String destinationGeoLocationListId;
        private Integer destinationGeoLocationListVersion;
        private String destinationIpv4Prefix;
        private String destinationIpv4PrefixVariable;
        private String destinationObjectGroupId;
        private Integer destinationObjectGroupVersion;
        private String destinationPort;
        private String destinationPortListId;
        private Integer destinationPortListVersion;
        private String name;
        private Integer order;
        private String protocol;
        private String protocolListId;
        private Integer protocolListVersion;
        private Integer protocolNumber;
        private String sourceDataFqdnPrefixListId;
        private Integer sourceDataFqdnPrefixListVersion;
        private String sourceDataIpv4PrefixListId;
        private Integer sourceDataIpv4PrefixListVersion;
        private String sourceFqdn;
        private String sourceGeoLocation;
        private String sourceGeoLocationListId;
        private Integer sourceGeoLocationListVersion;
        private String sourceIpv4Prefix;
        private String sourceIpv4PrefixVariable;
        private String sourceObjectGroupId;
        private Integer sourceObjectGroupVersion;
        private String sourcePort;
        private String sourcePortListId;
        private Integer sourcePortListVersion;
        public Builder() {}
        public Builder(GetRuleSetPolicyDefinitionRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationDataFqdnPrefixListId = defaults.destinationDataFqdnPrefixListId;
    	      this.destinationDataFqdnPrefixListVersion = defaults.destinationDataFqdnPrefixListVersion;
    	      this.destinationDataIpv4PrefixListId = defaults.destinationDataIpv4PrefixListId;
    	      this.destinationDataIpv4PrefixListVersion = defaults.destinationDataIpv4PrefixListVersion;
    	      this.destinationFqdn = defaults.destinationFqdn;
    	      this.destinationGeoLocation = defaults.destinationGeoLocation;
    	      this.destinationGeoLocationListId = defaults.destinationGeoLocationListId;
    	      this.destinationGeoLocationListVersion = defaults.destinationGeoLocationListVersion;
    	      this.destinationIpv4Prefix = defaults.destinationIpv4Prefix;
    	      this.destinationIpv4PrefixVariable = defaults.destinationIpv4PrefixVariable;
    	      this.destinationObjectGroupId = defaults.destinationObjectGroupId;
    	      this.destinationObjectGroupVersion = defaults.destinationObjectGroupVersion;
    	      this.destinationPort = defaults.destinationPort;
    	      this.destinationPortListId = defaults.destinationPortListId;
    	      this.destinationPortListVersion = defaults.destinationPortListVersion;
    	      this.name = defaults.name;
    	      this.order = defaults.order;
    	      this.protocol = defaults.protocol;
    	      this.protocolListId = defaults.protocolListId;
    	      this.protocolListVersion = defaults.protocolListVersion;
    	      this.protocolNumber = defaults.protocolNumber;
    	      this.sourceDataFqdnPrefixListId = defaults.sourceDataFqdnPrefixListId;
    	      this.sourceDataFqdnPrefixListVersion = defaults.sourceDataFqdnPrefixListVersion;
    	      this.sourceDataIpv4PrefixListId = defaults.sourceDataIpv4PrefixListId;
    	      this.sourceDataIpv4PrefixListVersion = defaults.sourceDataIpv4PrefixListVersion;
    	      this.sourceFqdn = defaults.sourceFqdn;
    	      this.sourceGeoLocation = defaults.sourceGeoLocation;
    	      this.sourceGeoLocationListId = defaults.sourceGeoLocationListId;
    	      this.sourceGeoLocationListVersion = defaults.sourceGeoLocationListVersion;
    	      this.sourceIpv4Prefix = defaults.sourceIpv4Prefix;
    	      this.sourceIpv4PrefixVariable = defaults.sourceIpv4PrefixVariable;
    	      this.sourceObjectGroupId = defaults.sourceObjectGroupId;
    	      this.sourceObjectGroupVersion = defaults.sourceObjectGroupVersion;
    	      this.sourcePort = defaults.sourcePort;
    	      this.sourcePortListId = defaults.sourcePortListId;
    	      this.sourcePortListVersion = defaults.sourcePortListVersion;
        }

        @CustomType.Setter
        public Builder destinationDataFqdnPrefixListId(String destinationDataFqdnPrefixListId) {
            if (destinationDataFqdnPrefixListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationDataFqdnPrefixListId");
            }
            this.destinationDataFqdnPrefixListId = destinationDataFqdnPrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataFqdnPrefixListVersion(Integer destinationDataFqdnPrefixListVersion) {
            if (destinationDataFqdnPrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationDataFqdnPrefixListVersion");
            }
            this.destinationDataFqdnPrefixListVersion = destinationDataFqdnPrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv4PrefixListId(String destinationDataIpv4PrefixListId) {
            if (destinationDataIpv4PrefixListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationDataIpv4PrefixListId");
            }
            this.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataIpv4PrefixListVersion(Integer destinationDataIpv4PrefixListVersion) {
            if (destinationDataIpv4PrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationDataIpv4PrefixListVersion");
            }
            this.destinationDataIpv4PrefixListVersion = destinationDataIpv4PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationFqdn(String destinationFqdn) {
            if (destinationFqdn == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationFqdn");
            }
            this.destinationFqdn = destinationFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder destinationGeoLocation(String destinationGeoLocation) {
            if (destinationGeoLocation == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationGeoLocation");
            }
            this.destinationGeoLocation = destinationGeoLocation;
            return this;
        }
        @CustomType.Setter
        public Builder destinationGeoLocationListId(String destinationGeoLocationListId) {
            if (destinationGeoLocationListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationGeoLocationListId");
            }
            this.destinationGeoLocationListId = destinationGeoLocationListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationGeoLocationListVersion(Integer destinationGeoLocationListVersion) {
            if (destinationGeoLocationListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationGeoLocationListVersion");
            }
            this.destinationGeoLocationListVersion = destinationGeoLocationListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIpv4Prefix(String destinationIpv4Prefix) {
            if (destinationIpv4Prefix == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationIpv4Prefix");
            }
            this.destinationIpv4Prefix = destinationIpv4Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIpv4PrefixVariable(String destinationIpv4PrefixVariable) {
            if (destinationIpv4PrefixVariable == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationIpv4PrefixVariable");
            }
            this.destinationIpv4PrefixVariable = destinationIpv4PrefixVariable;
            return this;
        }
        @CustomType.Setter
        public Builder destinationObjectGroupId(String destinationObjectGroupId) {
            if (destinationObjectGroupId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationObjectGroupId");
            }
            this.destinationObjectGroupId = destinationObjectGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationObjectGroupVersion(Integer destinationObjectGroupVersion) {
            if (destinationObjectGroupVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationObjectGroupVersion");
            }
            this.destinationObjectGroupVersion = destinationObjectGroupVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPort(String destinationPort) {
            if (destinationPort == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationPort");
            }
            this.destinationPort = destinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortListId(String destinationPortListId) {
            if (destinationPortListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationPortListId");
            }
            this.destinationPortListId = destinationPortListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortListVersion(Integer destinationPortListVersion) {
            if (destinationPortListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "destinationPortListVersion");
            }
            this.destinationPortListVersion = destinationPortListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder order(Integer order) {
            if (order == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "order");
            }
            this.order = order;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder protocolListId(String protocolListId) {
            if (protocolListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "protocolListId");
            }
            this.protocolListId = protocolListId;
            return this;
        }
        @CustomType.Setter
        public Builder protocolListVersion(Integer protocolListVersion) {
            if (protocolListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "protocolListVersion");
            }
            this.protocolListVersion = protocolListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder protocolNumber(Integer protocolNumber) {
            if (protocolNumber == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "protocolNumber");
            }
            this.protocolNumber = protocolNumber;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataFqdnPrefixListId(String sourceDataFqdnPrefixListId) {
            if (sourceDataFqdnPrefixListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceDataFqdnPrefixListId");
            }
            this.sourceDataFqdnPrefixListId = sourceDataFqdnPrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataFqdnPrefixListVersion(Integer sourceDataFqdnPrefixListVersion) {
            if (sourceDataFqdnPrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceDataFqdnPrefixListVersion");
            }
            this.sourceDataFqdnPrefixListVersion = sourceDataFqdnPrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv4PrefixListId(String sourceDataIpv4PrefixListId) {
            if (sourceDataIpv4PrefixListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceDataIpv4PrefixListId");
            }
            this.sourceDataIpv4PrefixListId = sourceDataIpv4PrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataIpv4PrefixListVersion(Integer sourceDataIpv4PrefixListVersion) {
            if (sourceDataIpv4PrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceDataIpv4PrefixListVersion");
            }
            this.sourceDataIpv4PrefixListVersion = sourceDataIpv4PrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceFqdn(String sourceFqdn) {
            if (sourceFqdn == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceFqdn");
            }
            this.sourceFqdn = sourceFqdn;
            return this;
        }
        @CustomType.Setter
        public Builder sourceGeoLocation(String sourceGeoLocation) {
            if (sourceGeoLocation == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceGeoLocation");
            }
            this.sourceGeoLocation = sourceGeoLocation;
            return this;
        }
        @CustomType.Setter
        public Builder sourceGeoLocationListId(String sourceGeoLocationListId) {
            if (sourceGeoLocationListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceGeoLocationListId");
            }
            this.sourceGeoLocationListId = sourceGeoLocationListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceGeoLocationListVersion(Integer sourceGeoLocationListVersion) {
            if (sourceGeoLocationListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceGeoLocationListVersion");
            }
            this.sourceGeoLocationListVersion = sourceGeoLocationListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpv4Prefix(String sourceIpv4Prefix) {
            if (sourceIpv4Prefix == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceIpv4Prefix");
            }
            this.sourceIpv4Prefix = sourceIpv4Prefix;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpv4PrefixVariable(String sourceIpv4PrefixVariable) {
            if (sourceIpv4PrefixVariable == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceIpv4PrefixVariable");
            }
            this.sourceIpv4PrefixVariable = sourceIpv4PrefixVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceObjectGroupId(String sourceObjectGroupId) {
            if (sourceObjectGroupId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceObjectGroupId");
            }
            this.sourceObjectGroupId = sourceObjectGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceObjectGroupVersion(Integer sourceObjectGroupVersion) {
            if (sourceObjectGroupVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourceObjectGroupVersion");
            }
            this.sourceObjectGroupVersion = sourceObjectGroupVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(String sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortListId(String sourcePortListId) {
            if (sourcePortListId == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourcePortListId");
            }
            this.sourcePortListId = sourcePortListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortListVersion(Integer sourcePortListVersion) {
            if (sourcePortListVersion == null) {
              throw new MissingRequiredPropertyException("GetRuleSetPolicyDefinitionRule", "sourcePortListVersion");
            }
            this.sourcePortListVersion = sourcePortListVersion;
            return this;
        }
        public GetRuleSetPolicyDefinitionRule build() {
            final var _resultValue = new GetRuleSetPolicyDefinitionRule();
            _resultValue.destinationDataFqdnPrefixListId = destinationDataFqdnPrefixListId;
            _resultValue.destinationDataFqdnPrefixListVersion = destinationDataFqdnPrefixListVersion;
            _resultValue.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            _resultValue.destinationDataIpv4PrefixListVersion = destinationDataIpv4PrefixListVersion;
            _resultValue.destinationFqdn = destinationFqdn;
            _resultValue.destinationGeoLocation = destinationGeoLocation;
            _resultValue.destinationGeoLocationListId = destinationGeoLocationListId;
            _resultValue.destinationGeoLocationListVersion = destinationGeoLocationListVersion;
            _resultValue.destinationIpv4Prefix = destinationIpv4Prefix;
            _resultValue.destinationIpv4PrefixVariable = destinationIpv4PrefixVariable;
            _resultValue.destinationObjectGroupId = destinationObjectGroupId;
            _resultValue.destinationObjectGroupVersion = destinationObjectGroupVersion;
            _resultValue.destinationPort = destinationPort;
            _resultValue.destinationPortListId = destinationPortListId;
            _resultValue.destinationPortListVersion = destinationPortListVersion;
            _resultValue.name = name;
            _resultValue.order = order;
            _resultValue.protocol = protocol;
            _resultValue.protocolListId = protocolListId;
            _resultValue.protocolListVersion = protocolListVersion;
            _resultValue.protocolNumber = protocolNumber;
            _resultValue.sourceDataFqdnPrefixListId = sourceDataFqdnPrefixListId;
            _resultValue.sourceDataFqdnPrefixListVersion = sourceDataFqdnPrefixListVersion;
            _resultValue.sourceDataIpv4PrefixListId = sourceDataIpv4PrefixListId;
            _resultValue.sourceDataIpv4PrefixListVersion = sourceDataIpv4PrefixListVersion;
            _resultValue.sourceFqdn = sourceFqdn;
            _resultValue.sourceGeoLocation = sourceGeoLocation;
            _resultValue.sourceGeoLocationListId = sourceGeoLocationListId;
            _resultValue.sourceGeoLocationListVersion = sourceGeoLocationListVersion;
            _resultValue.sourceIpv4Prefix = sourceIpv4Prefix;
            _resultValue.sourceIpv4PrefixVariable = sourceIpv4PrefixVariable;
            _resultValue.sourceObjectGroupId = sourceObjectGroupId;
            _resultValue.sourceObjectGroupVersion = sourceObjectGroupVersion;
            _resultValue.sourcePort = sourcePort;
            _resultValue.sourcePortListId = sourcePortListId;
            _resultValue.sourcePortListVersion = sourcePortListVersion;
            return _resultValue;
        }
    }
}
