// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Ipv4AclPolicyDefinitionSequenceMatchEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final Ipv4AclPolicyDefinitionSequenceMatchEntryArgs Empty = new Ipv4AclPolicyDefinitionSequenceMatchEntryArgs();

    /**
     * Class map ID, Attribute conditional on `type` being equal to `class`
     * 
     */
    @Import(name="classMapId")
    private @Nullable Output<String> classMapId;

    /**
     * @return Class map ID, Attribute conditional on `type` being equal to `class`
     * 
     */
    public Optional<Output<String>> classMapId() {
        return Optional.ofNullable(this.classMapId);
    }

    /**
     * Class map version
     * 
     */
    @Import(name="classMapVersion")
    private @Nullable Output<Integer> classMapVersion;

    /**
     * @return Class map version
     * 
     */
    public Optional<Output<Integer>> classMapVersion() {
        return Optional.ofNullable(this.classMapVersion);
    }

    /**
     * Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     * 
     */
    @Import(name="destinationDataIpv4PrefixListId")
    private @Nullable Output<String> destinationDataIpv4PrefixListId;

    /**
     * @return Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     * 
     */
    public Optional<Output<String>> destinationDataIpv4PrefixListId() {
        return Optional.ofNullable(this.destinationDataIpv4PrefixListId);
    }

    /**
     * Destination data IPv4 prefix list version
     * 
     */
    @Import(name="destinationDataIpv4PrefixListVersion")
    private @Nullable Output<Integer> destinationDataIpv4PrefixListVersion;

    /**
     * @return Destination data IPv4 prefix list version
     * 
     */
    public Optional<Output<Integer>> destinationDataIpv4PrefixListVersion() {
        return Optional.ofNullable(this.destinationDataIpv4PrefixListVersion);
    }

    /**
     * Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    @Import(name="destinationIp")
    private @Nullable Output<String> destinationIp;

    /**
     * @return Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    public Optional<Output<String>> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }

    /**
     * Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
     * 
     */
    @Import(name="destinationPorts")
    private @Nullable Output<String> destinationPorts;

    /**
     * @return Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
     * 
     */
    public Optional<Output<String>> destinationPorts() {
        return Optional.ofNullable(this.destinationPorts);
    }

    /**
     * DSCP value, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     * 
     */
    @Import(name="dscp")
    private @Nullable Output<Integer> dscp;

    /**
     * @return DSCP value, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     * 
     */
    public Optional<Output<Integer>> dscp() {
        return Optional.ofNullable(this.dscp);
    }

    /**
     * ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     * 
     */
    @Import(name="icmpMessage")
    private @Nullable Output<String> icmpMessage;

    /**
     * @return ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     * 
     */
    public Optional<Output<String>> icmpMessage() {
        return Optional.ofNullable(this.icmpMessage);
    }

    /**
     * Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="packetLength")
    private @Nullable Output<Integer> packetLength;

    /**
     * @return Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> packetLength() {
        return Optional.ofNullable(this.packetLength);
    }

    /**
     * PLP - priority, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `high`, `low`
     * 
     */
    @Import(name="priority")
    private @Nullable Output<String> priority;

    /**
     * @return PLP - priority, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `high`, `low`
     * 
     */
    public Optional<Output<String>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     * 
     */
    @Import(name="sourceDataIpv4PrefixListId")
    private @Nullable Output<String> sourceDataIpv4PrefixListId;

    /**
     * @return Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     * 
     */
    public Optional<Output<String>> sourceDataIpv4PrefixListId() {
        return Optional.ofNullable(this.sourceDataIpv4PrefixListId);
    }

    /**
     * Source data IPv4 prefix list version
     * 
     */
    @Import(name="sourceDataIpv4PrefixListVersion")
    private @Nullable Output<Integer> sourceDataIpv4PrefixListVersion;

    /**
     * @return Source data IPv4 prefix list version
     * 
     */
    public Optional<Output<Integer>> sourceDataIpv4PrefixListVersion() {
        return Optional.ofNullable(this.sourceDataIpv4PrefixListVersion);
    }

    /**
     * Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    @Import(name="sourcePorts")
    private @Nullable Output<String> sourcePorts;

    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    public Optional<Output<String>> sourcePorts() {
        return Optional.ofNullable(this.sourcePorts);
    }

    /**
     * TCP parameters, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     * 
     */
    @Import(name="tcp")
    private @Nullable Output<String> tcp;

    /**
     * @return TCP parameters, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     * 
     */
    public Optional<Output<String>> tcp() {
        return Optional.ofNullable(this.tcp);
    }

    /**
     * Type of match entry
     *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of match entry
     *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private Ipv4AclPolicyDefinitionSequenceMatchEntryArgs() {}

    private Ipv4AclPolicyDefinitionSequenceMatchEntryArgs(Ipv4AclPolicyDefinitionSequenceMatchEntryArgs $) {
        this.classMapId = $.classMapId;
        this.classMapVersion = $.classMapVersion;
        this.destinationDataIpv4PrefixListId = $.destinationDataIpv4PrefixListId;
        this.destinationDataIpv4PrefixListVersion = $.destinationDataIpv4PrefixListVersion;
        this.destinationIp = $.destinationIp;
        this.destinationPorts = $.destinationPorts;
        this.dscp = $.dscp;
        this.icmpMessage = $.icmpMessage;
        this.packetLength = $.packetLength;
        this.priority = $.priority;
        this.protocol = $.protocol;
        this.sourceDataIpv4PrefixListId = $.sourceDataIpv4PrefixListId;
        this.sourceDataIpv4PrefixListVersion = $.sourceDataIpv4PrefixListVersion;
        this.sourceIp = $.sourceIp;
        this.sourcePorts = $.sourcePorts;
        this.tcp = $.tcp;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Ipv4AclPolicyDefinitionSequenceMatchEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Ipv4AclPolicyDefinitionSequenceMatchEntryArgs $;

        public Builder() {
            $ = new Ipv4AclPolicyDefinitionSequenceMatchEntryArgs();
        }

        public Builder(Ipv4AclPolicyDefinitionSequenceMatchEntryArgs defaults) {
            $ = new Ipv4AclPolicyDefinitionSequenceMatchEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param classMapId Class map ID, Attribute conditional on `type` being equal to `class`
         * 
         * @return builder
         * 
         */
        public Builder classMapId(@Nullable Output<String> classMapId) {
            $.classMapId = classMapId;
            return this;
        }

        /**
         * @param classMapId Class map ID, Attribute conditional on `type` being equal to `class`
         * 
         * @return builder
         * 
         */
        public Builder classMapId(String classMapId) {
            return classMapId(Output.of(classMapId));
        }

        /**
         * @param classMapVersion Class map version
         * 
         * @return builder
         * 
         */
        public Builder classMapVersion(@Nullable Output<Integer> classMapVersion) {
            $.classMapVersion = classMapVersion;
            return this;
        }

        /**
         * @param classMapVersion Class map version
         * 
         * @return builder
         * 
         */
        public Builder classMapVersion(Integer classMapVersion) {
            return classMapVersion(Output.of(classMapVersion));
        }

        /**
         * @param destinationDataIpv4PrefixListId Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListId(@Nullable Output<String> destinationDataIpv4PrefixListId) {
            $.destinationDataIpv4PrefixListId = destinationDataIpv4PrefixListId;
            return this;
        }

        /**
         * @param destinationDataIpv4PrefixListId Destination data IPv4 prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListId(String destinationDataIpv4PrefixListId) {
            return destinationDataIpv4PrefixListId(Output.of(destinationDataIpv4PrefixListId));
        }

        /**
         * @param destinationDataIpv4PrefixListVersion Destination data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListVersion(@Nullable Output<Integer> destinationDataIpv4PrefixListVersion) {
            $.destinationDataIpv4PrefixListVersion = destinationDataIpv4PrefixListVersion;
            return this;
        }

        /**
         * @param destinationDataIpv4PrefixListVersion Destination data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv4PrefixListVersion(Integer destinationDataIpv4PrefixListVersion) {
            return destinationDataIpv4PrefixListVersion(Output.of(destinationDataIpv4PrefixListVersion));
        }

        /**
         * @param destinationIp Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(@Nullable Output<String> destinationIp) {
            $.destinationIp = destinationIp;
            return this;
        }

        /**
         * @param destinationIp Destination IP prefix, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(String destinationIp) {
            return destinationIp(Output.of(destinationIp));
        }

        /**
         * @param destinationPorts Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
         * 
         * @return builder
         * 
         */
        public Builder destinationPorts(@Nullable Output<String> destinationPorts) {
            $.destinationPorts = destinationPorts;
            return this;
        }

        /**
         * @param destinationPorts Destination ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `destinationPort`
         * 
         * @return builder
         * 
         */
        public Builder destinationPorts(String destinationPorts) {
            return destinationPorts(Output.of(destinationPorts));
        }

        /**
         * @param dscp DSCP value, Attribute conditional on `type` being equal to `dscp`
         *   - Range: `0`-`63`
         * 
         * @return builder
         * 
         */
        public Builder dscp(@Nullable Output<Integer> dscp) {
            $.dscp = dscp;
            return this;
        }

        /**
         * @param dscp DSCP value, Attribute conditional on `type` being equal to `dscp`
         *   - Range: `0`-`63`
         * 
         * @return builder
         * 
         */
        public Builder dscp(Integer dscp) {
            return dscp(Output.of(dscp));
        }

        /**
         * @param icmpMessage ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder icmpMessage(@Nullable Output<String> icmpMessage) {
            $.icmpMessage = icmpMessage;
            return this;
        }

        /**
         * @param icmpMessage ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder icmpMessage(String icmpMessage) {
            return icmpMessage(Output.of(icmpMessage));
        }

        /**
         * @param packetLength Packet length, Attribute conditional on `type` being equal to `packetLength`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder packetLength(@Nullable Output<Integer> packetLength) {
            $.packetLength = packetLength;
            return this;
        }

        /**
         * @param packetLength Packet length, Attribute conditional on `type` being equal to `packetLength`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder packetLength(Integer packetLength) {
            return packetLength(Output.of(packetLength));
        }

        /**
         * @param priority PLP - priority, Attribute conditional on `type` being equal to `plp`
         *   - Choices: `high`, `low`
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<String> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority PLP - priority, Attribute conditional on `type` being equal to `plp`
         *   - Choices: `high`, `low`
         * 
         * @return builder
         * 
         */
        public Builder priority(String priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param protocol Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Single value (0-255) or multiple values separated by spaces, Attribute conditional on `type` being equal to `protocol`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sourceDataIpv4PrefixListId Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListId(@Nullable Output<String> sourceDataIpv4PrefixListId) {
            $.sourceDataIpv4PrefixListId = sourceDataIpv4PrefixListId;
            return this;
        }

        /**
         * @param sourceDataIpv4PrefixListId Source data IPv4 prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListId(String sourceDataIpv4PrefixListId) {
            return sourceDataIpv4PrefixListId(Output.of(sourceDataIpv4PrefixListId));
        }

        /**
         * @param sourceDataIpv4PrefixListVersion Source data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListVersion(@Nullable Output<Integer> sourceDataIpv4PrefixListVersion) {
            $.sourceDataIpv4PrefixListVersion = sourceDataIpv4PrefixListVersion;
            return this;
        }

        /**
         * @param sourceDataIpv4PrefixListVersion Source data IPv4 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv4PrefixListVersion(Integer sourceDataIpv4PrefixListVersion) {
            return sourceDataIpv4PrefixListVersion(Output.of(sourceDataIpv4PrefixListVersion));
        }

        /**
         * @param sourceIp Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp Source IP prefix, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourcePorts Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(@Nullable Output<String> sourcePorts) {
            $.sourcePorts = sourcePorts;
            return this;
        }

        /**
         * @param sourcePorts Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(String sourcePorts) {
            return sourcePorts(Output.of(sourcePorts));
        }

        /**
         * @param tcp TCP parameters, Attribute conditional on `type` being equal to `tcp`
         *   - Choices: `syn`
         * 
         * @return builder
         * 
         */
        public Builder tcp(@Nullable Output<String> tcp) {
            $.tcp = tcp;
            return this;
        }

        /**
         * @param tcp TCP parameters, Attribute conditional on `type` being equal to `tcp`
         *   - Choices: `syn`
         * 
         * @return builder
         * 
         */
        public Builder tcp(String tcp) {
            return tcp(Output.of(tcp));
        }

        /**
         * @param type Type of match entry
         *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of match entry
         *   - Choices: `dscp`, `sourceIp`, `destinationIp`, `class`, `packetLength`, `plp`, `sourcePort`, `destinationPort`, `sourceDataPrefixList`, `destinationDataPrefixList`, `protocol`, `tcp`, `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Ipv4AclPolicyDefinitionSequenceMatchEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("Ipv4AclPolicyDefinitionSequenceMatchEntryArgs", "type");
            }
            return $;
        }
    }

}
