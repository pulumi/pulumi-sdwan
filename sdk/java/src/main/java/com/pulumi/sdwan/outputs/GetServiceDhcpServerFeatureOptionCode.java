// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceDhcpServerFeatureOptionCode {
    /**
     * @return Set ASCII value
     * 
     */
    private String ascii;
    /**
     * @return Variable name
     * 
     */
    private String asciiVariable;
    /**
     * @return Set Option Code
     * 
     */
    private Integer code;
    /**
     * @return Variable name
     * 
     */
    private String codeVariable;
    /**
     * @return Set HEX value
     * 
     */
    private String hex;
    /**
     * @return Variable name
     * 
     */
    private String hexVariable;
    /**
     * @return Variable name
     * 
     */
    private String ipVariable;
    /**
     * @return Set ip address
     * 
     */
    private List<String> ips;

    private GetServiceDhcpServerFeatureOptionCode() {}
    /**
     * @return Set ASCII value
     * 
     */
    public String ascii() {
        return this.ascii;
    }
    /**
     * @return Variable name
     * 
     */
    public String asciiVariable() {
        return this.asciiVariable;
    }
    /**
     * @return Set Option Code
     * 
     */
    public Integer code() {
        return this.code;
    }
    /**
     * @return Variable name
     * 
     */
    public String codeVariable() {
        return this.codeVariable;
    }
    /**
     * @return Set HEX value
     * 
     */
    public String hex() {
        return this.hex;
    }
    /**
     * @return Variable name
     * 
     */
    public String hexVariable() {
        return this.hexVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipVariable() {
        return this.ipVariable;
    }
    /**
     * @return Set ip address
     * 
     */
    public List<String> ips() {
        return this.ips;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceDhcpServerFeatureOptionCode defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ascii;
        private String asciiVariable;
        private Integer code;
        private String codeVariable;
        private String hex;
        private String hexVariable;
        private String ipVariable;
        private List<String> ips;
        public Builder() {}
        public Builder(GetServiceDhcpServerFeatureOptionCode defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ascii = defaults.ascii;
    	      this.asciiVariable = defaults.asciiVariable;
    	      this.code = defaults.code;
    	      this.codeVariable = defaults.codeVariable;
    	      this.hex = defaults.hex;
    	      this.hexVariable = defaults.hexVariable;
    	      this.ipVariable = defaults.ipVariable;
    	      this.ips = defaults.ips;
        }

        @CustomType.Setter
        public Builder ascii(String ascii) {
            if (ascii == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "ascii");
            }
            this.ascii = ascii;
            return this;
        }
        @CustomType.Setter
        public Builder asciiVariable(String asciiVariable) {
            if (asciiVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "asciiVariable");
            }
            this.asciiVariable = asciiVariable;
            return this;
        }
        @CustomType.Setter
        public Builder code(Integer code) {
            if (code == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "code");
            }
            this.code = code;
            return this;
        }
        @CustomType.Setter
        public Builder codeVariable(String codeVariable) {
            if (codeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "codeVariable");
            }
            this.codeVariable = codeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hex(String hex) {
            if (hex == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "hex");
            }
            this.hex = hex;
            return this;
        }
        @CustomType.Setter
        public Builder hexVariable(String hexVariable) {
            if (hexVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "hexVariable");
            }
            this.hexVariable = hexVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipVariable(String ipVariable) {
            if (ipVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "ipVariable");
            }
            this.ipVariable = ipVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ips(List<String> ips) {
            if (ips == null) {
              throw new MissingRequiredPropertyException("GetServiceDhcpServerFeatureOptionCode", "ips");
            }
            this.ips = ips;
            return this;
        }
        public Builder ips(String... ips) {
            return ips(List.of(ips));
        }
        public GetServiceDhcpServerFeatureOptionCode build() {
            final var _resultValue = new GetServiceDhcpServerFeatureOptionCode();
            _resultValue.ascii = ascii;
            _resultValue.asciiVariable = asciiVariable;
            _resultValue.code = code;
            _resultValue.codeVariable = codeVariable;
            _resultValue.hex = hex;
            _resultValue.hexVariable = hexVariable;
            _resultValue.ipVariable = ipVariable;
            _resultValue.ips = ips;
            return _resultValue;
        }
    }
}
