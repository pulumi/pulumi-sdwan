// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs Empty = new Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs();

    /**
     * Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
     * 
     */
    @Import(name="destinationDataIpv6PrefixListId")
    private @Nullable Output<String> destinationDataIpv6PrefixListId;

    /**
     * @return Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
     * 
     */
    public Optional<Output<String>> destinationDataIpv6PrefixListId() {
        return Optional.ofNullable(this.destinationDataIpv6PrefixListId);
    }

    /**
     * Destination data IPv6 prefix list version
     * 
     */
    @Import(name="destinationDataIpv6PrefixListVersion")
    private @Nullable Output<Integer> destinationDataIpv6PrefixListVersion;

    /**
     * @return Destination data IPv6 prefix list version
     * 
     */
    public Optional<Output<Integer>> destinationDataIpv6PrefixListVersion() {
        return Optional.ofNullable(this.destinationDataIpv6PrefixListVersion);
    }

    /**
     * Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
     * 
     */
    @Import(name="destinationIp")
    private @Nullable Output<String> destinationIp;

    /**
     * @return Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
     * 
     */
    public Optional<Output<String>> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }

    /**
     * Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<Integer> destinationPort;

    /**
     * @return Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
     * 
     */
    @Import(name="sourceDataIpv6PrefixListId")
    private @Nullable Output<String> sourceDataIpv6PrefixListId;

    /**
     * @return Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
     * 
     */
    public Optional<Output<String>> sourceDataIpv6PrefixListId() {
        return Optional.ofNullable(this.sourceDataIpv6PrefixListId);
    }

    /**
     * Source data IPv6 prefix list version
     * 
     */
    @Import(name="sourceDataIpv6PrefixListVersion")
    private @Nullable Output<Integer> sourceDataIpv6PrefixListVersion;

    /**
     * @return Source data IPv6 prefix list version
     * 
     */
    public Optional<Output<Integer>> sourceDataIpv6PrefixListVersion() {
        return Optional.ofNullable(this.sourceDataIpv6PrefixListVersion);
    }

    /**
     * Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    @Import(name="sourcePorts")
    private @Nullable Output<String> sourcePorts;

    /**
     * @return Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    public Optional<Output<String>> sourcePorts() {
        return Optional.ofNullable(this.sourcePorts);
    }

    /**
     * Type of match entry
     *   - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of match entry
     *   - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs() {}

    private Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs(Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs $) {
        this.destinationDataIpv6PrefixListId = $.destinationDataIpv6PrefixListId;
        this.destinationDataIpv6PrefixListVersion = $.destinationDataIpv6PrefixListVersion;
        this.destinationIp = $.destinationIp;
        this.destinationPort = $.destinationPort;
        this.sourceDataIpv6PrefixListId = $.sourceDataIpv6PrefixListId;
        this.sourceDataIpv6PrefixListVersion = $.sourceDataIpv6PrefixListVersion;
        this.sourceIp = $.sourceIp;
        this.sourcePorts = $.sourcePorts;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs $;

        public Builder() {
            $ = new Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs();
        }

        public Builder(Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs defaults) {
            $ = new Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationDataIpv6PrefixListId Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv6PrefixListId(@Nullable Output<String> destinationDataIpv6PrefixListId) {
            $.destinationDataIpv6PrefixListId = destinationDataIpv6PrefixListId;
            return this;
        }

        /**
         * @param destinationDataIpv6PrefixListId Destination data IPv6 prefix list ID, Attribute conditional on `type` being equal to `destinationDataIpv6PrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv6PrefixListId(String destinationDataIpv6PrefixListId) {
            return destinationDataIpv6PrefixListId(Output.of(destinationDataIpv6PrefixListId));
        }

        /**
         * @param destinationDataIpv6PrefixListVersion Destination data IPv6 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv6PrefixListVersion(@Nullable Output<Integer> destinationDataIpv6PrefixListVersion) {
            $.destinationDataIpv6PrefixListVersion = destinationDataIpv6PrefixListVersion;
            return this;
        }

        /**
         * @param destinationDataIpv6PrefixListVersion Destination data IPv6 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataIpv6PrefixListVersion(Integer destinationDataIpv6PrefixListVersion) {
            return destinationDataIpv6PrefixListVersion(Output.of(destinationDataIpv6PrefixListVersion));
        }

        /**
         * @param destinationIp Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(@Nullable Output<String> destinationIp) {
            $.destinationIp = destinationIp;
            return this;
        }

        /**
         * @param destinationIp Destination IP prefix, Attribute conditional on `type` being equal to `destinationIpv6`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(String destinationIp) {
            return destinationIp(Output.of(destinationIp));
        }

        /**
         * @param destinationPort Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<Integer> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Destination port, only `22` and `161` supported, Attribute conditional on `type` being equal to `destinationPort`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(Integer destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param sourceDataIpv6PrefixListId Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv6PrefixListId(@Nullable Output<String> sourceDataIpv6PrefixListId) {
            $.sourceDataIpv6PrefixListId = sourceDataIpv6PrefixListId;
            return this;
        }

        /**
         * @param sourceDataIpv6PrefixListId Source data IPv6 prefix list ID, Attribute conditional on `type` being equal to `sourceDataIpv6PrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv6PrefixListId(String sourceDataIpv6PrefixListId) {
            return sourceDataIpv6PrefixListId(Output.of(sourceDataIpv6PrefixListId));
        }

        /**
         * @param sourceDataIpv6PrefixListVersion Source data IPv6 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv6PrefixListVersion(@Nullable Output<Integer> sourceDataIpv6PrefixListVersion) {
            $.sourceDataIpv6PrefixListVersion = sourceDataIpv6PrefixListVersion;
            return this;
        }

        /**
         * @param sourceDataIpv6PrefixListVersion Source data IPv6 prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataIpv6PrefixListVersion(Integer sourceDataIpv6PrefixListVersion) {
            return sourceDataIpv6PrefixListVersion(Output.of(sourceDataIpv6PrefixListVersion));
        }

        /**
         * @param sourceIp Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp Source IP prefix, Attribute conditional on `type` being equal to `sourceIpv6`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourcePorts Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(@Nullable Output<String> sourcePorts) {
            $.sourcePorts = sourcePorts;
            return this;
        }

        /**
         * @param sourcePorts Source ports. Single value (0-65535) or ranges separated by spaces., Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePorts(String sourcePorts) {
            return sourcePorts(Output.of(sourcePorts));
        }

        /**
         * @param type Type of match entry
         *   - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of match entry
         *   - Choices: `sourceIpv6`, `destinationIpv6`, `sourcePort`, `destinationPort`, `sourceDataIpv6PrefixList`, `destinationDataIpv6PrefixList`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("Ipv6DeviceAclPolicyDefinitionSequenceMatchEntryArgs", "type");
            }
            return $;
        }
    }

}
