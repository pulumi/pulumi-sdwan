// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs Empty = new CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs();

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Prefix
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return Prefix
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="prefixVariable")
    private @Nullable Output<String> prefixVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> prefixVariable() {
        return Optional.ofNullable(this.prefixVariable);
    }

    /**
     * Service
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    @Import(name="service")
    private @Nullable Output<String> service;

    /**
     * @return Service
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    public Optional<Output<String>> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * Destination VPN to resolve the prefix
     *   - Default value: `0`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return Destination VPN to resolve the prefix
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    private CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs() {}

    private CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs(CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs $) {
        this.optional = $.optional;
        this.prefix = $.prefix;
        this.prefixVariable = $.prefixVariable;
        this.service = $.service;
        this.vpnId = $.vpnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs $;

        public Builder() {
            $ = new CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs();
        }

        public Builder(CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs defaults) {
            $ = new CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param prefix Prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix Prefix
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param prefixVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder prefixVariable(@Nullable Output<String> prefixVariable) {
            $.prefixVariable = prefixVariable;
            return this;
        }

        /**
         * @param prefixVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder prefixVariable(String prefixVariable) {
            return prefixVariable(Output.of(prefixVariable));
        }

        /**
         * @param service Service
         *   - Choices: `sig`
         *   - Default value: `sig`
         * 
         * @return builder
         * 
         */
        public Builder service(@Nullable Output<String> service) {
            $.service = service;
            return this;
        }

        /**
         * @param service Service
         *   - Choices: `sig`
         *   - Default value: `sig`
         * 
         * @return builder
         * 
         */
        public Builder service(String service) {
            return service(Output.of(service));
        }

        /**
         * @param vpnId Destination VPN to resolve the prefix
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId Destination VPN to resolve the prefix
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        public CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs build() {
            return $;
        }
    }

}
