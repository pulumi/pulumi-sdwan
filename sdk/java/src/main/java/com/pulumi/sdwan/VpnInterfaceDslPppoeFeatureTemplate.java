// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.VpnInterfaceDslPppoeFeatureTemplateArgs;
import com.pulumi.sdwan.inputs.VpnInterfaceDslPppoeFeatureTemplateState;
import com.pulumi.sdwan.outputs.VpnInterfaceDslPppoeFeatureTemplateAccessList;
import com.pulumi.sdwan.outputs.VpnInterfaceDslPppoeFeatureTemplateNatPortForward;
import com.pulumi.sdwan.outputs.VpnInterfaceDslPppoeFeatureTemplatePolicer;
import com.pulumi.sdwan.outputs.VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation;
import com.pulumi.sdwan.outputs.VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a VPN Interface DSL PPPoE feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.VpnInterfaceDslPppoeFeatureTemplate;
 * import com.pulumi.sdwan.VpnInterfaceDslPppoeFeatureTemplateArgs;
 * import com.pulumi.sdwan.inputs.VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs;
 * import com.pulumi.sdwan.inputs.VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs;
 * import com.pulumi.sdwan.inputs.VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs;
 * import com.pulumi.sdwan.inputs.VpnInterfaceDslPppoeFeatureTemplateAccessListArgs;
 * import com.pulumi.sdwan.inputs.VpnInterfaceDslPppoeFeatureTemplatePolicerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new VpnInterfaceDslPppoeFeatureTemplate("example", VpnInterfaceDslPppoeFeatureTemplateArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .deviceTypes("vedge-C8000V")
 *             .ethernetInterfaceName("Example")
 *             .shutdown(true)
 *             .ethernetDescription("My Description")
 *             .vdslConfigurations(VpnInterfaceDslPppoeFeatureTemplateVdslConfigurationArgs.builder()
 *                 .controller_vdsl_slot("Example")
 *                 .sra(true)
 *                 .mode_adsl1(false)
 *                 .mode_adsl2(false)
 *                 .mode_adsl2plus(false)
 *                 .mode_vdsl2(false)
 *                 .mode_ansi(false)
 *                 .vdsl_modem_configuration("100")
 *                 .build())
 *             .ethernetVlanId(4094)
 *             .ethernetDialerPoolNumber(255)
 *             .ethernetPppMaximumPayload(1790)
 *             .ethernetDialerAddressNegotiated(false)
 *             .ethernetUnnumberedLoopbackInterface("example")
 *             .pppAuthenticationProtocol("chap")
 *             .pppAuthenticationProtocolPap(false)
 *             .chapHostname("chap-example")
 *             .chapPppAuthPassword("myPassword")
 *             .papUsername("pap-username")
 *             .papPassword(true)
 *             .papPppAuthPassword("myPassword")
 *             .pppAuthenticationType("callin")
 *             .enableCoreRegion(true)
 *             .coreRegion("core")
 *             .secondaryRegion("off")
 *             .tunnelInterfaceEncapsulations(VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulationArgs.builder()
 *                 .encapsulation("gre")
 *                 .preference(4294967)
 *                 .weight(250)
 *                 .build())
 *             .tunnelInterfaceGroups(42949672)
 *             .tunnelInterfaceBorder(true)
 *             .perTunnelQos(true)
 *             .perTunnelQosAggregator(false)
 *             .tunnelQosMode("spoke")
 *             .tunnelInterfaceColor("custom1")
 *             .tunnelInterfaceLastResortCircuit(false)
 *             .tunnelInterfaceLowBandwidthLink(false)
 *             .tunnelInterfaceTunnelTcpMss(1460)
 *             .tunnelInterfaceClearDontFragment(false)
 *             .tunnelInterfaceNetworkBroadcast(false)
 *             .tunnelInterfaceMaxControlConnections(8)
 *             .tunnelInterfaceControlConnections(true)
 *             .tunnelInterfaceVbondAsStunServer(false)
 *             .tunnelInterfaceExcludeControllerGroupLists(100)
 *             .tunnelInterfaceVmanageConnectionPreference(5)
 *             .tunnelInterfacePortHop(false)
 *             .tunnelInterfaceColorRestrict(false)
 *             .tunnelInterfaceCarrier("carrier1")
 *             .tunnelInterfaceNatRefreshInterval(15)
 *             .tunnelInterfaceHelloInterval(1000)
 *             .tunnelInterfaceHelloTolerance(12)
 *             .tunnelInterfaceBindLoopbackTunnel("12")
 *             .tunnelInterfaceAllowAll(false)
 *             .tunnelInterfaceAllowBgp(false)
 *             .tunnelInterfaceAllowDhcp(true)
 *             .tunnelInterfaceAllowDns(true)
 *             .tunnelInterfaceAllowIcmp(true)
 *             .tunnelInterfaceAllowSsh(false)
 *             .tunnelInterfaceAllowNtp(false)
 *             .tunnelInterfaceAllowNetconf(false)
 *             .tunnelInterfaceAllowOspf(false)
 *             .tunnelInterfaceAllowStun(false)
 *             .tunnelInterfaceAllowSnmp(false)
 *             .tunnelInterfaceAllowHttps(true)
 *             .nat(true)
 *             .natRefreshMode("outbound")
 *             .natUdpTimeout(1)
 *             .natTcpTimeout(60)
 *             .natBlockIcmpError(true)
 *             .natResponseToPing(false)
 *             .natPortForwards(VpnInterfaceDslPppoeFeatureTemplateNatPortForwardArgs.builder()
 *                 .port_start_range(0)
 *                 .port_end_range(65530)
 *                 .protocol("tcp")
 *                 .private_vpn(65530)
 *                 .private_ip_address("1.2.3.4")
 *                 .build())
 *             .qosAdaptivePeriod(15)
 *             .qosAdaptiveBandwidthDownstream(10000)
 *             .qosAdaptiveMinDownstream(100)
 *             .qosAdaptiveMaxDownstream(100000)
 *             .qosAdaptiveBandwidthUpstream(10000)
 *             .qosAdaptiveMinUpstream(100)
 *             .qosAdaptiveMaxUpstream(100000)
 *             .shapingRate(10000000)
 *             .qosMap("test")
 *             .vpnQosMap("test")
 *             .bandwidthUpstream(214748300)
 *             .bandwidthDownstream(214748300)
 *             .writeRule("RULE1")
 *             .accessLists(VpnInterfaceDslPppoeFeatureTemplateAccessListArgs.builder()
 *                 .direction("in")
 *                 .acl_name("ACL1")
 *                 .build())
 *             .policers(VpnInterfaceDslPppoeFeatureTemplatePolicerArgs.builder()
 *                 .direction("in")
 *                 .policer_name("example")
 *                 .build())
 *             .ipMtu(1500)
 *             .tcpMss(720)
 *             .tlocExtension("tloc")
 *             .trackers("tracker1")
 *             .ipDirectedBroadcast(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate")
public class VpnInterfaceDslPppoeFeatureTemplate extends com.pulumi.resources.CustomResource {
    /**
     * Apply ACL
     * 
     */
    @Export(name="accessLists", refs={List.class,VpnInterfaceDslPppoeFeatureTemplateAccessList.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VpnInterfaceDslPppoeFeatureTemplateAccessList>> accessLists;

    /**
     * @return Apply ACL
     * 
     */
    public Output<Optional<List<VpnInterfaceDslPppoeFeatureTemplateAccessList>>> accessLists() {
        return Codegen.optional(this.accessLists);
    }
    /**
     * Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    @Export(name="bandwidthDownstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthDownstream;

    /**
     * @return Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> bandwidthDownstream() {
        return Codegen.optional(this.bandwidthDownstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="bandwidthDownstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> bandwidthDownstreamVariable() {
        return Codegen.optional(this.bandwidthDownstreamVariable);
    }
    /**
     * Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    @Export(name="bandwidthUpstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthUpstream;

    /**
     * @return Interface upstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> bandwidthUpstream() {
        return Codegen.optional(this.bandwidthUpstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="bandwidthUpstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bandwidthUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> bandwidthUpstreamVariable() {
        return Codegen.optional(this.bandwidthUpstreamVariable);
    }
    /**
     * CHAP Hostname
     * 
     */
    @Export(name="chapHostname", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> chapHostname;

    /**
     * @return CHAP Hostname
     * 
     */
    public Output<Optional<String>> chapHostname() {
        return Codegen.optional(this.chapHostname);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="chapHostnameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> chapHostnameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> chapHostnameVariable() {
        return Codegen.optional(this.chapHostnameVariable);
    }
    /**
     * Specify ppp chap authentication Password
     * 
     */
    @Export(name="chapPppAuthPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> chapPppAuthPassword;

    /**
     * @return Specify ppp chap authentication Password
     * 
     */
    public Output<Optional<String>> chapPppAuthPassword() {
        return Codegen.optional(this.chapPppAuthPassword);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="chapPppAuthPasswordVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> chapPppAuthPasswordVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> chapPppAuthPasswordVariable() {
        return Codegen.optional(this.chapPppAuthPasswordVariable);
    }
    /**
     * Enable core region - Choices: `core`, `core-shared` - Default value: `core`
     * 
     */
    @Export(name="coreRegion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> coreRegion;

    /**
     * @return Enable core region - Choices: `core`, `core-shared` - Default value: `core`
     * 
     */
    public Output<Optional<String>> coreRegion() {
        return Codegen.optional(this.coreRegion);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="coreRegionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> coreRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> coreRegionVariable() {
        return Codegen.optional(this.coreRegionVariable);
    }
    /**
     * The description of the feature template
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Export(name="deviceTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * Enable core region - Default value: `false`
     * 
     */
    @Export(name="enableCoreRegion", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableCoreRegion;

    /**
     * @return Enable core region - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> enableCoreRegion() {
        return Codegen.optional(this.enableCoreRegion);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="enableCoreRegionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enableCoreRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> enableCoreRegionVariable() {
        return Codegen.optional(this.enableCoreRegionVariable);
    }
    /**
     * Interface description
     * 
     */
    @Export(name="ethernetDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetDescription;

    /**
     * @return Interface description
     * 
     */
    public Output<Optional<String>> ethernetDescription() {
        return Codegen.optional(this.ethernetDescription);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ethernetDescriptionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ethernetDescriptionVariable() {
        return Codegen.optional(this.ethernetDescriptionVariable);
    }
    /**
     * Dialer IP Negotiated - Default value: `false`
     * 
     */
    @Export(name="ethernetDialerAddressNegotiated", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ethernetDialerAddressNegotiated;

    /**
     * @return Dialer IP Negotiated - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> ethernetDialerAddressNegotiated() {
        return Codegen.optional(this.ethernetDialerAddressNegotiated);
    }
    /**
     * Dialer pool number - Range: `1`-`255`
     * 
     */
    @Export(name="ethernetDialerPoolNumber", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ethernetDialerPoolNumber;

    /**
     * @return Dialer pool number - Range: `1`-`255`
     * 
     */
    public Output<Optional<Integer>> ethernetDialerPoolNumber() {
        return Codegen.optional(this.ethernetDialerPoolNumber);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ethernetDialerPoolNumberVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetDialerPoolNumberVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ethernetDialerPoolNumberVariable() {
        return Codegen.optional(this.ethernetDialerPoolNumberVariable);
    }
    /**
     * Ethernet Interface/Sub Interface Name including sub interface number
     * 
     */
    @Export(name="ethernetInterfaceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetInterfaceName;

    /**
     * @return Ethernet Interface/Sub Interface Name including sub interface number
     * 
     */
    public Output<Optional<String>> ethernetInterfaceName() {
        return Codegen.optional(this.ethernetInterfaceName);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ethernetInterfaceNameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetInterfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ethernetInterfaceNameVariable() {
        return Codegen.optional(this.ethernetInterfaceNameVariable);
    }
    /**
     * Maximum MRU to be negotiated during PPP LCP negotiation - Range: `64`-`1792`
     * 
     */
    @Export(name="ethernetPppMaximumPayload", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ethernetPppMaximumPayload;

    /**
     * @return Maximum MRU to be negotiated during PPP LCP negotiation - Range: `64`-`1792`
     * 
     */
    public Output<Optional<Integer>> ethernetPppMaximumPayload() {
        return Codegen.optional(this.ethernetPppMaximumPayload);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ethernetPppMaximumPayloadVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetPppMaximumPayloadVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ethernetPppMaximumPayloadVariable() {
        return Codegen.optional(this.ethernetPppMaximumPayloadVariable);
    }
    /**
     * Dialer IP Unnumbered Loopback interface name
     * 
     */
    @Export(name="ethernetUnnumberedLoopbackInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetUnnumberedLoopbackInterface;

    /**
     * @return Dialer IP Unnumbered Loopback interface name
     * 
     */
    public Output<Optional<String>> ethernetUnnumberedLoopbackInterface() {
        return Codegen.optional(this.ethernetUnnumberedLoopbackInterface);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ethernetUnnumberedLoopbackInterfaceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetUnnumberedLoopbackInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ethernetUnnumberedLoopbackInterfaceVariable() {
        return Codegen.optional(this.ethernetUnnumberedLoopbackInterfaceVariable);
    }
    /**
     * Encapsulation VLAN id - Range: `1`-`4094`
     * 
     */
    @Export(name="ethernetVlanId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ethernetVlanId;

    /**
     * @return Encapsulation VLAN id - Range: `1`-`4094`
     * 
     */
    public Output<Optional<Integer>> ethernetVlanId() {
        return Codegen.optional(this.ethernetVlanId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ethernetVlanIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ethernetVlanIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ethernetVlanIdVariable() {
        return Codegen.optional(this.ethernetVlanIdVariable);
    }
    /**
     * IP Directed-Broadcast - Default value: `false`
     * 
     */
    @Export(name="ipDirectedBroadcast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ipDirectedBroadcast;

    /**
     * @return IP Directed-Broadcast - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> ipDirectedBroadcast() {
        return Codegen.optional(this.ipDirectedBroadcast);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipDirectedBroadcastVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipDirectedBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipDirectedBroadcastVariable() {
        return Codegen.optional(this.ipDirectedBroadcastVariable);
    }
    /**
     * Interface MTU &lt;576..2000&gt;, in bytes - Range: `576`-`2000` - Default value: `1500`
     * 
     */
    @Export(name="ipMtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipMtu;

    /**
     * @return Interface MTU &lt;576..2000&gt;, in bytes - Range: `576`-`2000` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> ipMtu() {
        return Codegen.optional(this.ipMtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipMtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipMtuVariable() {
        return Codegen.optional(this.ipMtuVariable);
    }
    /**
     * The name of the feature template
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Network Address Translation on this interface - Default value: `false`
     * 
     */
    @Export(name="nat", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> nat;

    /**
     * @return Network Address Translation on this interface - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> nat() {
        return Codegen.optional(this.nat);
    }
    /**
     * Block inbound ICMP error messages - Default value: `true`
     * 
     */
    @Export(name="natBlockIcmpError", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> natBlockIcmpError;

    /**
     * @return Block inbound ICMP error messages - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> natBlockIcmpError() {
        return Codegen.optional(this.natBlockIcmpError);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="natBlockIcmpErrorVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natBlockIcmpErrorVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> natBlockIcmpErrorVariable() {
        return Codegen.optional(this.natBlockIcmpErrorVariable);
    }
    /**
     * Set port-forwarding rules for NAT on this interface
     * 
     */
    @Export(name="natPortForwards", refs={List.class,VpnInterfaceDslPppoeFeatureTemplateNatPortForward.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VpnInterfaceDslPppoeFeatureTemplateNatPortForward>> natPortForwards;

    /**
     * @return Set port-forwarding rules for NAT on this interface
     * 
     */
    public Output<Optional<List<VpnInterfaceDslPppoeFeatureTemplateNatPortForward>>> natPortForwards() {
        return Codegen.optional(this.natPortForwards);
    }
    /**
     * Set NAT refresh mode - Choices: `outbound`, `bi-directional` - Default value: `outbound`
     * 
     */
    @Export(name="natRefreshMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natRefreshMode;

    /**
     * @return Set NAT refresh mode - Choices: `outbound`, `bi-directional` - Default value: `outbound`
     * 
     */
    public Output<Optional<String>> natRefreshMode() {
        return Codegen.optional(this.natRefreshMode);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="natRefreshModeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natRefreshModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> natRefreshModeVariable() {
        return Codegen.optional(this.natRefreshModeVariable);
    }
    /**
     * Respond to ping requests to NAT interface ip address from the public side - Default value: `false`
     * 
     */
    @Export(name="natResponseToPing", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> natResponseToPing;

    /**
     * @return Respond to ping requests to NAT interface ip address from the public side - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> natResponseToPing() {
        return Codegen.optional(this.natResponseToPing);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="natResponseToPingVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natResponseToPingVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> natResponseToPingVariable() {
        return Codegen.optional(this.natResponseToPingVariable);
    }
    /**
     * Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
     * 
     */
    @Export(name="natTcpTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> natTcpTimeout;

    /**
     * @return Set NAT TCP session timeout, in minutes - Range: `1`-`8947` - Default value: `60`
     * 
     */
    public Output<Optional<Integer>> natTcpTimeout() {
        return Codegen.optional(this.natTcpTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="natTcpTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natTcpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> natTcpTimeoutVariable() {
        return Codegen.optional(this.natTcpTimeoutVariable);
    }
    /**
     * Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
     * 
     */
    @Export(name="natUdpTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> natUdpTimeout;

    /**
     * @return Set NAT UDP session timeout, in minutes - Range: `1`-`8947` - Default value: `1`
     * 
     */
    public Output<Optional<Integer>> natUdpTimeout() {
        return Codegen.optional(this.natUdpTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="natUdpTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> natUdpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> natUdpTimeoutVariable() {
        return Codegen.optional(this.natUdpTimeoutVariable);
    }
    /**
     * PAP outbound Password
     * 
     */
    @Export(name="papPassword", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> papPassword;

    /**
     * @return PAP outbound Password
     * 
     */
    public Output<Optional<Boolean>> papPassword() {
        return Codegen.optional(this.papPassword);
    }
    /**
     * Specify ppp pap authentication Password
     * 
     */
    @Export(name="papPppAuthPassword", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> papPppAuthPassword;

    /**
     * @return Specify ppp pap authentication Password
     * 
     */
    public Output<Optional<String>> papPppAuthPassword() {
        return Codegen.optional(this.papPppAuthPassword);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="papPppAuthPasswordVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> papPppAuthPasswordVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> papPppAuthPasswordVariable() {
        return Codegen.optional(this.papPppAuthPasswordVariable);
    }
    /**
     * PAP outbound Sent Username
     * 
     */
    @Export(name="papUsername", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> papUsername;

    /**
     * @return PAP outbound Sent Username
     * 
     */
    public Output<Optional<String>> papUsername() {
        return Codegen.optional(this.papUsername);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="papUsernameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> papUsernameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> papUsernameVariable() {
        return Codegen.optional(this.papUsernameVariable);
    }
    /**
     * Per-tunnel Qos - Default value: `false`
     * 
     */
    @Export(name="perTunnelQos", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> perTunnelQos;

    /**
     * @return Per-tunnel Qos - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> perTunnelQos() {
        return Codegen.optional(this.perTunnelQos);
    }
    /**
     * Per-tunnel QoS Aggregator - Default value: `false`
     * 
     */
    @Export(name="perTunnelQosAggregator", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> perTunnelQosAggregator;

    /**
     * @return Per-tunnel QoS Aggregator - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> perTunnelQosAggregator() {
        return Codegen.optional(this.perTunnelQosAggregator);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="perTunnelQosAggregatorVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> perTunnelQosAggregatorVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> perTunnelQosAggregatorVariable() {
        return Codegen.optional(this.perTunnelQosAggregatorVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="perTunnelQosVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> perTunnelQosVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> perTunnelQosVariable() {
        return Codegen.optional(this.perTunnelQosVariable);
    }
    /**
     * Enable policer
     * 
     */
    @Export(name="policers", refs={List.class,VpnInterfaceDslPppoeFeatureTemplatePolicer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VpnInterfaceDslPppoeFeatureTemplatePolicer>> policers;

    /**
     * @return Enable policer
     * 
     */
    public Output<Optional<List<VpnInterfaceDslPppoeFeatureTemplatePolicer>>> policers() {
        return Codegen.optional(this.policers);
    }
    /**
     * PPP Link Authentication Protocol - Choices: `chap`, `pap`
     * 
     */
    @Export(name="pppAuthenticationProtocol", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pppAuthenticationProtocol;

    /**
     * @return PPP Link Authentication Protocol - Choices: `chap`, `pap`
     * 
     */
    public Output<Optional<String>> pppAuthenticationProtocol() {
        return Codegen.optional(this.pppAuthenticationProtocol);
    }
    /**
     * PPP Authentication Protocol PAP - Default value: `false`
     * 
     */
    @Export(name="pppAuthenticationProtocolPap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> pppAuthenticationProtocolPap;

    /**
     * @return PPP Authentication Protocol PAP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> pppAuthenticationProtocolPap() {
        return Codegen.optional(this.pppAuthenticationProtocolPap);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="pppAuthenticationProtocolVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pppAuthenticationProtocolVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> pppAuthenticationProtocolVariable() {
        return Codegen.optional(this.pppAuthenticationProtocolVariable);
    }
    /**
     * Authenticate remote on incoming call only - Choices: `callin`, `false` - Default value: `callin`
     * 
     */
    @Export(name="pppAuthenticationType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> pppAuthenticationType;

    /**
     * @return Authenticate remote on incoming call only - Choices: `callin`, `false` - Default value: `callin`
     * 
     */
    public Output<Optional<String>> pppAuthenticationType() {
        return Codegen.optional(this.pppAuthenticationType);
    }
    /**
     * Adaptive QoS default downstream bandwidth - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosAdaptiveBandwidthDownstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptiveBandwidthDownstream;

    /**
     * @return Adaptive QoS default downstream bandwidth - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosAdaptiveBandwidthDownstream() {
        return Codegen.optional(this.qosAdaptiveBandwidthDownstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptiveBandwidthDownstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptiveBandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptiveBandwidthDownstreamVariable() {
        return Codegen.optional(this.qosAdaptiveBandwidthDownstreamVariable);
    }
    /**
     * Adaptive QoS default upstream bandwidth - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosAdaptiveBandwidthUpstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptiveBandwidthUpstream;

    /**
     * @return Adaptive QoS default upstream bandwidth - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosAdaptiveBandwidthUpstream() {
        return Codegen.optional(this.qosAdaptiveBandwidthUpstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptiveBandwidthUpstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptiveBandwidthUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptiveBandwidthUpstreamVariable() {
        return Codegen.optional(this.qosAdaptiveBandwidthUpstreamVariable);
    }
    /**
     * Downstream max bandwidth limit - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosAdaptiveMaxDownstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptiveMaxDownstream;

    /**
     * @return Downstream max bandwidth limit - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosAdaptiveMaxDownstream() {
        return Codegen.optional(this.qosAdaptiveMaxDownstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptiveMaxDownstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptiveMaxDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptiveMaxDownstreamVariable() {
        return Codegen.optional(this.qosAdaptiveMaxDownstreamVariable);
    }
    /**
     * Upstream max bandwidth limit - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosAdaptiveMaxUpstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptiveMaxUpstream;

    /**
     * @return Upstream max bandwidth limit - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosAdaptiveMaxUpstream() {
        return Codegen.optional(this.qosAdaptiveMaxUpstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptiveMaxUpstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptiveMaxUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptiveMaxUpstreamVariable() {
        return Codegen.optional(this.qosAdaptiveMaxUpstreamVariable);
    }
    /**
     * Downstream min bandwidth limit - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosAdaptiveMinDownstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptiveMinDownstream;

    /**
     * @return Downstream min bandwidth limit - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosAdaptiveMinDownstream() {
        return Codegen.optional(this.qosAdaptiveMinDownstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptiveMinDownstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptiveMinDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptiveMinDownstreamVariable() {
        return Codegen.optional(this.qosAdaptiveMinDownstreamVariable);
    }
    /**
     * Upstream min bandwidth limit - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosAdaptiveMinUpstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptiveMinUpstream;

    /**
     * @return Upstream min bandwidth limit - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosAdaptiveMinUpstream() {
        return Codegen.optional(this.qosAdaptiveMinUpstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptiveMinUpstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptiveMinUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptiveMinUpstreamVariable() {
        return Codegen.optional(this.qosAdaptiveMinUpstreamVariable);
    }
    /**
     * Periodic timer for adaptive QoS in minutes - Range: `1`-`720` - Default value: `15`
     * 
     */
    @Export(name="qosAdaptivePeriod", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosAdaptivePeriod;

    /**
     * @return Periodic timer for adaptive QoS in minutes - Range: `1`-`720` - Default value: `15`
     * 
     */
    public Output<Optional<Integer>> qosAdaptivePeriod() {
        return Codegen.optional(this.qosAdaptivePeriod);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosAdaptivePeriodVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosAdaptivePeriodVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosAdaptivePeriodVariable() {
        return Codegen.optional(this.qosAdaptivePeriodVariable);
    }
    /**
     * Name of QoS map
     * 
     */
    @Export(name="qosMap", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosMap;

    /**
     * @return Name of QoS map
     * 
     */
    public Output<Optional<String>> qosMap() {
        return Codegen.optional(this.qosMap);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosMapVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosMapVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosMapVariable() {
        return Codegen.optional(this.qosMapVariable);
    }
    /**
     * Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
     * 
     */
    @Export(name="secondaryRegion", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryRegion;

    /**
     * @return Enable secondary region - Choices: `off`, `secondary-only`, `secondary-shared` - Default value: `off`
     * 
     */
    public Output<Optional<String>> secondaryRegion() {
        return Codegen.optional(this.secondaryRegion);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="secondaryRegionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> secondaryRegionVariable() {
        return Codegen.optional(this.secondaryRegionVariable);
    }
    /**
     * 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     * 
     */
    @Export(name="shapingRate", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> shapingRate;

    /**
     * @return 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> shapingRate() {
        return Codegen.optional(this.shapingRate);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shapingRateVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shapingRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shapingRateVariable() {
        return Codegen.optional(this.shapingRateVariable);
    }
    /**
     * Administrative state - Default value: `true`
     * 
     */
    @Export(name="shutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> shutdown() {
        return Codegen.optional(this.shutdown);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shutdownVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shutdownVariable() {
        return Codegen.optional(this.shutdownVariable);
    }
    /**
     * TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
     * 
     */
    @Export(name="tcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `552`-`1960`
     * 
     */
    public Output<Optional<Integer>> tcpMss() {
        return Codegen.optional(this.tcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpMssVariable() {
        return Codegen.optional(this.tcpMssVariable);
    }
    /**
     * The template type
     * 
     */
    @Export(name="templateType", refs={String.class}, tree="[0]")
    private Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Output<String> templateType() {
        return this.templateType;
    }
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    @Export(name="tlocExtension", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlocExtension;

    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public Output<Optional<String>> tlocExtension() {
        return Codegen.optional(this.tlocExtension);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tlocExtensionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlocExtensionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tlocExtensionVariable() {
        return Codegen.optional(this.tlocExtensionVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="trackerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> trackerVariable() {
        return Codegen.optional(this.trackerVariable);
    }
    /**
     * Enable tracker for this interface
     * 
     */
    @Export(name="trackers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> trackers;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Output<Optional<List<String>>> trackers() {
        return Codegen.optional(this.trackers);
    }
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowAll;

    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowAll() {
        return Codegen.optional(this.tunnelInterfaceAllowAll);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowAllVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowAllVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowAllVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowAllVariable);
    }
    /**
     * Allow/deny BGP - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowBgp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowBgp;

    /**
     * @return Allow/deny BGP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowBgp() {
        return Codegen.optional(this.tunnelInterfaceAllowBgp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowBgpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowBgpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowBgpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowBgpVariable);
    }
    /**
     * Allow/Deny DHCP - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowDhcp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowDhcp;

    /**
     * @return Allow/Deny DHCP - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowDhcp() {
        return Codegen.optional(this.tunnelInterfaceAllowDhcp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowDhcpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowDhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowDhcpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowDhcpVariable);
    }
    /**
     * Allow/Deny DNS - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowDns", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowDns;

    /**
     * @return Allow/Deny DNS - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowDns() {
        return Codegen.optional(this.tunnelInterfaceAllowDns);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowDnsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowDnsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowDnsVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowDnsVariable);
    }
    /**
     * Allow/Deny Https - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowHttps", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowHttps;

    /**
     * @return Allow/Deny Https - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowHttps() {
        return Codegen.optional(this.tunnelInterfaceAllowHttps);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowHttpsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowHttpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowHttpsVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowHttpsVariable);
    }
    /**
     * Allow/Deny ICMP - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowIcmp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowIcmp;

    /**
     * @return Allow/Deny ICMP - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowIcmp() {
        return Codegen.optional(this.tunnelInterfaceAllowIcmp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowIcmpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowIcmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowIcmpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowIcmpVariable);
    }
    /**
     * Allow/Deny NETCONF - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowNetconf", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowNetconf;

    /**
     * @return Allow/Deny NETCONF - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowNetconf() {
        return Codegen.optional(this.tunnelInterfaceAllowNetconf);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowNetconfVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowNetconfVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowNetconfVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowNetconfVariable);
    }
    /**
     * Allow/Deny NTP - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowNtp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowNtp;

    /**
     * @return Allow/Deny NTP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowNtp() {
        return Codegen.optional(this.tunnelInterfaceAllowNtp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowNtpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowNtpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowNtpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowNtpVariable);
    }
    /**
     * Allow/Deny OSPF - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowOspf", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowOspf;

    /**
     * @return Allow/Deny OSPF - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowOspf() {
        return Codegen.optional(this.tunnelInterfaceAllowOspf);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowOspfVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowOspfVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowOspfVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowOspfVariable);
    }
    /**
     * Allow/Deny SNMP - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowSnmp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowSnmp;

    /**
     * @return Allow/Deny SNMP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowSnmp() {
        return Codegen.optional(this.tunnelInterfaceAllowSnmp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowSnmpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowSnmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowSnmpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowSnmpVariable);
    }
    /**
     * Allow/Deny SSH - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowSsh", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowSsh;

    /**
     * @return Allow/Deny SSH - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowSsh() {
        return Codegen.optional(this.tunnelInterfaceAllowSsh);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowSshVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowSshVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowSshVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowSshVariable);
    }
    /**
     * Allow/Deny STUN - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowStun", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowStun;

    /**
     * @return Allow/Deny STUN - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowStun() {
        return Codegen.optional(this.tunnelInterfaceAllowStun);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowStunVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowStunVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowStunVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowStunVariable);
    }
    /**
     * Bind loopback tunnel interface to a physical interface
     * 
     */
    @Export(name="tunnelInterfaceBindLoopbackTunnel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceBindLoopbackTunnel;

    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public Output<Optional<String>> tunnelInterfaceBindLoopbackTunnel() {
        return Codegen.optional(this.tunnelInterfaceBindLoopbackTunnel);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceBindLoopbackTunnelVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceBindLoopbackTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceBindLoopbackTunnelVariable() {
        return Codegen.optional(this.tunnelInterfaceBindLoopbackTunnelVariable);
    }
    /**
     * Set TLOC as border TLOC - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceBorder", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceBorder;

    /**
     * @return Set TLOC as border TLOC - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceBorder() {
        return Codegen.optional(this.tunnelInterfaceBorder);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceBorderVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceBorderVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceBorderVariable() {
        return Codegen.optional(this.tunnelInterfaceBorderVariable);
    }
    /**
     * Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     * 
     */
    @Export(name="tunnelInterfaceCarrier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceCarrier;

    /**
     * @return Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     * 
     */
    public Output<Optional<String>> tunnelInterfaceCarrier() {
        return Codegen.optional(this.tunnelInterfaceCarrier);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceCarrierVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceCarrierVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceCarrierVariable() {
        return Codegen.optional(this.tunnelInterfaceCarrierVariable);
    }
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceClearDontFragment", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceClearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceClearDontFragment() {
        return Codegen.optional(this.tunnelInterfaceClearDontFragment);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceClearDontFragmentVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceClearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceClearDontFragmentVariable() {
        return Codegen.optional(this.tunnelInterfaceClearDontFragmentVariable);
    }
    /**
     * Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     * 
     */
    @Export(name="tunnelInterfaceColor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceColor;

    /**
     * @return Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     * 
     */
    public Output<Optional<String>> tunnelInterfaceColor() {
        return Codegen.optional(this.tunnelInterfaceColor);
    }
    /**
     * Restrict this TLOC behavior - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceColorRestrict", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceColorRestrict;

    /**
     * @return Restrict this TLOC behavior - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceColorRestrict() {
        return Codegen.optional(this.tunnelInterfaceColorRestrict);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceColorVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceColorVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceColorVariable() {
        return Codegen.optional(this.tunnelInterfaceColorVariable);
    }
    /**
     * Allow Control Connection - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceControlConnections", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceControlConnections;

    /**
     * @return Allow Control Connection - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceControlConnections() {
        return Codegen.optional(this.tunnelInterfaceControlConnections);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceControlConnectionsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceControlConnectionsVariable() {
        return Codegen.optional(this.tunnelInterfaceControlConnectionsVariable);
    }
    /**
     * Encapsulation for TLOC
     * 
     */
    @Export(name="tunnelInterfaceEncapsulations", refs={List.class,VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation>> tunnelInterfaceEncapsulations;

    /**
     * @return Encapsulation for TLOC
     * 
     */
    public Output<Optional<List<VpnInterfaceDslPppoeFeatureTemplateTunnelInterfaceEncapsulation>>> tunnelInterfaceEncapsulations() {
        return Codegen.optional(this.tunnelInterfaceEncapsulations);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceExcludeControllerGroupListVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceExcludeControllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceExcludeControllerGroupListVariable() {
        return Codegen.optional(this.tunnelInterfaceExcludeControllerGroupListVariable);
    }
    /**
     * Exclude the following controller groups defined in this list
     * 
     */
    @Export(name="tunnelInterfaceExcludeControllerGroupLists", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> tunnelInterfaceExcludeControllerGroupLists;

    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public Output<Optional<List<Integer>>> tunnelInterfaceExcludeControllerGroupLists() {
        return Codegen.optional(this.tunnelInterfaceExcludeControllerGroupLists);
    }
    /**
     * List of groups
     * 
     */
    @Export(name="tunnelInterfaceGroups", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> tunnelInterfaceGroups;

    /**
     * @return List of groups
     * 
     */
    public Output<Optional<List<Integer>>> tunnelInterfaceGroups() {
        return Codegen.optional(this.tunnelInterfaceGroups);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceGroupsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceGroupsVariable() {
        return Codegen.optional(this.tunnelInterfaceGroupsVariable);
    }
    /**
     * Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
     * 
     */
    @Export(name="tunnelInterfaceHelloInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceHelloInterval;

    /**
     * @return Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceHelloInterval() {
        return Codegen.optional(this.tunnelInterfaceHelloInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceHelloIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceHelloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceHelloIntervalVariable() {
        return Codegen.optional(this.tunnelInterfaceHelloIntervalVariable);
    }
    /**
     * Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
     * 
     */
    @Export(name="tunnelInterfaceHelloTolerance", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceHelloTolerance;

    /**
     * @return Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceHelloTolerance() {
        return Codegen.optional(this.tunnelInterfaceHelloTolerance);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceHelloToleranceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceHelloToleranceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceHelloToleranceVariable() {
        return Codegen.optional(this.tunnelInterfaceHelloToleranceVariable);
    }
    /**
     * Set TLOC as last resort - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceLastResortCircuit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceLastResortCircuit;

    /**
     * @return Set TLOC as last resort - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceLastResortCircuit() {
        return Codegen.optional(this.tunnelInterfaceLastResortCircuit);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceLastResortCircuitVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceLastResortCircuitVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceLastResortCircuitVariable() {
        return Codegen.optional(this.tunnelInterfaceLastResortCircuitVariable);
    }
    /**
     * Set the interface as a low-bandwidth circuit - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceLowBandwidthLink", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceLowBandwidthLink;

    /**
     * @return Set the interface as a low-bandwidth circuit - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceLowBandwidthLink() {
        return Codegen.optional(this.tunnelInterfaceLowBandwidthLink);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceLowBandwidthLinkVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceLowBandwidthLinkVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceLowBandwidthLinkVariable() {
        return Codegen.optional(this.tunnelInterfaceLowBandwidthLinkVariable);
    }
    /**
     * Set the maximum number of control connections for this TLOC - Range: `0`-`8`
     * 
     */
    @Export(name="tunnelInterfaceMaxControlConnections", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceMaxControlConnections;

    /**
     * @return Set the maximum number of control connections for this TLOC - Range: `0`-`8`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceMaxControlConnections() {
        return Codegen.optional(this.tunnelInterfaceMaxControlConnections);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceMaxControlConnectionsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceMaxControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceMaxControlConnectionsVariable() {
        return Codegen.optional(this.tunnelInterfaceMaxControlConnectionsVariable);
    }
    /**
     * Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
     * 
     */
    @Export(name="tunnelInterfaceNatRefreshInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceNatRefreshInterval;

    /**
     * @return Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceNatRefreshInterval() {
        return Codegen.optional(this.tunnelInterfaceNatRefreshInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceNatRefreshIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceNatRefreshIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceNatRefreshIntervalVariable() {
        return Codegen.optional(this.tunnelInterfaceNatRefreshIntervalVariable);
    }
    /**
     * Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceNetworkBroadcast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceNetworkBroadcast;

    /**
     * @return Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceNetworkBroadcast() {
        return Codegen.optional(this.tunnelInterfaceNetworkBroadcast);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceNetworkBroadcastVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceNetworkBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceNetworkBroadcastVariable() {
        return Codegen.optional(this.tunnelInterfaceNetworkBroadcastVariable);
    }
    /**
     * Disallow port hopping on the tunnel interface - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfacePortHop", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfacePortHop;

    /**
     * @return Disallow port hopping on the tunnel interface - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfacePortHop() {
        return Codegen.optional(this.tunnelInterfacePortHop);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfacePortHopVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfacePortHopVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfacePortHopVariable() {
        return Codegen.optional(this.tunnelInterfacePortHopVariable);
    }
    /**
     * Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Export(name="tunnelInterfaceTunnelTcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceTunnelTcpMss;

    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceTunnelTcpMss() {
        return Codegen.optional(this.tunnelInterfaceTunnelTcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceTunnelTcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceTunnelTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceTunnelTcpMssVariable() {
        return Codegen.optional(this.tunnelInterfaceTunnelTcpMssVariable);
    }
    /**
     * Put this wan interface in STUN mode only - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceVbondAsStunServer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceVbondAsStunServer;

    /**
     * @return Put this wan interface in STUN mode only - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceVbondAsStunServer() {
        return Codegen.optional(this.tunnelInterfaceVbondAsStunServer);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceVbondAsStunServerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceVbondAsStunServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceVbondAsStunServerVariable() {
        return Codegen.optional(this.tunnelInterfaceVbondAsStunServerVariable);
    }
    /**
     * Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
     * 
     */
    @Export(name="tunnelInterfaceVmanageConnectionPreference", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceVmanageConnectionPreference;

    /**
     * @return Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceVmanageConnectionPreference() {
        return Codegen.optional(this.tunnelInterfaceVmanageConnectionPreference);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceVmanageConnectionPreferenceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceVmanageConnectionPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return Codegen.optional(this.tunnelInterfaceVmanageConnectionPreferenceVariable);
    }
    /**
     * Set tunnel QoS mode - Choices: `spoke`
     * 
     */
    @Export(name="tunnelQosMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelQosMode;

    /**
     * @return Set tunnel QoS mode - Choices: `spoke`
     * 
     */
    public Output<Optional<String>> tunnelQosMode() {
        return Codegen.optional(this.tunnelQosMode);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelQosModeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelQosModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelQosModeVariable() {
        return Codegen.optional(this.tunnelQosModeVariable);
    }
    /**
     * vdsl
     * 
     */
    @Export(name="vdslConfigurations", refs={List.class,VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration.class}, tree="[0,1]")
    private Output</* @Nullable */ List<VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration>> vdslConfigurations;

    /**
     * @return vdsl
     * 
     */
    public Output<Optional<List<VpnInterfaceDslPppoeFeatureTemplateVdslConfiguration>>> vdslConfigurations() {
        return Codegen.optional(this.vdslConfigurations);
    }
    /**
     * The version of the feature template
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }
    /**
     * Name of VPN QoS map
     * 
     */
    @Export(name="vpnQosMap", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vpnQosMap;

    /**
     * @return Name of VPN QoS map
     * 
     */
    public Output<Optional<String>> vpnQosMap() {
        return Codegen.optional(this.vpnQosMap);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="vpnQosMapVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> vpnQosMapVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> vpnQosMapVariable() {
        return Codegen.optional(this.vpnQosMapVariable);
    }
    /**
     * Name of rewrite rule
     * 
     */
    @Export(name="writeRule", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> writeRule;

    /**
     * @return Name of rewrite rule
     * 
     */
    public Output<Optional<String>> writeRule() {
        return Codegen.optional(this.writeRule);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="writeRuleVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> writeRuleVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> writeRuleVariable() {
        return Codegen.optional(this.writeRuleVariable);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VpnInterfaceDslPppoeFeatureTemplate(String name) {
        this(name, VpnInterfaceDslPppoeFeatureTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VpnInterfaceDslPppoeFeatureTemplate(String name, VpnInterfaceDslPppoeFeatureTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VpnInterfaceDslPppoeFeatureTemplate(String name, VpnInterfaceDslPppoeFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate", name, args == null ? VpnInterfaceDslPppoeFeatureTemplateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private VpnInterfaceDslPppoeFeatureTemplate(String name, Output<String> id, @Nullable VpnInterfaceDslPppoeFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/vpnInterfaceDslPppoeFeatureTemplate:VpnInterfaceDslPppoeFeatureTemplate", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VpnInterfaceDslPppoeFeatureTemplate get(String name, Output<String> id, @Nullable VpnInterfaceDslPppoeFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VpnInterfaceDslPppoeFeatureTemplate(name, id, state, options);
    }
}
