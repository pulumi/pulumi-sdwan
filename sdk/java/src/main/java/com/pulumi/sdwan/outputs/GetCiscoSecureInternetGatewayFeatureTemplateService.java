// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoSecureInternetGatewayFeatureTemplateService {
    /**
     * @return Interface Pair for active and backup
     * 
     */
    private List<GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Service Type
     * 
     */
    private String serviceType;
    /**
     * @return Umbrella Primary Datacenter
     * 
     */
    private String umbrellaPrimaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private String umbrellaPrimaryDataCenterVariable;
    /**
     * @return Umbrella Secondary Datacenter
     * 
     */
    private String umbrellaSecondaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private String umbrellaSecondaryDataCenterVariable;
    /**
     * @return For first-time Acceptable User Policy behavior, block Internet access
     * 
     */
    private Boolean zscalerAupBlockInternetUntilAccepted;
    /**
     * @return Enable Acceptable User Policy
     * 
     */
    private Boolean zscalerAupEnabled;
    /**
     * @return For first-time Acceptable User Policy behavior, force SSL inspection
     * 
     */
    private Boolean zscalerAupForceSslInspection;
    /**
     * @return Custom Acceptable User Policy frequency in days
     * 
     */
    private Integer zscalerAupTimeout;
    /**
     * @return Enforce Authentication
     * 
     */
    private Boolean zscalerAuthenticationRequired;
    /**
     * @return Enable Caution
     * 
     */
    private Boolean zscalerCautionEnabled;
    /**
     * @return Firewall enabled
     * 
     */
    private Boolean zscalerFirewallEnabled;
    /**
     * @return Enable IPS Control
     * 
     */
    private Boolean zscalerIpsControlEnabled;
    /**
     * @return Zscaler location name (optional)
     * 
     */
    private String zscalerLocationName;
    /**
     * @return Variable name
     * 
     */
    private String zscalerLocationNameVariable;
    /**
     * @return Custom Primary Datacenter
     * 
     */
    private String zscalerPrimaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private String zscalerPrimaryDataCenterVariable;
    /**
     * @return Custom Secondary Datacenter
     * 
     */
    private String zscalerSecondaryDataCenter;
    /**
     * @return Variable name
     * 
     */
    private String zscalerSecondaryDataCenterVariable;
    /**
     * @return Display time unit
     * 
     */
    private String zscalerSurrogateDisplayTimeUnit;
    /**
     * @return Idle time to disassociation
     * 
     */
    private Integer zscalerSurrogateIdleTime;
    /**
     * @return Enable Surrogate IP
     * 
     */
    private Boolean zscalerSurrogateIp;
    /**
     * @return Enforce Surrogate IP for known browsers
     * 
     */
    private Boolean zscalerSurrogateIpEnforceForKnownBrowsers;
    /**
     * @return Refresh time for re-validation of surrogacy in minutes
     * 
     */
    private Integer zscalerSurrogateRefreshTime;
    /**
     * @return Refresh Time unit
     * 
     */
    private String zscalerSurrogateRefreshTimeUnit;
    /**
     * @return XFF forwarding enabled
     * 
     */
    private Boolean zscalerXffForward;

    private GetCiscoSecureInternetGatewayFeatureTemplateService() {}
    /**
     * @return Interface Pair for active and backup
     * 
     */
    public List<GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs() {
        return this.interfacePairs;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Service Type
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return Umbrella Primary Datacenter
     * 
     */
    public String umbrellaPrimaryDataCenter() {
        return this.umbrellaPrimaryDataCenter;
    }
    /**
     * @return Variable name
     * 
     */
    public String umbrellaPrimaryDataCenterVariable() {
        return this.umbrellaPrimaryDataCenterVariable;
    }
    /**
     * @return Umbrella Secondary Datacenter
     * 
     */
    public String umbrellaSecondaryDataCenter() {
        return this.umbrellaSecondaryDataCenter;
    }
    /**
     * @return Variable name
     * 
     */
    public String umbrellaSecondaryDataCenterVariable() {
        return this.umbrellaSecondaryDataCenterVariable;
    }
    /**
     * @return For first-time Acceptable User Policy behavior, block Internet access
     * 
     */
    public Boolean zscalerAupBlockInternetUntilAccepted() {
        return this.zscalerAupBlockInternetUntilAccepted;
    }
    /**
     * @return Enable Acceptable User Policy
     * 
     */
    public Boolean zscalerAupEnabled() {
        return this.zscalerAupEnabled;
    }
    /**
     * @return For first-time Acceptable User Policy behavior, force SSL inspection
     * 
     */
    public Boolean zscalerAupForceSslInspection() {
        return this.zscalerAupForceSslInspection;
    }
    /**
     * @return Custom Acceptable User Policy frequency in days
     * 
     */
    public Integer zscalerAupTimeout() {
        return this.zscalerAupTimeout;
    }
    /**
     * @return Enforce Authentication
     * 
     */
    public Boolean zscalerAuthenticationRequired() {
        return this.zscalerAuthenticationRequired;
    }
    /**
     * @return Enable Caution
     * 
     */
    public Boolean zscalerCautionEnabled() {
        return this.zscalerCautionEnabled;
    }
    /**
     * @return Firewall enabled
     * 
     */
    public Boolean zscalerFirewallEnabled() {
        return this.zscalerFirewallEnabled;
    }
    /**
     * @return Enable IPS Control
     * 
     */
    public Boolean zscalerIpsControlEnabled() {
        return this.zscalerIpsControlEnabled;
    }
    /**
     * @return Zscaler location name (optional)
     * 
     */
    public String zscalerLocationName() {
        return this.zscalerLocationName;
    }
    /**
     * @return Variable name
     * 
     */
    public String zscalerLocationNameVariable() {
        return this.zscalerLocationNameVariable;
    }
    /**
     * @return Custom Primary Datacenter
     * 
     */
    public String zscalerPrimaryDataCenter() {
        return this.zscalerPrimaryDataCenter;
    }
    /**
     * @return Variable name
     * 
     */
    public String zscalerPrimaryDataCenterVariable() {
        return this.zscalerPrimaryDataCenterVariable;
    }
    /**
     * @return Custom Secondary Datacenter
     * 
     */
    public String zscalerSecondaryDataCenter() {
        return this.zscalerSecondaryDataCenter;
    }
    /**
     * @return Variable name
     * 
     */
    public String zscalerSecondaryDataCenterVariable() {
        return this.zscalerSecondaryDataCenterVariable;
    }
    /**
     * @return Display time unit
     * 
     */
    public String zscalerSurrogateDisplayTimeUnit() {
        return this.zscalerSurrogateDisplayTimeUnit;
    }
    /**
     * @return Idle time to disassociation
     * 
     */
    public Integer zscalerSurrogateIdleTime() {
        return this.zscalerSurrogateIdleTime;
    }
    /**
     * @return Enable Surrogate IP
     * 
     */
    public Boolean zscalerSurrogateIp() {
        return this.zscalerSurrogateIp;
    }
    /**
     * @return Enforce Surrogate IP for known browsers
     * 
     */
    public Boolean zscalerSurrogateIpEnforceForKnownBrowsers() {
        return this.zscalerSurrogateIpEnforceForKnownBrowsers;
    }
    /**
     * @return Refresh time for re-validation of surrogacy in minutes
     * 
     */
    public Integer zscalerSurrogateRefreshTime() {
        return this.zscalerSurrogateRefreshTime;
    }
    /**
     * @return Refresh Time unit
     * 
     */
    public String zscalerSurrogateRefreshTimeUnit() {
        return this.zscalerSurrogateRefreshTimeUnit;
    }
    /**
     * @return XFF forwarding enabled
     * 
     */
    public Boolean zscalerXffForward() {
        return this.zscalerXffForward;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSecureInternetGatewayFeatureTemplateService defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs;
        private Boolean optional;
        private String serviceType;
        private String umbrellaPrimaryDataCenter;
        private String umbrellaPrimaryDataCenterVariable;
        private String umbrellaSecondaryDataCenter;
        private String umbrellaSecondaryDataCenterVariable;
        private Boolean zscalerAupBlockInternetUntilAccepted;
        private Boolean zscalerAupEnabled;
        private Boolean zscalerAupForceSslInspection;
        private Integer zscalerAupTimeout;
        private Boolean zscalerAuthenticationRequired;
        private Boolean zscalerCautionEnabled;
        private Boolean zscalerFirewallEnabled;
        private Boolean zscalerIpsControlEnabled;
        private String zscalerLocationName;
        private String zscalerLocationNameVariable;
        private String zscalerPrimaryDataCenter;
        private String zscalerPrimaryDataCenterVariable;
        private String zscalerSecondaryDataCenter;
        private String zscalerSecondaryDataCenterVariable;
        private String zscalerSurrogateDisplayTimeUnit;
        private Integer zscalerSurrogateIdleTime;
        private Boolean zscalerSurrogateIp;
        private Boolean zscalerSurrogateIpEnforceForKnownBrowsers;
        private Integer zscalerSurrogateRefreshTime;
        private String zscalerSurrogateRefreshTimeUnit;
        private Boolean zscalerXffForward;
        public Builder() {}
        public Builder(GetCiscoSecureInternetGatewayFeatureTemplateService defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.interfacePairs = defaults.interfacePairs;
    	      this.optional = defaults.optional;
    	      this.serviceType = defaults.serviceType;
    	      this.umbrellaPrimaryDataCenter = defaults.umbrellaPrimaryDataCenter;
    	      this.umbrellaPrimaryDataCenterVariable = defaults.umbrellaPrimaryDataCenterVariable;
    	      this.umbrellaSecondaryDataCenter = defaults.umbrellaSecondaryDataCenter;
    	      this.umbrellaSecondaryDataCenterVariable = defaults.umbrellaSecondaryDataCenterVariable;
    	      this.zscalerAupBlockInternetUntilAccepted = defaults.zscalerAupBlockInternetUntilAccepted;
    	      this.zscalerAupEnabled = defaults.zscalerAupEnabled;
    	      this.zscalerAupForceSslInspection = defaults.zscalerAupForceSslInspection;
    	      this.zscalerAupTimeout = defaults.zscalerAupTimeout;
    	      this.zscalerAuthenticationRequired = defaults.zscalerAuthenticationRequired;
    	      this.zscalerCautionEnabled = defaults.zscalerCautionEnabled;
    	      this.zscalerFirewallEnabled = defaults.zscalerFirewallEnabled;
    	      this.zscalerIpsControlEnabled = defaults.zscalerIpsControlEnabled;
    	      this.zscalerLocationName = defaults.zscalerLocationName;
    	      this.zscalerLocationNameVariable = defaults.zscalerLocationNameVariable;
    	      this.zscalerPrimaryDataCenter = defaults.zscalerPrimaryDataCenter;
    	      this.zscalerPrimaryDataCenterVariable = defaults.zscalerPrimaryDataCenterVariable;
    	      this.zscalerSecondaryDataCenter = defaults.zscalerSecondaryDataCenter;
    	      this.zscalerSecondaryDataCenterVariable = defaults.zscalerSecondaryDataCenterVariable;
    	      this.zscalerSurrogateDisplayTimeUnit = defaults.zscalerSurrogateDisplayTimeUnit;
    	      this.zscalerSurrogateIdleTime = defaults.zscalerSurrogateIdleTime;
    	      this.zscalerSurrogateIp = defaults.zscalerSurrogateIp;
    	      this.zscalerSurrogateIpEnforceForKnownBrowsers = defaults.zscalerSurrogateIpEnforceForKnownBrowsers;
    	      this.zscalerSurrogateRefreshTime = defaults.zscalerSurrogateRefreshTime;
    	      this.zscalerSurrogateRefreshTimeUnit = defaults.zscalerSurrogateRefreshTimeUnit;
    	      this.zscalerXffForward = defaults.zscalerXffForward;
        }

        @CustomType.Setter
        public Builder interfacePairs(List<GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair> interfacePairs) {
            if (interfacePairs == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "interfacePairs");
            }
            this.interfacePairs = interfacePairs;
            return this;
        }
        public Builder interfacePairs(GetCiscoSecureInternetGatewayFeatureTemplateServiceInterfacePair... interfacePairs) {
            return interfacePairs(List.of(interfacePairs));
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaPrimaryDataCenter(String umbrellaPrimaryDataCenter) {
            if (umbrellaPrimaryDataCenter == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "umbrellaPrimaryDataCenter");
            }
            this.umbrellaPrimaryDataCenter = umbrellaPrimaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaPrimaryDataCenterVariable(String umbrellaPrimaryDataCenterVariable) {
            if (umbrellaPrimaryDataCenterVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "umbrellaPrimaryDataCenterVariable");
            }
            this.umbrellaPrimaryDataCenterVariable = umbrellaPrimaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaSecondaryDataCenter(String umbrellaSecondaryDataCenter) {
            if (umbrellaSecondaryDataCenter == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "umbrellaSecondaryDataCenter");
            }
            this.umbrellaSecondaryDataCenter = umbrellaSecondaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaSecondaryDataCenterVariable(String umbrellaSecondaryDataCenterVariable) {
            if (umbrellaSecondaryDataCenterVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "umbrellaSecondaryDataCenterVariable");
            }
            this.umbrellaSecondaryDataCenterVariable = umbrellaSecondaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupBlockInternetUntilAccepted(Boolean zscalerAupBlockInternetUntilAccepted) {
            if (zscalerAupBlockInternetUntilAccepted == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerAupBlockInternetUntilAccepted");
            }
            this.zscalerAupBlockInternetUntilAccepted = zscalerAupBlockInternetUntilAccepted;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupEnabled(Boolean zscalerAupEnabled) {
            if (zscalerAupEnabled == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerAupEnabled");
            }
            this.zscalerAupEnabled = zscalerAupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupForceSslInspection(Boolean zscalerAupForceSslInspection) {
            if (zscalerAupForceSslInspection == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerAupForceSslInspection");
            }
            this.zscalerAupForceSslInspection = zscalerAupForceSslInspection;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAupTimeout(Integer zscalerAupTimeout) {
            if (zscalerAupTimeout == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerAupTimeout");
            }
            this.zscalerAupTimeout = zscalerAupTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerAuthenticationRequired(Boolean zscalerAuthenticationRequired) {
            if (zscalerAuthenticationRequired == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerAuthenticationRequired");
            }
            this.zscalerAuthenticationRequired = zscalerAuthenticationRequired;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerCautionEnabled(Boolean zscalerCautionEnabled) {
            if (zscalerCautionEnabled == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerCautionEnabled");
            }
            this.zscalerCautionEnabled = zscalerCautionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerFirewallEnabled(Boolean zscalerFirewallEnabled) {
            if (zscalerFirewallEnabled == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerFirewallEnabled");
            }
            this.zscalerFirewallEnabled = zscalerFirewallEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerIpsControlEnabled(Boolean zscalerIpsControlEnabled) {
            if (zscalerIpsControlEnabled == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerIpsControlEnabled");
            }
            this.zscalerIpsControlEnabled = zscalerIpsControlEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerLocationName(String zscalerLocationName) {
            if (zscalerLocationName == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerLocationName");
            }
            this.zscalerLocationName = zscalerLocationName;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerLocationNameVariable(String zscalerLocationNameVariable) {
            if (zscalerLocationNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerLocationNameVariable");
            }
            this.zscalerLocationNameVariable = zscalerLocationNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerPrimaryDataCenter(String zscalerPrimaryDataCenter) {
            if (zscalerPrimaryDataCenter == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerPrimaryDataCenter");
            }
            this.zscalerPrimaryDataCenter = zscalerPrimaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerPrimaryDataCenterVariable(String zscalerPrimaryDataCenterVariable) {
            if (zscalerPrimaryDataCenterVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerPrimaryDataCenterVariable");
            }
            this.zscalerPrimaryDataCenterVariable = zscalerPrimaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSecondaryDataCenter(String zscalerSecondaryDataCenter) {
            if (zscalerSecondaryDataCenter == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSecondaryDataCenter");
            }
            this.zscalerSecondaryDataCenter = zscalerSecondaryDataCenter;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSecondaryDataCenterVariable(String zscalerSecondaryDataCenterVariable) {
            if (zscalerSecondaryDataCenterVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSecondaryDataCenterVariable");
            }
            this.zscalerSecondaryDataCenterVariable = zscalerSecondaryDataCenterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateDisplayTimeUnit(String zscalerSurrogateDisplayTimeUnit) {
            if (zscalerSurrogateDisplayTimeUnit == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSurrogateDisplayTimeUnit");
            }
            this.zscalerSurrogateDisplayTimeUnit = zscalerSurrogateDisplayTimeUnit;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateIdleTime(Integer zscalerSurrogateIdleTime) {
            if (zscalerSurrogateIdleTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSurrogateIdleTime");
            }
            this.zscalerSurrogateIdleTime = zscalerSurrogateIdleTime;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateIp(Boolean zscalerSurrogateIp) {
            if (zscalerSurrogateIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSurrogateIp");
            }
            this.zscalerSurrogateIp = zscalerSurrogateIp;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateIpEnforceForKnownBrowsers(Boolean zscalerSurrogateIpEnforceForKnownBrowsers) {
            if (zscalerSurrogateIpEnforceForKnownBrowsers == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSurrogateIpEnforceForKnownBrowsers");
            }
            this.zscalerSurrogateIpEnforceForKnownBrowsers = zscalerSurrogateIpEnforceForKnownBrowsers;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateRefreshTime(Integer zscalerSurrogateRefreshTime) {
            if (zscalerSurrogateRefreshTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSurrogateRefreshTime");
            }
            this.zscalerSurrogateRefreshTime = zscalerSurrogateRefreshTime;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerSurrogateRefreshTimeUnit(String zscalerSurrogateRefreshTimeUnit) {
            if (zscalerSurrogateRefreshTimeUnit == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerSurrogateRefreshTimeUnit");
            }
            this.zscalerSurrogateRefreshTimeUnit = zscalerSurrogateRefreshTimeUnit;
            return this;
        }
        @CustomType.Setter
        public Builder zscalerXffForward(Boolean zscalerXffForward) {
            if (zscalerXffForward == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateService", "zscalerXffForward");
            }
            this.zscalerXffForward = zscalerXffForward;
            return this;
        }
        public GetCiscoSecureInternetGatewayFeatureTemplateService build() {
            final var _resultValue = new GetCiscoSecureInternetGatewayFeatureTemplateService();
            _resultValue.interfacePairs = interfacePairs;
            _resultValue.optional = optional;
            _resultValue.serviceType = serviceType;
            _resultValue.umbrellaPrimaryDataCenter = umbrellaPrimaryDataCenter;
            _resultValue.umbrellaPrimaryDataCenterVariable = umbrellaPrimaryDataCenterVariable;
            _resultValue.umbrellaSecondaryDataCenter = umbrellaSecondaryDataCenter;
            _resultValue.umbrellaSecondaryDataCenterVariable = umbrellaSecondaryDataCenterVariable;
            _resultValue.zscalerAupBlockInternetUntilAccepted = zscalerAupBlockInternetUntilAccepted;
            _resultValue.zscalerAupEnabled = zscalerAupEnabled;
            _resultValue.zscalerAupForceSslInspection = zscalerAupForceSslInspection;
            _resultValue.zscalerAupTimeout = zscalerAupTimeout;
            _resultValue.zscalerAuthenticationRequired = zscalerAuthenticationRequired;
            _resultValue.zscalerCautionEnabled = zscalerCautionEnabled;
            _resultValue.zscalerFirewallEnabled = zscalerFirewallEnabled;
            _resultValue.zscalerIpsControlEnabled = zscalerIpsControlEnabled;
            _resultValue.zscalerLocationName = zscalerLocationName;
            _resultValue.zscalerLocationNameVariable = zscalerLocationNameVariable;
            _resultValue.zscalerPrimaryDataCenter = zscalerPrimaryDataCenter;
            _resultValue.zscalerPrimaryDataCenterVariable = zscalerPrimaryDataCenterVariable;
            _resultValue.zscalerSecondaryDataCenter = zscalerSecondaryDataCenter;
            _resultValue.zscalerSecondaryDataCenterVariable = zscalerSecondaryDataCenterVariable;
            _resultValue.zscalerSurrogateDisplayTimeUnit = zscalerSurrogateDisplayTimeUnit;
            _resultValue.zscalerSurrogateIdleTime = zscalerSurrogateIdleTime;
            _resultValue.zscalerSurrogateIp = zscalerSurrogateIp;
            _resultValue.zscalerSurrogateIpEnforceForKnownBrowsers = zscalerSurrogateIpEnforceForKnownBrowsers;
            _resultValue.zscalerSurrogateRefreshTime = zscalerSurrogateRefreshTime;
            _resultValue.zscalerSurrogateRefreshTimeUnit = zscalerSurrogateRefreshTimeUnit;
            _resultValue.zscalerXffForward = zscalerXffForward;
            return _resultValue;
        }
    }
}
