// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceSviFeatureArp;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress;
import com.pulumi.sdwan.outputs.GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceLanVpnInterfaceSviFeatureResult {
    private String aclIpv4EgressFeatureId;
    private String aclIpv4IngressFeatureId;
    private String aclIpv6EgressFeatureId;
    private String aclIpv6IngressFeatureId;
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    private Integer arpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String arpTimeoutVariable;
    /**
     * @return Configure static ARP entries
     * 
     */
    private List<GetServiceLanVpnInterfaceSviFeatureArp> arps;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Enable DHCPv6
     * 
     */
    private Boolean enableDhcpv6;
    /**
     * @return Variable name
     * 
     */
    private String enableDhcpv6Variable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    private Boolean icmpRedirectDisable;
    /**
     * @return Variable name
     * 
     */
    private String icmpRedirectDisableVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface MTU \n\n in bytes
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    /**
     * @return Interface name: VLAN 1 - VLAN 4094 when present
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return IP MTU \n\n, in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return IP Address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return List of DHCP helper addresses
     * 
     */
    private List<String> ipv4DhcpHelpers;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpHelpersVariable;
    /**
     * @return Assign secondary IP addresses
     * 
     */
    private List<GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
    /**
     * @return Subnet Mask
     * 
     */
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return Enable ipv4 VRRP
     * 
     */
    private List<GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp> ipv4Vrrps;
    /**
     * @return Assign IPv6 address
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return DHCPv6 Helper
     * 
     */
    private List<GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper> ipv6DhcpHelpers;
    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    private List<GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses;
    /**
     * @return Enable ipv6 VRRP
     * 
     */
    private List<GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp> ipv6Vrrps;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    private String serviceLanVpnFeatureId;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceLanVpnInterfaceSviFeatureResult() {}
    public String aclIpv4EgressFeatureId() {
        return this.aclIpv4EgressFeatureId;
    }
    public String aclIpv4IngressFeatureId() {
        return this.aclIpv4IngressFeatureId;
    }
    public String aclIpv6EgressFeatureId() {
        return this.aclIpv6EgressFeatureId;
    }
    public String aclIpv6IngressFeatureId() {
        return this.aclIpv6IngressFeatureId;
    }
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpTimeoutVariable() {
        return this.arpTimeoutVariable;
    }
    /**
     * @return Configure static ARP entries
     * 
     */
    public List<GetServiceLanVpnInterfaceSviFeatureArp> arps() {
        return this.arps;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enable DHCPv6
     * 
     */
    public Boolean enableDhcpv6() {
        return this.enableDhcpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String enableDhcpv6Variable() {
        return this.enableDhcpv6Variable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    public Boolean icmpRedirectDisable() {
        return this.icmpRedirectDisable;
    }
    /**
     * @return Variable name
     * 
     */
    public String icmpRedirectDisableVariable() {
        return this.icmpRedirectDisableVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface MTU \n\n in bytes
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    /**
     * @return Interface name: VLAN 1 - VLAN 4094 when present
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return IP MTU \n\n, in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return IP Address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return List of DHCP helper addresses
     * 
     */
    public List<String> ipv4DhcpHelpers() {
        return this.ipv4DhcpHelpers;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpHelpersVariable() {
        return this.ipv4DhcpHelpersVariable;
    }
    /**
     * @return Assign secondary IP addresses
     * 
     */
    public List<GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses() {
        return this.ipv4SecondaryAddresses;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return Enable ipv4 VRRP
     * 
     */
    public List<GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp> ipv4Vrrps() {
        return this.ipv4Vrrps;
    }
    /**
     * @return Assign IPv6 address
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return DHCPv6 Helper
     * 
     */
    public List<GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper> ipv6DhcpHelpers() {
        return this.ipv6DhcpHelpers;
    }
    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    public List<GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses() {
        return this.ipv6SecondaryAddresses;
    }
    /**
     * @return Enable ipv6 VRRP
     * 
     */
    public List<GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp> ipv6Vrrps() {
        return this.ipv6Vrrps;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    public String serviceLanVpnFeatureId() {
        return this.serviceLanVpnFeatureId;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLanVpnInterfaceSviFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclIpv4EgressFeatureId;
        private String aclIpv4IngressFeatureId;
        private String aclIpv6EgressFeatureId;
        private String aclIpv6IngressFeatureId;
        private Integer arpTimeout;
        private String arpTimeoutVariable;
        private List<GetServiceLanVpnInterfaceSviFeatureArp> arps;
        private String description;
        private Boolean enableDhcpv6;
        private String enableDhcpv6Variable;
        private String featureProfileId;
        private Boolean icmpRedirectDisable;
        private String icmpRedirectDisableVariable;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private List<String> ipv4DhcpHelpers;
        private String ipv4DhcpHelpersVariable;
        private List<GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private List<GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp> ipv4Vrrps;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private List<GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper> ipv6DhcpHelpers;
        private List<GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses;
        private List<GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp> ipv6Vrrps;
        private String name;
        private String serviceLanVpnFeatureId;
        private Boolean shutdown;
        private String shutdownVariable;
        private Integer tcpMss;
        private String tcpMssVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceLanVpnInterfaceSviFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclIpv4EgressFeatureId = defaults.aclIpv4EgressFeatureId;
    	      this.aclIpv4IngressFeatureId = defaults.aclIpv4IngressFeatureId;
    	      this.aclIpv6EgressFeatureId = defaults.aclIpv6EgressFeatureId;
    	      this.aclIpv6IngressFeatureId = defaults.aclIpv6IngressFeatureId;
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.arpTimeoutVariable = defaults.arpTimeoutVariable;
    	      this.arps = defaults.arps;
    	      this.description = defaults.description;
    	      this.enableDhcpv6 = defaults.enableDhcpv6;
    	      this.enableDhcpv6Variable = defaults.enableDhcpv6Variable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.icmpRedirectDisable = defaults.icmpRedirectDisable;
    	      this.icmpRedirectDisableVariable = defaults.icmpRedirectDisableVariable;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4DhcpHelpers = defaults.ipv4DhcpHelpers;
    	      this.ipv4DhcpHelpersVariable = defaults.ipv4DhcpHelpersVariable;
    	      this.ipv4SecondaryAddresses = defaults.ipv4SecondaryAddresses;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.ipv4Vrrps = defaults.ipv4Vrrps;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.ipv6DhcpHelpers = defaults.ipv6DhcpHelpers;
    	      this.ipv6SecondaryAddresses = defaults.ipv6SecondaryAddresses;
    	      this.ipv6Vrrps = defaults.ipv6Vrrps;
    	      this.name = defaults.name;
    	      this.serviceLanVpnFeatureId = defaults.serviceLanVpnFeatureId;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder aclIpv4EgressFeatureId(String aclIpv4EgressFeatureId) {
            if (aclIpv4EgressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "aclIpv4EgressFeatureId");
            }
            this.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv4IngressFeatureId(String aclIpv4IngressFeatureId) {
            if (aclIpv4IngressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "aclIpv4IngressFeatureId");
            }
            this.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6EgressFeatureId(String aclIpv6EgressFeatureId) {
            if (aclIpv6EgressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "aclIpv6EgressFeatureId");
            }
            this.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6IngressFeatureId(String aclIpv6IngressFeatureId) {
            if (aclIpv6IngressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "aclIpv6IngressFeatureId");
            }
            this.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            if (arpTimeout == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "arpTimeout");
            }
            this.arpTimeout = arpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            if (arpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "arpTimeoutVariable");
            }
            this.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder arps(List<GetServiceLanVpnInterfaceSviFeatureArp> arps) {
            if (arps == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "arps");
            }
            this.arps = arps;
            return this;
        }
        public Builder arps(GetServiceLanVpnInterfaceSviFeatureArp... arps) {
            return arps(List.of(arps));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableDhcpv6(Boolean enableDhcpv6) {
            if (enableDhcpv6 == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "enableDhcpv6");
            }
            this.enableDhcpv6 = enableDhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder enableDhcpv6Variable(String enableDhcpv6Variable) {
            if (enableDhcpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "enableDhcpv6Variable");
            }
            this.enableDhcpv6Variable = enableDhcpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisable(Boolean icmpRedirectDisable) {
            if (icmpRedirectDisable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "icmpRedirectDisable");
            }
            this.icmpRedirectDisable = icmpRedirectDisable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisableVariable(String icmpRedirectDisableVariable) {
            if (icmpRedirectDisableVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "icmpRedirectDisableVariable");
            }
            this.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            if (ipv4DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4DhcpHelpers");
            }
            this.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpersVariable(String ipv4DhcpHelpersVariable) {
            if (ipv4DhcpHelpersVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4DhcpHelpersVariable");
            }
            this.ipv4DhcpHelpersVariable = ipv4DhcpHelpersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SecondaryAddresses(List<GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses) {
            if (ipv4SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4SecondaryAddresses");
            }
            this.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }
        public Builder ipv4SecondaryAddresses(GetServiceLanVpnInterfaceSviFeatureIpv4SecondaryAddress... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Vrrps(List<GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp> ipv4Vrrps) {
            if (ipv4Vrrps == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv4Vrrps");
            }
            this.ipv4Vrrps = ipv4Vrrps;
            return this;
        }
        public Builder ipv4Vrrps(GetServiceLanVpnInterfaceSviFeatureIpv4Vrrp... ipv4Vrrps) {
            return ipv4Vrrps(List.of(ipv4Vrrps));
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpHelpers(List<GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper> ipv6DhcpHelpers) {
            if (ipv6DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv6DhcpHelpers");
            }
            this.ipv6DhcpHelpers = ipv6DhcpHelpers;
            return this;
        }
        public Builder ipv6DhcpHelpers(GetServiceLanVpnInterfaceSviFeatureIpv6DhcpHelper... ipv6DhcpHelpers) {
            return ipv6DhcpHelpers(List.of(ipv6DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv6SecondaryAddresses(List<GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses) {
            if (ipv6SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv6SecondaryAddresses");
            }
            this.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            return this;
        }
        public Builder ipv6SecondaryAddresses(GetServiceLanVpnInterfaceSviFeatureIpv6SecondaryAddress... ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(List.of(ipv6SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Vrrps(List<GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp> ipv6Vrrps) {
            if (ipv6Vrrps == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "ipv6Vrrps");
            }
            this.ipv6Vrrps = ipv6Vrrps;
            return this;
        }
        public Builder ipv6Vrrps(GetServiceLanVpnInterfaceSviFeatureIpv6Vrrp... ipv6Vrrps) {
            return ipv6Vrrps(List.of(ipv6Vrrps));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLanVpnFeatureId(String serviceLanVpnFeatureId) {
            if (serviceLanVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "serviceLanVpnFeatureId");
            }
            this.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceSviFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceLanVpnInterfaceSviFeatureResult build() {
            final var _resultValue = new GetServiceLanVpnInterfaceSviFeatureResult();
            _resultValue.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            _resultValue.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            _resultValue.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            _resultValue.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            _resultValue.arpTimeout = arpTimeout;
            _resultValue.arpTimeoutVariable = arpTimeoutVariable;
            _resultValue.arps = arps;
            _resultValue.description = description;
            _resultValue.enableDhcpv6 = enableDhcpv6;
            _resultValue.enableDhcpv6Variable = enableDhcpv6Variable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.icmpRedirectDisable = icmpRedirectDisable;
            _resultValue.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4DhcpHelpers = ipv4DhcpHelpers;
            _resultValue.ipv4DhcpHelpersVariable = ipv4DhcpHelpersVariable;
            _resultValue.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.ipv4Vrrps = ipv4Vrrps;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.ipv6DhcpHelpers = ipv6DhcpHelpers;
            _resultValue.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            _resultValue.ipv6Vrrps = ipv6Vrrps;
            _resultValue.name = name;
            _resultValue.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
