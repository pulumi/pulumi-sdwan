// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTrafficDataPolicyDefinitionSequenceMatchEntry {
    /**
     * @return Application list ID
     * 
     */
    private String applicationListId;
    /**
     * @return Application list version
     * 
     */
    private Integer applicationListVersion;
    /**
     * @return Destination Data Prefix list ID
     * 
     */
    private String destinationDataPrefixListId;
    /**
     * @return Destination Data Prefix list version
     * 
     */
    private Integer destinationDataPrefixListVersion;
    /**
     * @return Destination IP
     * 
     */
    private String destinationIp;
    /**
     * @return Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
     * 
     */
    private String destinationPort;
    /**
     * @return Destination region
     * 
     */
    private String destinationRegion;
    /**
     * @return DNS request or response
     * 
     */
    private String dns;
    /**
     * @return DNS Application list ID
     * 
     */
    private String dnsApplicationListId;
    /**
     * @return DNS Application list version
     * 
     */
    private Integer dnsApplicationListVersion;
    /**
     * @return DSCP value
     * 
     */
    private String dscp;
    /**
     * @return ICMP Message
     * 
     */
    private String icmpMessage;
    /**
     * @return Packet length
     * 
     */
    private Integer packetLength;
    /**
     * @return PLP
     * 
     */
    private String plp;
    /**
     * @return IP Protocol, 0-255 (Single value or multiple values separated by spaces)
     * 
     */
    private String protocol;
    /**
     * @return Source Data Prefix list ID
     * 
     */
    private String sourceDataPrefixListId;
    /**
     * @return Source Data Prefix list version
     * 
     */
    private Integer sourceDataPrefixListVersion;
    /**
     * @return Source IP
     * 
     */
    private String sourceIp;
    /**
     * @return Source port, 0-65535 (Single value, range or multiple values separated by spaces)
     * 
     */
    private String sourcePort;
    /**
     * @return TCP flags
     * 
     */
    private String tcp;
    /**
     * @return Traffic to
     * 
     */
    private String trafficTo;
    /**
     * @return Type of match entry
     * 
     */
    private String type;

    private GetTrafficDataPolicyDefinitionSequenceMatchEntry() {}
    /**
     * @return Application list ID
     * 
     */
    public String applicationListId() {
        return this.applicationListId;
    }
    /**
     * @return Application list version
     * 
     */
    public Integer applicationListVersion() {
        return this.applicationListVersion;
    }
    /**
     * @return Destination Data Prefix list ID
     * 
     */
    public String destinationDataPrefixListId() {
        return this.destinationDataPrefixListId;
    }
    /**
     * @return Destination Data Prefix list version
     * 
     */
    public Integer destinationDataPrefixListVersion() {
        return this.destinationDataPrefixListVersion;
    }
    /**
     * @return Destination IP
     * 
     */
    public String destinationIp() {
        return this.destinationIp;
    }
    /**
     * @return Destination port, 0-65535 (Single value, range or multiple values separated by spaces)
     * 
     */
    public String destinationPort() {
        return this.destinationPort;
    }
    /**
     * @return Destination region
     * 
     */
    public String destinationRegion() {
        return this.destinationRegion;
    }
    /**
     * @return DNS request or response
     * 
     */
    public String dns() {
        return this.dns;
    }
    /**
     * @return DNS Application list ID
     * 
     */
    public String dnsApplicationListId() {
        return this.dnsApplicationListId;
    }
    /**
     * @return DNS Application list version
     * 
     */
    public Integer dnsApplicationListVersion() {
        return this.dnsApplicationListVersion;
    }
    /**
     * @return DSCP value
     * 
     */
    public String dscp() {
        return this.dscp;
    }
    /**
     * @return ICMP Message
     * 
     */
    public String icmpMessage() {
        return this.icmpMessage;
    }
    /**
     * @return Packet length
     * 
     */
    public Integer packetLength() {
        return this.packetLength;
    }
    /**
     * @return PLP
     * 
     */
    public String plp() {
        return this.plp;
    }
    /**
     * @return IP Protocol, 0-255 (Single value or multiple values separated by spaces)
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Source Data Prefix list ID
     * 
     */
    public String sourceDataPrefixListId() {
        return this.sourceDataPrefixListId;
    }
    /**
     * @return Source Data Prefix list version
     * 
     */
    public Integer sourceDataPrefixListVersion() {
        return this.sourceDataPrefixListVersion;
    }
    /**
     * @return Source IP
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return Source port, 0-65535 (Single value, range or multiple values separated by spaces)
     * 
     */
    public String sourcePort() {
        return this.sourcePort;
    }
    /**
     * @return TCP flags
     * 
     */
    public String tcp() {
        return this.tcp;
    }
    /**
     * @return Traffic to
     * 
     */
    public String trafficTo() {
        return this.trafficTo;
    }
    /**
     * @return Type of match entry
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTrafficDataPolicyDefinitionSequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationListId;
        private Integer applicationListVersion;
        private String destinationDataPrefixListId;
        private Integer destinationDataPrefixListVersion;
        private String destinationIp;
        private String destinationPort;
        private String destinationRegion;
        private String dns;
        private String dnsApplicationListId;
        private Integer dnsApplicationListVersion;
        private String dscp;
        private String icmpMessage;
        private Integer packetLength;
        private String plp;
        private String protocol;
        private String sourceDataPrefixListId;
        private Integer sourceDataPrefixListVersion;
        private String sourceIp;
        private String sourcePort;
        private String tcp;
        private String trafficTo;
        private String type;
        public Builder() {}
        public Builder(GetTrafficDataPolicyDefinitionSequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationListId = defaults.applicationListId;
    	      this.applicationListVersion = defaults.applicationListVersion;
    	      this.destinationDataPrefixListId = defaults.destinationDataPrefixListId;
    	      this.destinationDataPrefixListVersion = defaults.destinationDataPrefixListVersion;
    	      this.destinationIp = defaults.destinationIp;
    	      this.destinationPort = defaults.destinationPort;
    	      this.destinationRegion = defaults.destinationRegion;
    	      this.dns = defaults.dns;
    	      this.dnsApplicationListId = defaults.dnsApplicationListId;
    	      this.dnsApplicationListVersion = defaults.dnsApplicationListVersion;
    	      this.dscp = defaults.dscp;
    	      this.icmpMessage = defaults.icmpMessage;
    	      this.packetLength = defaults.packetLength;
    	      this.plp = defaults.plp;
    	      this.protocol = defaults.protocol;
    	      this.sourceDataPrefixListId = defaults.sourceDataPrefixListId;
    	      this.sourceDataPrefixListVersion = defaults.sourceDataPrefixListVersion;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourcePort = defaults.sourcePort;
    	      this.tcp = defaults.tcp;
    	      this.trafficTo = defaults.trafficTo;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder applicationListId(String applicationListId) {
            if (applicationListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "applicationListId");
            }
            this.applicationListId = applicationListId;
            return this;
        }
        @CustomType.Setter
        public Builder applicationListVersion(Integer applicationListVersion) {
            if (applicationListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "applicationListVersion");
            }
            this.applicationListVersion = applicationListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataPrefixListId(String destinationDataPrefixListId) {
            if (destinationDataPrefixListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "destinationDataPrefixListId");
            }
            this.destinationDataPrefixListId = destinationDataPrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataPrefixListVersion(Integer destinationDataPrefixListVersion) {
            if (destinationDataPrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "destinationDataPrefixListVersion");
            }
            this.destinationDataPrefixListVersion = destinationDataPrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder destinationIp(String destinationIp) {
            if (destinationIp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "destinationIp");
            }
            this.destinationIp = destinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPort(String destinationPort) {
            if (destinationPort == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "destinationPort");
            }
            this.destinationPort = destinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder destinationRegion(String destinationRegion) {
            if (destinationRegion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "destinationRegion");
            }
            this.destinationRegion = destinationRegion;
            return this;
        }
        @CustomType.Setter
        public Builder dns(String dns) {
            if (dns == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "dns");
            }
            this.dns = dns;
            return this;
        }
        @CustomType.Setter
        public Builder dnsApplicationListId(String dnsApplicationListId) {
            if (dnsApplicationListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "dnsApplicationListId");
            }
            this.dnsApplicationListId = dnsApplicationListId;
            return this;
        }
        @CustomType.Setter
        public Builder dnsApplicationListVersion(Integer dnsApplicationListVersion) {
            if (dnsApplicationListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "dnsApplicationListVersion");
            }
            this.dnsApplicationListVersion = dnsApplicationListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder dscp(String dscp) {
            if (dscp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "dscp");
            }
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder icmpMessage(String icmpMessage) {
            if (icmpMessage == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "icmpMessage");
            }
            this.icmpMessage = icmpMessage;
            return this;
        }
        @CustomType.Setter
        public Builder packetLength(Integer packetLength) {
            if (packetLength == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "packetLength");
            }
            this.packetLength = packetLength;
            return this;
        }
        @CustomType.Setter
        public Builder plp(String plp) {
            if (plp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "plp");
            }
            this.plp = plp;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataPrefixListId(String sourceDataPrefixListId) {
            if (sourceDataPrefixListId == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "sourceDataPrefixListId");
            }
            this.sourceDataPrefixListId = sourceDataPrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataPrefixListVersion(Integer sourceDataPrefixListVersion) {
            if (sourceDataPrefixListVersion == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "sourceDataPrefixListVersion");
            }
            this.sourceDataPrefixListVersion = sourceDataPrefixListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(String sourceIp) {
            if (sourceIp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "sourceIp");
            }
            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePort(String sourcePort) {
            if (sourcePort == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "sourcePort");
            }
            this.sourcePort = sourcePort;
            return this;
        }
        @CustomType.Setter
        public Builder tcp(String tcp) {
            if (tcp == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "tcp");
            }
            this.tcp = tcp;
            return this;
        }
        @CustomType.Setter
        public Builder trafficTo(String trafficTo) {
            if (trafficTo == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "trafficTo");
            }
            this.trafficTo = trafficTo;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetTrafficDataPolicyDefinitionSequenceMatchEntry", "type");
            }
            this.type = type;
            return this;
        }
        public GetTrafficDataPolicyDefinitionSequenceMatchEntry build() {
            final var _resultValue = new GetTrafficDataPolicyDefinitionSequenceMatchEntry();
            _resultValue.applicationListId = applicationListId;
            _resultValue.applicationListVersion = applicationListVersion;
            _resultValue.destinationDataPrefixListId = destinationDataPrefixListId;
            _resultValue.destinationDataPrefixListVersion = destinationDataPrefixListVersion;
            _resultValue.destinationIp = destinationIp;
            _resultValue.destinationPort = destinationPort;
            _resultValue.destinationRegion = destinationRegion;
            _resultValue.dns = dns;
            _resultValue.dnsApplicationListId = dnsApplicationListId;
            _resultValue.dnsApplicationListVersion = dnsApplicationListVersion;
            _resultValue.dscp = dscp;
            _resultValue.icmpMessage = icmpMessage;
            _resultValue.packetLength = packetLength;
            _resultValue.plp = plp;
            _resultValue.protocol = protocol;
            _resultValue.sourceDataPrefixListId = sourceDataPrefixListId;
            _resultValue.sourceDataPrefixListVersion = sourceDataPrefixListVersion;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourcePort = sourcePort;
            _resultValue.tcp = tcp;
            _resultValue.trafficTo = trafficTo;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
