// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceWirelessLanFeatureSsidArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceWirelessLanFeatureSsidArgs Empty = new ServiceWirelessLanFeatureSsidArgs();

    /**
     * Set admin state
     *   - Default value: `true`
     * 
     */
    @Import(name="adminState")
    private @Nullable Output<Boolean> adminState;

    /**
     * @return Set admin state
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> adminState() {
        return Optional.ofNullable(this.adminState);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="adminStateVariable")
    private @Nullable Output<String> adminStateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> adminStateVariable() {
        return Optional.ofNullable(this.adminStateVariable);
    }

    /**
     * Enable broadcast SSID
     *   - Default value: `true`
     * 
     */
    @Import(name="broadcastSsid")
    private @Nullable Output<Boolean> broadcastSsid;

    /**
     * @return Enable broadcast SSID
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> broadcastSsid() {
        return Optional.ofNullable(this.broadcastSsid);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="broadcastSsidVariable")
    private @Nullable Output<String> broadcastSsidVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> broadcastSsidVariable() {
        return Optional.ofNullable(this.broadcastSsidVariable);
    }

    /**
     * Set passphrase, Attribute conditional on `security_type` being equal to `personal`
     * 
     */
    @Import(name="passphrase")
    private @Nullable Output<String> passphrase;

    /**
     * @return Set passphrase, Attribute conditional on `security_type` being equal to `personal`
     * 
     */
    public Optional<Output<String>> passphrase() {
        return Optional.ofNullable(this.passphrase);
    }

    /**
     * Variable name, Attribute conditional on `security_type` being equal to `personal`
     * 
     */
    @Import(name="passphraseVariable")
    private @Nullable Output<String> passphraseVariable;

    /**
     * @return Variable name, Attribute conditional on `security_type` being equal to `personal`
     * 
     */
    public Optional<Output<String>> passphraseVariable() {
        return Optional.ofNullable(this.passphraseVariable);
    }

    /**
     * Select QoS profile
     *   - Choices: `platinum`, `gold`, `silver`, `bronze`
     *   - Default value: `silver`
     * 
     */
    @Import(name="qosProfile")
    private @Nullable Output<String> qosProfile;

    /**
     * @return Select QoS profile
     *   - Choices: `platinum`, `gold`, `silver`, `bronze`
     *   - Default value: `silver`
     * 
     */
    public Optional<Output<String>> qosProfile() {
        return Optional.ofNullable(this.qosProfile);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosProfileVariable")
    private @Nullable Output<String> qosProfileVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosProfileVariable() {
        return Optional.ofNullable(this.qosProfileVariable);
    }

    /**
     * Select radio type
     *   - Choices: `24ghz`, `5ghz`, `all`
     *   - Default value: `all`
     * 
     */
    @Import(name="radioType")
    private @Nullable Output<String> radioType;

    /**
     * @return Select radio type
     *   - Choices: `24ghz`, `5ghz`, `all`
     *   - Default value: `all`
     * 
     */
    public Optional<Output<String>> radioType() {
        return Optional.ofNullable(this.radioType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="radioTypeVariable")
    private @Nullable Output<String> radioTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> radioTypeVariable() {
        return Optional.ofNullable(this.radioTypeVariable);
    }

    /**
     * Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    @Import(name="radiusServerIp")
    private @Nullable Output<String> radiusServerIp;

    /**
     * @return Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    public Optional<Output<String>> radiusServerIp() {
        return Optional.ofNullable(this.radiusServerIp);
    }

    /**
     * Variable name, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    @Import(name="radiusServerIpVariable")
    private @Nullable Output<String> radiusServerIpVariable;

    /**
     * @return Variable name, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    public Optional<Output<String>> radiusServerIpVariable() {
        return Optional.ofNullable(this.radiusServerIpVariable);
    }

    /**
     * Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
     *   - Range: `1`-`65535`
     *   - Default value: `1812`
     * 
     */
    @Import(name="radiusServerPort")
    private @Nullable Output<Integer> radiusServerPort;

    /**
     * @return Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
     *   - Range: `1`-`65535`
     *   - Default value: `1812`
     * 
     */
    public Optional<Output<Integer>> radiusServerPort() {
        return Optional.ofNullable(this.radiusServerPort);
    }

    /**
     * Variable name, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    @Import(name="radiusServerPortVariable")
    private @Nullable Output<String> radiusServerPortVariable;

    /**
     * @return Variable name, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    public Optional<Output<String>> radiusServerPortVariable() {
        return Optional.ofNullable(this.radiusServerPortVariable);
    }

    /**
     * Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    @Import(name="radiusServerSecret")
    private @Nullable Output<String> radiusServerSecret;

    /**
     * @return Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    public Optional<Output<String>> radiusServerSecret() {
        return Optional.ofNullable(this.radiusServerSecret);
    }

    /**
     * Variable name, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    @Import(name="radiusServerSecretVariable")
    private @Nullable Output<String> radiusServerSecretVariable;

    /**
     * @return Variable name, Attribute conditional on `security_type` being equal to `enterprise`
     * 
     */
    public Optional<Output<String>> radiusServerSecretVariable() {
        return Optional.ofNullable(this.radiusServerSecretVariable);
    }

    /**
     * Select security type
     *   - Choices: `enterprise`, `personal`, `open`
     * 
     */
    @Import(name="securityType")
    private @Nullable Output<String> securityType;

    /**
     * @return Select security type
     *   - Choices: `enterprise`, `personal`, `open`
     * 
     */
    public Optional<Output<String>> securityType() {
        return Optional.ofNullable(this.securityType);
    }

    /**
     * Configure wlan SSID
     * 
     */
    @Import(name="ssidName")
    private @Nullable Output<String> ssidName;

    /**
     * @return Configure wlan SSID
     * 
     */
    public Optional<Output<String>> ssidName() {
        return Optional.ofNullable(this.ssidName);
    }

    /**
     * Set VLAN ID
     *   - Range: `1`-`4094`
     * 
     */
    @Import(name="vlanId")
    private @Nullable Output<Integer> vlanId;

    /**
     * @return Set VLAN ID
     *   - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> vlanId() {
        return Optional.ofNullable(this.vlanId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vlanIdVariable")
    private @Nullable Output<String> vlanIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vlanIdVariable() {
        return Optional.ofNullable(this.vlanIdVariable);
    }

    private ServiceWirelessLanFeatureSsidArgs() {}

    private ServiceWirelessLanFeatureSsidArgs(ServiceWirelessLanFeatureSsidArgs $) {
        this.adminState = $.adminState;
        this.adminStateVariable = $.adminStateVariable;
        this.broadcastSsid = $.broadcastSsid;
        this.broadcastSsidVariable = $.broadcastSsidVariable;
        this.passphrase = $.passphrase;
        this.passphraseVariable = $.passphraseVariable;
        this.qosProfile = $.qosProfile;
        this.qosProfileVariable = $.qosProfileVariable;
        this.radioType = $.radioType;
        this.radioTypeVariable = $.radioTypeVariable;
        this.radiusServerIp = $.radiusServerIp;
        this.radiusServerIpVariable = $.radiusServerIpVariable;
        this.radiusServerPort = $.radiusServerPort;
        this.radiusServerPortVariable = $.radiusServerPortVariable;
        this.radiusServerSecret = $.radiusServerSecret;
        this.radiusServerSecretVariable = $.radiusServerSecretVariable;
        this.securityType = $.securityType;
        this.ssidName = $.ssidName;
        this.vlanId = $.vlanId;
        this.vlanIdVariable = $.vlanIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceWirelessLanFeatureSsidArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceWirelessLanFeatureSsidArgs $;

        public Builder() {
            $ = new ServiceWirelessLanFeatureSsidArgs();
        }

        public Builder(ServiceWirelessLanFeatureSsidArgs defaults) {
            $ = new ServiceWirelessLanFeatureSsidArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param adminState Set admin state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder adminState(@Nullable Output<Boolean> adminState) {
            $.adminState = adminState;
            return this;
        }

        /**
         * @param adminState Set admin state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder adminState(Boolean adminState) {
            return adminState(Output.of(adminState));
        }

        /**
         * @param adminStateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder adminStateVariable(@Nullable Output<String> adminStateVariable) {
            $.adminStateVariable = adminStateVariable;
            return this;
        }

        /**
         * @param adminStateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder adminStateVariable(String adminStateVariable) {
            return adminStateVariable(Output.of(adminStateVariable));
        }

        /**
         * @param broadcastSsid Enable broadcast SSID
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder broadcastSsid(@Nullable Output<Boolean> broadcastSsid) {
            $.broadcastSsid = broadcastSsid;
            return this;
        }

        /**
         * @param broadcastSsid Enable broadcast SSID
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder broadcastSsid(Boolean broadcastSsid) {
            return broadcastSsid(Output.of(broadcastSsid));
        }

        /**
         * @param broadcastSsidVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder broadcastSsidVariable(@Nullable Output<String> broadcastSsidVariable) {
            $.broadcastSsidVariable = broadcastSsidVariable;
            return this;
        }

        /**
         * @param broadcastSsidVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder broadcastSsidVariable(String broadcastSsidVariable) {
            return broadcastSsidVariable(Output.of(broadcastSsidVariable));
        }

        /**
         * @param passphrase Set passphrase, Attribute conditional on `security_type` being equal to `personal`
         * 
         * @return builder
         * 
         */
        public Builder passphrase(@Nullable Output<String> passphrase) {
            $.passphrase = passphrase;
            return this;
        }

        /**
         * @param passphrase Set passphrase, Attribute conditional on `security_type` being equal to `personal`
         * 
         * @return builder
         * 
         */
        public Builder passphrase(String passphrase) {
            return passphrase(Output.of(passphrase));
        }

        /**
         * @param passphraseVariable Variable name, Attribute conditional on `security_type` being equal to `personal`
         * 
         * @return builder
         * 
         */
        public Builder passphraseVariable(@Nullable Output<String> passphraseVariable) {
            $.passphraseVariable = passphraseVariable;
            return this;
        }

        /**
         * @param passphraseVariable Variable name, Attribute conditional on `security_type` being equal to `personal`
         * 
         * @return builder
         * 
         */
        public Builder passphraseVariable(String passphraseVariable) {
            return passphraseVariable(Output.of(passphraseVariable));
        }

        /**
         * @param qosProfile Select QoS profile
         *   - Choices: `platinum`, `gold`, `silver`, `bronze`
         *   - Default value: `silver`
         * 
         * @return builder
         * 
         */
        public Builder qosProfile(@Nullable Output<String> qosProfile) {
            $.qosProfile = qosProfile;
            return this;
        }

        /**
         * @param qosProfile Select QoS profile
         *   - Choices: `platinum`, `gold`, `silver`, `bronze`
         *   - Default value: `silver`
         * 
         * @return builder
         * 
         */
        public Builder qosProfile(String qosProfile) {
            return qosProfile(Output.of(qosProfile));
        }

        /**
         * @param qosProfileVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosProfileVariable(@Nullable Output<String> qosProfileVariable) {
            $.qosProfileVariable = qosProfileVariable;
            return this;
        }

        /**
         * @param qosProfileVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosProfileVariable(String qosProfileVariable) {
            return qosProfileVariable(Output.of(qosProfileVariable));
        }

        /**
         * @param radioType Select radio type
         *   - Choices: `24ghz`, `5ghz`, `all`
         *   - Default value: `all`
         * 
         * @return builder
         * 
         */
        public Builder radioType(@Nullable Output<String> radioType) {
            $.radioType = radioType;
            return this;
        }

        /**
         * @param radioType Select radio type
         *   - Choices: `24ghz`, `5ghz`, `all`
         *   - Default value: `all`
         * 
         * @return builder
         * 
         */
        public Builder radioType(String radioType) {
            return radioType(Output.of(radioType));
        }

        /**
         * @param radioTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder radioTypeVariable(@Nullable Output<String> radioTypeVariable) {
            $.radioTypeVariable = radioTypeVariable;
            return this;
        }

        /**
         * @param radioTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder radioTypeVariable(String radioTypeVariable) {
            return radioTypeVariable(Output.of(radioTypeVariable));
        }

        /**
         * @param radiusServerIp Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerIp(@Nullable Output<String> radiusServerIp) {
            $.radiusServerIp = radiusServerIp;
            return this;
        }

        /**
         * @param radiusServerIp Set RADIUS server IP, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerIp(String radiusServerIp) {
            return radiusServerIp(Output.of(radiusServerIp));
        }

        /**
         * @param radiusServerIpVariable Variable name, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerIpVariable(@Nullable Output<String> radiusServerIpVariable) {
            $.radiusServerIpVariable = radiusServerIpVariable;
            return this;
        }

        /**
         * @param radiusServerIpVariable Variable name, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerIpVariable(String radiusServerIpVariable) {
            return radiusServerIpVariable(Output.of(radiusServerIpVariable));
        }

        /**
         * @param radiusServerPort Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
         *   - Range: `1`-`65535`
         *   - Default value: `1812`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerPort(@Nullable Output<Integer> radiusServerPort) {
            $.radiusServerPort = radiusServerPort;
            return this;
        }

        /**
         * @param radiusServerPort Set RADIUS server authentication port, Attribute conditional on `security_type` being equal to `enterprise`
         *   - Range: `1`-`65535`
         *   - Default value: `1812`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerPort(Integer radiusServerPort) {
            return radiusServerPort(Output.of(radiusServerPort));
        }

        /**
         * @param radiusServerPortVariable Variable name, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerPortVariable(@Nullable Output<String> radiusServerPortVariable) {
            $.radiusServerPortVariable = radiusServerPortVariable;
            return this;
        }

        /**
         * @param radiusServerPortVariable Variable name, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerPortVariable(String radiusServerPortVariable) {
            return radiusServerPortVariable(Output.of(radiusServerPortVariable));
        }

        /**
         * @param radiusServerSecret Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerSecret(@Nullable Output<String> radiusServerSecret) {
            $.radiusServerSecret = radiusServerSecret;
            return this;
        }

        /**
         * @param radiusServerSecret Set RADIUS server shared secret, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerSecret(String radiusServerSecret) {
            return radiusServerSecret(Output.of(radiusServerSecret));
        }

        /**
         * @param radiusServerSecretVariable Variable name, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerSecretVariable(@Nullable Output<String> radiusServerSecretVariable) {
            $.radiusServerSecretVariable = radiusServerSecretVariable;
            return this;
        }

        /**
         * @param radiusServerSecretVariable Variable name, Attribute conditional on `security_type` being equal to `enterprise`
         * 
         * @return builder
         * 
         */
        public Builder radiusServerSecretVariable(String radiusServerSecretVariable) {
            return radiusServerSecretVariable(Output.of(radiusServerSecretVariable));
        }

        /**
         * @param securityType Select security type
         *   - Choices: `enterprise`, `personal`, `open`
         * 
         * @return builder
         * 
         */
        public Builder securityType(@Nullable Output<String> securityType) {
            $.securityType = securityType;
            return this;
        }

        /**
         * @param securityType Select security type
         *   - Choices: `enterprise`, `personal`, `open`
         * 
         * @return builder
         * 
         */
        public Builder securityType(String securityType) {
            return securityType(Output.of(securityType));
        }

        /**
         * @param ssidName Configure wlan SSID
         * 
         * @return builder
         * 
         */
        public Builder ssidName(@Nullable Output<String> ssidName) {
            $.ssidName = ssidName;
            return this;
        }

        /**
         * @param ssidName Configure wlan SSID
         * 
         * @return builder
         * 
         */
        public Builder ssidName(String ssidName) {
            return ssidName(Output.of(ssidName));
        }

        /**
         * @param vlanId Set VLAN ID
         *   - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder vlanId(@Nullable Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId Set VLAN ID
         *   - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        /**
         * @param vlanIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vlanIdVariable(@Nullable Output<String> vlanIdVariable) {
            $.vlanIdVariable = vlanIdVariable;
            return this;
        }

        /**
         * @param vlanIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vlanIdVariable(String vlanIdVariable) {
            return vlanIdVariable(Output.of(vlanIdVariable));
        }

        public ServiceWirelessLanFeatureSsidArgs build() {
            return $;
        }
    }

}
