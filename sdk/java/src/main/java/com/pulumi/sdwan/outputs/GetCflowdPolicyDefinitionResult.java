// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCflowdPolicyDefinitionCollector;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCflowdPolicyDefinitionResult {
    /**
     * @return Active flow timeout in seconds
     * 
     */
    private Integer activeFlowTimeout;
    /**
     * @return List of collectors
     * 
     */
    private List<GetCflowdPolicyDefinitionCollector> collectors;
    /**
     * @return The description of the policy definition
     * 
     */
    private String description;
    /**
     * @return Flow refresh in seconds
     * 
     */
    private Integer flowRefresh;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Inactive flow timeout in seconds
     * 
     */
    private Integer inactiveFlowTimeout;
    /**
     * @return The name of the policy definition
     * 
     */
    private String name;
    /**
     * @return Protocol, either `ipv4`, `ipv6` or `all`
     * 
     */
    private String protocol;
    /**
     * @return Collect remarked DSCP
     * 
     */
    private Boolean remarkedDscp;
    /**
     * @return Flow sampling interval
     * 
     */
    private Integer samplingInterval;
    /**
     * @return Collect TOS record field
     * 
     */
    private Boolean tos;
    /**
     * @return Type
     * 
     */
    private String type;
    /**
     * @return The version of the object
     * 
     */
    private Integer version;

    private GetCflowdPolicyDefinitionResult() {}
    /**
     * @return Active flow timeout in seconds
     * 
     */
    public Integer activeFlowTimeout() {
        return this.activeFlowTimeout;
    }
    /**
     * @return List of collectors
     * 
     */
    public List<GetCflowdPolicyDefinitionCollector> collectors() {
        return this.collectors;
    }
    /**
     * @return The description of the policy definition
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Flow refresh in seconds
     * 
     */
    public Integer flowRefresh() {
        return this.flowRefresh;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Inactive flow timeout in seconds
     * 
     */
    public Integer inactiveFlowTimeout() {
        return this.inactiveFlowTimeout;
    }
    /**
     * @return The name of the policy definition
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Protocol, either `ipv4`, `ipv6` or `all`
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return Collect remarked DSCP
     * 
     */
    public Boolean remarkedDscp() {
        return this.remarkedDscp;
    }
    /**
     * @return Flow sampling interval
     * 
     */
    public Integer samplingInterval() {
        return this.samplingInterval;
    }
    /**
     * @return Collect TOS record field
     * 
     */
    public Boolean tos() {
        return this.tos;
    }
    /**
     * @return Type
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return The version of the object
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCflowdPolicyDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeFlowTimeout;
        private List<GetCflowdPolicyDefinitionCollector> collectors;
        private String description;
        private Integer flowRefresh;
        private String id;
        private Integer inactiveFlowTimeout;
        private String name;
        private String protocol;
        private Boolean remarkedDscp;
        private Integer samplingInterval;
        private Boolean tos;
        private String type;
        private Integer version;
        public Builder() {}
        public Builder(GetCflowdPolicyDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeFlowTimeout = defaults.activeFlowTimeout;
    	      this.collectors = defaults.collectors;
    	      this.description = defaults.description;
    	      this.flowRefresh = defaults.flowRefresh;
    	      this.id = defaults.id;
    	      this.inactiveFlowTimeout = defaults.inactiveFlowTimeout;
    	      this.name = defaults.name;
    	      this.protocol = defaults.protocol;
    	      this.remarkedDscp = defaults.remarkedDscp;
    	      this.samplingInterval = defaults.samplingInterval;
    	      this.tos = defaults.tos;
    	      this.type = defaults.type;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder activeFlowTimeout(Integer activeFlowTimeout) {
            if (activeFlowTimeout == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "activeFlowTimeout");
            }
            this.activeFlowTimeout = activeFlowTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder collectors(List<GetCflowdPolicyDefinitionCollector> collectors) {
            if (collectors == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "collectors");
            }
            this.collectors = collectors;
            return this;
        }
        public Builder collectors(GetCflowdPolicyDefinitionCollector... collectors) {
            return collectors(List.of(collectors));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder flowRefresh(Integer flowRefresh) {
            if (flowRefresh == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "flowRefresh");
            }
            this.flowRefresh = flowRefresh;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder inactiveFlowTimeout(Integer inactiveFlowTimeout) {
            if (inactiveFlowTimeout == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "inactiveFlowTimeout");
            }
            this.inactiveFlowTimeout = inactiveFlowTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder remarkedDscp(Boolean remarkedDscp) {
            if (remarkedDscp == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "remarkedDscp");
            }
            this.remarkedDscp = remarkedDscp;
            return this;
        }
        @CustomType.Setter
        public Builder samplingInterval(Integer samplingInterval) {
            if (samplingInterval == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "samplingInterval");
            }
            this.samplingInterval = samplingInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tos(Boolean tos) {
            if (tos == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "tos");
            }
            this.tos = tos;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCflowdPolicyDefinitionResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCflowdPolicyDefinitionResult build() {
            final var _resultValue = new GetCflowdPolicyDefinitionResult();
            _resultValue.activeFlowTimeout = activeFlowTimeout;
            _resultValue.collectors = collectors;
            _resultValue.description = description;
            _resultValue.flowRefresh = flowRefresh;
            _resultValue.id = id;
            _resultValue.inactiveFlowTimeout = inactiveFlowTimeout;
            _resultValue.name = name;
            _resultValue.protocol = protocol;
            _resultValue.remarkedDscp = remarkedDscp;
            _resultValue.samplingInterval = samplingInterval;
            _resultValue.tos = tos;
            _resultValue.type = type;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
