// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTransportWanVpnInterfaceGreFeatureResult {
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    private String applicationTunnelType;
    /**
     * @return Variable name
     * 
     */
    private String applicationTunnelTypeVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean clearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String clearDontFragmentVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface name (1..255)
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    private String transportWanVpnFeatureId;
    /**
     * @return Tunnel destination IP Address
     * 
     */
    private String tunnelDestinationIpv4Address;
    /**
     * @return Variable name
     * 
     */
    private String tunnelDestinationIpv4AddressVariable;
    /**
     * @return \n\n Interface name, can&#39;t be Loopback interface
     * 
     */
    private String tunnelRouteViaLoopback;
    /**
     * @return Variable name
     * 
     */
    private String tunnelRouteViaLoopbackVariable;
    /**
     * @return \n\n Interface name
     * 
     */
    private String tunnelSourceInterface;
    /**
     * @return \n\n Interface name
     * 
     */
    private String tunnelSourceInterfaceLoopback;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceInterfaceLoopbackVariable;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceInterfaceVariable;
    /**
     * @return Tunnel source IP Address
     * 
     */
    private String tunnelSourceIpv4Address;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceIpv4AddressVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetTransportWanVpnInterfaceGreFeatureResult() {}
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    public String applicationTunnelType() {
        return this.applicationTunnelType;
    }
    /**
     * @return Variable name
     * 
     */
    public String applicationTunnelTypeVariable() {
        return this.applicationTunnelTypeVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean clearDontFragment() {
        return this.clearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String clearDontFragmentVariable() {
        return this.clearDontFragmentVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface name (1..255)
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    public String transportWanVpnFeatureId() {
        return this.transportWanVpnFeatureId;
    }
    /**
     * @return Tunnel destination IP Address
     * 
     */
    public String tunnelDestinationIpv4Address() {
        return this.tunnelDestinationIpv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelDestinationIpv4AddressVariable() {
        return this.tunnelDestinationIpv4AddressVariable;
    }
    /**
     * @return \n\n Interface name, can&#39;t be Loopback interface
     * 
     */
    public String tunnelRouteViaLoopback() {
        return this.tunnelRouteViaLoopback;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelRouteViaLoopbackVariable() {
        return this.tunnelRouteViaLoopbackVariable;
    }
    /**
     * @return \n\n Interface name
     * 
     */
    public String tunnelSourceInterface() {
        return this.tunnelSourceInterface;
    }
    /**
     * @return \n\n Interface name
     * 
     */
    public String tunnelSourceInterfaceLoopback() {
        return this.tunnelSourceInterfaceLoopback;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceInterfaceLoopbackVariable() {
        return this.tunnelSourceInterfaceLoopbackVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceInterfaceVariable() {
        return this.tunnelSourceInterfaceVariable;
    }
    /**
     * @return Tunnel source IP Address
     * 
     */
    public String tunnelSourceIpv4Address() {
        return this.tunnelSourceIpv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceIpv4AddressVariable() {
        return this.tunnelSourceIpv4AddressVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportWanVpnInterfaceGreFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationTunnelType;
        private String applicationTunnelTypeVariable;
        private Boolean clearDontFragment;
        private String clearDontFragmentVariable;
        private String description;
        private String featureProfileId;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private String name;
        private Boolean shutdown;
        private String shutdownVariable;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String transportWanVpnFeatureId;
        private String tunnelDestinationIpv4Address;
        private String tunnelDestinationIpv4AddressVariable;
        private String tunnelRouteViaLoopback;
        private String tunnelRouteViaLoopbackVariable;
        private String tunnelSourceInterface;
        private String tunnelSourceInterfaceLoopback;
        private String tunnelSourceInterfaceLoopbackVariable;
        private String tunnelSourceInterfaceVariable;
        private String tunnelSourceIpv4Address;
        private String tunnelSourceIpv4AddressVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetTransportWanVpnInterfaceGreFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationTunnelType = defaults.applicationTunnelType;
    	      this.applicationTunnelTypeVariable = defaults.applicationTunnelTypeVariable;
    	      this.clearDontFragment = defaults.clearDontFragment;
    	      this.clearDontFragmentVariable = defaults.clearDontFragmentVariable;
    	      this.description = defaults.description;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.name = defaults.name;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.transportWanVpnFeatureId = defaults.transportWanVpnFeatureId;
    	      this.tunnelDestinationIpv4Address = defaults.tunnelDestinationIpv4Address;
    	      this.tunnelDestinationIpv4AddressVariable = defaults.tunnelDestinationIpv4AddressVariable;
    	      this.tunnelRouteViaLoopback = defaults.tunnelRouteViaLoopback;
    	      this.tunnelRouteViaLoopbackVariable = defaults.tunnelRouteViaLoopbackVariable;
    	      this.tunnelSourceInterface = defaults.tunnelSourceInterface;
    	      this.tunnelSourceInterfaceLoopback = defaults.tunnelSourceInterfaceLoopback;
    	      this.tunnelSourceInterfaceLoopbackVariable = defaults.tunnelSourceInterfaceLoopbackVariable;
    	      this.tunnelSourceInterfaceVariable = defaults.tunnelSourceInterfaceVariable;
    	      this.tunnelSourceIpv4Address = defaults.tunnelSourceIpv4Address;
    	      this.tunnelSourceIpv4AddressVariable = defaults.tunnelSourceIpv4AddressVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder applicationTunnelType(String applicationTunnelType) {
            if (applicationTunnelType == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "applicationTunnelType");
            }
            this.applicationTunnelType = applicationTunnelType;
            return this;
        }
        @CustomType.Setter
        public Builder applicationTunnelTypeVariable(String applicationTunnelTypeVariable) {
            if (applicationTunnelTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "applicationTunnelTypeVariable");
            }
            this.applicationTunnelTypeVariable = applicationTunnelTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder clearDontFragment(Boolean clearDontFragment) {
            if (clearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "clearDontFragment");
            }
            this.clearDontFragment = clearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder clearDontFragmentVariable(String clearDontFragmentVariable) {
            if (clearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "clearDontFragmentVariable");
            }
            this.clearDontFragmentVariable = clearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder transportWanVpnFeatureId(String transportWanVpnFeatureId) {
            if (transportWanVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "transportWanVpnFeatureId");
            }
            this.transportWanVpnFeatureId = transportWanVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4Address(String tunnelDestinationIpv4Address) {
            if (tunnelDestinationIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelDestinationIpv4Address");
            }
            this.tunnelDestinationIpv4Address = tunnelDestinationIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4AddressVariable(String tunnelDestinationIpv4AddressVariable) {
            if (tunnelDestinationIpv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelDestinationIpv4AddressVariable");
            }
            this.tunnelDestinationIpv4AddressVariable = tunnelDestinationIpv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteViaLoopback(String tunnelRouteViaLoopback) {
            if (tunnelRouteViaLoopback == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelRouteViaLoopback");
            }
            this.tunnelRouteViaLoopback = tunnelRouteViaLoopback;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteViaLoopbackVariable(String tunnelRouteViaLoopbackVariable) {
            if (tunnelRouteViaLoopbackVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelRouteViaLoopbackVariable");
            }
            this.tunnelRouteViaLoopbackVariable = tunnelRouteViaLoopbackVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            if (tunnelSourceInterface == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelSourceInterface");
            }
            this.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceLoopback(String tunnelSourceInterfaceLoopback) {
            if (tunnelSourceInterfaceLoopback == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelSourceInterfaceLoopback");
            }
            this.tunnelSourceInterfaceLoopback = tunnelSourceInterfaceLoopback;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceLoopbackVariable(String tunnelSourceInterfaceLoopbackVariable) {
            if (tunnelSourceInterfaceLoopbackVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelSourceInterfaceLoopbackVariable");
            }
            this.tunnelSourceInterfaceLoopbackVariable = tunnelSourceInterfaceLoopbackVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            if (tunnelSourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelSourceInterfaceVariable");
            }
            this.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceIpv4Address(String tunnelSourceIpv4Address) {
            if (tunnelSourceIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelSourceIpv4Address");
            }
            this.tunnelSourceIpv4Address = tunnelSourceIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceIpv4AddressVariable(String tunnelSourceIpv4AddressVariable) {
            if (tunnelSourceIpv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "tunnelSourceIpv4AddressVariable");
            }
            this.tunnelSourceIpv4AddressVariable = tunnelSourceIpv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceGreFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetTransportWanVpnInterfaceGreFeatureResult build() {
            final var _resultValue = new GetTransportWanVpnInterfaceGreFeatureResult();
            _resultValue.applicationTunnelType = applicationTunnelType;
            _resultValue.applicationTunnelTypeVariable = applicationTunnelTypeVariable;
            _resultValue.clearDontFragment = clearDontFragment;
            _resultValue.clearDontFragmentVariable = clearDontFragmentVariable;
            _resultValue.description = description;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.name = name;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.transportWanVpnFeatureId = transportWanVpnFeatureId;
            _resultValue.tunnelDestinationIpv4Address = tunnelDestinationIpv4Address;
            _resultValue.tunnelDestinationIpv4AddressVariable = tunnelDestinationIpv4AddressVariable;
            _resultValue.tunnelRouteViaLoopback = tunnelRouteViaLoopback;
            _resultValue.tunnelRouteViaLoopbackVariable = tunnelRouteViaLoopbackVariable;
            _resultValue.tunnelSourceInterface = tunnelSourceInterface;
            _resultValue.tunnelSourceInterfaceLoopback = tunnelSourceInterfaceLoopback;
            _resultValue.tunnelSourceInterfaceLoopbackVariable = tunnelSourceInterfaceLoopbackVariable;
            _resultValue.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            _resultValue.tunnelSourceIpv4Address = tunnelSourceIpv4Address;
            _resultValue.tunnelSourceIpv4AddressVariable = tunnelSourceIpv4AddressVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
