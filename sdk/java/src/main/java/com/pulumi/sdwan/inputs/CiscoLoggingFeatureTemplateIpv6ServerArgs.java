// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoLoggingFeatureTemplateIpv6ServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoLoggingFeatureTemplateIpv6ServerArgs Empty = new CiscoLoggingFeatureTemplateIpv6ServerArgs();

    /**
     * Define custom profile
     *   - Default value: `false`
     * 
     */
    @Import(name="customProfile")
    private @Nullable Output<Boolean> customProfile;

    /**
     * @return Define custom profile
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> customProfile() {
        return Optional.ofNullable(this.customProfile);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="customProfileVariable")
    private @Nullable Output<String> customProfileVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> customProfileVariable() {
        return Optional.ofNullable(this.customProfileVariable);
    }

    /**
     * Enable TLS
     *   - Default value: `false`
     * 
     */
    @Import(name="enableTls")
    private @Nullable Output<Boolean> enableTls;

    /**
     * @return Enable TLS
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableTls() {
        return Optional.ofNullable(this.enableTls);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="enableTlsVariable")
    private @Nullable Output<String> enableTlsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> enableTlsVariable() {
        return Optional.ofNullable(this.enableTlsVariable);
    }

    /**
     * Set IPv6 hostname or IPv6 address of server
     * 
     */
    @Import(name="hostnameIp")
    private @Nullable Output<String> hostnameIp;

    /**
     * @return Set IPv6 hostname or IPv6 address of server
     * 
     */
    public Optional<Output<String>> hostnameIp() {
        return Optional.ofNullable(this.hostnameIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="hostnameIpVariable")
    private @Nullable Output<String> hostnameIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> hostnameIpVariable() {
        return Optional.ofNullable(this.hostnameIpVariable);
    }

    /**
     * Set logging level for messages logged to server
     *   - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `information`
     * 
     */
    @Import(name="loggingLevel")
    private @Nullable Output<String> loggingLevel;

    /**
     * @return Set logging level for messages logged to server
     *   - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `information`
     * 
     */
    public Optional<Output<String>> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="loggingLevelVariable")
    private @Nullable Output<String> loggingLevelVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> loggingLevelVariable() {
        return Optional.ofNullable(this.loggingLevelVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Configure a TLS profile
     * 
     */
    @Import(name="profile")
    private @Nullable Output<String> profile;

    /**
     * @return Configure a TLS profile
     * 
     */
    public Optional<Output<String>> profile() {
        return Optional.ofNullable(this.profile);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="profileVariable")
    private @Nullable Output<String> profileVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> profileVariable() {
        return Optional.ofNullable(this.profileVariable);
    }

    /**
     * Set interface to use to reach syslog server
     * 
     */
    @Import(name="sourceInterface")
    private @Nullable Output<String> sourceInterface;

    /**
     * @return Set interface to use to reach syslog server
     * 
     */
    public Optional<Output<String>> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="sourceInterfaceVariable")
    private @Nullable Output<String> sourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }

    /**
     * Set VPN in which syslog server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return Set VPN in which syslog server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vpnIdVariable")
    private @Nullable Output<String> vpnIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    private CiscoLoggingFeatureTemplateIpv6ServerArgs() {}

    private CiscoLoggingFeatureTemplateIpv6ServerArgs(CiscoLoggingFeatureTemplateIpv6ServerArgs $) {
        this.customProfile = $.customProfile;
        this.customProfileVariable = $.customProfileVariable;
        this.enableTls = $.enableTls;
        this.enableTlsVariable = $.enableTlsVariable;
        this.hostnameIp = $.hostnameIp;
        this.hostnameIpVariable = $.hostnameIpVariable;
        this.loggingLevel = $.loggingLevel;
        this.loggingLevelVariable = $.loggingLevelVariable;
        this.optional = $.optional;
        this.profile = $.profile;
        this.profileVariable = $.profileVariable;
        this.sourceInterface = $.sourceInterface;
        this.sourceInterfaceVariable = $.sourceInterfaceVariable;
        this.vpnId = $.vpnId;
        this.vpnIdVariable = $.vpnIdVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoLoggingFeatureTemplateIpv6ServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoLoggingFeatureTemplateIpv6ServerArgs $;

        public Builder() {
            $ = new CiscoLoggingFeatureTemplateIpv6ServerArgs();
        }

        public Builder(CiscoLoggingFeatureTemplateIpv6ServerArgs defaults) {
            $ = new CiscoLoggingFeatureTemplateIpv6ServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param customProfile Define custom profile
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder customProfile(@Nullable Output<Boolean> customProfile) {
            $.customProfile = customProfile;
            return this;
        }

        /**
         * @param customProfile Define custom profile
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder customProfile(Boolean customProfile) {
            return customProfile(Output.of(customProfile));
        }

        /**
         * @param customProfileVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder customProfileVariable(@Nullable Output<String> customProfileVariable) {
            $.customProfileVariable = customProfileVariable;
            return this;
        }

        /**
         * @param customProfileVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder customProfileVariable(String customProfileVariable) {
            return customProfileVariable(Output.of(customProfileVariable));
        }

        /**
         * @param enableTls Enable TLS
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableTls(@Nullable Output<Boolean> enableTls) {
            $.enableTls = enableTls;
            return this;
        }

        /**
         * @param enableTls Enable TLS
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableTls(Boolean enableTls) {
            return enableTls(Output.of(enableTls));
        }

        /**
         * @param enableTlsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder enableTlsVariable(@Nullable Output<String> enableTlsVariable) {
            $.enableTlsVariable = enableTlsVariable;
            return this;
        }

        /**
         * @param enableTlsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder enableTlsVariable(String enableTlsVariable) {
            return enableTlsVariable(Output.of(enableTlsVariable));
        }

        /**
         * @param hostnameIp Set IPv6 hostname or IPv6 address of server
         * 
         * @return builder
         * 
         */
        public Builder hostnameIp(@Nullable Output<String> hostnameIp) {
            $.hostnameIp = hostnameIp;
            return this;
        }

        /**
         * @param hostnameIp Set IPv6 hostname or IPv6 address of server
         * 
         * @return builder
         * 
         */
        public Builder hostnameIp(String hostnameIp) {
            return hostnameIp(Output.of(hostnameIp));
        }

        /**
         * @param hostnameIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameIpVariable(@Nullable Output<String> hostnameIpVariable) {
            $.hostnameIpVariable = hostnameIpVariable;
            return this;
        }

        /**
         * @param hostnameIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameIpVariable(String hostnameIpVariable) {
            return hostnameIpVariable(Output.of(hostnameIpVariable));
        }

        /**
         * @param loggingLevel Set logging level for messages logged to server
         *   - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
         *   - Default value: `information`
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(@Nullable Output<String> loggingLevel) {
            $.loggingLevel = loggingLevel;
            return this;
        }

        /**
         * @param loggingLevel Set logging level for messages logged to server
         *   - Choices: `information`, `debugging`, `notification`, `warn`, `error`, `critical`, `alert`, `emergency`
         *   - Default value: `information`
         * 
         * @return builder
         * 
         */
        public Builder loggingLevel(String loggingLevel) {
            return loggingLevel(Output.of(loggingLevel));
        }

        /**
         * @param loggingLevelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder loggingLevelVariable(@Nullable Output<String> loggingLevelVariable) {
            $.loggingLevelVariable = loggingLevelVariable;
            return this;
        }

        /**
         * @param loggingLevelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder loggingLevelVariable(String loggingLevelVariable) {
            return loggingLevelVariable(Output.of(loggingLevelVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param profile Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder profile(@Nullable Output<String> profile) {
            $.profile = profile;
            return this;
        }

        /**
         * @param profile Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder profile(String profile) {
            return profile(Output.of(profile));
        }

        /**
         * @param profileVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder profileVariable(@Nullable Output<String> profileVariable) {
            $.profileVariable = profileVariable;
            return this;
        }

        /**
         * @param profileVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder profileVariable(String profileVariable) {
            return profileVariable(Output.of(profileVariable));
        }

        /**
         * @param sourceInterface Set interface to use to reach syslog server
         * 
         * @return builder
         * 
         */
        public Builder sourceInterface(@Nullable Output<String> sourceInterface) {
            $.sourceInterface = sourceInterface;
            return this;
        }

        /**
         * @param sourceInterface Set interface to use to reach syslog server
         * 
         * @return builder
         * 
         */
        public Builder sourceInterface(String sourceInterface) {
            return sourceInterface(Output.of(sourceInterface));
        }

        /**
         * @param sourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceVariable(@Nullable Output<String> sourceInterfaceVariable) {
            $.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }

        /**
         * @param sourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            return sourceInterfaceVariable(Output.of(sourceInterfaceVariable));
        }

        /**
         * @param vpnId Set VPN in which syslog server is located
         *   - Range: `0`-`65530`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId Set VPN in which syslog server is located
         *   - Range: `0`-`65530`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(@Nullable Output<String> vpnIdVariable) {
            $.vpnIdVariable = vpnIdVariable;
            return this;
        }

        /**
         * @param vpnIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnIdVariable(String vpnIdVariable) {
            return vpnIdVariable(Output.of(vpnIdVariable));
        }

        public CiscoLoggingFeatureTemplateIpv6ServerArgs build() {
            return $;
        }
    }

}
