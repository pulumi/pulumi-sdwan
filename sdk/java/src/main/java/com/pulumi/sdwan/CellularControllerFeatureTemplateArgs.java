// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.CellularControllerFeatureTemplateDataProfileArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CellularControllerFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CellularControllerFeatureTemplateArgs Empty = new CellularControllerFeatureTemplateArgs();

    /**
     * Cellular interface name
     * 
     */
    @Import(name="cellularInterfaceId")
    private @Nullable Output<String> cellularInterfaceId;

    /**
     * @return Cellular interface name
     * 
     */
    public Optional<Output<String>> cellularInterfaceId() {
        return Optional.ofNullable(this.cellularInterfaceId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="cellularInterfaceIdVariable")
    private @Nullable Output<String> cellularInterfaceIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> cellularInterfaceIdVariable() {
        return Optional.ofNullable(this.cellularInterfaceIdVariable);
    }

    /**
     * Data Profile List
     * 
     */
    @Import(name="dataProfiles")
    private @Nullable Output<List<CellularControllerFeatureTemplateDataProfileArgs>> dataProfiles;

    /**
     * @return Data Profile List
     * 
     */
    public Optional<Output<List<CellularControllerFeatureTemplateDataProfileArgs>>> dataProfiles() {
        return Optional.ofNullable(this.dataProfiles);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Enable/Disable Firmware Auto Sim
     *   - Default value: `true`
     * 
     */
    @Import(name="firmwareAutoSim")
    private @Nullable Output<Boolean> firmwareAutoSim;

    /**
     * @return Enable/Disable Firmware Auto Sim
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> firmwareAutoSim() {
        return Optional.ofNullable(this.firmwareAutoSim);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="firmwareAutoSimVariable")
    private @Nullable Output<String> firmwareAutoSimVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> firmwareAutoSimVariable() {
        return Optional.ofNullable(this.firmwareAutoSimVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set primary SIM slot
     *   - Range: `0`-`255`
     * 
     */
    @Import(name="primarySimSlot")
    private @Nullable Output<Integer> primarySimSlot;

    /**
     * @return Set primary SIM slot
     *   - Range: `0`-`255`
     * 
     */
    public Optional<Output<Integer>> primarySimSlot() {
        return Optional.ofNullable(this.primarySimSlot);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="primarySimSlotVariable")
    private @Nullable Output<String> primarySimSlotVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> primarySimSlotVariable() {
        return Optional.ofNullable(this.primarySimSlotVariable);
    }

    /**
     * Set SIM failover retries
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="simFailoverRetries")
    private @Nullable Output<Integer> simFailoverRetries;

    /**
     * @return Set SIM failover retries
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> simFailoverRetries() {
        return Optional.ofNullable(this.simFailoverRetries);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="simFailoverRetriesVariable")
    private @Nullable Output<String> simFailoverRetriesVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> simFailoverRetriesVariable() {
        return Optional.ofNullable(this.simFailoverRetriesVariable);
    }

    /**
     * Set SIM failover timeout in minutes
     *   - Range: `3`-`7`
     * 
     */
    @Import(name="simFailoverTimeout")
    private @Nullable Output<Integer> simFailoverTimeout;

    /**
     * @return Set SIM failover timeout in minutes
     *   - Range: `3`-`7`
     * 
     */
    public Optional<Output<Integer>> simFailoverTimeout() {
        return Optional.ofNullable(this.simFailoverTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="simFailoverTimeoutVariable")
    private @Nullable Output<String> simFailoverTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> simFailoverTimeoutVariable() {
        return Optional.ofNullable(this.simFailoverTimeoutVariable);
    }

    private CellularControllerFeatureTemplateArgs() {}

    private CellularControllerFeatureTemplateArgs(CellularControllerFeatureTemplateArgs $) {
        this.cellularInterfaceId = $.cellularInterfaceId;
        this.cellularInterfaceIdVariable = $.cellularInterfaceIdVariable;
        this.dataProfiles = $.dataProfiles;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.firmwareAutoSim = $.firmwareAutoSim;
        this.firmwareAutoSimVariable = $.firmwareAutoSimVariable;
        this.name = $.name;
        this.primarySimSlot = $.primarySimSlot;
        this.primarySimSlotVariable = $.primarySimSlotVariable;
        this.simFailoverRetries = $.simFailoverRetries;
        this.simFailoverRetriesVariable = $.simFailoverRetriesVariable;
        this.simFailoverTimeout = $.simFailoverTimeout;
        this.simFailoverTimeoutVariable = $.simFailoverTimeoutVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CellularControllerFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CellularControllerFeatureTemplateArgs $;

        public Builder() {
            $ = new CellularControllerFeatureTemplateArgs();
        }

        public Builder(CellularControllerFeatureTemplateArgs defaults) {
            $ = new CellularControllerFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cellularInterfaceId Cellular interface name
         * 
         * @return builder
         * 
         */
        public Builder cellularInterfaceId(@Nullable Output<String> cellularInterfaceId) {
            $.cellularInterfaceId = cellularInterfaceId;
            return this;
        }

        /**
         * @param cellularInterfaceId Cellular interface name
         * 
         * @return builder
         * 
         */
        public Builder cellularInterfaceId(String cellularInterfaceId) {
            return cellularInterfaceId(Output.of(cellularInterfaceId));
        }

        /**
         * @param cellularInterfaceIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder cellularInterfaceIdVariable(@Nullable Output<String> cellularInterfaceIdVariable) {
            $.cellularInterfaceIdVariable = cellularInterfaceIdVariable;
            return this;
        }

        /**
         * @param cellularInterfaceIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder cellularInterfaceIdVariable(String cellularInterfaceIdVariable) {
            return cellularInterfaceIdVariable(Output.of(cellularInterfaceIdVariable));
        }

        /**
         * @param dataProfiles Data Profile List
         * 
         * @return builder
         * 
         */
        public Builder dataProfiles(@Nullable Output<List<CellularControllerFeatureTemplateDataProfileArgs>> dataProfiles) {
            $.dataProfiles = dataProfiles;
            return this;
        }

        /**
         * @param dataProfiles Data Profile List
         * 
         * @return builder
         * 
         */
        public Builder dataProfiles(List<CellularControllerFeatureTemplateDataProfileArgs> dataProfiles) {
            return dataProfiles(Output.of(dataProfiles));
        }

        /**
         * @param dataProfiles Data Profile List
         * 
         * @return builder
         * 
         */
        public Builder dataProfiles(CellularControllerFeatureTemplateDataProfileArgs... dataProfiles) {
            return dataProfiles(List.of(dataProfiles));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param firmwareAutoSim Enable/Disable Firmware Auto Sim
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder firmwareAutoSim(@Nullable Output<Boolean> firmwareAutoSim) {
            $.firmwareAutoSim = firmwareAutoSim;
            return this;
        }

        /**
         * @param firmwareAutoSim Enable/Disable Firmware Auto Sim
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder firmwareAutoSim(Boolean firmwareAutoSim) {
            return firmwareAutoSim(Output.of(firmwareAutoSim));
        }

        /**
         * @param firmwareAutoSimVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder firmwareAutoSimVariable(@Nullable Output<String> firmwareAutoSimVariable) {
            $.firmwareAutoSimVariable = firmwareAutoSimVariable;
            return this;
        }

        /**
         * @param firmwareAutoSimVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder firmwareAutoSimVariable(String firmwareAutoSimVariable) {
            return firmwareAutoSimVariable(Output.of(firmwareAutoSimVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param primarySimSlot Set primary SIM slot
         *   - Range: `0`-`255`
         * 
         * @return builder
         * 
         */
        public Builder primarySimSlot(@Nullable Output<Integer> primarySimSlot) {
            $.primarySimSlot = primarySimSlot;
            return this;
        }

        /**
         * @param primarySimSlot Set primary SIM slot
         *   - Range: `0`-`255`
         * 
         * @return builder
         * 
         */
        public Builder primarySimSlot(Integer primarySimSlot) {
            return primarySimSlot(Output.of(primarySimSlot));
        }

        /**
         * @param primarySimSlotVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder primarySimSlotVariable(@Nullable Output<String> primarySimSlotVariable) {
            $.primarySimSlotVariable = primarySimSlotVariable;
            return this;
        }

        /**
         * @param primarySimSlotVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder primarySimSlotVariable(String primarySimSlotVariable) {
            return primarySimSlotVariable(Output.of(primarySimSlotVariable));
        }

        /**
         * @param simFailoverRetries Set SIM failover retries
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder simFailoverRetries(@Nullable Output<Integer> simFailoverRetries) {
            $.simFailoverRetries = simFailoverRetries;
            return this;
        }

        /**
         * @param simFailoverRetries Set SIM failover retries
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder simFailoverRetries(Integer simFailoverRetries) {
            return simFailoverRetries(Output.of(simFailoverRetries));
        }

        /**
         * @param simFailoverRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder simFailoverRetriesVariable(@Nullable Output<String> simFailoverRetriesVariable) {
            $.simFailoverRetriesVariable = simFailoverRetriesVariable;
            return this;
        }

        /**
         * @param simFailoverRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder simFailoverRetriesVariable(String simFailoverRetriesVariable) {
            return simFailoverRetriesVariable(Output.of(simFailoverRetriesVariable));
        }

        /**
         * @param simFailoverTimeout Set SIM failover timeout in minutes
         *   - Range: `3`-`7`
         * 
         * @return builder
         * 
         */
        public Builder simFailoverTimeout(@Nullable Output<Integer> simFailoverTimeout) {
            $.simFailoverTimeout = simFailoverTimeout;
            return this;
        }

        /**
         * @param simFailoverTimeout Set SIM failover timeout in minutes
         *   - Range: `3`-`7`
         * 
         * @return builder
         * 
         */
        public Builder simFailoverTimeout(Integer simFailoverTimeout) {
            return simFailoverTimeout(Output.of(simFailoverTimeout));
        }

        /**
         * @param simFailoverTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder simFailoverTimeoutVariable(@Nullable Output<String> simFailoverTimeoutVariable) {
            $.simFailoverTimeoutVariable = simFailoverTimeoutVariable;
            return this;
        }

        /**
         * @param simFailoverTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder simFailoverTimeoutVariable(String simFailoverTimeoutVariable) {
            return simFailoverTimeoutVariable(Output.of(simFailoverTimeoutVariable));
        }

        public CellularControllerFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CellularControllerFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CellularControllerFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
