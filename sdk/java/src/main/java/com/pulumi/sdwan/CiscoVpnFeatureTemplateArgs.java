// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateDnsHostArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateDnsIpv4ServerArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateDnsIpv6ServerArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateIpv4StaticRouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateIpv6StaticRouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateNat64PoolArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateNatPoolArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplatePortForwardRuleArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateRouteGlobalExportArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateRouteGlobalImportArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateRouteVpnImportArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateServiceArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateStaticNatRuleArgs;
import com.pulumi.sdwan.inputs.CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnFeatureTemplateArgs Empty = new CiscoVpnFeatureTemplateArgs();

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Static DNS mapping
     * 
     */
    @Import(name="dnsHosts")
    private @Nullable Output<List<CiscoVpnFeatureTemplateDnsHostArgs>> dnsHosts;

    /**
     * @return Static DNS mapping
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateDnsHostArgs>>> dnsHosts() {
        return Optional.ofNullable(this.dnsHosts);
    }

    /**
     * DNS
     * 
     */
    @Import(name="dnsIpv4Servers")
    private @Nullable Output<List<CiscoVpnFeatureTemplateDnsIpv4ServerArgs>> dnsIpv4Servers;

    /**
     * @return DNS
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateDnsIpv4ServerArgs>>> dnsIpv4Servers() {
        return Optional.ofNullable(this.dnsIpv4Servers);
    }

    /**
     * DNS
     * 
     */
    @Import(name="dnsIpv6Servers")
    private @Nullable Output<List<CiscoVpnFeatureTemplateDnsIpv6ServerArgs>> dnsIpv6Servers;

    /**
     * @return DNS
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateDnsIpv6ServerArgs>>> dnsIpv6Servers() {
        return Optional.ofNullable(this.dnsIpv6Servers);
    }

    /**
     * Optional packet fields for ECMP keying
     *   - Default value: `false`
     * 
     */
    @Import(name="enhanceEcmpKeying")
    private @Nullable Output<Boolean> enhanceEcmpKeying;

    /**
     * @return Optional packet fields for ECMP keying
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enhanceEcmpKeying() {
        return Optional.ofNullable(this.enhanceEcmpKeying);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="enhanceEcmpKeyingVariable")
    private @Nullable Output<String> enhanceEcmpKeyingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> enhanceEcmpKeyingVariable() {
        return Optional.ofNullable(this.enhanceEcmpKeyingVariable);
    }

    /**
     * Configure routes pointing to a GRE tunnel
     * 
     */
    @Import(name="ipv4StaticGreRoutes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs>> ipv4StaticGreRoutes;

    /**
     * @return Configure routes pointing to a GRE tunnel
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs>>> ipv4StaticGreRoutes() {
        return Optional.ofNullable(this.ipv4StaticGreRoutes);
    }

    /**
     * Configure routes pointing to a IPSEC tunnel
     * 
     */
    @Import(name="ipv4StaticIpsecRoutes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs>> ipv4StaticIpsecRoutes;

    /**
     * @return Configure routes pointing to a IPSEC tunnel
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs>>> ipv4StaticIpsecRoutes() {
        return Optional.ofNullable(this.ipv4StaticIpsecRoutes);
    }

    /**
     * Configure IPv4 Static Routes
     * 
     */
    @Import(name="ipv4StaticRoutes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticRouteArgs>> ipv4StaticRoutes;

    /**
     * @return Configure IPv4 Static Routes
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateIpv4StaticRouteArgs>>> ipv4StaticRoutes() {
        return Optional.ofNullable(this.ipv4StaticRoutes);
    }

    /**
     * Configure IPv4 Static Service Routes
     * 
     */
    @Import(name="ipv4StaticServiceRoutes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs>> ipv4StaticServiceRoutes;

    /**
     * @return Configure IPv4 Static Service Routes
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs>>> ipv4StaticServiceRoutes() {
        return Optional.ofNullable(this.ipv4StaticServiceRoutes);
    }

    /**
     * Configure IPv6 Static Routes
     * 
     */
    @Import(name="ipv6StaticRoutes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateIpv6StaticRouteArgs>> ipv6StaticRoutes;

    /**
     * @return Configure IPv6 Static Routes
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateIpv6StaticRouteArgs>>> ipv6StaticRoutes() {
        return Optional.ofNullable(this.ipv6StaticRoutes);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set NAT64 v4 pool range
     * 
     */
    @Import(name="nat64Pools")
    private @Nullable Output<List<CiscoVpnFeatureTemplateNat64PoolArgs>> nat64Pools;

    /**
     * @return Set NAT64 v4 pool range
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateNat64PoolArgs>>> nat64Pools() {
        return Optional.ofNullable(this.nat64Pools);
    }

    /**
     * Configure NAT Pool entries
     * 
     */
    @Import(name="natPools")
    private @Nullable Output<List<CiscoVpnFeatureTemplateNatPoolArgs>> natPools;

    /**
     * @return Configure NAT Pool entries
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateNatPoolArgs>>> natPools() {
        return Optional.ofNullable(this.natPools);
    }

    /**
     * omp-admin-distance-ipv4
     *   - Range: `1`-`255`
     * 
     */
    @Import(name="ompAdminDistanceIpv4")
    private @Nullable Output<Integer> ompAdminDistanceIpv4;

    /**
     * @return omp-admin-distance-ipv4
     *   - Range: `1`-`255`
     * 
     */
    public Optional<Output<Integer>> ompAdminDistanceIpv4() {
        return Optional.ofNullable(this.ompAdminDistanceIpv4);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ompAdminDistanceIpv4Variable")
    private @Nullable Output<String> ompAdminDistanceIpv4Variable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ompAdminDistanceIpv4Variable() {
        return Optional.ofNullable(this.ompAdminDistanceIpv4Variable);
    }

    /**
     * omp-admin-distance-ipv6
     *   - Range: `1`-`255`
     * 
     */
    @Import(name="ompAdminDistanceIpv6")
    private @Nullable Output<Integer> ompAdminDistanceIpv6;

    /**
     * @return omp-admin-distance-ipv6
     *   - Range: `1`-`255`
     * 
     */
    public Optional<Output<Integer>> ompAdminDistanceIpv6() {
        return Optional.ofNullable(this.ompAdminDistanceIpv6);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ompAdminDistanceIpv6Variable")
    private @Nullable Output<String> ompAdminDistanceIpv6Variable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ompAdminDistanceIpv6Variable() {
        return Optional.ofNullable(this.ompAdminDistanceIpv6Variable);
    }

    /**
     * Advertise routes to OMP
     * 
     */
    @Import(name="ompAdvertiseIpv4Routes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs>> ompAdvertiseIpv4Routes;

    /**
     * @return Advertise routes to OMP
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs>>> ompAdvertiseIpv4Routes() {
        return Optional.ofNullable(this.ompAdvertiseIpv4Routes);
    }

    /**
     * Advertise routes to OMP
     * 
     */
    @Import(name="ompAdvertiseIpv6Routes")
    private @Nullable Output<List<CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs>> ompAdvertiseIpv6Routes;

    /**
     * @return Advertise routes to OMP
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs>>> ompAdvertiseIpv6Routes() {
        return Optional.ofNullable(this.ompAdvertiseIpv6Routes);
    }

    /**
     * Org Name selected
     * 
     */
    @Import(name="organizationName")
    private @Nullable Output<String> organizationName;

    /**
     * @return Org Name selected
     * 
     */
    public Optional<Output<String>> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    /**
     * Configure Port Forward entries
     * 
     */
    @Import(name="portForwardRules")
    private @Nullable Output<List<CiscoVpnFeatureTemplatePortForwardRuleArgs>> portForwardRules;

    /**
     * @return Configure Port Forward entries
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplatePortForwardRuleArgs>>> portForwardRules() {
        return Optional.ofNullable(this.portForwardRules);
    }

    /**
     * Enable route leaking to Global VPN from this Service VPN
     * 
     */
    @Import(name="routeGlobalExports")
    private @Nullable Output<List<CiscoVpnFeatureTemplateRouteGlobalExportArgs>> routeGlobalExports;

    /**
     * @return Enable route leaking to Global VPN from this Service VPN
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateRouteGlobalExportArgs>>> routeGlobalExports() {
        return Optional.ofNullable(this.routeGlobalExports);
    }

    /**
     * Enable route leaking from Global VPN to this Service VPN
     * 
     */
    @Import(name="routeGlobalImports")
    private @Nullable Output<List<CiscoVpnFeatureTemplateRouteGlobalImportArgs>> routeGlobalImports;

    /**
     * @return Enable route leaking from Global VPN to this Service VPN
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateRouteGlobalImportArgs>>> routeGlobalImports() {
        return Optional.ofNullable(this.routeGlobalImports);
    }

    /**
     * Enable route leak from Service VPN to current VPN
     * 
     */
    @Import(name="routeVpnImports")
    private @Nullable Output<List<CiscoVpnFeatureTemplateRouteVpnImportArgs>> routeVpnImports;

    /**
     * @return Enable route leak from Service VPN to current VPN
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateRouteVpnImportArgs>>> routeVpnImports() {
        return Optional.ofNullable(this.routeVpnImports);
    }

    /**
     * Configure services
     * 
     */
    @Import(name="services")
    private @Nullable Output<List<CiscoVpnFeatureTemplateServiceArgs>> services;

    /**
     * @return Configure services
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateServiceArgs>>> services() {
        return Optional.ofNullable(this.services);
    }

    /**
     * Configure static NAT entries
     * 
     */
    @Import(name="staticNatRules")
    private @Nullable Output<List<CiscoVpnFeatureTemplateStaticNatRuleArgs>> staticNatRules;

    /**
     * @return Configure static NAT entries
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateStaticNatRuleArgs>>> staticNatRules() {
        return Optional.ofNullable(this.staticNatRules);
    }

    /**
     * Configure static NAT Subnet entries
     * 
     */
    @Import(name="staticNatSubnetRules")
    private @Nullable Output<List<CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs>> staticNatSubnetRules;

    /**
     * @return Configure static NAT Subnet entries
     * 
     */
    public Optional<Output<List<CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs>>> staticNatSubnetRules() {
        return Optional.ofNullable(this.staticNatSubnetRules);
    }

    /**
     * Tenant VPN
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    @Import(name="tenantVpnId")
    private @Nullable Output<Integer> tenantVpnId;

    /**
     * @return Tenant VPN
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> tenantVpnId() {
        return Optional.ofNullable(this.tenantVpnId);
    }

    /**
     * List of VPN instances
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<Integer> vpnId;

    /**
     * @return List of VPN instances
     *   - Range: `0`-`65527`
     *   - Default value: `0`
     * 
     */
    public Optional<Output<Integer>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    /**
     * Name
     * 
     */
    @Import(name="vpnName")
    private @Nullable Output<String> vpnName;

    /**
     * @return Name
     * 
     */
    public Optional<Output<String>> vpnName() {
        return Optional.ofNullable(this.vpnName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vpnNameVariable")
    private @Nullable Output<String> vpnNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vpnNameVariable() {
        return Optional.ofNullable(this.vpnNameVariable);
    }

    private CiscoVpnFeatureTemplateArgs() {}

    private CiscoVpnFeatureTemplateArgs(CiscoVpnFeatureTemplateArgs $) {
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.dnsHosts = $.dnsHosts;
        this.dnsIpv4Servers = $.dnsIpv4Servers;
        this.dnsIpv6Servers = $.dnsIpv6Servers;
        this.enhanceEcmpKeying = $.enhanceEcmpKeying;
        this.enhanceEcmpKeyingVariable = $.enhanceEcmpKeyingVariable;
        this.ipv4StaticGreRoutes = $.ipv4StaticGreRoutes;
        this.ipv4StaticIpsecRoutes = $.ipv4StaticIpsecRoutes;
        this.ipv4StaticRoutes = $.ipv4StaticRoutes;
        this.ipv4StaticServiceRoutes = $.ipv4StaticServiceRoutes;
        this.ipv6StaticRoutes = $.ipv6StaticRoutes;
        this.name = $.name;
        this.nat64Pools = $.nat64Pools;
        this.natPools = $.natPools;
        this.ompAdminDistanceIpv4 = $.ompAdminDistanceIpv4;
        this.ompAdminDistanceIpv4Variable = $.ompAdminDistanceIpv4Variable;
        this.ompAdminDistanceIpv6 = $.ompAdminDistanceIpv6;
        this.ompAdminDistanceIpv6Variable = $.ompAdminDistanceIpv6Variable;
        this.ompAdvertiseIpv4Routes = $.ompAdvertiseIpv4Routes;
        this.ompAdvertiseIpv6Routes = $.ompAdvertiseIpv6Routes;
        this.organizationName = $.organizationName;
        this.portForwardRules = $.portForwardRules;
        this.routeGlobalExports = $.routeGlobalExports;
        this.routeGlobalImports = $.routeGlobalImports;
        this.routeVpnImports = $.routeVpnImports;
        this.services = $.services;
        this.staticNatRules = $.staticNatRules;
        this.staticNatSubnetRules = $.staticNatSubnetRules;
        this.tenantVpnId = $.tenantVpnId;
        this.vpnId = $.vpnId;
        this.vpnName = $.vpnName;
        this.vpnNameVariable = $.vpnNameVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoVpnFeatureTemplateArgs();
        }

        public Builder(CiscoVpnFeatureTemplateArgs defaults) {
            $ = new CiscoVpnFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param dnsHosts Static DNS mapping
         * 
         * @return builder
         * 
         */
        public Builder dnsHosts(@Nullable Output<List<CiscoVpnFeatureTemplateDnsHostArgs>> dnsHosts) {
            $.dnsHosts = dnsHosts;
            return this;
        }

        /**
         * @param dnsHosts Static DNS mapping
         * 
         * @return builder
         * 
         */
        public Builder dnsHosts(List<CiscoVpnFeatureTemplateDnsHostArgs> dnsHosts) {
            return dnsHosts(Output.of(dnsHosts));
        }

        /**
         * @param dnsHosts Static DNS mapping
         * 
         * @return builder
         * 
         */
        public Builder dnsHosts(CiscoVpnFeatureTemplateDnsHostArgs... dnsHosts) {
            return dnsHosts(List.of(dnsHosts));
        }

        /**
         * @param dnsIpv4Servers DNS
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv4Servers(@Nullable Output<List<CiscoVpnFeatureTemplateDnsIpv4ServerArgs>> dnsIpv4Servers) {
            $.dnsIpv4Servers = dnsIpv4Servers;
            return this;
        }

        /**
         * @param dnsIpv4Servers DNS
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv4Servers(List<CiscoVpnFeatureTemplateDnsIpv4ServerArgs> dnsIpv4Servers) {
            return dnsIpv4Servers(Output.of(dnsIpv4Servers));
        }

        /**
         * @param dnsIpv4Servers DNS
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv4Servers(CiscoVpnFeatureTemplateDnsIpv4ServerArgs... dnsIpv4Servers) {
            return dnsIpv4Servers(List.of(dnsIpv4Servers));
        }

        /**
         * @param dnsIpv6Servers DNS
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv6Servers(@Nullable Output<List<CiscoVpnFeatureTemplateDnsIpv6ServerArgs>> dnsIpv6Servers) {
            $.dnsIpv6Servers = dnsIpv6Servers;
            return this;
        }

        /**
         * @param dnsIpv6Servers DNS
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv6Servers(List<CiscoVpnFeatureTemplateDnsIpv6ServerArgs> dnsIpv6Servers) {
            return dnsIpv6Servers(Output.of(dnsIpv6Servers));
        }

        /**
         * @param dnsIpv6Servers DNS
         * 
         * @return builder
         * 
         */
        public Builder dnsIpv6Servers(CiscoVpnFeatureTemplateDnsIpv6ServerArgs... dnsIpv6Servers) {
            return dnsIpv6Servers(List.of(dnsIpv6Servers));
        }

        /**
         * @param enhanceEcmpKeying Optional packet fields for ECMP keying
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enhanceEcmpKeying(@Nullable Output<Boolean> enhanceEcmpKeying) {
            $.enhanceEcmpKeying = enhanceEcmpKeying;
            return this;
        }

        /**
         * @param enhanceEcmpKeying Optional packet fields for ECMP keying
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enhanceEcmpKeying(Boolean enhanceEcmpKeying) {
            return enhanceEcmpKeying(Output.of(enhanceEcmpKeying));
        }

        /**
         * @param enhanceEcmpKeyingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder enhanceEcmpKeyingVariable(@Nullable Output<String> enhanceEcmpKeyingVariable) {
            $.enhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            return this;
        }

        /**
         * @param enhanceEcmpKeyingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder enhanceEcmpKeyingVariable(String enhanceEcmpKeyingVariable) {
            return enhanceEcmpKeyingVariable(Output.of(enhanceEcmpKeyingVariable));
        }

        /**
         * @param ipv4StaticGreRoutes Configure routes pointing to a GRE tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticGreRoutes(@Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs>> ipv4StaticGreRoutes) {
            $.ipv4StaticGreRoutes = ipv4StaticGreRoutes;
            return this;
        }

        /**
         * @param ipv4StaticGreRoutes Configure routes pointing to a GRE tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticGreRoutes(List<CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs> ipv4StaticGreRoutes) {
            return ipv4StaticGreRoutes(Output.of(ipv4StaticGreRoutes));
        }

        /**
         * @param ipv4StaticGreRoutes Configure routes pointing to a GRE tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticGreRoutes(CiscoVpnFeatureTemplateIpv4StaticGreRouteArgs... ipv4StaticGreRoutes) {
            return ipv4StaticGreRoutes(List.of(ipv4StaticGreRoutes));
        }

        /**
         * @param ipv4StaticIpsecRoutes Configure routes pointing to a IPSEC tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticIpsecRoutes(@Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs>> ipv4StaticIpsecRoutes) {
            $.ipv4StaticIpsecRoutes = ipv4StaticIpsecRoutes;
            return this;
        }

        /**
         * @param ipv4StaticIpsecRoutes Configure routes pointing to a IPSEC tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticIpsecRoutes(List<CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs> ipv4StaticIpsecRoutes) {
            return ipv4StaticIpsecRoutes(Output.of(ipv4StaticIpsecRoutes));
        }

        /**
         * @param ipv4StaticIpsecRoutes Configure routes pointing to a IPSEC tunnel
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticIpsecRoutes(CiscoVpnFeatureTemplateIpv4StaticIpsecRouteArgs... ipv4StaticIpsecRoutes) {
            return ipv4StaticIpsecRoutes(List.of(ipv4StaticIpsecRoutes));
        }

        /**
         * @param ipv4StaticRoutes Configure IPv4 Static Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticRoutes(@Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticRouteArgs>> ipv4StaticRoutes) {
            $.ipv4StaticRoutes = ipv4StaticRoutes;
            return this;
        }

        /**
         * @param ipv4StaticRoutes Configure IPv4 Static Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticRoutes(List<CiscoVpnFeatureTemplateIpv4StaticRouteArgs> ipv4StaticRoutes) {
            return ipv4StaticRoutes(Output.of(ipv4StaticRoutes));
        }

        /**
         * @param ipv4StaticRoutes Configure IPv4 Static Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticRoutes(CiscoVpnFeatureTemplateIpv4StaticRouteArgs... ipv4StaticRoutes) {
            return ipv4StaticRoutes(List.of(ipv4StaticRoutes));
        }

        /**
         * @param ipv4StaticServiceRoutes Configure IPv4 Static Service Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticServiceRoutes(@Nullable Output<List<CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs>> ipv4StaticServiceRoutes) {
            $.ipv4StaticServiceRoutes = ipv4StaticServiceRoutes;
            return this;
        }

        /**
         * @param ipv4StaticServiceRoutes Configure IPv4 Static Service Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticServiceRoutes(List<CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs> ipv4StaticServiceRoutes) {
            return ipv4StaticServiceRoutes(Output.of(ipv4StaticServiceRoutes));
        }

        /**
         * @param ipv4StaticServiceRoutes Configure IPv4 Static Service Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv4StaticServiceRoutes(CiscoVpnFeatureTemplateIpv4StaticServiceRouteArgs... ipv4StaticServiceRoutes) {
            return ipv4StaticServiceRoutes(List.of(ipv4StaticServiceRoutes));
        }

        /**
         * @param ipv6StaticRoutes Configure IPv6 Static Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv6StaticRoutes(@Nullable Output<List<CiscoVpnFeatureTemplateIpv6StaticRouteArgs>> ipv6StaticRoutes) {
            $.ipv6StaticRoutes = ipv6StaticRoutes;
            return this;
        }

        /**
         * @param ipv6StaticRoutes Configure IPv6 Static Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv6StaticRoutes(List<CiscoVpnFeatureTemplateIpv6StaticRouteArgs> ipv6StaticRoutes) {
            return ipv6StaticRoutes(Output.of(ipv6StaticRoutes));
        }

        /**
         * @param ipv6StaticRoutes Configure IPv6 Static Routes
         * 
         * @return builder
         * 
         */
        public Builder ipv6StaticRoutes(CiscoVpnFeatureTemplateIpv6StaticRouteArgs... ipv6StaticRoutes) {
            return ipv6StaticRoutes(List.of(ipv6StaticRoutes));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nat64Pools Set NAT64 v4 pool range
         * 
         * @return builder
         * 
         */
        public Builder nat64Pools(@Nullable Output<List<CiscoVpnFeatureTemplateNat64PoolArgs>> nat64Pools) {
            $.nat64Pools = nat64Pools;
            return this;
        }

        /**
         * @param nat64Pools Set NAT64 v4 pool range
         * 
         * @return builder
         * 
         */
        public Builder nat64Pools(List<CiscoVpnFeatureTemplateNat64PoolArgs> nat64Pools) {
            return nat64Pools(Output.of(nat64Pools));
        }

        /**
         * @param nat64Pools Set NAT64 v4 pool range
         * 
         * @return builder
         * 
         */
        public Builder nat64Pools(CiscoVpnFeatureTemplateNat64PoolArgs... nat64Pools) {
            return nat64Pools(List.of(nat64Pools));
        }

        /**
         * @param natPools Configure NAT Pool entries
         * 
         * @return builder
         * 
         */
        public Builder natPools(@Nullable Output<List<CiscoVpnFeatureTemplateNatPoolArgs>> natPools) {
            $.natPools = natPools;
            return this;
        }

        /**
         * @param natPools Configure NAT Pool entries
         * 
         * @return builder
         * 
         */
        public Builder natPools(List<CiscoVpnFeatureTemplateNatPoolArgs> natPools) {
            return natPools(Output.of(natPools));
        }

        /**
         * @param natPools Configure NAT Pool entries
         * 
         * @return builder
         * 
         */
        public Builder natPools(CiscoVpnFeatureTemplateNatPoolArgs... natPools) {
            return natPools(List.of(natPools));
        }

        /**
         * @param ompAdminDistanceIpv4 omp-admin-distance-ipv4
         *   - Range: `1`-`255`
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv4(@Nullable Output<Integer> ompAdminDistanceIpv4) {
            $.ompAdminDistanceIpv4 = ompAdminDistanceIpv4;
            return this;
        }

        /**
         * @param ompAdminDistanceIpv4 omp-admin-distance-ipv4
         *   - Range: `1`-`255`
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv4(Integer ompAdminDistanceIpv4) {
            return ompAdminDistanceIpv4(Output.of(ompAdminDistanceIpv4));
        }

        /**
         * @param ompAdminDistanceIpv4Variable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv4Variable(@Nullable Output<String> ompAdminDistanceIpv4Variable) {
            $.ompAdminDistanceIpv4Variable = ompAdminDistanceIpv4Variable;
            return this;
        }

        /**
         * @param ompAdminDistanceIpv4Variable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv4Variable(String ompAdminDistanceIpv4Variable) {
            return ompAdminDistanceIpv4Variable(Output.of(ompAdminDistanceIpv4Variable));
        }

        /**
         * @param ompAdminDistanceIpv6 omp-admin-distance-ipv6
         *   - Range: `1`-`255`
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv6(@Nullable Output<Integer> ompAdminDistanceIpv6) {
            $.ompAdminDistanceIpv6 = ompAdminDistanceIpv6;
            return this;
        }

        /**
         * @param ompAdminDistanceIpv6 omp-admin-distance-ipv6
         *   - Range: `1`-`255`
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv6(Integer ompAdminDistanceIpv6) {
            return ompAdminDistanceIpv6(Output.of(ompAdminDistanceIpv6));
        }

        /**
         * @param ompAdminDistanceIpv6Variable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv6Variable(@Nullable Output<String> ompAdminDistanceIpv6Variable) {
            $.ompAdminDistanceIpv6Variable = ompAdminDistanceIpv6Variable;
            return this;
        }

        /**
         * @param ompAdminDistanceIpv6Variable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ompAdminDistanceIpv6Variable(String ompAdminDistanceIpv6Variable) {
            return ompAdminDistanceIpv6Variable(Output.of(ompAdminDistanceIpv6Variable));
        }

        /**
         * @param ompAdvertiseIpv4Routes Advertise routes to OMP
         * 
         * @return builder
         * 
         */
        public Builder ompAdvertiseIpv4Routes(@Nullable Output<List<CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs>> ompAdvertiseIpv4Routes) {
            $.ompAdvertiseIpv4Routes = ompAdvertiseIpv4Routes;
            return this;
        }

        /**
         * @param ompAdvertiseIpv4Routes Advertise routes to OMP
         * 
         * @return builder
         * 
         */
        public Builder ompAdvertiseIpv4Routes(List<CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs> ompAdvertiseIpv4Routes) {
            return ompAdvertiseIpv4Routes(Output.of(ompAdvertiseIpv4Routes));
        }

        /**
         * @param ompAdvertiseIpv4Routes Advertise routes to OMP
         * 
         * @return builder
         * 
         */
        public Builder ompAdvertiseIpv4Routes(CiscoVpnFeatureTemplateOmpAdvertiseIpv4RouteArgs... ompAdvertiseIpv4Routes) {
            return ompAdvertiseIpv4Routes(List.of(ompAdvertiseIpv4Routes));
        }

        /**
         * @param ompAdvertiseIpv6Routes Advertise routes to OMP
         * 
         * @return builder
         * 
         */
        public Builder ompAdvertiseIpv6Routes(@Nullable Output<List<CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs>> ompAdvertiseIpv6Routes) {
            $.ompAdvertiseIpv6Routes = ompAdvertiseIpv6Routes;
            return this;
        }

        /**
         * @param ompAdvertiseIpv6Routes Advertise routes to OMP
         * 
         * @return builder
         * 
         */
        public Builder ompAdvertiseIpv6Routes(List<CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs> ompAdvertiseIpv6Routes) {
            return ompAdvertiseIpv6Routes(Output.of(ompAdvertiseIpv6Routes));
        }

        /**
         * @param ompAdvertiseIpv6Routes Advertise routes to OMP
         * 
         * @return builder
         * 
         */
        public Builder ompAdvertiseIpv6Routes(CiscoVpnFeatureTemplateOmpAdvertiseIpv6RouteArgs... ompAdvertiseIpv6Routes) {
            return ompAdvertiseIpv6Routes(List.of(ompAdvertiseIpv6Routes));
        }

        /**
         * @param organizationName Org Name selected
         * 
         * @return builder
         * 
         */
        public Builder organizationName(@Nullable Output<String> organizationName) {
            $.organizationName = organizationName;
            return this;
        }

        /**
         * @param organizationName Org Name selected
         * 
         * @return builder
         * 
         */
        public Builder organizationName(String organizationName) {
            return organizationName(Output.of(organizationName));
        }

        /**
         * @param portForwardRules Configure Port Forward entries
         * 
         * @return builder
         * 
         */
        public Builder portForwardRules(@Nullable Output<List<CiscoVpnFeatureTemplatePortForwardRuleArgs>> portForwardRules) {
            $.portForwardRules = portForwardRules;
            return this;
        }

        /**
         * @param portForwardRules Configure Port Forward entries
         * 
         * @return builder
         * 
         */
        public Builder portForwardRules(List<CiscoVpnFeatureTemplatePortForwardRuleArgs> portForwardRules) {
            return portForwardRules(Output.of(portForwardRules));
        }

        /**
         * @param portForwardRules Configure Port Forward entries
         * 
         * @return builder
         * 
         */
        public Builder portForwardRules(CiscoVpnFeatureTemplatePortForwardRuleArgs... portForwardRules) {
            return portForwardRules(List.of(portForwardRules));
        }

        /**
         * @param routeGlobalExports Enable route leaking to Global VPN from this Service VPN
         * 
         * @return builder
         * 
         */
        public Builder routeGlobalExports(@Nullable Output<List<CiscoVpnFeatureTemplateRouteGlobalExportArgs>> routeGlobalExports) {
            $.routeGlobalExports = routeGlobalExports;
            return this;
        }

        /**
         * @param routeGlobalExports Enable route leaking to Global VPN from this Service VPN
         * 
         * @return builder
         * 
         */
        public Builder routeGlobalExports(List<CiscoVpnFeatureTemplateRouteGlobalExportArgs> routeGlobalExports) {
            return routeGlobalExports(Output.of(routeGlobalExports));
        }

        /**
         * @param routeGlobalExports Enable route leaking to Global VPN from this Service VPN
         * 
         * @return builder
         * 
         */
        public Builder routeGlobalExports(CiscoVpnFeatureTemplateRouteGlobalExportArgs... routeGlobalExports) {
            return routeGlobalExports(List.of(routeGlobalExports));
        }

        /**
         * @param routeGlobalImports Enable route leaking from Global VPN to this Service VPN
         * 
         * @return builder
         * 
         */
        public Builder routeGlobalImports(@Nullable Output<List<CiscoVpnFeatureTemplateRouteGlobalImportArgs>> routeGlobalImports) {
            $.routeGlobalImports = routeGlobalImports;
            return this;
        }

        /**
         * @param routeGlobalImports Enable route leaking from Global VPN to this Service VPN
         * 
         * @return builder
         * 
         */
        public Builder routeGlobalImports(List<CiscoVpnFeatureTemplateRouteGlobalImportArgs> routeGlobalImports) {
            return routeGlobalImports(Output.of(routeGlobalImports));
        }

        /**
         * @param routeGlobalImports Enable route leaking from Global VPN to this Service VPN
         * 
         * @return builder
         * 
         */
        public Builder routeGlobalImports(CiscoVpnFeatureTemplateRouteGlobalImportArgs... routeGlobalImports) {
            return routeGlobalImports(List.of(routeGlobalImports));
        }

        /**
         * @param routeVpnImports Enable route leak from Service VPN to current VPN
         * 
         * @return builder
         * 
         */
        public Builder routeVpnImports(@Nullable Output<List<CiscoVpnFeatureTemplateRouteVpnImportArgs>> routeVpnImports) {
            $.routeVpnImports = routeVpnImports;
            return this;
        }

        /**
         * @param routeVpnImports Enable route leak from Service VPN to current VPN
         * 
         * @return builder
         * 
         */
        public Builder routeVpnImports(List<CiscoVpnFeatureTemplateRouteVpnImportArgs> routeVpnImports) {
            return routeVpnImports(Output.of(routeVpnImports));
        }

        /**
         * @param routeVpnImports Enable route leak from Service VPN to current VPN
         * 
         * @return builder
         * 
         */
        public Builder routeVpnImports(CiscoVpnFeatureTemplateRouteVpnImportArgs... routeVpnImports) {
            return routeVpnImports(List.of(routeVpnImports));
        }

        /**
         * @param services Configure services
         * 
         * @return builder
         * 
         */
        public Builder services(@Nullable Output<List<CiscoVpnFeatureTemplateServiceArgs>> services) {
            $.services = services;
            return this;
        }

        /**
         * @param services Configure services
         * 
         * @return builder
         * 
         */
        public Builder services(List<CiscoVpnFeatureTemplateServiceArgs> services) {
            return services(Output.of(services));
        }

        /**
         * @param services Configure services
         * 
         * @return builder
         * 
         */
        public Builder services(CiscoVpnFeatureTemplateServiceArgs... services) {
            return services(List.of(services));
        }

        /**
         * @param staticNatRules Configure static NAT entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatRules(@Nullable Output<List<CiscoVpnFeatureTemplateStaticNatRuleArgs>> staticNatRules) {
            $.staticNatRules = staticNatRules;
            return this;
        }

        /**
         * @param staticNatRules Configure static NAT entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatRules(List<CiscoVpnFeatureTemplateStaticNatRuleArgs> staticNatRules) {
            return staticNatRules(Output.of(staticNatRules));
        }

        /**
         * @param staticNatRules Configure static NAT entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatRules(CiscoVpnFeatureTemplateStaticNatRuleArgs... staticNatRules) {
            return staticNatRules(List.of(staticNatRules));
        }

        /**
         * @param staticNatSubnetRules Configure static NAT Subnet entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatSubnetRules(@Nullable Output<List<CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs>> staticNatSubnetRules) {
            $.staticNatSubnetRules = staticNatSubnetRules;
            return this;
        }

        /**
         * @param staticNatSubnetRules Configure static NAT Subnet entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatSubnetRules(List<CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs> staticNatSubnetRules) {
            return staticNatSubnetRules(Output.of(staticNatSubnetRules));
        }

        /**
         * @param staticNatSubnetRules Configure static NAT Subnet entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatSubnetRules(CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs... staticNatSubnetRules) {
            return staticNatSubnetRules(List.of(staticNatSubnetRules));
        }

        /**
         * @param tenantVpnId Tenant VPN
         *   - Range: `0`-`65527`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder tenantVpnId(@Nullable Output<Integer> tenantVpnId) {
            $.tenantVpnId = tenantVpnId;
            return this;
        }

        /**
         * @param tenantVpnId Tenant VPN
         *   - Range: `0`-`65527`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder tenantVpnId(Integer tenantVpnId) {
            return tenantVpnId(Output.of(tenantVpnId));
        }

        /**
         * @param vpnId List of VPN instances
         *   - Range: `0`-`65527`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<Integer> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId List of VPN instances
         *   - Range: `0`-`65527`
         *   - Default value: `0`
         * 
         * @return builder
         * 
         */
        public Builder vpnId(Integer vpnId) {
            return vpnId(Output.of(vpnId));
        }

        /**
         * @param vpnName Name
         * 
         * @return builder
         * 
         */
        public Builder vpnName(@Nullable Output<String> vpnName) {
            $.vpnName = vpnName;
            return this;
        }

        /**
         * @param vpnName Name
         * 
         * @return builder
         * 
         */
        public Builder vpnName(String vpnName) {
            return vpnName(Output.of(vpnName));
        }

        /**
         * @param vpnNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnNameVariable(@Nullable Output<String> vpnNameVariable) {
            $.vpnNameVariable = vpnNameVariable;
            return this;
        }

        /**
         * @param vpnNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnNameVariable(String vpnNameVariable) {
            return vpnNameVariable(Output.of(vpnNameVariable));
        }

        public CiscoVpnFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoVpnFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoVpnFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
