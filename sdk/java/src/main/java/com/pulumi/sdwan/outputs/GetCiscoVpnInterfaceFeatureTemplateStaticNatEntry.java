// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry {
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Source IP address to be translated
     * 
     */
    private String sourceIp;
    /**
     * @return Variable name
     * 
     */
    private String sourceIpVariable;
    /**
     * @return Configure VPN ID
     * 
     */
    private Integer sourceVpnId;
    /**
     * @return Variable name
     * 
     */
    private String sourceVpnIdVariable;
    /**
     * @return Direction of static NAT translation
     * 
     */
    private String staticNatDirection;
    /**
     * @return Variable name
     * 
     */
    private String staticNatDirectionVariable;
    /**
     * @return Statically translated source IP address
     * 
     */
    private String translateIp;
    /**
     * @return Variable name
     * 
     */
    private String translateIpVariable;

    private GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry() {}
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Source IP address to be translated
     * 
     */
    public String sourceIp() {
        return this.sourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceIpVariable() {
        return this.sourceIpVariable;
    }
    /**
     * @return Configure VPN ID
     * 
     */
    public Integer sourceVpnId() {
        return this.sourceVpnId;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceVpnIdVariable() {
        return this.sourceVpnIdVariable;
    }
    /**
     * @return Direction of static NAT translation
     * 
     */
    public String staticNatDirection() {
        return this.staticNatDirection;
    }
    /**
     * @return Variable name
     * 
     */
    public String staticNatDirectionVariable() {
        return this.staticNatDirectionVariable;
    }
    /**
     * @return Statically translated source IP address
     * 
     */
    public String translateIp() {
        return this.translateIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String translateIpVariable() {
        return this.translateIpVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean optional;
        private String sourceIp;
        private String sourceIpVariable;
        private Integer sourceVpnId;
        private String sourceVpnIdVariable;
        private String staticNatDirection;
        private String staticNatDirectionVariable;
        private String translateIp;
        private String translateIpVariable;
        public Builder() {}
        public Builder(GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.optional = defaults.optional;
    	      this.sourceIp = defaults.sourceIp;
    	      this.sourceIpVariable = defaults.sourceIpVariable;
    	      this.sourceVpnId = defaults.sourceVpnId;
    	      this.sourceVpnIdVariable = defaults.sourceVpnIdVariable;
    	      this.staticNatDirection = defaults.staticNatDirection;
    	      this.staticNatDirectionVariable = defaults.staticNatDirectionVariable;
    	      this.translateIp = defaults.translateIp;
    	      this.translateIpVariable = defaults.translateIpVariable;
        }

        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIp(String sourceIp) {
            if (sourceIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "sourceIp");
            }
            this.sourceIp = sourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpVariable(String sourceIpVariable) {
            if (sourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "sourceIpVariable");
            }
            this.sourceIpVariable = sourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVpnId(Integer sourceVpnId) {
            if (sourceVpnId == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "sourceVpnId");
            }
            this.sourceVpnId = sourceVpnId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceVpnIdVariable(String sourceVpnIdVariable) {
            if (sourceVpnIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "sourceVpnIdVariable");
            }
            this.sourceVpnIdVariable = sourceVpnIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticNatDirection(String staticNatDirection) {
            if (staticNatDirection == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "staticNatDirection");
            }
            this.staticNatDirection = staticNatDirection;
            return this;
        }
        @CustomType.Setter
        public Builder staticNatDirectionVariable(String staticNatDirectionVariable) {
            if (staticNatDirectionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "staticNatDirectionVariable");
            }
            this.staticNatDirectionVariable = staticNatDirectionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder translateIp(String translateIp) {
            if (translateIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "translateIp");
            }
            this.translateIp = translateIp;
            return this;
        }
        @CustomType.Setter
        public Builder translateIpVariable(String translateIpVariable) {
            if (translateIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry", "translateIpVariable");
            }
            this.translateIpVariable = translateIpVariable;
            return this;
        }
        public GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry build() {
            final var _resultValue = new GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry();
            _resultValue.optional = optional;
            _resultValue.sourceIp = sourceIp;
            _resultValue.sourceIpVariable = sourceIpVariable;
            _resultValue.sourceVpnId = sourceVpnId;
            _resultValue.sourceVpnIdVariable = sourceVpnIdVariable;
            _resultValue.staticNatDirection = staticNatDirection;
            _resultValue.staticNatDirectionVariable = staticNatDirectionVariable;
            _resultValue.translateIp = translateIp;
            _resultValue.translateIpVariable = translateIpVariable;
            return _resultValue;
        }
    }
}
