// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateAccessListArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateStaticArpArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnInterfaceFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnInterfaceFeatureTemplateArgs Empty = new CiscoVpnInterfaceFeatureTemplateArgs();

    /**
     * Apply ACL
     * 
     */
    @Import(name="accessLists")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateAccessListArgs>> accessLists;

    /**
     * @return Apply ACL
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateAccessListArgs>>> accessLists() {
        return Optional.ofNullable(this.accessLists);
    }

    /**
     * Assign IPv4 address
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return Assign IPv4 address
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="addressVariable")
    private @Nullable Output<String> addressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> addressVariable() {
        return Optional.ofNullable(this.addressVariable);
    }

    /**
     * Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     * 
     */
    @Import(name="arpTimeout")
    private @Nullable Output<Integer> arpTimeout;

    /**
     * @return Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
     *   - Range: `0`-`2147483`
     *   - Default value: `1200`
     * 
     */
    public Optional<Output<Integer>> arpTimeout() {
        return Optional.ofNullable(this.arpTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="arpTimeoutVariable")
    private @Nullable Output<String> arpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> arpTimeoutVariable() {
        return Optional.ofNullable(this.arpTimeoutVariable);
    }

    /**
     * Interface auto detect bandwidth
     *   - Default value: `false`
     * 
     */
    @Import(name="autoBandwidthDetect")
    private @Nullable Output<Boolean> autoBandwidthDetect;

    /**
     * @return Interface auto detect bandwidth
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> autoBandwidthDetect() {
        return Optional.ofNullable(this.autoBandwidthDetect);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="autoBandwidthDetectVariable")
    private @Nullable Output<String> autoBandwidthDetectVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> autoBandwidthDetectVariable() {
        return Optional.ofNullable(this.autoBandwidthDetectVariable);
    }

    /**
     * Link autonegotiation
     * 
     */
    @Import(name="autonegotiate")
    private @Nullable Output<Boolean> autonegotiate;

    /**
     * @return Link autonegotiation
     * 
     */
    public Optional<Output<Boolean>> autonegotiate() {
        return Optional.ofNullable(this.autonegotiate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="autonegotiateVariable")
    private @Nullable Output<String> autonegotiateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> autonegotiateVariable() {
        return Optional.ofNullable(this.autonegotiateVariable);
    }

    /**
     * Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    @Import(name="bandwidthDownstream")
    private @Nullable Output<Integer> bandwidthDownstream;

    /**
     * @return Interface downstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> bandwidthDownstream() {
        return Optional.ofNullable(this.bandwidthDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthDownstreamVariable")
    private @Nullable Output<String> bandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthDownstreamVariable() {
        return Optional.ofNullable(this.bandwidthDownstreamVariable);
    }

    /**
     * Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    @Import(name="bandwidthUpstream")
    private @Nullable Output<Integer> bandwidthUpstream;

    /**
     * @return Interface upstream bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> bandwidthUpstream() {
        return Optional.ofNullable(this.bandwidthUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthUpstreamVariable")
    private @Nullable Output<String> bandwidthUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthUpstreamVariable() {
        return Optional.ofNullable(this.bandwidthUpstreamVariable);
    }

    /**
     * Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     * 
     */
    @Import(name="blockNonSourceIp")
    private @Nullable Output<Boolean> blockNonSourceIp;

    /**
     * @return Block packets originating from IP address that is not from this source
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> blockNonSourceIp() {
        return Optional.ofNullable(this.blockNonSourceIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="blockNonSourceIpVariable")
    private @Nullable Output<String> blockNonSourceIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> blockNonSourceIpVariable() {
        return Optional.ofNullable(this.blockNonSourceIpVariable);
    }

    /**
     * Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     * 
     */
    @Import(name="coreRegion")
    private @Nullable Output<String> coreRegion;

    /**
     * @return Enable core region
     *   - Choices: `core`, `core-shared`
     *   - Default value: `core`
     * 
     */
    public Optional<Output<String>> coreRegion() {
        return Optional.ofNullable(this.coreRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="coreRegionVariable")
    private @Nullable Output<String> coreRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> coreRegionVariable() {
        return Optional.ofNullable(this.coreRegionVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Enable DHCP
     *   - Default value: `false`
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return Enable DHCP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * Set administrative distance for DHCP default route
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     * 
     */
    @Import(name="dhcpDistance")
    private @Nullable Output<Integer> dhcpDistance;

    /**
     * @return Set administrative distance for DHCP default route
     *   - Range: `1`-`65536`
     *   - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> dhcpDistance() {
        return Optional.ofNullable(this.dhcpDistance);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dhcpDistanceVariable")
    private @Nullable Output<String> dhcpDistanceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dhcpDistanceVariable() {
        return Optional.ofNullable(this.dhcpDistanceVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dhcpVariable")
    private @Nullable Output<String> dhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dhcpVariable() {
        return Optional.ofNullable(this.dhcpVariable);
    }

    /**
     * Enable DHCPv6
     *   - Default value: `false`
     * 
     */
    @Import(name="dhcpv6")
    private @Nullable Output<Boolean> dhcpv6;

    /**
     * @return Enable DHCPv6
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> dhcpv6() {
        return Optional.ofNullable(this.dhcpv6);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dhcpv6Variable")
    private @Nullable Output<String> dhcpv6Variable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dhcpv6Variable() {
        return Optional.ofNullable(this.dhcpv6Variable);
    }

    /**
     * Duplex mode
     *   - Choices: `full`, `half`, `auto`
     * 
     */
    @Import(name="duplex")
    private @Nullable Output<String> duplex;

    /**
     * @return Duplex mode
     *   - Choices: `full`, `half`, `auto`
     * 
     */
    public Optional<Output<String>> duplex() {
        return Optional.ofNullable(this.duplex);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="duplexVariable")
    private @Nullable Output<String> duplexVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> duplexVariable() {
        return Optional.ofNullable(this.duplexVariable);
    }

    /**
     * Enable core region
     *   - Default value: `false`
     * 
     */
    @Import(name="enableCoreRegion")
    private @Nullable Output<Boolean> enableCoreRegion;

    /**
     * @return Enable core region
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableCoreRegion() {
        return Optional.ofNullable(this.enableCoreRegion);
    }

    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     * 
     */
    @Import(name="enableSgt")
    private @Nullable Output<Boolean> enableSgt;

    /**
     * @return Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> enableSgt() {
        return Optional.ofNullable(this.enableSgt);
    }

    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    @Import(name="greTunnelSourceIp")
    private @Nullable Output<String> greTunnelSourceIp;

    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    public Optional<Output<String>> greTunnelSourceIp() {
        return Optional.ofNullable(this.greTunnelSourceIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="greTunnelSourceIpVariable")
    private @Nullable Output<String> greTunnelSourceIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> greTunnelSourceIpVariable() {
        return Optional.ofNullable(this.greTunnelSourceIpVariable);
    }

    /**
     * Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    @Import(name="greTunnelXconnect")
    private @Nullable Output<String> greTunnelXconnect;

    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    public Optional<Output<String>> greTunnelXconnect() {
        return Optional.ofNullable(this.greTunnelXconnect);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="greTunnelXconnectVariable")
    private @Nullable Output<String> greTunnelXconnectVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> greTunnelXconnectVariable() {
        return Optional.ofNullable(this.greTunnelXconnectVariable);
    }

    /**
     * Set this option to disable the icmp/icmpv6 redirect packets
     *   - Default value: `true`
     * 
     */
    @Import(name="icmpRedirectDisable")
    private @Nullable Output<Boolean> icmpRedirectDisable;

    /**
     * @return Set this option to disable the icmp/icmpv6 redirect packets
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> icmpRedirectDisable() {
        return Optional.ofNullable(this.icmpRedirectDisable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="icmpRedirectDisableVariable")
    private @Nullable Output<String> icmpRedirectDisableVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> icmpRedirectDisableVariable() {
        return Optional.ofNullable(this.icmpRedirectDisableVariable);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     * 
     */
    @Import(name="interfaceMtu")
    private @Nullable Output<Integer> interfaceMtu;

    /**
     * @return Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
     *   - Range: `1500`-`9216`
     *   - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> interfaceMtu() {
        return Optional.ofNullable(this.interfaceMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceMtuVariable")
    private @Nullable Output<String> interfaceMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceMtuVariable() {
        return Optional.ofNullable(this.interfaceMtuVariable);
    }

    /**
     * Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceNameVariable")
    private @Nullable Output<String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceNameVariable() {
        return Optional.ofNullable(this.interfaceNameVariable);
    }

    /**
     * IP Directed-Broadcast
     *   - Default value: `false`
     * 
     */
    @Import(name="ipDirectedBroadcast")
    private @Nullable Output<Boolean> ipDirectedBroadcast;

    /**
     * @return IP Directed-Broadcast
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> ipDirectedBroadcast() {
        return Optional.ofNullable(this.ipDirectedBroadcast);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipDirectedBroadcastVariable")
    private @Nullable Output<String> ipDirectedBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipDirectedBroadcastVariable() {
        return Optional.ofNullable(this.ipDirectedBroadcastVariable);
    }

    /**
     * IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     * 
     */
    @Import(name="ipMtu")
    private @Nullable Output<Integer> ipMtu;

    /**
     * @return IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
     *   - Range: `576`-`9216`
     *   - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> ipMtu() {
        return Optional.ofNullable(this.ipMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipMtuVariable")
    private @Nullable Output<String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipMtuVariable() {
        return Optional.ofNullable(this.ipMtuVariable);
    }

    /**
     * Iperf server for auto bandwidth detect
     * 
     */
    @Import(name="iperfServer")
    private @Nullable Output<String> iperfServer;

    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    public Optional<Output<String>> iperfServer() {
        return Optional.ofNullable(this.iperfServer);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="iperfServerVariable")
    private @Nullable Output<String> iperfServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> iperfServerVariable() {
        return Optional.ofNullable(this.iperfServerVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4DhcpHelperVariable")
    private @Nullable Output<String> ipv4DhcpHelperVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4DhcpHelperVariable() {
        return Optional.ofNullable(this.ipv4DhcpHelperVariable);
    }

    /**
     * List of DHCP IPv4 helper addresses
     * 
     */
    @Import(name="ipv4DhcpHelpers")
    private @Nullable Output<List<String>> ipv4DhcpHelpers;

    /**
     * @return List of DHCP IPv4 helper addresses
     * 
     */
    public Optional<Output<List<String>>> ipv4DhcpHelpers() {
        return Optional.ofNullable(this.ipv4DhcpHelpers);
    }

    /**
     * Assign secondary IP addresses
     * 
     */
    @Import(name="ipv4SecondaryAddresses")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs>> ipv4SecondaryAddresses;

    /**
     * @return Assign secondary IP addresses
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs>>> ipv4SecondaryAddresses() {
        return Optional.ofNullable(this.ipv4SecondaryAddresses);
    }

    /**
     * Enable VRRP
     * 
     */
    @Import(name="ipv4Vrrps")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs>> ipv4Vrrps;

    /**
     * @return Enable VRRP
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs>>> ipv4Vrrps() {
        return Optional.ofNullable(this.ipv4Vrrps);
    }

    /**
     * Apply IPv6 access list
     * 
     */
    @Import(name="ipv6AccessLists")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs>> ipv6AccessLists;

    /**
     * @return Apply IPv6 access list
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs>>> ipv6AccessLists() {
        return Optional.ofNullable(this.ipv6AccessLists);
    }

    /**
     * Assign IPv6 address
     * 
     */
    @Import(name="ipv6Address")
    private @Nullable Output<String> ipv6Address;

    /**
     * @return Assign IPv6 address
     * 
     */
    public Optional<Output<String>> ipv6Address() {
        return Optional.ofNullable(this.ipv6Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv6AddressVariable")
    private @Nullable Output<String> ipv6AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv6AddressVariable() {
        return Optional.ofNullable(this.ipv6AddressVariable);
    }

    /**
     * DHCPv6 Helper
     * 
     */
    @Import(name="ipv6DhcpHelpers")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs>> ipv6DhcpHelpers;

    /**
     * @return DHCPv6 Helper
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs>>> ipv6DhcpHelpers() {
        return Optional.ofNullable(this.ipv6DhcpHelpers);
    }

    /**
     * NAT64 on this interface
     *   - Default value: `false`
     * 
     */
    @Import(name="ipv6Nat")
    private @Nullable Output<Boolean> ipv6Nat;

    /**
     * @return NAT64 on this interface
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> ipv6Nat() {
        return Optional.ofNullable(this.ipv6Nat);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv6NatVariable")
    private @Nullable Output<String> ipv6NatVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv6NatVariable() {
        return Optional.ofNullable(this.ipv6NatVariable);
    }

    /**
     * Assign secondary IPv6 addresses
     * 
     */
    @Import(name="ipv6SecondaryAddresses")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs>> ipv6SecondaryAddresses;

    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs>>> ipv6SecondaryAddresses() {
        return Optional.ofNullable(this.ipv6SecondaryAddresses);
    }

    /**
     * Enable VRRP
     * 
     */
    @Import(name="ipv6Vrrps")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs>> ipv6Vrrps;

    /**
     * @return Enable VRRP
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs>>> ipv6Vrrps() {
        return Optional.ofNullable(this.ipv6Vrrps);
    }

    /**
     * Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     * 
     */
    @Import(name="loadInterval")
    private @Nullable Output<Integer> loadInterval;

    /**
     * @return Interval for interface load calculation
     *   - Range: `30`-`600`
     *   - Default value: `30`
     * 
     */
    public Optional<Output<Integer>> loadInterval() {
        return Optional.ofNullable(this.loadInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="loadIntervalVariable")
    private @Nullable Output<String> loadIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> loadIntervalVariable() {
        return Optional.ofNullable(this.loadIntervalVariable);
    }

    /**
     * Set MAC-layer address
     * 
     */
    @Import(name="macAddress")
    private @Nullable Output<String> macAddress;

    /**
     * @return Set MAC-layer address
     * 
     */
    public Optional<Output<String>> macAddress() {
        return Optional.ofNullable(this.macAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="macAddressVariable")
    private @Nullable Output<String> macAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> macAddressVariable() {
        return Optional.ofNullable(this.macAddressVariable);
    }

    /**
     * Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     * 
     */
    @Import(name="mediaType")
    private @Nullable Output<String> mediaType;

    /**
     * @return Media type
     *   - Choices: `auto-select`, `rj45`, `sfp`
     * 
     */
    public Optional<Output<String>> mediaType() {
        return Optional.ofNullable(this.mediaType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="mediaTypeVariable")
    private @Nullable Output<String> mediaTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> mediaTypeVariable() {
        return Optional.ofNullable(this.mediaTypeVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network Address Translation on this interface
     *   - Default value: `false`
     * 
     */
    @Import(name="nat")
    private @Nullable Output<Boolean> nat;

    /**
     * @return Network Address Translation on this interface
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> nat() {
        return Optional.ofNullable(this.nat);
    }

    /**
     * NAT64 on this interface
     *   - Default value: `false`
     * 
     */
    @Import(name="nat64Interface")
    private @Nullable Output<Boolean> nat64Interface;

    /**
     * @return NAT64 on this interface
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> nat64Interface() {
        return Optional.ofNullable(this.nat64Interface);
    }

    /**
     * NAT66 on this interface
     *   - Default value: `false`
     * 
     */
    @Import(name="nat66Interface")
    private @Nullable Output<Boolean> nat66Interface;

    /**
     * @return NAT66 on this interface
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> nat66Interface() {
        return Optional.ofNullable(this.nat66Interface);
    }

    /**
     * Configure NAT Inside Loopback Interface
     * 
     */
    @Import(name="natInsideSourceLoopbackInterface")
    private @Nullable Output<String> natInsideSourceLoopbackInterface;

    /**
     * @return Configure NAT Inside Loopback Interface
     * 
     */
    public Optional<Output<String>> natInsideSourceLoopbackInterface() {
        return Optional.ofNullable(this.natInsideSourceLoopbackInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natInsideSourceLoopbackInterfaceVariable")
    private @Nullable Output<String> natInsideSourceLoopbackInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natInsideSourceLoopbackInterfaceVariable() {
        return Optional.ofNullable(this.natInsideSourceLoopbackInterfaceVariable);
    }

    /**
     * Enable port translation(PAT)
     *   - Default value: `true`
     * 
     */
    @Import(name="natOverload")
    private @Nullable Output<Boolean> natOverload;

    /**
     * @return Enable port translation(PAT)
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> natOverload() {
        return Optional.ofNullable(this.natOverload);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natOverloadVariable")
    private @Nullable Output<String> natOverloadVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natOverloadVariable() {
        return Optional.ofNullable(this.natOverloadVariable);
    }

    /**
     * Ending IP address of NAT Pool Prefix Length
     * 
     */
    @Import(name="natPoolPrefixLength")
    private @Nullable Output<Integer> natPoolPrefixLength;

    /**
     * @return Ending IP address of NAT Pool Prefix Length
     * 
     */
    public Optional<Output<Integer>> natPoolPrefixLength() {
        return Optional.ofNullable(this.natPoolPrefixLength);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natPoolPrefixLengthVariable")
    private @Nullable Output<String> natPoolPrefixLengthVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natPoolPrefixLengthVariable() {
        return Optional.ofNullable(this.natPoolPrefixLengthVariable);
    }

    /**
     * Ending IP address of NAT pool range
     * 
     */
    @Import(name="natPoolRangeEnd")
    private @Nullable Output<String> natPoolRangeEnd;

    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    public Optional<Output<String>> natPoolRangeEnd() {
        return Optional.ofNullable(this.natPoolRangeEnd);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natPoolRangeEndVariable")
    private @Nullable Output<String> natPoolRangeEndVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natPoolRangeEndVariable() {
        return Optional.ofNullable(this.natPoolRangeEndVariable);
    }

    /**
     * Starting IP address of NAT pool range
     * 
     */
    @Import(name="natPoolRangeStart")
    private @Nullable Output<String> natPoolRangeStart;

    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    public Optional<Output<String>> natPoolRangeStart() {
        return Optional.ofNullable(this.natPoolRangeStart);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natPoolRangeStartVariable")
    private @Nullable Output<String> natPoolRangeStartVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natPoolRangeStartVariable() {
        return Optional.ofNullable(this.natPoolRangeStartVariable);
    }

    /**
     * NAT type
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     * 
     */
    @Import(name="natType")
    private @Nullable Output<String> natType;

    /**
     * @return NAT type
     *   - Choices: `interface`, `pool`, `loopback`
     *   - Default value: `interface`
     * 
     */
    public Optional<Output<String>> natType() {
        return Optional.ofNullable(this.natType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="natTypeVariable")
    private @Nullable Output<String> natTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> natTypeVariable() {
        return Optional.ofNullable(this.natTypeVariable);
    }

    /**
     * Configure interface as Power-over-Ethernet source
     *   - Default value: `false`
     * 
     */
    @Import(name="poe")
    private @Nullable Output<Boolean> poe;

    /**
     * @return Configure interface as Power-over-Ethernet source
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> poe() {
        return Optional.ofNullable(this.poe);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="poeVariable")
    private @Nullable Output<String> poeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> poeVariable() {
        return Optional.ofNullable(this.poeVariable);
    }

    /**
     * Enable/Disable CTS SGT propagation on an interface.
     *   - Default value: `true`
     * 
     */
    @Import(name="propagateSgt")
    private @Nullable Output<Boolean> propagateSgt;

    /**
     * @return Enable/Disable CTS SGT propagation on an interface.
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> propagateSgt() {
        return Optional.ofNullable(this.propagateSgt);
    }

    /**
     * Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveBandwidthDownstream")
    private @Nullable Output<Integer> qosAdaptiveBandwidthDownstream;

    /**
     * @return Adaptive QoS default downstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveBandwidthDownstream() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveBandwidthDownstreamVariable")
    private @Nullable Output<String> qosAdaptiveBandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveBandwidthDownstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthDownstreamVariable);
    }

    /**
     * Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveBandwidthUpstream")
    private @Nullable Output<Integer> qosAdaptiveBandwidthUpstream;

    /**
     * @return Adaptive QoS default upstream bandwidth
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveBandwidthUpstream() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveBandwidthUpstreamVariable")
    private @Nullable Output<String> qosAdaptiveBandwidthUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveBandwidthUpstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveBandwidthUpstreamVariable);
    }

    /**
     * Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMaxDownstream")
    private @Nullable Output<Integer> qosAdaptiveMaxDownstream;

    /**
     * @return Downstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMaxDownstream() {
        return Optional.ofNullable(this.qosAdaptiveMaxDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMaxDownstreamVariable")
    private @Nullable Output<String> qosAdaptiveMaxDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMaxDownstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMaxDownstreamVariable);
    }

    /**
     * Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMaxUpstream")
    private @Nullable Output<Integer> qosAdaptiveMaxUpstream;

    /**
     * @return Upstream max bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMaxUpstream() {
        return Optional.ofNullable(this.qosAdaptiveMaxUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMaxUpstreamVariable")
    private @Nullable Output<String> qosAdaptiveMaxUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMaxUpstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMaxUpstreamVariable);
    }

    /**
     * Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMinDownstream")
    private @Nullable Output<Integer> qosAdaptiveMinDownstream;

    /**
     * @return Downstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMinDownstream() {
        return Optional.ofNullable(this.qosAdaptiveMinDownstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMinDownstreamVariable")
    private @Nullable Output<String> qosAdaptiveMinDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMinDownstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMinDownstreamVariable);
    }

    /**
     * Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="qosAdaptiveMinUpstream")
    private @Nullable Output<Integer> qosAdaptiveMinUpstream;

    /**
     * @return Upstream min bandwidth limit
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> qosAdaptiveMinUpstream() {
        return Optional.ofNullable(this.qosAdaptiveMinUpstream);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptiveMinUpstreamVariable")
    private @Nullable Output<String> qosAdaptiveMinUpstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptiveMinUpstreamVariable() {
        return Optional.ofNullable(this.qosAdaptiveMinUpstreamVariable);
    }

    /**
     * Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     * 
     */
    @Import(name="qosAdaptivePeriod")
    private @Nullable Output<Integer> qosAdaptivePeriod;

    /**
     * @return Periodic timer for adaptive QoS in minutes
     *   - Range: `1`-`720`
     *   - Default value: `15`
     * 
     */
    public Optional<Output<Integer>> qosAdaptivePeriod() {
        return Optional.ofNullable(this.qosAdaptivePeriod);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosAdaptivePeriodVariable")
    private @Nullable Output<String> qosAdaptivePeriodVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosAdaptivePeriodVariable() {
        return Optional.ofNullable(this.qosAdaptivePeriodVariable);
    }

    /**
     * Name of QoS map
     * 
     */
    @Import(name="qosMap")
    private @Nullable Output<String> qosMap;

    /**
     * @return Name of QoS map
     * 
     */
    public Optional<Output<String>> qosMap() {
        return Optional.ofNullable(this.qosMap);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosMapVariable")
    private @Nullable Output<String> qosMapVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosMapVariable() {
        return Optional.ofNullable(this.qosMapVariable);
    }

    /**
     * Name of VPN QoS map
     * 
     */
    @Import(name="qosMapVpn")
    private @Nullable Output<String> qosMapVpn;

    /**
     * @return Name of VPN QoS map
     * 
     */
    public Optional<Output<String>> qosMapVpn() {
        return Optional.ofNullable(this.qosMapVpn);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="qosMapVpnVariable")
    private @Nullable Output<String> qosMapVpnVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> qosMapVpnVariable() {
        return Optional.ofNullable(this.qosMapVpnVariable);
    }

    /**
     * Name of rewrite rule
     * 
     */
    @Import(name="rewriteRuleName")
    private @Nullable Output<String> rewriteRuleName;

    /**
     * @return Name of rewrite rule
     * 
     */
    public Optional<Output<String>> rewriteRuleName() {
        return Optional.ofNullable(this.rewriteRuleName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="rewriteRuleNameVariable")
    private @Nullable Output<String> rewriteRuleNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> rewriteRuleNameVariable() {
        return Optional.ofNullable(this.rewriteRuleNameVariable);
    }

    /**
     * Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     * 
     */
    @Import(name="secondaryRegion")
    private @Nullable Output<String> secondaryRegion;

    /**
     * @return Enable secondary region
     *   - Choices: `off`, `secondary-only`, `secondary-shared`
     *   - Default value: `off`
     * 
     */
    public Optional<Output<String>> secondaryRegion() {
        return Optional.ofNullable(this.secondaryRegion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="secondaryRegionVariable")
    private @Nullable Output<String> secondaryRegionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> secondaryRegionVariable() {
        return Optional.ofNullable(this.secondaryRegionVariable);
    }

    /**
     * Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     * 
     */
    @Import(name="sgtEnforcement")
    private @Nullable Output<Boolean> sgtEnforcement;

    /**
     * @return Enables the interface for CTS SGT authorization and forwarding.
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> sgtEnforcement() {
        return Optional.ofNullable(this.sgtEnforcement);
    }

    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     * 
     */
    @Import(name="sgtEnforcementSgt")
    private @Nullable Output<Integer> sgtEnforcementSgt;

    /**
     * @return SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     * 
     */
    public Optional<Output<Integer>> sgtEnforcementSgt() {
        return Optional.ofNullable(this.sgtEnforcementSgt);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="sgtEnforcementSgtVariable")
    private @Nullable Output<String> sgtEnforcementSgtVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> sgtEnforcementSgtVariable() {
        return Optional.ofNullable(this.sgtEnforcementSgtVariable);
    }

    /**
     * 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     * 
     */
    @Import(name="shapingRate")
    private @Nullable Output<Integer> shapingRate;

    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     *   - Range: `8`-`100000000`
     * 
     */
    public Optional<Output<Integer>> shapingRate() {
        return Optional.ofNullable(this.shapingRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shapingRateVariable")
    private @Nullable Output<String> shapingRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shapingRateVariable() {
        return Optional.ofNullable(this.shapingRateVariable);
    }

    /**
     * Administrative state
     *   - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     * 
     */
    @Import(name="speed")
    private @Nullable Output<String> speed;

    /**
     * @return Set interface speed
     *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
     * 
     */
    public Optional<Output<String>> speed() {
        return Optional.ofNullable(this.speed);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="speedVariable")
    private @Nullable Output<String> speedVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> speedVariable() {
        return Optional.ofNullable(this.speedVariable);
    }

    /**
     * Configure static ARP entries
     * 
     */
    @Import(name="staticArps")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticArpArgs>> staticArps;

    /**
     * @return Configure static ARP entries
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateStaticArpArgs>>> staticArps() {
        return Optional.ofNullable(this.staticArps);
    }

    /**
     * static NAT
     * 
     */
    @Import(name="staticNat66Entries")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs>> staticNat66Entries;

    /**
     * @return static NAT
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs>>> staticNat66Entries() {
        return Optional.ofNullable(this.staticNat66Entries);
    }

    /**
     * Configure static NAT entries
     * 
     */
    @Import(name="staticNatEntries")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs>> staticNatEntries;

    /**
     * @return Configure static NAT entries
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs>>> staticNatEntries() {
        return Optional.ofNullable(this.staticNatEntries);
    }

    /**
     * Configure Port Forward entries
     * 
     */
    @Import(name="staticPortForwardEntries")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs>> staticPortForwardEntries;

    /**
     * @return Configure Port Forward entries
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs>>> staticPortForwardEntries() {
        return Optional.ofNullable(this.staticPortForwardEntries);
    }

    /**
     * SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     * 
     */
    @Import(name="staticSgt")
    private @Nullable Output<Integer> staticSgt;

    /**
     * @return SGT value between 2 and 65519.
     *   - Range: `2`-`65519`
     * 
     */
    public Optional<Output<Integer>> staticSgt() {
        return Optional.ofNullable(this.staticSgt);
    }

    /**
     * Indicates that the interface is trustworthy for CTS.
     *   - Default value: `false`
     * 
     */
    @Import(name="staticSgtTrusted")
    private @Nullable Output<Boolean> staticSgtTrusted;

    /**
     * @return Indicates that the interface is trustworthy for CTS.
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> staticSgtTrusted() {
        return Optional.ofNullable(this.staticSgtTrusted);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="staticSgtVariable")
    private @Nullable Output<String> staticSgtVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> staticSgtVariable() {
        return Optional.ofNullable(this.staticSgtVariable);
    }

    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tcpMssAdjust")
    private @Nullable Output<Integer> tcpMssAdjust;

    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tcpMssAdjust() {
        return Optional.ofNullable(this.tcpMssAdjust);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssAdjustVariable")
    private @Nullable Output<String> tcpMssAdjustVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssAdjustVariable() {
        return Optional.ofNullable(this.tcpMssAdjustVariable);
    }

    /**
     * Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     * 
     */
    @Import(name="tcpTimeout")
    private @Nullable Output<Integer> tcpTimeout;

    /**
     * @return Set NAT TCP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `60`
     * 
     */
    public Optional<Output<Integer>> tcpTimeout() {
        return Optional.ofNullable(this.tcpTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpTimeoutVariable")
    private @Nullable Output<String> tcpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpTimeoutVariable() {
        return Optional.ofNullable(this.tcpTimeoutVariable);
    }

    /**
     * Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    @Import(name="tlocExtension")
    private @Nullable Output<String> tlocExtension;

    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public Optional<Output<String>> tlocExtension() {
        return Optional.ofNullable(this.tlocExtension);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tlocExtensionVariable")
    private @Nullable Output<String> tlocExtensionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tlocExtensionVariable() {
        return Optional.ofNullable(this.tlocExtensionVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerVariable")
    private @Nullable Output<String> trackerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerVariable() {
        return Optional.ofNullable(this.trackerVariable);
    }

    /**
     * Enable tracker for this interface
     * 
     */
    @Import(name="trackers")
    private @Nullable Output<List<String>> trackers;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<Output<List<String>>> trackers() {
        return Optional.ofNullable(this.trackers);
    }

    /**
     * Tunnels Bandwidth Percent
     *   - Range: `1`-`99`
     *   - Default value: `50`
     * 
     */
    @Import(name="tunnelBandwidth")
    private @Nullable Output<Integer> tunnelBandwidth;

    /**
     * @return Tunnels Bandwidth Percent
     *   - Range: `1`-`99`
     *   - Default value: `50`
     * 
     */
    public Optional<Output<Integer>> tunnelBandwidth() {
        return Optional.ofNullable(this.tunnelBandwidth);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelBandwidthVariable")
    private @Nullable Output<String> tunnelBandwidthVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelBandwidthVariable() {
        return Optional.ofNullable(this.tunnelBandwidthVariable);
    }

    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowAll")
    private @Nullable Output<Boolean> tunnelInterfaceAllowAll;

    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowAll() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAll);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowAllVariable")
    private @Nullable Output<String> tunnelInterfaceAllowAllVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowAllVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowAllVariable);
    }

    /**
     * Allow/deny BGP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowBgp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowBgp;

    /**
     * @return Allow/deny BGP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowBgp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowBgpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowBgpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowBgpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowBgpVariable);
    }

    /**
     * Allow/Deny DHCP
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDhcp;

    /**
     * @return Allow/Deny DHCP
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDhcp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDhcpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDhcpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDhcpVariable);
    }

    /**
     * Allow/Deny DNS
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowDns")
    private @Nullable Output<Boolean> tunnelInterfaceAllowDns;

    /**
     * @return Allow/Deny DNS
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowDns() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDns);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowDnsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowDnsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowDnsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowDnsVariable);
    }

    /**
     * Allow/Deny Https
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowHttps")
    private @Nullable Output<Boolean> tunnelInterfaceAllowHttps;

    /**
     * @return Allow/Deny Https
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowHttps() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttps);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowHttpsVariable")
    private @Nullable Output<String> tunnelInterfaceAllowHttpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowHttpsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowHttpsVariable);
    }

    /**
     * Allow/Deny ICMP
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowIcmp;

    /**
     * @return Allow/Deny ICMP
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowIcmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowIcmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowIcmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowIcmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowIcmpVariable);
    }

    /**
     * Allow/Deny NETCONF
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNetconf;

    /**
     * @return Allow/Deny NETCONF
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNetconf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNetconfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNetconfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNetconfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNetconfVariable);
    }

    /**
     * Allow/Deny NTP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowNtp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowNtp;

    /**
     * @return Allow/Deny NTP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowNtp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowNtpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowNtpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowNtpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowNtpVariable);
    }

    /**
     * Allow/Deny OSPF
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowOspf")
    private @Nullable Output<Boolean> tunnelInterfaceAllowOspf;

    /**
     * @return Allow/Deny OSPF
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowOspf() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspf);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowOspfVariable")
    private @Nullable Output<String> tunnelInterfaceAllowOspfVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowOspfVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowOspfVariable);
    }

    /**
     * Allow/Deny SNMP
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmp")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSnmp;

    /**
     * @return Allow/Deny SNMP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSnmp() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSnmpVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSnmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSnmpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSnmpVariable);
    }

    /**
     * Allow/Deny SSH
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowSsh")
    private @Nullable Output<Boolean> tunnelInterfaceAllowSsh;

    /**
     * @return Allow/Deny SSH
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowSsh() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSsh);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowSshVariable")
    private @Nullable Output<String> tunnelInterfaceAllowSshVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowSshVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowSshVariable);
    }

    /**
     * Allow/Deny STUN
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceAllowStun")
    private @Nullable Output<Boolean> tunnelInterfaceAllowStun;

    /**
     * @return Allow/Deny STUN
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceAllowStun() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStun);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceAllowStunVariable")
    private @Nullable Output<String> tunnelInterfaceAllowStunVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceAllowStunVariable() {
        return Optional.ofNullable(this.tunnelInterfaceAllowStunVariable);
    }

    /**
     * Bind loopback tunnel interface to a physical interface
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnel")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnel;

    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnel() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnel);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBindLoopbackTunnelVariable")
    private @Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBindLoopbackTunnelVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBindLoopbackTunnelVariable);
    }

    /**
     * Set TLOC as border TLOC
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceBorder")
    private @Nullable Output<Boolean> tunnelInterfaceBorder;

    /**
     * @return Set TLOC as border TLOC
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceBorder() {
        return Optional.ofNullable(this.tunnelInterfaceBorder);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceBorderVariable")
    private @Nullable Output<String> tunnelInterfaceBorderVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceBorderVariable() {
        return Optional.ofNullable(this.tunnelInterfaceBorderVariable);
    }

    /**
     * Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceCarrier")
    private @Nullable Output<String> tunnelInterfaceCarrier;

    /**
     * @return Set carrier for TLOC
     *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
     *   - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrier() {
        return Optional.ofNullable(this.tunnelInterfaceCarrier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceCarrierVariable")
    private @Nullable Output<String> tunnelInterfaceCarrierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceCarrierVariable() {
        return Optional.ofNullable(this.tunnelInterfaceCarrierVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragment")
    private @Nullable Output<Boolean> tunnelInterfaceClearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceClearDontFragment() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceClearDontFragmentVariable")
    private @Nullable Output<String> tunnelInterfaceClearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceClearDontFragmentVariable() {
        return Optional.ofNullable(this.tunnelInterfaceClearDontFragmentVariable);
    }

    /**
     * Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     * 
     */
    @Import(name="tunnelInterfaceColor")
    private @Nullable Output<String> tunnelInterfaceColor;

    /**
     * @return Set color for TLOC
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     *   - Default value: `default`
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColor() {
        return Optional.ofNullable(this.tunnelInterfaceColor);
    }

    /**
     * Restrict this TLOC behavior
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceColorRestrict")
    private @Nullable Output<Boolean> tunnelInterfaceColorRestrict;

    /**
     * @return Restrict this TLOC behavior
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceColorRestrict() {
        return Optional.ofNullable(this.tunnelInterfaceColorRestrict);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceColorRestrictVariable")
    private @Nullable Output<String> tunnelInterfaceColorRestrictVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColorRestrictVariable() {
        return Optional.ofNullable(this.tunnelInterfaceColorRestrictVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceColorVariable")
    private @Nullable Output<String> tunnelInterfaceColorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceColorVariable() {
        return Optional.ofNullable(this.tunnelInterfaceColorVariable);
    }

    /**
     * Allow Control Connection
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfaceControlConnections")
    private @Nullable Output<Boolean> tunnelInterfaceControlConnections;

    /**
     * @return Allow Control Connection
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceControlConnections() {
        return Optional.ofNullable(this.tunnelInterfaceControlConnections);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceControlConnectionsVariable")
    private @Nullable Output<String> tunnelInterfaceControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceControlConnectionsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceControlConnectionsVariable);
    }

    /**
     * Encapsulation for TLOC
     * 
     */
    @Import(name="tunnelInterfaceEncapsulations")
    private @Nullable Output<List<CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations;

    /**
     * @return Encapsulation for TLOC
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs>>> tunnelInterfaceEncapsulations() {
        return Optional.ofNullable(this.tunnelInterfaceEncapsulations);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupListVariable")
    private @Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceExcludeControllerGroupListVariable() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupListVariable);
    }

    /**
     * Exclude the following controller groups defined in this list
     * 
     */
    @Import(name="tunnelInterfaceExcludeControllerGroupLists")
    private @Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists;

    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceExcludeControllerGroupLists() {
        return Optional.ofNullable(this.tunnelInterfaceExcludeControllerGroupLists);
    }

    /**
     * Extend the TLOC to a remote node over GRE tunnel
     * 
     */
    @Import(name="tunnelInterfaceGreTunnelDestinationIp")
    private @Nullable Output<String> tunnelInterfaceGreTunnelDestinationIp;

    /**
     * @return Extend the TLOC to a remote node over GRE tunnel
     * 
     */
    public Optional<Output<String>> tunnelInterfaceGreTunnelDestinationIp() {
        return Optional.ofNullable(this.tunnelInterfaceGreTunnelDestinationIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceGreTunnelDestinationIpVariable")
    private @Nullable Output<String> tunnelInterfaceGreTunnelDestinationIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceGreTunnelDestinationIpVariable() {
        return Optional.ofNullable(this.tunnelInterfaceGreTunnelDestinationIpVariable);
    }

    /**
     * List of groups
     * 
     */
    @Import(name="tunnelInterfaceGroups")
    private @Nullable Output<List<Integer>> tunnelInterfaceGroups;

    /**
     * @return List of groups
     * 
     */
    public Optional<Output<List<Integer>>> tunnelInterfaceGroups() {
        return Optional.ofNullable(this.tunnelInterfaceGroups);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceGroupsVariable")
    private @Nullable Output<String> tunnelInterfaceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceGroupsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceGroupsVariable);
    }

    /**
     * Set time period of control hello packets &lt;100..600000&gt; milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     * 
     */
    @Import(name="tunnelInterfaceHelloInterval")
    private @Nullable Output<Integer> tunnelInterfaceHelloInterval;

    /**
     * @return Set time period of control hello packets &lt;100..600000&gt; milli seconds
     *   - Range: `100`-`600000`
     *   - Default value: `1000`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloInterval() {
        return Optional.ofNullable(this.tunnelInterfaceHelloInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceHelloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloIntervalVariable);
    }

    /**
     * Set tolerance of control hello packets &lt;12..6000&gt; seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     * 
     */
    @Import(name="tunnelInterfaceHelloTolerance")
    private @Nullable Output<Integer> tunnelInterfaceHelloTolerance;

    /**
     * @return Set tolerance of control hello packets &lt;12..6000&gt; seconds
     *   - Range: `12`-`6000`
     *   - Default value: `12`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceHelloTolerance() {
        return Optional.ofNullable(this.tunnelInterfaceHelloTolerance);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceHelloToleranceVariable")
    private @Nullable Output<String> tunnelInterfaceHelloToleranceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceHelloToleranceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceHelloToleranceVariable);
    }

    /**
     * Set TLOC as last resort
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuit")
    private @Nullable Output<Boolean> tunnelInterfaceLastResortCircuit;

    /**
     * @return Set TLOC as last resort
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLastResortCircuit() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuit);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLastResortCircuitVariable")
    private @Nullable Output<String> tunnelInterfaceLastResortCircuitVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLastResortCircuitVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLastResortCircuitVariable);
    }

    /**
     * Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLink")
    private @Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink;

    /**
     * @return Set the interface as a low-bandwidth circuit
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceLowBandwidthLink() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLink);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceLowBandwidthLinkVariable")
    private @Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceLowBandwidthLinkVariable() {
        return Optional.ofNullable(this.tunnelInterfaceLowBandwidthLinkVariable);
    }

    /**
     * Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     * 
     */
    @Import(name="tunnelInterfaceMaxControlConnections")
    private @Nullable Output<Integer> tunnelInterfaceMaxControlConnections;

    /**
     * @return Set the maximum number of control connections for this TLOC
     *   - Range: `0`-`100`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceMaxControlConnections() {
        return Optional.ofNullable(this.tunnelInterfaceMaxControlConnections);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceMaxControlConnectionsVariable")
    private @Nullable Output<String> tunnelInterfaceMaxControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceMaxControlConnectionsVariable() {
        return Optional.ofNullable(this.tunnelInterfaceMaxControlConnectionsVariable);
    }

    /**
     * Set time period of nat refresh packets &lt;1...60&gt; seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshInterval")
    private @Nullable Output<Integer> tunnelInterfaceNatRefreshInterval;

    /**
     * @return Set time period of nat refresh packets &lt;1...60&gt; seconds
     *   - Range: `1`-`60`
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceNatRefreshInterval() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNatRefreshIntervalVariable")
    private @Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNatRefreshIntervalVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNatRefreshIntervalVariable);
    }

    /**
     * Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceNetworkBroadcast")
    private @Nullable Output<Boolean> tunnelInterfaceNetworkBroadcast;

    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceNetworkBroadcast() {
        return Optional.ofNullable(this.tunnelInterfaceNetworkBroadcast);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceNetworkBroadcastVariable")
    private @Nullable Output<String> tunnelInterfaceNetworkBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceNetworkBroadcastVariable() {
        return Optional.ofNullable(this.tunnelInterfaceNetworkBroadcastVariable);
    }

    /**
     * Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     * 
     */
    @Import(name="tunnelInterfacePortHop")
    private @Nullable Output<Boolean> tunnelInterfacePortHop;

    /**
     * @return Disallow port hopping on the tunnel interface
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfacePortHop() {
        return Optional.ofNullable(this.tunnelInterfacePortHop);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfacePortHopVariable")
    private @Nullable Output<String> tunnelInterfacePortHopVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfacePortHopVariable() {
        return Optional.ofNullable(this.tunnelInterfacePortHopVariable);
    }

    /**
     * CTS SGT Propagation configuration
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfacePropagateSgt")
    private @Nullable Output<Boolean> tunnelInterfacePropagateSgt;

    /**
     * @return CTS SGT Propagation configuration
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfacePropagateSgt() {
        return Optional.ofNullable(this.tunnelInterfacePropagateSgt);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfacePropagateSgtVariable")
    private @Nullable Output<String> tunnelInterfacePropagateSgtVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfacePropagateSgtVariable() {
        return Optional.ofNullable(this.tunnelInterfacePropagateSgtVariable);
    }

    /**
     * Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMss")
    private @Nullable Output<Integer> tunnelInterfaceTunnelTcpMss;

    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceTunnelTcpMss() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceTunnelTcpMssVariable")
    private @Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceTunnelTcpMssVariable() {
        return Optional.ofNullable(this.tunnelInterfaceTunnelTcpMssVariable);
    }

    /**
     * Put this wan interface in STUN mode only
     *   - Default value: `false`
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServer")
    private @Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer;

    /**
     * @return Put this wan interface in STUN mode only
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> tunnelInterfaceVbondAsStunServer() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServer);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVbondAsStunServerVariable")
    private @Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVbondAsStunServerVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVbondAsStunServerVariable);
    }

    /**
     * Set interface preference for control connection to vManage &lt;0..8&gt;
     *   - Range: `0`-`8`
     *   - Default value: `5`
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreference")
    private @Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference;

    /**
     * @return Set interface preference for control connection to vManage &lt;0..8&gt;
     *   - Range: `0`-`8`
     *   - Default value: `5`
     * 
     */
    public Optional<Output<Integer>> tunnelInterfaceVmanageConnectionPreference() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreference);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelInterfaceVmanageConnectionPreferenceVariable")
    private @Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return Optional.ofNullable(this.tunnelInterfaceVmanageConnectionPreferenceVariable);
    }

    /**
     * Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     * 
     */
    @Import(name="tunnelQosMode")
    private @Nullable Output<String> tunnelQosMode;

    /**
     * @return Set tunnel QoS mode
     *   - Choices: `hub`, `spoke`
     * 
     */
    public Optional<Output<String>> tunnelQosMode() {
        return Optional.ofNullable(this.tunnelQosMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelQosModeVariable")
    private @Nullable Output<String> tunnelQosModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelQosModeVariable() {
        return Optional.ofNullable(this.tunnelQosModeVariable);
    }

    /**
     * Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     * 
     */
    @Import(name="udpTimeout")
    private @Nullable Output<Integer> udpTimeout;

    /**
     * @return Set NAT UDP session timeout, in minutes
     *   - Range: `1`-`8947`
     *   - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> udpTimeout() {
        return Optional.ofNullable(this.udpTimeout);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="udpTimeoutVariable")
    private @Nullable Output<String> udpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> udpTimeoutVariable() {
        return Optional.ofNullable(this.udpTimeoutVariable);
    }

    private CiscoVpnInterfaceFeatureTemplateArgs() {}

    private CiscoVpnInterfaceFeatureTemplateArgs(CiscoVpnInterfaceFeatureTemplateArgs $) {
        this.accessLists = $.accessLists;
        this.address = $.address;
        this.addressVariable = $.addressVariable;
        this.arpTimeout = $.arpTimeout;
        this.arpTimeoutVariable = $.arpTimeoutVariable;
        this.autoBandwidthDetect = $.autoBandwidthDetect;
        this.autoBandwidthDetectVariable = $.autoBandwidthDetectVariable;
        this.autonegotiate = $.autonegotiate;
        this.autonegotiateVariable = $.autonegotiateVariable;
        this.bandwidthDownstream = $.bandwidthDownstream;
        this.bandwidthDownstreamVariable = $.bandwidthDownstreamVariable;
        this.bandwidthUpstream = $.bandwidthUpstream;
        this.bandwidthUpstreamVariable = $.bandwidthUpstreamVariable;
        this.blockNonSourceIp = $.blockNonSourceIp;
        this.blockNonSourceIpVariable = $.blockNonSourceIpVariable;
        this.coreRegion = $.coreRegion;
        this.coreRegionVariable = $.coreRegionVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.dhcp = $.dhcp;
        this.dhcpDistance = $.dhcpDistance;
        this.dhcpDistanceVariable = $.dhcpDistanceVariable;
        this.dhcpVariable = $.dhcpVariable;
        this.dhcpv6 = $.dhcpv6;
        this.dhcpv6Variable = $.dhcpv6Variable;
        this.duplex = $.duplex;
        this.duplexVariable = $.duplexVariable;
        this.enableCoreRegion = $.enableCoreRegion;
        this.enableSgt = $.enableSgt;
        this.greTunnelSourceIp = $.greTunnelSourceIp;
        this.greTunnelSourceIpVariable = $.greTunnelSourceIpVariable;
        this.greTunnelXconnect = $.greTunnelXconnect;
        this.greTunnelXconnectVariable = $.greTunnelXconnectVariable;
        this.icmpRedirectDisable = $.icmpRedirectDisable;
        this.icmpRedirectDisableVariable = $.icmpRedirectDisableVariable;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.interfaceMtu = $.interfaceMtu;
        this.interfaceMtuVariable = $.interfaceMtuVariable;
        this.interfaceName = $.interfaceName;
        this.interfaceNameVariable = $.interfaceNameVariable;
        this.ipDirectedBroadcast = $.ipDirectedBroadcast;
        this.ipDirectedBroadcastVariable = $.ipDirectedBroadcastVariable;
        this.ipMtu = $.ipMtu;
        this.ipMtuVariable = $.ipMtuVariable;
        this.iperfServer = $.iperfServer;
        this.iperfServerVariable = $.iperfServerVariable;
        this.ipv4DhcpHelperVariable = $.ipv4DhcpHelperVariable;
        this.ipv4DhcpHelpers = $.ipv4DhcpHelpers;
        this.ipv4SecondaryAddresses = $.ipv4SecondaryAddresses;
        this.ipv4Vrrps = $.ipv4Vrrps;
        this.ipv6AccessLists = $.ipv6AccessLists;
        this.ipv6Address = $.ipv6Address;
        this.ipv6AddressVariable = $.ipv6AddressVariable;
        this.ipv6DhcpHelpers = $.ipv6DhcpHelpers;
        this.ipv6Nat = $.ipv6Nat;
        this.ipv6NatVariable = $.ipv6NatVariable;
        this.ipv6SecondaryAddresses = $.ipv6SecondaryAddresses;
        this.ipv6Vrrps = $.ipv6Vrrps;
        this.loadInterval = $.loadInterval;
        this.loadIntervalVariable = $.loadIntervalVariable;
        this.macAddress = $.macAddress;
        this.macAddressVariable = $.macAddressVariable;
        this.mediaType = $.mediaType;
        this.mediaTypeVariable = $.mediaTypeVariable;
        this.name = $.name;
        this.nat = $.nat;
        this.nat64Interface = $.nat64Interface;
        this.nat66Interface = $.nat66Interface;
        this.natInsideSourceLoopbackInterface = $.natInsideSourceLoopbackInterface;
        this.natInsideSourceLoopbackInterfaceVariable = $.natInsideSourceLoopbackInterfaceVariable;
        this.natOverload = $.natOverload;
        this.natOverloadVariable = $.natOverloadVariable;
        this.natPoolPrefixLength = $.natPoolPrefixLength;
        this.natPoolPrefixLengthVariable = $.natPoolPrefixLengthVariable;
        this.natPoolRangeEnd = $.natPoolRangeEnd;
        this.natPoolRangeEndVariable = $.natPoolRangeEndVariable;
        this.natPoolRangeStart = $.natPoolRangeStart;
        this.natPoolRangeStartVariable = $.natPoolRangeStartVariable;
        this.natType = $.natType;
        this.natTypeVariable = $.natTypeVariable;
        this.poe = $.poe;
        this.poeVariable = $.poeVariable;
        this.propagateSgt = $.propagateSgt;
        this.qosAdaptiveBandwidthDownstream = $.qosAdaptiveBandwidthDownstream;
        this.qosAdaptiveBandwidthDownstreamVariable = $.qosAdaptiveBandwidthDownstreamVariable;
        this.qosAdaptiveBandwidthUpstream = $.qosAdaptiveBandwidthUpstream;
        this.qosAdaptiveBandwidthUpstreamVariable = $.qosAdaptiveBandwidthUpstreamVariable;
        this.qosAdaptiveMaxDownstream = $.qosAdaptiveMaxDownstream;
        this.qosAdaptiveMaxDownstreamVariable = $.qosAdaptiveMaxDownstreamVariable;
        this.qosAdaptiveMaxUpstream = $.qosAdaptiveMaxUpstream;
        this.qosAdaptiveMaxUpstreamVariable = $.qosAdaptiveMaxUpstreamVariable;
        this.qosAdaptiveMinDownstream = $.qosAdaptiveMinDownstream;
        this.qosAdaptiveMinDownstreamVariable = $.qosAdaptiveMinDownstreamVariable;
        this.qosAdaptiveMinUpstream = $.qosAdaptiveMinUpstream;
        this.qosAdaptiveMinUpstreamVariable = $.qosAdaptiveMinUpstreamVariable;
        this.qosAdaptivePeriod = $.qosAdaptivePeriod;
        this.qosAdaptivePeriodVariable = $.qosAdaptivePeriodVariable;
        this.qosMap = $.qosMap;
        this.qosMapVariable = $.qosMapVariable;
        this.qosMapVpn = $.qosMapVpn;
        this.qosMapVpnVariable = $.qosMapVpnVariable;
        this.rewriteRuleName = $.rewriteRuleName;
        this.rewriteRuleNameVariable = $.rewriteRuleNameVariable;
        this.secondaryRegion = $.secondaryRegion;
        this.secondaryRegionVariable = $.secondaryRegionVariable;
        this.sgtEnforcement = $.sgtEnforcement;
        this.sgtEnforcementSgt = $.sgtEnforcementSgt;
        this.sgtEnforcementSgtVariable = $.sgtEnforcementSgtVariable;
        this.shapingRate = $.shapingRate;
        this.shapingRateVariable = $.shapingRateVariable;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.speed = $.speed;
        this.speedVariable = $.speedVariable;
        this.staticArps = $.staticArps;
        this.staticNat66Entries = $.staticNat66Entries;
        this.staticNatEntries = $.staticNatEntries;
        this.staticPortForwardEntries = $.staticPortForwardEntries;
        this.staticSgt = $.staticSgt;
        this.staticSgtTrusted = $.staticSgtTrusted;
        this.staticSgtVariable = $.staticSgtVariable;
        this.tcpMssAdjust = $.tcpMssAdjust;
        this.tcpMssAdjustVariable = $.tcpMssAdjustVariable;
        this.tcpTimeout = $.tcpTimeout;
        this.tcpTimeoutVariable = $.tcpTimeoutVariable;
        this.tlocExtension = $.tlocExtension;
        this.tlocExtensionVariable = $.tlocExtensionVariable;
        this.trackerVariable = $.trackerVariable;
        this.trackers = $.trackers;
        this.tunnelBandwidth = $.tunnelBandwidth;
        this.tunnelBandwidthVariable = $.tunnelBandwidthVariable;
        this.tunnelInterfaceAllowAll = $.tunnelInterfaceAllowAll;
        this.tunnelInterfaceAllowAllVariable = $.tunnelInterfaceAllowAllVariable;
        this.tunnelInterfaceAllowBgp = $.tunnelInterfaceAllowBgp;
        this.tunnelInterfaceAllowBgpVariable = $.tunnelInterfaceAllowBgpVariable;
        this.tunnelInterfaceAllowDhcp = $.tunnelInterfaceAllowDhcp;
        this.tunnelInterfaceAllowDhcpVariable = $.tunnelInterfaceAllowDhcpVariable;
        this.tunnelInterfaceAllowDns = $.tunnelInterfaceAllowDns;
        this.tunnelInterfaceAllowDnsVariable = $.tunnelInterfaceAllowDnsVariable;
        this.tunnelInterfaceAllowHttps = $.tunnelInterfaceAllowHttps;
        this.tunnelInterfaceAllowHttpsVariable = $.tunnelInterfaceAllowHttpsVariable;
        this.tunnelInterfaceAllowIcmp = $.tunnelInterfaceAllowIcmp;
        this.tunnelInterfaceAllowIcmpVariable = $.tunnelInterfaceAllowIcmpVariable;
        this.tunnelInterfaceAllowNetconf = $.tunnelInterfaceAllowNetconf;
        this.tunnelInterfaceAllowNetconfVariable = $.tunnelInterfaceAllowNetconfVariable;
        this.tunnelInterfaceAllowNtp = $.tunnelInterfaceAllowNtp;
        this.tunnelInterfaceAllowNtpVariable = $.tunnelInterfaceAllowNtpVariable;
        this.tunnelInterfaceAllowOspf = $.tunnelInterfaceAllowOspf;
        this.tunnelInterfaceAllowOspfVariable = $.tunnelInterfaceAllowOspfVariable;
        this.tunnelInterfaceAllowSnmp = $.tunnelInterfaceAllowSnmp;
        this.tunnelInterfaceAllowSnmpVariable = $.tunnelInterfaceAllowSnmpVariable;
        this.tunnelInterfaceAllowSsh = $.tunnelInterfaceAllowSsh;
        this.tunnelInterfaceAllowSshVariable = $.tunnelInterfaceAllowSshVariable;
        this.tunnelInterfaceAllowStun = $.tunnelInterfaceAllowStun;
        this.tunnelInterfaceAllowStunVariable = $.tunnelInterfaceAllowStunVariable;
        this.tunnelInterfaceBindLoopbackTunnel = $.tunnelInterfaceBindLoopbackTunnel;
        this.tunnelInterfaceBindLoopbackTunnelVariable = $.tunnelInterfaceBindLoopbackTunnelVariable;
        this.tunnelInterfaceBorder = $.tunnelInterfaceBorder;
        this.tunnelInterfaceBorderVariable = $.tunnelInterfaceBorderVariable;
        this.tunnelInterfaceCarrier = $.tunnelInterfaceCarrier;
        this.tunnelInterfaceCarrierVariable = $.tunnelInterfaceCarrierVariable;
        this.tunnelInterfaceClearDontFragment = $.tunnelInterfaceClearDontFragment;
        this.tunnelInterfaceClearDontFragmentVariable = $.tunnelInterfaceClearDontFragmentVariable;
        this.tunnelInterfaceColor = $.tunnelInterfaceColor;
        this.tunnelInterfaceColorRestrict = $.tunnelInterfaceColorRestrict;
        this.tunnelInterfaceColorRestrictVariable = $.tunnelInterfaceColorRestrictVariable;
        this.tunnelInterfaceColorVariable = $.tunnelInterfaceColorVariable;
        this.tunnelInterfaceControlConnections = $.tunnelInterfaceControlConnections;
        this.tunnelInterfaceControlConnectionsVariable = $.tunnelInterfaceControlConnectionsVariable;
        this.tunnelInterfaceEncapsulations = $.tunnelInterfaceEncapsulations;
        this.tunnelInterfaceExcludeControllerGroupListVariable = $.tunnelInterfaceExcludeControllerGroupListVariable;
        this.tunnelInterfaceExcludeControllerGroupLists = $.tunnelInterfaceExcludeControllerGroupLists;
        this.tunnelInterfaceGreTunnelDestinationIp = $.tunnelInterfaceGreTunnelDestinationIp;
        this.tunnelInterfaceGreTunnelDestinationIpVariable = $.tunnelInterfaceGreTunnelDestinationIpVariable;
        this.tunnelInterfaceGroups = $.tunnelInterfaceGroups;
        this.tunnelInterfaceGroupsVariable = $.tunnelInterfaceGroupsVariable;
        this.tunnelInterfaceHelloInterval = $.tunnelInterfaceHelloInterval;
        this.tunnelInterfaceHelloIntervalVariable = $.tunnelInterfaceHelloIntervalVariable;
        this.tunnelInterfaceHelloTolerance = $.tunnelInterfaceHelloTolerance;
        this.tunnelInterfaceHelloToleranceVariable = $.tunnelInterfaceHelloToleranceVariable;
        this.tunnelInterfaceLastResortCircuit = $.tunnelInterfaceLastResortCircuit;
        this.tunnelInterfaceLastResortCircuitVariable = $.tunnelInterfaceLastResortCircuitVariable;
        this.tunnelInterfaceLowBandwidthLink = $.tunnelInterfaceLowBandwidthLink;
        this.tunnelInterfaceLowBandwidthLinkVariable = $.tunnelInterfaceLowBandwidthLinkVariable;
        this.tunnelInterfaceMaxControlConnections = $.tunnelInterfaceMaxControlConnections;
        this.tunnelInterfaceMaxControlConnectionsVariable = $.tunnelInterfaceMaxControlConnectionsVariable;
        this.tunnelInterfaceNatRefreshInterval = $.tunnelInterfaceNatRefreshInterval;
        this.tunnelInterfaceNatRefreshIntervalVariable = $.tunnelInterfaceNatRefreshIntervalVariable;
        this.tunnelInterfaceNetworkBroadcast = $.tunnelInterfaceNetworkBroadcast;
        this.tunnelInterfaceNetworkBroadcastVariable = $.tunnelInterfaceNetworkBroadcastVariable;
        this.tunnelInterfacePortHop = $.tunnelInterfacePortHop;
        this.tunnelInterfacePortHopVariable = $.tunnelInterfacePortHopVariable;
        this.tunnelInterfacePropagateSgt = $.tunnelInterfacePropagateSgt;
        this.tunnelInterfacePropagateSgtVariable = $.tunnelInterfacePropagateSgtVariable;
        this.tunnelInterfaceTunnelTcpMss = $.tunnelInterfaceTunnelTcpMss;
        this.tunnelInterfaceTunnelTcpMssVariable = $.tunnelInterfaceTunnelTcpMssVariable;
        this.tunnelInterfaceVbondAsStunServer = $.tunnelInterfaceVbondAsStunServer;
        this.tunnelInterfaceVbondAsStunServerVariable = $.tunnelInterfaceVbondAsStunServerVariable;
        this.tunnelInterfaceVmanageConnectionPreference = $.tunnelInterfaceVmanageConnectionPreference;
        this.tunnelInterfaceVmanageConnectionPreferenceVariable = $.tunnelInterfaceVmanageConnectionPreferenceVariable;
        this.tunnelQosMode = $.tunnelQosMode;
        this.tunnelQosModeVariable = $.tunnelQosModeVariable;
        this.udpTimeout = $.udpTimeout;
        this.udpTimeoutVariable = $.udpTimeoutVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnInterfaceFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnInterfaceFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoVpnInterfaceFeatureTemplateArgs();
        }

        public Builder(CiscoVpnInterfaceFeatureTemplateArgs defaults) {
            $ = new CiscoVpnInterfaceFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateAccessListArgs>> accessLists) {
            $.accessLists = accessLists;
            return this;
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(List<CiscoVpnInterfaceFeatureTemplateAccessListArgs> accessLists) {
            return accessLists(Output.of(accessLists));
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(CiscoVpnInterfaceFeatureTemplateAccessListArgs... accessLists) {
            return accessLists(List.of(accessLists));
        }

        /**
         * @param address Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param addressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder addressVariable(@Nullable Output<String> addressVariable) {
            $.addressVariable = addressVariable;
            return this;
        }

        /**
         * @param addressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder addressVariable(String addressVariable) {
            return addressVariable(Output.of(addressVariable));
        }

        /**
         * @param arpTimeout Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
         *   - Range: `0`-`2147483`
         *   - Default value: `1200`
         * 
         * @return builder
         * 
         */
        public Builder arpTimeout(@Nullable Output<Integer> arpTimeout) {
            $.arpTimeout = arpTimeout;
            return this;
        }

        /**
         * @param arpTimeout Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds
         *   - Range: `0`-`2147483`
         *   - Default value: `1200`
         * 
         * @return builder
         * 
         */
        public Builder arpTimeout(Integer arpTimeout) {
            return arpTimeout(Output.of(arpTimeout));
        }

        /**
         * @param arpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder arpTimeoutVariable(@Nullable Output<String> arpTimeoutVariable) {
            $.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }

        /**
         * @param arpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            return arpTimeoutVariable(Output.of(arpTimeoutVariable));
        }

        /**
         * @param autoBandwidthDetect Interface auto detect bandwidth
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder autoBandwidthDetect(@Nullable Output<Boolean> autoBandwidthDetect) {
            $.autoBandwidthDetect = autoBandwidthDetect;
            return this;
        }

        /**
         * @param autoBandwidthDetect Interface auto detect bandwidth
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder autoBandwidthDetect(Boolean autoBandwidthDetect) {
            return autoBandwidthDetect(Output.of(autoBandwidthDetect));
        }

        /**
         * @param autoBandwidthDetectVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder autoBandwidthDetectVariable(@Nullable Output<String> autoBandwidthDetectVariable) {
            $.autoBandwidthDetectVariable = autoBandwidthDetectVariable;
            return this;
        }

        /**
         * @param autoBandwidthDetectVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder autoBandwidthDetectVariable(String autoBandwidthDetectVariable) {
            return autoBandwidthDetectVariable(Output.of(autoBandwidthDetectVariable));
        }

        /**
         * @param autonegotiate Link autonegotiation
         * 
         * @return builder
         * 
         */
        public Builder autonegotiate(@Nullable Output<Boolean> autonegotiate) {
            $.autonegotiate = autonegotiate;
            return this;
        }

        /**
         * @param autonegotiate Link autonegotiation
         * 
         * @return builder
         * 
         */
        public Builder autonegotiate(Boolean autonegotiate) {
            return autonegotiate(Output.of(autonegotiate));
        }

        /**
         * @param autonegotiateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder autonegotiateVariable(@Nullable Output<String> autonegotiateVariable) {
            $.autonegotiateVariable = autonegotiateVariable;
            return this;
        }

        /**
         * @param autonegotiateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder autonegotiateVariable(String autonegotiateVariable) {
            return autonegotiateVariable(Output.of(autonegotiateVariable));
        }

        /**
         * @param bandwidthDownstream Interface downstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstream(@Nullable Output<Integer> bandwidthDownstream) {
            $.bandwidthDownstream = bandwidthDownstream;
            return this;
        }

        /**
         * @param bandwidthDownstream Interface downstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            return bandwidthDownstream(Output.of(bandwidthDownstream));
        }

        /**
         * @param bandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstreamVariable(@Nullable Output<String> bandwidthDownstreamVariable) {
            $.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }

        /**
         * @param bandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            return bandwidthDownstreamVariable(Output.of(bandwidthDownstreamVariable));
        }

        /**
         * @param bandwidthUpstream Interface upstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstream(@Nullable Output<Integer> bandwidthUpstream) {
            $.bandwidthUpstream = bandwidthUpstream;
            return this;
        }

        /**
         * @param bandwidthUpstream Interface upstream bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstream(Integer bandwidthUpstream) {
            return bandwidthUpstream(Output.of(bandwidthUpstream));
        }

        /**
         * @param bandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstreamVariable(@Nullable Output<String> bandwidthUpstreamVariable) {
            $.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            return this;
        }

        /**
         * @param bandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthUpstreamVariable(String bandwidthUpstreamVariable) {
            return bandwidthUpstreamVariable(Output.of(bandwidthUpstreamVariable));
        }

        /**
         * @param blockNonSourceIp Block packets originating from IP address that is not from this source
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder blockNonSourceIp(@Nullable Output<Boolean> blockNonSourceIp) {
            $.blockNonSourceIp = blockNonSourceIp;
            return this;
        }

        /**
         * @param blockNonSourceIp Block packets originating from IP address that is not from this source
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder blockNonSourceIp(Boolean blockNonSourceIp) {
            return blockNonSourceIp(Output.of(blockNonSourceIp));
        }

        /**
         * @param blockNonSourceIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder blockNonSourceIpVariable(@Nullable Output<String> blockNonSourceIpVariable) {
            $.blockNonSourceIpVariable = blockNonSourceIpVariable;
            return this;
        }

        /**
         * @param blockNonSourceIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder blockNonSourceIpVariable(String blockNonSourceIpVariable) {
            return blockNonSourceIpVariable(Output.of(blockNonSourceIpVariable));
        }

        /**
         * @param coreRegion Enable core region
         *   - Choices: `core`, `core-shared`
         *   - Default value: `core`
         * 
         * @return builder
         * 
         */
        public Builder coreRegion(@Nullable Output<String> coreRegion) {
            $.coreRegion = coreRegion;
            return this;
        }

        /**
         * @param coreRegion Enable core region
         *   - Choices: `core`, `core-shared`
         *   - Default value: `core`
         * 
         * @return builder
         * 
         */
        public Builder coreRegion(String coreRegion) {
            return coreRegion(Output.of(coreRegion));
        }

        /**
         * @param coreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder coreRegionVariable(@Nullable Output<String> coreRegionVariable) {
            $.coreRegionVariable = coreRegionVariable;
            return this;
        }

        /**
         * @param coreRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder coreRegionVariable(String coreRegionVariable) {
            return coreRegionVariable(Output.of(coreRegionVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param dhcp Enable DHCP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp Enable DHCP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param dhcpDistance Set administrative distance for DHCP default route
         *   - Range: `1`-`65536`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder dhcpDistance(@Nullable Output<Integer> dhcpDistance) {
            $.dhcpDistance = dhcpDistance;
            return this;
        }

        /**
         * @param dhcpDistance Set administrative distance for DHCP default route
         *   - Range: `1`-`65536`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder dhcpDistance(Integer dhcpDistance) {
            return dhcpDistance(Output.of(dhcpDistance));
        }

        /**
         * @param dhcpDistanceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dhcpDistanceVariable(@Nullable Output<String> dhcpDistanceVariable) {
            $.dhcpDistanceVariable = dhcpDistanceVariable;
            return this;
        }

        /**
         * @param dhcpDistanceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dhcpDistanceVariable(String dhcpDistanceVariable) {
            return dhcpDistanceVariable(Output.of(dhcpDistanceVariable));
        }

        /**
         * @param dhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dhcpVariable(@Nullable Output<String> dhcpVariable) {
            $.dhcpVariable = dhcpVariable;
            return this;
        }

        /**
         * @param dhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dhcpVariable(String dhcpVariable) {
            return dhcpVariable(Output.of(dhcpVariable));
        }

        /**
         * @param dhcpv6 Enable DHCPv6
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6(@Nullable Output<Boolean> dhcpv6) {
            $.dhcpv6 = dhcpv6;
            return this;
        }

        /**
         * @param dhcpv6 Enable DHCPv6
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6(Boolean dhcpv6) {
            return dhcpv6(Output.of(dhcpv6));
        }

        /**
         * @param dhcpv6Variable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6Variable(@Nullable Output<String> dhcpv6Variable) {
            $.dhcpv6Variable = dhcpv6Variable;
            return this;
        }

        /**
         * @param dhcpv6Variable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dhcpv6Variable(String dhcpv6Variable) {
            return dhcpv6Variable(Output.of(dhcpv6Variable));
        }

        /**
         * @param duplex Duplex mode
         *   - Choices: `full`, `half`, `auto`
         * 
         * @return builder
         * 
         */
        public Builder duplex(@Nullable Output<String> duplex) {
            $.duplex = duplex;
            return this;
        }

        /**
         * @param duplex Duplex mode
         *   - Choices: `full`, `half`, `auto`
         * 
         * @return builder
         * 
         */
        public Builder duplex(String duplex) {
            return duplex(Output.of(duplex));
        }

        /**
         * @param duplexVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder duplexVariable(@Nullable Output<String> duplexVariable) {
            $.duplexVariable = duplexVariable;
            return this;
        }

        /**
         * @param duplexVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder duplexVariable(String duplexVariable) {
            return duplexVariable(Output.of(duplexVariable));
        }

        /**
         * @param enableCoreRegion Enable core region
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegion(@Nullable Output<Boolean> enableCoreRegion) {
            $.enableCoreRegion = enableCoreRegion;
            return this;
        }

        /**
         * @param enableCoreRegion Enable core region
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableCoreRegion(Boolean enableCoreRegion) {
            return enableCoreRegion(Output.of(enableCoreRegion));
        }

        /**
         * @param enableSgt Enables the interface for CTS SGT authorization and forwarding.
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableSgt(@Nullable Output<Boolean> enableSgt) {
            $.enableSgt = enableSgt;
            return this;
        }

        /**
         * @param enableSgt Enables the interface for CTS SGT authorization and forwarding.
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder enableSgt(Boolean enableSgt) {
            return enableSgt(Output.of(enableSgt));
        }

        /**
         * @param greTunnelSourceIp Extend remote TLOC over a GRE tunnel to a local WAN interface
         * 
         * @return builder
         * 
         */
        public Builder greTunnelSourceIp(@Nullable Output<String> greTunnelSourceIp) {
            $.greTunnelSourceIp = greTunnelSourceIp;
            return this;
        }

        /**
         * @param greTunnelSourceIp Extend remote TLOC over a GRE tunnel to a local WAN interface
         * 
         * @return builder
         * 
         */
        public Builder greTunnelSourceIp(String greTunnelSourceIp) {
            return greTunnelSourceIp(Output.of(greTunnelSourceIp));
        }

        /**
         * @param greTunnelSourceIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder greTunnelSourceIpVariable(@Nullable Output<String> greTunnelSourceIpVariable) {
            $.greTunnelSourceIpVariable = greTunnelSourceIpVariable;
            return this;
        }

        /**
         * @param greTunnelSourceIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder greTunnelSourceIpVariable(String greTunnelSourceIpVariable) {
            return greTunnelSourceIpVariable(Output.of(greTunnelSourceIpVariable));
        }

        /**
         * @param greTunnelXconnect Extend remote TLOC over a GRE tunnel to a local WAN interface
         * 
         * @return builder
         * 
         */
        public Builder greTunnelXconnect(@Nullable Output<String> greTunnelXconnect) {
            $.greTunnelXconnect = greTunnelXconnect;
            return this;
        }

        /**
         * @param greTunnelXconnect Extend remote TLOC over a GRE tunnel to a local WAN interface
         * 
         * @return builder
         * 
         */
        public Builder greTunnelXconnect(String greTunnelXconnect) {
            return greTunnelXconnect(Output.of(greTunnelXconnect));
        }

        /**
         * @param greTunnelXconnectVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder greTunnelXconnectVariable(@Nullable Output<String> greTunnelXconnectVariable) {
            $.greTunnelXconnectVariable = greTunnelXconnectVariable;
            return this;
        }

        /**
         * @param greTunnelXconnectVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder greTunnelXconnectVariable(String greTunnelXconnectVariable) {
            return greTunnelXconnectVariable(Output.of(greTunnelXconnectVariable));
        }

        /**
         * @param icmpRedirectDisable Set this option to disable the icmp/icmpv6 redirect packets
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder icmpRedirectDisable(@Nullable Output<Boolean> icmpRedirectDisable) {
            $.icmpRedirectDisable = icmpRedirectDisable;
            return this;
        }

        /**
         * @param icmpRedirectDisable Set this option to disable the icmp/icmpv6 redirect packets
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder icmpRedirectDisable(Boolean icmpRedirectDisable) {
            return icmpRedirectDisable(Output.of(icmpRedirectDisable));
        }

        /**
         * @param icmpRedirectDisableVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder icmpRedirectDisableVariable(@Nullable Output<String> icmpRedirectDisableVariable) {
            $.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            return this;
        }

        /**
         * @param icmpRedirectDisableVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder icmpRedirectDisableVariable(String icmpRedirectDisableVariable) {
            return icmpRedirectDisableVariable(Output.of(icmpRedirectDisableVariable));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param interfaceMtu Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
         *   - Range: `1500`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtu(@Nullable Output<Integer> interfaceMtu) {
            $.interfaceMtu = interfaceMtu;
            return this;
        }

        /**
         * @param interfaceMtu Interface MTU GigabitEthernet0 &lt;1500..1518&gt;, Other GigabitEthernet &lt;1500..9216&gt; in bytes
         *   - Range: `1500`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtu(Integer interfaceMtu) {
            return interfaceMtu(Output.of(interfaceMtu));
        }

        /**
         * @param interfaceMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtuVariable(@Nullable Output<String> interfaceMtuVariable) {
            $.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }

        /**
         * @param interfaceMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            return interfaceMtuVariable(Output.of(interfaceMtuVariable));
        }

        /**
         * @param interfaceName Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(@Nullable Output<String> interfaceNameVariable) {
            $.interfaceNameVariable = interfaceNameVariable;
            return this;
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            return interfaceNameVariable(Output.of(interfaceNameVariable));
        }

        /**
         * @param ipDirectedBroadcast IP Directed-Broadcast
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcast(@Nullable Output<Boolean> ipDirectedBroadcast) {
            $.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }

        /**
         * @param ipDirectedBroadcast IP Directed-Broadcast
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            return ipDirectedBroadcast(Output.of(ipDirectedBroadcast));
        }

        /**
         * @param ipDirectedBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcastVariable(@Nullable Output<String> ipDirectedBroadcastVariable) {
            $.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }

        /**
         * @param ipDirectedBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            return ipDirectedBroadcastVariable(Output.of(ipDirectedBroadcastVariable));
        }

        /**
         * @param ipMtu IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
         *   - Range: `576`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(@Nullable Output<Integer> ipMtu) {
            $.ipMtu = ipMtu;
            return this;
        }

        /**
         * @param ipMtu IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces &lt;576..2000&gt; in bytes
         *   - Range: `576`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(Integer ipMtu) {
            return ipMtu(Output.of(ipMtu));
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(@Nullable Output<String> ipMtuVariable) {
            $.ipMtuVariable = ipMtuVariable;
            return this;
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(String ipMtuVariable) {
            return ipMtuVariable(Output.of(ipMtuVariable));
        }

        /**
         * @param iperfServer Iperf server for auto bandwidth detect
         * 
         * @return builder
         * 
         */
        public Builder iperfServer(@Nullable Output<String> iperfServer) {
            $.iperfServer = iperfServer;
            return this;
        }

        /**
         * @param iperfServer Iperf server for auto bandwidth detect
         * 
         * @return builder
         * 
         */
        public Builder iperfServer(String iperfServer) {
            return iperfServer(Output.of(iperfServer));
        }

        /**
         * @param iperfServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder iperfServerVariable(@Nullable Output<String> iperfServerVariable) {
            $.iperfServerVariable = iperfServerVariable;
            return this;
        }

        /**
         * @param iperfServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder iperfServerVariable(String iperfServerVariable) {
            return iperfServerVariable(Output.of(iperfServerVariable));
        }

        /**
         * @param ipv4DhcpHelperVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4DhcpHelperVariable(@Nullable Output<String> ipv4DhcpHelperVariable) {
            $.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            return this;
        }

        /**
         * @param ipv4DhcpHelperVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4DhcpHelperVariable(String ipv4DhcpHelperVariable) {
            return ipv4DhcpHelperVariable(Output.of(ipv4DhcpHelperVariable));
        }

        /**
         * @param ipv4DhcpHelpers List of DHCP IPv4 helper addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv4DhcpHelpers(@Nullable Output<List<String>> ipv4DhcpHelpers) {
            $.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }

        /**
         * @param ipv4DhcpHelpers List of DHCP IPv4 helper addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(Output.of(ipv4DhcpHelpers));
        }

        /**
         * @param ipv4DhcpHelpers List of DHCP IPv4 helper addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }

        /**
         * @param ipv4SecondaryAddresses Assign secondary IP addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv4SecondaryAddresses(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs>> ipv4SecondaryAddresses) {
            $.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }

        /**
         * @param ipv4SecondaryAddresses Assign secondary IP addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv4SecondaryAddresses(List<CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs> ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(Output.of(ipv4SecondaryAddresses));
        }

        /**
         * @param ipv4SecondaryAddresses Assign secondary IP addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv4SecondaryAddresses(CiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddressArgs... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }

        /**
         * @param ipv4Vrrps Enable VRRP
         * 
         * @return builder
         * 
         */
        public Builder ipv4Vrrps(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs>> ipv4Vrrps) {
            $.ipv4Vrrps = ipv4Vrrps;
            return this;
        }

        /**
         * @param ipv4Vrrps Enable VRRP
         * 
         * @return builder
         * 
         */
        public Builder ipv4Vrrps(List<CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs> ipv4Vrrps) {
            return ipv4Vrrps(Output.of(ipv4Vrrps));
        }

        /**
         * @param ipv4Vrrps Enable VRRP
         * 
         * @return builder
         * 
         */
        public Builder ipv4Vrrps(CiscoVpnInterfaceFeatureTemplateIpv4VrrpArgs... ipv4Vrrps) {
            return ipv4Vrrps(List.of(ipv4Vrrps));
        }

        /**
         * @param ipv6AccessLists Apply IPv6 access list
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessLists(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs>> ipv6AccessLists) {
            $.ipv6AccessLists = ipv6AccessLists;
            return this;
        }

        /**
         * @param ipv6AccessLists Apply IPv6 access list
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessLists(List<CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs> ipv6AccessLists) {
            return ipv6AccessLists(Output.of(ipv6AccessLists));
        }

        /**
         * @param ipv6AccessLists Apply IPv6 access list
         * 
         * @return builder
         * 
         */
        public Builder ipv6AccessLists(CiscoVpnInterfaceFeatureTemplateIpv6AccessListArgs... ipv6AccessLists) {
            return ipv6AccessLists(List.of(ipv6AccessLists));
        }

        /**
         * @param ipv6Address Assign IPv6 address
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(@Nullable Output<String> ipv6Address) {
            $.ipv6Address = ipv6Address;
            return this;
        }

        /**
         * @param ipv6Address Assign IPv6 address
         * 
         * @return builder
         * 
         */
        public Builder ipv6Address(String ipv6Address) {
            return ipv6Address(Output.of(ipv6Address));
        }

        /**
         * @param ipv6AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressVariable(@Nullable Output<String> ipv6AddressVariable) {
            $.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }

        /**
         * @param ipv6AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            return ipv6AddressVariable(Output.of(ipv6AddressVariable));
        }

        /**
         * @param ipv6DhcpHelpers DHCPv6 Helper
         * 
         * @return builder
         * 
         */
        public Builder ipv6DhcpHelpers(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs>> ipv6DhcpHelpers) {
            $.ipv6DhcpHelpers = ipv6DhcpHelpers;
            return this;
        }

        /**
         * @param ipv6DhcpHelpers DHCPv6 Helper
         * 
         * @return builder
         * 
         */
        public Builder ipv6DhcpHelpers(List<CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs> ipv6DhcpHelpers) {
            return ipv6DhcpHelpers(Output.of(ipv6DhcpHelpers));
        }

        /**
         * @param ipv6DhcpHelpers DHCPv6 Helper
         * 
         * @return builder
         * 
         */
        public Builder ipv6DhcpHelpers(CiscoVpnInterfaceFeatureTemplateIpv6DhcpHelperArgs... ipv6DhcpHelpers) {
            return ipv6DhcpHelpers(List.of(ipv6DhcpHelpers));
        }

        /**
         * @param ipv6Nat NAT64 on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipv6Nat(@Nullable Output<Boolean> ipv6Nat) {
            $.ipv6Nat = ipv6Nat;
            return this;
        }

        /**
         * @param ipv6Nat NAT64 on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipv6Nat(Boolean ipv6Nat) {
            return ipv6Nat(Output.of(ipv6Nat));
        }

        /**
         * @param ipv6NatVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6NatVariable(@Nullable Output<String> ipv6NatVariable) {
            $.ipv6NatVariable = ipv6NatVariable;
            return this;
        }

        /**
         * @param ipv6NatVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv6NatVariable(String ipv6NatVariable) {
            return ipv6NatVariable(Output.of(ipv6NatVariable));
        }

        /**
         * @param ipv6SecondaryAddresses Assign secondary IPv6 addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv6SecondaryAddresses(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs>> ipv6SecondaryAddresses) {
            $.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            return this;
        }

        /**
         * @param ipv6SecondaryAddresses Assign secondary IPv6 addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv6SecondaryAddresses(List<CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs> ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(Output.of(ipv6SecondaryAddresses));
        }

        /**
         * @param ipv6SecondaryAddresses Assign secondary IPv6 addresses
         * 
         * @return builder
         * 
         */
        public Builder ipv6SecondaryAddresses(CiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddressArgs... ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(List.of(ipv6SecondaryAddresses));
        }

        /**
         * @param ipv6Vrrps Enable VRRP
         * 
         * @return builder
         * 
         */
        public Builder ipv6Vrrps(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs>> ipv6Vrrps) {
            $.ipv6Vrrps = ipv6Vrrps;
            return this;
        }

        /**
         * @param ipv6Vrrps Enable VRRP
         * 
         * @return builder
         * 
         */
        public Builder ipv6Vrrps(List<CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs> ipv6Vrrps) {
            return ipv6Vrrps(Output.of(ipv6Vrrps));
        }

        /**
         * @param ipv6Vrrps Enable VRRP
         * 
         * @return builder
         * 
         */
        public Builder ipv6Vrrps(CiscoVpnInterfaceFeatureTemplateIpv6VrrpArgs... ipv6Vrrps) {
            return ipv6Vrrps(List.of(ipv6Vrrps));
        }

        /**
         * @param loadInterval Interval for interface load calculation
         *   - Range: `30`-`600`
         *   - Default value: `30`
         * 
         * @return builder
         * 
         */
        public Builder loadInterval(@Nullable Output<Integer> loadInterval) {
            $.loadInterval = loadInterval;
            return this;
        }

        /**
         * @param loadInterval Interval for interface load calculation
         *   - Range: `30`-`600`
         *   - Default value: `30`
         * 
         * @return builder
         * 
         */
        public Builder loadInterval(Integer loadInterval) {
            return loadInterval(Output.of(loadInterval));
        }

        /**
         * @param loadIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder loadIntervalVariable(@Nullable Output<String> loadIntervalVariable) {
            $.loadIntervalVariable = loadIntervalVariable;
            return this;
        }

        /**
         * @param loadIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder loadIntervalVariable(String loadIntervalVariable) {
            return loadIntervalVariable(Output.of(loadIntervalVariable));
        }

        /**
         * @param macAddress Set MAC-layer address
         * 
         * @return builder
         * 
         */
        public Builder macAddress(@Nullable Output<String> macAddress) {
            $.macAddress = macAddress;
            return this;
        }

        /**
         * @param macAddress Set MAC-layer address
         * 
         * @return builder
         * 
         */
        public Builder macAddress(String macAddress) {
            return macAddress(Output.of(macAddress));
        }

        /**
         * @param macAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder macAddressVariable(@Nullable Output<String> macAddressVariable) {
            $.macAddressVariable = macAddressVariable;
            return this;
        }

        /**
         * @param macAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder macAddressVariable(String macAddressVariable) {
            return macAddressVariable(Output.of(macAddressVariable));
        }

        /**
         * @param mediaType Media type
         *   - Choices: `auto-select`, `rj45`, `sfp`
         * 
         * @return builder
         * 
         */
        public Builder mediaType(@Nullable Output<String> mediaType) {
            $.mediaType = mediaType;
            return this;
        }

        /**
         * @param mediaType Media type
         *   - Choices: `auto-select`, `rj45`, `sfp`
         * 
         * @return builder
         * 
         */
        public Builder mediaType(String mediaType) {
            return mediaType(Output.of(mediaType));
        }

        /**
         * @param mediaTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mediaTypeVariable(@Nullable Output<String> mediaTypeVariable) {
            $.mediaTypeVariable = mediaTypeVariable;
            return this;
        }

        /**
         * @param mediaTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mediaTypeVariable(String mediaTypeVariable) {
            return mediaTypeVariable(Output.of(mediaTypeVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nat Network Address Translation on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat(@Nullable Output<Boolean> nat) {
            $.nat = nat;
            return this;
        }

        /**
         * @param nat Network Address Translation on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat(Boolean nat) {
            return nat(Output.of(nat));
        }

        /**
         * @param nat64Interface NAT64 on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat64Interface(@Nullable Output<Boolean> nat64Interface) {
            $.nat64Interface = nat64Interface;
            return this;
        }

        /**
         * @param nat64Interface NAT64 on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat64Interface(Boolean nat64Interface) {
            return nat64Interface(Output.of(nat64Interface));
        }

        /**
         * @param nat66Interface NAT66 on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat66Interface(@Nullable Output<Boolean> nat66Interface) {
            $.nat66Interface = nat66Interface;
            return this;
        }

        /**
         * @param nat66Interface NAT66 on this interface
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder nat66Interface(Boolean nat66Interface) {
            return nat66Interface(Output.of(nat66Interface));
        }

        /**
         * @param natInsideSourceLoopbackInterface Configure NAT Inside Loopback Interface
         * 
         * @return builder
         * 
         */
        public Builder natInsideSourceLoopbackInterface(@Nullable Output<String> natInsideSourceLoopbackInterface) {
            $.natInsideSourceLoopbackInterface = natInsideSourceLoopbackInterface;
            return this;
        }

        /**
         * @param natInsideSourceLoopbackInterface Configure NAT Inside Loopback Interface
         * 
         * @return builder
         * 
         */
        public Builder natInsideSourceLoopbackInterface(String natInsideSourceLoopbackInterface) {
            return natInsideSourceLoopbackInterface(Output.of(natInsideSourceLoopbackInterface));
        }

        /**
         * @param natInsideSourceLoopbackInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natInsideSourceLoopbackInterfaceVariable(@Nullable Output<String> natInsideSourceLoopbackInterfaceVariable) {
            $.natInsideSourceLoopbackInterfaceVariable = natInsideSourceLoopbackInterfaceVariable;
            return this;
        }

        /**
         * @param natInsideSourceLoopbackInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natInsideSourceLoopbackInterfaceVariable(String natInsideSourceLoopbackInterfaceVariable) {
            return natInsideSourceLoopbackInterfaceVariable(Output.of(natInsideSourceLoopbackInterfaceVariable));
        }

        /**
         * @param natOverload Enable port translation(PAT)
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder natOverload(@Nullable Output<Boolean> natOverload) {
            $.natOverload = natOverload;
            return this;
        }

        /**
         * @param natOverload Enable port translation(PAT)
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder natOverload(Boolean natOverload) {
            return natOverload(Output.of(natOverload));
        }

        /**
         * @param natOverloadVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natOverloadVariable(@Nullable Output<String> natOverloadVariable) {
            $.natOverloadVariable = natOverloadVariable;
            return this;
        }

        /**
         * @param natOverloadVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natOverloadVariable(String natOverloadVariable) {
            return natOverloadVariable(Output.of(natOverloadVariable));
        }

        /**
         * @param natPoolPrefixLength Ending IP address of NAT Pool Prefix Length
         * 
         * @return builder
         * 
         */
        public Builder natPoolPrefixLength(@Nullable Output<Integer> natPoolPrefixLength) {
            $.natPoolPrefixLength = natPoolPrefixLength;
            return this;
        }

        /**
         * @param natPoolPrefixLength Ending IP address of NAT Pool Prefix Length
         * 
         * @return builder
         * 
         */
        public Builder natPoolPrefixLength(Integer natPoolPrefixLength) {
            return natPoolPrefixLength(Output.of(natPoolPrefixLength));
        }

        /**
         * @param natPoolPrefixLengthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natPoolPrefixLengthVariable(@Nullable Output<String> natPoolPrefixLengthVariable) {
            $.natPoolPrefixLengthVariable = natPoolPrefixLengthVariable;
            return this;
        }

        /**
         * @param natPoolPrefixLengthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natPoolPrefixLengthVariable(String natPoolPrefixLengthVariable) {
            return natPoolPrefixLengthVariable(Output.of(natPoolPrefixLengthVariable));
        }

        /**
         * @param natPoolRangeEnd Ending IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeEnd(@Nullable Output<String> natPoolRangeEnd) {
            $.natPoolRangeEnd = natPoolRangeEnd;
            return this;
        }

        /**
         * @param natPoolRangeEnd Ending IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeEnd(String natPoolRangeEnd) {
            return natPoolRangeEnd(Output.of(natPoolRangeEnd));
        }

        /**
         * @param natPoolRangeEndVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeEndVariable(@Nullable Output<String> natPoolRangeEndVariable) {
            $.natPoolRangeEndVariable = natPoolRangeEndVariable;
            return this;
        }

        /**
         * @param natPoolRangeEndVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeEndVariable(String natPoolRangeEndVariable) {
            return natPoolRangeEndVariable(Output.of(natPoolRangeEndVariable));
        }

        /**
         * @param natPoolRangeStart Starting IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeStart(@Nullable Output<String> natPoolRangeStart) {
            $.natPoolRangeStart = natPoolRangeStart;
            return this;
        }

        /**
         * @param natPoolRangeStart Starting IP address of NAT pool range
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeStart(String natPoolRangeStart) {
            return natPoolRangeStart(Output.of(natPoolRangeStart));
        }

        /**
         * @param natPoolRangeStartVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeStartVariable(@Nullable Output<String> natPoolRangeStartVariable) {
            $.natPoolRangeStartVariable = natPoolRangeStartVariable;
            return this;
        }

        /**
         * @param natPoolRangeStartVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natPoolRangeStartVariable(String natPoolRangeStartVariable) {
            return natPoolRangeStartVariable(Output.of(natPoolRangeStartVariable));
        }

        /**
         * @param natType NAT type
         *   - Choices: `interface`, `pool`, `loopback`
         *   - Default value: `interface`
         * 
         * @return builder
         * 
         */
        public Builder natType(@Nullable Output<String> natType) {
            $.natType = natType;
            return this;
        }

        /**
         * @param natType NAT type
         *   - Choices: `interface`, `pool`, `loopback`
         *   - Default value: `interface`
         * 
         * @return builder
         * 
         */
        public Builder natType(String natType) {
            return natType(Output.of(natType));
        }

        /**
         * @param natTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natTypeVariable(@Nullable Output<String> natTypeVariable) {
            $.natTypeVariable = natTypeVariable;
            return this;
        }

        /**
         * @param natTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder natTypeVariable(String natTypeVariable) {
            return natTypeVariable(Output.of(natTypeVariable));
        }

        /**
         * @param poe Configure interface as Power-over-Ethernet source
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder poe(@Nullable Output<Boolean> poe) {
            $.poe = poe;
            return this;
        }

        /**
         * @param poe Configure interface as Power-over-Ethernet source
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder poe(Boolean poe) {
            return poe(Output.of(poe));
        }

        /**
         * @param poeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder poeVariable(@Nullable Output<String> poeVariable) {
            $.poeVariable = poeVariable;
            return this;
        }

        /**
         * @param poeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder poeVariable(String poeVariable) {
            return poeVariable(Output.of(poeVariable));
        }

        /**
         * @param propagateSgt Enable/Disable CTS SGT propagation on an interface.
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder propagateSgt(@Nullable Output<Boolean> propagateSgt) {
            $.propagateSgt = propagateSgt;
            return this;
        }

        /**
         * @param propagateSgt Enable/Disable CTS SGT propagation on an interface.
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder propagateSgt(Boolean propagateSgt) {
            return propagateSgt(Output.of(propagateSgt));
        }

        /**
         * @param qosAdaptiveBandwidthDownstream Adaptive QoS default downstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstream(@Nullable Output<Integer> qosAdaptiveBandwidthDownstream) {
            $.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthDownstream Adaptive QoS default downstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstream(Integer qosAdaptiveBandwidthDownstream) {
            return qosAdaptiveBandwidthDownstream(Output.of(qosAdaptiveBandwidthDownstream));
        }

        /**
         * @param qosAdaptiveBandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstreamVariable(@Nullable Output<String> qosAdaptiveBandwidthDownstreamVariable) {
            $.qosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthDownstreamVariable(String qosAdaptiveBandwidthDownstreamVariable) {
            return qosAdaptiveBandwidthDownstreamVariable(Output.of(qosAdaptiveBandwidthDownstreamVariable));
        }

        /**
         * @param qosAdaptiveBandwidthUpstream Adaptive QoS default upstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstream(@Nullable Output<Integer> qosAdaptiveBandwidthUpstream) {
            $.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthUpstream Adaptive QoS default upstream bandwidth
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstream(Integer qosAdaptiveBandwidthUpstream) {
            return qosAdaptiveBandwidthUpstream(Output.of(qosAdaptiveBandwidthUpstream));
        }

        /**
         * @param qosAdaptiveBandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstreamVariable(@Nullable Output<String> qosAdaptiveBandwidthUpstreamVariable) {
            $.qosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveBandwidthUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveBandwidthUpstreamVariable(String qosAdaptiveBandwidthUpstreamVariable) {
            return qosAdaptiveBandwidthUpstreamVariable(Output.of(qosAdaptiveBandwidthUpstreamVariable));
        }

        /**
         * @param qosAdaptiveMaxDownstream Downstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstream(@Nullable Output<Integer> qosAdaptiveMaxDownstream) {
            $.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            return this;
        }

        /**
         * @param qosAdaptiveMaxDownstream Downstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstream(Integer qosAdaptiveMaxDownstream) {
            return qosAdaptiveMaxDownstream(Output.of(qosAdaptiveMaxDownstream));
        }

        /**
         * @param qosAdaptiveMaxDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstreamVariable(@Nullable Output<String> qosAdaptiveMaxDownstreamVariable) {
            $.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMaxDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxDownstreamVariable(String qosAdaptiveMaxDownstreamVariable) {
            return qosAdaptiveMaxDownstreamVariable(Output.of(qosAdaptiveMaxDownstreamVariable));
        }

        /**
         * @param qosAdaptiveMaxUpstream Upstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstream(@Nullable Output<Integer> qosAdaptiveMaxUpstream) {
            $.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            return this;
        }

        /**
         * @param qosAdaptiveMaxUpstream Upstream max bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstream(Integer qosAdaptiveMaxUpstream) {
            return qosAdaptiveMaxUpstream(Output.of(qosAdaptiveMaxUpstream));
        }

        /**
         * @param qosAdaptiveMaxUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstreamVariable(@Nullable Output<String> qosAdaptiveMaxUpstreamVariable) {
            $.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMaxUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMaxUpstreamVariable(String qosAdaptiveMaxUpstreamVariable) {
            return qosAdaptiveMaxUpstreamVariable(Output.of(qosAdaptiveMaxUpstreamVariable));
        }

        /**
         * @param qosAdaptiveMinDownstream Downstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstream(@Nullable Output<Integer> qosAdaptiveMinDownstream) {
            $.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            return this;
        }

        /**
         * @param qosAdaptiveMinDownstream Downstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstream(Integer qosAdaptiveMinDownstream) {
            return qosAdaptiveMinDownstream(Output.of(qosAdaptiveMinDownstream));
        }

        /**
         * @param qosAdaptiveMinDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstreamVariable(@Nullable Output<String> qosAdaptiveMinDownstreamVariable) {
            $.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMinDownstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinDownstreamVariable(String qosAdaptiveMinDownstreamVariable) {
            return qosAdaptiveMinDownstreamVariable(Output.of(qosAdaptiveMinDownstreamVariable));
        }

        /**
         * @param qosAdaptiveMinUpstream Upstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstream(@Nullable Output<Integer> qosAdaptiveMinUpstream) {
            $.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            return this;
        }

        /**
         * @param qosAdaptiveMinUpstream Upstream min bandwidth limit
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstream(Integer qosAdaptiveMinUpstream) {
            return qosAdaptiveMinUpstream(Output.of(qosAdaptiveMinUpstream));
        }

        /**
         * @param qosAdaptiveMinUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstreamVariable(@Nullable Output<String> qosAdaptiveMinUpstreamVariable) {
            $.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            return this;
        }

        /**
         * @param qosAdaptiveMinUpstreamVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptiveMinUpstreamVariable(String qosAdaptiveMinUpstreamVariable) {
            return qosAdaptiveMinUpstreamVariable(Output.of(qosAdaptiveMinUpstreamVariable));
        }

        /**
         * @param qosAdaptivePeriod Periodic timer for adaptive QoS in minutes
         *   - Range: `1`-`720`
         *   - Default value: `15`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriod(@Nullable Output<Integer> qosAdaptivePeriod) {
            $.qosAdaptivePeriod = qosAdaptivePeriod;
            return this;
        }

        /**
         * @param qosAdaptivePeriod Periodic timer for adaptive QoS in minutes
         *   - Range: `1`-`720`
         *   - Default value: `15`
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriod(Integer qosAdaptivePeriod) {
            return qosAdaptivePeriod(Output.of(qosAdaptivePeriod));
        }

        /**
         * @param qosAdaptivePeriodVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriodVariable(@Nullable Output<String> qosAdaptivePeriodVariable) {
            $.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            return this;
        }

        /**
         * @param qosAdaptivePeriodVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosAdaptivePeriodVariable(String qosAdaptivePeriodVariable) {
            return qosAdaptivePeriodVariable(Output.of(qosAdaptivePeriodVariable));
        }

        /**
         * @param qosMap Name of QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMap(@Nullable Output<String> qosMap) {
            $.qosMap = qosMap;
            return this;
        }

        /**
         * @param qosMap Name of QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMap(String qosMap) {
            return qosMap(Output.of(qosMap));
        }

        /**
         * @param qosMapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVariable(@Nullable Output<String> qosMapVariable) {
            $.qosMapVariable = qosMapVariable;
            return this;
        }

        /**
         * @param qosMapVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVariable(String qosMapVariable) {
            return qosMapVariable(Output.of(qosMapVariable));
        }

        /**
         * @param qosMapVpn Name of VPN QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpn(@Nullable Output<String> qosMapVpn) {
            $.qosMapVpn = qosMapVpn;
            return this;
        }

        /**
         * @param qosMapVpn Name of VPN QoS map
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpn(String qosMapVpn) {
            return qosMapVpn(Output.of(qosMapVpn));
        }

        /**
         * @param qosMapVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpnVariable(@Nullable Output<String> qosMapVpnVariable) {
            $.qosMapVpnVariable = qosMapVpnVariable;
            return this;
        }

        /**
         * @param qosMapVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder qosMapVpnVariable(String qosMapVpnVariable) {
            return qosMapVpnVariable(Output.of(qosMapVpnVariable));
        }

        /**
         * @param rewriteRuleName Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleName(@Nullable Output<String> rewriteRuleName) {
            $.rewriteRuleName = rewriteRuleName;
            return this;
        }

        /**
         * @param rewriteRuleName Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleName(String rewriteRuleName) {
            return rewriteRuleName(Output.of(rewriteRuleName));
        }

        /**
         * @param rewriteRuleNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleNameVariable(@Nullable Output<String> rewriteRuleNameVariable) {
            $.rewriteRuleNameVariable = rewriteRuleNameVariable;
            return this;
        }

        /**
         * @param rewriteRuleNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleNameVariable(String rewriteRuleNameVariable) {
            return rewriteRuleNameVariable(Output.of(rewriteRuleNameVariable));
        }

        /**
         * @param secondaryRegion Enable secondary region
         *   - Choices: `off`, `secondary-only`, `secondary-shared`
         *   - Default value: `off`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegion(@Nullable Output<String> secondaryRegion) {
            $.secondaryRegion = secondaryRegion;
            return this;
        }

        /**
         * @param secondaryRegion Enable secondary region
         *   - Choices: `off`, `secondary-only`, `secondary-shared`
         *   - Default value: `off`
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegion(String secondaryRegion) {
            return secondaryRegion(Output.of(secondaryRegion));
        }

        /**
         * @param secondaryRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionVariable(@Nullable Output<String> secondaryRegionVariable) {
            $.secondaryRegionVariable = secondaryRegionVariable;
            return this;
        }

        /**
         * @param secondaryRegionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder secondaryRegionVariable(String secondaryRegionVariable) {
            return secondaryRegionVariable(Output.of(secondaryRegionVariable));
        }

        /**
         * @param sgtEnforcement Enables the interface for CTS SGT authorization and forwarding.
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder sgtEnforcement(@Nullable Output<Boolean> sgtEnforcement) {
            $.sgtEnforcement = sgtEnforcement;
            return this;
        }

        /**
         * @param sgtEnforcement Enables the interface for CTS SGT authorization and forwarding.
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder sgtEnforcement(Boolean sgtEnforcement) {
            return sgtEnforcement(Output.of(sgtEnforcement));
        }

        /**
         * @param sgtEnforcementSgt SGT value between 2 and 65519.
         *   - Range: `2`-`65519`
         * 
         * @return builder
         * 
         */
        public Builder sgtEnforcementSgt(@Nullable Output<Integer> sgtEnforcementSgt) {
            $.sgtEnforcementSgt = sgtEnforcementSgt;
            return this;
        }

        /**
         * @param sgtEnforcementSgt SGT value between 2 and 65519.
         *   - Range: `2`-`65519`
         * 
         * @return builder
         * 
         */
        public Builder sgtEnforcementSgt(Integer sgtEnforcementSgt) {
            return sgtEnforcementSgt(Output.of(sgtEnforcementSgt));
        }

        /**
         * @param sgtEnforcementSgtVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sgtEnforcementSgtVariable(@Nullable Output<String> sgtEnforcementSgtVariable) {
            $.sgtEnforcementSgtVariable = sgtEnforcementSgtVariable;
            return this;
        }

        /**
         * @param sgtEnforcementSgtVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sgtEnforcementSgtVariable(String sgtEnforcementSgtVariable) {
            return sgtEnforcementSgtVariable(Output.of(sgtEnforcementSgtVariable));
        }

        /**
         * @param shapingRate 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder shapingRate(@Nullable Output<Integer> shapingRate) {
            $.shapingRate = shapingRate;
            return this;
        }

        /**
         * @param shapingRate 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
         *   - Range: `8`-`100000000`
         * 
         * @return builder
         * 
         */
        public Builder shapingRate(Integer shapingRate) {
            return shapingRate(Output.of(shapingRate));
        }

        /**
         * @param shapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shapingRateVariable(@Nullable Output<String> shapingRateVariable) {
            $.shapingRateVariable = shapingRateVariable;
            return this;
        }

        /**
         * @param shapingRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shapingRateVariable(String shapingRateVariable) {
            return shapingRateVariable(Output.of(shapingRateVariable));
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param speed Set interface speed
         *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
         * 
         * @return builder
         * 
         */
        public Builder speed(@Nullable Output<String> speed) {
            $.speed = speed;
            return this;
        }

        /**
         * @param speed Set interface speed
         *   - Choices: `10`, `100`, `1000`, `2500`, `10000`
         * 
         * @return builder
         * 
         */
        public Builder speed(String speed) {
            return speed(Output.of(speed));
        }

        /**
         * @param speedVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder speedVariable(@Nullable Output<String> speedVariable) {
            $.speedVariable = speedVariable;
            return this;
        }

        /**
         * @param speedVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder speedVariable(String speedVariable) {
            return speedVariable(Output.of(speedVariable));
        }

        /**
         * @param staticArps Configure static ARP entries
         * 
         * @return builder
         * 
         */
        public Builder staticArps(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticArpArgs>> staticArps) {
            $.staticArps = staticArps;
            return this;
        }

        /**
         * @param staticArps Configure static ARP entries
         * 
         * @return builder
         * 
         */
        public Builder staticArps(List<CiscoVpnInterfaceFeatureTemplateStaticArpArgs> staticArps) {
            return staticArps(Output.of(staticArps));
        }

        /**
         * @param staticArps Configure static ARP entries
         * 
         * @return builder
         * 
         */
        public Builder staticArps(CiscoVpnInterfaceFeatureTemplateStaticArpArgs... staticArps) {
            return staticArps(List.of(staticArps));
        }

        /**
         * @param staticNat66Entries static NAT
         * 
         * @return builder
         * 
         */
        public Builder staticNat66Entries(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs>> staticNat66Entries) {
            $.staticNat66Entries = staticNat66Entries;
            return this;
        }

        /**
         * @param staticNat66Entries static NAT
         * 
         * @return builder
         * 
         */
        public Builder staticNat66Entries(List<CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs> staticNat66Entries) {
            return staticNat66Entries(Output.of(staticNat66Entries));
        }

        /**
         * @param staticNat66Entries static NAT
         * 
         * @return builder
         * 
         */
        public Builder staticNat66Entries(CiscoVpnInterfaceFeatureTemplateStaticNat66EntryArgs... staticNat66Entries) {
            return staticNat66Entries(List.of(staticNat66Entries));
        }

        /**
         * @param staticNatEntries Configure static NAT entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatEntries(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs>> staticNatEntries) {
            $.staticNatEntries = staticNatEntries;
            return this;
        }

        /**
         * @param staticNatEntries Configure static NAT entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatEntries(List<CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs> staticNatEntries) {
            return staticNatEntries(Output.of(staticNatEntries));
        }

        /**
         * @param staticNatEntries Configure static NAT entries
         * 
         * @return builder
         * 
         */
        public Builder staticNatEntries(CiscoVpnInterfaceFeatureTemplateStaticNatEntryArgs... staticNatEntries) {
            return staticNatEntries(List.of(staticNatEntries));
        }

        /**
         * @param staticPortForwardEntries Configure Port Forward entries
         * 
         * @return builder
         * 
         */
        public Builder staticPortForwardEntries(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs>> staticPortForwardEntries) {
            $.staticPortForwardEntries = staticPortForwardEntries;
            return this;
        }

        /**
         * @param staticPortForwardEntries Configure Port Forward entries
         * 
         * @return builder
         * 
         */
        public Builder staticPortForwardEntries(List<CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs> staticPortForwardEntries) {
            return staticPortForwardEntries(Output.of(staticPortForwardEntries));
        }

        /**
         * @param staticPortForwardEntries Configure Port Forward entries
         * 
         * @return builder
         * 
         */
        public Builder staticPortForwardEntries(CiscoVpnInterfaceFeatureTemplateStaticPortForwardEntryArgs... staticPortForwardEntries) {
            return staticPortForwardEntries(List.of(staticPortForwardEntries));
        }

        /**
         * @param staticSgt SGT value between 2 and 65519.
         *   - Range: `2`-`65519`
         * 
         * @return builder
         * 
         */
        public Builder staticSgt(@Nullable Output<Integer> staticSgt) {
            $.staticSgt = staticSgt;
            return this;
        }

        /**
         * @param staticSgt SGT value between 2 and 65519.
         *   - Range: `2`-`65519`
         * 
         * @return builder
         * 
         */
        public Builder staticSgt(Integer staticSgt) {
            return staticSgt(Output.of(staticSgt));
        }

        /**
         * @param staticSgtTrusted Indicates that the interface is trustworthy for CTS.
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder staticSgtTrusted(@Nullable Output<Boolean> staticSgtTrusted) {
            $.staticSgtTrusted = staticSgtTrusted;
            return this;
        }

        /**
         * @param staticSgtTrusted Indicates that the interface is trustworthy for CTS.
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder staticSgtTrusted(Boolean staticSgtTrusted) {
            return staticSgtTrusted(Output.of(staticSgtTrusted));
        }

        /**
         * @param staticSgtVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder staticSgtVariable(@Nullable Output<String> staticSgtVariable) {
            $.staticSgtVariable = staticSgtVariable;
            return this;
        }

        /**
         * @param staticSgtVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder staticSgtVariable(String staticSgtVariable) {
            return staticSgtVariable(Output.of(staticSgtVariable));
        }

        /**
         * @param tcpMssAdjust TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjust(@Nullable Output<Integer> tcpMssAdjust) {
            $.tcpMssAdjust = tcpMssAdjust;
            return this;
        }

        /**
         * @param tcpMssAdjust TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjust(Integer tcpMssAdjust) {
            return tcpMssAdjust(Output.of(tcpMssAdjust));
        }

        /**
         * @param tcpMssAdjustVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjustVariable(@Nullable Output<String> tcpMssAdjustVariable) {
            $.tcpMssAdjustVariable = tcpMssAdjustVariable;
            return this;
        }

        /**
         * @param tcpMssAdjustVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjustVariable(String tcpMssAdjustVariable) {
            return tcpMssAdjustVariable(Output.of(tcpMssAdjustVariable));
        }

        /**
         * @param tcpTimeout Set NAT TCP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeout(@Nullable Output<Integer> tcpTimeout) {
            $.tcpTimeout = tcpTimeout;
            return this;
        }

        /**
         * @param tcpTimeout Set NAT TCP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeout(Integer tcpTimeout) {
            return tcpTimeout(Output.of(tcpTimeout));
        }

        /**
         * @param tcpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeoutVariable(@Nullable Output<String> tcpTimeoutVariable) {
            $.tcpTimeoutVariable = tcpTimeoutVariable;
            return this;
        }

        /**
         * @param tcpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpTimeoutVariable(String tcpTimeoutVariable) {
            return tcpTimeoutVariable(Output.of(tcpTimeoutVariable));
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(@Nullable Output<String> tlocExtension) {
            $.tlocExtension = tlocExtension;
            return this;
        }

        /**
         * @param tlocExtension Extends a local TLOC to a remote node only for vpn 0
         * 
         * @return builder
         * 
         */
        public Builder tlocExtension(String tlocExtension) {
            return tlocExtension(Output.of(tlocExtension));
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(@Nullable Output<String> tlocExtensionVariable) {
            $.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }

        /**
         * @param tlocExtensionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            return tlocExtensionVariable(Output.of(tlocExtensionVariable));
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(@Nullable Output<String> trackerVariable) {
            $.trackerVariable = trackerVariable;
            return this;
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(String trackerVariable) {
            return trackerVariable(Output.of(trackerVariable));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(@Nullable Output<List<String>> trackers) {
            $.trackers = trackers;
            return this;
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(List<String> trackers) {
            return trackers(Output.of(trackers));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }

        /**
         * @param tunnelBandwidth Tunnels Bandwidth Percent
         *   - Range: `1`-`99`
         *   - Default value: `50`
         * 
         * @return builder
         * 
         */
        public Builder tunnelBandwidth(@Nullable Output<Integer> tunnelBandwidth) {
            $.tunnelBandwidth = tunnelBandwidth;
            return this;
        }

        /**
         * @param tunnelBandwidth Tunnels Bandwidth Percent
         *   - Range: `1`-`99`
         *   - Default value: `50`
         * 
         * @return builder
         * 
         */
        public Builder tunnelBandwidth(Integer tunnelBandwidth) {
            return tunnelBandwidth(Output.of(tunnelBandwidth));
        }

        /**
         * @param tunnelBandwidthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelBandwidthVariable(@Nullable Output<String> tunnelBandwidthVariable) {
            $.tunnelBandwidthVariable = tunnelBandwidthVariable;
            return this;
        }

        /**
         * @param tunnelBandwidthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelBandwidthVariable(String tunnelBandwidthVariable) {
            return tunnelBandwidthVariable(Output.of(tunnelBandwidthVariable));
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(@Nullable Output<Boolean> tunnelInterfaceAllowAll) {
            $.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAll Allow all traffic. Overrides all other allow-service options if allow-service all is set
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            return tunnelInterfaceAllowAll(Output.of(tunnelInterfaceAllowAll));
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(@Nullable Output<String> tunnelInterfaceAllowAllVariable) {
            $.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowAllVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            return tunnelInterfaceAllowAllVariable(Output.of(tunnelInterfaceAllowAllVariable));
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(@Nullable Output<Boolean> tunnelInterfaceAllowBgp) {
            $.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgp Allow/deny BGP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            return tunnelInterfaceAllowBgp(Output.of(tunnelInterfaceAllowBgp));
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(@Nullable Output<String> tunnelInterfaceAllowBgpVariable) {
            $.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowBgpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            return tunnelInterfaceAllowBgpVariable(Output.of(tunnelInterfaceAllowBgpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(@Nullable Output<Boolean> tunnelInterfaceAllowDhcp) {
            $.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcp Allow/Deny DHCP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            return tunnelInterfaceAllowDhcp(Output.of(tunnelInterfaceAllowDhcp));
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(@Nullable Output<String> tunnelInterfaceAllowDhcpVariable) {
            $.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDhcpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            return tunnelInterfaceAllowDhcpVariable(Output.of(tunnelInterfaceAllowDhcpVariable));
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(@Nullable Output<Boolean> tunnelInterfaceAllowDns) {
            $.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDns Allow/Deny DNS
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            return tunnelInterfaceAllowDns(Output.of(tunnelInterfaceAllowDns));
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(@Nullable Output<String> tunnelInterfaceAllowDnsVariable) {
            $.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowDnsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            return tunnelInterfaceAllowDnsVariable(Output.of(tunnelInterfaceAllowDnsVariable));
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(@Nullable Output<Boolean> tunnelInterfaceAllowHttps) {
            $.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttps Allow/Deny Https
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            return tunnelInterfaceAllowHttps(Output.of(tunnelInterfaceAllowHttps));
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(@Nullable Output<String> tunnelInterfaceAllowHttpsVariable) {
            $.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowHttpsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            return tunnelInterfaceAllowHttpsVariable(Output.of(tunnelInterfaceAllowHttpsVariable));
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(@Nullable Output<Boolean> tunnelInterfaceAllowIcmp) {
            $.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmp Allow/Deny ICMP
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            return tunnelInterfaceAllowIcmp(Output.of(tunnelInterfaceAllowIcmp));
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(@Nullable Output<String> tunnelInterfaceAllowIcmpVariable) {
            $.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowIcmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            return tunnelInterfaceAllowIcmpVariable(Output.of(tunnelInterfaceAllowIcmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(@Nullable Output<Boolean> tunnelInterfaceAllowNetconf) {
            $.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconf Allow/Deny NETCONF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            return tunnelInterfaceAllowNetconf(Output.of(tunnelInterfaceAllowNetconf));
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(@Nullable Output<String> tunnelInterfaceAllowNetconfVariable) {
            $.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNetconfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            return tunnelInterfaceAllowNetconfVariable(Output.of(tunnelInterfaceAllowNetconfVariable));
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(@Nullable Output<Boolean> tunnelInterfaceAllowNtp) {
            $.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtp Allow/Deny NTP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            return tunnelInterfaceAllowNtp(Output.of(tunnelInterfaceAllowNtp));
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(@Nullable Output<String> tunnelInterfaceAllowNtpVariable) {
            $.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowNtpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            return tunnelInterfaceAllowNtpVariable(Output.of(tunnelInterfaceAllowNtpVariable));
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(@Nullable Output<Boolean> tunnelInterfaceAllowOspf) {
            $.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspf Allow/Deny OSPF
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            return tunnelInterfaceAllowOspf(Output.of(tunnelInterfaceAllowOspf));
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(@Nullable Output<String> tunnelInterfaceAllowOspfVariable) {
            $.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowOspfVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            return tunnelInterfaceAllowOspfVariable(Output.of(tunnelInterfaceAllowOspfVariable));
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(@Nullable Output<Boolean> tunnelInterfaceAllowSnmp) {
            $.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmp Allow/Deny SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            return tunnelInterfaceAllowSnmp(Output.of(tunnelInterfaceAllowSnmp));
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(@Nullable Output<String> tunnelInterfaceAllowSnmpVariable) {
            $.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSnmpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            return tunnelInterfaceAllowSnmpVariable(Output.of(tunnelInterfaceAllowSnmpVariable));
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(@Nullable Output<Boolean> tunnelInterfaceAllowSsh) {
            $.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSsh Allow/Deny SSH
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            return tunnelInterfaceAllowSsh(Output.of(tunnelInterfaceAllowSsh));
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(@Nullable Output<String> tunnelInterfaceAllowSshVariable) {
            $.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowSshVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            return tunnelInterfaceAllowSshVariable(Output.of(tunnelInterfaceAllowSshVariable));
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(@Nullable Output<Boolean> tunnelInterfaceAllowStun) {
            $.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStun Allow/Deny STUN
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            return tunnelInterfaceAllowStun(Output.of(tunnelInterfaceAllowStun));
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(@Nullable Output<String> tunnelInterfaceAllowStunVariable) {
            $.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceAllowStunVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            return tunnelInterfaceAllowStunVariable(Output.of(tunnelInterfaceAllowStunVariable));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnel) {
            $.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnel Bind loopback tunnel interface to a physical interface
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            return tunnelInterfaceBindLoopbackTunnel(Output.of(tunnelInterfaceBindLoopbackTunnel));
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(@Nullable Output<String> tunnelInterfaceBindLoopbackTunnelVariable) {
            $.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBindLoopbackTunnelVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            return tunnelInterfaceBindLoopbackTunnelVariable(Output.of(tunnelInterfaceBindLoopbackTunnelVariable));
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(@Nullable Output<Boolean> tunnelInterfaceBorder) {
            $.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }

        /**
         * @param tunnelInterfaceBorder Set TLOC as border TLOC
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            return tunnelInterfaceBorder(Output.of(tunnelInterfaceBorder));
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(@Nullable Output<String> tunnelInterfaceBorderVariable) {
            $.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceBorderVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            return tunnelInterfaceBorderVariable(Output.of(tunnelInterfaceBorderVariable));
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(@Nullable Output<String> tunnelInterfaceCarrier) {
            $.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrier Set carrier for TLOC
         *   - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`, `carrier7`, `carrier8`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            return tunnelInterfaceCarrier(Output.of(tunnelInterfaceCarrier));
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(@Nullable Output<String> tunnelInterfaceCarrierVariable) {
            $.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceCarrierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            return tunnelInterfaceCarrierVariable(Output.of(tunnelInterfaceCarrierVariable));
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(@Nullable Output<Boolean> tunnelInterfaceClearDontFragment) {
            $.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            return tunnelInterfaceClearDontFragment(Output.of(tunnelInterfaceClearDontFragment));
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(@Nullable Output<String> tunnelInterfaceClearDontFragmentVariable) {
            $.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceClearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            return tunnelInterfaceClearDontFragmentVariable(Output.of(tunnelInterfaceClearDontFragmentVariable));
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(@Nullable Output<String> tunnelInterfaceColor) {
            $.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }

        /**
         * @param tunnelInterfaceColor Set color for TLOC
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         *   - Default value: `default`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            return tunnelInterfaceColor(Output.of(tunnelInterfaceColor));
        }

        /**
         * @param tunnelInterfaceColorRestrict Restrict this TLOC behavior
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorRestrict(@Nullable Output<Boolean> tunnelInterfaceColorRestrict) {
            $.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            return this;
        }

        /**
         * @param tunnelInterfaceColorRestrict Restrict this TLOC behavior
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorRestrict(Boolean tunnelInterfaceColorRestrict) {
            return tunnelInterfaceColorRestrict(Output.of(tunnelInterfaceColorRestrict));
        }

        /**
         * @param tunnelInterfaceColorRestrictVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorRestrictVariable(@Nullable Output<String> tunnelInterfaceColorRestrictVariable) {
            $.tunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceColorRestrictVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorRestrictVariable(String tunnelInterfaceColorRestrictVariable) {
            return tunnelInterfaceColorRestrictVariable(Output.of(tunnelInterfaceColorRestrictVariable));
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(@Nullable Output<String> tunnelInterfaceColorVariable) {
            $.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceColorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            return tunnelInterfaceColorVariable(Output.of(tunnelInterfaceColorVariable));
        }

        /**
         * @param tunnelInterfaceControlConnections Allow Control Connection
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnections(@Nullable Output<Boolean> tunnelInterfaceControlConnections) {
            $.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            return this;
        }

        /**
         * @param tunnelInterfaceControlConnections Allow Control Connection
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnections(Boolean tunnelInterfaceControlConnections) {
            return tunnelInterfaceControlConnections(Output.of(tunnelInterfaceControlConnections));
        }

        /**
         * @param tunnelInterfaceControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnectionsVariable(@Nullable Output<String> tunnelInterfaceControlConnectionsVariable) {
            $.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceControlConnectionsVariable(String tunnelInterfaceControlConnectionsVariable) {
            return tunnelInterfaceControlConnectionsVariable(Output.of(tunnelInterfaceControlConnectionsVariable));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(@Nullable Output<List<CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs>> tunnelInterfaceEncapsulations) {
            $.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(List<CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs> tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(Output.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceEncapsulations Encapsulation for TLOC
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceEncapsulations(CiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulationArgs... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(@Nullable Output<String> tunnelInterfaceExcludeControllerGroupListVariable) {
            $.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupListVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            return tunnelInterfaceExcludeControllerGroupListVariable(Output.of(tunnelInterfaceExcludeControllerGroupListVariable));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(@Nullable Output<List<Integer>> tunnelInterfaceExcludeControllerGroupLists) {
            $.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(Output.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceExcludeControllerGroupLists Exclude the following controller groups defined in this list
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }

        /**
         * @param tunnelInterfaceGreTunnelDestinationIp Extend the TLOC to a remote node over GRE tunnel
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGreTunnelDestinationIp(@Nullable Output<String> tunnelInterfaceGreTunnelDestinationIp) {
            $.tunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            return this;
        }

        /**
         * @param tunnelInterfaceGreTunnelDestinationIp Extend the TLOC to a remote node over GRE tunnel
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGreTunnelDestinationIp(String tunnelInterfaceGreTunnelDestinationIp) {
            return tunnelInterfaceGreTunnelDestinationIp(Output.of(tunnelInterfaceGreTunnelDestinationIp));
        }

        /**
         * @param tunnelInterfaceGreTunnelDestinationIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGreTunnelDestinationIpVariable(@Nullable Output<String> tunnelInterfaceGreTunnelDestinationIpVariable) {
            $.tunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceGreTunnelDestinationIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGreTunnelDestinationIpVariable(String tunnelInterfaceGreTunnelDestinationIpVariable) {
            return tunnelInterfaceGreTunnelDestinationIpVariable(Output.of(tunnelInterfaceGreTunnelDestinationIpVariable));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(@Nullable Output<List<Integer>> tunnelInterfaceGroups) {
            $.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(List<Integer> tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(Output.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroups List of groups
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroups(Integer... tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(List.of(tunnelInterfaceGroups));
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(@Nullable Output<String> tunnelInterfaceGroupsVariable) {
            $.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceGroupsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            return tunnelInterfaceGroupsVariable(Output.of(tunnelInterfaceGroupsVariable));
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds
         *   - Range: `100`-`600000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(@Nullable Output<Integer> tunnelInterfaceHelloInterval) {
            $.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloInterval Set time period of control hello packets &lt;100..600000&gt; milli seconds
         *   - Range: `100`-`600000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            return tunnelInterfaceHelloInterval(Output.of(tunnelInterfaceHelloInterval));
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(@Nullable Output<String> tunnelInterfaceHelloIntervalVariable) {
            $.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            return tunnelInterfaceHelloIntervalVariable(Output.of(tunnelInterfaceHelloIntervalVariable));
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds
         *   - Range: `12`-`6000`
         *   - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(@Nullable Output<Integer> tunnelInterfaceHelloTolerance) {
            $.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloTolerance Set tolerance of control hello packets &lt;12..6000&gt; seconds
         *   - Range: `12`-`6000`
         *   - Default value: `12`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            return tunnelInterfaceHelloTolerance(Output.of(tunnelInterfaceHelloTolerance));
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(@Nullable Output<String> tunnelInterfaceHelloToleranceVariable) {
            $.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceHelloToleranceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            return tunnelInterfaceHelloToleranceVariable(Output.of(tunnelInterfaceHelloToleranceVariable));
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(@Nullable Output<Boolean> tunnelInterfaceLastResortCircuit) {
            $.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuit Set TLOC as last resort
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            return tunnelInterfaceLastResortCircuit(Output.of(tunnelInterfaceLastResortCircuit));
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(@Nullable Output<String> tunnelInterfaceLastResortCircuitVariable) {
            $.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLastResortCircuitVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            return tunnelInterfaceLastResortCircuitVariable(Output.of(tunnelInterfaceLastResortCircuitVariable));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(@Nullable Output<Boolean> tunnelInterfaceLowBandwidthLink) {
            $.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLink Set the interface as a low-bandwidth circuit
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            return tunnelInterfaceLowBandwidthLink(Output.of(tunnelInterfaceLowBandwidthLink));
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(@Nullable Output<String> tunnelInterfaceLowBandwidthLinkVariable) {
            $.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceLowBandwidthLinkVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            return tunnelInterfaceLowBandwidthLinkVariable(Output.of(tunnelInterfaceLowBandwidthLinkVariable));
        }

        /**
         * @param tunnelInterfaceMaxControlConnections Set the maximum number of control connections for this TLOC
         *   - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnections(@Nullable Output<Integer> tunnelInterfaceMaxControlConnections) {
            $.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }

        /**
         * @param tunnelInterfaceMaxControlConnections Set the maximum number of control connections for this TLOC
         *   - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            return tunnelInterfaceMaxControlConnections(Output.of(tunnelInterfaceMaxControlConnections));
        }

        /**
         * @param tunnelInterfaceMaxControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnectionsVariable(@Nullable Output<String> tunnelInterfaceMaxControlConnectionsVariable) {
            $.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceMaxControlConnectionsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            return tunnelInterfaceMaxControlConnectionsVariable(Output.of(tunnelInterfaceMaxControlConnectionsVariable));
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds
         *   - Range: `1`-`60`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(@Nullable Output<Integer> tunnelInterfaceNatRefreshInterval) {
            $.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshInterval Set time period of nat refresh packets &lt;1...60&gt; seconds
         *   - Range: `1`-`60`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            return tunnelInterfaceNatRefreshInterval(Output.of(tunnelInterfaceNatRefreshInterval));
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(@Nullable Output<String> tunnelInterfaceNatRefreshIntervalVariable) {
            $.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNatRefreshIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            return tunnelInterfaceNatRefreshIntervalVariable(Output.of(tunnelInterfaceNatRefreshIntervalVariable));
        }

        /**
         * @param tunnelInterfaceNetworkBroadcast Accept and respond to network-prefix-directed broadcasts)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcast(@Nullable Output<Boolean> tunnelInterfaceNetworkBroadcast) {
            $.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            return this;
        }

        /**
         * @param tunnelInterfaceNetworkBroadcast Accept and respond to network-prefix-directed broadcasts)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcast(Boolean tunnelInterfaceNetworkBroadcast) {
            return tunnelInterfaceNetworkBroadcast(Output.of(tunnelInterfaceNetworkBroadcast));
        }

        /**
         * @param tunnelInterfaceNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcastVariable(@Nullable Output<String> tunnelInterfaceNetworkBroadcastVariable) {
            $.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceNetworkBroadcastVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceNetworkBroadcastVariable(String tunnelInterfaceNetworkBroadcastVariable) {
            return tunnelInterfaceNetworkBroadcastVariable(Output.of(tunnelInterfaceNetworkBroadcastVariable));
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(@Nullable Output<Boolean> tunnelInterfacePortHop) {
            $.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }

        /**
         * @param tunnelInterfacePortHop Disallow port hopping on the tunnel interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            return tunnelInterfacePortHop(Output.of(tunnelInterfacePortHop));
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(@Nullable Output<String> tunnelInterfacePortHopVariable) {
            $.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }

        /**
         * @param tunnelInterfacePortHopVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            return tunnelInterfacePortHopVariable(Output.of(tunnelInterfacePortHopVariable));
        }

        /**
         * @param tunnelInterfacePropagateSgt CTS SGT Propagation configuration
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePropagateSgt(@Nullable Output<Boolean> tunnelInterfacePropagateSgt) {
            $.tunnelInterfacePropagateSgt = tunnelInterfacePropagateSgt;
            return this;
        }

        /**
         * @param tunnelInterfacePropagateSgt CTS SGT Propagation configuration
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePropagateSgt(Boolean tunnelInterfacePropagateSgt) {
            return tunnelInterfacePropagateSgt(Output.of(tunnelInterfacePropagateSgt));
        }

        /**
         * @param tunnelInterfacePropagateSgtVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePropagateSgtVariable(@Nullable Output<String> tunnelInterfacePropagateSgtVariable) {
            $.tunnelInterfacePropagateSgtVariable = tunnelInterfacePropagateSgtVariable;
            return this;
        }

        /**
         * @param tunnelInterfacePropagateSgtVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfacePropagateSgtVariable(String tunnelInterfacePropagateSgtVariable) {
            return tunnelInterfacePropagateSgtVariable(Output.of(tunnelInterfacePropagateSgtVariable));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(@Nullable Output<Integer> tunnelInterfaceTunnelTcpMss) {
            $.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMss Tunnel TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            return tunnelInterfaceTunnelTcpMss(Output.of(tunnelInterfaceTunnelTcpMss));
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(@Nullable Output<String> tunnelInterfaceTunnelTcpMssVariable) {
            $.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceTunnelTcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            return tunnelInterfaceTunnelTcpMssVariable(Output.of(tunnelInterfaceTunnelTcpMssVariable));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(@Nullable Output<Boolean> tunnelInterfaceVbondAsStunServer) {
            $.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServer Put this wan interface in STUN mode only
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            return tunnelInterfaceVbondAsStunServer(Output.of(tunnelInterfaceVbondAsStunServer));
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(@Nullable Output<String> tunnelInterfaceVbondAsStunServerVariable) {
            $.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVbondAsStunServerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            return tunnelInterfaceVbondAsStunServerVariable(Output.of(tunnelInterfaceVbondAsStunServerVariable));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt;
         *   - Range: `0`-`8`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(@Nullable Output<Integer> tunnelInterfaceVmanageConnectionPreference) {
            $.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreference Set interface preference for control connection to vManage &lt;0..8&gt;
         *   - Range: `0`-`8`
         *   - Default value: `5`
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            return tunnelInterfaceVmanageConnectionPreference(Output.of(tunnelInterfaceVmanageConnectionPreference));
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(@Nullable Output<String> tunnelInterfaceVmanageConnectionPreferenceVariable) {
            $.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }

        /**
         * @param tunnelInterfaceVmanageConnectionPreferenceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            return tunnelInterfaceVmanageConnectionPreferenceVariable(Output.of(tunnelInterfaceVmanageConnectionPreferenceVariable));
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode
         *   - Choices: `hub`, `spoke`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(@Nullable Output<String> tunnelQosMode) {
            $.tunnelQosMode = tunnelQosMode;
            return this;
        }

        /**
         * @param tunnelQosMode Set tunnel QoS mode
         *   - Choices: `hub`, `spoke`
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosMode(String tunnelQosMode) {
            return tunnelQosMode(Output.of(tunnelQosMode));
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(@Nullable Output<String> tunnelQosModeVariable) {
            $.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }

        /**
         * @param tunnelQosModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            return tunnelQosModeVariable(Output.of(tunnelQosModeVariable));
        }

        /**
         * @param udpTimeout Set NAT UDP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder udpTimeout(@Nullable Output<Integer> udpTimeout) {
            $.udpTimeout = udpTimeout;
            return this;
        }

        /**
         * @param udpTimeout Set NAT UDP session timeout, in minutes
         *   - Range: `1`-`8947`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder udpTimeout(Integer udpTimeout) {
            return udpTimeout(Output.of(udpTimeout));
        }

        /**
         * @param udpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder udpTimeoutVariable(@Nullable Output<String> udpTimeoutVariable) {
            $.udpTimeoutVariable = udpTimeoutVariable;
            return this;
        }

        /**
         * @param udpTimeoutVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder udpTimeoutVariable(String udpTimeoutVariable) {
            return udpTimeoutVariable(Output.of(udpTimeoutVariable));
        }

        public CiscoVpnInterfaceFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoVpnInterfaceFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoVpnInterfaceFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
