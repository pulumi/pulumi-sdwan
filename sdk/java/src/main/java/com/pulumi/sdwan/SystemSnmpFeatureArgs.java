// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.SystemSnmpFeatureCommunityArgs;
import com.pulumi.sdwan.inputs.SystemSnmpFeatureGroupArgs;
import com.pulumi.sdwan.inputs.SystemSnmpFeatureTrapTargetServerArgs;
import com.pulumi.sdwan.inputs.SystemSnmpFeatureUserArgs;
import com.pulumi.sdwan.inputs.SystemSnmpFeatureViewArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SystemSnmpFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final SystemSnmpFeatureArgs Empty = new SystemSnmpFeatureArgs();

    /**
     * Configure SNMP community
     * 
     */
    @Import(name="communities")
    private @Nullable Output<List<SystemSnmpFeatureCommunityArgs>> communities;

    /**
     * @return Configure SNMP community
     * 
     */
    public Optional<Output<List<SystemSnmpFeatureCommunityArgs>>> communities() {
        return Optional.ofNullable(this.communities);
    }

    /**
     * Set the contact for this managed node
     * 
     */
    @Import(name="contactPerson")
    private @Nullable Output<String> contactPerson;

    /**
     * @return Set the contact for this managed node
     * 
     */
    public Optional<Output<String>> contactPerson() {
        return Optional.ofNullable(this.contactPerson);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="contactPersonVariable")
    private @Nullable Output<String> contactPersonVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> contactPersonVariable() {
        return Optional.ofNullable(this.contactPersonVariable);
    }

    /**
     * The description of the Feature
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId", required=true)
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }

    /**
     * Configure an SNMP group
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<SystemSnmpFeatureGroupArgs>> groups;

    /**
     * @return Configure an SNMP group
     * 
     */
    public Optional<Output<List<SystemSnmpFeatureGroupArgs>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * Set the physical location of this managed node
     * 
     */
    @Import(name="locationOfDevice")
    private @Nullable Output<String> locationOfDevice;

    /**
     * @return Set the physical location of this managed node
     * 
     */
    public Optional<Output<String>> locationOfDevice() {
        return Optional.ofNullable(this.locationOfDevice);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="locationOfDeviceVariable")
    private @Nullable Output<String> locationOfDeviceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> locationOfDeviceVariable() {
        return Optional.ofNullable(this.locationOfDeviceVariable);
    }

    /**
     * The name of the Feature
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Enable or disable SNMP
     *   - Default value: `false`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Enable or disable SNMP
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * Configure SNMP server to receive SNMP traps
     * 
     */
    @Import(name="trapTargetServers")
    private @Nullable Output<List<SystemSnmpFeatureTrapTargetServerArgs>> trapTargetServers;

    /**
     * @return Configure SNMP server to receive SNMP traps
     * 
     */
    public Optional<Output<List<SystemSnmpFeatureTrapTargetServerArgs>>> trapTargetServers() {
        return Optional.ofNullable(this.trapTargetServers);
    }

    /**
     * Configure an SNMP user
     * 
     */
    @Import(name="users")
    private @Nullable Output<List<SystemSnmpFeatureUserArgs>> users;

    /**
     * @return Configure an SNMP user
     * 
     */
    public Optional<Output<List<SystemSnmpFeatureUserArgs>>> users() {
        return Optional.ofNullable(this.users);
    }

    /**
     * Configure a view record
     * 
     */
    @Import(name="views")
    private @Nullable Output<List<SystemSnmpFeatureViewArgs>> views;

    /**
     * @return Configure a view record
     * 
     */
    public Optional<Output<List<SystemSnmpFeatureViewArgs>>> views() {
        return Optional.ofNullable(this.views);
    }

    private SystemSnmpFeatureArgs() {}

    private SystemSnmpFeatureArgs(SystemSnmpFeatureArgs $) {
        this.communities = $.communities;
        this.contactPerson = $.contactPerson;
        this.contactPersonVariable = $.contactPersonVariable;
        this.description = $.description;
        this.featureProfileId = $.featureProfileId;
        this.groups = $.groups;
        this.locationOfDevice = $.locationOfDevice;
        this.locationOfDeviceVariable = $.locationOfDeviceVariable;
        this.name = $.name;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.trapTargetServers = $.trapTargetServers;
        this.users = $.users;
        this.views = $.views;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemSnmpFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemSnmpFeatureArgs $;

        public Builder() {
            $ = new SystemSnmpFeatureArgs();
        }

        public Builder(SystemSnmpFeatureArgs defaults) {
            $ = new SystemSnmpFeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param communities Configure SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communities(@Nullable Output<List<SystemSnmpFeatureCommunityArgs>> communities) {
            $.communities = communities;
            return this;
        }

        /**
         * @param communities Configure SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communities(List<SystemSnmpFeatureCommunityArgs> communities) {
            return communities(Output.of(communities));
        }

        /**
         * @param communities Configure SNMP community
         * 
         * @return builder
         * 
         */
        public Builder communities(SystemSnmpFeatureCommunityArgs... communities) {
            return communities(List.of(communities));
        }

        /**
         * @param contactPerson Set the contact for this managed node
         * 
         * @return builder
         * 
         */
        public Builder contactPerson(@Nullable Output<String> contactPerson) {
            $.contactPerson = contactPerson;
            return this;
        }

        /**
         * @param contactPerson Set the contact for this managed node
         * 
         * @return builder
         * 
         */
        public Builder contactPerson(String contactPerson) {
            return contactPerson(Output.of(contactPerson));
        }

        /**
         * @param contactPersonVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder contactPersonVariable(@Nullable Output<String> contactPersonVariable) {
            $.contactPersonVariable = contactPersonVariable;
            return this;
        }

        /**
         * @param contactPersonVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder contactPersonVariable(String contactPersonVariable) {
            return contactPersonVariable(Output.of(contactPersonVariable));
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param groups Configure an SNMP group
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<SystemSnmpFeatureGroupArgs>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups Configure an SNMP group
         * 
         * @return builder
         * 
         */
        public Builder groups(List<SystemSnmpFeatureGroupArgs> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups Configure an SNMP group
         * 
         * @return builder
         * 
         */
        public Builder groups(SystemSnmpFeatureGroupArgs... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param locationOfDevice Set the physical location of this managed node
         * 
         * @return builder
         * 
         */
        public Builder locationOfDevice(@Nullable Output<String> locationOfDevice) {
            $.locationOfDevice = locationOfDevice;
            return this;
        }

        /**
         * @param locationOfDevice Set the physical location of this managed node
         * 
         * @return builder
         * 
         */
        public Builder locationOfDevice(String locationOfDevice) {
            return locationOfDevice(Output.of(locationOfDevice));
        }

        /**
         * @param locationOfDeviceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder locationOfDeviceVariable(@Nullable Output<String> locationOfDeviceVariable) {
            $.locationOfDeviceVariable = locationOfDeviceVariable;
            return this;
        }

        /**
         * @param locationOfDeviceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder locationOfDeviceVariable(String locationOfDeviceVariable) {
            return locationOfDeviceVariable(Output.of(locationOfDeviceVariable));
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param shutdown Enable or disable SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Enable or disable SNMP
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param trapTargetServers Configure SNMP server to receive SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder trapTargetServers(@Nullable Output<List<SystemSnmpFeatureTrapTargetServerArgs>> trapTargetServers) {
            $.trapTargetServers = trapTargetServers;
            return this;
        }

        /**
         * @param trapTargetServers Configure SNMP server to receive SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder trapTargetServers(List<SystemSnmpFeatureTrapTargetServerArgs> trapTargetServers) {
            return trapTargetServers(Output.of(trapTargetServers));
        }

        /**
         * @param trapTargetServers Configure SNMP server to receive SNMP traps
         * 
         * @return builder
         * 
         */
        public Builder trapTargetServers(SystemSnmpFeatureTrapTargetServerArgs... trapTargetServers) {
            return trapTargetServers(List.of(trapTargetServers));
        }

        /**
         * @param users Configure an SNMP user
         * 
         * @return builder
         * 
         */
        public Builder users(@Nullable Output<List<SystemSnmpFeatureUserArgs>> users) {
            $.users = users;
            return this;
        }

        /**
         * @param users Configure an SNMP user
         * 
         * @return builder
         * 
         */
        public Builder users(List<SystemSnmpFeatureUserArgs> users) {
            return users(Output.of(users));
        }

        /**
         * @param users Configure an SNMP user
         * 
         * @return builder
         * 
         */
        public Builder users(SystemSnmpFeatureUserArgs... users) {
            return users(List.of(users));
        }

        /**
         * @param views Configure a view record
         * 
         * @return builder
         * 
         */
        public Builder views(@Nullable Output<List<SystemSnmpFeatureViewArgs>> views) {
            $.views = views;
            return this;
        }

        /**
         * @param views Configure a view record
         * 
         * @return builder
         * 
         */
        public Builder views(List<SystemSnmpFeatureViewArgs> views) {
            return views(Output.of(views));
        }

        /**
         * @param views Configure a view record
         * 
         * @return builder
         * 
         */
        public Builder views(SystemSnmpFeatureViewArgs... views) {
            return views(List.of(views));
        }

        public SystemSnmpFeatureArgs build() {
            if ($.featureProfileId == null) {
                throw new MissingRequiredPropertyException("SystemSnmpFeatureArgs", "featureProfileId");
            }
            return $;
        }
    }

}
