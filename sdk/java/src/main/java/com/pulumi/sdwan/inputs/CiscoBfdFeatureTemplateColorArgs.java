// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoBfdFeatureTemplateColorArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoBfdFeatureTemplateColorArgs Empty = new CiscoBfdFeatureTemplateColorArgs();

    /**
     * Set color that identifies the WAN transport tunnel
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     * 
     */
    @Import(name="color")
    private @Nullable Output<String> color;

    /**
     * @return Set color that identifies the WAN transport tunnel
     *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
     * 
     */
    public Optional<Output<String>> color() {
        return Optional.ofNullable(this.color);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="colorVariable")
    private @Nullable Output<String> colorVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> colorVariable() {
        return Optional.ofNullable(this.colorVariable);
    }

    /**
     * Set BFD Default DSCP value for tloc color
     *   - Range: `0`-`63`
     *   - Default value: `48`
     * 
     */
    @Import(name="dscp")
    private @Nullable Output<Integer> dscp;

    /**
     * @return Set BFD Default DSCP value for tloc color
     *   - Range: `0`-`63`
     *   - Default value: `48`
     * 
     */
    public Optional<Output<Integer>> dscp() {
        return Optional.ofNullable(this.dscp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dscpVariable")
    private @Nullable Output<String> dscpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dscpVariable() {
        return Optional.ofNullable(this.dscpVariable);
    }

    /**
     * Set how often BFD sends Hello packets
     *   - Range: `100`-`300000`
     *   - Default value: `1000`
     * 
     */
    @Import(name="helloInterval")
    private @Nullable Output<Integer> helloInterval;

    /**
     * @return Set how often BFD sends Hello packets
     *   - Range: `100`-`300000`
     *   - Default value: `1000`
     * 
     */
    public Optional<Output<Integer>> helloInterval() {
        return Optional.ofNullable(this.helloInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="helloIntervalVariable")
    private @Nullable Output<String> helloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> helloIntervalVariable() {
        return Optional.ofNullable(this.helloIntervalVariable);
    }

    /**
     * Set how many Hello packet intervals to wait before declaring that a tunnel has failed
     *   - Range: `1`-`60`
     *   - Default value: `7`
     * 
     */
    @Import(name="multiplier")
    private @Nullable Output<Integer> multiplier;

    /**
     * @return Set how many Hello packet intervals to wait before declaring that a tunnel has failed
     *   - Range: `1`-`60`
     *   - Default value: `7`
     * 
     */
    public Optional<Output<Integer>> multiplier() {
        return Optional.ofNullable(this.multiplier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="multiplierVariable")
    private @Nullable Output<String> multiplierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> multiplierVariable() {
        return Optional.ofNullable(this.multiplierVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Control automatic path MTU discovery
     *   - Default value: `true`
     * 
     */
    @Import(name="pmtuDiscovery")
    private @Nullable Output<Boolean> pmtuDiscovery;

    /**
     * @return Control automatic path MTU discovery
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> pmtuDiscovery() {
        return Optional.ofNullable(this.pmtuDiscovery);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="pmtuDiscoveryVariable")
    private @Nullable Output<String> pmtuDiscoveryVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> pmtuDiscoveryVariable() {
        return Optional.ofNullable(this.pmtuDiscoveryVariable);
    }

    private CiscoBfdFeatureTemplateColorArgs() {}

    private CiscoBfdFeatureTemplateColorArgs(CiscoBfdFeatureTemplateColorArgs $) {
        this.color = $.color;
        this.colorVariable = $.colorVariable;
        this.dscp = $.dscp;
        this.dscpVariable = $.dscpVariable;
        this.helloInterval = $.helloInterval;
        this.helloIntervalVariable = $.helloIntervalVariable;
        this.multiplier = $.multiplier;
        this.multiplierVariable = $.multiplierVariable;
        this.optional = $.optional;
        this.pmtuDiscovery = $.pmtuDiscovery;
        this.pmtuDiscoveryVariable = $.pmtuDiscoveryVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoBfdFeatureTemplateColorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoBfdFeatureTemplateColorArgs $;

        public Builder() {
            $ = new CiscoBfdFeatureTemplateColorArgs();
        }

        public Builder(CiscoBfdFeatureTemplateColorArgs defaults) {
            $ = new CiscoBfdFeatureTemplateColorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param color Set color that identifies the WAN transport tunnel
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         * 
         * @return builder
         * 
         */
        public Builder color(@Nullable Output<String> color) {
            $.color = color;
            return this;
        }

        /**
         * @param color Set color that identifies the WAN transport tunnel
         *   - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`, `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`, `private4`, `private5`, `private6`
         * 
         * @return builder
         * 
         */
        public Builder color(String color) {
            return color(Output.of(color));
        }

        /**
         * @param colorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder colorVariable(@Nullable Output<String> colorVariable) {
            $.colorVariable = colorVariable;
            return this;
        }

        /**
         * @param colorVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder colorVariable(String colorVariable) {
            return colorVariable(Output.of(colorVariable));
        }

        /**
         * @param dscp Set BFD Default DSCP value for tloc color
         *   - Range: `0`-`63`
         *   - Default value: `48`
         * 
         * @return builder
         * 
         */
        public Builder dscp(@Nullable Output<Integer> dscp) {
            $.dscp = dscp;
            return this;
        }

        /**
         * @param dscp Set BFD Default DSCP value for tloc color
         *   - Range: `0`-`63`
         *   - Default value: `48`
         * 
         * @return builder
         * 
         */
        public Builder dscp(Integer dscp) {
            return dscp(Output.of(dscp));
        }

        /**
         * @param dscpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dscpVariable(@Nullable Output<String> dscpVariable) {
            $.dscpVariable = dscpVariable;
            return this;
        }

        /**
         * @param dscpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dscpVariable(String dscpVariable) {
            return dscpVariable(Output.of(dscpVariable));
        }

        /**
         * @param helloInterval Set how often BFD sends Hello packets
         *   - Range: `100`-`300000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder helloInterval(@Nullable Output<Integer> helloInterval) {
            $.helloInterval = helloInterval;
            return this;
        }

        /**
         * @param helloInterval Set how often BFD sends Hello packets
         *   - Range: `100`-`300000`
         *   - Default value: `1000`
         * 
         * @return builder
         * 
         */
        public Builder helloInterval(Integer helloInterval) {
            return helloInterval(Output.of(helloInterval));
        }

        /**
         * @param helloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder helloIntervalVariable(@Nullable Output<String> helloIntervalVariable) {
            $.helloIntervalVariable = helloIntervalVariable;
            return this;
        }

        /**
         * @param helloIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder helloIntervalVariable(String helloIntervalVariable) {
            return helloIntervalVariable(Output.of(helloIntervalVariable));
        }

        /**
         * @param multiplier Set how many Hello packet intervals to wait before declaring that a tunnel has failed
         *   - Range: `1`-`60`
         *   - Default value: `7`
         * 
         * @return builder
         * 
         */
        public Builder multiplier(@Nullable Output<Integer> multiplier) {
            $.multiplier = multiplier;
            return this;
        }

        /**
         * @param multiplier Set how many Hello packet intervals to wait before declaring that a tunnel has failed
         *   - Range: `1`-`60`
         *   - Default value: `7`
         * 
         * @return builder
         * 
         */
        public Builder multiplier(Integer multiplier) {
            return multiplier(Output.of(multiplier));
        }

        /**
         * @param multiplierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiplierVariable(@Nullable Output<String> multiplierVariable) {
            $.multiplierVariable = multiplierVariable;
            return this;
        }

        /**
         * @param multiplierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiplierVariable(String multiplierVariable) {
            return multiplierVariable(Output.of(multiplierVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param pmtuDiscovery Control automatic path MTU discovery
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscovery(@Nullable Output<Boolean> pmtuDiscovery) {
            $.pmtuDiscovery = pmtuDiscovery;
            return this;
        }

        /**
         * @param pmtuDiscovery Control automatic path MTU discovery
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscovery(Boolean pmtuDiscovery) {
            return pmtuDiscovery(Output.of(pmtuDiscovery));
        }

        /**
         * @param pmtuDiscoveryVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscoveryVariable(@Nullable Output<String> pmtuDiscoveryVariable) {
            $.pmtuDiscoveryVariable = pmtuDiscoveryVariable;
            return this;
        }

        /**
         * @param pmtuDiscoveryVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pmtuDiscoveryVariable(String pmtuDiscoveryVariable) {
            return pmtuDiscoveryVariable(Output.of(pmtuDiscoveryVariable));
        }

        public CiscoBfdFeatureTemplateColorArgs build() {
            return $;
        }
    }

}
