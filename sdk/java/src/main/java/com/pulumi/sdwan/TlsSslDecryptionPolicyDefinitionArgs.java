// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.TlsSslDecryptionPolicyDefinitionNetworkRuleArgs;
import com.pulumi.sdwan.inputs.TlsSslDecryptionPolicyDefinitionUrlRuleArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsSslDecryptionPolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsSslDecryptionPolicyDefinitionArgs Empty = new TlsSslDecryptionPolicyDefinitionArgs();

    /**
     * Certificate Lifetime(in Days)
     * 
     */
    @Import(name="certificateLifetimeInDays")
    private @Nullable Output<Integer> certificateLifetimeInDays;

    /**
     * @return Certificate Lifetime(in Days)
     * 
     */
    public Optional<Output<Integer>> certificateLifetimeInDays() {
        return Optional.ofNullable(this.certificateLifetimeInDays);
    }

    /**
     * Certificate revocation status
     *   - Choices: `ocsp`, `none`
     * 
     */
    @Import(name="certificateRevocationStatus")
    private @Nullable Output<String> certificateRevocationStatus;

    /**
     * @return Certificate revocation status
     *   - Choices: `ocsp`, `none`
     * 
     */
    public Optional<Output<String>> certificateRevocationStatus() {
        return Optional.ofNullable(this.certificateRevocationStatus);
    }

    /**
     * Default action (applies when `mode` set to `security`)
     *   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
     * 
     */
    @Import(name="defaultAction")
    private @Nullable Output<String> defaultAction;

    /**
     * @return Default action (applies when `mode` set to `security`)
     *   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
     * 
     */
    public Optional<Output<String>> defaultAction() {
        return Optional.ofNullable(this.defaultAction);
    }

    /**
     * The description of the policy definition.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the policy definition.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * EC Key Type
     *   - Choices: `P256`, `P384`, `P521`
     * 
     */
    @Import(name="ecKeyType")
    private @Nullable Output<String> ecKeyType;

    /**
     * @return EC Key Type
     *   - Choices: `P256`, `P384`, `P521`
     * 
     */
    public Optional<Output<String>> ecKeyType() {
        return Optional.ofNullable(this.ecKeyType);
    }

    /**
     * Expired certificate action
     *   - Choices: `drop`, `decrypt`
     * 
     */
    @Import(name="expiredCertificate")
    private @Nullable Output<String> expiredCertificate;

    /**
     * @return Expired certificate action
     *   - Choices: `drop`, `decrypt`
     * 
     */
    public Optional<Output<String>> expiredCertificate() {
        return Optional.ofNullable(this.expiredCertificate);
    }

    /**
     * Failure mode
     *   - Choices: `open`, `close`
     * 
     */
    @Import(name="failureMode")
    private @Nullable Output<String> failureMode;

    /**
     * @return Failure mode
     *   - Choices: `open`, `close`
     * 
     */
    public Optional<Output<String>> failureMode() {
        return Optional.ofNullable(this.failureMode);
    }

    /**
     * Minimal TLS Version
     *   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     * 
     */
    @Import(name="minimalTlsVersion")
    private @Nullable Output<String> minimalTlsVersion;

    /**
     * @return Minimal TLS Version
     *   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
     * 
     */
    public Optional<Output<String>> minimalTlsVersion() {
        return Optional.ofNullable(this.minimalTlsVersion);
    }

    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the policy definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of network rules (applies when `mode` set to `security`)
     * 
     */
    @Import(name="networkRules")
    private @Nullable Output<List<TlsSslDecryptionPolicyDefinitionNetworkRuleArgs>> networkRules;

    /**
     * @return List of network rules (applies when `mode` set to `security`)
     * 
     */
    public Optional<Output<List<TlsSslDecryptionPolicyDefinitionNetworkRuleArgs>>> networkRules() {
        return Optional.ofNullable(this.networkRules);
    }

    /**
     * RSA key pair modules
     *   - Choices: `1024`, `2048`, `4096`
     * 
     */
    @Import(name="rsaKeyPairModulus")
    private @Nullable Output<String> rsaKeyPairModulus;

    /**
     * @return RSA key pair modules
     *   - Choices: `1024`, `2048`, `4096`
     * 
     */
    public Optional<Output<String>> rsaKeyPairModulus() {
        return Optional.ofNullable(this.rsaKeyPairModulus);
    }

    /**
     * SSL decryption enabled
     * 
     */
    @Import(name="sslDecryptionEnabled")
    private @Nullable Output<String> sslDecryptionEnabled;

    /**
     * @return SSL decryption enabled
     * 
     */
    public Optional<Output<String>> sslDecryptionEnabled() {
        return Optional.ofNullable(this.sslDecryptionEnabled);
    }

    /**
     * Unknown revocation status action
     *   - Choices: `drop`, `decrypt`
     * 
     */
    @Import(name="unknownRevocationStatus")
    private @Nullable Output<String> unknownRevocationStatus;

    /**
     * @return Unknown revocation status action
     *   - Choices: `drop`, `decrypt`
     * 
     */
    public Optional<Output<String>> unknownRevocationStatus() {
        return Optional.ofNullable(this.unknownRevocationStatus);
    }

    /**
     * Unsupported cipher suites action
     *   - Choices: `drop`, `no-decrypt`
     * 
     */
    @Import(name="unsupportedCipherSuites")
    private @Nullable Output<String> unsupportedCipherSuites;

    /**
     * @return Unsupported cipher suites action
     *   - Choices: `drop`, `no-decrypt`
     * 
     */
    public Optional<Output<String>> unsupportedCipherSuites() {
        return Optional.ofNullable(this.unsupportedCipherSuites);
    }

    /**
     * Unsupported protocol versions action
     *   - Choices: `drop`, `no-decrypt`
     * 
     */
    @Import(name="unsupportedProtocolVersions")
    private @Nullable Output<String> unsupportedProtocolVersions;

    /**
     * @return Unsupported protocol versions action
     *   - Choices: `drop`, `no-decrypt`
     * 
     */
    public Optional<Output<String>> unsupportedProtocolVersions() {
        return Optional.ofNullable(this.unsupportedProtocolVersions);
    }

    /**
     * Untrusted certificate action
     *   - Choices: `drop`, `decrypt`
     * 
     */
    @Import(name="untrustedCertificate")
    private @Nullable Output<String> untrustedCertificate;

    /**
     * @return Untrusted certificate action
     *   - Choices: `drop`, `decrypt`
     * 
     */
    public Optional<Output<String>> untrustedCertificate() {
        return Optional.ofNullable(this.untrustedCertificate);
    }

    /**
     * List of url rules (applies when `mode` set to `security`)
     * 
     */
    @Import(name="urlRules")
    private @Nullable Output<List<TlsSslDecryptionPolicyDefinitionUrlRuleArgs>> urlRules;

    /**
     * @return List of url rules (applies when `mode` set to `security`)
     * 
     */
    public Optional<Output<List<TlsSslDecryptionPolicyDefinitionUrlRuleArgs>>> urlRules() {
        return Optional.ofNullable(this.urlRules);
    }

    /**
     * Use default CA certificate bundle
     * 
     */
    @Import(name="useDefaultCaCertBundle")
    private @Nullable Output<Boolean> useDefaultCaCertBundle;

    /**
     * @return Use default CA certificate bundle
     * 
     */
    public Optional<Output<Boolean>> useDefaultCaCertBundle() {
        return Optional.ofNullable(this.useDefaultCaCertBundle);
    }

    private TlsSslDecryptionPolicyDefinitionArgs() {}

    private TlsSslDecryptionPolicyDefinitionArgs(TlsSslDecryptionPolicyDefinitionArgs $) {
        this.certificateLifetimeInDays = $.certificateLifetimeInDays;
        this.certificateRevocationStatus = $.certificateRevocationStatus;
        this.defaultAction = $.defaultAction;
        this.description = $.description;
        this.ecKeyType = $.ecKeyType;
        this.expiredCertificate = $.expiredCertificate;
        this.failureMode = $.failureMode;
        this.minimalTlsVersion = $.minimalTlsVersion;
        this.mode = $.mode;
        this.name = $.name;
        this.networkRules = $.networkRules;
        this.rsaKeyPairModulus = $.rsaKeyPairModulus;
        this.sslDecryptionEnabled = $.sslDecryptionEnabled;
        this.unknownRevocationStatus = $.unknownRevocationStatus;
        this.unsupportedCipherSuites = $.unsupportedCipherSuites;
        this.unsupportedProtocolVersions = $.unsupportedProtocolVersions;
        this.untrustedCertificate = $.untrustedCertificate;
        this.urlRules = $.urlRules;
        this.useDefaultCaCertBundle = $.useDefaultCaCertBundle;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsSslDecryptionPolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsSslDecryptionPolicyDefinitionArgs $;

        public Builder() {
            $ = new TlsSslDecryptionPolicyDefinitionArgs();
        }

        public Builder(TlsSslDecryptionPolicyDefinitionArgs defaults) {
            $ = new TlsSslDecryptionPolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateLifetimeInDays Certificate Lifetime(in Days)
         * 
         * @return builder
         * 
         */
        public Builder certificateLifetimeInDays(@Nullable Output<Integer> certificateLifetimeInDays) {
            $.certificateLifetimeInDays = certificateLifetimeInDays;
            return this;
        }

        /**
         * @param certificateLifetimeInDays Certificate Lifetime(in Days)
         * 
         * @return builder
         * 
         */
        public Builder certificateLifetimeInDays(Integer certificateLifetimeInDays) {
            return certificateLifetimeInDays(Output.of(certificateLifetimeInDays));
        }

        /**
         * @param certificateRevocationStatus Certificate revocation status
         *   - Choices: `ocsp`, `none`
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationStatus(@Nullable Output<String> certificateRevocationStatus) {
            $.certificateRevocationStatus = certificateRevocationStatus;
            return this;
        }

        /**
         * @param certificateRevocationStatus Certificate revocation status
         *   - Choices: `ocsp`, `none`
         * 
         * @return builder
         * 
         */
        public Builder certificateRevocationStatus(String certificateRevocationStatus) {
            return certificateRevocationStatus(Output.of(certificateRevocationStatus));
        }

        /**
         * @param defaultAction Default action (applies when `mode` set to `security`)
         *   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(@Nullable Output<String> defaultAction) {
            $.defaultAction = defaultAction;
            return this;
        }

        /**
         * @param defaultAction Default action (applies when `mode` set to `security`)
         *   - Choices: `noIntent`, `doNotDecrypt`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder defaultAction(String defaultAction) {
            return defaultAction(Output.of(defaultAction));
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ecKeyType EC Key Type
         *   - Choices: `P256`, `P384`, `P521`
         * 
         * @return builder
         * 
         */
        public Builder ecKeyType(@Nullable Output<String> ecKeyType) {
            $.ecKeyType = ecKeyType;
            return this;
        }

        /**
         * @param ecKeyType EC Key Type
         *   - Choices: `P256`, `P384`, `P521`
         * 
         * @return builder
         * 
         */
        public Builder ecKeyType(String ecKeyType) {
            return ecKeyType(Output.of(ecKeyType));
        }

        /**
         * @param expiredCertificate Expired certificate action
         *   - Choices: `drop`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder expiredCertificate(@Nullable Output<String> expiredCertificate) {
            $.expiredCertificate = expiredCertificate;
            return this;
        }

        /**
         * @param expiredCertificate Expired certificate action
         *   - Choices: `drop`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder expiredCertificate(String expiredCertificate) {
            return expiredCertificate(Output.of(expiredCertificate));
        }

        /**
         * @param failureMode Failure mode
         *   - Choices: `open`, `close`
         * 
         * @return builder
         * 
         */
        public Builder failureMode(@Nullable Output<String> failureMode) {
            $.failureMode = failureMode;
            return this;
        }

        /**
         * @param failureMode Failure mode
         *   - Choices: `open`, `close`
         * 
         * @return builder
         * 
         */
        public Builder failureMode(String failureMode) {
            return failureMode(Output.of(failureMode));
        }

        /**
         * @param minimalTlsVersion Minimal TLS Version
         *   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
         * 
         * @return builder
         * 
         */
        public Builder minimalTlsVersion(@Nullable Output<String> minimalTlsVersion) {
            $.minimalTlsVersion = minimalTlsVersion;
            return this;
        }

        /**
         * @param minimalTlsVersion Minimal TLS Version
         *   - Choices: `TLSv1.0`, `TLSv1.1`, `TLSv1.2`
         * 
         * @return builder
         * 
         */
        public Builder minimalTlsVersion(String minimalTlsVersion) {
            return minimalTlsVersion(Output.of(minimalTlsVersion));
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkRules List of network rules (applies when `mode` set to `security`)
         * 
         * @return builder
         * 
         */
        public Builder networkRules(@Nullable Output<List<TlsSslDecryptionPolicyDefinitionNetworkRuleArgs>> networkRules) {
            $.networkRules = networkRules;
            return this;
        }

        /**
         * @param networkRules List of network rules (applies when `mode` set to `security`)
         * 
         * @return builder
         * 
         */
        public Builder networkRules(List<TlsSslDecryptionPolicyDefinitionNetworkRuleArgs> networkRules) {
            return networkRules(Output.of(networkRules));
        }

        /**
         * @param networkRules List of network rules (applies when `mode` set to `security`)
         * 
         * @return builder
         * 
         */
        public Builder networkRules(TlsSslDecryptionPolicyDefinitionNetworkRuleArgs... networkRules) {
            return networkRules(List.of(networkRules));
        }

        /**
         * @param rsaKeyPairModulus RSA key pair modules
         *   - Choices: `1024`, `2048`, `4096`
         * 
         * @return builder
         * 
         */
        public Builder rsaKeyPairModulus(@Nullable Output<String> rsaKeyPairModulus) {
            $.rsaKeyPairModulus = rsaKeyPairModulus;
            return this;
        }

        /**
         * @param rsaKeyPairModulus RSA key pair modules
         *   - Choices: `1024`, `2048`, `4096`
         * 
         * @return builder
         * 
         */
        public Builder rsaKeyPairModulus(String rsaKeyPairModulus) {
            return rsaKeyPairModulus(Output.of(rsaKeyPairModulus));
        }

        /**
         * @param sslDecryptionEnabled SSL decryption enabled
         * 
         * @return builder
         * 
         */
        public Builder sslDecryptionEnabled(@Nullable Output<String> sslDecryptionEnabled) {
            $.sslDecryptionEnabled = sslDecryptionEnabled;
            return this;
        }

        /**
         * @param sslDecryptionEnabled SSL decryption enabled
         * 
         * @return builder
         * 
         */
        public Builder sslDecryptionEnabled(String sslDecryptionEnabled) {
            return sslDecryptionEnabled(Output.of(sslDecryptionEnabled));
        }

        /**
         * @param unknownRevocationStatus Unknown revocation status action
         *   - Choices: `drop`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder unknownRevocationStatus(@Nullable Output<String> unknownRevocationStatus) {
            $.unknownRevocationStatus = unknownRevocationStatus;
            return this;
        }

        /**
         * @param unknownRevocationStatus Unknown revocation status action
         *   - Choices: `drop`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder unknownRevocationStatus(String unknownRevocationStatus) {
            return unknownRevocationStatus(Output.of(unknownRevocationStatus));
        }

        /**
         * @param unsupportedCipherSuites Unsupported cipher suites action
         *   - Choices: `drop`, `no-decrypt`
         * 
         * @return builder
         * 
         */
        public Builder unsupportedCipherSuites(@Nullable Output<String> unsupportedCipherSuites) {
            $.unsupportedCipherSuites = unsupportedCipherSuites;
            return this;
        }

        /**
         * @param unsupportedCipherSuites Unsupported cipher suites action
         *   - Choices: `drop`, `no-decrypt`
         * 
         * @return builder
         * 
         */
        public Builder unsupportedCipherSuites(String unsupportedCipherSuites) {
            return unsupportedCipherSuites(Output.of(unsupportedCipherSuites));
        }

        /**
         * @param unsupportedProtocolVersions Unsupported protocol versions action
         *   - Choices: `drop`, `no-decrypt`
         * 
         * @return builder
         * 
         */
        public Builder unsupportedProtocolVersions(@Nullable Output<String> unsupportedProtocolVersions) {
            $.unsupportedProtocolVersions = unsupportedProtocolVersions;
            return this;
        }

        /**
         * @param unsupportedProtocolVersions Unsupported protocol versions action
         *   - Choices: `drop`, `no-decrypt`
         * 
         * @return builder
         * 
         */
        public Builder unsupportedProtocolVersions(String unsupportedProtocolVersions) {
            return unsupportedProtocolVersions(Output.of(unsupportedProtocolVersions));
        }

        /**
         * @param untrustedCertificate Untrusted certificate action
         *   - Choices: `drop`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder untrustedCertificate(@Nullable Output<String> untrustedCertificate) {
            $.untrustedCertificate = untrustedCertificate;
            return this;
        }

        /**
         * @param untrustedCertificate Untrusted certificate action
         *   - Choices: `drop`, `decrypt`
         * 
         * @return builder
         * 
         */
        public Builder untrustedCertificate(String untrustedCertificate) {
            return untrustedCertificate(Output.of(untrustedCertificate));
        }

        /**
         * @param urlRules List of url rules (applies when `mode` set to `security`)
         * 
         * @return builder
         * 
         */
        public Builder urlRules(@Nullable Output<List<TlsSslDecryptionPolicyDefinitionUrlRuleArgs>> urlRules) {
            $.urlRules = urlRules;
            return this;
        }

        /**
         * @param urlRules List of url rules (applies when `mode` set to `security`)
         * 
         * @return builder
         * 
         */
        public Builder urlRules(List<TlsSslDecryptionPolicyDefinitionUrlRuleArgs> urlRules) {
            return urlRules(Output.of(urlRules));
        }

        /**
         * @param urlRules List of url rules (applies when `mode` set to `security`)
         * 
         * @return builder
         * 
         */
        public Builder urlRules(TlsSslDecryptionPolicyDefinitionUrlRuleArgs... urlRules) {
            return urlRules(List.of(urlRules));
        }

        /**
         * @param useDefaultCaCertBundle Use default CA certificate bundle
         * 
         * @return builder
         * 
         */
        public Builder useDefaultCaCertBundle(@Nullable Output<Boolean> useDefaultCaCertBundle) {
            $.useDefaultCaCertBundle = useDefaultCaCertBundle;
            return this;
        }

        /**
         * @param useDefaultCaCertBundle Use default CA certificate bundle
         * 
         * @return builder
         * 
         */
        public Builder useDefaultCaCertBundle(Boolean useDefaultCaCertBundle) {
            return useDefaultCaCertBundle(Output.of(useDefaultCaCertBundle));
        }

        public TlsSslDecryptionPolicyDefinitionArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("TlsSslDecryptionPolicyDefinitionArgs", "description");
            }
            return $;
        }
    }

}
