// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportT1E1ControllerFeatureEntryChannelGroup;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportT1E1ControllerFeatureEntry {
    /**
     * @return Cable Config
     * 
     */
    private String cableLength;
    /**
     * @return Channel Group List
     * 
     */
    private List<GetTransportT1E1ControllerFeatureEntryChannelGroup> channelGroups;
    /**
     * @return Clock Source
     * 
     */
    private String clockSource;
    /**
     * @return Description
     * 
     */
    private String description;
    /**
     * @return Variable name
     * 
     */
    private String descriptionVariable;
    /**
     * @return Card Type
     * 
     */
    private String e1Description;
    /**
     * @return Framing
     * 
     */
    private String e1Framing;
    /**
     * @return Variable name
     * 
     */
    private String e1FramingVariable;
    /**
     * @return LineCode
     * 
     */
    private String e1Linecode;
    /**
     * @return Variable name
     * 
     */
    private String e1LinecodeVariable;
    /**
     * @return length
     * 
     */
    private String lengthLong;
    /**
     * @return Variable name
     * 
     */
    private String lengthLongVariable;
    /**
     * @return length
     * 
     */
    private String lengthShort;
    /**
     * @return Variable name
     * 
     */
    private String lengthShortVariable;
    /**
     * @return Line Mode
     * 
     */
    private String lineMode;
    /**
     * @return Variable name
     * 
     */
    private String lineModeVariable;
    /**
     * @return Card Type
     * 
     */
    private String t1Description;
    /**
     * @return Framing
     * 
     */
    private String t1Framing;
    /**
     * @return Variable name
     * 
     */
    private String t1FramingVariable;
    /**
     * @return LineCode
     * 
     */
    private String t1Linecode;
    /**
     * @return Variable name
     * 
     */
    private String t1LinecodeVariable;

    private GetTransportT1E1ControllerFeatureEntry() {}
    /**
     * @return Cable Config
     * 
     */
    public String cableLength() {
        return this.cableLength;
    }
    /**
     * @return Channel Group List
     * 
     */
    public List<GetTransportT1E1ControllerFeatureEntryChannelGroup> channelGroups() {
        return this.channelGroups;
    }
    /**
     * @return Clock Source
     * 
     */
    public String clockSource() {
        return this.clockSource;
    }
    /**
     * @return Description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Variable name
     * 
     */
    public String descriptionVariable() {
        return this.descriptionVariable;
    }
    /**
     * @return Card Type
     * 
     */
    public String e1Description() {
        return this.e1Description;
    }
    /**
     * @return Framing
     * 
     */
    public String e1Framing() {
        return this.e1Framing;
    }
    /**
     * @return Variable name
     * 
     */
    public String e1FramingVariable() {
        return this.e1FramingVariable;
    }
    /**
     * @return LineCode
     * 
     */
    public String e1Linecode() {
        return this.e1Linecode;
    }
    /**
     * @return Variable name
     * 
     */
    public String e1LinecodeVariable() {
        return this.e1LinecodeVariable;
    }
    /**
     * @return length
     * 
     */
    public String lengthLong() {
        return this.lengthLong;
    }
    /**
     * @return Variable name
     * 
     */
    public String lengthLongVariable() {
        return this.lengthLongVariable;
    }
    /**
     * @return length
     * 
     */
    public String lengthShort() {
        return this.lengthShort;
    }
    /**
     * @return Variable name
     * 
     */
    public String lengthShortVariable() {
        return this.lengthShortVariable;
    }
    /**
     * @return Line Mode
     * 
     */
    public String lineMode() {
        return this.lineMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String lineModeVariable() {
        return this.lineModeVariable;
    }
    /**
     * @return Card Type
     * 
     */
    public String t1Description() {
        return this.t1Description;
    }
    /**
     * @return Framing
     * 
     */
    public String t1Framing() {
        return this.t1Framing;
    }
    /**
     * @return Variable name
     * 
     */
    public String t1FramingVariable() {
        return this.t1FramingVariable;
    }
    /**
     * @return LineCode
     * 
     */
    public String t1Linecode() {
        return this.t1Linecode;
    }
    /**
     * @return Variable name
     * 
     */
    public String t1LinecodeVariable() {
        return this.t1LinecodeVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportT1E1ControllerFeatureEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cableLength;
        private List<GetTransportT1E1ControllerFeatureEntryChannelGroup> channelGroups;
        private String clockSource;
        private String description;
        private String descriptionVariable;
        private String e1Description;
        private String e1Framing;
        private String e1FramingVariable;
        private String e1Linecode;
        private String e1LinecodeVariable;
        private String lengthLong;
        private String lengthLongVariable;
        private String lengthShort;
        private String lengthShortVariable;
        private String lineMode;
        private String lineModeVariable;
        private String t1Description;
        private String t1Framing;
        private String t1FramingVariable;
        private String t1Linecode;
        private String t1LinecodeVariable;
        public Builder() {}
        public Builder(GetTransportT1E1ControllerFeatureEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cableLength = defaults.cableLength;
    	      this.channelGroups = defaults.channelGroups;
    	      this.clockSource = defaults.clockSource;
    	      this.description = defaults.description;
    	      this.descriptionVariable = defaults.descriptionVariable;
    	      this.e1Description = defaults.e1Description;
    	      this.e1Framing = defaults.e1Framing;
    	      this.e1FramingVariable = defaults.e1FramingVariable;
    	      this.e1Linecode = defaults.e1Linecode;
    	      this.e1LinecodeVariable = defaults.e1LinecodeVariable;
    	      this.lengthLong = defaults.lengthLong;
    	      this.lengthLongVariable = defaults.lengthLongVariable;
    	      this.lengthShort = defaults.lengthShort;
    	      this.lengthShortVariable = defaults.lengthShortVariable;
    	      this.lineMode = defaults.lineMode;
    	      this.lineModeVariable = defaults.lineModeVariable;
    	      this.t1Description = defaults.t1Description;
    	      this.t1Framing = defaults.t1Framing;
    	      this.t1FramingVariable = defaults.t1FramingVariable;
    	      this.t1Linecode = defaults.t1Linecode;
    	      this.t1LinecodeVariable = defaults.t1LinecodeVariable;
        }

        @CustomType.Setter
        public Builder cableLength(String cableLength) {
            if (cableLength == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "cableLength");
            }
            this.cableLength = cableLength;
            return this;
        }
        @CustomType.Setter
        public Builder channelGroups(List<GetTransportT1E1ControllerFeatureEntryChannelGroup> channelGroups) {
            if (channelGroups == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "channelGroups");
            }
            this.channelGroups = channelGroups;
            return this;
        }
        public Builder channelGroups(GetTransportT1E1ControllerFeatureEntryChannelGroup... channelGroups) {
            return channelGroups(List.of(channelGroups));
        }
        @CustomType.Setter
        public Builder clockSource(String clockSource) {
            if (clockSource == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "clockSource");
            }
            this.clockSource = clockSource;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder descriptionVariable(String descriptionVariable) {
            if (descriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "descriptionVariable");
            }
            this.descriptionVariable = descriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder e1Description(String e1Description) {
            if (e1Description == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "e1Description");
            }
            this.e1Description = e1Description;
            return this;
        }
        @CustomType.Setter
        public Builder e1Framing(String e1Framing) {
            if (e1Framing == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "e1Framing");
            }
            this.e1Framing = e1Framing;
            return this;
        }
        @CustomType.Setter
        public Builder e1FramingVariable(String e1FramingVariable) {
            if (e1FramingVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "e1FramingVariable");
            }
            this.e1FramingVariable = e1FramingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder e1Linecode(String e1Linecode) {
            if (e1Linecode == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "e1Linecode");
            }
            this.e1Linecode = e1Linecode;
            return this;
        }
        @CustomType.Setter
        public Builder e1LinecodeVariable(String e1LinecodeVariable) {
            if (e1LinecodeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "e1LinecodeVariable");
            }
            this.e1LinecodeVariable = e1LinecodeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder lengthLong(String lengthLong) {
            if (lengthLong == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "lengthLong");
            }
            this.lengthLong = lengthLong;
            return this;
        }
        @CustomType.Setter
        public Builder lengthLongVariable(String lengthLongVariable) {
            if (lengthLongVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "lengthLongVariable");
            }
            this.lengthLongVariable = lengthLongVariable;
            return this;
        }
        @CustomType.Setter
        public Builder lengthShort(String lengthShort) {
            if (lengthShort == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "lengthShort");
            }
            this.lengthShort = lengthShort;
            return this;
        }
        @CustomType.Setter
        public Builder lengthShortVariable(String lengthShortVariable) {
            if (lengthShortVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "lengthShortVariable");
            }
            this.lengthShortVariable = lengthShortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder lineMode(String lineMode) {
            if (lineMode == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "lineMode");
            }
            this.lineMode = lineMode;
            return this;
        }
        @CustomType.Setter
        public Builder lineModeVariable(String lineModeVariable) {
            if (lineModeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "lineModeVariable");
            }
            this.lineModeVariable = lineModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder t1Description(String t1Description) {
            if (t1Description == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "t1Description");
            }
            this.t1Description = t1Description;
            return this;
        }
        @CustomType.Setter
        public Builder t1Framing(String t1Framing) {
            if (t1Framing == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "t1Framing");
            }
            this.t1Framing = t1Framing;
            return this;
        }
        @CustomType.Setter
        public Builder t1FramingVariable(String t1FramingVariable) {
            if (t1FramingVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "t1FramingVariable");
            }
            this.t1FramingVariable = t1FramingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder t1Linecode(String t1Linecode) {
            if (t1Linecode == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "t1Linecode");
            }
            this.t1Linecode = t1Linecode;
            return this;
        }
        @CustomType.Setter
        public Builder t1LinecodeVariable(String t1LinecodeVariable) {
            if (t1LinecodeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportT1E1ControllerFeatureEntry", "t1LinecodeVariable");
            }
            this.t1LinecodeVariable = t1LinecodeVariable;
            return this;
        }
        public GetTransportT1E1ControllerFeatureEntry build() {
            final var _resultValue = new GetTransportT1E1ControllerFeatureEntry();
            _resultValue.cableLength = cableLength;
            _resultValue.channelGroups = channelGroups;
            _resultValue.clockSource = clockSource;
            _resultValue.description = description;
            _resultValue.descriptionVariable = descriptionVariable;
            _resultValue.e1Description = e1Description;
            _resultValue.e1Framing = e1Framing;
            _resultValue.e1FramingVariable = e1FramingVariable;
            _resultValue.e1Linecode = e1Linecode;
            _resultValue.e1LinecodeVariable = e1LinecodeVariable;
            _resultValue.lengthLong = lengthLong;
            _resultValue.lengthLongVariable = lengthLongVariable;
            _resultValue.lengthShort = lengthShort;
            _resultValue.lengthShortVariable = lengthShortVariable;
            _resultValue.lineMode = lineMode;
            _resultValue.lineModeVariable = lineModeVariable;
            _resultValue.t1Description = t1Description;
            _resultValue.t1Framing = t1Framing;
            _resultValue.t1FramingVariable = t1FramingVariable;
            _resultValue.t1Linecode = t1Linecode;
            _resultValue.t1LinecodeVariable = t1LinecodeVariable;
            return _resultValue;
        }
    }
}
