// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSlaClassPolicyObjectResult {
    /**
     * @return App Probe Class Policy Object ID
     * 
     */
    private String appProbeClassId;
    /**
     * @return App Probe Class Policy Object version
     * 
     */
    private Integer appProbeClassVersion;
    private String fallbackBestTunnelCriteria;
    /**
     * @return Jitter variance in ms
     * 
     */
    private Integer fallbackBestTunnelJitter;
    /**
     * @return Latency variance in ms
     * 
     */
    private Integer fallbackBestTunnelLatency;
    /**
     * @return Loss variance in percent
     * 
     */
    private Integer fallbackBestTunnelLoss;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Jitter in ms
     * 
     */
    private Integer jitter;
    /**
     * @return Latency in ms
     * 
     */
    private Integer latency;
    /**
     * @return Loss in percent
     * 
     */
    private Integer loss;
    /**
     * @return The name of the policy object
     * 
     */
    private String name;
    /**
     * @return The version of the object
     * 
     */
    private Integer version;

    private GetSlaClassPolicyObjectResult() {}
    /**
     * @return App Probe Class Policy Object ID
     * 
     */
    public String appProbeClassId() {
        return this.appProbeClassId;
    }
    /**
     * @return App Probe Class Policy Object version
     * 
     */
    public Integer appProbeClassVersion() {
        return this.appProbeClassVersion;
    }
    public String fallbackBestTunnelCriteria() {
        return this.fallbackBestTunnelCriteria;
    }
    /**
     * @return Jitter variance in ms
     * 
     */
    public Integer fallbackBestTunnelJitter() {
        return this.fallbackBestTunnelJitter;
    }
    /**
     * @return Latency variance in ms
     * 
     */
    public Integer fallbackBestTunnelLatency() {
        return this.fallbackBestTunnelLatency;
    }
    /**
     * @return Loss variance in percent
     * 
     */
    public Integer fallbackBestTunnelLoss() {
        return this.fallbackBestTunnelLoss;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Jitter in ms
     * 
     */
    public Integer jitter() {
        return this.jitter;
    }
    /**
     * @return Latency in ms
     * 
     */
    public Integer latency() {
        return this.latency;
    }
    /**
     * @return Loss in percent
     * 
     */
    public Integer loss() {
        return this.loss;
    }
    /**
     * @return The name of the policy object
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The version of the object
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSlaClassPolicyObjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String appProbeClassId;
        private Integer appProbeClassVersion;
        private String fallbackBestTunnelCriteria;
        private Integer fallbackBestTunnelJitter;
        private Integer fallbackBestTunnelLatency;
        private Integer fallbackBestTunnelLoss;
        private String id;
        private Integer jitter;
        private Integer latency;
        private Integer loss;
        private String name;
        private Integer version;
        public Builder() {}
        public Builder(GetSlaClassPolicyObjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.appProbeClassId = defaults.appProbeClassId;
    	      this.appProbeClassVersion = defaults.appProbeClassVersion;
    	      this.fallbackBestTunnelCriteria = defaults.fallbackBestTunnelCriteria;
    	      this.fallbackBestTunnelJitter = defaults.fallbackBestTunnelJitter;
    	      this.fallbackBestTunnelLatency = defaults.fallbackBestTunnelLatency;
    	      this.fallbackBestTunnelLoss = defaults.fallbackBestTunnelLoss;
    	      this.id = defaults.id;
    	      this.jitter = defaults.jitter;
    	      this.latency = defaults.latency;
    	      this.loss = defaults.loss;
    	      this.name = defaults.name;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder appProbeClassId(String appProbeClassId) {
            if (appProbeClassId == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "appProbeClassId");
            }
            this.appProbeClassId = appProbeClassId;
            return this;
        }
        @CustomType.Setter
        public Builder appProbeClassVersion(Integer appProbeClassVersion) {
            if (appProbeClassVersion == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "appProbeClassVersion");
            }
            this.appProbeClassVersion = appProbeClassVersion;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelCriteria(String fallbackBestTunnelCriteria) {
            if (fallbackBestTunnelCriteria == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "fallbackBestTunnelCriteria");
            }
            this.fallbackBestTunnelCriteria = fallbackBestTunnelCriteria;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelJitter(Integer fallbackBestTunnelJitter) {
            if (fallbackBestTunnelJitter == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "fallbackBestTunnelJitter");
            }
            this.fallbackBestTunnelJitter = fallbackBestTunnelJitter;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelLatency(Integer fallbackBestTunnelLatency) {
            if (fallbackBestTunnelLatency == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "fallbackBestTunnelLatency");
            }
            this.fallbackBestTunnelLatency = fallbackBestTunnelLatency;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackBestTunnelLoss(Integer fallbackBestTunnelLoss) {
            if (fallbackBestTunnelLoss == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "fallbackBestTunnelLoss");
            }
            this.fallbackBestTunnelLoss = fallbackBestTunnelLoss;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder jitter(Integer jitter) {
            if (jitter == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "jitter");
            }
            this.jitter = jitter;
            return this;
        }
        @CustomType.Setter
        public Builder latency(Integer latency) {
            if (latency == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "latency");
            }
            this.latency = latency;
            return this;
        }
        @CustomType.Setter
        public Builder loss(Integer loss) {
            if (loss == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "loss");
            }
            this.loss = loss;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSlaClassPolicyObjectResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetSlaClassPolicyObjectResult build() {
            final var _resultValue = new GetSlaClassPolicyObjectResult();
            _resultValue.appProbeClassId = appProbeClassId;
            _resultValue.appProbeClassVersion = appProbeClassVersion;
            _resultValue.fallbackBestTunnelCriteria = fallbackBestTunnelCriteria;
            _resultValue.fallbackBestTunnelJitter = fallbackBestTunnelJitter;
            _resultValue.fallbackBestTunnelLatency = fallbackBestTunnelLatency;
            _resultValue.fallbackBestTunnelLoss = fallbackBestTunnelLoss;
            _resultValue.id = id;
            _resultValue.jitter = jitter;
            _resultValue.latency = latency;
            _resultValue.loss = loss;
            _resultValue.name = name;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
