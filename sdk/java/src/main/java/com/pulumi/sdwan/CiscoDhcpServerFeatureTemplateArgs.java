// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.CiscoDhcpServerFeatureTemplateOptionArgs;
import com.pulumi.sdwan.inputs.CiscoDhcpServerFeatureTemplateStaticLeaseArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoDhcpServerFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoDhcpServerFeatureTemplateArgs Empty = new CiscoDhcpServerFeatureTemplateArgs();

    /**
     * Configure IPv4 prefix range of the DHCP address pool
     * 
     */
    @Import(name="addressPool")
    private @Nullable Output<String> addressPool;

    /**
     * @return Configure IPv4 prefix range of the DHCP address pool
     * 
     */
    public Optional<Output<String>> addressPool() {
        return Optional.ofNullable(this.addressPool);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="addressPoolVariable")
    private @Nullable Output<String> addressPoolVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> addressPoolVariable() {
        return Optional.ofNullable(this.addressPoolVariable);
    }

    /**
     * Set IP address of default gateway
     * 
     */
    @Import(name="defaultGateway")
    private @Nullable Output<String> defaultGateway;

    /**
     * @return Set IP address of default gateway
     * 
     */
    public Optional<Output<String>> defaultGateway() {
        return Optional.ofNullable(this.defaultGateway);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="defaultGatewayVariable")
    private @Nullable Output<String> defaultGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> defaultGatewayVariable() {
        return Optional.ofNullable(this.defaultGatewayVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Configure one or more DNS server IP addresses
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return Configure one or more DNS server IP addresses
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dnsServersVariable")
    private @Nullable Output<String> dnsServersVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dnsServersVariable() {
        return Optional.ofNullable(this.dnsServersVariable);
    }

    /**
     * Set domain name client uses to resolve hostnames
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Set domain name client uses to resolve hostnames
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="domainNameVariable")
    private @Nullable Output<String> domainNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> domainNameVariable() {
        return Optional.ofNullable(this.domainNameVariable);
    }

    /**
     * Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    @Import(name="excludeAddresses")
    private @Nullable Output<List<String>> excludeAddresses;

    /**
     * @return Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    public Optional<Output<List<String>>> excludeAddresses() {
        return Optional.ofNullable(this.excludeAddresses);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="excludeAddressesVariable")
    private @Nullable Output<String> excludeAddressesVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> excludeAddressesVariable() {
        return Optional.ofNullable(this.excludeAddressesVariable);
    }

    /**
     * Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     * 
     */
    @Import(name="interfaceMtu")
    private @Nullable Output<Integer> interfaceMtu;

    /**
     * @return Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     * 
     */
    public Optional<Output<Integer>> interfaceMtu() {
        return Optional.ofNullable(this.interfaceMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceMtuVariable")
    private @Nullable Output<String> interfaceMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceMtuVariable() {
        return Optional.ofNullable(this.interfaceMtuVariable);
    }

    /**
     * Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     * 
     */
    @Import(name="leaseTime")
    private @Nullable Output<Integer> leaseTime;

    /**
     * @return Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     * 
     */
    public Optional<Output<Integer>> leaseTime() {
        return Optional.ofNullable(this.leaseTime);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="leaseTimeVariable")
    private @Nullable Output<String> leaseTimeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> leaseTimeVariable() {
        return Optional.ofNullable(this.leaseTimeVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configure Options Code
     * 
     */
    @Import(name="options")
    private @Nullable Output<List<CiscoDhcpServerFeatureTemplateOptionArgs>> options;

    /**
     * @return Configure Options Code
     * 
     */
    public Optional<Output<List<CiscoDhcpServerFeatureTemplateOptionArgs>>> options() {
        return Optional.ofNullable(this.options);
    }

    /**
     * Configure static IP addresses
     * 
     */
    @Import(name="staticLeases")
    private @Nullable Output<List<CiscoDhcpServerFeatureTemplateStaticLeaseArgs>> staticLeases;

    /**
     * @return Configure static IP addresses
     * 
     */
    public Optional<Output<List<CiscoDhcpServerFeatureTemplateStaticLeaseArgs>>> staticLeases() {
        return Optional.ofNullable(this.staticLeases);
    }

    /**
     * Configure TFTP server IP addresses
     * 
     */
    @Import(name="tftpServers")
    private @Nullable Output<List<String>> tftpServers;

    /**
     * @return Configure TFTP server IP addresses
     * 
     */
    public Optional<Output<List<String>>> tftpServers() {
        return Optional.ofNullable(this.tftpServers);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tftpServersVariable")
    private @Nullable Output<String> tftpServersVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tftpServersVariable() {
        return Optional.ofNullable(this.tftpServersVariable);
    }

    private CiscoDhcpServerFeatureTemplateArgs() {}

    private CiscoDhcpServerFeatureTemplateArgs(CiscoDhcpServerFeatureTemplateArgs $) {
        this.addressPool = $.addressPool;
        this.addressPoolVariable = $.addressPoolVariable;
        this.defaultGateway = $.defaultGateway;
        this.defaultGatewayVariable = $.defaultGatewayVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.dnsServers = $.dnsServers;
        this.dnsServersVariable = $.dnsServersVariable;
        this.domainName = $.domainName;
        this.domainNameVariable = $.domainNameVariable;
        this.excludeAddresses = $.excludeAddresses;
        this.excludeAddressesVariable = $.excludeAddressesVariable;
        this.interfaceMtu = $.interfaceMtu;
        this.interfaceMtuVariable = $.interfaceMtuVariable;
        this.leaseTime = $.leaseTime;
        this.leaseTimeVariable = $.leaseTimeVariable;
        this.name = $.name;
        this.options = $.options;
        this.staticLeases = $.staticLeases;
        this.tftpServers = $.tftpServers;
        this.tftpServersVariable = $.tftpServersVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoDhcpServerFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoDhcpServerFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoDhcpServerFeatureTemplateArgs();
        }

        public Builder(CiscoDhcpServerFeatureTemplateArgs defaults) {
            $ = new CiscoDhcpServerFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressPool Configure IPv4 prefix range of the DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder addressPool(@Nullable Output<String> addressPool) {
            $.addressPool = addressPool;
            return this;
        }

        /**
         * @param addressPool Configure IPv4 prefix range of the DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder addressPool(String addressPool) {
            return addressPool(Output.of(addressPool));
        }

        /**
         * @param addressPoolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder addressPoolVariable(@Nullable Output<String> addressPoolVariable) {
            $.addressPoolVariable = addressPoolVariable;
            return this;
        }

        /**
         * @param addressPoolVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder addressPoolVariable(String addressPoolVariable) {
            return addressPoolVariable(Output.of(addressPoolVariable));
        }

        /**
         * @param defaultGateway Set IP address of default gateway
         * 
         * @return builder
         * 
         */
        public Builder defaultGateway(@Nullable Output<String> defaultGateway) {
            $.defaultGateway = defaultGateway;
            return this;
        }

        /**
         * @param defaultGateway Set IP address of default gateway
         * 
         * @return builder
         * 
         */
        public Builder defaultGateway(String defaultGateway) {
            return defaultGateway(Output.of(defaultGateway));
        }

        /**
         * @param defaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder defaultGatewayVariable(@Nullable Output<String> defaultGatewayVariable) {
            $.defaultGatewayVariable = defaultGatewayVariable;
            return this;
        }

        /**
         * @param defaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder defaultGatewayVariable(String defaultGatewayVariable) {
            return defaultGatewayVariable(Output.of(defaultGatewayVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param dnsServers Configure one or more DNS server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Configure one or more DNS server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Configure one or more DNS server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param dnsServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dnsServersVariable(@Nullable Output<String> dnsServersVariable) {
            $.dnsServersVariable = dnsServersVariable;
            return this;
        }

        /**
         * @param dnsServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dnsServersVariable(String dnsServersVariable) {
            return dnsServersVariable(Output.of(dnsServersVariable));
        }

        /**
         * @param domainName Set domain name client uses to resolve hostnames
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Set domain name client uses to resolve hostnames
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder domainNameVariable(@Nullable Output<String> domainNameVariable) {
            $.domainNameVariable = domainNameVariable;
            return this;
        }

        /**
         * @param domainNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder domainNameVariable(String domainNameVariable) {
            return domainNameVariable(Output.of(domainNameVariable));
        }

        /**
         * @param excludeAddresses Configure IPv4 address to exclude from DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder excludeAddresses(@Nullable Output<List<String>> excludeAddresses) {
            $.excludeAddresses = excludeAddresses;
            return this;
        }

        /**
         * @param excludeAddresses Configure IPv4 address to exclude from DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder excludeAddresses(List<String> excludeAddresses) {
            return excludeAddresses(Output.of(excludeAddresses));
        }

        /**
         * @param excludeAddresses Configure IPv4 address to exclude from DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder excludeAddresses(String... excludeAddresses) {
            return excludeAddresses(List.of(excludeAddresses));
        }

        /**
         * @param excludeAddressesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder excludeAddressesVariable(@Nullable Output<String> excludeAddressesVariable) {
            $.excludeAddressesVariable = excludeAddressesVariable;
            return this;
        }

        /**
         * @param excludeAddressesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder excludeAddressesVariable(String excludeAddressesVariable) {
            return excludeAddressesVariable(Output.of(excludeAddressesVariable));
        }

        /**
         * @param interfaceMtu Set MTU on interface to DHCP client
         *   - Range: `68`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtu(@Nullable Output<Integer> interfaceMtu) {
            $.interfaceMtu = interfaceMtu;
            return this;
        }

        /**
         * @param interfaceMtu Set MTU on interface to DHCP client
         *   - Range: `68`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtu(Integer interfaceMtu) {
            return interfaceMtu(Output.of(interfaceMtu));
        }

        /**
         * @param interfaceMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtuVariable(@Nullable Output<String> interfaceMtuVariable) {
            $.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }

        /**
         * @param interfaceMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            return interfaceMtuVariable(Output.of(interfaceMtuVariable));
        }

        /**
         * @param leaseTime Configure how long a DHCP-assigned IP address is valid
         *   - Range: `60`-`31536000`
         *   - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder leaseTime(@Nullable Output<Integer> leaseTime) {
            $.leaseTime = leaseTime;
            return this;
        }

        /**
         * @param leaseTime Configure how long a DHCP-assigned IP address is valid
         *   - Range: `60`-`31536000`
         *   - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder leaseTime(Integer leaseTime) {
            return leaseTime(Output.of(leaseTime));
        }

        /**
         * @param leaseTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder leaseTimeVariable(@Nullable Output<String> leaseTimeVariable) {
            $.leaseTimeVariable = leaseTimeVariable;
            return this;
        }

        /**
         * @param leaseTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder leaseTimeVariable(String leaseTimeVariable) {
            return leaseTimeVariable(Output.of(leaseTimeVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param options Configure Options Code
         * 
         * @return builder
         * 
         */
        public Builder options(@Nullable Output<List<CiscoDhcpServerFeatureTemplateOptionArgs>> options) {
            $.options = options;
            return this;
        }

        /**
         * @param options Configure Options Code
         * 
         * @return builder
         * 
         */
        public Builder options(List<CiscoDhcpServerFeatureTemplateOptionArgs> options) {
            return options(Output.of(options));
        }

        /**
         * @param options Configure Options Code
         * 
         * @return builder
         * 
         */
        public Builder options(CiscoDhcpServerFeatureTemplateOptionArgs... options) {
            return options(List.of(options));
        }

        /**
         * @param staticLeases Configure static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticLeases(@Nullable Output<List<CiscoDhcpServerFeatureTemplateStaticLeaseArgs>> staticLeases) {
            $.staticLeases = staticLeases;
            return this;
        }

        /**
         * @param staticLeases Configure static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticLeases(List<CiscoDhcpServerFeatureTemplateStaticLeaseArgs> staticLeases) {
            return staticLeases(Output.of(staticLeases));
        }

        /**
         * @param staticLeases Configure static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticLeases(CiscoDhcpServerFeatureTemplateStaticLeaseArgs... staticLeases) {
            return staticLeases(List.of(staticLeases));
        }

        /**
         * @param tftpServers Configure TFTP server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder tftpServers(@Nullable Output<List<String>> tftpServers) {
            $.tftpServers = tftpServers;
            return this;
        }

        /**
         * @param tftpServers Configure TFTP server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder tftpServers(List<String> tftpServers) {
            return tftpServers(Output.of(tftpServers));
        }

        /**
         * @param tftpServers Configure TFTP server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder tftpServers(String... tftpServers) {
            return tftpServers(List.of(tftpServers));
        }

        /**
         * @param tftpServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tftpServersVariable(@Nullable Output<String> tftpServersVariable) {
            $.tftpServersVariable = tftpServersVariable;
            return this;
        }

        /**
         * @param tftpServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tftpServersVariable(String tftpServersVariable) {
            return tftpServersVariable(Output.of(tftpServersVariable));
        }

        public CiscoDhcpServerFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoDhcpServerFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoDhcpServerFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
