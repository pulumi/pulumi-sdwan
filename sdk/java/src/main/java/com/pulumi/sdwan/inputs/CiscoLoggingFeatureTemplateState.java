// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.CiscoLoggingFeatureTemplateIpv4ServerArgs;
import com.pulumi.sdwan.inputs.CiscoLoggingFeatureTemplateIpv6ServerArgs;
import com.pulumi.sdwan.inputs.CiscoLoggingFeatureTemplateTlsProfileArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoLoggingFeatureTemplateState extends com.pulumi.resources.ResourceArgs {

    public static final CiscoLoggingFeatureTemplateState Empty = new CiscoLoggingFeatureTemplateState();

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes")
    private @Nullable Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Optional<Output<List<String>>> deviceTypes() {
        return Optional.ofNullable(this.deviceTypes);
    }

    /**
     * Enable logging to local disk - Default value: `true`
     * 
     */
    @Import(name="diskLogging")
    private @Nullable Output<Boolean> diskLogging;

    /**
     * @return Enable logging to local disk - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> diskLogging() {
        return Optional.ofNullable(this.diskLogging);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="diskLoggingVariable")
    private @Nullable Output<String> diskLoggingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> diskLoggingVariable() {
        return Optional.ofNullable(this.diskLoggingVariable);
    }

    /**
     * Enable logging to remote server
     * 
     */
    @Import(name="ipv4Servers")
    private @Nullable Output<List<CiscoLoggingFeatureTemplateIpv4ServerArgs>> ipv4Servers;

    /**
     * @return Enable logging to remote server
     * 
     */
    public Optional<Output<List<CiscoLoggingFeatureTemplateIpv4ServerArgs>>> ipv4Servers() {
        return Optional.ofNullable(this.ipv4Servers);
    }

    /**
     * Enable logging to remote IPv6 server
     * 
     */
    @Import(name="ipv6Servers")
    private @Nullable Output<List<CiscoLoggingFeatureTemplateIpv6ServerArgs>> ipv6Servers;

    /**
     * @return Enable logging to remote IPv6 server
     * 
     */
    public Optional<Output<List<CiscoLoggingFeatureTemplateIpv6ServerArgs>>> ipv6Servers() {
        return Optional.ofNullable(this.ipv6Servers);
    }

    /**
     * Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     * 
     */
    @Import(name="logRotations")
    private @Nullable Output<Integer> logRotations;

    /**
     * @return Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> logRotations() {
        return Optional.ofNullable(this.logRotations);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="logRotationsVariable")
    private @Nullable Output<String> logRotationsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> logRotationsVariable() {
        return Optional.ofNullable(this.logRotationsVariable);
    }

    /**
     * Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     * 
     */
    @Import(name="maxSize")
    private @Nullable Output<Integer> maxSize;

    /**
     * @return Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> maxSize() {
        return Optional.ofNullable(this.maxSize);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="maxSizeVariable")
    private @Nullable Output<String> maxSizeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> maxSizeVariable() {
        return Optional.ofNullable(this.maxSizeVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The template type
     * 
     */
    @Import(name="templateType")
    private @Nullable Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Optional<Output<String>> templateType() {
        return Optional.ofNullable(this.templateType);
    }

    /**
     * Configure a TLS profile
     * 
     */
    @Import(name="tlsProfiles")
    private @Nullable Output<List<CiscoLoggingFeatureTemplateTlsProfileArgs>> tlsProfiles;

    /**
     * @return Configure a TLS profile
     * 
     */
    public Optional<Output<List<CiscoLoggingFeatureTemplateTlsProfileArgs>>> tlsProfiles() {
        return Optional.ofNullable(this.tlsProfiles);
    }

    /**
     * The version of the feature template
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private CiscoLoggingFeatureTemplateState() {}

    private CiscoLoggingFeatureTemplateState(CiscoLoggingFeatureTemplateState $) {
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.diskLogging = $.diskLogging;
        this.diskLoggingVariable = $.diskLoggingVariable;
        this.ipv4Servers = $.ipv4Servers;
        this.ipv6Servers = $.ipv6Servers;
        this.logRotations = $.logRotations;
        this.logRotationsVariable = $.logRotationsVariable;
        this.maxSize = $.maxSize;
        this.maxSizeVariable = $.maxSizeVariable;
        this.name = $.name;
        this.templateType = $.templateType;
        this.tlsProfiles = $.tlsProfiles;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoLoggingFeatureTemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoLoggingFeatureTemplateState $;

        public Builder() {
            $ = new CiscoLoggingFeatureTemplateState();
        }

        public Builder(CiscoLoggingFeatureTemplateState defaults) {
            $ = new CiscoLoggingFeatureTemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(@Nullable Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param diskLogging Enable logging to local disk - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder diskLogging(@Nullable Output<Boolean> diskLogging) {
            $.diskLogging = diskLogging;
            return this;
        }

        /**
         * @param diskLogging Enable logging to local disk - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder diskLogging(Boolean diskLogging) {
            return diskLogging(Output.of(diskLogging));
        }

        /**
         * @param diskLoggingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskLoggingVariable(@Nullable Output<String> diskLoggingVariable) {
            $.diskLoggingVariable = diskLoggingVariable;
            return this;
        }

        /**
         * @param diskLoggingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder diskLoggingVariable(String diskLoggingVariable) {
            return diskLoggingVariable(Output.of(diskLoggingVariable));
        }

        /**
         * @param ipv4Servers Enable logging to remote server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Servers(@Nullable Output<List<CiscoLoggingFeatureTemplateIpv4ServerArgs>> ipv4Servers) {
            $.ipv4Servers = ipv4Servers;
            return this;
        }

        /**
         * @param ipv4Servers Enable logging to remote server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Servers(List<CiscoLoggingFeatureTemplateIpv4ServerArgs> ipv4Servers) {
            return ipv4Servers(Output.of(ipv4Servers));
        }

        /**
         * @param ipv4Servers Enable logging to remote server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Servers(CiscoLoggingFeatureTemplateIpv4ServerArgs... ipv4Servers) {
            return ipv4Servers(List.of(ipv4Servers));
        }

        /**
         * @param ipv6Servers Enable logging to remote IPv6 server
         * 
         * @return builder
         * 
         */
        public Builder ipv6Servers(@Nullable Output<List<CiscoLoggingFeatureTemplateIpv6ServerArgs>> ipv6Servers) {
            $.ipv6Servers = ipv6Servers;
            return this;
        }

        /**
         * @param ipv6Servers Enable logging to remote IPv6 server
         * 
         * @return builder
         * 
         */
        public Builder ipv6Servers(List<CiscoLoggingFeatureTemplateIpv6ServerArgs> ipv6Servers) {
            return ipv6Servers(Output.of(ipv6Servers));
        }

        /**
         * @param ipv6Servers Enable logging to remote IPv6 server
         * 
         * @return builder
         * 
         */
        public Builder ipv6Servers(CiscoLoggingFeatureTemplateIpv6ServerArgs... ipv6Servers) {
            return ipv6Servers(List.of(ipv6Servers));
        }

        /**
         * @param logRotations Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder logRotations(@Nullable Output<Integer> logRotations) {
            $.logRotations = logRotations;
            return this;
        }

        /**
         * @param logRotations Set number of syslog files to create before discarding oldest files - Range: `1`-`10` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder logRotations(Integer logRotations) {
            return logRotations(Output.of(logRotations));
        }

        /**
         * @param logRotationsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder logRotationsVariable(@Nullable Output<String> logRotationsVariable) {
            $.logRotationsVariable = logRotationsVariable;
            return this;
        }

        /**
         * @param logRotationsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder logRotationsVariable(String logRotationsVariable) {
            return logRotationsVariable(Output.of(logRotationsVariable));
        }

        /**
         * @param maxSize Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder maxSize(@Nullable Output<Integer> maxSize) {
            $.maxSize = maxSize;
            return this;
        }

        /**
         * @param maxSize Set maximum size of file before it is rotated - Range: `1`-`20` - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder maxSize(Integer maxSize) {
            return maxSize(Output.of(maxSize));
        }

        /**
         * @param maxSizeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder maxSizeVariable(@Nullable Output<String> maxSizeVariable) {
            $.maxSizeVariable = maxSizeVariable;
            return this;
        }

        /**
         * @param maxSizeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder maxSizeVariable(String maxSizeVariable) {
            return maxSizeVariable(Output.of(maxSizeVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param templateType The template type
         * 
         * @return builder
         * 
         */
        public Builder templateType(@Nullable Output<String> templateType) {
            $.templateType = templateType;
            return this;
        }

        /**
         * @param templateType The template type
         * 
         * @return builder
         * 
         */
        public Builder templateType(String templateType) {
            return templateType(Output.of(templateType));
        }

        /**
         * @param tlsProfiles Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder tlsProfiles(@Nullable Output<List<CiscoLoggingFeatureTemplateTlsProfileArgs>> tlsProfiles) {
            $.tlsProfiles = tlsProfiles;
            return this;
        }

        /**
         * @param tlsProfiles Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder tlsProfiles(List<CiscoLoggingFeatureTemplateTlsProfileArgs> tlsProfiles) {
            return tlsProfiles(Output.of(tlsProfiles));
        }

        /**
         * @param tlsProfiles Configure a TLS profile
         * 
         * @return builder
         * 
         */
        public Builder tlsProfiles(CiscoLoggingFeatureTemplateTlsProfileArgs... tlsProfiles) {
            return tlsProfiles(List.of(tlsProfiles));
        }

        /**
         * @param version The version of the feature template
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the feature template
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public CiscoLoggingFeatureTemplateState build() {
            return $;
        }
    }

}
