// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportWanVpnInterfaceT1E1SerialFeatureResult {
    private String aclIpv4EgressFeatureId;
    private String aclIpv4IngressFeatureId;
    private String aclIpv6EgressFeatureId;
    private String aclIpv6IngressFeatureId;
    /**
     * @return Interface bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidth;
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthDownstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthDownstreamVariable;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthVariable;
    /**
     * @return Set preference for interface Clock speed
     * 
     */
    private String clockRate;
    /**
     * @return Variable name
     * 
     */
    private String clockRateVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Configure Encapsulation for interface
     * 
     */
    private String encapsulation;
    /**
     * @return Variable name
     * 
     */
    private String encapsulationVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return Set ip mtu
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return Assign IPv6 address
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    private Integer mtu;
    /**
     * @return Variable name
     * 
     */
    private String mtuVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Per-tunnel Qos
     * 
     */
    private Boolean perTunnelQos;
    /**
     * @return Per-tunnel QoS Aggregator
     * 
     */
    private Boolean perTunnelQosAggregator;
    /**
     * @return Variable name
     * 
     */
    private String perTunnelQosAggregatorVariable;
    /**
     * @return Variable name
     * 
     */
    private String perTunnelQosVariable;
    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     * 
     */
    private Integer qosShapingRate;
    /**
     * @return Variable name
     * 
     */
    private String qosShapingRateVariable;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    private String tlocExtension;
    /**
     * @return Variable name
     * 
     */
    private String tlocExtensionVariable;
    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    private String transportWanVpnFeatureId;
    /**
     * @return Tunnel Interface
     * 
     */
    private Boolean tunnelInterface;
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    private Boolean tunnelInterfaceAllowAll;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowAllVariable;
    /**
     * @return Allow/Deny BFD
     * 
     */
    private Boolean tunnelInterfaceAllowBfd;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowBfdVariable;
    /**
     * @return Allow/deny BGP
     * 
     */
    private Boolean tunnelInterfaceAllowBgp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowBgpVariable;
    /**
     * @return Allow/Deny DHCP
     * 
     */
    private Boolean tunnelInterfaceAllowDhcp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDhcpVariable;
    /**
     * @return Allow/Deny DNS
     * 
     */
    private Boolean tunnelInterfaceAllowDns;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDnsVariable;
    /**
     * @return Allow/Deny Https
     * 
     */
    private Boolean tunnelInterfaceAllowHttps;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowHttpsVariable;
    /**
     * @return Allow/Deny ICMP
     * 
     */
    private Boolean tunnelInterfaceAllowIcmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowIcmpVariable;
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    private Boolean tunnelInterfaceAllowNetconf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNetconfVariable;
    /**
     * @return Allow/Deny NTP
     * 
     */
    private Boolean tunnelInterfaceAllowNtp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNtpVariable;
    /**
     * @return Allow/Deny OSPF
     * 
     */
    private Boolean tunnelInterfaceAllowOspf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowOspfVariable;
    /**
     * @return Allow/Deny SNMP
     * 
     */
    private Boolean tunnelInterfaceAllowSnmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSnmpVariable;
    /**
     * @return Allow/Deny SSH
     * 
     */
    private Boolean tunnelInterfaceAllowSsh;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSshVariable;
    /**
     * @return Allow/Deny STUN
     * 
     */
    private Boolean tunnelInterfaceAllowStun;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowStunVariable;
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnel;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnelVariable;
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    private Boolean tunnelInterfaceBorder;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBorderVariable;
    /**
     * @return Set carrier for TLOC
     * 
     */
    private String tunnelInterfaceCarrier;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceCarrierVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean tunnelInterfaceClearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceClearDontFragmentVariable;
    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     * 
     */
    private Boolean tunnelInterfaceClearNetworkBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceClearNetworkBroadcastVariable;
    /**
     * @return Set color for TLOC
     * 
     */
    private String tunnelInterfaceColor;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceColorVariable;
    /**
     * @return Encapsulation for TLOC
     * 
     */
    private List<GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceExcludeControllerGroupListVariable;
    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
    /**
     * @return List of groups
     * 
     */
    private Integer tunnelInterfaceGroups;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceGroupsVariable;
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    private Integer tunnelInterfaceHelloInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloIntervalVariable;
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceHelloTolerance;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloToleranceVariable;
    /**
     * @return Set TLOC as last resort
     * 
     */
    private Boolean tunnelInterfaceLastResortCircuit;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLastResortCircuitVariable;
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    private Boolean tunnelInterfaceLowBandwidthLink;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLowBandwidthLinkVariable;
    /**
     * @return Set the maximum number of control connections for this TLOC
     * 
     */
    private Integer tunnelInterfaceMaxControlConnections;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceMaxControlConnectionsVariable;
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceNatRefreshInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNatRefreshIntervalVariable;
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    private Boolean tunnelInterfacePortHop;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfacePortHopVariable;
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    private Boolean tunnelInterfaceRestrict;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceRestrictVariable;
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tunnelInterfaceTunnelTcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceTunnelTcpMssVariable;
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    private Boolean tunnelInterfaceVbondAsStunServer;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVbondAsStunServerVariable;
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    private Integer tunnelInterfaceVmanageConnectionPreference;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVmanageConnectionPreferenceVariable;
    /**
     * @return Set tunnel QoS mode
     * 
     */
    private String tunnelQosMode;
    /**
     * @return Variable name
     * 
     */
    private String tunnelQosModeVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetTransportWanVpnInterfaceT1E1SerialFeatureResult() {}
    public String aclIpv4EgressFeatureId() {
        return this.aclIpv4EgressFeatureId;
    }
    public String aclIpv4IngressFeatureId() {
        return this.aclIpv4IngressFeatureId;
    }
    public String aclIpv6EgressFeatureId() {
        return this.aclIpv6EgressFeatureId;
    }
    public String aclIpv6IngressFeatureId() {
        return this.aclIpv6IngressFeatureId;
    }
    /**
     * @return Interface bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthDownstream() {
        return this.bandwidthDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthDownstreamVariable() {
        return this.bandwidthDownstreamVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthVariable() {
        return this.bandwidthVariable;
    }
    /**
     * @return Set preference for interface Clock speed
     * 
     */
    public String clockRate() {
        return this.clockRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String clockRateVariable() {
        return this.clockRateVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Configure Encapsulation for interface
     * 
     */
    public String encapsulation() {
        return this.encapsulation;
    }
    /**
     * @return Variable name
     * 
     */
    public String encapsulationVariable() {
        return this.encapsulationVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return Set ip mtu
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return Assign IPv6 address
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String mtuVariable() {
        return this.mtuVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Per-tunnel Qos
     * 
     */
    public Boolean perTunnelQos() {
        return this.perTunnelQos;
    }
    /**
     * @return Per-tunnel QoS Aggregator
     * 
     */
    public Boolean perTunnelQosAggregator() {
        return this.perTunnelQosAggregator;
    }
    /**
     * @return Variable name
     * 
     */
    public String perTunnelQosAggregatorVariable() {
        return this.perTunnelQosAggregatorVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String perTunnelQosVariable() {
        return this.perTunnelQosVariable;
    }
    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     * 
     */
    public Integer qosShapingRate() {
        return this.qosShapingRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosShapingRateVariable() {
        return this.qosShapingRateVariable;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public String tlocExtension() {
        return this.tlocExtension;
    }
    /**
     * @return Variable name
     * 
     */
    public String tlocExtensionVariable() {
        return this.tlocExtensionVariable;
    }
    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    public String transportWanVpnFeatureId() {
        return this.transportWanVpnFeatureId;
    }
    /**
     * @return Tunnel Interface
     * 
     */
    public Boolean tunnelInterface() {
        return this.tunnelInterface;
    }
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    public Boolean tunnelInterfaceAllowAll() {
        return this.tunnelInterfaceAllowAll;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowAllVariable() {
        return this.tunnelInterfaceAllowAllVariable;
    }
    /**
     * @return Allow/Deny BFD
     * 
     */
    public Boolean tunnelInterfaceAllowBfd() {
        return this.tunnelInterfaceAllowBfd;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowBfdVariable() {
        return this.tunnelInterfaceAllowBfdVariable;
    }
    /**
     * @return Allow/deny BGP
     * 
     */
    public Boolean tunnelInterfaceAllowBgp() {
        return this.tunnelInterfaceAllowBgp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowBgpVariable() {
        return this.tunnelInterfaceAllowBgpVariable;
    }
    /**
     * @return Allow/Deny DHCP
     * 
     */
    public Boolean tunnelInterfaceAllowDhcp() {
        return this.tunnelInterfaceAllowDhcp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDhcpVariable() {
        return this.tunnelInterfaceAllowDhcpVariable;
    }
    /**
     * @return Allow/Deny DNS
     * 
     */
    public Boolean tunnelInterfaceAllowDns() {
        return this.tunnelInterfaceAllowDns;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDnsVariable() {
        return this.tunnelInterfaceAllowDnsVariable;
    }
    /**
     * @return Allow/Deny Https
     * 
     */
    public Boolean tunnelInterfaceAllowHttps() {
        return this.tunnelInterfaceAllowHttps;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowHttpsVariable() {
        return this.tunnelInterfaceAllowHttpsVariable;
    }
    /**
     * @return Allow/Deny ICMP
     * 
     */
    public Boolean tunnelInterfaceAllowIcmp() {
        return this.tunnelInterfaceAllowIcmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowIcmpVariable() {
        return this.tunnelInterfaceAllowIcmpVariable;
    }
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    public Boolean tunnelInterfaceAllowNetconf() {
        return this.tunnelInterfaceAllowNetconf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNetconfVariable() {
        return this.tunnelInterfaceAllowNetconfVariable;
    }
    /**
     * @return Allow/Deny NTP
     * 
     */
    public Boolean tunnelInterfaceAllowNtp() {
        return this.tunnelInterfaceAllowNtp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNtpVariable() {
        return this.tunnelInterfaceAllowNtpVariable;
    }
    /**
     * @return Allow/Deny OSPF
     * 
     */
    public Boolean tunnelInterfaceAllowOspf() {
        return this.tunnelInterfaceAllowOspf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowOspfVariable() {
        return this.tunnelInterfaceAllowOspfVariable;
    }
    /**
     * @return Allow/Deny SNMP
     * 
     */
    public Boolean tunnelInterfaceAllowSnmp() {
        return this.tunnelInterfaceAllowSnmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSnmpVariable() {
        return this.tunnelInterfaceAllowSnmpVariable;
    }
    /**
     * @return Allow/Deny SSH
     * 
     */
    public Boolean tunnelInterfaceAllowSsh() {
        return this.tunnelInterfaceAllowSsh;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSshVariable() {
        return this.tunnelInterfaceAllowSshVariable;
    }
    /**
     * @return Allow/Deny STUN
     * 
     */
    public Boolean tunnelInterfaceAllowStun() {
        return this.tunnelInterfaceAllowStun;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowStunVariable() {
        return this.tunnelInterfaceAllowStunVariable;
    }
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnel() {
        return this.tunnelInterfaceBindLoopbackTunnel;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnelVariable() {
        return this.tunnelInterfaceBindLoopbackTunnelVariable;
    }
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    public Boolean tunnelInterfaceBorder() {
        return this.tunnelInterfaceBorder;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBorderVariable() {
        return this.tunnelInterfaceBorderVariable;
    }
    /**
     * @return Set carrier for TLOC
     * 
     */
    public String tunnelInterfaceCarrier() {
        return this.tunnelInterfaceCarrier;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceCarrierVariable() {
        return this.tunnelInterfaceCarrierVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean tunnelInterfaceClearDontFragment() {
        return this.tunnelInterfaceClearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceClearDontFragmentVariable() {
        return this.tunnelInterfaceClearDontFragmentVariable;
    }
    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     * 
     */
    public Boolean tunnelInterfaceClearNetworkBroadcast() {
        return this.tunnelInterfaceClearNetworkBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceClearNetworkBroadcastVariable() {
        return this.tunnelInterfaceClearNetworkBroadcastVariable;
    }
    /**
     * @return Set color for TLOC
     * 
     */
    public String tunnelInterfaceColor() {
        return this.tunnelInterfaceColor;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceColorVariable() {
        return this.tunnelInterfaceColorVariable;
    }
    /**
     * @return Encapsulation for TLOC
     * 
     */
    public List<GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations() {
        return this.tunnelInterfaceEncapsulations;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceExcludeControllerGroupListVariable() {
        return this.tunnelInterfaceExcludeControllerGroupListVariable;
    }
    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public List<Integer> tunnelInterfaceExcludeControllerGroupLists() {
        return this.tunnelInterfaceExcludeControllerGroupLists;
    }
    /**
     * @return List of groups
     * 
     */
    public Integer tunnelInterfaceGroups() {
        return this.tunnelInterfaceGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceGroupsVariable() {
        return this.tunnelInterfaceGroupsVariable;
    }
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    public Integer tunnelInterfaceHelloInterval() {
        return this.tunnelInterfaceHelloInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloIntervalVariable() {
        return this.tunnelInterfaceHelloIntervalVariable;
    }
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceHelloTolerance() {
        return this.tunnelInterfaceHelloTolerance;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloToleranceVariable() {
        return this.tunnelInterfaceHelloToleranceVariable;
    }
    /**
     * @return Set TLOC as last resort
     * 
     */
    public Boolean tunnelInterfaceLastResortCircuit() {
        return this.tunnelInterfaceLastResortCircuit;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLastResortCircuitVariable() {
        return this.tunnelInterfaceLastResortCircuitVariable;
    }
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    public Boolean tunnelInterfaceLowBandwidthLink() {
        return this.tunnelInterfaceLowBandwidthLink;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLowBandwidthLinkVariable() {
        return this.tunnelInterfaceLowBandwidthLinkVariable;
    }
    /**
     * @return Set the maximum number of control connections for this TLOC
     * 
     */
    public Integer tunnelInterfaceMaxControlConnections() {
        return this.tunnelInterfaceMaxControlConnections;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceMaxControlConnectionsVariable() {
        return this.tunnelInterfaceMaxControlConnectionsVariable;
    }
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceNatRefreshInterval() {
        return this.tunnelInterfaceNatRefreshInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNatRefreshIntervalVariable() {
        return this.tunnelInterfaceNatRefreshIntervalVariable;
    }
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    public Boolean tunnelInterfacePortHop() {
        return this.tunnelInterfacePortHop;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfacePortHopVariable() {
        return this.tunnelInterfacePortHopVariable;
    }
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    public Boolean tunnelInterfaceRestrict() {
        return this.tunnelInterfaceRestrict;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceRestrictVariable() {
        return this.tunnelInterfaceRestrictVariable;
    }
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tunnelInterfaceTunnelTcpMss() {
        return this.tunnelInterfaceTunnelTcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceTunnelTcpMssVariable() {
        return this.tunnelInterfaceTunnelTcpMssVariable;
    }
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    public Boolean tunnelInterfaceVbondAsStunServer() {
        return this.tunnelInterfaceVbondAsStunServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVbondAsStunServerVariable() {
        return this.tunnelInterfaceVbondAsStunServerVariable;
    }
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    public Integer tunnelInterfaceVmanageConnectionPreference() {
        return this.tunnelInterfaceVmanageConnectionPreference;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return this.tunnelInterfaceVmanageConnectionPreferenceVariable;
    }
    /**
     * @return Set tunnel QoS mode
     * 
     */
    public String tunnelQosMode() {
        return this.tunnelQosMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelQosModeVariable() {
        return this.tunnelQosModeVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportWanVpnInterfaceT1E1SerialFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclIpv4EgressFeatureId;
        private String aclIpv4IngressFeatureId;
        private String aclIpv6EgressFeatureId;
        private String aclIpv6IngressFeatureId;
        private Integer bandwidth;
        private Integer bandwidthDownstream;
        private String bandwidthDownstreamVariable;
        private String bandwidthVariable;
        private String clockRate;
        private String clockRateVariable;
        private String description;
        private String encapsulation;
        private String encapsulationVariable;
        private String featureProfileId;
        private String id;
        private String interfaceName;
        private String interfaceNameVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private Integer mtu;
        private String mtuVariable;
        private String name;
        private Boolean perTunnelQos;
        private Boolean perTunnelQosAggregator;
        private String perTunnelQosAggregatorVariable;
        private String perTunnelQosVariable;
        private Integer qosShapingRate;
        private String qosShapingRateVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String tlocExtension;
        private String tlocExtensionVariable;
        private String transportWanVpnFeatureId;
        private Boolean tunnelInterface;
        private Boolean tunnelInterfaceAllowAll;
        private String tunnelInterfaceAllowAllVariable;
        private Boolean tunnelInterfaceAllowBfd;
        private String tunnelInterfaceAllowBfdVariable;
        private Boolean tunnelInterfaceAllowBgp;
        private String tunnelInterfaceAllowBgpVariable;
        private Boolean tunnelInterfaceAllowDhcp;
        private String tunnelInterfaceAllowDhcpVariable;
        private Boolean tunnelInterfaceAllowDns;
        private String tunnelInterfaceAllowDnsVariable;
        private Boolean tunnelInterfaceAllowHttps;
        private String tunnelInterfaceAllowHttpsVariable;
        private Boolean tunnelInterfaceAllowIcmp;
        private String tunnelInterfaceAllowIcmpVariable;
        private Boolean tunnelInterfaceAllowNetconf;
        private String tunnelInterfaceAllowNetconfVariable;
        private Boolean tunnelInterfaceAllowNtp;
        private String tunnelInterfaceAllowNtpVariable;
        private Boolean tunnelInterfaceAllowOspf;
        private String tunnelInterfaceAllowOspfVariable;
        private Boolean tunnelInterfaceAllowSnmp;
        private String tunnelInterfaceAllowSnmpVariable;
        private Boolean tunnelInterfaceAllowSsh;
        private String tunnelInterfaceAllowSshVariable;
        private Boolean tunnelInterfaceAllowStun;
        private String tunnelInterfaceAllowStunVariable;
        private String tunnelInterfaceBindLoopbackTunnel;
        private String tunnelInterfaceBindLoopbackTunnelVariable;
        private Boolean tunnelInterfaceBorder;
        private String tunnelInterfaceBorderVariable;
        private String tunnelInterfaceCarrier;
        private String tunnelInterfaceCarrierVariable;
        private Boolean tunnelInterfaceClearDontFragment;
        private String tunnelInterfaceClearDontFragmentVariable;
        private Boolean tunnelInterfaceClearNetworkBroadcast;
        private String tunnelInterfaceClearNetworkBroadcastVariable;
        private String tunnelInterfaceColor;
        private String tunnelInterfaceColorVariable;
        private List<GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
        private String tunnelInterfaceExcludeControllerGroupListVariable;
        private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
        private Integer tunnelInterfaceGroups;
        private String tunnelInterfaceGroupsVariable;
        private Integer tunnelInterfaceHelloInterval;
        private String tunnelInterfaceHelloIntervalVariable;
        private Integer tunnelInterfaceHelloTolerance;
        private String tunnelInterfaceHelloToleranceVariable;
        private Boolean tunnelInterfaceLastResortCircuit;
        private String tunnelInterfaceLastResortCircuitVariable;
        private Boolean tunnelInterfaceLowBandwidthLink;
        private String tunnelInterfaceLowBandwidthLinkVariable;
        private Integer tunnelInterfaceMaxControlConnections;
        private String tunnelInterfaceMaxControlConnectionsVariable;
        private Integer tunnelInterfaceNatRefreshInterval;
        private String tunnelInterfaceNatRefreshIntervalVariable;
        private Boolean tunnelInterfacePortHop;
        private String tunnelInterfacePortHopVariable;
        private Boolean tunnelInterfaceRestrict;
        private String tunnelInterfaceRestrictVariable;
        private Integer tunnelInterfaceTunnelTcpMss;
        private String tunnelInterfaceTunnelTcpMssVariable;
        private Boolean tunnelInterfaceVbondAsStunServer;
        private String tunnelInterfaceVbondAsStunServerVariable;
        private Integer tunnelInterfaceVmanageConnectionPreference;
        private String tunnelInterfaceVmanageConnectionPreferenceVariable;
        private String tunnelQosMode;
        private String tunnelQosModeVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetTransportWanVpnInterfaceT1E1SerialFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclIpv4EgressFeatureId = defaults.aclIpv4EgressFeatureId;
    	      this.aclIpv4IngressFeatureId = defaults.aclIpv4IngressFeatureId;
    	      this.aclIpv6EgressFeatureId = defaults.aclIpv6EgressFeatureId;
    	      this.aclIpv6IngressFeatureId = defaults.aclIpv6IngressFeatureId;
    	      this.bandwidth = defaults.bandwidth;
    	      this.bandwidthDownstream = defaults.bandwidthDownstream;
    	      this.bandwidthDownstreamVariable = defaults.bandwidthDownstreamVariable;
    	      this.bandwidthVariable = defaults.bandwidthVariable;
    	      this.clockRate = defaults.clockRate;
    	      this.clockRateVariable = defaults.clockRateVariable;
    	      this.description = defaults.description;
    	      this.encapsulation = defaults.encapsulation;
    	      this.encapsulationVariable = defaults.encapsulationVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.mtu = defaults.mtu;
    	      this.mtuVariable = defaults.mtuVariable;
    	      this.name = defaults.name;
    	      this.perTunnelQos = defaults.perTunnelQos;
    	      this.perTunnelQosAggregator = defaults.perTunnelQosAggregator;
    	      this.perTunnelQosAggregatorVariable = defaults.perTunnelQosAggregatorVariable;
    	      this.perTunnelQosVariable = defaults.perTunnelQosVariable;
    	      this.qosShapingRate = defaults.qosShapingRate;
    	      this.qosShapingRateVariable = defaults.qosShapingRateVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.tlocExtension = defaults.tlocExtension;
    	      this.tlocExtensionVariable = defaults.tlocExtensionVariable;
    	      this.transportWanVpnFeatureId = defaults.transportWanVpnFeatureId;
    	      this.tunnelInterface = defaults.tunnelInterface;
    	      this.tunnelInterfaceAllowAll = defaults.tunnelInterfaceAllowAll;
    	      this.tunnelInterfaceAllowAllVariable = defaults.tunnelInterfaceAllowAllVariable;
    	      this.tunnelInterfaceAllowBfd = defaults.tunnelInterfaceAllowBfd;
    	      this.tunnelInterfaceAllowBfdVariable = defaults.tunnelInterfaceAllowBfdVariable;
    	      this.tunnelInterfaceAllowBgp = defaults.tunnelInterfaceAllowBgp;
    	      this.tunnelInterfaceAllowBgpVariable = defaults.tunnelInterfaceAllowBgpVariable;
    	      this.tunnelInterfaceAllowDhcp = defaults.tunnelInterfaceAllowDhcp;
    	      this.tunnelInterfaceAllowDhcpVariable = defaults.tunnelInterfaceAllowDhcpVariable;
    	      this.tunnelInterfaceAllowDns = defaults.tunnelInterfaceAllowDns;
    	      this.tunnelInterfaceAllowDnsVariable = defaults.tunnelInterfaceAllowDnsVariable;
    	      this.tunnelInterfaceAllowHttps = defaults.tunnelInterfaceAllowHttps;
    	      this.tunnelInterfaceAllowHttpsVariable = defaults.tunnelInterfaceAllowHttpsVariable;
    	      this.tunnelInterfaceAllowIcmp = defaults.tunnelInterfaceAllowIcmp;
    	      this.tunnelInterfaceAllowIcmpVariable = defaults.tunnelInterfaceAllowIcmpVariable;
    	      this.tunnelInterfaceAllowNetconf = defaults.tunnelInterfaceAllowNetconf;
    	      this.tunnelInterfaceAllowNetconfVariable = defaults.tunnelInterfaceAllowNetconfVariable;
    	      this.tunnelInterfaceAllowNtp = defaults.tunnelInterfaceAllowNtp;
    	      this.tunnelInterfaceAllowNtpVariable = defaults.tunnelInterfaceAllowNtpVariable;
    	      this.tunnelInterfaceAllowOspf = defaults.tunnelInterfaceAllowOspf;
    	      this.tunnelInterfaceAllowOspfVariable = defaults.tunnelInterfaceAllowOspfVariable;
    	      this.tunnelInterfaceAllowSnmp = defaults.tunnelInterfaceAllowSnmp;
    	      this.tunnelInterfaceAllowSnmpVariable = defaults.tunnelInterfaceAllowSnmpVariable;
    	      this.tunnelInterfaceAllowSsh = defaults.tunnelInterfaceAllowSsh;
    	      this.tunnelInterfaceAllowSshVariable = defaults.tunnelInterfaceAllowSshVariable;
    	      this.tunnelInterfaceAllowStun = defaults.tunnelInterfaceAllowStun;
    	      this.tunnelInterfaceAllowStunVariable = defaults.tunnelInterfaceAllowStunVariable;
    	      this.tunnelInterfaceBindLoopbackTunnel = defaults.tunnelInterfaceBindLoopbackTunnel;
    	      this.tunnelInterfaceBindLoopbackTunnelVariable = defaults.tunnelInterfaceBindLoopbackTunnelVariable;
    	      this.tunnelInterfaceBorder = defaults.tunnelInterfaceBorder;
    	      this.tunnelInterfaceBorderVariable = defaults.tunnelInterfaceBorderVariable;
    	      this.tunnelInterfaceCarrier = defaults.tunnelInterfaceCarrier;
    	      this.tunnelInterfaceCarrierVariable = defaults.tunnelInterfaceCarrierVariable;
    	      this.tunnelInterfaceClearDontFragment = defaults.tunnelInterfaceClearDontFragment;
    	      this.tunnelInterfaceClearDontFragmentVariable = defaults.tunnelInterfaceClearDontFragmentVariable;
    	      this.tunnelInterfaceClearNetworkBroadcast = defaults.tunnelInterfaceClearNetworkBroadcast;
    	      this.tunnelInterfaceClearNetworkBroadcastVariable = defaults.tunnelInterfaceClearNetworkBroadcastVariable;
    	      this.tunnelInterfaceColor = defaults.tunnelInterfaceColor;
    	      this.tunnelInterfaceColorVariable = defaults.tunnelInterfaceColorVariable;
    	      this.tunnelInterfaceEncapsulations = defaults.tunnelInterfaceEncapsulations;
    	      this.tunnelInterfaceExcludeControllerGroupListVariable = defaults.tunnelInterfaceExcludeControllerGroupListVariable;
    	      this.tunnelInterfaceExcludeControllerGroupLists = defaults.tunnelInterfaceExcludeControllerGroupLists;
    	      this.tunnelInterfaceGroups = defaults.tunnelInterfaceGroups;
    	      this.tunnelInterfaceGroupsVariable = defaults.tunnelInterfaceGroupsVariable;
    	      this.tunnelInterfaceHelloInterval = defaults.tunnelInterfaceHelloInterval;
    	      this.tunnelInterfaceHelloIntervalVariable = defaults.tunnelInterfaceHelloIntervalVariable;
    	      this.tunnelInterfaceHelloTolerance = defaults.tunnelInterfaceHelloTolerance;
    	      this.tunnelInterfaceHelloToleranceVariable = defaults.tunnelInterfaceHelloToleranceVariable;
    	      this.tunnelInterfaceLastResortCircuit = defaults.tunnelInterfaceLastResortCircuit;
    	      this.tunnelInterfaceLastResortCircuitVariable = defaults.tunnelInterfaceLastResortCircuitVariable;
    	      this.tunnelInterfaceLowBandwidthLink = defaults.tunnelInterfaceLowBandwidthLink;
    	      this.tunnelInterfaceLowBandwidthLinkVariable = defaults.tunnelInterfaceLowBandwidthLinkVariable;
    	      this.tunnelInterfaceMaxControlConnections = defaults.tunnelInterfaceMaxControlConnections;
    	      this.tunnelInterfaceMaxControlConnectionsVariable = defaults.tunnelInterfaceMaxControlConnectionsVariable;
    	      this.tunnelInterfaceNatRefreshInterval = defaults.tunnelInterfaceNatRefreshInterval;
    	      this.tunnelInterfaceNatRefreshIntervalVariable = defaults.tunnelInterfaceNatRefreshIntervalVariable;
    	      this.tunnelInterfacePortHop = defaults.tunnelInterfacePortHop;
    	      this.tunnelInterfacePortHopVariable = defaults.tunnelInterfacePortHopVariable;
    	      this.tunnelInterfaceRestrict = defaults.tunnelInterfaceRestrict;
    	      this.tunnelInterfaceRestrictVariable = defaults.tunnelInterfaceRestrictVariable;
    	      this.tunnelInterfaceTunnelTcpMss = defaults.tunnelInterfaceTunnelTcpMss;
    	      this.tunnelInterfaceTunnelTcpMssVariable = defaults.tunnelInterfaceTunnelTcpMssVariable;
    	      this.tunnelInterfaceVbondAsStunServer = defaults.tunnelInterfaceVbondAsStunServer;
    	      this.tunnelInterfaceVbondAsStunServerVariable = defaults.tunnelInterfaceVbondAsStunServerVariable;
    	      this.tunnelInterfaceVmanageConnectionPreference = defaults.tunnelInterfaceVmanageConnectionPreference;
    	      this.tunnelInterfaceVmanageConnectionPreferenceVariable = defaults.tunnelInterfaceVmanageConnectionPreferenceVariable;
    	      this.tunnelQosMode = defaults.tunnelQosMode;
    	      this.tunnelQosModeVariable = defaults.tunnelQosModeVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder aclIpv4EgressFeatureId(String aclIpv4EgressFeatureId) {
            if (aclIpv4EgressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "aclIpv4EgressFeatureId");
            }
            this.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv4IngressFeatureId(String aclIpv4IngressFeatureId) {
            if (aclIpv4IngressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "aclIpv4IngressFeatureId");
            }
            this.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6EgressFeatureId(String aclIpv6EgressFeatureId) {
            if (aclIpv6EgressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "aclIpv6EgressFeatureId");
            }
            this.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6IngressFeatureId(String aclIpv6IngressFeatureId) {
            if (aclIpv6IngressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "aclIpv6IngressFeatureId");
            }
            this.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            if (bandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "bandwidthDownstream");
            }
            this.bandwidthDownstream = bandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            if (bandwidthDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "bandwidthDownstreamVariable");
            }
            this.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthVariable(String bandwidthVariable) {
            if (bandwidthVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "bandwidthVariable");
            }
            this.bandwidthVariable = bandwidthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder clockRate(String clockRate) {
            if (clockRate == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "clockRate");
            }
            this.clockRate = clockRate;
            return this;
        }
        @CustomType.Setter
        public Builder clockRateVariable(String clockRateVariable) {
            if (clockRateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "clockRateVariable");
            }
            this.clockRateVariable = clockRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder encapsulation(String encapsulation) {
            if (encapsulation == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "encapsulation");
            }
            this.encapsulation = encapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder encapsulationVariable(String encapsulationVariable) {
            if (encapsulationVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "encapsulationVariable");
            }
            this.encapsulationVariable = encapsulationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder mtuVariable(String mtuVariable) {
            if (mtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "mtuVariable");
            }
            this.mtuVariable = mtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQos(Boolean perTunnelQos) {
            if (perTunnelQos == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "perTunnelQos");
            }
            this.perTunnelQos = perTunnelQos;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosAggregator(Boolean perTunnelQosAggregator) {
            if (perTunnelQosAggregator == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "perTunnelQosAggregator");
            }
            this.perTunnelQosAggregator = perTunnelQosAggregator;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosAggregatorVariable(String perTunnelQosAggregatorVariable) {
            if (perTunnelQosAggregatorVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "perTunnelQosAggregatorVariable");
            }
            this.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosVariable(String perTunnelQosVariable) {
            if (perTunnelQosVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "perTunnelQosVariable");
            }
            this.perTunnelQosVariable = perTunnelQosVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosShapingRate(Integer qosShapingRate) {
            if (qosShapingRate == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "qosShapingRate");
            }
            this.qosShapingRate = qosShapingRate;
            return this;
        }
        @CustomType.Setter
        public Builder qosShapingRateVariable(String qosShapingRateVariable) {
            if (qosShapingRateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "qosShapingRateVariable");
            }
            this.qosShapingRateVariable = qosShapingRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtension(String tlocExtension) {
            if (tlocExtension == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tlocExtension");
            }
            this.tlocExtension = tlocExtension;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            if (tlocExtensionVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tlocExtensionVariable");
            }
            this.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder transportWanVpnFeatureId(String transportWanVpnFeatureId) {
            if (transportWanVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "transportWanVpnFeatureId");
            }
            this.transportWanVpnFeatureId = transportWanVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterface(Boolean tunnelInterface) {
            if (tunnelInterface == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterface");
            }
            this.tunnelInterface = tunnelInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            if (tunnelInterfaceAllowAll == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowAll");
            }
            this.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            if (tunnelInterfaceAllowAllVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowAllVariable");
            }
            this.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBfd(Boolean tunnelInterfaceAllowBfd) {
            if (tunnelInterfaceAllowBfd == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowBfd");
            }
            this.tunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBfdVariable(String tunnelInterfaceAllowBfdVariable) {
            if (tunnelInterfaceAllowBfdVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowBfdVariable");
            }
            this.tunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            if (tunnelInterfaceAllowBgp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowBgp");
            }
            this.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            if (tunnelInterfaceAllowBgpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowBgpVariable");
            }
            this.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            if (tunnelInterfaceAllowDhcp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowDhcp");
            }
            this.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            if (tunnelInterfaceAllowDhcpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowDhcpVariable");
            }
            this.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            if (tunnelInterfaceAllowDns == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowDns");
            }
            this.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            if (tunnelInterfaceAllowDnsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowDnsVariable");
            }
            this.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            if (tunnelInterfaceAllowHttps == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowHttps");
            }
            this.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            if (tunnelInterfaceAllowHttpsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowHttpsVariable");
            }
            this.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            if (tunnelInterfaceAllowIcmp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowIcmp");
            }
            this.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            if (tunnelInterfaceAllowIcmpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowIcmpVariable");
            }
            this.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            if (tunnelInterfaceAllowNetconf == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowNetconf");
            }
            this.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            if (tunnelInterfaceAllowNetconfVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowNetconfVariable");
            }
            this.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            if (tunnelInterfaceAllowNtp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowNtp");
            }
            this.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            if (tunnelInterfaceAllowNtpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowNtpVariable");
            }
            this.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            if (tunnelInterfaceAllowOspf == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowOspf");
            }
            this.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            if (tunnelInterfaceAllowOspfVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowOspfVariable");
            }
            this.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            if (tunnelInterfaceAllowSnmp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowSnmp");
            }
            this.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            if (tunnelInterfaceAllowSnmpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowSnmpVariable");
            }
            this.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            if (tunnelInterfaceAllowSsh == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowSsh");
            }
            this.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            if (tunnelInterfaceAllowSshVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowSshVariable");
            }
            this.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            if (tunnelInterfaceAllowStun == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowStun");
            }
            this.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            if (tunnelInterfaceAllowStunVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceAllowStunVariable");
            }
            this.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            if (tunnelInterfaceBindLoopbackTunnel == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceBindLoopbackTunnel");
            }
            this.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            if (tunnelInterfaceBindLoopbackTunnelVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceBindLoopbackTunnelVariable");
            }
            this.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            if (tunnelInterfaceBorder == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceBorder");
            }
            this.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            if (tunnelInterfaceBorderVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceBorderVariable");
            }
            this.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            if (tunnelInterfaceCarrier == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceCarrier");
            }
            this.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            if (tunnelInterfaceCarrierVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceCarrierVariable");
            }
            this.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            if (tunnelInterfaceClearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceClearDontFragment");
            }
            this.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            if (tunnelInterfaceClearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceClearDontFragmentVariable");
            }
            this.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearNetworkBroadcast(Boolean tunnelInterfaceClearNetworkBroadcast) {
            if (tunnelInterfaceClearNetworkBroadcast == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceClearNetworkBroadcast");
            }
            this.tunnelInterfaceClearNetworkBroadcast = tunnelInterfaceClearNetworkBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearNetworkBroadcastVariable(String tunnelInterfaceClearNetworkBroadcastVariable) {
            if (tunnelInterfaceClearNetworkBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceClearNetworkBroadcastVariable");
            }
            this.tunnelInterfaceClearNetworkBroadcastVariable = tunnelInterfaceClearNetworkBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            if (tunnelInterfaceColor == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceColor");
            }
            this.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            if (tunnelInterfaceColorVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceColorVariable");
            }
            this.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceEncapsulations(List<GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations) {
            if (tunnelInterfaceEncapsulations == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceEncapsulations");
            }
            this.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }
        public Builder tunnelInterfaceEncapsulations(GetTransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            if (tunnelInterfaceExcludeControllerGroupListVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceExcludeControllerGroupListVariable");
            }
            this.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            if (tunnelInterfaceExcludeControllerGroupLists == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceExcludeControllerGroupLists");
            }
            this.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroups(Integer tunnelInterfaceGroups) {
            if (tunnelInterfaceGroups == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceGroups");
            }
            this.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            if (tunnelInterfaceGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceGroupsVariable");
            }
            this.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            if (tunnelInterfaceHelloInterval == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceHelloInterval");
            }
            this.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            if (tunnelInterfaceHelloIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceHelloIntervalVariable");
            }
            this.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            if (tunnelInterfaceHelloTolerance == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceHelloTolerance");
            }
            this.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            if (tunnelInterfaceHelloToleranceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceHelloToleranceVariable");
            }
            this.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            if (tunnelInterfaceLastResortCircuit == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceLastResortCircuit");
            }
            this.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            if (tunnelInterfaceLastResortCircuitVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceLastResortCircuitVariable");
            }
            this.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            if (tunnelInterfaceLowBandwidthLink == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceLowBandwidthLink");
            }
            this.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            if (tunnelInterfaceLowBandwidthLinkVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceLowBandwidthLinkVariable");
            }
            this.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            if (tunnelInterfaceMaxControlConnections == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceMaxControlConnections");
            }
            this.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            if (tunnelInterfaceMaxControlConnectionsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceMaxControlConnectionsVariable");
            }
            this.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            if (tunnelInterfaceNatRefreshInterval == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceNatRefreshInterval");
            }
            this.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            if (tunnelInterfaceNatRefreshIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceNatRefreshIntervalVariable");
            }
            this.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            if (tunnelInterfacePortHop == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfacePortHop");
            }
            this.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            if (tunnelInterfacePortHopVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfacePortHopVariable");
            }
            this.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceRestrict(Boolean tunnelInterfaceRestrict) {
            if (tunnelInterfaceRestrict == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceRestrict");
            }
            this.tunnelInterfaceRestrict = tunnelInterfaceRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceRestrictVariable(String tunnelInterfaceRestrictVariable) {
            if (tunnelInterfaceRestrictVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceRestrictVariable");
            }
            this.tunnelInterfaceRestrictVariable = tunnelInterfaceRestrictVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            if (tunnelInterfaceTunnelTcpMss == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceTunnelTcpMss");
            }
            this.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            if (tunnelInterfaceTunnelTcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceTunnelTcpMssVariable");
            }
            this.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            if (tunnelInterfaceVbondAsStunServer == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceVbondAsStunServer");
            }
            this.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            if (tunnelInterfaceVbondAsStunServerVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceVbondAsStunServerVariable");
            }
            this.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            if (tunnelInterfaceVmanageConnectionPreference == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceVmanageConnectionPreference");
            }
            this.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            if (tunnelInterfaceVmanageConnectionPreferenceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelInterfaceVmanageConnectionPreferenceVariable");
            }
            this.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosMode(String tunnelQosMode) {
            if (tunnelQosMode == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelQosMode");
            }
            this.tunnelQosMode = tunnelQosMode;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            if (tunnelQosModeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "tunnelQosModeVariable");
            }
            this.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceT1E1SerialFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetTransportWanVpnInterfaceT1E1SerialFeatureResult build() {
            final var _resultValue = new GetTransportWanVpnInterfaceT1E1SerialFeatureResult();
            _resultValue.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            _resultValue.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            _resultValue.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            _resultValue.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            _resultValue.bandwidth = bandwidth;
            _resultValue.bandwidthDownstream = bandwidthDownstream;
            _resultValue.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            _resultValue.bandwidthVariable = bandwidthVariable;
            _resultValue.clockRate = clockRate;
            _resultValue.clockRateVariable = clockRateVariable;
            _resultValue.description = description;
            _resultValue.encapsulation = encapsulation;
            _resultValue.encapsulationVariable = encapsulationVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.mtu = mtu;
            _resultValue.mtuVariable = mtuVariable;
            _resultValue.name = name;
            _resultValue.perTunnelQos = perTunnelQos;
            _resultValue.perTunnelQosAggregator = perTunnelQosAggregator;
            _resultValue.perTunnelQosAggregatorVariable = perTunnelQosAggregatorVariable;
            _resultValue.perTunnelQosVariable = perTunnelQosVariable;
            _resultValue.qosShapingRate = qosShapingRate;
            _resultValue.qosShapingRateVariable = qosShapingRateVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.tlocExtension = tlocExtension;
            _resultValue.tlocExtensionVariable = tlocExtensionVariable;
            _resultValue.transportWanVpnFeatureId = transportWanVpnFeatureId;
            _resultValue.tunnelInterface = tunnelInterface;
            _resultValue.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            _resultValue.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            _resultValue.tunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            _resultValue.tunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            _resultValue.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            _resultValue.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            _resultValue.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            _resultValue.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            _resultValue.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            _resultValue.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            _resultValue.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            _resultValue.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            _resultValue.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            _resultValue.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            _resultValue.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            _resultValue.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            _resultValue.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            _resultValue.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            _resultValue.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            _resultValue.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            _resultValue.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            _resultValue.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            _resultValue.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            _resultValue.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            _resultValue.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            _resultValue.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            _resultValue.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            _resultValue.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            _resultValue.tunnelInterfaceBorder = tunnelInterfaceBorder;
            _resultValue.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            _resultValue.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            _resultValue.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            _resultValue.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            _resultValue.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            _resultValue.tunnelInterfaceClearNetworkBroadcast = tunnelInterfaceClearNetworkBroadcast;
            _resultValue.tunnelInterfaceClearNetworkBroadcastVariable = tunnelInterfaceClearNetworkBroadcastVariable;
            _resultValue.tunnelInterfaceColor = tunnelInterfaceColor;
            _resultValue.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            _resultValue.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            _resultValue.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            _resultValue.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            _resultValue.tunnelInterfaceGroups = tunnelInterfaceGroups;
            _resultValue.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            _resultValue.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            _resultValue.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            _resultValue.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            _resultValue.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            _resultValue.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            _resultValue.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            _resultValue.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            _resultValue.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            _resultValue.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            _resultValue.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            _resultValue.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            _resultValue.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            _resultValue.tunnelInterfacePortHop = tunnelInterfacePortHop;
            _resultValue.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            _resultValue.tunnelInterfaceRestrict = tunnelInterfaceRestrict;
            _resultValue.tunnelInterfaceRestrictVariable = tunnelInterfaceRestrictVariable;
            _resultValue.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            _resultValue.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            _resultValue.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            _resultValue.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            _resultValue.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            _resultValue.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            _resultValue.tunnelQosMode = tunnelQosMode;
            _resultValue.tunnelQosModeVariable = tunnelQosModeVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
