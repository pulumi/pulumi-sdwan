// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.CiscoVpnInterfaceGreFeatureTemplateAccessListArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnInterfaceGreFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnInterfaceGreFeatureTemplateArgs Empty = new CiscoVpnInterfaceGreFeatureTemplateArgs();

    /**
     * Apply ACL
     * 
     */
    @Import(name="accessLists")
    private @Nullable Output<List<CiscoVpnInterfaceGreFeatureTemplateAccessListArgs>> accessLists;

    /**
     * @return Apply ACL
     * 
     */
    public Optional<Output<List<CiscoVpnInterfaceGreFeatureTemplateAccessListArgs>>> accessLists() {
        return Optional.ofNullable(this.accessLists);
    }

    /**
     * Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
     * 
     */
    @Import(name="application")
    private @Nullable Output<String> application;

    /**
     * @return Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
     * 
     */
    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="applicationVariable")
    private @Nullable Output<String> applicationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> applicationVariable() {
        return Optional.ofNullable(this.applicationVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Import(name="clearDontFragment")
    private @Nullable Output<Boolean> clearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> clearDontFragment() {
        return Optional.ofNullable(this.clearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clearDontFragmentVariable")
    private @Nullable Output<String> clearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clearDontFragmentVariable() {
        return Optional.ofNullable(this.clearDontFragmentVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
     * present
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
     * present
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceNameVariable")
    private @Nullable Output<String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceNameVariable() {
        return Optional.ofNullable(this.interfaceNameVariable);
    }

    /**
     * Assign IPv4 address
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return Assign IPv4 address
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipAddressVariable")
    private @Nullable Output<String> ipAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipAddressVariable() {
        return Optional.ofNullable(this.ipAddressVariable);
    }

    /**
     * Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
     * 
     */
    @Import(name="ipMtu")
    private @Nullable Output<Integer> ipMtu;

    /**
     * @return Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> ipMtu() {
        return Optional.ofNullable(this.ipMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipMtuVariable")
    private @Nullable Output<String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipMtuVariable() {
        return Optional.ofNullable(this.ipMtuVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Name of rewrite rule
     * 
     */
    @Import(name="rewriteRule")
    private @Nullable Output<String> rewriteRule;

    /**
     * @return Name of rewrite rule
     * 
     */
    public Optional<Output<String>> rewriteRule() {
        return Optional.ofNullable(this.rewriteRule);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="rewriteRuleVariable")
    private @Nullable Output<String> rewriteRuleVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> rewriteRuleVariable() {
        return Optional.ofNullable(this.rewriteRuleVariable);
    }

    /**
     * Administrative state - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Import(name="tcpMssAdjust")
    private @Nullable Output<Integer> tcpMssAdjust;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tcpMssAdjust() {
        return Optional.ofNullable(this.tcpMssAdjust);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssAdjustVariable")
    private @Nullable Output<String> tcpMssAdjustVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssAdjustVariable() {
        return Optional.ofNullable(this.tcpMssAdjustVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerVariable")
    private @Nullable Output<String> trackerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerVariable() {
        return Optional.ofNullable(this.trackerVariable);
    }

    /**
     * Enable tracker for this interface
     * 
     */
    @Import(name="trackers")
    private @Nullable Output<List<String>> trackers;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<Output<List<String>>> trackers() {
        return Optional.ofNullable(this.trackers);
    }

    /**
     * Tunnel destination IP Address
     * 
     */
    @Import(name="tunnelDestination")
    private @Nullable Output<String> tunnelDestination;

    /**
     * @return Tunnel destination IP Address
     * 
     */
    public Optional<Output<String>> tunnelDestination() {
        return Optional.ofNullable(this.tunnelDestination);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelDestinationVariable")
    private @Nullable Output<String> tunnelDestinationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelDestinationVariable() {
        return Optional.ofNullable(this.tunnelDestinationVariable);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelRouteVia")
    private @Nullable Output<String> tunnelRouteVia;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelRouteVia() {
        return Optional.ofNullable(this.tunnelRouteVia);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelRouteViaVariable")
    private @Nullable Output<String> tunnelRouteViaVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelRouteViaVariable() {
        return Optional.ofNullable(this.tunnelRouteViaVariable);
    }

    /**
     * Tunnel source IP Address
     * 
     */
    @Import(name="tunnelSource")
    private @Nullable Output<String> tunnelSource;

    /**
     * @return Tunnel source IP Address
     * 
     */
    public Optional<Output<String>> tunnelSource() {
        return Optional.ofNullable(this.tunnelSource);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelSourceInterface")
    private @Nullable Output<String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelSourceInterface() {
        return Optional.ofNullable(this.tunnelSourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceInterfaceVariable")
    private @Nullable Output<String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceInterfaceVariable() {
        return Optional.ofNullable(this.tunnelSourceInterfaceVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceVariable")
    private @Nullable Output<String> tunnelSourceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceVariable() {
        return Optional.ofNullable(this.tunnelSourceVariable);
    }

    private CiscoVpnInterfaceGreFeatureTemplateArgs() {}

    private CiscoVpnInterfaceGreFeatureTemplateArgs(CiscoVpnInterfaceGreFeatureTemplateArgs $) {
        this.accessLists = $.accessLists;
        this.application = $.application;
        this.applicationVariable = $.applicationVariable;
        this.clearDontFragment = $.clearDontFragment;
        this.clearDontFragmentVariable = $.clearDontFragmentVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.interfaceName = $.interfaceName;
        this.interfaceNameVariable = $.interfaceNameVariable;
        this.ipAddress = $.ipAddress;
        this.ipAddressVariable = $.ipAddressVariable;
        this.ipMtu = $.ipMtu;
        this.ipMtuVariable = $.ipMtuVariable;
        this.name = $.name;
        this.rewriteRule = $.rewriteRule;
        this.rewriteRuleVariable = $.rewriteRuleVariable;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.tcpMssAdjust = $.tcpMssAdjust;
        this.tcpMssAdjustVariable = $.tcpMssAdjustVariable;
        this.trackerVariable = $.trackerVariable;
        this.trackers = $.trackers;
        this.tunnelDestination = $.tunnelDestination;
        this.tunnelDestinationVariable = $.tunnelDestinationVariable;
        this.tunnelRouteVia = $.tunnelRouteVia;
        this.tunnelRouteViaVariable = $.tunnelRouteViaVariable;
        this.tunnelSource = $.tunnelSource;
        this.tunnelSourceInterface = $.tunnelSourceInterface;
        this.tunnelSourceInterfaceVariable = $.tunnelSourceInterfaceVariable;
        this.tunnelSourceVariable = $.tunnelSourceVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnInterfaceGreFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnInterfaceGreFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoVpnInterfaceGreFeatureTemplateArgs();
        }

        public Builder(CiscoVpnInterfaceGreFeatureTemplateArgs defaults) {
            $ = new CiscoVpnInterfaceGreFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(@Nullable Output<List<CiscoVpnInterfaceGreFeatureTemplateAccessListArgs>> accessLists) {
            $.accessLists = accessLists;
            return this;
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(List<CiscoVpnInterfaceGreFeatureTemplateAccessListArgs> accessLists) {
            return accessLists(Output.of(accessLists));
        }

        /**
         * @param accessLists Apply ACL
         * 
         * @return builder
         * 
         */
        public Builder accessLists(CiscoVpnInterfaceGreFeatureTemplateAccessListArgs... accessLists) {
            return accessLists(List.of(accessLists));
        }

        /**
         * @param application Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        /**
         * @param application Enable Application Tunnel Type - Choices: `none`, `sig` - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder application(String application) {
            return application(Output.of(application));
        }

        /**
         * @param applicationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder applicationVariable(@Nullable Output<String> applicationVariable) {
            $.applicationVariable = applicationVariable;
            return this;
        }

        /**
         * @param applicationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder applicationVariable(String applicationVariable) {
            return applicationVariable(Output.of(applicationVariable));
        }

        /**
         * @param clearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragment(@Nullable Output<Boolean> clearDontFragment) {
            $.clearDontFragment = clearDontFragment;
            return this;
        }

        /**
         * @param clearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragment(Boolean clearDontFragment) {
            return clearDontFragment(Output.of(clearDontFragment));
        }

        /**
         * @param clearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentVariable(@Nullable Output<String> clearDontFragmentVariable) {
            $.clearDontFragmentVariable = clearDontFragmentVariable;
            return this;
        }

        /**
         * @param clearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentVariable(String clearDontFragmentVariable) {
            return clearDontFragmentVariable(Output.of(clearDontFragmentVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
         * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
         * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param interfaceName Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
         * present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid or irb&lt;bridgeid:1-63&gt; or loopback&lt;string&gt; or natpool-&lt;1..31&gt; when
         * present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(@Nullable Output<String> interfaceNameVariable) {
            $.interfaceNameVariable = interfaceNameVariable;
            return this;
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            return interfaceNameVariable(Output.of(interfaceNameVariable));
        }

        /**
         * @param ipAddress Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVariable(@Nullable Output<String> ipAddressVariable) {
            $.ipAddressVariable = ipAddressVariable;
            return this;
        }

        /**
         * @param ipAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVariable(String ipAddressVariable) {
            return ipAddressVariable(Output.of(ipAddressVariable));
        }

        /**
         * @param ipMtu Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(@Nullable Output<Integer> ipMtu) {
            $.ipMtu = ipMtu;
            return this;
        }

        /**
         * @param ipMtu Interface MTU &lt;576..2000&gt;, in bytes - Range: `64`-`18000` - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder ipMtu(Integer ipMtu) {
            return ipMtu(Output.of(ipMtu));
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(@Nullable Output<String> ipMtuVariable) {
            $.ipMtuVariable = ipMtuVariable;
            return this;
        }

        /**
         * @param ipMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipMtuVariable(String ipMtuVariable) {
            return ipMtuVariable(Output.of(ipMtuVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rewriteRule Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder rewriteRule(@Nullable Output<String> rewriteRule) {
            $.rewriteRule = rewriteRule;
            return this;
        }

        /**
         * @param rewriteRule Name of rewrite rule
         * 
         * @return builder
         * 
         */
        public Builder rewriteRule(String rewriteRule) {
            return rewriteRule(Output.of(rewriteRule));
        }

        /**
         * @param rewriteRuleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleVariable(@Nullable Output<String> rewriteRuleVariable) {
            $.rewriteRuleVariable = rewriteRuleVariable;
            return this;
        }

        /**
         * @param rewriteRuleVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rewriteRuleVariable(String rewriteRuleVariable) {
            return rewriteRuleVariable(Output.of(rewriteRuleVariable));
        }

        /**
         * @param shutdown Administrative state - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param tcpMssAdjust TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjust(@Nullable Output<Integer> tcpMssAdjust) {
            $.tcpMssAdjust = tcpMssAdjust;
            return this;
        }

        /**
         * @param tcpMssAdjust TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjust(Integer tcpMssAdjust) {
            return tcpMssAdjust(Output.of(tcpMssAdjust));
        }

        /**
         * @param tcpMssAdjustVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjustVariable(@Nullable Output<String> tcpMssAdjustVariable) {
            $.tcpMssAdjustVariable = tcpMssAdjustVariable;
            return this;
        }

        /**
         * @param tcpMssAdjustVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjustVariable(String tcpMssAdjustVariable) {
            return tcpMssAdjustVariable(Output.of(tcpMssAdjustVariable));
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(@Nullable Output<String> trackerVariable) {
            $.trackerVariable = trackerVariable;
            return this;
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(String trackerVariable) {
            return trackerVariable(Output.of(trackerVariable));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(@Nullable Output<List<String>> trackers) {
            $.trackers = trackers;
            return this;
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(List<String> trackers) {
            return trackers(Output.of(trackers));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }

        /**
         * @param tunnelDestination Tunnel destination IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestination(@Nullable Output<String> tunnelDestination) {
            $.tunnelDestination = tunnelDestination;
            return this;
        }

        /**
         * @param tunnelDestination Tunnel destination IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestination(String tunnelDestination) {
            return tunnelDestination(Output.of(tunnelDestination));
        }

        /**
         * @param tunnelDestinationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationVariable(@Nullable Output<String> tunnelDestinationVariable) {
            $.tunnelDestinationVariable = tunnelDestinationVariable;
            return this;
        }

        /**
         * @param tunnelDestinationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationVariable(String tunnelDestinationVariable) {
            return tunnelDestinationVariable(Output.of(tunnelDestinationVariable));
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(@Nullable Output<String> tunnelRouteVia) {
            $.tunnelRouteVia = tunnelRouteVia;
            return this;
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            return tunnelRouteVia(Output.of(tunnelRouteVia));
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(@Nullable Output<String> tunnelRouteViaVariable) {
            $.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            return tunnelRouteViaVariable(Output.of(tunnelRouteViaVariable));
        }

        /**
         * @param tunnelSource Tunnel source IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelSource(@Nullable Output<String> tunnelSource) {
            $.tunnelSource = tunnelSource;
            return this;
        }

        /**
         * @param tunnelSource Tunnel source IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelSource(String tunnelSource) {
            return tunnelSource(Output.of(tunnelSource));
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(@Nullable Output<String> tunnelSourceInterface) {
            $.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            return tunnelSourceInterface(Output.of(tunnelSourceInterface));
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(@Nullable Output<String> tunnelSourceInterfaceVariable) {
            $.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            return tunnelSourceInterfaceVariable(Output.of(tunnelSourceInterfaceVariable));
        }

        /**
         * @param tunnelSourceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceVariable(@Nullable Output<String> tunnelSourceVariable) {
            $.tunnelSourceVariable = tunnelSourceVariable;
            return this;
        }

        /**
         * @param tunnelSourceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceVariable(String tunnelSourceVariable) {
            return tunnelSourceVariable(Output.of(tunnelSourceVariable));
        }

        public CiscoVpnInterfaceGreFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoVpnInterfaceGreFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoVpnInterfaceGreFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
