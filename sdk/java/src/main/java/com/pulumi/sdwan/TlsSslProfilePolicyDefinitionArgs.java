// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsSslProfilePolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsSslProfilePolicyDefinitionArgs Empty = new TlsSslProfilePolicyDefinitionArgs();

    /**
     * Allow URL list ID
     * 
     */
    @Import(name="allowUrlListId")
    private @Nullable Output<String> allowUrlListId;

    /**
     * @return Allow URL list ID
     * 
     */
    public Optional<Output<String>> allowUrlListId() {
        return Optional.ofNullable(this.allowUrlListId);
    }

    /**
     * Allow URL list version
     * 
     */
    @Import(name="allowUrlListVersion")
    private @Nullable Output<Integer> allowUrlListVersion;

    /**
     * @return Allow URL list version
     * 
     */
    public Optional<Output<Integer>> allowUrlListVersion() {
        return Optional.ofNullable(this.allowUrlListVersion);
    }

    /**
     * Block URL list ID
     * 
     */
    @Import(name="blockUrlListId")
    private @Nullable Output<String> blockUrlListId;

    /**
     * @return Block URL list ID
     * 
     */
    public Optional<Output<String>> blockUrlListId() {
        return Optional.ofNullable(this.blockUrlListId);
    }

    /**
     * Block URL list version
     * 
     */
    @Import(name="blockUrlListVersion")
    private @Nullable Output<Integer> blockUrlListVersion;

    /**
     * @return Block URL list version
     * 
     */
    public Optional<Output<Integer>> blockUrlListVersion() {
        return Optional.ofNullable(this.blockUrlListVersion);
    }

    /**
     * Categories that should be decrypted
     * 
     */
    @Import(name="decryptCategories")
    private @Nullable Output<List<String>> decryptCategories;

    /**
     * @return Categories that should be decrypted
     * 
     */
    public Optional<Output<List<String>>> decryptCategories() {
        return Optional.ofNullable(this.decryptCategories);
    }

    /**
     * Decrypt threshold
     *   - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
     * 
     */
    @Import(name="decryptThreshold")
    private @Nullable Output<String> decryptThreshold;

    /**
     * @return Decrypt threshold
     *   - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
     * 
     */
    public Optional<Output<String>> decryptThreshold() {
        return Optional.ofNullable(this.decryptThreshold);
    }

    /**
     * The description of the policy definition.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the policy definition.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Fail decrypt enabled
     * 
     */
    @Import(name="failDecrypt")
    private @Nullable Output<Boolean> failDecrypt;

    /**
     * @return Fail decrypt enabled
     * 
     */
    public Optional<Output<Boolean>> failDecrypt() {
        return Optional.ofNullable(this.failDecrypt);
    }

    /**
     * The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The policy mode
     *   - Choices: `security`, `unified`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the policy definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Categories that should never be decrypted
     * 
     */
    @Import(name="neverDecryptCategories")
    private @Nullable Output<List<String>> neverDecryptCategories;

    /**
     * @return Categories that should never be decrypted
     * 
     */
    public Optional<Output<List<String>>> neverDecryptCategories() {
        return Optional.ofNullable(this.neverDecryptCategories);
    }

    /**
     * Reputation enabled
     * 
     */
    @Import(name="reputation")
    private @Nullable Output<Boolean> reputation;

    /**
     * @return Reputation enabled
     * 
     */
    public Optional<Output<Boolean>> reputation() {
        return Optional.ofNullable(this.reputation);
    }

    /**
     * Categories that should skipped
     * 
     */
    @Import(name="skipDecryptCategories")
    private @Nullable Output<List<String>> skipDecryptCategories;

    /**
     * @return Categories that should skipped
     * 
     */
    public Optional<Output<List<String>>> skipDecryptCategories() {
        return Optional.ofNullable(this.skipDecryptCategories);
    }

    private TlsSslProfilePolicyDefinitionArgs() {}

    private TlsSslProfilePolicyDefinitionArgs(TlsSslProfilePolicyDefinitionArgs $) {
        this.allowUrlListId = $.allowUrlListId;
        this.allowUrlListVersion = $.allowUrlListVersion;
        this.blockUrlListId = $.blockUrlListId;
        this.blockUrlListVersion = $.blockUrlListVersion;
        this.decryptCategories = $.decryptCategories;
        this.decryptThreshold = $.decryptThreshold;
        this.description = $.description;
        this.failDecrypt = $.failDecrypt;
        this.mode = $.mode;
        this.name = $.name;
        this.neverDecryptCategories = $.neverDecryptCategories;
        this.reputation = $.reputation;
        this.skipDecryptCategories = $.skipDecryptCategories;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsSslProfilePolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsSslProfilePolicyDefinitionArgs $;

        public Builder() {
            $ = new TlsSslProfilePolicyDefinitionArgs();
        }

        public Builder(TlsSslProfilePolicyDefinitionArgs defaults) {
            $ = new TlsSslProfilePolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUrlListId Allow URL list ID
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListId(@Nullable Output<String> allowUrlListId) {
            $.allowUrlListId = allowUrlListId;
            return this;
        }

        /**
         * @param allowUrlListId Allow URL list ID
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListId(String allowUrlListId) {
            return allowUrlListId(Output.of(allowUrlListId));
        }

        /**
         * @param allowUrlListVersion Allow URL list version
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListVersion(@Nullable Output<Integer> allowUrlListVersion) {
            $.allowUrlListVersion = allowUrlListVersion;
            return this;
        }

        /**
         * @param allowUrlListVersion Allow URL list version
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListVersion(Integer allowUrlListVersion) {
            return allowUrlListVersion(Output.of(allowUrlListVersion));
        }

        /**
         * @param blockUrlListId Block URL list ID
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListId(@Nullable Output<String> blockUrlListId) {
            $.blockUrlListId = blockUrlListId;
            return this;
        }

        /**
         * @param blockUrlListId Block URL list ID
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListId(String blockUrlListId) {
            return blockUrlListId(Output.of(blockUrlListId));
        }

        /**
         * @param blockUrlListVersion Block URL list version
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListVersion(@Nullable Output<Integer> blockUrlListVersion) {
            $.blockUrlListVersion = blockUrlListVersion;
            return this;
        }

        /**
         * @param blockUrlListVersion Block URL list version
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListVersion(Integer blockUrlListVersion) {
            return blockUrlListVersion(Output.of(blockUrlListVersion));
        }

        /**
         * @param decryptCategories Categories that should be decrypted
         * 
         * @return builder
         * 
         */
        public Builder decryptCategories(@Nullable Output<List<String>> decryptCategories) {
            $.decryptCategories = decryptCategories;
            return this;
        }

        /**
         * @param decryptCategories Categories that should be decrypted
         * 
         * @return builder
         * 
         */
        public Builder decryptCategories(List<String> decryptCategories) {
            return decryptCategories(Output.of(decryptCategories));
        }

        /**
         * @param decryptCategories Categories that should be decrypted
         * 
         * @return builder
         * 
         */
        public Builder decryptCategories(String... decryptCategories) {
            return decryptCategories(List.of(decryptCategories));
        }

        /**
         * @param decryptThreshold Decrypt threshold
         *   - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
         * 
         * @return builder
         * 
         */
        public Builder decryptThreshold(@Nullable Output<String> decryptThreshold) {
            $.decryptThreshold = decryptThreshold;
            return this;
        }

        /**
         * @param decryptThreshold Decrypt threshold
         *   - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`, `trustworthy`
         * 
         * @return builder
         * 
         */
        public Builder decryptThreshold(String decryptThreshold) {
            return decryptThreshold(Output.of(decryptThreshold));
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param failDecrypt Fail decrypt enabled
         * 
         * @return builder
         * 
         */
        public Builder failDecrypt(@Nullable Output<Boolean> failDecrypt) {
            $.failDecrypt = failDecrypt;
            return this;
        }

        /**
         * @param failDecrypt Fail decrypt enabled
         * 
         * @return builder
         * 
         */
        public Builder failDecrypt(Boolean failDecrypt) {
            return failDecrypt(Output.of(failDecrypt));
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode
         *   - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param neverDecryptCategories Categories that should never be decrypted
         * 
         * @return builder
         * 
         */
        public Builder neverDecryptCategories(@Nullable Output<List<String>> neverDecryptCategories) {
            $.neverDecryptCategories = neverDecryptCategories;
            return this;
        }

        /**
         * @param neverDecryptCategories Categories that should never be decrypted
         * 
         * @return builder
         * 
         */
        public Builder neverDecryptCategories(List<String> neverDecryptCategories) {
            return neverDecryptCategories(Output.of(neverDecryptCategories));
        }

        /**
         * @param neverDecryptCategories Categories that should never be decrypted
         * 
         * @return builder
         * 
         */
        public Builder neverDecryptCategories(String... neverDecryptCategories) {
            return neverDecryptCategories(List.of(neverDecryptCategories));
        }

        /**
         * @param reputation Reputation enabled
         * 
         * @return builder
         * 
         */
        public Builder reputation(@Nullable Output<Boolean> reputation) {
            $.reputation = reputation;
            return this;
        }

        /**
         * @param reputation Reputation enabled
         * 
         * @return builder
         * 
         */
        public Builder reputation(Boolean reputation) {
            return reputation(Output.of(reputation));
        }

        /**
         * @param skipDecryptCategories Categories that should skipped
         * 
         * @return builder
         * 
         */
        public Builder skipDecryptCategories(@Nullable Output<List<String>> skipDecryptCategories) {
            $.skipDecryptCategories = skipDecryptCategories;
            return this;
        }

        /**
         * @param skipDecryptCategories Categories that should skipped
         * 
         * @return builder
         * 
         */
        public Builder skipDecryptCategories(List<String> skipDecryptCategories) {
            return skipDecryptCategories(Output.of(skipDecryptCategories));
        }

        /**
         * @param skipDecryptCategories Categories that should skipped
         * 
         * @return builder
         * 
         */
        public Builder skipDecryptCategories(String... skipDecryptCategories) {
            return skipDecryptCategories(List.of(skipDecryptCategories));
        }

        public TlsSslProfilePolicyDefinitionArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("TlsSslProfilePolicyDefinitionArgs", "description");
            }
            return $;
        }
    }

}
