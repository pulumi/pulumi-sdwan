// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetSystemSecurityFeatureKey;
import com.pulumi.sdwan.outputs.GetSystemSecurityFeatureKeychain;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSystemSecurityFeatureResult {
    /**
     * @return Set the sliding replay window size
     * 
     */
    private String antiReplayWindow;
    /**
     * @return Variable name
     * 
     */
    private String antiReplayWindowVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Extended Anti-Replay Window
     * 
     */
    private Integer extendedAntiReplayWindow;
    /**
     * @return Variable name
     * 
     */
    private String extendedAntiReplayWindowVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Variable name
     * 
     */
    private String integrityTypeVariable;
    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    private List<String> integrityTypes;
    /**
     * @return Enable or disable IPsec pairwise-keying
     * 
     */
    private Boolean ipsecPairwiseKeying;
    /**
     * @return Variable name
     * 
     */
    private String ipsecPairwiseKeyingVariable;
    /**
     * @return Configure a Keychain
     * 
     */
    private List<GetSystemSecurityFeatureKeychain> keychains;
    /**
     * @return Configure a Key
     * 
     */
    private List<GetSystemSecurityFeatureKey> keys;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Set how often to change the AES key for DTLS connections
     * 
     */
    private Integer rekey;
    /**
     * @return Variable name
     * 
     */
    private String rekeyVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetSystemSecurityFeatureResult() {}
    /**
     * @return Set the sliding replay window size
     * 
     */
    public String antiReplayWindow() {
        return this.antiReplayWindow;
    }
    /**
     * @return Variable name
     * 
     */
    public String antiReplayWindowVariable() {
        return this.antiReplayWindowVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Extended Anti-Replay Window
     * 
     */
    public Integer extendedAntiReplayWindow() {
        return this.extendedAntiReplayWindow;
    }
    /**
     * @return Variable name
     * 
     */
    public String extendedAntiReplayWindowVariable() {
        return this.extendedAntiReplayWindowVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Variable name
     * 
     */
    public String integrityTypeVariable() {
        return this.integrityTypeVariable;
    }
    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    public List<String> integrityTypes() {
        return this.integrityTypes;
    }
    /**
     * @return Enable or disable IPsec pairwise-keying
     * 
     */
    public Boolean ipsecPairwiseKeying() {
        return this.ipsecPairwiseKeying;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecPairwiseKeyingVariable() {
        return this.ipsecPairwiseKeyingVariable;
    }
    /**
     * @return Configure a Keychain
     * 
     */
    public List<GetSystemSecurityFeatureKeychain> keychains() {
        return this.keychains;
    }
    /**
     * @return Configure a Key
     * 
     */
    public List<GetSystemSecurityFeatureKey> keys() {
        return this.keys;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set how often to change the AES key for DTLS connections
     * 
     */
    public Integer rekey() {
        return this.rekey;
    }
    /**
     * @return Variable name
     * 
     */
    public String rekeyVariable() {
        return this.rekeyVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemSecurityFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String antiReplayWindow;
        private String antiReplayWindowVariable;
        private String description;
        private Integer extendedAntiReplayWindow;
        private String extendedAntiReplayWindowVariable;
        private String featureProfileId;
        private String id;
        private String integrityTypeVariable;
        private List<String> integrityTypes;
        private Boolean ipsecPairwiseKeying;
        private String ipsecPairwiseKeyingVariable;
        private List<GetSystemSecurityFeatureKeychain> keychains;
        private List<GetSystemSecurityFeatureKey> keys;
        private String name;
        private Integer rekey;
        private String rekeyVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetSystemSecurityFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.antiReplayWindow = defaults.antiReplayWindow;
    	      this.antiReplayWindowVariable = defaults.antiReplayWindowVariable;
    	      this.description = defaults.description;
    	      this.extendedAntiReplayWindow = defaults.extendedAntiReplayWindow;
    	      this.extendedAntiReplayWindowVariable = defaults.extendedAntiReplayWindowVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.integrityTypeVariable = defaults.integrityTypeVariable;
    	      this.integrityTypes = defaults.integrityTypes;
    	      this.ipsecPairwiseKeying = defaults.ipsecPairwiseKeying;
    	      this.ipsecPairwiseKeyingVariable = defaults.ipsecPairwiseKeyingVariable;
    	      this.keychains = defaults.keychains;
    	      this.keys = defaults.keys;
    	      this.name = defaults.name;
    	      this.rekey = defaults.rekey;
    	      this.rekeyVariable = defaults.rekeyVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder antiReplayWindow(String antiReplayWindow) {
            if (antiReplayWindow == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "antiReplayWindow");
            }
            this.antiReplayWindow = antiReplayWindow;
            return this;
        }
        @CustomType.Setter
        public Builder antiReplayWindowVariable(String antiReplayWindowVariable) {
            if (antiReplayWindowVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "antiReplayWindowVariable");
            }
            this.antiReplayWindowVariable = antiReplayWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder extendedAntiReplayWindow(Integer extendedAntiReplayWindow) {
            if (extendedAntiReplayWindow == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "extendedAntiReplayWindow");
            }
            this.extendedAntiReplayWindow = extendedAntiReplayWindow;
            return this;
        }
        @CustomType.Setter
        public Builder extendedAntiReplayWindowVariable(String extendedAntiReplayWindowVariable) {
            if (extendedAntiReplayWindowVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "extendedAntiReplayWindowVariable");
            }
            this.extendedAntiReplayWindowVariable = extendedAntiReplayWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder integrityTypeVariable(String integrityTypeVariable) {
            if (integrityTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "integrityTypeVariable");
            }
            this.integrityTypeVariable = integrityTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder integrityTypes(List<String> integrityTypes) {
            if (integrityTypes == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "integrityTypes");
            }
            this.integrityTypes = integrityTypes;
            return this;
        }
        public Builder integrityTypes(String... integrityTypes) {
            return integrityTypes(List.of(integrityTypes));
        }
        @CustomType.Setter
        public Builder ipsecPairwiseKeying(Boolean ipsecPairwiseKeying) {
            if (ipsecPairwiseKeying == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "ipsecPairwiseKeying");
            }
            this.ipsecPairwiseKeying = ipsecPairwiseKeying;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPairwiseKeyingVariable(String ipsecPairwiseKeyingVariable) {
            if (ipsecPairwiseKeyingVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "ipsecPairwiseKeyingVariable");
            }
            this.ipsecPairwiseKeyingVariable = ipsecPairwiseKeyingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder keychains(List<GetSystemSecurityFeatureKeychain> keychains) {
            if (keychains == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "keychains");
            }
            this.keychains = keychains;
            return this;
        }
        public Builder keychains(GetSystemSecurityFeatureKeychain... keychains) {
            return keychains(List.of(keychains));
        }
        @CustomType.Setter
        public Builder keys(List<GetSystemSecurityFeatureKey> keys) {
            if (keys == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "keys");
            }
            this.keys = keys;
            return this;
        }
        public Builder keys(GetSystemSecurityFeatureKey... keys) {
            return keys(List.of(keys));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder rekey(Integer rekey) {
            if (rekey == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "rekey");
            }
            this.rekey = rekey;
            return this;
        }
        @CustomType.Setter
        public Builder rekeyVariable(String rekeyVariable) {
            if (rekeyVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "rekeyVariable");
            }
            this.rekeyVariable = rekeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetSystemSecurityFeatureResult build() {
            final var _resultValue = new GetSystemSecurityFeatureResult();
            _resultValue.antiReplayWindow = antiReplayWindow;
            _resultValue.antiReplayWindowVariable = antiReplayWindowVariable;
            _resultValue.description = description;
            _resultValue.extendedAntiReplayWindow = extendedAntiReplayWindow;
            _resultValue.extendedAntiReplayWindowVariable = extendedAntiReplayWindowVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.integrityTypeVariable = integrityTypeVariable;
            _resultValue.integrityTypes = integrityTypes;
            _resultValue.ipsecPairwiseKeying = ipsecPairwiseKeying;
            _resultValue.ipsecPairwiseKeyingVariable = ipsecPairwiseKeyingVariable;
            _resultValue.keychains = keychains;
            _resultValue.keys = keys;
            _resultValue.name = name;
            _resultValue.rekey = rekey;
            _resultValue.rekeyVariable = rekeyVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
