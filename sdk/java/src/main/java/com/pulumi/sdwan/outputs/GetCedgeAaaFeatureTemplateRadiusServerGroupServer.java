// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCedgeAaaFeatureTemplateRadiusServerGroupServer {
    /**
     * @return Set Accounting port to use to connect to Radius server
     * 
     */
    private Integer accountingPort;
    /**
     * @return Variable name
     * 
     */
    private String accountingPortVariable;
    /**
     * @return Set IP address of Radius server
     * 
     */
    private String address;
    /**
     * @return Set Authentication port to use to connect to Radius server
     * 
     */
    private Integer authenticationPort;
    /**
     * @return Variable name
     * 
     */
    private String authenticationPortVariable;
    /**
     * @return Type of encyption. To be used for type 6
     * 
     */
    private String encryptionType;
    /**
     * @return Set the Radius server shared key
     * 
     */
    private String key;
    /**
     * @return key type
     * 
     */
    private String keyType;
    /**
     * @return Variable name
     * 
     */
    private String keyTypeVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Configure how many times to contact this Radius server
     * 
     */
    private Integer retransmit;
    /**
     * @return Variable name
     * 
     */
    private String retransmitVariable;
    /**
     * @return Set the Radius server shared type 7 encrypted key
     * 
     */
    private String secretKey;
    /**
     * @return Variable name
     * 
     */
    private String secretKeyVariable;
    /**
     * @return Configure how long to wait for replies from the Radius server
     * 
     */
    private Integer timeout;
    /**
     * @return Variable name
     * 
     */
    private String timeoutVariable;

    private GetCedgeAaaFeatureTemplateRadiusServerGroupServer() {}
    /**
     * @return Set Accounting port to use to connect to Radius server
     * 
     */
    public Integer accountingPort() {
        return this.accountingPort;
    }
    /**
     * @return Variable name
     * 
     */
    public String accountingPortVariable() {
        return this.accountingPortVariable;
    }
    /**
     * @return Set IP address of Radius server
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Set Authentication port to use to connect to Radius server
     * 
     */
    public Integer authenticationPort() {
        return this.authenticationPort;
    }
    /**
     * @return Variable name
     * 
     */
    public String authenticationPortVariable() {
        return this.authenticationPortVariable;
    }
    /**
     * @return Type of encyption. To be used for type 6
     * 
     */
    public String encryptionType() {
        return this.encryptionType;
    }
    /**
     * @return Set the Radius server shared key
     * 
     */
    public String key() {
        return this.key;
    }
    /**
     * @return key type
     * 
     */
    public String keyType() {
        return this.keyType;
    }
    /**
     * @return Variable name
     * 
     */
    public String keyTypeVariable() {
        return this.keyTypeVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Configure how many times to contact this Radius server
     * 
     */
    public Integer retransmit() {
        return this.retransmit;
    }
    /**
     * @return Variable name
     * 
     */
    public String retransmitVariable() {
        return this.retransmitVariable;
    }
    /**
     * @return Set the Radius server shared type 7 encrypted key
     * 
     */
    public String secretKey() {
        return this.secretKey;
    }
    /**
     * @return Variable name
     * 
     */
    public String secretKeyVariable() {
        return this.secretKeyVariable;
    }
    /**
     * @return Configure how long to wait for replies from the Radius server
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String timeoutVariable() {
        return this.timeoutVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCedgeAaaFeatureTemplateRadiusServerGroupServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer accountingPort;
        private String accountingPortVariable;
        private String address;
        private Integer authenticationPort;
        private String authenticationPortVariable;
        private String encryptionType;
        private String key;
        private String keyType;
        private String keyTypeVariable;
        private Boolean optional;
        private Integer retransmit;
        private String retransmitVariable;
        private String secretKey;
        private String secretKeyVariable;
        private Integer timeout;
        private String timeoutVariable;
        public Builder() {}
        public Builder(GetCedgeAaaFeatureTemplateRadiusServerGroupServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountingPort = defaults.accountingPort;
    	      this.accountingPortVariable = defaults.accountingPortVariable;
    	      this.address = defaults.address;
    	      this.authenticationPort = defaults.authenticationPort;
    	      this.authenticationPortVariable = defaults.authenticationPortVariable;
    	      this.encryptionType = defaults.encryptionType;
    	      this.key = defaults.key;
    	      this.keyType = defaults.keyType;
    	      this.keyTypeVariable = defaults.keyTypeVariable;
    	      this.optional = defaults.optional;
    	      this.retransmit = defaults.retransmit;
    	      this.retransmitVariable = defaults.retransmitVariable;
    	      this.secretKey = defaults.secretKey;
    	      this.secretKeyVariable = defaults.secretKeyVariable;
    	      this.timeout = defaults.timeout;
    	      this.timeoutVariable = defaults.timeoutVariable;
        }

        @CustomType.Setter
        public Builder accountingPort(Integer accountingPort) {
            if (accountingPort == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "accountingPort");
            }
            this.accountingPort = accountingPort;
            return this;
        }
        @CustomType.Setter
        public Builder accountingPortVariable(String accountingPortVariable) {
            if (accountingPortVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "accountingPortVariable");
            }
            this.accountingPortVariable = accountingPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationPort(Integer authenticationPort) {
            if (authenticationPort == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "authenticationPort");
            }
            this.authenticationPort = authenticationPort;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationPortVariable(String authenticationPortVariable) {
            if (authenticationPortVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "authenticationPortVariable");
            }
            this.authenticationPortVariable = authenticationPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder encryptionType(String encryptionType) {
            if (encryptionType == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "encryptionType");
            }
            this.encryptionType = encryptionType;
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            if (key == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "key");
            }
            this.key = key;
            return this;
        }
        @CustomType.Setter
        public Builder keyType(String keyType) {
            if (keyType == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "keyType");
            }
            this.keyType = keyType;
            return this;
        }
        @CustomType.Setter
        public Builder keyTypeVariable(String keyTypeVariable) {
            if (keyTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "keyTypeVariable");
            }
            this.keyTypeVariable = keyTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder retransmit(Integer retransmit) {
            if (retransmit == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "retransmit");
            }
            this.retransmit = retransmit;
            return this;
        }
        @CustomType.Setter
        public Builder retransmitVariable(String retransmitVariable) {
            if (retransmitVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "retransmitVariable");
            }
            this.retransmitVariable = retransmitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            if (secretKey == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "secretKey");
            }
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder secretKeyVariable(String secretKeyVariable) {
            if (secretKeyVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "secretKeyVariable");
            }
            this.secretKeyVariable = secretKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder timeoutVariable(String timeoutVariable) {
            if (timeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateRadiusServerGroupServer", "timeoutVariable");
            }
            this.timeoutVariable = timeoutVariable;
            return this;
        }
        public GetCedgeAaaFeatureTemplateRadiusServerGroupServer build() {
            final var _resultValue = new GetCedgeAaaFeatureTemplateRadiusServerGroupServer();
            _resultValue.accountingPort = accountingPort;
            _resultValue.accountingPortVariable = accountingPortVariable;
            _resultValue.address = address;
            _resultValue.authenticationPort = authenticationPort;
            _resultValue.authenticationPortVariable = authenticationPortVariable;
            _resultValue.encryptionType = encryptionType;
            _resultValue.key = key;
            _resultValue.keyType = keyType;
            _resultValue.keyTypeVariable = keyTypeVariable;
            _resultValue.optional = optional;
            _resultValue.retransmit = retransmit;
            _resultValue.retransmitVariable = retransmitVariable;
            _resultValue.secretKey = secretKey;
            _resultValue.secretKeyVariable = secretKeyVariable;
            _resultValue.timeout = timeout;
            _resultValue.timeoutVariable = timeoutVariable;
            return _resultValue;
        }
    }
}
