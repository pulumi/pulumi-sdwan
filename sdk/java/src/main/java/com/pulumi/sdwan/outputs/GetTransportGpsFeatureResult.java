// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetTransportGpsFeatureResult {
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return Enable/disable GPS
     * 
     */
    private Boolean gpsEnable;
    /**
     * @return Variable name
     * 
     */
    private String gpsEnableVariable;
    /**
     * @return Select GPS mode
     * 
     */
    private String gpsMode;
    /**
     * @return Variable name
     * 
     */
    private String gpsModeVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Destination address
     * 
     */
    private String nmeaDestinationAddress;
    /**
     * @return Variable name
     * 
     */
    private String nmeaDestinationAddressVariable;
    /**
     * @return Destination port
     * 
     */
    private Integer nmeaDestinationPort;
    /**
     * @return Variable name
     * 
     */
    private String nmeaDestinationPortVariable;
    /**
     * @return Enable/disable NMEA data
     * 
     */
    private Boolean nmeaEnable;
    /**
     * @return Variable name
     * 
     */
    private String nmeaEnableVariable;
    /**
     * @return Source address
     * 
     */
    private String nmeaSourceAddress;
    /**
     * @return Variable name
     * 
     */
    private String nmeaSourceAddressVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetTransportGpsFeatureResult() {}
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return Enable/disable GPS
     * 
     */
    public Boolean gpsEnable() {
        return this.gpsEnable;
    }
    /**
     * @return Variable name
     * 
     */
    public String gpsEnableVariable() {
        return this.gpsEnableVariable;
    }
    /**
     * @return Select GPS mode
     * 
     */
    public String gpsMode() {
        return this.gpsMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String gpsModeVariable() {
        return this.gpsModeVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Destination address
     * 
     */
    public String nmeaDestinationAddress() {
        return this.nmeaDestinationAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String nmeaDestinationAddressVariable() {
        return this.nmeaDestinationAddressVariable;
    }
    /**
     * @return Destination port
     * 
     */
    public Integer nmeaDestinationPort() {
        return this.nmeaDestinationPort;
    }
    /**
     * @return Variable name
     * 
     */
    public String nmeaDestinationPortVariable() {
        return this.nmeaDestinationPortVariable;
    }
    /**
     * @return Enable/disable NMEA data
     * 
     */
    public Boolean nmeaEnable() {
        return this.nmeaEnable;
    }
    /**
     * @return Variable name
     * 
     */
    public String nmeaEnableVariable() {
        return this.nmeaEnableVariable;
    }
    /**
     * @return Source address
     * 
     */
    public String nmeaSourceAddress() {
        return this.nmeaSourceAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String nmeaSourceAddressVariable() {
        return this.nmeaSourceAddressVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportGpsFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String featureProfileId;
        private Boolean gpsEnable;
        private String gpsEnableVariable;
        private String gpsMode;
        private String gpsModeVariable;
        private String id;
        private String name;
        private String nmeaDestinationAddress;
        private String nmeaDestinationAddressVariable;
        private Integer nmeaDestinationPort;
        private String nmeaDestinationPortVariable;
        private Boolean nmeaEnable;
        private String nmeaEnableVariable;
        private String nmeaSourceAddress;
        private String nmeaSourceAddressVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetTransportGpsFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.gpsEnable = defaults.gpsEnable;
    	      this.gpsEnableVariable = defaults.gpsEnableVariable;
    	      this.gpsMode = defaults.gpsMode;
    	      this.gpsModeVariable = defaults.gpsModeVariable;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.nmeaDestinationAddress = defaults.nmeaDestinationAddress;
    	      this.nmeaDestinationAddressVariable = defaults.nmeaDestinationAddressVariable;
    	      this.nmeaDestinationPort = defaults.nmeaDestinationPort;
    	      this.nmeaDestinationPortVariable = defaults.nmeaDestinationPortVariable;
    	      this.nmeaEnable = defaults.nmeaEnable;
    	      this.nmeaEnableVariable = defaults.nmeaEnableVariable;
    	      this.nmeaSourceAddress = defaults.nmeaSourceAddress;
    	      this.nmeaSourceAddressVariable = defaults.nmeaSourceAddressVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder gpsEnable(Boolean gpsEnable) {
            if (gpsEnable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "gpsEnable");
            }
            this.gpsEnable = gpsEnable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsEnableVariable(String gpsEnableVariable) {
            if (gpsEnableVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "gpsEnableVariable");
            }
            this.gpsEnableVariable = gpsEnableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder gpsMode(String gpsMode) {
            if (gpsMode == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "gpsMode");
            }
            this.gpsMode = gpsMode;
            return this;
        }
        @CustomType.Setter
        public Builder gpsModeVariable(String gpsModeVariable) {
            if (gpsModeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "gpsModeVariable");
            }
            this.gpsModeVariable = gpsModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaDestinationAddress(String nmeaDestinationAddress) {
            if (nmeaDestinationAddress == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaDestinationAddress");
            }
            this.nmeaDestinationAddress = nmeaDestinationAddress;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaDestinationAddressVariable(String nmeaDestinationAddressVariable) {
            if (nmeaDestinationAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaDestinationAddressVariable");
            }
            this.nmeaDestinationAddressVariable = nmeaDestinationAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaDestinationPort(Integer nmeaDestinationPort) {
            if (nmeaDestinationPort == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaDestinationPort");
            }
            this.nmeaDestinationPort = nmeaDestinationPort;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaDestinationPortVariable(String nmeaDestinationPortVariable) {
            if (nmeaDestinationPortVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaDestinationPortVariable");
            }
            this.nmeaDestinationPortVariable = nmeaDestinationPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaEnable(Boolean nmeaEnable) {
            if (nmeaEnable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaEnable");
            }
            this.nmeaEnable = nmeaEnable;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaEnableVariable(String nmeaEnableVariable) {
            if (nmeaEnableVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaEnableVariable");
            }
            this.nmeaEnableVariable = nmeaEnableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaSourceAddress(String nmeaSourceAddress) {
            if (nmeaSourceAddress == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaSourceAddress");
            }
            this.nmeaSourceAddress = nmeaSourceAddress;
            return this;
        }
        @CustomType.Setter
        public Builder nmeaSourceAddressVariable(String nmeaSourceAddressVariable) {
            if (nmeaSourceAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "nmeaSourceAddressVariable");
            }
            this.nmeaSourceAddressVariable = nmeaSourceAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportGpsFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetTransportGpsFeatureResult build() {
            final var _resultValue = new GetTransportGpsFeatureResult();
            _resultValue.description = description;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.gpsEnable = gpsEnable;
            _resultValue.gpsEnableVariable = gpsEnableVariable;
            _resultValue.gpsMode = gpsMode;
            _resultValue.gpsModeVariable = gpsModeVariable;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.nmeaDestinationAddress = nmeaDestinationAddress;
            _resultValue.nmeaDestinationAddressVariable = nmeaDestinationAddressVariable;
            _resultValue.nmeaDestinationPort = nmeaDestinationPort;
            _resultValue.nmeaDestinationPortVariable = nmeaDestinationPortVariable;
            _resultValue.nmeaEnable = nmeaEnable;
            _resultValue.nmeaEnableVariable = nmeaEnableVariable;
            _resultValue.nmeaSourceAddress = nmeaSourceAddress;
            _resultValue.nmeaSourceAddressVariable = nmeaSourceAddressVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
