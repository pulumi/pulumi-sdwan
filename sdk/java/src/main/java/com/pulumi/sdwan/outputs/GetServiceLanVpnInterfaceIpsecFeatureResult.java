// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceLanVpnInterfaceIpsecFeatureResult {
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    private String applicationTunnelType;
    /**
     * @return Variable name
     * 
     */
    private String applicationTunnelTypeVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean clearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String clearDontFragmentVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return IKE keepalive interval (seconds)
     * 
     */
    private Integer dpdInterval;
    /**
     * @return Variable name
     * 
     */
    private String dpdIntervalVariable;
    /**
     * @return IKE keepalive retries
     * 
     */
    private Integer dpdRetries;
    /**
     * @return Variable name
     * 
     */
    private String dpdRetriesVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return IKE identity the IKE preshared secret belongs to
     * 
     */
    private String ikeCiphersuite;
    /**
     * @return Variable name
     * 
     */
    private String ikeCiphersuiteVariable;
    /**
     * @return IKE Diffie Hellman Groups
     * 
     */
    private String ikeDiffieHellmanGroup;
    /**
     * @return Variable name
     * 
     */
    private String ikeDiffieHellmanGroupVariable;
    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    private String ikeIdLocalEndPoint;
    /**
     * @return Variable name
     * 
     */
    private String ikeIdLocalEndPointVariable;
    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    private String ikeIdRemoteEndPoint;
    /**
     * @return Variable name
     * 
     */
    private String ikeIdRemoteEndPointVariable;
    /**
     * @return IKE integrity protocol
     * 
     */
    private String ikeIntegrityProtocol;
    /**
     * @return Variable name
     * 
     */
    private String ikeIntegrityProtocolVariable;
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    private String ikePresharedKey;
    /**
     * @return Variable name
     * 
     */
    private String ikePresharedKeyVariable;
    /**
     * @return IKE rekey interval \n\n seconds
     * 
     */
    private Integer ikeRekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private String ikeRekeyIntervalVariable;
    /**
     * @return IKE Version \n\n
     * 
     */
    private Integer ikeVersion;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface name: IPsec when present
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return IPsec(ESP) encryption and integrity protocol
     * 
     */
    private String ipsecCiphersuite;
    /**
     * @return Variable name
     * 
     */
    private String ipsecCiphersuiteVariable;
    /**
     * @return IPsec rekey interval \n\n seconds
     * 
     */
    private Integer ipsecRekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private String ipsecRekeyIntervalVariable;
    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     * 
     */
    private Integer ipsecReplayWindow;
    /**
     * @return Variable name
     * 
     */
    private String ipsecReplayWindowVariable;
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return IPsec perfect forward secrecy settings
     * 
     */
    private String perfectForwardSecrecy;
    /**
     * @return Variable name
     * 
     */
    private String perfectForwardSecrecyVariable;
    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    private String serviceLanVpnFeatureId;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private String trackerId;
    /**
     * @return Variable name
     * 
     */
    private String trackerIdVariable;
    private String tunnelDestinationIpv4Address;
    /**
     * @return Variable name
     * 
     */
    private String tunnelDestinationIpv4AddressVariable;
    private String tunnelDestinationIpv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String tunnelDestinationIpv4SubnetMaskVariable;
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    private String tunnelRouteVia;
    /**
     * @return Variable name
     * 
     */
    private String tunnelRouteViaVariable;
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    private String tunnelSourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceInterfaceVariable;
    private String tunnelSourceIpv4Address;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceIpv4AddressVariable;
    private String tunnelSourceIpv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceIpv4SubnetMaskVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceLanVpnInterfaceIpsecFeatureResult() {}
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    public String applicationTunnelType() {
        return this.applicationTunnelType;
    }
    /**
     * @return Variable name
     * 
     */
    public String applicationTunnelTypeVariable() {
        return this.applicationTunnelTypeVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean clearDontFragment() {
        return this.clearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String clearDontFragmentVariable() {
        return this.clearDontFragmentVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return IKE keepalive interval (seconds)
     * 
     */
    public Integer dpdInterval() {
        return this.dpdInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String dpdIntervalVariable() {
        return this.dpdIntervalVariable;
    }
    /**
     * @return IKE keepalive retries
     * 
     */
    public Integer dpdRetries() {
        return this.dpdRetries;
    }
    /**
     * @return Variable name
     * 
     */
    public String dpdRetriesVariable() {
        return this.dpdRetriesVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IKE identity the IKE preshared secret belongs to
     * 
     */
    public String ikeCiphersuite() {
        return this.ikeCiphersuite;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeCiphersuiteVariable() {
        return this.ikeCiphersuiteVariable;
    }
    /**
     * @return IKE Diffie Hellman Groups
     * 
     */
    public String ikeDiffieHellmanGroup() {
        return this.ikeDiffieHellmanGroup;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeDiffieHellmanGroupVariable() {
        return this.ikeDiffieHellmanGroupVariable;
    }
    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public String ikeIdLocalEndPoint() {
        return this.ikeIdLocalEndPoint;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeIdLocalEndPointVariable() {
        return this.ikeIdLocalEndPointVariable;
    }
    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public String ikeIdRemoteEndPoint() {
        return this.ikeIdRemoteEndPoint;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeIdRemoteEndPointVariable() {
        return this.ikeIdRemoteEndPointVariable;
    }
    /**
     * @return IKE integrity protocol
     * 
     */
    public String ikeIntegrityProtocol() {
        return this.ikeIntegrityProtocol;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeIntegrityProtocolVariable() {
        return this.ikeIntegrityProtocolVariable;
    }
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public String ikePresharedKey() {
        return this.ikePresharedKey;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikePresharedKeyVariable() {
        return this.ikePresharedKeyVariable;
    }
    /**
     * @return IKE rekey interval \n\n seconds
     * 
     */
    public Integer ikeRekeyInterval() {
        return this.ikeRekeyInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeRekeyIntervalVariable() {
        return this.ikeRekeyIntervalVariable;
    }
    /**
     * @return IKE Version \n\n
     * 
     */
    public Integer ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface name: IPsec when present
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return IPsec(ESP) encryption and integrity protocol
     * 
     */
    public String ipsecCiphersuite() {
        return this.ipsecCiphersuite;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecCiphersuiteVariable() {
        return this.ipsecCiphersuiteVariable;
    }
    /**
     * @return IPsec rekey interval \n\n seconds
     * 
     */
    public Integer ipsecRekeyInterval() {
        return this.ipsecRekeyInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecRekeyIntervalVariable() {
        return this.ipsecRekeyIntervalVariable;
    }
    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     * 
     */
    public Integer ipsecReplayWindow() {
        return this.ipsecReplayWindow;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecReplayWindowVariable() {
        return this.ipsecReplayWindowVariable;
    }
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return IPsec perfect forward secrecy settings
     * 
     */
    public String perfectForwardSecrecy() {
        return this.perfectForwardSecrecy;
    }
    /**
     * @return Variable name
     * 
     */
    public String perfectForwardSecrecyVariable() {
        return this.perfectForwardSecrecyVariable;
    }
    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    public String serviceLanVpnFeatureId() {
        return this.serviceLanVpnFeatureId;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public String trackerId() {
        return this.trackerId;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerIdVariable() {
        return this.trackerIdVariable;
    }
    public String tunnelDestinationIpv4Address() {
        return this.tunnelDestinationIpv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelDestinationIpv4AddressVariable() {
        return this.tunnelDestinationIpv4AddressVariable;
    }
    public String tunnelDestinationIpv4SubnetMask() {
        return this.tunnelDestinationIpv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelDestinationIpv4SubnetMaskVariable() {
        return this.tunnelDestinationIpv4SubnetMaskVariable;
    }
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    public String tunnelRouteVia() {
        return this.tunnelRouteVia;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelRouteViaVariable() {
        return this.tunnelRouteViaVariable;
    }
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    public String tunnelSourceInterface() {
        return this.tunnelSourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceInterfaceVariable() {
        return this.tunnelSourceInterfaceVariable;
    }
    public String tunnelSourceIpv4Address() {
        return this.tunnelSourceIpv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceIpv4AddressVariable() {
        return this.tunnelSourceIpv4AddressVariable;
    }
    public String tunnelSourceIpv4SubnetMask() {
        return this.tunnelSourceIpv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceIpv4SubnetMaskVariable() {
        return this.tunnelSourceIpv4SubnetMaskVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceLanVpnInterfaceIpsecFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String applicationTunnelType;
        private String applicationTunnelTypeVariable;
        private Boolean clearDontFragment;
        private String clearDontFragmentVariable;
        private String description;
        private Integer dpdInterval;
        private String dpdIntervalVariable;
        private Integer dpdRetries;
        private String dpdRetriesVariable;
        private String featureProfileId;
        private String id;
        private String ikeCiphersuite;
        private String ikeCiphersuiteVariable;
        private String ikeDiffieHellmanGroup;
        private String ikeDiffieHellmanGroupVariable;
        private String ikeIdLocalEndPoint;
        private String ikeIdLocalEndPointVariable;
        private String ikeIdRemoteEndPoint;
        private String ikeIdRemoteEndPointVariable;
        private String ikeIntegrityProtocol;
        private String ikeIntegrityProtocolVariable;
        private String ikePresharedKey;
        private String ikePresharedKeyVariable;
        private Integer ikeRekeyInterval;
        private String ikeRekeyIntervalVariable;
        private Integer ikeVersion;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String ipsecCiphersuite;
        private String ipsecCiphersuiteVariable;
        private Integer ipsecRekeyInterval;
        private String ipsecRekeyIntervalVariable;
        private Integer ipsecReplayWindow;
        private String ipsecReplayWindowVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private String name;
        private String perfectForwardSecrecy;
        private String perfectForwardSecrecyVariable;
        private String serviceLanVpnFeatureId;
        private Boolean shutdown;
        private String shutdownVariable;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String trackerId;
        private String trackerIdVariable;
        private String tunnelDestinationIpv4Address;
        private String tunnelDestinationIpv4AddressVariable;
        private String tunnelDestinationIpv4SubnetMask;
        private String tunnelDestinationIpv4SubnetMaskVariable;
        private String tunnelRouteVia;
        private String tunnelRouteViaVariable;
        private String tunnelSourceInterface;
        private String tunnelSourceInterfaceVariable;
        private String tunnelSourceIpv4Address;
        private String tunnelSourceIpv4AddressVariable;
        private String tunnelSourceIpv4SubnetMask;
        private String tunnelSourceIpv4SubnetMaskVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceLanVpnInterfaceIpsecFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.applicationTunnelType = defaults.applicationTunnelType;
    	      this.applicationTunnelTypeVariable = defaults.applicationTunnelTypeVariable;
    	      this.clearDontFragment = defaults.clearDontFragment;
    	      this.clearDontFragmentVariable = defaults.clearDontFragmentVariable;
    	      this.description = defaults.description;
    	      this.dpdInterval = defaults.dpdInterval;
    	      this.dpdIntervalVariable = defaults.dpdIntervalVariable;
    	      this.dpdRetries = defaults.dpdRetries;
    	      this.dpdRetriesVariable = defaults.dpdRetriesVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.ikeCiphersuite = defaults.ikeCiphersuite;
    	      this.ikeCiphersuiteVariable = defaults.ikeCiphersuiteVariable;
    	      this.ikeDiffieHellmanGroup = defaults.ikeDiffieHellmanGroup;
    	      this.ikeDiffieHellmanGroupVariable = defaults.ikeDiffieHellmanGroupVariable;
    	      this.ikeIdLocalEndPoint = defaults.ikeIdLocalEndPoint;
    	      this.ikeIdLocalEndPointVariable = defaults.ikeIdLocalEndPointVariable;
    	      this.ikeIdRemoteEndPoint = defaults.ikeIdRemoteEndPoint;
    	      this.ikeIdRemoteEndPointVariable = defaults.ikeIdRemoteEndPointVariable;
    	      this.ikeIntegrityProtocol = defaults.ikeIntegrityProtocol;
    	      this.ikeIntegrityProtocolVariable = defaults.ikeIntegrityProtocolVariable;
    	      this.ikePresharedKey = defaults.ikePresharedKey;
    	      this.ikePresharedKeyVariable = defaults.ikePresharedKeyVariable;
    	      this.ikeRekeyInterval = defaults.ikeRekeyInterval;
    	      this.ikeRekeyIntervalVariable = defaults.ikeRekeyIntervalVariable;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipsecCiphersuite = defaults.ipsecCiphersuite;
    	      this.ipsecCiphersuiteVariable = defaults.ipsecCiphersuiteVariable;
    	      this.ipsecRekeyInterval = defaults.ipsecRekeyInterval;
    	      this.ipsecRekeyIntervalVariable = defaults.ipsecRekeyIntervalVariable;
    	      this.ipsecReplayWindow = defaults.ipsecReplayWindow;
    	      this.ipsecReplayWindowVariable = defaults.ipsecReplayWindowVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.name = defaults.name;
    	      this.perfectForwardSecrecy = defaults.perfectForwardSecrecy;
    	      this.perfectForwardSecrecyVariable = defaults.perfectForwardSecrecyVariable;
    	      this.serviceLanVpnFeatureId = defaults.serviceLanVpnFeatureId;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.trackerId = defaults.trackerId;
    	      this.trackerIdVariable = defaults.trackerIdVariable;
    	      this.tunnelDestinationIpv4Address = defaults.tunnelDestinationIpv4Address;
    	      this.tunnelDestinationIpv4AddressVariable = defaults.tunnelDestinationIpv4AddressVariable;
    	      this.tunnelDestinationIpv4SubnetMask = defaults.tunnelDestinationIpv4SubnetMask;
    	      this.tunnelDestinationIpv4SubnetMaskVariable = defaults.tunnelDestinationIpv4SubnetMaskVariable;
    	      this.tunnelRouteVia = defaults.tunnelRouteVia;
    	      this.tunnelRouteViaVariable = defaults.tunnelRouteViaVariable;
    	      this.tunnelSourceInterface = defaults.tunnelSourceInterface;
    	      this.tunnelSourceInterfaceVariable = defaults.tunnelSourceInterfaceVariable;
    	      this.tunnelSourceIpv4Address = defaults.tunnelSourceIpv4Address;
    	      this.tunnelSourceIpv4AddressVariable = defaults.tunnelSourceIpv4AddressVariable;
    	      this.tunnelSourceIpv4SubnetMask = defaults.tunnelSourceIpv4SubnetMask;
    	      this.tunnelSourceIpv4SubnetMaskVariable = defaults.tunnelSourceIpv4SubnetMaskVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder applicationTunnelType(String applicationTunnelType) {
            if (applicationTunnelType == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "applicationTunnelType");
            }
            this.applicationTunnelType = applicationTunnelType;
            return this;
        }
        @CustomType.Setter
        public Builder applicationTunnelTypeVariable(String applicationTunnelTypeVariable) {
            if (applicationTunnelTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "applicationTunnelTypeVariable");
            }
            this.applicationTunnelTypeVariable = applicationTunnelTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder clearDontFragment(Boolean clearDontFragment) {
            if (clearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "clearDontFragment");
            }
            this.clearDontFragment = clearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder clearDontFragmentVariable(String clearDontFragmentVariable) {
            if (clearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "clearDontFragmentVariable");
            }
            this.clearDontFragmentVariable = clearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dpdInterval(Integer dpdInterval) {
            if (dpdInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "dpdInterval");
            }
            this.dpdInterval = dpdInterval;
            return this;
        }
        @CustomType.Setter
        public Builder dpdIntervalVariable(String dpdIntervalVariable) {
            if (dpdIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "dpdIntervalVariable");
            }
            this.dpdIntervalVariable = dpdIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dpdRetries(Integer dpdRetries) {
            if (dpdRetries == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "dpdRetries");
            }
            this.dpdRetries = dpdRetries;
            return this;
        }
        @CustomType.Setter
        public Builder dpdRetriesVariable(String dpdRetriesVariable) {
            if (dpdRetriesVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "dpdRetriesVariable");
            }
            this.dpdRetriesVariable = dpdRetriesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ikeCiphersuite(String ikeCiphersuite) {
            if (ikeCiphersuite == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeCiphersuite");
            }
            this.ikeCiphersuite = ikeCiphersuite;
            return this;
        }
        @CustomType.Setter
        public Builder ikeCiphersuiteVariable(String ikeCiphersuiteVariable) {
            if (ikeCiphersuiteVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeCiphersuiteVariable");
            }
            this.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeDiffieHellmanGroup(String ikeDiffieHellmanGroup) {
            if (ikeDiffieHellmanGroup == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeDiffieHellmanGroup");
            }
            this.ikeDiffieHellmanGroup = ikeDiffieHellmanGroup;
            return this;
        }
        @CustomType.Setter
        public Builder ikeDiffieHellmanGroupVariable(String ikeDiffieHellmanGroupVariable) {
            if (ikeDiffieHellmanGroupVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeDiffieHellmanGroupVariable");
            }
            this.ikeDiffieHellmanGroupVariable = ikeDiffieHellmanGroupVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIdLocalEndPoint(String ikeIdLocalEndPoint) {
            if (ikeIdLocalEndPoint == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeIdLocalEndPoint");
            }
            this.ikeIdLocalEndPoint = ikeIdLocalEndPoint;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIdLocalEndPointVariable(String ikeIdLocalEndPointVariable) {
            if (ikeIdLocalEndPointVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeIdLocalEndPointVariable");
            }
            this.ikeIdLocalEndPointVariable = ikeIdLocalEndPointVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIdRemoteEndPoint(String ikeIdRemoteEndPoint) {
            if (ikeIdRemoteEndPoint == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeIdRemoteEndPoint");
            }
            this.ikeIdRemoteEndPoint = ikeIdRemoteEndPoint;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIdRemoteEndPointVariable(String ikeIdRemoteEndPointVariable) {
            if (ikeIdRemoteEndPointVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeIdRemoteEndPointVariable");
            }
            this.ikeIdRemoteEndPointVariable = ikeIdRemoteEndPointVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIntegrityProtocol(String ikeIntegrityProtocol) {
            if (ikeIntegrityProtocol == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeIntegrityProtocol");
            }
            this.ikeIntegrityProtocol = ikeIntegrityProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder ikeIntegrityProtocolVariable(String ikeIntegrityProtocolVariable) {
            if (ikeIntegrityProtocolVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeIntegrityProtocolVariable");
            }
            this.ikeIntegrityProtocolVariable = ikeIntegrityProtocolVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePresharedKey(String ikePresharedKey) {
            if (ikePresharedKey == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikePresharedKey");
            }
            this.ikePresharedKey = ikePresharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder ikePresharedKeyVariable(String ikePresharedKeyVariable) {
            if (ikePresharedKeyVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikePresharedKeyVariable");
            }
            this.ikePresharedKeyVariable = ikePresharedKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRekeyInterval(Integer ikeRekeyInterval) {
            if (ikeRekeyInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeRekeyInterval");
            }
            this.ikeRekeyInterval = ikeRekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRekeyIntervalVariable(String ikeRekeyIntervalVariable) {
            if (ikeRekeyIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeRekeyIntervalVariable");
            }
            this.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(Integer ikeVersion) {
            if (ikeVersion == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ikeVersion");
            }
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecCiphersuite(String ipsecCiphersuite) {
            if (ipsecCiphersuite == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipsecCiphersuite");
            }
            this.ipsecCiphersuite = ipsecCiphersuite;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecCiphersuiteVariable(String ipsecCiphersuiteVariable) {
            if (ipsecCiphersuiteVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipsecCiphersuiteVariable");
            }
            this.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRekeyInterval(Integer ipsecRekeyInterval) {
            if (ipsecRekeyInterval == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipsecRekeyInterval");
            }
            this.ipsecRekeyInterval = ipsecRekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRekeyIntervalVariable(String ipsecRekeyIntervalVariable) {
            if (ipsecRekeyIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipsecRekeyIntervalVariable");
            }
            this.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecReplayWindow(Integer ipsecReplayWindow) {
            if (ipsecReplayWindow == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipsecReplayWindow");
            }
            this.ipsecReplayWindow = ipsecReplayWindow;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecReplayWindowVariable(String ipsecReplayWindowVariable) {
            if (ipsecReplayWindowVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipsecReplayWindowVariable");
            }
            this.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder perfectForwardSecrecy(String perfectForwardSecrecy) {
            if (perfectForwardSecrecy == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "perfectForwardSecrecy");
            }
            this.perfectForwardSecrecy = perfectForwardSecrecy;
            return this;
        }
        @CustomType.Setter
        public Builder perfectForwardSecrecyVariable(String perfectForwardSecrecyVariable) {
            if (perfectForwardSecrecyVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "perfectForwardSecrecyVariable");
            }
            this.perfectForwardSecrecyVariable = perfectForwardSecrecyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder serviceLanVpnFeatureId(String serviceLanVpnFeatureId) {
            if (serviceLanVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "serviceLanVpnFeatureId");
            }
            this.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackerId(String trackerId) {
            if (trackerId == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "trackerId");
            }
            this.trackerId = trackerId;
            return this;
        }
        @CustomType.Setter
        public Builder trackerIdVariable(String trackerIdVariable) {
            if (trackerIdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "trackerIdVariable");
            }
            this.trackerIdVariable = trackerIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4Address(String tunnelDestinationIpv4Address) {
            if (tunnelDestinationIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelDestinationIpv4Address");
            }
            this.tunnelDestinationIpv4Address = tunnelDestinationIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4AddressVariable(String tunnelDestinationIpv4AddressVariable) {
            if (tunnelDestinationIpv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelDestinationIpv4AddressVariable");
            }
            this.tunnelDestinationIpv4AddressVariable = tunnelDestinationIpv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4SubnetMask(String tunnelDestinationIpv4SubnetMask) {
            if (tunnelDestinationIpv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelDestinationIpv4SubnetMask");
            }
            this.tunnelDestinationIpv4SubnetMask = tunnelDestinationIpv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4SubnetMaskVariable(String tunnelDestinationIpv4SubnetMaskVariable) {
            if (tunnelDestinationIpv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelDestinationIpv4SubnetMaskVariable");
            }
            this.tunnelDestinationIpv4SubnetMaskVariable = tunnelDestinationIpv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            if (tunnelRouteVia == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelRouteVia");
            }
            this.tunnelRouteVia = tunnelRouteVia;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            if (tunnelRouteViaVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelRouteViaVariable");
            }
            this.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            if (tunnelSourceInterface == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelSourceInterface");
            }
            this.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            if (tunnelSourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelSourceInterfaceVariable");
            }
            this.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceIpv4Address(String tunnelSourceIpv4Address) {
            if (tunnelSourceIpv4Address == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelSourceIpv4Address");
            }
            this.tunnelSourceIpv4Address = tunnelSourceIpv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceIpv4AddressVariable(String tunnelSourceIpv4AddressVariable) {
            if (tunnelSourceIpv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelSourceIpv4AddressVariable");
            }
            this.tunnelSourceIpv4AddressVariable = tunnelSourceIpv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceIpv4SubnetMask(String tunnelSourceIpv4SubnetMask) {
            if (tunnelSourceIpv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelSourceIpv4SubnetMask");
            }
            this.tunnelSourceIpv4SubnetMask = tunnelSourceIpv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceIpv4SubnetMaskVariable(String tunnelSourceIpv4SubnetMaskVariable) {
            if (tunnelSourceIpv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "tunnelSourceIpv4SubnetMaskVariable");
            }
            this.tunnelSourceIpv4SubnetMaskVariable = tunnelSourceIpv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceLanVpnInterfaceIpsecFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceLanVpnInterfaceIpsecFeatureResult build() {
            final var _resultValue = new GetServiceLanVpnInterfaceIpsecFeatureResult();
            _resultValue.applicationTunnelType = applicationTunnelType;
            _resultValue.applicationTunnelTypeVariable = applicationTunnelTypeVariable;
            _resultValue.clearDontFragment = clearDontFragment;
            _resultValue.clearDontFragmentVariable = clearDontFragmentVariable;
            _resultValue.description = description;
            _resultValue.dpdInterval = dpdInterval;
            _resultValue.dpdIntervalVariable = dpdIntervalVariable;
            _resultValue.dpdRetries = dpdRetries;
            _resultValue.dpdRetriesVariable = dpdRetriesVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.ikeCiphersuite = ikeCiphersuite;
            _resultValue.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            _resultValue.ikeDiffieHellmanGroup = ikeDiffieHellmanGroup;
            _resultValue.ikeDiffieHellmanGroupVariable = ikeDiffieHellmanGroupVariable;
            _resultValue.ikeIdLocalEndPoint = ikeIdLocalEndPoint;
            _resultValue.ikeIdLocalEndPointVariable = ikeIdLocalEndPointVariable;
            _resultValue.ikeIdRemoteEndPoint = ikeIdRemoteEndPoint;
            _resultValue.ikeIdRemoteEndPointVariable = ikeIdRemoteEndPointVariable;
            _resultValue.ikeIntegrityProtocol = ikeIntegrityProtocol;
            _resultValue.ikeIntegrityProtocolVariable = ikeIntegrityProtocolVariable;
            _resultValue.ikePresharedKey = ikePresharedKey;
            _resultValue.ikePresharedKeyVariable = ikePresharedKeyVariable;
            _resultValue.ikeRekeyInterval = ikeRekeyInterval;
            _resultValue.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipsecCiphersuite = ipsecCiphersuite;
            _resultValue.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            _resultValue.ipsecRekeyInterval = ipsecRekeyInterval;
            _resultValue.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            _resultValue.ipsecReplayWindow = ipsecReplayWindow;
            _resultValue.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.name = name;
            _resultValue.perfectForwardSecrecy = perfectForwardSecrecy;
            _resultValue.perfectForwardSecrecyVariable = perfectForwardSecrecyVariable;
            _resultValue.serviceLanVpnFeatureId = serviceLanVpnFeatureId;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.trackerId = trackerId;
            _resultValue.trackerIdVariable = trackerIdVariable;
            _resultValue.tunnelDestinationIpv4Address = tunnelDestinationIpv4Address;
            _resultValue.tunnelDestinationIpv4AddressVariable = tunnelDestinationIpv4AddressVariable;
            _resultValue.tunnelDestinationIpv4SubnetMask = tunnelDestinationIpv4SubnetMask;
            _resultValue.tunnelDestinationIpv4SubnetMaskVariable = tunnelDestinationIpv4SubnetMaskVariable;
            _resultValue.tunnelRouteVia = tunnelRouteVia;
            _resultValue.tunnelRouteViaVariable = tunnelRouteViaVariable;
            _resultValue.tunnelSourceInterface = tunnelSourceInterface;
            _resultValue.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            _resultValue.tunnelSourceIpv4Address = tunnelSourceIpv4Address;
            _resultValue.tunnelSourceIpv4AddressVariable = tunnelSourceIpv4AddressVariable;
            _resultValue.tunnelSourceIpv4SubnetMask = tunnelSourceIpv4SubnetMask;
            _resultValue.tunnelSourceIpv4SubnetMaskVariable = tunnelSourceIpv4SubnetMaskVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
