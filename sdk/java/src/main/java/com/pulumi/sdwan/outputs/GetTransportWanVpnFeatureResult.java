// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportWanVpnFeatureIpv4StaticRoute;
import com.pulumi.sdwan.outputs.GetTransportWanVpnFeatureIpv6StaticRoute;
import com.pulumi.sdwan.outputs.GetTransportWanVpnFeatureNat64V4Pool;
import com.pulumi.sdwan.outputs.GetTransportWanVpnFeatureNewHostMapping;
import com.pulumi.sdwan.outputs.GetTransportWanVpnFeatureService;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportWanVpnFeatureResult {
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Enhance ECMP Keying
     * 
     */
    private Boolean enhanceEcmpKeying;
    /**
     * @return Variable name
     * 
     */
    private String enhanceEcmpKeyingVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return IPv4 Static Route
     * 
     */
    private List<GetTransportWanVpnFeatureIpv4StaticRoute> ipv4StaticRoutes;
    /**
     * @return IPv6 Static Route
     * 
     */
    private List<GetTransportWanVpnFeatureIpv6StaticRoute> ipv6StaticRoutes;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return NAT64 V4 Pool
     * 
     */
    private List<GetTransportWanVpnFeatureNat64V4Pool> nat64V4Pools;
    private List<GetTransportWanVpnFeatureNewHostMapping> newHostMappings;
    /**
     * @return Primary DNS Address (IPv4)
     * 
     */
    private String primaryDnsAddressIpv4;
    /**
     * @return Variable name
     * 
     */
    private String primaryDnsAddressIpv4Variable;
    /**
     * @return Primary DNS Address (IPv6)
     * 
     */
    private String primaryDnsAddressIpv6;
    /**
     * @return Variable name
     * 
     */
    private String primaryDnsAddressIpv6Variable;
    /**
     * @return Secondary DNS Address (IPv4)
     * 
     */
    private String secondaryDnsAddressIpv4;
    /**
     * @return Variable name
     * 
     */
    private String secondaryDnsAddressIpv4Variable;
    /**
     * @return Secondary DNS Address (IPv6)
     * 
     */
    private String secondaryDnsAddressIpv6;
    /**
     * @return Variable name
     * 
     */
    private String secondaryDnsAddressIpv6Variable;
    /**
     * @return Service
     * 
     */
    private List<GetTransportWanVpnFeatureService> services;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;
    /**
     * @return VPN
     * 
     */
    private Integer vpn;

    private GetTransportWanVpnFeatureResult() {}
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Enhance ECMP Keying
     * 
     */
    public Boolean enhanceEcmpKeying() {
        return this.enhanceEcmpKeying;
    }
    /**
     * @return Variable name
     * 
     */
    public String enhanceEcmpKeyingVariable() {
        return this.enhanceEcmpKeyingVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IPv4 Static Route
     * 
     */
    public List<GetTransportWanVpnFeatureIpv4StaticRoute> ipv4StaticRoutes() {
        return this.ipv4StaticRoutes;
    }
    /**
     * @return IPv6 Static Route
     * 
     */
    public List<GetTransportWanVpnFeatureIpv6StaticRoute> ipv6StaticRoutes() {
        return this.ipv6StaticRoutes;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return NAT64 V4 Pool
     * 
     */
    public List<GetTransportWanVpnFeatureNat64V4Pool> nat64V4Pools() {
        return this.nat64V4Pools;
    }
    public List<GetTransportWanVpnFeatureNewHostMapping> newHostMappings() {
        return this.newHostMappings;
    }
    /**
     * @return Primary DNS Address (IPv4)
     * 
     */
    public String primaryDnsAddressIpv4() {
        return this.primaryDnsAddressIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String primaryDnsAddressIpv4Variable() {
        return this.primaryDnsAddressIpv4Variable;
    }
    /**
     * @return Primary DNS Address (IPv6)
     * 
     */
    public String primaryDnsAddressIpv6() {
        return this.primaryDnsAddressIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String primaryDnsAddressIpv6Variable() {
        return this.primaryDnsAddressIpv6Variable;
    }
    /**
     * @return Secondary DNS Address (IPv4)
     * 
     */
    public String secondaryDnsAddressIpv4() {
        return this.secondaryDnsAddressIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String secondaryDnsAddressIpv4Variable() {
        return this.secondaryDnsAddressIpv4Variable;
    }
    /**
     * @return Secondary DNS Address (IPv6)
     * 
     */
    public String secondaryDnsAddressIpv6() {
        return this.secondaryDnsAddressIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String secondaryDnsAddressIpv6Variable() {
        return this.secondaryDnsAddressIpv6Variable;
    }
    /**
     * @return Service
     * 
     */
    public List<GetTransportWanVpnFeatureService> services() {
        return this.services;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return VPN
     * 
     */
    public Integer vpn() {
        return this.vpn;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportWanVpnFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private Boolean enhanceEcmpKeying;
        private String enhanceEcmpKeyingVariable;
        private String featureProfileId;
        private String id;
        private List<GetTransportWanVpnFeatureIpv4StaticRoute> ipv4StaticRoutes;
        private List<GetTransportWanVpnFeatureIpv6StaticRoute> ipv6StaticRoutes;
        private String name;
        private List<GetTransportWanVpnFeatureNat64V4Pool> nat64V4Pools;
        private List<GetTransportWanVpnFeatureNewHostMapping> newHostMappings;
        private String primaryDnsAddressIpv4;
        private String primaryDnsAddressIpv4Variable;
        private String primaryDnsAddressIpv6;
        private String primaryDnsAddressIpv6Variable;
        private String secondaryDnsAddressIpv4;
        private String secondaryDnsAddressIpv4Variable;
        private String secondaryDnsAddressIpv6;
        private String secondaryDnsAddressIpv6Variable;
        private List<GetTransportWanVpnFeatureService> services;
        private Integer version;
        private Integer vpn;
        public Builder() {}
        public Builder(GetTransportWanVpnFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.enhanceEcmpKeying = defaults.enhanceEcmpKeying;
    	      this.enhanceEcmpKeyingVariable = defaults.enhanceEcmpKeyingVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.ipv4StaticRoutes = defaults.ipv4StaticRoutes;
    	      this.ipv6StaticRoutes = defaults.ipv6StaticRoutes;
    	      this.name = defaults.name;
    	      this.nat64V4Pools = defaults.nat64V4Pools;
    	      this.newHostMappings = defaults.newHostMappings;
    	      this.primaryDnsAddressIpv4 = defaults.primaryDnsAddressIpv4;
    	      this.primaryDnsAddressIpv4Variable = defaults.primaryDnsAddressIpv4Variable;
    	      this.primaryDnsAddressIpv6 = defaults.primaryDnsAddressIpv6;
    	      this.primaryDnsAddressIpv6Variable = defaults.primaryDnsAddressIpv6Variable;
    	      this.secondaryDnsAddressIpv4 = defaults.secondaryDnsAddressIpv4;
    	      this.secondaryDnsAddressIpv4Variable = defaults.secondaryDnsAddressIpv4Variable;
    	      this.secondaryDnsAddressIpv6 = defaults.secondaryDnsAddressIpv6;
    	      this.secondaryDnsAddressIpv6Variable = defaults.secondaryDnsAddressIpv6Variable;
    	      this.services = defaults.services;
    	      this.version = defaults.version;
    	      this.vpn = defaults.vpn;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enhanceEcmpKeying(Boolean enhanceEcmpKeying) {
            if (enhanceEcmpKeying == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "enhanceEcmpKeying");
            }
            this.enhanceEcmpKeying = enhanceEcmpKeying;
            return this;
        }
        @CustomType.Setter
        public Builder enhanceEcmpKeyingVariable(String enhanceEcmpKeyingVariable) {
            if (enhanceEcmpKeyingVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "enhanceEcmpKeyingVariable");
            }
            this.enhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4StaticRoutes(List<GetTransportWanVpnFeatureIpv4StaticRoute> ipv4StaticRoutes) {
            if (ipv4StaticRoutes == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "ipv4StaticRoutes");
            }
            this.ipv4StaticRoutes = ipv4StaticRoutes;
            return this;
        }
        public Builder ipv4StaticRoutes(GetTransportWanVpnFeatureIpv4StaticRoute... ipv4StaticRoutes) {
            return ipv4StaticRoutes(List.of(ipv4StaticRoutes));
        }
        @CustomType.Setter
        public Builder ipv6StaticRoutes(List<GetTransportWanVpnFeatureIpv6StaticRoute> ipv6StaticRoutes) {
            if (ipv6StaticRoutes == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "ipv6StaticRoutes");
            }
            this.ipv6StaticRoutes = ipv6StaticRoutes;
            return this;
        }
        public Builder ipv6StaticRoutes(GetTransportWanVpnFeatureIpv6StaticRoute... ipv6StaticRoutes) {
            return ipv6StaticRoutes(List.of(ipv6StaticRoutes));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat64V4Pools(List<GetTransportWanVpnFeatureNat64V4Pool> nat64V4Pools) {
            if (nat64V4Pools == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "nat64V4Pools");
            }
            this.nat64V4Pools = nat64V4Pools;
            return this;
        }
        public Builder nat64V4Pools(GetTransportWanVpnFeatureNat64V4Pool... nat64V4Pools) {
            return nat64V4Pools(List.of(nat64V4Pools));
        }
        @CustomType.Setter
        public Builder newHostMappings(List<GetTransportWanVpnFeatureNewHostMapping> newHostMappings) {
            if (newHostMappings == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "newHostMappings");
            }
            this.newHostMappings = newHostMappings;
            return this;
        }
        public Builder newHostMappings(GetTransportWanVpnFeatureNewHostMapping... newHostMappings) {
            return newHostMappings(List.of(newHostMappings));
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv4(String primaryDnsAddressIpv4) {
            if (primaryDnsAddressIpv4 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "primaryDnsAddressIpv4");
            }
            this.primaryDnsAddressIpv4 = primaryDnsAddressIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv4Variable(String primaryDnsAddressIpv4Variable) {
            if (primaryDnsAddressIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "primaryDnsAddressIpv4Variable");
            }
            this.primaryDnsAddressIpv4Variable = primaryDnsAddressIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv6(String primaryDnsAddressIpv6) {
            if (primaryDnsAddressIpv6 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "primaryDnsAddressIpv6");
            }
            this.primaryDnsAddressIpv6 = primaryDnsAddressIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder primaryDnsAddressIpv6Variable(String primaryDnsAddressIpv6Variable) {
            if (primaryDnsAddressIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "primaryDnsAddressIpv6Variable");
            }
            this.primaryDnsAddressIpv6Variable = primaryDnsAddressIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv4(String secondaryDnsAddressIpv4) {
            if (secondaryDnsAddressIpv4 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "secondaryDnsAddressIpv4");
            }
            this.secondaryDnsAddressIpv4 = secondaryDnsAddressIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv4Variable(String secondaryDnsAddressIpv4Variable) {
            if (secondaryDnsAddressIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "secondaryDnsAddressIpv4Variable");
            }
            this.secondaryDnsAddressIpv4Variable = secondaryDnsAddressIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv6(String secondaryDnsAddressIpv6) {
            if (secondaryDnsAddressIpv6 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "secondaryDnsAddressIpv6");
            }
            this.secondaryDnsAddressIpv6 = secondaryDnsAddressIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryDnsAddressIpv6Variable(String secondaryDnsAddressIpv6Variable) {
            if (secondaryDnsAddressIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "secondaryDnsAddressIpv6Variable");
            }
            this.secondaryDnsAddressIpv6Variable = secondaryDnsAddressIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder services(List<GetTransportWanVpnFeatureService> services) {
            if (services == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "services");
            }
            this.services = services;
            return this;
        }
        public Builder services(GetTransportWanVpnFeatureService... services) {
            return services(List.of(services));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vpn(Integer vpn) {
            if (vpn == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnFeatureResult", "vpn");
            }
            this.vpn = vpn;
            return this;
        }
        public GetTransportWanVpnFeatureResult build() {
            final var _resultValue = new GetTransportWanVpnFeatureResult();
            _resultValue.description = description;
            _resultValue.enhanceEcmpKeying = enhanceEcmpKeying;
            _resultValue.enhanceEcmpKeyingVariable = enhanceEcmpKeyingVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.ipv4StaticRoutes = ipv4StaticRoutes;
            _resultValue.ipv6StaticRoutes = ipv6StaticRoutes;
            _resultValue.name = name;
            _resultValue.nat64V4Pools = nat64V4Pools;
            _resultValue.newHostMappings = newHostMappings;
            _resultValue.primaryDnsAddressIpv4 = primaryDnsAddressIpv4;
            _resultValue.primaryDnsAddressIpv4Variable = primaryDnsAddressIpv4Variable;
            _resultValue.primaryDnsAddressIpv6 = primaryDnsAddressIpv6;
            _resultValue.primaryDnsAddressIpv6Variable = primaryDnsAddressIpv6Variable;
            _resultValue.secondaryDnsAddressIpv4 = secondaryDnsAddressIpv4;
            _resultValue.secondaryDnsAddressIpv4Variable = secondaryDnsAddressIpv4Variable;
            _resultValue.secondaryDnsAddressIpv6 = secondaryDnsAddressIpv6;
            _resultValue.secondaryDnsAddressIpv6Variable = secondaryDnsAddressIpv6Variable;
            _resultValue.services = services;
            _resultValue.version = version;
            _resultValue.vpn = vpn;
            return _resultValue;
        }
    }
}
