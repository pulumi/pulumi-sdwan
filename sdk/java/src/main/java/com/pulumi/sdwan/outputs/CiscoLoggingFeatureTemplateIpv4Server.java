// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoLoggingFeatureTemplateIpv4Server {
    /**
     * @return Define custom profile
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean customProfile;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String customProfileVariable;
    /**
     * @return Enable TLS
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean enableTls;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String enableTlsVariable;
    /**
     * @return Set hostname or IPv4 address of server
     * 
     */
    private @Nullable String hostnameIp;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String hostnameIpVariable;
    /**
     * @return Set logging level for messages logged to server
     *   - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `information`
     * 
     */
    private @Nullable String loggingLevel;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String loggingLevelVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Configure a TLS profile
     * 
     */
    private @Nullable String profile;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String profileVariable;
    /**
     * @return Set interface to use to reach syslog server
     * 
     */
    private @Nullable String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String sourceInterfaceVariable;
    /**
     * @return Set VPN in which syslog server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer vpnId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String vpnIdVariable;

    private CiscoLoggingFeatureTemplateIpv4Server() {}
    /**
     * @return Define custom profile
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> customProfile() {
        return Optional.ofNullable(this.customProfile);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> customProfileVariable() {
        return Optional.ofNullable(this.customProfileVariable);
    }
    /**
     * @return Enable TLS
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> enableTls() {
        return Optional.ofNullable(this.enableTls);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> enableTlsVariable() {
        return Optional.ofNullable(this.enableTlsVariable);
    }
    /**
     * @return Set hostname or IPv4 address of server
     * 
     */
    public Optional<String> hostnameIp() {
        return Optional.ofNullable(this.hostnameIp);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> hostnameIpVariable() {
        return Optional.ofNullable(this.hostnameIpVariable);
    }
    /**
     * @return Set logging level for messages logged to server
     *   - Choices: `information`, `debugging`, `notice`, `warn`, `error`, `critical`, `alert`, `emergency`
     *   - Default value: `information`
     * 
     */
    public Optional<String> loggingLevel() {
        return Optional.ofNullable(this.loggingLevel);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> loggingLevelVariable() {
        return Optional.ofNullable(this.loggingLevelVariable);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Configure a TLS profile
     * 
     */
    public Optional<String> profile() {
        return Optional.ofNullable(this.profile);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> profileVariable() {
        return Optional.ofNullable(this.profileVariable);
    }
    /**
     * @return Set interface to use to reach syslog server
     * 
     */
    public Optional<String> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }
    /**
     * @return Set VPN in which syslog server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> vpnIdVariable() {
        return Optional.ofNullable(this.vpnIdVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoLoggingFeatureTemplateIpv4Server defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean customProfile;
        private @Nullable String customProfileVariable;
        private @Nullable Boolean enableTls;
        private @Nullable String enableTlsVariable;
        private @Nullable String hostnameIp;
        private @Nullable String hostnameIpVariable;
        private @Nullable String loggingLevel;
        private @Nullable String loggingLevelVariable;
        private @Nullable Boolean optional;
        private @Nullable String profile;
        private @Nullable String profileVariable;
        private @Nullable String sourceInterface;
        private @Nullable String sourceInterfaceVariable;
        private @Nullable Integer vpnId;
        private @Nullable String vpnIdVariable;
        public Builder() {}
        public Builder(CiscoLoggingFeatureTemplateIpv4Server defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.customProfile = defaults.customProfile;
    	      this.customProfileVariable = defaults.customProfileVariable;
    	      this.enableTls = defaults.enableTls;
    	      this.enableTlsVariable = defaults.enableTlsVariable;
    	      this.hostnameIp = defaults.hostnameIp;
    	      this.hostnameIpVariable = defaults.hostnameIpVariable;
    	      this.loggingLevel = defaults.loggingLevel;
    	      this.loggingLevelVariable = defaults.loggingLevelVariable;
    	      this.optional = defaults.optional;
    	      this.profile = defaults.profile;
    	      this.profileVariable = defaults.profileVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.vpnId = defaults.vpnId;
    	      this.vpnIdVariable = defaults.vpnIdVariable;
        }

        @CustomType.Setter
        public Builder customProfile(@Nullable Boolean customProfile) {

            this.customProfile = customProfile;
            return this;
        }
        @CustomType.Setter
        public Builder customProfileVariable(@Nullable String customProfileVariable) {

            this.customProfileVariable = customProfileVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableTls(@Nullable Boolean enableTls) {

            this.enableTls = enableTls;
            return this;
        }
        @CustomType.Setter
        public Builder enableTlsVariable(@Nullable String enableTlsVariable) {

            this.enableTlsVariable = enableTlsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIp(@Nullable String hostnameIp) {

            this.hostnameIp = hostnameIp;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpVariable(@Nullable String hostnameIpVariable) {

            this.hostnameIpVariable = hostnameIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder loggingLevel(@Nullable String loggingLevel) {

            this.loggingLevel = loggingLevel;
            return this;
        }
        @CustomType.Setter
        public Builder loggingLevelVariable(@Nullable String loggingLevelVariable) {

            this.loggingLevelVariable = loggingLevelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder profile(@Nullable String profile) {

            this.profile = profile;
            return this;
        }
        @CustomType.Setter
        public Builder profileVariable(@Nullable String profileVariable) {

            this.profileVariable = profileVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(@Nullable String sourceInterface) {

            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(@Nullable String sourceInterfaceVariable) {

            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(@Nullable Integer vpnId) {

            this.vpnId = vpnId;
            return this;
        }
        @CustomType.Setter
        public Builder vpnIdVariable(@Nullable String vpnIdVariable) {

            this.vpnIdVariable = vpnIdVariable;
            return this;
        }
        public CiscoLoggingFeatureTemplateIpv4Server build() {
            final var _resultValue = new CiscoLoggingFeatureTemplateIpv4Server();
            _resultValue.customProfile = customProfile;
            _resultValue.customProfileVariable = customProfileVariable;
            _resultValue.enableTls = enableTls;
            _resultValue.enableTlsVariable = enableTlsVariable;
            _resultValue.hostnameIp = hostnameIp;
            _resultValue.hostnameIpVariable = hostnameIpVariable;
            _resultValue.loggingLevel = loggingLevel;
            _resultValue.loggingLevelVariable = loggingLevelVariable;
            _resultValue.optional = optional;
            _resultValue.profile = profile;
            _resultValue.profileVariable = profileVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.vpnId = vpnId;
            _resultValue.vpnIdVariable = vpnIdVariable;
            return _resultValue;
        }
    }
}
