// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateAccessList;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateStaticArp;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry;
import com.pulumi.sdwan.outputs.GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoVpnInterfaceFeatureTemplateResult {
    /**
     * @return Apply ACL
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateAccessList> accessLists;
    /**
     * @return Assign IPv4 address
     * 
     */
    private String address;
    /**
     * @return Variable name
     * 
     */
    private String addressVariable;
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    private Integer arpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String arpTimeoutVariable;
    /**
     * @return Interface auto detect bandwidth
     * 
     */
    private Boolean autoBandwidthDetect;
    /**
     * @return Variable name
     * 
     */
    private String autoBandwidthDetectVariable;
    /**
     * @return Link autonegotiation
     * 
     */
    private Boolean autonegotiate;
    /**
     * @return Variable name
     * 
     */
    private String autonegotiateVariable;
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthDownstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthDownstreamVariable;
    /**
     * @return Interface upstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthUpstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthUpstreamVariable;
    /**
     * @return Block packets originating from IP address that is not from this source
     * 
     */
    private Boolean blockNonSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String blockNonSourceIpVariable;
    /**
     * @return Enable core region
     * 
     */
    private String coreRegion;
    /**
     * @return Variable name
     * 
     */
    private String coreRegionVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Enable DHCP
     * 
     */
    private Boolean dhcp;
    /**
     * @return Set administrative distance for DHCP default route
     * 
     */
    private Integer dhcpDistance;
    /**
     * @return Variable name
     * 
     */
    private String dhcpDistanceVariable;
    /**
     * @return Variable name
     * 
     */
    private String dhcpVariable;
    /**
     * @return Enable DHCPv6
     * 
     */
    private Boolean dhcpv6;
    /**
     * @return Variable name
     * 
     */
    private String dhcpv6Variable;
    /**
     * @return Duplex mode
     * 
     */
    private String duplex;
    /**
     * @return Variable name
     * 
     */
    private String duplexVariable;
    /**
     * @return Enable core region
     * 
     */
    private Boolean enableCoreRegion;
    /**
     * @return Enables the interface for CTS SGT authorization and forwarding.
     * 
     */
    private Boolean enableSgt;
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    private String greTunnelSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String greTunnelSourceIpVariable;
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    private String greTunnelXconnect;
    /**
     * @return Variable name
     * 
     */
    private String greTunnelXconnectVariable;
    /**
     * @return Set this option to disable the icmp/icmpv6 redirect packets
     * 
     */
    private Boolean icmpRedirectDisable;
    /**
     * @return Variable name
     * 
     */
    private String icmpRedirectDisableVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    /**
     * @return Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    private String iperfServer;
    /**
     * @return Variable name
     * 
     */
    private String iperfServerVariable;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpHelperVariable;
    /**
     * @return List of DHCP IPv4 helper addresses
     * 
     */
    private List<String> ipv4DhcpHelpers;
    /**
     * @return Assign secondary IP addresses
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses;
    /**
     * @return Enable VRRP
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp> ipv4Vrrps;
    /**
     * @return Apply IPv6 access list
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList> ipv6AccessLists;
    /**
     * @return Assign IPv6 address
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return DHCPv6 Helper
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers;
    /**
     * @return NAT64 on this interface
     * 
     */
    private Boolean ipv6Nat;
    /**
     * @return Variable name
     * 
     */
    private String ipv6NatVariable;
    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses;
    /**
     * @return Enable VRRP
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp> ipv6Vrrps;
    /**
     * @return Interval for interface load calculation
     * 
     */
    private Integer loadInterval;
    /**
     * @return Variable name
     * 
     */
    private String loadIntervalVariable;
    /**
     * @return Set MAC-layer address
     * 
     */
    private String macAddress;
    /**
     * @return Variable name
     * 
     */
    private String macAddressVariable;
    /**
     * @return Media type
     * 
     */
    private String mediaType;
    /**
     * @return Variable name
     * 
     */
    private String mediaTypeVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Network Address Translation on this interface
     * 
     */
    private Boolean nat;
    /**
     * @return NAT64 on this interface
     * 
     */
    private Boolean nat64Interface;
    /**
     * @return NAT66 on this interface
     * 
     */
    private Boolean nat66Interface;
    /**
     * @return Configure NAT Inside Loopback Interface
     * 
     */
    private String natInsideSourceLoopbackInterface;
    /**
     * @return Variable name
     * 
     */
    private String natInsideSourceLoopbackInterfaceVariable;
    /**
     * @return Enable port translation(PAT)
     * 
     */
    private Boolean natOverload;
    /**
     * @return Variable name
     * 
     */
    private String natOverloadVariable;
    /**
     * @return Ending IP address of NAT Pool Prefix Length
     * 
     */
    private Integer natPoolPrefixLength;
    /**
     * @return Variable name
     * 
     */
    private String natPoolPrefixLengthVariable;
    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    private String natPoolRangeEnd;
    /**
     * @return Variable name
     * 
     */
    private String natPoolRangeEndVariable;
    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    private String natPoolRangeStart;
    /**
     * @return Variable name
     * 
     */
    private String natPoolRangeStartVariable;
    /**
     * @return NAT type
     * 
     */
    private String natType;
    /**
     * @return Variable name
     * 
     */
    private String natTypeVariable;
    /**
     * @return Configure interface as Power-over-Ethernet source
     * 
     */
    private Boolean poe;
    /**
     * @return Variable name
     * 
     */
    private String poeVariable;
    /**
     * @return Enable/Disable CTS SGT propagation on an interface.
     * 
     */
    private Boolean propagateSgt;
    /**
     * @return Adaptive QoS default downstream bandwidth
     * 
     */
    private Integer qosAdaptiveBandwidthDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveBandwidthDownstreamVariable;
    /**
     * @return Adaptive QoS default upstream bandwidth
     * 
     */
    private Integer qosAdaptiveBandwidthUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveBandwidthUpstreamVariable;
    /**
     * @return Downstream max bandwidth limit
     * 
     */
    private Integer qosAdaptiveMaxDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMaxDownstreamVariable;
    /**
     * @return Upstream max bandwidth limit
     * 
     */
    private Integer qosAdaptiveMaxUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMaxUpstreamVariable;
    /**
     * @return Downstream min bandwidth limit
     * 
     */
    private Integer qosAdaptiveMinDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMinDownstreamVariable;
    /**
     * @return Upstream min bandwidth limit
     * 
     */
    private Integer qosAdaptiveMinUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMinUpstreamVariable;
    /**
     * @return Periodic timer for adaptive QoS in minutes
     * 
     */
    private Integer qosAdaptivePeriod;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptivePeriodVariable;
    /**
     * @return Name of QoS map
     * 
     */
    private String qosMap;
    /**
     * @return Variable name
     * 
     */
    private String qosMapVariable;
    /**
     * @return Name of VPN QoS map
     * 
     */
    private String qosMapVpn;
    /**
     * @return Variable name
     * 
     */
    private String qosMapVpnVariable;
    /**
     * @return Name of rewrite rule
     * 
     */
    private String rewriteRuleName;
    /**
     * @return Variable name
     * 
     */
    private String rewriteRuleNameVariable;
    /**
     * @return Enable secondary region
     * 
     */
    private String secondaryRegion;
    /**
     * @return Variable name
     * 
     */
    private String secondaryRegionVariable;
    /**
     * @return Enables the interface for CTS SGT authorization and forwarding.
     * 
     */
    private Boolean sgtEnforcement;
    /**
     * @return SGT value between 2 and 65519.
     * 
     */
    private Integer sgtEnforcementSgt;
    /**
     * @return Variable name
     * 
     */
    private String sgtEnforcementSgtVariable;
    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     * 
     */
    private Integer shapingRate;
    /**
     * @return Variable name
     * 
     */
    private String shapingRateVariable;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Set interface speed
     * 
     */
    private String speed;
    /**
     * @return Variable name
     * 
     */
    private String speedVariable;
    /**
     * @return Configure static ARP entries
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateStaticArp> staticArps;
    /**
     * @return static NAT
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry> staticNat66Entries;
    /**
     * @return Configure static NAT entries
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry> staticNatEntries;
    /**
     * @return Configure Port Forward entries
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry> staticPortForwardEntries;
    /**
     * @return SGT value between 2 and 65519.
     * 
     */
    private Integer staticSgt;
    /**
     * @return Indicates that the interface is trustworthy for CTS.
     * 
     */
    private Boolean staticSgtTrusted;
    /**
     * @return Variable name
     * 
     */
    private String staticSgtVariable;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMssAdjust;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssAdjustVariable;
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    private Integer tcpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String tcpTimeoutVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    private String tlocExtension;
    /**
     * @return Variable name
     * 
     */
    private String tlocExtensionVariable;
    /**
     * @return Variable name
     * 
     */
    private String trackerVariable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private List<String> trackers;
    /**
     * @return Tunnels Bandwidth Percent
     * 
     */
    private Integer tunnelBandwidth;
    /**
     * @return Variable name
     * 
     */
    private String tunnelBandwidthVariable;
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    private Boolean tunnelInterfaceAllowAll;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowAllVariable;
    /**
     * @return Allow/deny BGP
     * 
     */
    private Boolean tunnelInterfaceAllowBgp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowBgpVariable;
    /**
     * @return Allow/Deny DHCP
     * 
     */
    private Boolean tunnelInterfaceAllowDhcp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDhcpVariable;
    /**
     * @return Allow/Deny DNS
     * 
     */
    private Boolean tunnelInterfaceAllowDns;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDnsVariable;
    /**
     * @return Allow/Deny Https
     * 
     */
    private Boolean tunnelInterfaceAllowHttps;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowHttpsVariable;
    /**
     * @return Allow/Deny ICMP
     * 
     */
    private Boolean tunnelInterfaceAllowIcmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowIcmpVariable;
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    private Boolean tunnelInterfaceAllowNetconf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNetconfVariable;
    /**
     * @return Allow/Deny NTP
     * 
     */
    private Boolean tunnelInterfaceAllowNtp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNtpVariable;
    /**
     * @return Allow/Deny OSPF
     * 
     */
    private Boolean tunnelInterfaceAllowOspf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowOspfVariable;
    /**
     * @return Allow/Deny SNMP
     * 
     */
    private Boolean tunnelInterfaceAllowSnmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSnmpVariable;
    /**
     * @return Allow/Deny SSH
     * 
     */
    private Boolean tunnelInterfaceAllowSsh;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSshVariable;
    /**
     * @return Allow/Deny STUN
     * 
     */
    private Boolean tunnelInterfaceAllowStun;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowStunVariable;
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnel;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnelVariable;
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    private Boolean tunnelInterfaceBorder;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBorderVariable;
    /**
     * @return Set carrier for TLOC
     * 
     */
    private String tunnelInterfaceCarrier;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceCarrierVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean tunnelInterfaceClearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceClearDontFragmentVariable;
    /**
     * @return Set color for TLOC
     * 
     */
    private String tunnelInterfaceColor;
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    private Boolean tunnelInterfaceColorRestrict;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceColorRestrictVariable;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceColorVariable;
    /**
     * @return Allow Control Connection
     * 
     */
    private Boolean tunnelInterfaceControlConnections;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceControlConnectionsVariable;
    /**
     * @return Encapsulation for TLOC
     * 
     */
    private List<GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceExcludeControllerGroupListVariable;
    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
    /**
     * @return Extend the TLOC to a remote node over GRE tunnel
     * 
     */
    private String tunnelInterfaceGreTunnelDestinationIp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceGreTunnelDestinationIpVariable;
    /**
     * @return List of groups
     * 
     */
    private List<Integer> tunnelInterfaceGroups;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceGroupsVariable;
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    private Integer tunnelInterfaceHelloInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloIntervalVariable;
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceHelloTolerance;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloToleranceVariable;
    /**
     * @return Set TLOC as last resort
     * 
     */
    private Boolean tunnelInterfaceLastResortCircuit;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLastResortCircuitVariable;
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    private Boolean tunnelInterfaceLowBandwidthLink;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLowBandwidthLinkVariable;
    /**
     * @return Set the maximum number of control connections for this TLOC
     * 
     */
    private Integer tunnelInterfaceMaxControlConnections;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceMaxControlConnectionsVariable;
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceNatRefreshInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNatRefreshIntervalVariable;
    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     * 
     */
    private Boolean tunnelInterfaceNetworkBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNetworkBroadcastVariable;
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    private Boolean tunnelInterfacePortHop;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfacePortHopVariable;
    /**
     * @return CTS SGT Propagation configuration
     * 
     */
    private Boolean tunnelInterfacePropagateSgt;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfacePropagateSgtVariable;
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tunnelInterfaceTunnelTcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceTunnelTcpMssVariable;
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    private Boolean tunnelInterfaceVbondAsStunServer;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVbondAsStunServerVariable;
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    private Integer tunnelInterfaceVmanageConnectionPreference;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVmanageConnectionPreferenceVariable;
    /**
     * @return Set tunnel QoS mode
     * 
     */
    private String tunnelQosMode;
    /**
     * @return Variable name
     * 
     */
    private String tunnelQosModeVariable;
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    private Integer udpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String udpTimeoutVariable;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoVpnInterfaceFeatureTemplateResult() {}
    /**
     * @return Apply ACL
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateAccessList> accessLists() {
        return this.accessLists;
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Variable name
     * 
     */
    public String addressVariable() {
        return this.addressVariable;
    }
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpTimeoutVariable() {
        return this.arpTimeoutVariable;
    }
    /**
     * @return Interface auto detect bandwidth
     * 
     */
    public Boolean autoBandwidthDetect() {
        return this.autoBandwidthDetect;
    }
    /**
     * @return Variable name
     * 
     */
    public String autoBandwidthDetectVariable() {
        return this.autoBandwidthDetectVariable;
    }
    /**
     * @return Link autonegotiation
     * 
     */
    public Boolean autonegotiate() {
        return this.autonegotiate;
    }
    /**
     * @return Variable name
     * 
     */
    public String autonegotiateVariable() {
        return this.autonegotiateVariable;
    }
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthDownstream() {
        return this.bandwidthDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthDownstreamVariable() {
        return this.bandwidthDownstreamVariable;
    }
    /**
     * @return Interface upstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthUpstream() {
        return this.bandwidthUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthUpstreamVariable() {
        return this.bandwidthUpstreamVariable;
    }
    /**
     * @return Block packets originating from IP address that is not from this source
     * 
     */
    public Boolean blockNonSourceIp() {
        return this.blockNonSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String blockNonSourceIpVariable() {
        return this.blockNonSourceIpVariable;
    }
    /**
     * @return Enable core region
     * 
     */
    public String coreRegion() {
        return this.coreRegion;
    }
    /**
     * @return Variable name
     * 
     */
    public String coreRegionVariable() {
        return this.coreRegionVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Enable DHCP
     * 
     */
    public Boolean dhcp() {
        return this.dhcp;
    }
    /**
     * @return Set administrative distance for DHCP default route
     * 
     */
    public Integer dhcpDistance() {
        return this.dhcpDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String dhcpDistanceVariable() {
        return this.dhcpDistanceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String dhcpVariable() {
        return this.dhcpVariable;
    }
    /**
     * @return Enable DHCPv6
     * 
     */
    public Boolean dhcpv6() {
        return this.dhcpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String dhcpv6Variable() {
        return this.dhcpv6Variable;
    }
    /**
     * @return Duplex mode
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return Variable name
     * 
     */
    public String duplexVariable() {
        return this.duplexVariable;
    }
    /**
     * @return Enable core region
     * 
     */
    public Boolean enableCoreRegion() {
        return this.enableCoreRegion;
    }
    /**
     * @return Enables the interface for CTS SGT authorization and forwarding.
     * 
     */
    public Boolean enableSgt() {
        return this.enableSgt;
    }
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    public String greTunnelSourceIp() {
        return this.greTunnelSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String greTunnelSourceIpVariable() {
        return this.greTunnelSourceIpVariable;
    }
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    public String greTunnelXconnect() {
        return this.greTunnelXconnect;
    }
    /**
     * @return Variable name
     * 
     */
    public String greTunnelXconnectVariable() {
        return this.greTunnelXconnectVariable;
    }
    /**
     * @return Set this option to disable the icmp/icmpv6 redirect packets
     * 
     */
    public Boolean icmpRedirectDisable() {
        return this.icmpRedirectDisable;
    }
    /**
     * @return Variable name
     * 
     */
    public String icmpRedirectDisableVariable() {
        return this.icmpRedirectDisableVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    /**
     * @return Interface name: ge0/\n\n or ge0/\n\n.vlanid or irbbridgeid:1-63 or loopback\n\n or natpool-\n\n when present
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    public String iperfServer() {
        return this.iperfServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String iperfServerVariable() {
        return this.iperfServerVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpHelperVariable() {
        return this.ipv4DhcpHelperVariable;
    }
    /**
     * @return List of DHCP IPv4 helper addresses
     * 
     */
    public List<String> ipv4DhcpHelpers() {
        return this.ipv4DhcpHelpers;
    }
    /**
     * @return Assign secondary IP addresses
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses() {
        return this.ipv4SecondaryAddresses;
    }
    /**
     * @return Enable VRRP
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp> ipv4Vrrps() {
        return this.ipv4Vrrps;
    }
    /**
     * @return Apply IPv6 access list
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList> ipv6AccessLists() {
        return this.ipv6AccessLists;
    }
    /**
     * @return Assign IPv6 address
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return DHCPv6 Helper
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers() {
        return this.ipv6DhcpHelpers;
    }
    /**
     * @return NAT64 on this interface
     * 
     */
    public Boolean ipv6Nat() {
        return this.ipv6Nat;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6NatVariable() {
        return this.ipv6NatVariable;
    }
    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses() {
        return this.ipv6SecondaryAddresses;
    }
    /**
     * @return Enable VRRP
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp> ipv6Vrrps() {
        return this.ipv6Vrrps;
    }
    /**
     * @return Interval for interface load calculation
     * 
     */
    public Integer loadInterval() {
        return this.loadInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String loadIntervalVariable() {
        return this.loadIntervalVariable;
    }
    /**
     * @return Set MAC-layer address
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String macAddressVariable() {
        return this.macAddressVariable;
    }
    /**
     * @return Media type
     * 
     */
    public String mediaType() {
        return this.mediaType;
    }
    /**
     * @return Variable name
     * 
     */
    public String mediaTypeVariable() {
        return this.mediaTypeVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Network Address Translation on this interface
     * 
     */
    public Boolean nat() {
        return this.nat;
    }
    /**
     * @return NAT64 on this interface
     * 
     */
    public Boolean nat64Interface() {
        return this.nat64Interface;
    }
    /**
     * @return NAT66 on this interface
     * 
     */
    public Boolean nat66Interface() {
        return this.nat66Interface;
    }
    /**
     * @return Configure NAT Inside Loopback Interface
     * 
     */
    public String natInsideSourceLoopbackInterface() {
        return this.natInsideSourceLoopbackInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String natInsideSourceLoopbackInterfaceVariable() {
        return this.natInsideSourceLoopbackInterfaceVariable;
    }
    /**
     * @return Enable port translation(PAT)
     * 
     */
    public Boolean natOverload() {
        return this.natOverload;
    }
    /**
     * @return Variable name
     * 
     */
    public String natOverloadVariable() {
        return this.natOverloadVariable;
    }
    /**
     * @return Ending IP address of NAT Pool Prefix Length
     * 
     */
    public Integer natPoolPrefixLength() {
        return this.natPoolPrefixLength;
    }
    /**
     * @return Variable name
     * 
     */
    public String natPoolPrefixLengthVariable() {
        return this.natPoolPrefixLengthVariable;
    }
    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    public String natPoolRangeEnd() {
        return this.natPoolRangeEnd;
    }
    /**
     * @return Variable name
     * 
     */
    public String natPoolRangeEndVariable() {
        return this.natPoolRangeEndVariable;
    }
    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    public String natPoolRangeStart() {
        return this.natPoolRangeStart;
    }
    /**
     * @return Variable name
     * 
     */
    public String natPoolRangeStartVariable() {
        return this.natPoolRangeStartVariable;
    }
    /**
     * @return NAT type
     * 
     */
    public String natType() {
        return this.natType;
    }
    /**
     * @return Variable name
     * 
     */
    public String natTypeVariable() {
        return this.natTypeVariable;
    }
    /**
     * @return Configure interface as Power-over-Ethernet source
     * 
     */
    public Boolean poe() {
        return this.poe;
    }
    /**
     * @return Variable name
     * 
     */
    public String poeVariable() {
        return this.poeVariable;
    }
    /**
     * @return Enable/Disable CTS SGT propagation on an interface.
     * 
     */
    public Boolean propagateSgt() {
        return this.propagateSgt;
    }
    /**
     * @return Adaptive QoS default downstream bandwidth
     * 
     */
    public Integer qosAdaptiveBandwidthDownstream() {
        return this.qosAdaptiveBandwidthDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveBandwidthDownstreamVariable() {
        return this.qosAdaptiveBandwidthDownstreamVariable;
    }
    /**
     * @return Adaptive QoS default upstream bandwidth
     * 
     */
    public Integer qosAdaptiveBandwidthUpstream() {
        return this.qosAdaptiveBandwidthUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveBandwidthUpstreamVariable() {
        return this.qosAdaptiveBandwidthUpstreamVariable;
    }
    /**
     * @return Downstream max bandwidth limit
     * 
     */
    public Integer qosAdaptiveMaxDownstream() {
        return this.qosAdaptiveMaxDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMaxDownstreamVariable() {
        return this.qosAdaptiveMaxDownstreamVariable;
    }
    /**
     * @return Upstream max bandwidth limit
     * 
     */
    public Integer qosAdaptiveMaxUpstream() {
        return this.qosAdaptiveMaxUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMaxUpstreamVariable() {
        return this.qosAdaptiveMaxUpstreamVariable;
    }
    /**
     * @return Downstream min bandwidth limit
     * 
     */
    public Integer qosAdaptiveMinDownstream() {
        return this.qosAdaptiveMinDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMinDownstreamVariable() {
        return this.qosAdaptiveMinDownstreamVariable;
    }
    /**
     * @return Upstream min bandwidth limit
     * 
     */
    public Integer qosAdaptiveMinUpstream() {
        return this.qosAdaptiveMinUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMinUpstreamVariable() {
        return this.qosAdaptiveMinUpstreamVariable;
    }
    /**
     * @return Periodic timer for adaptive QoS in minutes
     * 
     */
    public Integer qosAdaptivePeriod() {
        return this.qosAdaptivePeriod;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptivePeriodVariable() {
        return this.qosAdaptivePeriodVariable;
    }
    /**
     * @return Name of QoS map
     * 
     */
    public String qosMap() {
        return this.qosMap;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosMapVariable() {
        return this.qosMapVariable;
    }
    /**
     * @return Name of VPN QoS map
     * 
     */
    public String qosMapVpn() {
        return this.qosMapVpn;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosMapVpnVariable() {
        return this.qosMapVpnVariable;
    }
    /**
     * @return Name of rewrite rule
     * 
     */
    public String rewriteRuleName() {
        return this.rewriteRuleName;
    }
    /**
     * @return Variable name
     * 
     */
    public String rewriteRuleNameVariable() {
        return this.rewriteRuleNameVariable;
    }
    /**
     * @return Enable secondary region
     * 
     */
    public String secondaryRegion() {
        return this.secondaryRegion;
    }
    /**
     * @return Variable name
     * 
     */
    public String secondaryRegionVariable() {
        return this.secondaryRegionVariable;
    }
    /**
     * @return Enables the interface for CTS SGT authorization and forwarding.
     * 
     */
    public Boolean sgtEnforcement() {
        return this.sgtEnforcement;
    }
    /**
     * @return SGT value between 2 and 65519.
     * 
     */
    public Integer sgtEnforcementSgt() {
        return this.sgtEnforcementSgt;
    }
    /**
     * @return Variable name
     * 
     */
    public String sgtEnforcementSgtVariable() {
        return this.sgtEnforcementSgtVariable;
    }
    /**
     * @return 1ge  interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps
     * 
     */
    public Integer shapingRate() {
        return this.shapingRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String shapingRateVariable() {
        return this.shapingRateVariable;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Set interface speed
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Variable name
     * 
     */
    public String speedVariable() {
        return this.speedVariable;
    }
    /**
     * @return Configure static ARP entries
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateStaticArp> staticArps() {
        return this.staticArps;
    }
    /**
     * @return static NAT
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry> staticNat66Entries() {
        return this.staticNat66Entries;
    }
    /**
     * @return Configure static NAT entries
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry> staticNatEntries() {
        return this.staticNatEntries;
    }
    /**
     * @return Configure Port Forward entries
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry> staticPortForwardEntries() {
        return this.staticPortForwardEntries;
    }
    /**
     * @return SGT value between 2 and 65519.
     * 
     */
    public Integer staticSgt() {
        return this.staticSgt;
    }
    /**
     * @return Indicates that the interface is trustworthy for CTS.
     * 
     */
    public Boolean staticSgtTrusted() {
        return this.staticSgtTrusted;
    }
    /**
     * @return Variable name
     * 
     */
    public String staticSgtVariable() {
        return this.staticSgtVariable;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMssAdjust() {
        return this.tcpMssAdjust;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssAdjustVariable() {
        return this.tcpMssAdjustVariable;
    }
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    public Integer tcpTimeout() {
        return this.tcpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpTimeoutVariable() {
        return this.tcpTimeoutVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public String tlocExtension() {
        return this.tlocExtension;
    }
    /**
     * @return Variable name
     * 
     */
    public String tlocExtensionVariable() {
        return this.tlocExtensionVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerVariable() {
        return this.trackerVariable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public List<String> trackers() {
        return this.trackers;
    }
    /**
     * @return Tunnels Bandwidth Percent
     * 
     */
    public Integer tunnelBandwidth() {
        return this.tunnelBandwidth;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelBandwidthVariable() {
        return this.tunnelBandwidthVariable;
    }
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    public Boolean tunnelInterfaceAllowAll() {
        return this.tunnelInterfaceAllowAll;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowAllVariable() {
        return this.tunnelInterfaceAllowAllVariable;
    }
    /**
     * @return Allow/deny BGP
     * 
     */
    public Boolean tunnelInterfaceAllowBgp() {
        return this.tunnelInterfaceAllowBgp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowBgpVariable() {
        return this.tunnelInterfaceAllowBgpVariable;
    }
    /**
     * @return Allow/Deny DHCP
     * 
     */
    public Boolean tunnelInterfaceAllowDhcp() {
        return this.tunnelInterfaceAllowDhcp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDhcpVariable() {
        return this.tunnelInterfaceAllowDhcpVariable;
    }
    /**
     * @return Allow/Deny DNS
     * 
     */
    public Boolean tunnelInterfaceAllowDns() {
        return this.tunnelInterfaceAllowDns;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDnsVariable() {
        return this.tunnelInterfaceAllowDnsVariable;
    }
    /**
     * @return Allow/Deny Https
     * 
     */
    public Boolean tunnelInterfaceAllowHttps() {
        return this.tunnelInterfaceAllowHttps;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowHttpsVariable() {
        return this.tunnelInterfaceAllowHttpsVariable;
    }
    /**
     * @return Allow/Deny ICMP
     * 
     */
    public Boolean tunnelInterfaceAllowIcmp() {
        return this.tunnelInterfaceAllowIcmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowIcmpVariable() {
        return this.tunnelInterfaceAllowIcmpVariable;
    }
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    public Boolean tunnelInterfaceAllowNetconf() {
        return this.tunnelInterfaceAllowNetconf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNetconfVariable() {
        return this.tunnelInterfaceAllowNetconfVariable;
    }
    /**
     * @return Allow/Deny NTP
     * 
     */
    public Boolean tunnelInterfaceAllowNtp() {
        return this.tunnelInterfaceAllowNtp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNtpVariable() {
        return this.tunnelInterfaceAllowNtpVariable;
    }
    /**
     * @return Allow/Deny OSPF
     * 
     */
    public Boolean tunnelInterfaceAllowOspf() {
        return this.tunnelInterfaceAllowOspf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowOspfVariable() {
        return this.tunnelInterfaceAllowOspfVariable;
    }
    /**
     * @return Allow/Deny SNMP
     * 
     */
    public Boolean tunnelInterfaceAllowSnmp() {
        return this.tunnelInterfaceAllowSnmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSnmpVariable() {
        return this.tunnelInterfaceAllowSnmpVariable;
    }
    /**
     * @return Allow/Deny SSH
     * 
     */
    public Boolean tunnelInterfaceAllowSsh() {
        return this.tunnelInterfaceAllowSsh;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSshVariable() {
        return this.tunnelInterfaceAllowSshVariable;
    }
    /**
     * @return Allow/Deny STUN
     * 
     */
    public Boolean tunnelInterfaceAllowStun() {
        return this.tunnelInterfaceAllowStun;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowStunVariable() {
        return this.tunnelInterfaceAllowStunVariable;
    }
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnel() {
        return this.tunnelInterfaceBindLoopbackTunnel;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnelVariable() {
        return this.tunnelInterfaceBindLoopbackTunnelVariable;
    }
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    public Boolean tunnelInterfaceBorder() {
        return this.tunnelInterfaceBorder;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBorderVariable() {
        return this.tunnelInterfaceBorderVariable;
    }
    /**
     * @return Set carrier for TLOC
     * 
     */
    public String tunnelInterfaceCarrier() {
        return this.tunnelInterfaceCarrier;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceCarrierVariable() {
        return this.tunnelInterfaceCarrierVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean tunnelInterfaceClearDontFragment() {
        return this.tunnelInterfaceClearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceClearDontFragmentVariable() {
        return this.tunnelInterfaceClearDontFragmentVariable;
    }
    /**
     * @return Set color for TLOC
     * 
     */
    public String tunnelInterfaceColor() {
        return this.tunnelInterfaceColor;
    }
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    public Boolean tunnelInterfaceColorRestrict() {
        return this.tunnelInterfaceColorRestrict;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceColorRestrictVariable() {
        return this.tunnelInterfaceColorRestrictVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceColorVariable() {
        return this.tunnelInterfaceColorVariable;
    }
    /**
     * @return Allow Control Connection
     * 
     */
    public Boolean tunnelInterfaceControlConnections() {
        return this.tunnelInterfaceControlConnections;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceControlConnectionsVariable() {
        return this.tunnelInterfaceControlConnectionsVariable;
    }
    /**
     * @return Encapsulation for TLOC
     * 
     */
    public List<GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations() {
        return this.tunnelInterfaceEncapsulations;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceExcludeControllerGroupListVariable() {
        return this.tunnelInterfaceExcludeControllerGroupListVariable;
    }
    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public List<Integer> tunnelInterfaceExcludeControllerGroupLists() {
        return this.tunnelInterfaceExcludeControllerGroupLists;
    }
    /**
     * @return Extend the TLOC to a remote node over GRE tunnel
     * 
     */
    public String tunnelInterfaceGreTunnelDestinationIp() {
        return this.tunnelInterfaceGreTunnelDestinationIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceGreTunnelDestinationIpVariable() {
        return this.tunnelInterfaceGreTunnelDestinationIpVariable;
    }
    /**
     * @return List of groups
     * 
     */
    public List<Integer> tunnelInterfaceGroups() {
        return this.tunnelInterfaceGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceGroupsVariable() {
        return this.tunnelInterfaceGroupsVariable;
    }
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    public Integer tunnelInterfaceHelloInterval() {
        return this.tunnelInterfaceHelloInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloIntervalVariable() {
        return this.tunnelInterfaceHelloIntervalVariable;
    }
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceHelloTolerance() {
        return this.tunnelInterfaceHelloTolerance;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloToleranceVariable() {
        return this.tunnelInterfaceHelloToleranceVariable;
    }
    /**
     * @return Set TLOC as last resort
     * 
     */
    public Boolean tunnelInterfaceLastResortCircuit() {
        return this.tunnelInterfaceLastResortCircuit;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLastResortCircuitVariable() {
        return this.tunnelInterfaceLastResortCircuitVariable;
    }
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    public Boolean tunnelInterfaceLowBandwidthLink() {
        return this.tunnelInterfaceLowBandwidthLink;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLowBandwidthLinkVariable() {
        return this.tunnelInterfaceLowBandwidthLinkVariable;
    }
    /**
     * @return Set the maximum number of control connections for this TLOC
     * 
     */
    public Integer tunnelInterfaceMaxControlConnections() {
        return this.tunnelInterfaceMaxControlConnections;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceMaxControlConnectionsVariable() {
        return this.tunnelInterfaceMaxControlConnectionsVariable;
    }
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceNatRefreshInterval() {
        return this.tunnelInterfaceNatRefreshInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNatRefreshIntervalVariable() {
        return this.tunnelInterfaceNatRefreshIntervalVariable;
    }
    /**
     * @return Accept and respond to network-prefix-directed broadcasts)
     * 
     */
    public Boolean tunnelInterfaceNetworkBroadcast() {
        return this.tunnelInterfaceNetworkBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNetworkBroadcastVariable() {
        return this.tunnelInterfaceNetworkBroadcastVariable;
    }
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    public Boolean tunnelInterfacePortHop() {
        return this.tunnelInterfacePortHop;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfacePortHopVariable() {
        return this.tunnelInterfacePortHopVariable;
    }
    /**
     * @return CTS SGT Propagation configuration
     * 
     */
    public Boolean tunnelInterfacePropagateSgt() {
        return this.tunnelInterfacePropagateSgt;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfacePropagateSgtVariable() {
        return this.tunnelInterfacePropagateSgtVariable;
    }
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tunnelInterfaceTunnelTcpMss() {
        return this.tunnelInterfaceTunnelTcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceTunnelTcpMssVariable() {
        return this.tunnelInterfaceTunnelTcpMssVariable;
    }
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    public Boolean tunnelInterfaceVbondAsStunServer() {
        return this.tunnelInterfaceVbondAsStunServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVbondAsStunServerVariable() {
        return this.tunnelInterfaceVbondAsStunServerVariable;
    }
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    public Integer tunnelInterfaceVmanageConnectionPreference() {
        return this.tunnelInterfaceVmanageConnectionPreference;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return this.tunnelInterfaceVmanageConnectionPreferenceVariable;
    }
    /**
     * @return Set tunnel QoS mode
     * 
     */
    public String tunnelQosMode() {
        return this.tunnelQosMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelQosModeVariable() {
        return this.tunnelQosModeVariable;
    }
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    public Integer udpTimeout() {
        return this.udpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String udpTimeoutVariable() {
        return this.udpTimeoutVariable;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoVpnInterfaceFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCiscoVpnInterfaceFeatureTemplateAccessList> accessLists;
        private String address;
        private String addressVariable;
        private Integer arpTimeout;
        private String arpTimeoutVariable;
        private Boolean autoBandwidthDetect;
        private String autoBandwidthDetectVariable;
        private Boolean autonegotiate;
        private String autonegotiateVariable;
        private Integer bandwidthDownstream;
        private String bandwidthDownstreamVariable;
        private Integer bandwidthUpstream;
        private String bandwidthUpstreamVariable;
        private Boolean blockNonSourceIp;
        private String blockNonSourceIpVariable;
        private String coreRegion;
        private String coreRegionVariable;
        private String description;
        private List<String> deviceTypes;
        private Boolean dhcp;
        private Integer dhcpDistance;
        private String dhcpDistanceVariable;
        private String dhcpVariable;
        private Boolean dhcpv6;
        private String dhcpv6Variable;
        private String duplex;
        private String duplexVariable;
        private Boolean enableCoreRegion;
        private Boolean enableSgt;
        private String greTunnelSourceIp;
        private String greTunnelSourceIpVariable;
        private String greTunnelXconnect;
        private String greTunnelXconnectVariable;
        private Boolean icmpRedirectDisable;
        private String icmpRedirectDisableVariable;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String iperfServer;
        private String iperfServerVariable;
        private String ipv4DhcpHelperVariable;
        private List<String> ipv4DhcpHelpers;
        private List<GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses;
        private List<GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp> ipv4Vrrps;
        private List<GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList> ipv6AccessLists;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private List<GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers;
        private Boolean ipv6Nat;
        private String ipv6NatVariable;
        private List<GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses;
        private List<GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp> ipv6Vrrps;
        private Integer loadInterval;
        private String loadIntervalVariable;
        private String macAddress;
        private String macAddressVariable;
        private String mediaType;
        private String mediaTypeVariable;
        private String name;
        private Boolean nat;
        private Boolean nat64Interface;
        private Boolean nat66Interface;
        private String natInsideSourceLoopbackInterface;
        private String natInsideSourceLoopbackInterfaceVariable;
        private Boolean natOverload;
        private String natOverloadVariable;
        private Integer natPoolPrefixLength;
        private String natPoolPrefixLengthVariable;
        private String natPoolRangeEnd;
        private String natPoolRangeEndVariable;
        private String natPoolRangeStart;
        private String natPoolRangeStartVariable;
        private String natType;
        private String natTypeVariable;
        private Boolean poe;
        private String poeVariable;
        private Boolean propagateSgt;
        private Integer qosAdaptiveBandwidthDownstream;
        private String qosAdaptiveBandwidthDownstreamVariable;
        private Integer qosAdaptiveBandwidthUpstream;
        private String qosAdaptiveBandwidthUpstreamVariable;
        private Integer qosAdaptiveMaxDownstream;
        private String qosAdaptiveMaxDownstreamVariable;
        private Integer qosAdaptiveMaxUpstream;
        private String qosAdaptiveMaxUpstreamVariable;
        private Integer qosAdaptiveMinDownstream;
        private String qosAdaptiveMinDownstreamVariable;
        private Integer qosAdaptiveMinUpstream;
        private String qosAdaptiveMinUpstreamVariable;
        private Integer qosAdaptivePeriod;
        private String qosAdaptivePeriodVariable;
        private String qosMap;
        private String qosMapVariable;
        private String qosMapVpn;
        private String qosMapVpnVariable;
        private String rewriteRuleName;
        private String rewriteRuleNameVariable;
        private String secondaryRegion;
        private String secondaryRegionVariable;
        private Boolean sgtEnforcement;
        private Integer sgtEnforcementSgt;
        private String sgtEnforcementSgtVariable;
        private Integer shapingRate;
        private String shapingRateVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private String speed;
        private String speedVariable;
        private List<GetCiscoVpnInterfaceFeatureTemplateStaticArp> staticArps;
        private List<GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry> staticNat66Entries;
        private List<GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry> staticNatEntries;
        private List<GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry> staticPortForwardEntries;
        private Integer staticSgt;
        private Boolean staticSgtTrusted;
        private String staticSgtVariable;
        private Integer tcpMssAdjust;
        private String tcpMssAdjustVariable;
        private Integer tcpTimeout;
        private String tcpTimeoutVariable;
        private String templateType;
        private String tlocExtension;
        private String tlocExtensionVariable;
        private String trackerVariable;
        private List<String> trackers;
        private Integer tunnelBandwidth;
        private String tunnelBandwidthVariable;
        private Boolean tunnelInterfaceAllowAll;
        private String tunnelInterfaceAllowAllVariable;
        private Boolean tunnelInterfaceAllowBgp;
        private String tunnelInterfaceAllowBgpVariable;
        private Boolean tunnelInterfaceAllowDhcp;
        private String tunnelInterfaceAllowDhcpVariable;
        private Boolean tunnelInterfaceAllowDns;
        private String tunnelInterfaceAllowDnsVariable;
        private Boolean tunnelInterfaceAllowHttps;
        private String tunnelInterfaceAllowHttpsVariable;
        private Boolean tunnelInterfaceAllowIcmp;
        private String tunnelInterfaceAllowIcmpVariable;
        private Boolean tunnelInterfaceAllowNetconf;
        private String tunnelInterfaceAllowNetconfVariable;
        private Boolean tunnelInterfaceAllowNtp;
        private String tunnelInterfaceAllowNtpVariable;
        private Boolean tunnelInterfaceAllowOspf;
        private String tunnelInterfaceAllowOspfVariable;
        private Boolean tunnelInterfaceAllowSnmp;
        private String tunnelInterfaceAllowSnmpVariable;
        private Boolean tunnelInterfaceAllowSsh;
        private String tunnelInterfaceAllowSshVariable;
        private Boolean tunnelInterfaceAllowStun;
        private String tunnelInterfaceAllowStunVariable;
        private String tunnelInterfaceBindLoopbackTunnel;
        private String tunnelInterfaceBindLoopbackTunnelVariable;
        private Boolean tunnelInterfaceBorder;
        private String tunnelInterfaceBorderVariable;
        private String tunnelInterfaceCarrier;
        private String tunnelInterfaceCarrierVariable;
        private Boolean tunnelInterfaceClearDontFragment;
        private String tunnelInterfaceClearDontFragmentVariable;
        private String tunnelInterfaceColor;
        private Boolean tunnelInterfaceColorRestrict;
        private String tunnelInterfaceColorRestrictVariable;
        private String tunnelInterfaceColorVariable;
        private Boolean tunnelInterfaceControlConnections;
        private String tunnelInterfaceControlConnectionsVariable;
        private List<GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
        private String tunnelInterfaceExcludeControllerGroupListVariable;
        private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
        private String tunnelInterfaceGreTunnelDestinationIp;
        private String tunnelInterfaceGreTunnelDestinationIpVariable;
        private List<Integer> tunnelInterfaceGroups;
        private String tunnelInterfaceGroupsVariable;
        private Integer tunnelInterfaceHelloInterval;
        private String tunnelInterfaceHelloIntervalVariable;
        private Integer tunnelInterfaceHelloTolerance;
        private String tunnelInterfaceHelloToleranceVariable;
        private Boolean tunnelInterfaceLastResortCircuit;
        private String tunnelInterfaceLastResortCircuitVariable;
        private Boolean tunnelInterfaceLowBandwidthLink;
        private String tunnelInterfaceLowBandwidthLinkVariable;
        private Integer tunnelInterfaceMaxControlConnections;
        private String tunnelInterfaceMaxControlConnectionsVariable;
        private Integer tunnelInterfaceNatRefreshInterval;
        private String tunnelInterfaceNatRefreshIntervalVariable;
        private Boolean tunnelInterfaceNetworkBroadcast;
        private String tunnelInterfaceNetworkBroadcastVariable;
        private Boolean tunnelInterfacePortHop;
        private String tunnelInterfacePortHopVariable;
        private Boolean tunnelInterfacePropagateSgt;
        private String tunnelInterfacePropagateSgtVariable;
        private Integer tunnelInterfaceTunnelTcpMss;
        private String tunnelInterfaceTunnelTcpMssVariable;
        private Boolean tunnelInterfaceVbondAsStunServer;
        private String tunnelInterfaceVbondAsStunServerVariable;
        private Integer tunnelInterfaceVmanageConnectionPreference;
        private String tunnelInterfaceVmanageConnectionPreferenceVariable;
        private String tunnelQosMode;
        private String tunnelQosModeVariable;
        private Integer udpTimeout;
        private String udpTimeoutVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoVpnInterfaceFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLists = defaults.accessLists;
    	      this.address = defaults.address;
    	      this.addressVariable = defaults.addressVariable;
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.arpTimeoutVariable = defaults.arpTimeoutVariable;
    	      this.autoBandwidthDetect = defaults.autoBandwidthDetect;
    	      this.autoBandwidthDetectVariable = defaults.autoBandwidthDetectVariable;
    	      this.autonegotiate = defaults.autonegotiate;
    	      this.autonegotiateVariable = defaults.autonegotiateVariable;
    	      this.bandwidthDownstream = defaults.bandwidthDownstream;
    	      this.bandwidthDownstreamVariable = defaults.bandwidthDownstreamVariable;
    	      this.bandwidthUpstream = defaults.bandwidthUpstream;
    	      this.bandwidthUpstreamVariable = defaults.bandwidthUpstreamVariable;
    	      this.blockNonSourceIp = defaults.blockNonSourceIp;
    	      this.blockNonSourceIpVariable = defaults.blockNonSourceIpVariable;
    	      this.coreRegion = defaults.coreRegion;
    	      this.coreRegionVariable = defaults.coreRegionVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.dhcp = defaults.dhcp;
    	      this.dhcpDistance = defaults.dhcpDistance;
    	      this.dhcpDistanceVariable = defaults.dhcpDistanceVariable;
    	      this.dhcpVariable = defaults.dhcpVariable;
    	      this.dhcpv6 = defaults.dhcpv6;
    	      this.dhcpv6Variable = defaults.dhcpv6Variable;
    	      this.duplex = defaults.duplex;
    	      this.duplexVariable = defaults.duplexVariable;
    	      this.enableCoreRegion = defaults.enableCoreRegion;
    	      this.enableSgt = defaults.enableSgt;
    	      this.greTunnelSourceIp = defaults.greTunnelSourceIp;
    	      this.greTunnelSourceIpVariable = defaults.greTunnelSourceIpVariable;
    	      this.greTunnelXconnect = defaults.greTunnelXconnect;
    	      this.greTunnelXconnectVariable = defaults.greTunnelXconnectVariable;
    	      this.icmpRedirectDisable = defaults.icmpRedirectDisable;
    	      this.icmpRedirectDisableVariable = defaults.icmpRedirectDisableVariable;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.iperfServer = defaults.iperfServer;
    	      this.iperfServerVariable = defaults.iperfServerVariable;
    	      this.ipv4DhcpHelperVariable = defaults.ipv4DhcpHelperVariable;
    	      this.ipv4DhcpHelpers = defaults.ipv4DhcpHelpers;
    	      this.ipv4SecondaryAddresses = defaults.ipv4SecondaryAddresses;
    	      this.ipv4Vrrps = defaults.ipv4Vrrps;
    	      this.ipv6AccessLists = defaults.ipv6AccessLists;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.ipv6DhcpHelpers = defaults.ipv6DhcpHelpers;
    	      this.ipv6Nat = defaults.ipv6Nat;
    	      this.ipv6NatVariable = defaults.ipv6NatVariable;
    	      this.ipv6SecondaryAddresses = defaults.ipv6SecondaryAddresses;
    	      this.ipv6Vrrps = defaults.ipv6Vrrps;
    	      this.loadInterval = defaults.loadInterval;
    	      this.loadIntervalVariable = defaults.loadIntervalVariable;
    	      this.macAddress = defaults.macAddress;
    	      this.macAddressVariable = defaults.macAddressVariable;
    	      this.mediaType = defaults.mediaType;
    	      this.mediaTypeVariable = defaults.mediaTypeVariable;
    	      this.name = defaults.name;
    	      this.nat = defaults.nat;
    	      this.nat64Interface = defaults.nat64Interface;
    	      this.nat66Interface = defaults.nat66Interface;
    	      this.natInsideSourceLoopbackInterface = defaults.natInsideSourceLoopbackInterface;
    	      this.natInsideSourceLoopbackInterfaceVariable = defaults.natInsideSourceLoopbackInterfaceVariable;
    	      this.natOverload = defaults.natOverload;
    	      this.natOverloadVariable = defaults.natOverloadVariable;
    	      this.natPoolPrefixLength = defaults.natPoolPrefixLength;
    	      this.natPoolPrefixLengthVariable = defaults.natPoolPrefixLengthVariable;
    	      this.natPoolRangeEnd = defaults.natPoolRangeEnd;
    	      this.natPoolRangeEndVariable = defaults.natPoolRangeEndVariable;
    	      this.natPoolRangeStart = defaults.natPoolRangeStart;
    	      this.natPoolRangeStartVariable = defaults.natPoolRangeStartVariable;
    	      this.natType = defaults.natType;
    	      this.natTypeVariable = defaults.natTypeVariable;
    	      this.poe = defaults.poe;
    	      this.poeVariable = defaults.poeVariable;
    	      this.propagateSgt = defaults.propagateSgt;
    	      this.qosAdaptiveBandwidthDownstream = defaults.qosAdaptiveBandwidthDownstream;
    	      this.qosAdaptiveBandwidthDownstreamVariable = defaults.qosAdaptiveBandwidthDownstreamVariable;
    	      this.qosAdaptiveBandwidthUpstream = defaults.qosAdaptiveBandwidthUpstream;
    	      this.qosAdaptiveBandwidthUpstreamVariable = defaults.qosAdaptiveBandwidthUpstreamVariable;
    	      this.qosAdaptiveMaxDownstream = defaults.qosAdaptiveMaxDownstream;
    	      this.qosAdaptiveMaxDownstreamVariable = defaults.qosAdaptiveMaxDownstreamVariable;
    	      this.qosAdaptiveMaxUpstream = defaults.qosAdaptiveMaxUpstream;
    	      this.qosAdaptiveMaxUpstreamVariable = defaults.qosAdaptiveMaxUpstreamVariable;
    	      this.qosAdaptiveMinDownstream = defaults.qosAdaptiveMinDownstream;
    	      this.qosAdaptiveMinDownstreamVariable = defaults.qosAdaptiveMinDownstreamVariable;
    	      this.qosAdaptiveMinUpstream = defaults.qosAdaptiveMinUpstream;
    	      this.qosAdaptiveMinUpstreamVariable = defaults.qosAdaptiveMinUpstreamVariable;
    	      this.qosAdaptivePeriod = defaults.qosAdaptivePeriod;
    	      this.qosAdaptivePeriodVariable = defaults.qosAdaptivePeriodVariable;
    	      this.qosMap = defaults.qosMap;
    	      this.qosMapVariable = defaults.qosMapVariable;
    	      this.qosMapVpn = defaults.qosMapVpn;
    	      this.qosMapVpnVariable = defaults.qosMapVpnVariable;
    	      this.rewriteRuleName = defaults.rewriteRuleName;
    	      this.rewriteRuleNameVariable = defaults.rewriteRuleNameVariable;
    	      this.secondaryRegion = defaults.secondaryRegion;
    	      this.secondaryRegionVariable = defaults.secondaryRegionVariable;
    	      this.sgtEnforcement = defaults.sgtEnforcement;
    	      this.sgtEnforcementSgt = defaults.sgtEnforcementSgt;
    	      this.sgtEnforcementSgtVariable = defaults.sgtEnforcementSgtVariable;
    	      this.shapingRate = defaults.shapingRate;
    	      this.shapingRateVariable = defaults.shapingRateVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.speed = defaults.speed;
    	      this.speedVariable = defaults.speedVariable;
    	      this.staticArps = defaults.staticArps;
    	      this.staticNat66Entries = defaults.staticNat66Entries;
    	      this.staticNatEntries = defaults.staticNatEntries;
    	      this.staticPortForwardEntries = defaults.staticPortForwardEntries;
    	      this.staticSgt = defaults.staticSgt;
    	      this.staticSgtTrusted = defaults.staticSgtTrusted;
    	      this.staticSgtVariable = defaults.staticSgtVariable;
    	      this.tcpMssAdjust = defaults.tcpMssAdjust;
    	      this.tcpMssAdjustVariable = defaults.tcpMssAdjustVariable;
    	      this.tcpTimeout = defaults.tcpTimeout;
    	      this.tcpTimeoutVariable = defaults.tcpTimeoutVariable;
    	      this.templateType = defaults.templateType;
    	      this.tlocExtension = defaults.tlocExtension;
    	      this.tlocExtensionVariable = defaults.tlocExtensionVariable;
    	      this.trackerVariable = defaults.trackerVariable;
    	      this.trackers = defaults.trackers;
    	      this.tunnelBandwidth = defaults.tunnelBandwidth;
    	      this.tunnelBandwidthVariable = defaults.tunnelBandwidthVariable;
    	      this.tunnelInterfaceAllowAll = defaults.tunnelInterfaceAllowAll;
    	      this.tunnelInterfaceAllowAllVariable = defaults.tunnelInterfaceAllowAllVariable;
    	      this.tunnelInterfaceAllowBgp = defaults.tunnelInterfaceAllowBgp;
    	      this.tunnelInterfaceAllowBgpVariable = defaults.tunnelInterfaceAllowBgpVariable;
    	      this.tunnelInterfaceAllowDhcp = defaults.tunnelInterfaceAllowDhcp;
    	      this.tunnelInterfaceAllowDhcpVariable = defaults.tunnelInterfaceAllowDhcpVariable;
    	      this.tunnelInterfaceAllowDns = defaults.tunnelInterfaceAllowDns;
    	      this.tunnelInterfaceAllowDnsVariable = defaults.tunnelInterfaceAllowDnsVariable;
    	      this.tunnelInterfaceAllowHttps = defaults.tunnelInterfaceAllowHttps;
    	      this.tunnelInterfaceAllowHttpsVariable = defaults.tunnelInterfaceAllowHttpsVariable;
    	      this.tunnelInterfaceAllowIcmp = defaults.tunnelInterfaceAllowIcmp;
    	      this.tunnelInterfaceAllowIcmpVariable = defaults.tunnelInterfaceAllowIcmpVariable;
    	      this.tunnelInterfaceAllowNetconf = defaults.tunnelInterfaceAllowNetconf;
    	      this.tunnelInterfaceAllowNetconfVariable = defaults.tunnelInterfaceAllowNetconfVariable;
    	      this.tunnelInterfaceAllowNtp = defaults.tunnelInterfaceAllowNtp;
    	      this.tunnelInterfaceAllowNtpVariable = defaults.tunnelInterfaceAllowNtpVariable;
    	      this.tunnelInterfaceAllowOspf = defaults.tunnelInterfaceAllowOspf;
    	      this.tunnelInterfaceAllowOspfVariable = defaults.tunnelInterfaceAllowOspfVariable;
    	      this.tunnelInterfaceAllowSnmp = defaults.tunnelInterfaceAllowSnmp;
    	      this.tunnelInterfaceAllowSnmpVariable = defaults.tunnelInterfaceAllowSnmpVariable;
    	      this.tunnelInterfaceAllowSsh = defaults.tunnelInterfaceAllowSsh;
    	      this.tunnelInterfaceAllowSshVariable = defaults.tunnelInterfaceAllowSshVariable;
    	      this.tunnelInterfaceAllowStun = defaults.tunnelInterfaceAllowStun;
    	      this.tunnelInterfaceAllowStunVariable = defaults.tunnelInterfaceAllowStunVariable;
    	      this.tunnelInterfaceBindLoopbackTunnel = defaults.tunnelInterfaceBindLoopbackTunnel;
    	      this.tunnelInterfaceBindLoopbackTunnelVariable = defaults.tunnelInterfaceBindLoopbackTunnelVariable;
    	      this.tunnelInterfaceBorder = defaults.tunnelInterfaceBorder;
    	      this.tunnelInterfaceBorderVariable = defaults.tunnelInterfaceBorderVariable;
    	      this.tunnelInterfaceCarrier = defaults.tunnelInterfaceCarrier;
    	      this.tunnelInterfaceCarrierVariable = defaults.tunnelInterfaceCarrierVariable;
    	      this.tunnelInterfaceClearDontFragment = defaults.tunnelInterfaceClearDontFragment;
    	      this.tunnelInterfaceClearDontFragmentVariable = defaults.tunnelInterfaceClearDontFragmentVariable;
    	      this.tunnelInterfaceColor = defaults.tunnelInterfaceColor;
    	      this.tunnelInterfaceColorRestrict = defaults.tunnelInterfaceColorRestrict;
    	      this.tunnelInterfaceColorRestrictVariable = defaults.tunnelInterfaceColorRestrictVariable;
    	      this.tunnelInterfaceColorVariable = defaults.tunnelInterfaceColorVariable;
    	      this.tunnelInterfaceControlConnections = defaults.tunnelInterfaceControlConnections;
    	      this.tunnelInterfaceControlConnectionsVariable = defaults.tunnelInterfaceControlConnectionsVariable;
    	      this.tunnelInterfaceEncapsulations = defaults.tunnelInterfaceEncapsulations;
    	      this.tunnelInterfaceExcludeControllerGroupListVariable = defaults.tunnelInterfaceExcludeControllerGroupListVariable;
    	      this.tunnelInterfaceExcludeControllerGroupLists = defaults.tunnelInterfaceExcludeControllerGroupLists;
    	      this.tunnelInterfaceGreTunnelDestinationIp = defaults.tunnelInterfaceGreTunnelDestinationIp;
    	      this.tunnelInterfaceGreTunnelDestinationIpVariable = defaults.tunnelInterfaceGreTunnelDestinationIpVariable;
    	      this.tunnelInterfaceGroups = defaults.tunnelInterfaceGroups;
    	      this.tunnelInterfaceGroupsVariable = defaults.tunnelInterfaceGroupsVariable;
    	      this.tunnelInterfaceHelloInterval = defaults.tunnelInterfaceHelloInterval;
    	      this.tunnelInterfaceHelloIntervalVariable = defaults.tunnelInterfaceHelloIntervalVariable;
    	      this.tunnelInterfaceHelloTolerance = defaults.tunnelInterfaceHelloTolerance;
    	      this.tunnelInterfaceHelloToleranceVariable = defaults.tunnelInterfaceHelloToleranceVariable;
    	      this.tunnelInterfaceLastResortCircuit = defaults.tunnelInterfaceLastResortCircuit;
    	      this.tunnelInterfaceLastResortCircuitVariable = defaults.tunnelInterfaceLastResortCircuitVariable;
    	      this.tunnelInterfaceLowBandwidthLink = defaults.tunnelInterfaceLowBandwidthLink;
    	      this.tunnelInterfaceLowBandwidthLinkVariable = defaults.tunnelInterfaceLowBandwidthLinkVariable;
    	      this.tunnelInterfaceMaxControlConnections = defaults.tunnelInterfaceMaxControlConnections;
    	      this.tunnelInterfaceMaxControlConnectionsVariable = defaults.tunnelInterfaceMaxControlConnectionsVariable;
    	      this.tunnelInterfaceNatRefreshInterval = defaults.tunnelInterfaceNatRefreshInterval;
    	      this.tunnelInterfaceNatRefreshIntervalVariable = defaults.tunnelInterfaceNatRefreshIntervalVariable;
    	      this.tunnelInterfaceNetworkBroadcast = defaults.tunnelInterfaceNetworkBroadcast;
    	      this.tunnelInterfaceNetworkBroadcastVariable = defaults.tunnelInterfaceNetworkBroadcastVariable;
    	      this.tunnelInterfacePortHop = defaults.tunnelInterfacePortHop;
    	      this.tunnelInterfacePortHopVariable = defaults.tunnelInterfacePortHopVariable;
    	      this.tunnelInterfacePropagateSgt = defaults.tunnelInterfacePropagateSgt;
    	      this.tunnelInterfacePropagateSgtVariable = defaults.tunnelInterfacePropagateSgtVariable;
    	      this.tunnelInterfaceTunnelTcpMss = defaults.tunnelInterfaceTunnelTcpMss;
    	      this.tunnelInterfaceTunnelTcpMssVariable = defaults.tunnelInterfaceTunnelTcpMssVariable;
    	      this.tunnelInterfaceVbondAsStunServer = defaults.tunnelInterfaceVbondAsStunServer;
    	      this.tunnelInterfaceVbondAsStunServerVariable = defaults.tunnelInterfaceVbondAsStunServerVariable;
    	      this.tunnelInterfaceVmanageConnectionPreference = defaults.tunnelInterfaceVmanageConnectionPreference;
    	      this.tunnelInterfaceVmanageConnectionPreferenceVariable = defaults.tunnelInterfaceVmanageConnectionPreferenceVariable;
    	      this.tunnelQosMode = defaults.tunnelQosMode;
    	      this.tunnelQosModeVariable = defaults.tunnelQosModeVariable;
    	      this.udpTimeout = defaults.udpTimeout;
    	      this.udpTimeoutVariable = defaults.udpTimeoutVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accessLists(List<GetCiscoVpnInterfaceFeatureTemplateAccessList> accessLists) {
            if (accessLists == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "accessLists");
            }
            this.accessLists = accessLists;
            return this;
        }
        public Builder accessLists(GetCiscoVpnInterfaceFeatureTemplateAccessList... accessLists) {
            return accessLists(List.of(accessLists));
        }
        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder addressVariable(String addressVariable) {
            if (addressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "addressVariable");
            }
            this.addressVariable = addressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            if (arpTimeout == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "arpTimeout");
            }
            this.arpTimeout = arpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            if (arpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "arpTimeoutVariable");
            }
            this.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder autoBandwidthDetect(Boolean autoBandwidthDetect) {
            if (autoBandwidthDetect == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "autoBandwidthDetect");
            }
            this.autoBandwidthDetect = autoBandwidthDetect;
            return this;
        }
        @CustomType.Setter
        public Builder autoBandwidthDetectVariable(String autoBandwidthDetectVariable) {
            if (autoBandwidthDetectVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "autoBandwidthDetectVariable");
            }
            this.autoBandwidthDetectVariable = autoBandwidthDetectVariable;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiate(Boolean autonegotiate) {
            if (autonegotiate == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "autonegotiate");
            }
            this.autonegotiate = autonegotiate;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiateVariable(String autonegotiateVariable) {
            if (autonegotiateVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "autonegotiateVariable");
            }
            this.autonegotiateVariable = autonegotiateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            if (bandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "bandwidthDownstream");
            }
            this.bandwidthDownstream = bandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            if (bandwidthDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "bandwidthDownstreamVariable");
            }
            this.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthUpstream(Integer bandwidthUpstream) {
            if (bandwidthUpstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "bandwidthUpstream");
            }
            this.bandwidthUpstream = bandwidthUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthUpstreamVariable(String bandwidthUpstreamVariable) {
            if (bandwidthUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "bandwidthUpstreamVariable");
            }
            this.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder blockNonSourceIp(Boolean blockNonSourceIp) {
            if (blockNonSourceIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "blockNonSourceIp");
            }
            this.blockNonSourceIp = blockNonSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder blockNonSourceIpVariable(String blockNonSourceIpVariable) {
            if (blockNonSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "blockNonSourceIpVariable");
            }
            this.blockNonSourceIpVariable = blockNonSourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder coreRegion(String coreRegion) {
            if (coreRegion == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "coreRegion");
            }
            this.coreRegion = coreRegion;
            return this;
        }
        @CustomType.Setter
        public Builder coreRegionVariable(String coreRegionVariable) {
            if (coreRegionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "coreRegionVariable");
            }
            this.coreRegionVariable = coreRegionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder dhcp(Boolean dhcp) {
            if (dhcp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "dhcp");
            }
            this.dhcp = dhcp;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpDistance(Integer dhcpDistance) {
            if (dhcpDistance == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "dhcpDistance");
            }
            this.dhcpDistance = dhcpDistance;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpDistanceVariable(String dhcpDistanceVariable) {
            if (dhcpDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "dhcpDistanceVariable");
            }
            this.dhcpDistanceVariable = dhcpDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpVariable(String dhcpVariable) {
            if (dhcpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "dhcpVariable");
            }
            this.dhcpVariable = dhcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpv6(Boolean dhcpv6) {
            if (dhcpv6 == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "dhcpv6");
            }
            this.dhcpv6 = dhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder dhcpv6Variable(String dhcpv6Variable) {
            if (dhcpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "dhcpv6Variable");
            }
            this.dhcpv6Variable = dhcpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            if (duplex == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "duplex");
            }
            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder duplexVariable(String duplexVariable) {
            if (duplexVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "duplexVariable");
            }
            this.duplexVariable = duplexVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableCoreRegion(Boolean enableCoreRegion) {
            if (enableCoreRegion == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "enableCoreRegion");
            }
            this.enableCoreRegion = enableCoreRegion;
            return this;
        }
        @CustomType.Setter
        public Builder enableSgt(Boolean enableSgt) {
            if (enableSgt == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "enableSgt");
            }
            this.enableSgt = enableSgt;
            return this;
        }
        @CustomType.Setter
        public Builder greTunnelSourceIp(String greTunnelSourceIp) {
            if (greTunnelSourceIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "greTunnelSourceIp");
            }
            this.greTunnelSourceIp = greTunnelSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder greTunnelSourceIpVariable(String greTunnelSourceIpVariable) {
            if (greTunnelSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "greTunnelSourceIpVariable");
            }
            this.greTunnelSourceIpVariable = greTunnelSourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder greTunnelXconnect(String greTunnelXconnect) {
            if (greTunnelXconnect == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "greTunnelXconnect");
            }
            this.greTunnelXconnect = greTunnelXconnect;
            return this;
        }
        @CustomType.Setter
        public Builder greTunnelXconnectVariable(String greTunnelXconnectVariable) {
            if (greTunnelXconnectVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "greTunnelXconnectVariable");
            }
            this.greTunnelXconnectVariable = greTunnelXconnectVariable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisable(Boolean icmpRedirectDisable) {
            if (icmpRedirectDisable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "icmpRedirectDisable");
            }
            this.icmpRedirectDisable = icmpRedirectDisable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisableVariable(String icmpRedirectDisableVariable) {
            if (icmpRedirectDisableVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "icmpRedirectDisableVariable");
            }
            this.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder iperfServer(String iperfServer) {
            if (iperfServer == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "iperfServer");
            }
            this.iperfServer = iperfServer;
            return this;
        }
        @CustomType.Setter
        public Builder iperfServerVariable(String iperfServerVariable) {
            if (iperfServerVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "iperfServerVariable");
            }
            this.iperfServerVariable = iperfServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelperVariable(String ipv4DhcpHelperVariable) {
            if (ipv4DhcpHelperVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv4DhcpHelperVariable");
            }
            this.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            if (ipv4DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv4DhcpHelpers");
            }
            this.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv4SecondaryAddresses(List<GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses) {
            if (ipv4SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv4SecondaryAddresses");
            }
            this.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }
        public Builder ipv4SecondaryAddresses(GetCiscoVpnInterfaceFeatureTemplateIpv4SecondaryAddress... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv4Vrrps(List<GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp> ipv4Vrrps) {
            if (ipv4Vrrps == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv4Vrrps");
            }
            this.ipv4Vrrps = ipv4Vrrps;
            return this;
        }
        public Builder ipv4Vrrps(GetCiscoVpnInterfaceFeatureTemplateIpv4Vrrp... ipv4Vrrps) {
            return ipv4Vrrps(List.of(ipv4Vrrps));
        }
        @CustomType.Setter
        public Builder ipv6AccessLists(List<GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList> ipv6AccessLists) {
            if (ipv6AccessLists == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6AccessLists");
            }
            this.ipv6AccessLists = ipv6AccessLists;
            return this;
        }
        public Builder ipv6AccessLists(GetCiscoVpnInterfaceFeatureTemplateIpv6AccessList... ipv6AccessLists) {
            return ipv6AccessLists(List.of(ipv6AccessLists));
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpHelpers(List<GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers) {
            if (ipv6DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6DhcpHelpers");
            }
            this.ipv6DhcpHelpers = ipv6DhcpHelpers;
            return this;
        }
        public Builder ipv6DhcpHelpers(GetCiscoVpnInterfaceFeatureTemplateIpv6DhcpHelper... ipv6DhcpHelpers) {
            return ipv6DhcpHelpers(List.of(ipv6DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv6Nat(Boolean ipv6Nat) {
            if (ipv6Nat == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6Nat");
            }
            this.ipv6Nat = ipv6Nat;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6NatVariable(String ipv6NatVariable) {
            if (ipv6NatVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6NatVariable");
            }
            this.ipv6NatVariable = ipv6NatVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6SecondaryAddresses(List<GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses) {
            if (ipv6SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6SecondaryAddresses");
            }
            this.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            return this;
        }
        public Builder ipv6SecondaryAddresses(GetCiscoVpnInterfaceFeatureTemplateIpv6SecondaryAddress... ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(List.of(ipv6SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Vrrps(List<GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp> ipv6Vrrps) {
            if (ipv6Vrrps == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "ipv6Vrrps");
            }
            this.ipv6Vrrps = ipv6Vrrps;
            return this;
        }
        public Builder ipv6Vrrps(GetCiscoVpnInterfaceFeatureTemplateIpv6Vrrp... ipv6Vrrps) {
            return ipv6Vrrps(List.of(ipv6Vrrps));
        }
        @CustomType.Setter
        public Builder loadInterval(Integer loadInterval) {
            if (loadInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "loadInterval");
            }
            this.loadInterval = loadInterval;
            return this;
        }
        @CustomType.Setter
        public Builder loadIntervalVariable(String loadIntervalVariable) {
            if (loadIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "loadIntervalVariable");
            }
            this.loadIntervalVariable = loadIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder macAddressVariable(String macAddressVariable) {
            if (macAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "macAddressVariable");
            }
            this.macAddressVariable = macAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mediaType(String mediaType) {
            if (mediaType == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "mediaType");
            }
            this.mediaType = mediaType;
            return this;
        }
        @CustomType.Setter
        public Builder mediaTypeVariable(String mediaTypeVariable) {
            if (mediaTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "mediaTypeVariable");
            }
            this.mediaTypeVariable = mediaTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat(Boolean nat) {
            if (nat == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "nat");
            }
            this.nat = nat;
            return this;
        }
        @CustomType.Setter
        public Builder nat64Interface(Boolean nat64Interface) {
            if (nat64Interface == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "nat64Interface");
            }
            this.nat64Interface = nat64Interface;
            return this;
        }
        @CustomType.Setter
        public Builder nat66Interface(Boolean nat66Interface) {
            if (nat66Interface == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "nat66Interface");
            }
            this.nat66Interface = nat66Interface;
            return this;
        }
        @CustomType.Setter
        public Builder natInsideSourceLoopbackInterface(String natInsideSourceLoopbackInterface) {
            if (natInsideSourceLoopbackInterface == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natInsideSourceLoopbackInterface");
            }
            this.natInsideSourceLoopbackInterface = natInsideSourceLoopbackInterface;
            return this;
        }
        @CustomType.Setter
        public Builder natInsideSourceLoopbackInterfaceVariable(String natInsideSourceLoopbackInterfaceVariable) {
            if (natInsideSourceLoopbackInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natInsideSourceLoopbackInterfaceVariable");
            }
            this.natInsideSourceLoopbackInterfaceVariable = natInsideSourceLoopbackInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natOverload(Boolean natOverload) {
            if (natOverload == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natOverload");
            }
            this.natOverload = natOverload;
            return this;
        }
        @CustomType.Setter
        public Builder natOverloadVariable(String natOverloadVariable) {
            if (natOverloadVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natOverloadVariable");
            }
            this.natOverloadVariable = natOverloadVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolPrefixLength(Integer natPoolPrefixLength) {
            if (natPoolPrefixLength == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natPoolPrefixLength");
            }
            this.natPoolPrefixLength = natPoolPrefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolPrefixLengthVariable(String natPoolPrefixLengthVariable) {
            if (natPoolPrefixLengthVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natPoolPrefixLengthVariable");
            }
            this.natPoolPrefixLengthVariable = natPoolPrefixLengthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolRangeEnd(String natPoolRangeEnd) {
            if (natPoolRangeEnd == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natPoolRangeEnd");
            }
            this.natPoolRangeEnd = natPoolRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolRangeEndVariable(String natPoolRangeEndVariable) {
            if (natPoolRangeEndVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natPoolRangeEndVariable");
            }
            this.natPoolRangeEndVariable = natPoolRangeEndVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolRangeStart(String natPoolRangeStart) {
            if (natPoolRangeStart == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natPoolRangeStart");
            }
            this.natPoolRangeStart = natPoolRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder natPoolRangeStartVariable(String natPoolRangeStartVariable) {
            if (natPoolRangeStartVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natPoolRangeStartVariable");
            }
            this.natPoolRangeStartVariable = natPoolRangeStartVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natType(String natType) {
            if (natType == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natType");
            }
            this.natType = natType;
            return this;
        }
        @CustomType.Setter
        public Builder natTypeVariable(String natTypeVariable) {
            if (natTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "natTypeVariable");
            }
            this.natTypeVariable = natTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder poe(Boolean poe) {
            if (poe == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "poe");
            }
            this.poe = poe;
            return this;
        }
        @CustomType.Setter
        public Builder poeVariable(String poeVariable) {
            if (poeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "poeVariable");
            }
            this.poeVariable = poeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder propagateSgt(Boolean propagateSgt) {
            if (propagateSgt == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "propagateSgt");
            }
            this.propagateSgt = propagateSgt;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthDownstream(Integer qosAdaptiveBandwidthDownstream) {
            if (qosAdaptiveBandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveBandwidthDownstream");
            }
            this.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthDownstreamVariable(String qosAdaptiveBandwidthDownstreamVariable) {
            if (qosAdaptiveBandwidthDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveBandwidthDownstreamVariable");
            }
            this.qosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthUpstream(Integer qosAdaptiveBandwidthUpstream) {
            if (qosAdaptiveBandwidthUpstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveBandwidthUpstream");
            }
            this.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthUpstreamVariable(String qosAdaptiveBandwidthUpstreamVariable) {
            if (qosAdaptiveBandwidthUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveBandwidthUpstreamVariable");
            }
            this.qosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxDownstream(Integer qosAdaptiveMaxDownstream) {
            if (qosAdaptiveMaxDownstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMaxDownstream");
            }
            this.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxDownstreamVariable(String qosAdaptiveMaxDownstreamVariable) {
            if (qosAdaptiveMaxDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMaxDownstreamVariable");
            }
            this.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxUpstream(Integer qosAdaptiveMaxUpstream) {
            if (qosAdaptiveMaxUpstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMaxUpstream");
            }
            this.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxUpstreamVariable(String qosAdaptiveMaxUpstreamVariable) {
            if (qosAdaptiveMaxUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMaxUpstreamVariable");
            }
            this.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinDownstream(Integer qosAdaptiveMinDownstream) {
            if (qosAdaptiveMinDownstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMinDownstream");
            }
            this.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinDownstreamVariable(String qosAdaptiveMinDownstreamVariable) {
            if (qosAdaptiveMinDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMinDownstreamVariable");
            }
            this.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinUpstream(Integer qosAdaptiveMinUpstream) {
            if (qosAdaptiveMinUpstream == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMinUpstream");
            }
            this.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinUpstreamVariable(String qosAdaptiveMinUpstreamVariable) {
            if (qosAdaptiveMinUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptiveMinUpstreamVariable");
            }
            this.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptivePeriod(Integer qosAdaptivePeriod) {
            if (qosAdaptivePeriod == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptivePeriod");
            }
            this.qosAdaptivePeriod = qosAdaptivePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptivePeriodVariable(String qosAdaptivePeriodVariable) {
            if (qosAdaptivePeriodVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosAdaptivePeriodVariable");
            }
            this.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosMap(String qosMap) {
            if (qosMap == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosMap");
            }
            this.qosMap = qosMap;
            return this;
        }
        @CustomType.Setter
        public Builder qosMapVariable(String qosMapVariable) {
            if (qosMapVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosMapVariable");
            }
            this.qosMapVariable = qosMapVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosMapVpn(String qosMapVpn) {
            if (qosMapVpn == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosMapVpn");
            }
            this.qosMapVpn = qosMapVpn;
            return this;
        }
        @CustomType.Setter
        public Builder qosMapVpnVariable(String qosMapVpnVariable) {
            if (qosMapVpnVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "qosMapVpnVariable");
            }
            this.qosMapVpnVariable = qosMapVpnVariable;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleName(String rewriteRuleName) {
            if (rewriteRuleName == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "rewriteRuleName");
            }
            this.rewriteRuleName = rewriteRuleName;
            return this;
        }
        @CustomType.Setter
        public Builder rewriteRuleNameVariable(String rewriteRuleNameVariable) {
            if (rewriteRuleNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "rewriteRuleNameVariable");
            }
            this.rewriteRuleNameVariable = rewriteRuleNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryRegion(String secondaryRegion) {
            if (secondaryRegion == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "secondaryRegion");
            }
            this.secondaryRegion = secondaryRegion;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryRegionVariable(String secondaryRegionVariable) {
            if (secondaryRegionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "secondaryRegionVariable");
            }
            this.secondaryRegionVariable = secondaryRegionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sgtEnforcement(Boolean sgtEnforcement) {
            if (sgtEnforcement == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "sgtEnforcement");
            }
            this.sgtEnforcement = sgtEnforcement;
            return this;
        }
        @CustomType.Setter
        public Builder sgtEnforcementSgt(Integer sgtEnforcementSgt) {
            if (sgtEnforcementSgt == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "sgtEnforcementSgt");
            }
            this.sgtEnforcementSgt = sgtEnforcementSgt;
            return this;
        }
        @CustomType.Setter
        public Builder sgtEnforcementSgtVariable(String sgtEnforcementSgtVariable) {
            if (sgtEnforcementSgtVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "sgtEnforcementSgtVariable");
            }
            this.sgtEnforcementSgtVariable = sgtEnforcementSgtVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shapingRate(Integer shapingRate) {
            if (shapingRate == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "shapingRate");
            }
            this.shapingRate = shapingRate;
            return this;
        }
        @CustomType.Setter
        public Builder shapingRateVariable(String shapingRateVariable) {
            if (shapingRateVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "shapingRateVariable");
            }
            this.shapingRateVariable = shapingRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder speedVariable(String speedVariable) {
            if (speedVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "speedVariable");
            }
            this.speedVariable = speedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticArps(List<GetCiscoVpnInterfaceFeatureTemplateStaticArp> staticArps) {
            if (staticArps == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticArps");
            }
            this.staticArps = staticArps;
            return this;
        }
        public Builder staticArps(GetCiscoVpnInterfaceFeatureTemplateStaticArp... staticArps) {
            return staticArps(List.of(staticArps));
        }
        @CustomType.Setter
        public Builder staticNat66Entries(List<GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry> staticNat66Entries) {
            if (staticNat66Entries == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticNat66Entries");
            }
            this.staticNat66Entries = staticNat66Entries;
            return this;
        }
        public Builder staticNat66Entries(GetCiscoVpnInterfaceFeatureTemplateStaticNat66Entry... staticNat66Entries) {
            return staticNat66Entries(List.of(staticNat66Entries));
        }
        @CustomType.Setter
        public Builder staticNatEntries(List<GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry> staticNatEntries) {
            if (staticNatEntries == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticNatEntries");
            }
            this.staticNatEntries = staticNatEntries;
            return this;
        }
        public Builder staticNatEntries(GetCiscoVpnInterfaceFeatureTemplateStaticNatEntry... staticNatEntries) {
            return staticNatEntries(List.of(staticNatEntries));
        }
        @CustomType.Setter
        public Builder staticPortForwardEntries(List<GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry> staticPortForwardEntries) {
            if (staticPortForwardEntries == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticPortForwardEntries");
            }
            this.staticPortForwardEntries = staticPortForwardEntries;
            return this;
        }
        public Builder staticPortForwardEntries(GetCiscoVpnInterfaceFeatureTemplateStaticPortForwardEntry... staticPortForwardEntries) {
            return staticPortForwardEntries(List.of(staticPortForwardEntries));
        }
        @CustomType.Setter
        public Builder staticSgt(Integer staticSgt) {
            if (staticSgt == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticSgt");
            }
            this.staticSgt = staticSgt;
            return this;
        }
        @CustomType.Setter
        public Builder staticSgtTrusted(Boolean staticSgtTrusted) {
            if (staticSgtTrusted == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticSgtTrusted");
            }
            this.staticSgtTrusted = staticSgtTrusted;
            return this;
        }
        @CustomType.Setter
        public Builder staticSgtVariable(String staticSgtVariable) {
            if (staticSgtVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "staticSgtVariable");
            }
            this.staticSgtVariable = staticSgtVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssAdjust(Integer tcpMssAdjust) {
            if (tcpMssAdjust == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tcpMssAdjust");
            }
            this.tcpMssAdjust = tcpMssAdjust;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssAdjustVariable(String tcpMssAdjustVariable) {
            if (tcpMssAdjustVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tcpMssAdjustVariable");
            }
            this.tcpMssAdjustVariable = tcpMssAdjustVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpTimeout(Integer tcpTimeout) {
            if (tcpTimeout == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tcpTimeout");
            }
            this.tcpTimeout = tcpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder tcpTimeoutVariable(String tcpTimeoutVariable) {
            if (tcpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tcpTimeoutVariable");
            }
            this.tcpTimeoutVariable = tcpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtension(String tlocExtension) {
            if (tlocExtension == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tlocExtension");
            }
            this.tlocExtension = tlocExtension;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            if (tlocExtensionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tlocExtensionVariable");
            }
            this.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackerVariable(String trackerVariable) {
            if (trackerVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "trackerVariable");
            }
            this.trackerVariable = trackerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackers(List<String> trackers) {
            if (trackers == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "trackers");
            }
            this.trackers = trackers;
            return this;
        }
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }
        @CustomType.Setter
        public Builder tunnelBandwidth(Integer tunnelBandwidth) {
            if (tunnelBandwidth == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelBandwidth");
            }
            this.tunnelBandwidth = tunnelBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelBandwidthVariable(String tunnelBandwidthVariable) {
            if (tunnelBandwidthVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelBandwidthVariable");
            }
            this.tunnelBandwidthVariable = tunnelBandwidthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            if (tunnelInterfaceAllowAll == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowAll");
            }
            this.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            if (tunnelInterfaceAllowAllVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowAllVariable");
            }
            this.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            if (tunnelInterfaceAllowBgp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowBgp");
            }
            this.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            if (tunnelInterfaceAllowBgpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowBgpVariable");
            }
            this.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            if (tunnelInterfaceAllowDhcp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowDhcp");
            }
            this.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            if (tunnelInterfaceAllowDhcpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowDhcpVariable");
            }
            this.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            if (tunnelInterfaceAllowDns == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowDns");
            }
            this.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            if (tunnelInterfaceAllowDnsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowDnsVariable");
            }
            this.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            if (tunnelInterfaceAllowHttps == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowHttps");
            }
            this.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            if (tunnelInterfaceAllowHttpsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowHttpsVariable");
            }
            this.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            if (tunnelInterfaceAllowIcmp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowIcmp");
            }
            this.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            if (tunnelInterfaceAllowIcmpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowIcmpVariable");
            }
            this.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            if (tunnelInterfaceAllowNetconf == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowNetconf");
            }
            this.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            if (tunnelInterfaceAllowNetconfVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowNetconfVariable");
            }
            this.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            if (tunnelInterfaceAllowNtp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowNtp");
            }
            this.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            if (tunnelInterfaceAllowNtpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowNtpVariable");
            }
            this.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            if (tunnelInterfaceAllowOspf == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowOspf");
            }
            this.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            if (tunnelInterfaceAllowOspfVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowOspfVariable");
            }
            this.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            if (tunnelInterfaceAllowSnmp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowSnmp");
            }
            this.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            if (tunnelInterfaceAllowSnmpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowSnmpVariable");
            }
            this.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            if (tunnelInterfaceAllowSsh == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowSsh");
            }
            this.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            if (tunnelInterfaceAllowSshVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowSshVariable");
            }
            this.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            if (tunnelInterfaceAllowStun == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowStun");
            }
            this.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            if (tunnelInterfaceAllowStunVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceAllowStunVariable");
            }
            this.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            if (tunnelInterfaceBindLoopbackTunnel == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceBindLoopbackTunnel");
            }
            this.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            if (tunnelInterfaceBindLoopbackTunnelVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceBindLoopbackTunnelVariable");
            }
            this.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            if (tunnelInterfaceBorder == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceBorder");
            }
            this.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            if (tunnelInterfaceBorderVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceBorderVariable");
            }
            this.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            if (tunnelInterfaceCarrier == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceCarrier");
            }
            this.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            if (tunnelInterfaceCarrierVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceCarrierVariable");
            }
            this.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            if (tunnelInterfaceClearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceClearDontFragment");
            }
            this.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            if (tunnelInterfaceClearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceClearDontFragmentVariable");
            }
            this.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            if (tunnelInterfaceColor == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceColor");
            }
            this.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorRestrict(Boolean tunnelInterfaceColorRestrict) {
            if (tunnelInterfaceColorRestrict == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceColorRestrict");
            }
            this.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorRestrictVariable(String tunnelInterfaceColorRestrictVariable) {
            if (tunnelInterfaceColorRestrictVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceColorRestrictVariable");
            }
            this.tunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            if (tunnelInterfaceColorVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceColorVariable");
            }
            this.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceControlConnections(Boolean tunnelInterfaceControlConnections) {
            if (tunnelInterfaceControlConnections == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceControlConnections");
            }
            this.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceControlConnectionsVariable(String tunnelInterfaceControlConnectionsVariable) {
            if (tunnelInterfaceControlConnectionsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceControlConnectionsVariable");
            }
            this.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceEncapsulations(List<GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations) {
            if (tunnelInterfaceEncapsulations == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceEncapsulations");
            }
            this.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }
        public Builder tunnelInterfaceEncapsulations(GetCiscoVpnInterfaceFeatureTemplateTunnelInterfaceEncapsulation... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            if (tunnelInterfaceExcludeControllerGroupListVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceExcludeControllerGroupListVariable");
            }
            this.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            if (tunnelInterfaceExcludeControllerGroupLists == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceExcludeControllerGroupLists");
            }
            this.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGreTunnelDestinationIp(String tunnelInterfaceGreTunnelDestinationIp) {
            if (tunnelInterfaceGreTunnelDestinationIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceGreTunnelDestinationIp");
            }
            this.tunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGreTunnelDestinationIpVariable(String tunnelInterfaceGreTunnelDestinationIpVariable) {
            if (tunnelInterfaceGreTunnelDestinationIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceGreTunnelDestinationIpVariable");
            }
            this.tunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroups(List<Integer> tunnelInterfaceGroups) {
            if (tunnelInterfaceGroups == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceGroups");
            }
            this.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }
        public Builder tunnelInterfaceGroups(Integer... tunnelInterfaceGroups) {
            return tunnelInterfaceGroups(List.of(tunnelInterfaceGroups));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            if (tunnelInterfaceGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceGroupsVariable");
            }
            this.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            if (tunnelInterfaceHelloInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceHelloInterval");
            }
            this.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            if (tunnelInterfaceHelloIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceHelloIntervalVariable");
            }
            this.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            if (tunnelInterfaceHelloTolerance == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceHelloTolerance");
            }
            this.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            if (tunnelInterfaceHelloToleranceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceHelloToleranceVariable");
            }
            this.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            if (tunnelInterfaceLastResortCircuit == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceLastResortCircuit");
            }
            this.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            if (tunnelInterfaceLastResortCircuitVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceLastResortCircuitVariable");
            }
            this.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            if (tunnelInterfaceLowBandwidthLink == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceLowBandwidthLink");
            }
            this.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            if (tunnelInterfaceLowBandwidthLinkVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceLowBandwidthLinkVariable");
            }
            this.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            if (tunnelInterfaceMaxControlConnections == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceMaxControlConnections");
            }
            this.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            if (tunnelInterfaceMaxControlConnectionsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceMaxControlConnectionsVariable");
            }
            this.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            if (tunnelInterfaceNatRefreshInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceNatRefreshInterval");
            }
            this.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            if (tunnelInterfaceNatRefreshIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceNatRefreshIntervalVariable");
            }
            this.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNetworkBroadcast(Boolean tunnelInterfaceNetworkBroadcast) {
            if (tunnelInterfaceNetworkBroadcast == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceNetworkBroadcast");
            }
            this.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNetworkBroadcastVariable(String tunnelInterfaceNetworkBroadcastVariable) {
            if (tunnelInterfaceNetworkBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceNetworkBroadcastVariable");
            }
            this.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            if (tunnelInterfacePortHop == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfacePortHop");
            }
            this.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            if (tunnelInterfacePortHopVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfacePortHopVariable");
            }
            this.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePropagateSgt(Boolean tunnelInterfacePropagateSgt) {
            if (tunnelInterfacePropagateSgt == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfacePropagateSgt");
            }
            this.tunnelInterfacePropagateSgt = tunnelInterfacePropagateSgt;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePropagateSgtVariable(String tunnelInterfacePropagateSgtVariable) {
            if (tunnelInterfacePropagateSgtVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfacePropagateSgtVariable");
            }
            this.tunnelInterfacePropagateSgtVariable = tunnelInterfacePropagateSgtVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            if (tunnelInterfaceTunnelTcpMss == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceTunnelTcpMss");
            }
            this.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            if (tunnelInterfaceTunnelTcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceTunnelTcpMssVariable");
            }
            this.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            if (tunnelInterfaceVbondAsStunServer == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceVbondAsStunServer");
            }
            this.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            if (tunnelInterfaceVbondAsStunServerVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceVbondAsStunServerVariable");
            }
            this.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            if (tunnelInterfaceVmanageConnectionPreference == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceVmanageConnectionPreference");
            }
            this.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            if (tunnelInterfaceVmanageConnectionPreferenceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelInterfaceVmanageConnectionPreferenceVariable");
            }
            this.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosMode(String tunnelQosMode) {
            if (tunnelQosMode == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelQosMode");
            }
            this.tunnelQosMode = tunnelQosMode;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            if (tunnelQosModeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "tunnelQosModeVariable");
            }
            this.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder udpTimeout(Integer udpTimeout) {
            if (udpTimeout == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "udpTimeout");
            }
            this.udpTimeout = udpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder udpTimeoutVariable(String udpTimeoutVariable) {
            if (udpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "udpTimeoutVariable");
            }
            this.udpTimeoutVariable = udpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnInterfaceFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoVpnInterfaceFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoVpnInterfaceFeatureTemplateResult();
            _resultValue.accessLists = accessLists;
            _resultValue.address = address;
            _resultValue.addressVariable = addressVariable;
            _resultValue.arpTimeout = arpTimeout;
            _resultValue.arpTimeoutVariable = arpTimeoutVariable;
            _resultValue.autoBandwidthDetect = autoBandwidthDetect;
            _resultValue.autoBandwidthDetectVariable = autoBandwidthDetectVariable;
            _resultValue.autonegotiate = autonegotiate;
            _resultValue.autonegotiateVariable = autonegotiateVariable;
            _resultValue.bandwidthDownstream = bandwidthDownstream;
            _resultValue.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            _resultValue.bandwidthUpstream = bandwidthUpstream;
            _resultValue.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            _resultValue.blockNonSourceIp = blockNonSourceIp;
            _resultValue.blockNonSourceIpVariable = blockNonSourceIpVariable;
            _resultValue.coreRegion = coreRegion;
            _resultValue.coreRegionVariable = coreRegionVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.dhcp = dhcp;
            _resultValue.dhcpDistance = dhcpDistance;
            _resultValue.dhcpDistanceVariable = dhcpDistanceVariable;
            _resultValue.dhcpVariable = dhcpVariable;
            _resultValue.dhcpv6 = dhcpv6;
            _resultValue.dhcpv6Variable = dhcpv6Variable;
            _resultValue.duplex = duplex;
            _resultValue.duplexVariable = duplexVariable;
            _resultValue.enableCoreRegion = enableCoreRegion;
            _resultValue.enableSgt = enableSgt;
            _resultValue.greTunnelSourceIp = greTunnelSourceIp;
            _resultValue.greTunnelSourceIpVariable = greTunnelSourceIpVariable;
            _resultValue.greTunnelXconnect = greTunnelXconnect;
            _resultValue.greTunnelXconnectVariable = greTunnelXconnectVariable;
            _resultValue.icmpRedirectDisable = icmpRedirectDisable;
            _resultValue.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.iperfServer = iperfServer;
            _resultValue.iperfServerVariable = iperfServerVariable;
            _resultValue.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            _resultValue.ipv4DhcpHelpers = ipv4DhcpHelpers;
            _resultValue.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            _resultValue.ipv4Vrrps = ipv4Vrrps;
            _resultValue.ipv6AccessLists = ipv6AccessLists;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.ipv6DhcpHelpers = ipv6DhcpHelpers;
            _resultValue.ipv6Nat = ipv6Nat;
            _resultValue.ipv6NatVariable = ipv6NatVariable;
            _resultValue.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            _resultValue.ipv6Vrrps = ipv6Vrrps;
            _resultValue.loadInterval = loadInterval;
            _resultValue.loadIntervalVariable = loadIntervalVariable;
            _resultValue.macAddress = macAddress;
            _resultValue.macAddressVariable = macAddressVariable;
            _resultValue.mediaType = mediaType;
            _resultValue.mediaTypeVariable = mediaTypeVariable;
            _resultValue.name = name;
            _resultValue.nat = nat;
            _resultValue.nat64Interface = nat64Interface;
            _resultValue.nat66Interface = nat66Interface;
            _resultValue.natInsideSourceLoopbackInterface = natInsideSourceLoopbackInterface;
            _resultValue.natInsideSourceLoopbackInterfaceVariable = natInsideSourceLoopbackInterfaceVariable;
            _resultValue.natOverload = natOverload;
            _resultValue.natOverloadVariable = natOverloadVariable;
            _resultValue.natPoolPrefixLength = natPoolPrefixLength;
            _resultValue.natPoolPrefixLengthVariable = natPoolPrefixLengthVariable;
            _resultValue.natPoolRangeEnd = natPoolRangeEnd;
            _resultValue.natPoolRangeEndVariable = natPoolRangeEndVariable;
            _resultValue.natPoolRangeStart = natPoolRangeStart;
            _resultValue.natPoolRangeStartVariable = natPoolRangeStartVariable;
            _resultValue.natType = natType;
            _resultValue.natTypeVariable = natTypeVariable;
            _resultValue.poe = poe;
            _resultValue.poeVariable = poeVariable;
            _resultValue.propagateSgt = propagateSgt;
            _resultValue.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            _resultValue.qosAdaptiveBandwidthDownstreamVariable = qosAdaptiveBandwidthDownstreamVariable;
            _resultValue.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            _resultValue.qosAdaptiveBandwidthUpstreamVariable = qosAdaptiveBandwidthUpstreamVariable;
            _resultValue.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            _resultValue.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            _resultValue.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            _resultValue.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            _resultValue.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            _resultValue.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            _resultValue.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            _resultValue.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            _resultValue.qosAdaptivePeriod = qosAdaptivePeriod;
            _resultValue.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            _resultValue.qosMap = qosMap;
            _resultValue.qosMapVariable = qosMapVariable;
            _resultValue.qosMapVpn = qosMapVpn;
            _resultValue.qosMapVpnVariable = qosMapVpnVariable;
            _resultValue.rewriteRuleName = rewriteRuleName;
            _resultValue.rewriteRuleNameVariable = rewriteRuleNameVariable;
            _resultValue.secondaryRegion = secondaryRegion;
            _resultValue.secondaryRegionVariable = secondaryRegionVariable;
            _resultValue.sgtEnforcement = sgtEnforcement;
            _resultValue.sgtEnforcementSgt = sgtEnforcementSgt;
            _resultValue.sgtEnforcementSgtVariable = sgtEnforcementSgtVariable;
            _resultValue.shapingRate = shapingRate;
            _resultValue.shapingRateVariable = shapingRateVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.speed = speed;
            _resultValue.speedVariable = speedVariable;
            _resultValue.staticArps = staticArps;
            _resultValue.staticNat66Entries = staticNat66Entries;
            _resultValue.staticNatEntries = staticNatEntries;
            _resultValue.staticPortForwardEntries = staticPortForwardEntries;
            _resultValue.staticSgt = staticSgt;
            _resultValue.staticSgtTrusted = staticSgtTrusted;
            _resultValue.staticSgtVariable = staticSgtVariable;
            _resultValue.tcpMssAdjust = tcpMssAdjust;
            _resultValue.tcpMssAdjustVariable = tcpMssAdjustVariable;
            _resultValue.tcpTimeout = tcpTimeout;
            _resultValue.tcpTimeoutVariable = tcpTimeoutVariable;
            _resultValue.templateType = templateType;
            _resultValue.tlocExtension = tlocExtension;
            _resultValue.tlocExtensionVariable = tlocExtensionVariable;
            _resultValue.trackerVariable = trackerVariable;
            _resultValue.trackers = trackers;
            _resultValue.tunnelBandwidth = tunnelBandwidth;
            _resultValue.tunnelBandwidthVariable = tunnelBandwidthVariable;
            _resultValue.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            _resultValue.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            _resultValue.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            _resultValue.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            _resultValue.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            _resultValue.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            _resultValue.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            _resultValue.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            _resultValue.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            _resultValue.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            _resultValue.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            _resultValue.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            _resultValue.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            _resultValue.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            _resultValue.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            _resultValue.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            _resultValue.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            _resultValue.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            _resultValue.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            _resultValue.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            _resultValue.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            _resultValue.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            _resultValue.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            _resultValue.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            _resultValue.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            _resultValue.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            _resultValue.tunnelInterfaceBorder = tunnelInterfaceBorder;
            _resultValue.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            _resultValue.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            _resultValue.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            _resultValue.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            _resultValue.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            _resultValue.tunnelInterfaceColor = tunnelInterfaceColor;
            _resultValue.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            _resultValue.tunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            _resultValue.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            _resultValue.tunnelInterfaceControlConnections = tunnelInterfaceControlConnections;
            _resultValue.tunnelInterfaceControlConnectionsVariable = tunnelInterfaceControlConnectionsVariable;
            _resultValue.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            _resultValue.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            _resultValue.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            _resultValue.tunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            _resultValue.tunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            _resultValue.tunnelInterfaceGroups = tunnelInterfaceGroups;
            _resultValue.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            _resultValue.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            _resultValue.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            _resultValue.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            _resultValue.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            _resultValue.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            _resultValue.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            _resultValue.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            _resultValue.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            _resultValue.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            _resultValue.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            _resultValue.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            _resultValue.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            _resultValue.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            _resultValue.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            _resultValue.tunnelInterfacePortHop = tunnelInterfacePortHop;
            _resultValue.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            _resultValue.tunnelInterfacePropagateSgt = tunnelInterfacePropagateSgt;
            _resultValue.tunnelInterfacePropagateSgtVariable = tunnelInterfacePropagateSgtVariable;
            _resultValue.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            _resultValue.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            _resultValue.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            _resultValue.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            _resultValue.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            _resultValue.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            _resultValue.tunnelQosMode = tunnelQosMode;
            _resultValue.tunnelQosModeVariable = tunnelQosModeVariable;
            _resultValue.udpTimeout = udpTimeout;
            _resultValue.udpTimeoutVariable = udpTimeoutVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
