// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs Empty = new ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs();

    /**
     * policy id for selected match entry
     * 
     */
    @Import(name="policyId")
    private @Nullable Output<String> policyId;

    /**
     * @return policy id for selected match entry
     * 
     */
    public Optional<Output<String>> policyId() {
        return Optional.ofNullable(this.policyId);
    }

    /**
     * Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
     * 
     */
    @Import(name="protocolType")
    private @Nullable Output<String> protocolType;

    /**
     * @return Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
     * 
     */
    public Optional<Output<String>> protocolType() {
        return Optional.ofNullable(this.protocolType);
    }

    /**
     * Type of match entry
     *   - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of match entry
     *   - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * value for selected match entry
     * 
     */
    @Import(name="value")
    private @Nullable Output<String> value;

    /**
     * @return value for selected match entry
     * 
     */
    public Optional<Output<String>> value() {
        return Optional.ofNullable(this.value);
    }

    /**
     * variable value for selected match entry if it has variable option (sourceIp &amp; destinationIp)
     * 
     */
    @Import(name="valueVariable")
    private @Nullable Output<String> valueVariable;

    /**
     * @return variable value for selected match entry if it has variable option (sourceIp &amp; destinationIp)
     * 
     */
    public Optional<Output<String>> valueVariable() {
        return Optional.ofNullable(this.valueVariable);
    }

    private ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs() {}

    private ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs(ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs $) {
        this.policyId = $.policyId;
        this.protocolType = $.protocolType;
        this.type = $.type;
        this.value = $.value;
        this.valueVariable = $.valueVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs $;

        public Builder() {
            $ = new ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs();
        }

        public Builder(ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs defaults) {
            $ = new ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param policyId policy id for selected match entry
         * 
         * @return builder
         * 
         */
        public Builder policyId(@Nullable Output<String> policyId) {
            $.policyId = policyId;
            return this;
        }

        /**
         * @param policyId policy id for selected match entry
         * 
         * @return builder
         * 
         */
        public Builder policyId(String policyId) {
            return policyId(Output.of(policyId));
        }

        /**
         * @param protocolType Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(@Nullable Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType Should be included with additionally entries for `destinationPort` and `protocol` whenever the type `protocolName` is used.
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param type Type of match entry
         *   - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of match entry
         *   - Choices: `sourceFqdnList`, `sourceDataPrefixList`, `sourceGeoLocationList`, `sourcePortList`, `destinationFqdnList`, `destinationDataPrefixList`, `destinationGeoLocationList`, `destinationPortList`, `appList`, `protocolNameList`, `sourceIp`, `sourcePort`, `sourceFqdn`, `destinationIp`, `destinationFqdn`, `destinationPort`, `sourceGeoLocation`, `destinationGeoLocation`, `protocolName`, `protocol`, `app`, `ruleSetList`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param value value for selected match entry
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<String> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value value for selected match entry
         * 
         * @return builder
         * 
         */
        public Builder value(String value) {
            return value(Output.of(value));
        }

        /**
         * @param valueVariable variable value for selected match entry if it has variable option (sourceIp &amp; destinationIp)
         * 
         * @return builder
         * 
         */
        public Builder valueVariable(@Nullable Output<String> valueVariable) {
            $.valueVariable = valueVariable;
            return this;
        }

        /**
         * @param valueVariable variable value for selected match entry if it has variable option (sourceIp &amp; destinationIp)
         * 
         * @return builder
         * 
         */
        public Builder valueVariable(String valueVariable) {
            return valueVariable(Output.of(valueVariable));
        }

        public ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ZoneBasedFirewallPolicyDefinitionRuleMatchEntryArgs", "type");
            }
            return $;
        }
    }

}
