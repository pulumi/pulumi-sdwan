// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs Empty = new VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs();

    /**
     * Interface bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return Interface bandwidth capacity, in kbps
     *   - Range: `1`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="bandwidthVariable")
    private @Nullable Output<String> bandwidthVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> bandwidthVariable() {
        return Optional.ofNullable(this.bandwidthVariable);
    }

    /**
     * Set preference for interface Clock speed
     *   - Range: `1200`-`8000000`
     * 
     */
    @Import(name="clockRate")
    private @Nullable Output<Integer> clockRate;

    /**
     * @return Set preference for interface Clock speed
     *   - Range: `1200`-`8000000`
     * 
     */
    public Optional<Output<Integer>> clockRate() {
        return Optional.ofNullable(this.clockRate);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clockRateVariable")
    private @Nullable Output<String> clockRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clockRateVariable() {
        return Optional.ofNullable(this.clockRateVariable);
    }

    /**
     * Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`
     * 
     */
    @Import(name="encapsulationSerial")
    private @Nullable Output<String> encapsulationSerial;

    /**
     * @return Configure Encapsulation for interface
     *   - Choices: `hdlc`, `ppp`
     * 
     */
    public Optional<Output<String>> encapsulationSerial() {
        return Optional.ofNullable(this.encapsulationSerial);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="encapsulationSerialVariable")
    private @Nullable Output<String> encapsulationSerialVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> encapsulationSerialVariable() {
        return Optional.ofNullable(this.encapsulationSerialVariable);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * Interface Name
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return Interface Name
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceNameVariable")
    private @Nullable Output<String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceNameVariable() {
        return Optional.ofNullable(this.interfaceNameVariable);
    }

    /**
     * NIM Serial interface type
     *   - Choices: `2t`, `4t`, `2T`, `4T`
     * 
     */
    @Import(name="nimSerialInterfaceType")
    private @Nullable Output<String> nimSerialInterfaceType;

    /**
     * @return NIM Serial interface type
     *   - Choices: `2t`, `4t`, `2T`, `4T`
     * 
     */
    public Optional<Output<String>> nimSerialInterfaceType() {
        return Optional.ofNullable(this.nimSerialInterfaceType);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="nimSerialInterfaceTypeVariable")
    private @Nullable Output<String> nimSerialInterfaceTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> nimSerialInterfaceTypeVariable() {
        return Optional.ofNullable(this.nimSerialInterfaceTypeVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    private VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs() {}

    private VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs(VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs $) {
        this.bandwidth = $.bandwidth;
        this.bandwidthVariable = $.bandwidthVariable;
        this.clockRate = $.clockRate;
        this.clockRateVariable = $.clockRateVariable;
        this.encapsulationSerial = $.encapsulationSerial;
        this.encapsulationSerialVariable = $.encapsulationSerialVariable;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.interfaceName = $.interfaceName;
        this.interfaceNameVariable = $.interfaceNameVariable;
        this.nimSerialInterfaceType = $.nimSerialInterfaceType;
        this.nimSerialInterfaceTypeVariable = $.nimSerialInterfaceTypeVariable;
        this.optional = $.optional;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs $;

        public Builder() {
            $ = new VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs();
        }

        public Builder(VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs defaults) {
            $ = new VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth Interface bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth Interface bandwidth capacity, in kbps
         *   - Range: `1`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param bandwidthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthVariable(@Nullable Output<String> bandwidthVariable) {
            $.bandwidthVariable = bandwidthVariable;
            return this;
        }

        /**
         * @param bandwidthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder bandwidthVariable(String bandwidthVariable) {
            return bandwidthVariable(Output.of(bandwidthVariable));
        }

        /**
         * @param clockRate Set preference for interface Clock speed
         *   - Range: `1200`-`8000000`
         * 
         * @return builder
         * 
         */
        public Builder clockRate(@Nullable Output<Integer> clockRate) {
            $.clockRate = clockRate;
            return this;
        }

        /**
         * @param clockRate Set preference for interface Clock speed
         *   - Range: `1200`-`8000000`
         * 
         * @return builder
         * 
         */
        public Builder clockRate(Integer clockRate) {
            return clockRate(Output.of(clockRate));
        }

        /**
         * @param clockRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clockRateVariable(@Nullable Output<String> clockRateVariable) {
            $.clockRateVariable = clockRateVariable;
            return this;
        }

        /**
         * @param clockRateVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clockRateVariable(String clockRateVariable) {
            return clockRateVariable(Output.of(clockRateVariable));
        }

        /**
         * @param encapsulationSerial Configure Encapsulation for interface
         *   - Choices: `hdlc`, `ppp`
         * 
         * @return builder
         * 
         */
        public Builder encapsulationSerial(@Nullable Output<String> encapsulationSerial) {
            $.encapsulationSerial = encapsulationSerial;
            return this;
        }

        /**
         * @param encapsulationSerial Configure Encapsulation for interface
         *   - Choices: `hdlc`, `ppp`
         * 
         * @return builder
         * 
         */
        public Builder encapsulationSerial(String encapsulationSerial) {
            return encapsulationSerial(Output.of(encapsulationSerial));
        }

        /**
         * @param encapsulationSerialVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapsulationSerialVariable(@Nullable Output<String> encapsulationSerialVariable) {
            $.encapsulationSerialVariable = encapsulationSerialVariable;
            return this;
        }

        /**
         * @param encapsulationSerialVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder encapsulationSerialVariable(String encapsulationSerialVariable) {
            return encapsulationSerialVariable(Output.of(encapsulationSerialVariable));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param interfaceName Interface Name
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName Interface Name
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(@Nullable Output<String> interfaceNameVariable) {
            $.interfaceNameVariable = interfaceNameVariable;
            return this;
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            return interfaceNameVariable(Output.of(interfaceNameVariable));
        }

        /**
         * @param nimSerialInterfaceType NIM Serial interface type
         *   - Choices: `2t`, `4t`, `2T`, `4T`
         * 
         * @return builder
         * 
         */
        public Builder nimSerialInterfaceType(@Nullable Output<String> nimSerialInterfaceType) {
            $.nimSerialInterfaceType = nimSerialInterfaceType;
            return this;
        }

        /**
         * @param nimSerialInterfaceType NIM Serial interface type
         *   - Choices: `2t`, `4t`, `2T`, `4T`
         * 
         * @return builder
         * 
         */
        public Builder nimSerialInterfaceType(String nimSerialInterfaceType) {
            return nimSerialInterfaceType(Output.of(nimSerialInterfaceType));
        }

        /**
         * @param nimSerialInterfaceTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nimSerialInterfaceTypeVariable(@Nullable Output<String> nimSerialInterfaceTypeVariable) {
            $.nimSerialInterfaceTypeVariable = nimSerialInterfaceTypeVariable;
            return this;
        }

        /**
         * @param nimSerialInterfaceTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nimSerialInterfaceTypeVariable(String nimSerialInterfaceTypeVariable) {
            return nimSerialInterfaceTypeVariable(Output.of(nimSerialInterfaceTypeVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        public VpnInterfaceMultilinkFeatureTemplateNimInterfaceListArgs build() {
            return $;
        }
    }

}
