// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TrafficDataPolicyDefinitionSequenceMatchEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TrafficDataPolicyDefinitionSequenceMatchEntryArgs Empty = new TrafficDataPolicyDefinitionSequenceMatchEntryArgs();

    /**
     * Application list ID, Attribute conditional on `type` being equal to `appList`
     * 
     */
    @Import(name="applicationListId")
    private @Nullable Output<String> applicationListId;

    /**
     * @return Application list ID, Attribute conditional on `type` being equal to `appList`
     * 
     */
    public Optional<Output<String>> applicationListId() {
        return Optional.ofNullable(this.applicationListId);
    }

    /**
     * Application list version
     * 
     */
    @Import(name="applicationListVersion")
    private @Nullable Output<Integer> applicationListVersion;

    /**
     * @return Application list version
     * 
     */
    public Optional<Output<Integer>> applicationListVersion() {
        return Optional.ofNullable(this.applicationListVersion);
    }

    /**
     * Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     * 
     */
    @Import(name="destinationDataPrefixListId")
    private @Nullable Output<String> destinationDataPrefixListId;

    /**
     * @return Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
     * 
     */
    public Optional<Output<String>> destinationDataPrefixListId() {
        return Optional.ofNullable(this.destinationDataPrefixListId);
    }

    /**
     * Destination Data Prefix list version
     * 
     */
    @Import(name="destinationDataPrefixListVersion")
    private @Nullable Output<Integer> destinationDataPrefixListVersion;

    /**
     * @return Destination Data Prefix list version
     * 
     */
    public Optional<Output<Integer>> destinationDataPrefixListVersion() {
        return Optional.ofNullable(this.destinationDataPrefixListVersion);
    }

    /**
     * Destination IP, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    @Import(name="destinationIp")
    private @Nullable Output<String> destinationIp;

    /**
     * @return Destination IP, Attribute conditional on `type` being equal to `destinationIp`
     * 
     */
    public Optional<Output<String>> destinationIp() {
        return Optional.ofNullable(this.destinationIp);
    }

    /**
     * Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
     * 
     */
    @Import(name="destinationPort")
    private @Nullable Output<String> destinationPort;

    /**
     * @return Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
     * 
     */
    public Optional<Output<String>> destinationPort() {
        return Optional.ofNullable(this.destinationPort);
    }

    /**
     * Destination region, Attribute conditional on `type` being equal to `destinationRegion`
     *   - Choices: `primary-region`, `secondary-region`, `other-region`
     * 
     */
    @Import(name="destinationRegion")
    private @Nullable Output<String> destinationRegion;

    /**
     * @return Destination region, Attribute conditional on `type` being equal to `destinationRegion`
     *   - Choices: `primary-region`, `secondary-region`, `other-region`
     * 
     */
    public Optional<Output<String>> destinationRegion() {
        return Optional.ofNullable(this.destinationRegion);
    }

    /**
     * DNS request or response, Attribute conditional on `type` being equal to `dns`
     *   - Choices: `request`, `response`
     * 
     */
    @Import(name="dns")
    private @Nullable Output<String> dns;

    /**
     * @return DNS request or response, Attribute conditional on `type` being equal to `dns`
     *   - Choices: `request`, `response`
     * 
     */
    public Optional<Output<String>> dns() {
        return Optional.ofNullable(this.dns);
    }

    /**
     * DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
     * 
     */
    @Import(name="dnsApplicationListId")
    private @Nullable Output<String> dnsApplicationListId;

    /**
     * @return DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
     * 
     */
    public Optional<Output<String>> dnsApplicationListId() {
        return Optional.ofNullable(this.dnsApplicationListId);
    }

    /**
     * DNS Application list version
     * 
     */
    @Import(name="dnsApplicationListVersion")
    private @Nullable Output<Integer> dnsApplicationListVersion;

    /**
     * @return DNS Application list version
     * 
     */
    public Optional<Output<Integer>> dnsApplicationListVersion() {
        return Optional.ofNullable(this.dnsApplicationListVersion);
    }

    /**
     * DSCP value, Attribute conditional on `type` being equal to `dscp`
     * 
     */
    @Import(name="dscp")
    private @Nullable Output<String> dscp;

    /**
     * @return DSCP value, Attribute conditional on `type` being equal to `dscp`
     * 
     */
    public Optional<Output<String>> dscp() {
        return Optional.ofNullable(this.dscp);
    }

    /**
     * ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     * 
     */
    @Import(name="icmpMessage")
    private @Nullable Output<String> icmpMessage;

    /**
     * @return ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
     * 
     */
    public Optional<Output<String>> icmpMessage() {
        return Optional.ofNullable(this.icmpMessage);
    }

    /**
     * Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="packetLength")
    private @Nullable Output<Integer> packetLength;

    /**
     * @return Packet length, Attribute conditional on `type` being equal to `packetLength`
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> packetLength() {
        return Optional.ofNullable(this.packetLength);
    }

    /**
     * PLP, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `low`, `high`
     * 
     */
    @Import(name="plp")
    private @Nullable Output<String> plp;

    /**
     * @return PLP, Attribute conditional on `type` being equal to `plp`
     *   - Choices: `low`, `high`
     * 
     */
    public Optional<Output<String>> plp() {
        return Optional.ofNullable(this.plp);
    }

    /**
     * IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     * 
     */
    @Import(name="sourceDataPrefixListId")
    private @Nullable Output<String> sourceDataPrefixListId;

    /**
     * @return Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
     * 
     */
    public Optional<Output<String>> sourceDataPrefixListId() {
        return Optional.ofNullable(this.sourceDataPrefixListId);
    }

    /**
     * Source Data Prefix list version
     * 
     */
    @Import(name="sourceDataPrefixListVersion")
    private @Nullable Output<Integer> sourceDataPrefixListVersion;

    /**
     * @return Source Data Prefix list version
     * 
     */
    public Optional<Output<Integer>> sourceDataPrefixListVersion() {
        return Optional.ofNullable(this.sourceDataPrefixListVersion);
    }

    /**
     * Source IP, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    @Import(name="sourceIp")
    private @Nullable Output<String> sourceIp;

    /**
     * @return Source IP, Attribute conditional on `type` being equal to `sourceIp`
     * 
     */
    public Optional<Output<String>> sourceIp() {
        return Optional.ofNullable(this.sourceIp);
    }

    /**
     * Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    @Import(name="sourcePort")
    private @Nullable Output<String> sourcePort;

    /**
     * @return Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
     * 
     */
    public Optional<Output<String>> sourcePort() {
        return Optional.ofNullable(this.sourcePort);
    }

    /**
     * TCP flags, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     * 
     */
    @Import(name="tcp")
    private @Nullable Output<String> tcp;

    /**
     * @return TCP flags, Attribute conditional on `type` being equal to `tcp`
     *   - Choices: `syn`
     * 
     */
    public Optional<Output<String>> tcp() {
        return Optional.ofNullable(this.tcp);
    }

    /**
     * Traffic to, Attribute conditional on `type` being equal to `trafficTo`
     *   - Choices: `access`, `core`, `service`
     * 
     */
    @Import(name="trafficTo")
    private @Nullable Output<String> trafficTo;

    /**
     * @return Traffic to, Attribute conditional on `type` being equal to `trafficTo`
     *   - Choices: `access`, `core`, `service`
     * 
     */
    public Optional<Output<String>> trafficTo() {
        return Optional.ofNullable(this.trafficTo);
    }

    /**
     * Type of match entry
     *   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of match entry
     *   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private TrafficDataPolicyDefinitionSequenceMatchEntryArgs() {}

    private TrafficDataPolicyDefinitionSequenceMatchEntryArgs(TrafficDataPolicyDefinitionSequenceMatchEntryArgs $) {
        this.applicationListId = $.applicationListId;
        this.applicationListVersion = $.applicationListVersion;
        this.destinationDataPrefixListId = $.destinationDataPrefixListId;
        this.destinationDataPrefixListVersion = $.destinationDataPrefixListVersion;
        this.destinationIp = $.destinationIp;
        this.destinationPort = $.destinationPort;
        this.destinationRegion = $.destinationRegion;
        this.dns = $.dns;
        this.dnsApplicationListId = $.dnsApplicationListId;
        this.dnsApplicationListVersion = $.dnsApplicationListVersion;
        this.dscp = $.dscp;
        this.icmpMessage = $.icmpMessage;
        this.packetLength = $.packetLength;
        this.plp = $.plp;
        this.protocol = $.protocol;
        this.sourceDataPrefixListId = $.sourceDataPrefixListId;
        this.sourceDataPrefixListVersion = $.sourceDataPrefixListVersion;
        this.sourceIp = $.sourceIp;
        this.sourcePort = $.sourcePort;
        this.tcp = $.tcp;
        this.trafficTo = $.trafficTo;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TrafficDataPolicyDefinitionSequenceMatchEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TrafficDataPolicyDefinitionSequenceMatchEntryArgs $;

        public Builder() {
            $ = new TrafficDataPolicyDefinitionSequenceMatchEntryArgs();
        }

        public Builder(TrafficDataPolicyDefinitionSequenceMatchEntryArgs defaults) {
            $ = new TrafficDataPolicyDefinitionSequenceMatchEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param applicationListId Application list ID, Attribute conditional on `type` being equal to `appList`
         * 
         * @return builder
         * 
         */
        public Builder applicationListId(@Nullable Output<String> applicationListId) {
            $.applicationListId = applicationListId;
            return this;
        }

        /**
         * @param applicationListId Application list ID, Attribute conditional on `type` being equal to `appList`
         * 
         * @return builder
         * 
         */
        public Builder applicationListId(String applicationListId) {
            return applicationListId(Output.of(applicationListId));
        }

        /**
         * @param applicationListVersion Application list version
         * 
         * @return builder
         * 
         */
        public Builder applicationListVersion(@Nullable Output<Integer> applicationListVersion) {
            $.applicationListVersion = applicationListVersion;
            return this;
        }

        /**
         * @param applicationListVersion Application list version
         * 
         * @return builder
         * 
         */
        public Builder applicationListVersion(Integer applicationListVersion) {
            return applicationListVersion(Output.of(applicationListVersion));
        }

        /**
         * @param destinationDataPrefixListId Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataPrefixListId(@Nullable Output<String> destinationDataPrefixListId) {
            $.destinationDataPrefixListId = destinationDataPrefixListId;
            return this;
        }

        /**
         * @param destinationDataPrefixListId Destination Data Prefix list ID, Attribute conditional on `type` being equal to `destinationDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder destinationDataPrefixListId(String destinationDataPrefixListId) {
            return destinationDataPrefixListId(Output.of(destinationDataPrefixListId));
        }

        /**
         * @param destinationDataPrefixListVersion Destination Data Prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataPrefixListVersion(@Nullable Output<Integer> destinationDataPrefixListVersion) {
            $.destinationDataPrefixListVersion = destinationDataPrefixListVersion;
            return this;
        }

        /**
         * @param destinationDataPrefixListVersion Destination Data Prefix list version
         * 
         * @return builder
         * 
         */
        public Builder destinationDataPrefixListVersion(Integer destinationDataPrefixListVersion) {
            return destinationDataPrefixListVersion(Output.of(destinationDataPrefixListVersion));
        }

        /**
         * @param destinationIp Destination IP, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(@Nullable Output<String> destinationIp) {
            $.destinationIp = destinationIp;
            return this;
        }

        /**
         * @param destinationIp Destination IP, Attribute conditional on `type` being equal to `destinationIp`
         * 
         * @return builder
         * 
         */
        public Builder destinationIp(String destinationIp) {
            return destinationIp(Output.of(destinationIp));
        }

        /**
         * @param destinationPort Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(@Nullable Output<String> destinationPort) {
            $.destinationPort = destinationPort;
            return this;
        }

        /**
         * @param destinationPort Destination port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `destinationPort`
         * 
         * @return builder
         * 
         */
        public Builder destinationPort(String destinationPort) {
            return destinationPort(Output.of(destinationPort));
        }

        /**
         * @param destinationRegion Destination region, Attribute conditional on `type` being equal to `destinationRegion`
         *   - Choices: `primary-region`, `secondary-region`, `other-region`
         * 
         * @return builder
         * 
         */
        public Builder destinationRegion(@Nullable Output<String> destinationRegion) {
            $.destinationRegion = destinationRegion;
            return this;
        }

        /**
         * @param destinationRegion Destination region, Attribute conditional on `type` being equal to `destinationRegion`
         *   - Choices: `primary-region`, `secondary-region`, `other-region`
         * 
         * @return builder
         * 
         */
        public Builder destinationRegion(String destinationRegion) {
            return destinationRegion(Output.of(destinationRegion));
        }

        /**
         * @param dns DNS request or response, Attribute conditional on `type` being equal to `dns`
         *   - Choices: `request`, `response`
         * 
         * @return builder
         * 
         */
        public Builder dns(@Nullable Output<String> dns) {
            $.dns = dns;
            return this;
        }

        /**
         * @param dns DNS request or response, Attribute conditional on `type` being equal to `dns`
         *   - Choices: `request`, `response`
         * 
         * @return builder
         * 
         */
        public Builder dns(String dns) {
            return dns(Output.of(dns));
        }

        /**
         * @param dnsApplicationListId DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
         * 
         * @return builder
         * 
         */
        public Builder dnsApplicationListId(@Nullable Output<String> dnsApplicationListId) {
            $.dnsApplicationListId = dnsApplicationListId;
            return this;
        }

        /**
         * @param dnsApplicationListId DNS Application list ID, Attribute conditional on `type` being equal to `dnsAppList`
         * 
         * @return builder
         * 
         */
        public Builder dnsApplicationListId(String dnsApplicationListId) {
            return dnsApplicationListId(Output.of(dnsApplicationListId));
        }

        /**
         * @param dnsApplicationListVersion DNS Application list version
         * 
         * @return builder
         * 
         */
        public Builder dnsApplicationListVersion(@Nullable Output<Integer> dnsApplicationListVersion) {
            $.dnsApplicationListVersion = dnsApplicationListVersion;
            return this;
        }

        /**
         * @param dnsApplicationListVersion DNS Application list version
         * 
         * @return builder
         * 
         */
        public Builder dnsApplicationListVersion(Integer dnsApplicationListVersion) {
            return dnsApplicationListVersion(Output.of(dnsApplicationListVersion));
        }

        /**
         * @param dscp DSCP value, Attribute conditional on `type` being equal to `dscp`
         * 
         * @return builder
         * 
         */
        public Builder dscp(@Nullable Output<String> dscp) {
            $.dscp = dscp;
            return this;
        }

        /**
         * @param dscp DSCP value, Attribute conditional on `type` being equal to `dscp`
         * 
         * @return builder
         * 
         */
        public Builder dscp(String dscp) {
            return dscp(Output.of(dscp));
        }

        /**
         * @param icmpMessage ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder icmpMessage(@Nullable Output<String> icmpMessage) {
            $.icmpMessage = icmpMessage;
            return this;
        }

        /**
         * @param icmpMessage ICMP Message, Attribute conditional on `type` being equal to `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder icmpMessage(String icmpMessage) {
            return icmpMessage(Output.of(icmpMessage));
        }

        /**
         * @param packetLength Packet length, Attribute conditional on `type` being equal to `packetLength`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder packetLength(@Nullable Output<Integer> packetLength) {
            $.packetLength = packetLength;
            return this;
        }

        /**
         * @param packetLength Packet length, Attribute conditional on `type` being equal to `packetLength`
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder packetLength(Integer packetLength) {
            return packetLength(Output.of(packetLength));
        }

        /**
         * @param plp PLP, Attribute conditional on `type` being equal to `plp`
         *   - Choices: `low`, `high`
         * 
         * @return builder
         * 
         */
        public Builder plp(@Nullable Output<String> plp) {
            $.plp = plp;
            return this;
        }

        /**
         * @param plp PLP, Attribute conditional on `type` being equal to `plp`
         *   - Choices: `low`, `high`
         * 
         * @return builder
         * 
         */
        public Builder plp(String plp) {
            return plp(Output.of(plp));
        }

        /**
         * @param protocol IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol IP Protocol, 0-255 (Single value or multiple values separated by spaces), Attribute conditional on `type` being equal to `protocol`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sourceDataPrefixListId Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataPrefixListId(@Nullable Output<String> sourceDataPrefixListId) {
            $.sourceDataPrefixListId = sourceDataPrefixListId;
            return this;
        }

        /**
         * @param sourceDataPrefixListId Source Data Prefix list ID, Attribute conditional on `type` being equal to `sourceDataPrefixList`
         * 
         * @return builder
         * 
         */
        public Builder sourceDataPrefixListId(String sourceDataPrefixListId) {
            return sourceDataPrefixListId(Output.of(sourceDataPrefixListId));
        }

        /**
         * @param sourceDataPrefixListVersion Source Data Prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataPrefixListVersion(@Nullable Output<Integer> sourceDataPrefixListVersion) {
            $.sourceDataPrefixListVersion = sourceDataPrefixListVersion;
            return this;
        }

        /**
         * @param sourceDataPrefixListVersion Source Data Prefix list version
         * 
         * @return builder
         * 
         */
        public Builder sourceDataPrefixListVersion(Integer sourceDataPrefixListVersion) {
            return sourceDataPrefixListVersion(Output.of(sourceDataPrefixListVersion));
        }

        /**
         * @param sourceIp Source IP, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(@Nullable Output<String> sourceIp) {
            $.sourceIp = sourceIp;
            return this;
        }

        /**
         * @param sourceIp Source IP, Attribute conditional on `type` being equal to `sourceIp`
         * 
         * @return builder
         * 
         */
        public Builder sourceIp(String sourceIp) {
            return sourceIp(Output.of(sourceIp));
        }

        /**
         * @param sourcePort Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(@Nullable Output<String> sourcePort) {
            $.sourcePort = sourcePort;
            return this;
        }

        /**
         * @param sourcePort Source port, 0-65535 (Single value, range or multiple values separated by spaces), Attribute conditional on `type` being equal to `sourcePort`
         * 
         * @return builder
         * 
         */
        public Builder sourcePort(String sourcePort) {
            return sourcePort(Output.of(sourcePort));
        }

        /**
         * @param tcp TCP flags, Attribute conditional on `type` being equal to `tcp`
         *   - Choices: `syn`
         * 
         * @return builder
         * 
         */
        public Builder tcp(@Nullable Output<String> tcp) {
            $.tcp = tcp;
            return this;
        }

        /**
         * @param tcp TCP flags, Attribute conditional on `type` being equal to `tcp`
         *   - Choices: `syn`
         * 
         * @return builder
         * 
         */
        public Builder tcp(String tcp) {
            return tcp(Output.of(tcp));
        }

        /**
         * @param trafficTo Traffic to, Attribute conditional on `type` being equal to `trafficTo`
         *   - Choices: `access`, `core`, `service`
         * 
         * @return builder
         * 
         */
        public Builder trafficTo(@Nullable Output<String> trafficTo) {
            $.trafficTo = trafficTo;
            return this;
        }

        /**
         * @param trafficTo Traffic to, Attribute conditional on `type` being equal to `trafficTo`
         *   - Choices: `access`, `core`, `service`
         * 
         * @return builder
         * 
         */
        public Builder trafficTo(String trafficTo) {
            return trafficTo(Output.of(trafficTo));
        }

        /**
         * @param type Type of match entry
         *   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of match entry
         *   - Choices: `appList`, `dnsAppList`, `dns`, `dscp`, `packetLength`, `plp`, `protocol`, `sourceDataPrefixList`, `sourceIp`, `sourcePort`, `destinationDataPrefixList`, `destinationIp`, `destinationRegion`, `destinationPort`, `tcp`, `trafficTo`, `icmpMessage`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public TrafficDataPolicyDefinitionSequenceMatchEntryArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("TrafficDataPolicyDefinitionSequenceMatchEntryArgs", "type");
            }
            return $;
        }
    }

}
