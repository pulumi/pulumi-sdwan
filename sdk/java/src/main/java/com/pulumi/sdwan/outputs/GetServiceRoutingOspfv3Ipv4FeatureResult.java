// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetServiceRoutingOspfv3Ipv4FeatureArea;
import com.pulumi.sdwan.outputs.GetServiceRoutingOspfv3Ipv4FeatureRedistribute;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServiceRoutingOspfv3Ipv4FeatureResult {
    /**
     * @return Configure OSPFv3 IPv4 area
     * 
     */
    private List<GetServiceRoutingOspfv3Ipv4FeatureArea> areas;
    /**
     * @return Distribute default external route into OSPF disabled
     * 
     */
    private Boolean defaultInformationOriginate;
    /**
     * @return Always advertise default route
     * 
     */
    private Boolean defaultInformationOriginateAlways;
    /**
     * @return Variable name
     * 
     */
    private String defaultInformationOriginateAlwaysVariable;
    /**
     * @return Set metric used to generate default route \n\n
     * 
     */
    private Integer defaultInformationOriginateMetric;
    /**
     * @return Set default route metric type
     * 
     */
    private String defaultInformationOriginateMetricType;
    /**
     * @return Variable name
     * 
     */
    private String defaultInformationOriginateMetricTypeVariable;
    /**
     * @return Variable name
     * 
     */
    private String defaultInformationOriginateMetricVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Distance
     * 
     */
    private Integer distance;
    /**
     * @return Set distance for external routes
     * 
     */
    private Integer distanceExternal;
    /**
     * @return Variable name
     * 
     */
    private String distanceExternalVariable;
    /**
     * @return Set distance for inter-area routes
     * 
     */
    private Integer distanceInterArea;
    /**
     * @return Variable name
     * 
     */
    private String distanceInterAreaVariable;
    /**
     * @return Set distance for intra-area routes
     * 
     */
    private Integer distanceIntraArea;
    /**
     * @return Variable name
     * 
     */
    private String distanceIntraAreaVariable;
    /**
     * @return Variable name
     * 
     */
    private String distanceVariable;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return Table map filtered or not
     * 
     */
    private Boolean filter;
    /**
     * @return Variable name
     * 
     */
    private String filterVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Redistribute routes
     * 
     */
    private List<GetServiceRoutingOspfv3Ipv4FeatureRedistribute> redistributes;
    /**
     * @return Set reference bandwidth method to assign OSPF cost
     * 
     */
    private Integer referenceBandwidth;
    /**
     * @return Variable name
     * 
     */
    private String referenceBandwidthVariable;
    /**
     * @return Calculate summary route cost based on RFC 1583
     * 
     */
    private Boolean rfc1583Compatible;
    /**
     * @return Variable name
     * 
     */
    private String rfc1583CompatibleVariable;
    private String routePolicyId;
    /**
     * @return Set OSPF router ID to override system IP address
     * 
     */
    private String routerId;
    /**
     * @return Variable name
     * 
     */
    private String routerIdVariable;
    /**
     * @return Not advertise maximum metric Router LSA policy by default
     * 
     */
    private String routerLsaAction;
    /**
     * @return Set how long to advertise maximum metric after router boot up
     * 
     */
    private Integer routerLsaOnStartupTime;
    /**
     * @return Variable name
     * 
     */
    private String routerLsaOnStartupTimeVariable;
    /**
     * @return Set delay from first change received until performing SPF calculation
     * 
     */
    private Integer spfCalculationDelay;
    /**
     * @return Variable name
     * 
     */
    private String spfCalculationDelayVariable;
    /**
     * @return Set initial hold time between consecutive SPF calculations
     * 
     */
    private Integer spfInitialHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String spfInitialHoldTimeVariable;
    /**
     * @return Set maximum hold time between consecutive SPF calculations
     * 
     */
    private Integer spfMaximumHoldTime;
    /**
     * @return Variable name
     * 
     */
    private String spfMaximumHoldTimeVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;

    private GetServiceRoutingOspfv3Ipv4FeatureResult() {}
    /**
     * @return Configure OSPFv3 IPv4 area
     * 
     */
    public List<GetServiceRoutingOspfv3Ipv4FeatureArea> areas() {
        return this.areas;
    }
    /**
     * @return Distribute default external route into OSPF disabled
     * 
     */
    public Boolean defaultInformationOriginate() {
        return this.defaultInformationOriginate;
    }
    /**
     * @return Always advertise default route
     * 
     */
    public Boolean defaultInformationOriginateAlways() {
        return this.defaultInformationOriginateAlways;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultInformationOriginateAlwaysVariable() {
        return this.defaultInformationOriginateAlwaysVariable;
    }
    /**
     * @return Set metric used to generate default route \n\n
     * 
     */
    public Integer defaultInformationOriginateMetric() {
        return this.defaultInformationOriginateMetric;
    }
    /**
     * @return Set default route metric type
     * 
     */
    public String defaultInformationOriginateMetricType() {
        return this.defaultInformationOriginateMetricType;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultInformationOriginateMetricTypeVariable() {
        return this.defaultInformationOriginateMetricTypeVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultInformationOriginateMetricVariable() {
        return this.defaultInformationOriginateMetricVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Distance
     * 
     */
    public Integer distance() {
        return this.distance;
    }
    /**
     * @return Set distance for external routes
     * 
     */
    public Integer distanceExternal() {
        return this.distanceExternal;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceExternalVariable() {
        return this.distanceExternalVariable;
    }
    /**
     * @return Set distance for inter-area routes
     * 
     */
    public Integer distanceInterArea() {
        return this.distanceInterArea;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceInterAreaVariable() {
        return this.distanceInterAreaVariable;
    }
    /**
     * @return Set distance for intra-area routes
     * 
     */
    public Integer distanceIntraArea() {
        return this.distanceIntraArea;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceIntraAreaVariable() {
        return this.distanceIntraAreaVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String distanceVariable() {
        return this.distanceVariable;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return Table map filtered or not
     * 
     */
    public Boolean filter() {
        return this.filter;
    }
    /**
     * @return Variable name
     * 
     */
    public String filterVariable() {
        return this.filterVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Redistribute routes
     * 
     */
    public List<GetServiceRoutingOspfv3Ipv4FeatureRedistribute> redistributes() {
        return this.redistributes;
    }
    /**
     * @return Set reference bandwidth method to assign OSPF cost
     * 
     */
    public Integer referenceBandwidth() {
        return this.referenceBandwidth;
    }
    /**
     * @return Variable name
     * 
     */
    public String referenceBandwidthVariable() {
        return this.referenceBandwidthVariable;
    }
    /**
     * @return Calculate summary route cost based on RFC 1583
     * 
     */
    public Boolean rfc1583Compatible() {
        return this.rfc1583Compatible;
    }
    /**
     * @return Variable name
     * 
     */
    public String rfc1583CompatibleVariable() {
        return this.rfc1583CompatibleVariable;
    }
    public String routePolicyId() {
        return this.routePolicyId;
    }
    /**
     * @return Set OSPF router ID to override system IP address
     * 
     */
    public String routerId() {
        return this.routerId;
    }
    /**
     * @return Variable name
     * 
     */
    public String routerIdVariable() {
        return this.routerIdVariable;
    }
    /**
     * @return Not advertise maximum metric Router LSA policy by default
     * 
     */
    public String routerLsaAction() {
        return this.routerLsaAction;
    }
    /**
     * @return Set how long to advertise maximum metric after router boot up
     * 
     */
    public Integer routerLsaOnStartupTime() {
        return this.routerLsaOnStartupTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String routerLsaOnStartupTimeVariable() {
        return this.routerLsaOnStartupTimeVariable;
    }
    /**
     * @return Set delay from first change received until performing SPF calculation
     * 
     */
    public Integer spfCalculationDelay() {
        return this.spfCalculationDelay;
    }
    /**
     * @return Variable name
     * 
     */
    public String spfCalculationDelayVariable() {
        return this.spfCalculationDelayVariable;
    }
    /**
     * @return Set initial hold time between consecutive SPF calculations
     * 
     */
    public Integer spfInitialHoldTime() {
        return this.spfInitialHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String spfInitialHoldTimeVariable() {
        return this.spfInitialHoldTimeVariable;
    }
    /**
     * @return Set maximum hold time between consecutive SPF calculations
     * 
     */
    public Integer spfMaximumHoldTime() {
        return this.spfMaximumHoldTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String spfMaximumHoldTimeVariable() {
        return this.spfMaximumHoldTimeVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceRoutingOspfv3Ipv4FeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetServiceRoutingOspfv3Ipv4FeatureArea> areas;
        private Boolean defaultInformationOriginate;
        private Boolean defaultInformationOriginateAlways;
        private String defaultInformationOriginateAlwaysVariable;
        private Integer defaultInformationOriginateMetric;
        private String defaultInformationOriginateMetricType;
        private String defaultInformationOriginateMetricTypeVariable;
        private String defaultInformationOriginateMetricVariable;
        private String description;
        private Integer distance;
        private Integer distanceExternal;
        private String distanceExternalVariable;
        private Integer distanceInterArea;
        private String distanceInterAreaVariable;
        private Integer distanceIntraArea;
        private String distanceIntraAreaVariable;
        private String distanceVariable;
        private String featureProfileId;
        private Boolean filter;
        private String filterVariable;
        private String id;
        private String name;
        private List<GetServiceRoutingOspfv3Ipv4FeatureRedistribute> redistributes;
        private Integer referenceBandwidth;
        private String referenceBandwidthVariable;
        private Boolean rfc1583Compatible;
        private String rfc1583CompatibleVariable;
        private String routePolicyId;
        private String routerId;
        private String routerIdVariable;
        private String routerLsaAction;
        private Integer routerLsaOnStartupTime;
        private String routerLsaOnStartupTimeVariable;
        private Integer spfCalculationDelay;
        private String spfCalculationDelayVariable;
        private Integer spfInitialHoldTime;
        private String spfInitialHoldTimeVariable;
        private Integer spfMaximumHoldTime;
        private String spfMaximumHoldTimeVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetServiceRoutingOspfv3Ipv4FeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.areas = defaults.areas;
    	      this.defaultInformationOriginate = defaults.defaultInformationOriginate;
    	      this.defaultInformationOriginateAlways = defaults.defaultInformationOriginateAlways;
    	      this.defaultInformationOriginateAlwaysVariable = defaults.defaultInformationOriginateAlwaysVariable;
    	      this.defaultInformationOriginateMetric = defaults.defaultInformationOriginateMetric;
    	      this.defaultInformationOriginateMetricType = defaults.defaultInformationOriginateMetricType;
    	      this.defaultInformationOriginateMetricTypeVariable = defaults.defaultInformationOriginateMetricTypeVariable;
    	      this.defaultInformationOriginateMetricVariable = defaults.defaultInformationOriginateMetricVariable;
    	      this.description = defaults.description;
    	      this.distance = defaults.distance;
    	      this.distanceExternal = defaults.distanceExternal;
    	      this.distanceExternalVariable = defaults.distanceExternalVariable;
    	      this.distanceInterArea = defaults.distanceInterArea;
    	      this.distanceInterAreaVariable = defaults.distanceInterAreaVariable;
    	      this.distanceIntraArea = defaults.distanceIntraArea;
    	      this.distanceIntraAreaVariable = defaults.distanceIntraAreaVariable;
    	      this.distanceVariable = defaults.distanceVariable;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.filter = defaults.filter;
    	      this.filterVariable = defaults.filterVariable;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.redistributes = defaults.redistributes;
    	      this.referenceBandwidth = defaults.referenceBandwidth;
    	      this.referenceBandwidthVariable = defaults.referenceBandwidthVariable;
    	      this.rfc1583Compatible = defaults.rfc1583Compatible;
    	      this.rfc1583CompatibleVariable = defaults.rfc1583CompatibleVariable;
    	      this.routePolicyId = defaults.routePolicyId;
    	      this.routerId = defaults.routerId;
    	      this.routerIdVariable = defaults.routerIdVariable;
    	      this.routerLsaAction = defaults.routerLsaAction;
    	      this.routerLsaOnStartupTime = defaults.routerLsaOnStartupTime;
    	      this.routerLsaOnStartupTimeVariable = defaults.routerLsaOnStartupTimeVariable;
    	      this.spfCalculationDelay = defaults.spfCalculationDelay;
    	      this.spfCalculationDelayVariable = defaults.spfCalculationDelayVariable;
    	      this.spfInitialHoldTime = defaults.spfInitialHoldTime;
    	      this.spfInitialHoldTimeVariable = defaults.spfInitialHoldTimeVariable;
    	      this.spfMaximumHoldTime = defaults.spfMaximumHoldTime;
    	      this.spfMaximumHoldTimeVariable = defaults.spfMaximumHoldTimeVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder areas(List<GetServiceRoutingOspfv3Ipv4FeatureArea> areas) {
            if (areas == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "areas");
            }
            this.areas = areas;
            return this;
        }
        public Builder areas(GetServiceRoutingOspfv3Ipv4FeatureArea... areas) {
            return areas(List.of(areas));
        }
        @CustomType.Setter
        public Builder defaultInformationOriginate(Boolean defaultInformationOriginate) {
            if (defaultInformationOriginate == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginate");
            }
            this.defaultInformationOriginate = defaultInformationOriginate;
            return this;
        }
        @CustomType.Setter
        public Builder defaultInformationOriginateAlways(Boolean defaultInformationOriginateAlways) {
            if (defaultInformationOriginateAlways == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginateAlways");
            }
            this.defaultInformationOriginateAlways = defaultInformationOriginateAlways;
            return this;
        }
        @CustomType.Setter
        public Builder defaultInformationOriginateAlwaysVariable(String defaultInformationOriginateAlwaysVariable) {
            if (defaultInformationOriginateAlwaysVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginateAlwaysVariable");
            }
            this.defaultInformationOriginateAlwaysVariable = defaultInformationOriginateAlwaysVariable;
            return this;
        }
        @CustomType.Setter
        public Builder defaultInformationOriginateMetric(Integer defaultInformationOriginateMetric) {
            if (defaultInformationOriginateMetric == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginateMetric");
            }
            this.defaultInformationOriginateMetric = defaultInformationOriginateMetric;
            return this;
        }
        @CustomType.Setter
        public Builder defaultInformationOriginateMetricType(String defaultInformationOriginateMetricType) {
            if (defaultInformationOriginateMetricType == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginateMetricType");
            }
            this.defaultInformationOriginateMetricType = defaultInformationOriginateMetricType;
            return this;
        }
        @CustomType.Setter
        public Builder defaultInformationOriginateMetricTypeVariable(String defaultInformationOriginateMetricTypeVariable) {
            if (defaultInformationOriginateMetricTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginateMetricTypeVariable");
            }
            this.defaultInformationOriginateMetricTypeVariable = defaultInformationOriginateMetricTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder defaultInformationOriginateMetricVariable(String defaultInformationOriginateMetricVariable) {
            if (defaultInformationOriginateMetricVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "defaultInformationOriginateMetricVariable");
            }
            this.defaultInformationOriginateMetricVariable = defaultInformationOriginateMetricVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder distance(Integer distance) {
            if (distance == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distance");
            }
            this.distance = distance;
            return this;
        }
        @CustomType.Setter
        public Builder distanceExternal(Integer distanceExternal) {
            if (distanceExternal == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceExternal");
            }
            this.distanceExternal = distanceExternal;
            return this;
        }
        @CustomType.Setter
        public Builder distanceExternalVariable(String distanceExternalVariable) {
            if (distanceExternalVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceExternalVariable");
            }
            this.distanceExternalVariable = distanceExternalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder distanceInterArea(Integer distanceInterArea) {
            if (distanceInterArea == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceInterArea");
            }
            this.distanceInterArea = distanceInterArea;
            return this;
        }
        @CustomType.Setter
        public Builder distanceInterAreaVariable(String distanceInterAreaVariable) {
            if (distanceInterAreaVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceInterAreaVariable");
            }
            this.distanceInterAreaVariable = distanceInterAreaVariable;
            return this;
        }
        @CustomType.Setter
        public Builder distanceIntraArea(Integer distanceIntraArea) {
            if (distanceIntraArea == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceIntraArea");
            }
            this.distanceIntraArea = distanceIntraArea;
            return this;
        }
        @CustomType.Setter
        public Builder distanceIntraAreaVariable(String distanceIntraAreaVariable) {
            if (distanceIntraAreaVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceIntraAreaVariable");
            }
            this.distanceIntraAreaVariable = distanceIntraAreaVariable;
            return this;
        }
        @CustomType.Setter
        public Builder distanceVariable(String distanceVariable) {
            if (distanceVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "distanceVariable");
            }
            this.distanceVariable = distanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder filter(Boolean filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder filterVariable(String filterVariable) {
            if (filterVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "filterVariable");
            }
            this.filterVariable = filterVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder redistributes(List<GetServiceRoutingOspfv3Ipv4FeatureRedistribute> redistributes) {
            if (redistributes == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "redistributes");
            }
            this.redistributes = redistributes;
            return this;
        }
        public Builder redistributes(GetServiceRoutingOspfv3Ipv4FeatureRedistribute... redistributes) {
            return redistributes(List.of(redistributes));
        }
        @CustomType.Setter
        public Builder referenceBandwidth(Integer referenceBandwidth) {
            if (referenceBandwidth == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "referenceBandwidth");
            }
            this.referenceBandwidth = referenceBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder referenceBandwidthVariable(String referenceBandwidthVariable) {
            if (referenceBandwidthVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "referenceBandwidthVariable");
            }
            this.referenceBandwidthVariable = referenceBandwidthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder rfc1583Compatible(Boolean rfc1583Compatible) {
            if (rfc1583Compatible == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "rfc1583Compatible");
            }
            this.rfc1583Compatible = rfc1583Compatible;
            return this;
        }
        @CustomType.Setter
        public Builder rfc1583CompatibleVariable(String rfc1583CompatibleVariable) {
            if (rfc1583CompatibleVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "rfc1583CompatibleVariable");
            }
            this.rfc1583CompatibleVariable = rfc1583CompatibleVariable;
            return this;
        }
        @CustomType.Setter
        public Builder routePolicyId(String routePolicyId) {
            if (routePolicyId == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "routePolicyId");
            }
            this.routePolicyId = routePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder routerId(String routerId) {
            if (routerId == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "routerId");
            }
            this.routerId = routerId;
            return this;
        }
        @CustomType.Setter
        public Builder routerIdVariable(String routerIdVariable) {
            if (routerIdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "routerIdVariable");
            }
            this.routerIdVariable = routerIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder routerLsaAction(String routerLsaAction) {
            if (routerLsaAction == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "routerLsaAction");
            }
            this.routerLsaAction = routerLsaAction;
            return this;
        }
        @CustomType.Setter
        public Builder routerLsaOnStartupTime(Integer routerLsaOnStartupTime) {
            if (routerLsaOnStartupTime == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "routerLsaOnStartupTime");
            }
            this.routerLsaOnStartupTime = routerLsaOnStartupTime;
            return this;
        }
        @CustomType.Setter
        public Builder routerLsaOnStartupTimeVariable(String routerLsaOnStartupTimeVariable) {
            if (routerLsaOnStartupTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "routerLsaOnStartupTimeVariable");
            }
            this.routerLsaOnStartupTimeVariable = routerLsaOnStartupTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder spfCalculationDelay(Integer spfCalculationDelay) {
            if (spfCalculationDelay == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "spfCalculationDelay");
            }
            this.spfCalculationDelay = spfCalculationDelay;
            return this;
        }
        @CustomType.Setter
        public Builder spfCalculationDelayVariable(String spfCalculationDelayVariable) {
            if (spfCalculationDelayVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "spfCalculationDelayVariable");
            }
            this.spfCalculationDelayVariable = spfCalculationDelayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder spfInitialHoldTime(Integer spfInitialHoldTime) {
            if (spfInitialHoldTime == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "spfInitialHoldTime");
            }
            this.spfInitialHoldTime = spfInitialHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder spfInitialHoldTimeVariable(String spfInitialHoldTimeVariable) {
            if (spfInitialHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "spfInitialHoldTimeVariable");
            }
            this.spfInitialHoldTimeVariable = spfInitialHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder spfMaximumHoldTime(Integer spfMaximumHoldTime) {
            if (spfMaximumHoldTime == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "spfMaximumHoldTime");
            }
            this.spfMaximumHoldTime = spfMaximumHoldTime;
            return this;
        }
        @CustomType.Setter
        public Builder spfMaximumHoldTimeVariable(String spfMaximumHoldTimeVariable) {
            if (spfMaximumHoldTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "spfMaximumHoldTimeVariable");
            }
            this.spfMaximumHoldTimeVariable = spfMaximumHoldTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceRoutingOspfv3Ipv4FeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetServiceRoutingOspfv3Ipv4FeatureResult build() {
            final var _resultValue = new GetServiceRoutingOspfv3Ipv4FeatureResult();
            _resultValue.areas = areas;
            _resultValue.defaultInformationOriginate = defaultInformationOriginate;
            _resultValue.defaultInformationOriginateAlways = defaultInformationOriginateAlways;
            _resultValue.defaultInformationOriginateAlwaysVariable = defaultInformationOriginateAlwaysVariable;
            _resultValue.defaultInformationOriginateMetric = defaultInformationOriginateMetric;
            _resultValue.defaultInformationOriginateMetricType = defaultInformationOriginateMetricType;
            _resultValue.defaultInformationOriginateMetricTypeVariable = defaultInformationOriginateMetricTypeVariable;
            _resultValue.defaultInformationOriginateMetricVariable = defaultInformationOriginateMetricVariable;
            _resultValue.description = description;
            _resultValue.distance = distance;
            _resultValue.distanceExternal = distanceExternal;
            _resultValue.distanceExternalVariable = distanceExternalVariable;
            _resultValue.distanceInterArea = distanceInterArea;
            _resultValue.distanceInterAreaVariable = distanceInterAreaVariable;
            _resultValue.distanceIntraArea = distanceIntraArea;
            _resultValue.distanceIntraAreaVariable = distanceIntraAreaVariable;
            _resultValue.distanceVariable = distanceVariable;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.filter = filter;
            _resultValue.filterVariable = filterVariable;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.redistributes = redistributes;
            _resultValue.referenceBandwidth = referenceBandwidth;
            _resultValue.referenceBandwidthVariable = referenceBandwidthVariable;
            _resultValue.rfc1583Compatible = rfc1583Compatible;
            _resultValue.rfc1583CompatibleVariable = rfc1583CompatibleVariable;
            _resultValue.routePolicyId = routePolicyId;
            _resultValue.routerId = routerId;
            _resultValue.routerIdVariable = routerIdVariable;
            _resultValue.routerLsaAction = routerLsaAction;
            _resultValue.routerLsaOnStartupTime = routerLsaOnStartupTime;
            _resultValue.routerLsaOnStartupTimeVariable = routerLsaOnStartupTimeVariable;
            _resultValue.spfCalculationDelay = spfCalculationDelay;
            _resultValue.spfCalculationDelayVariable = spfCalculationDelayVariable;
            _resultValue.spfInitialHoldTime = spfInitialHoldTime;
            _resultValue.spfInitialHoldTimeVariable = spfInitialHoldTimeVariable;
            _resultValue.spfMaximumHoldTime = spfMaximumHoldTime;
            _resultValue.spfMaximumHoldTimeVariable = spfMaximumHoldTimeVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
