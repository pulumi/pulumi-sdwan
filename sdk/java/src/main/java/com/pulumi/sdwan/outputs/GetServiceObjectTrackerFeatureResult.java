// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceObjectTrackerFeatureResult {
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return interface name
     * 
     */
    private String interface_;
    /**
     * @return Variable name
     * 
     */
    private String interfaceVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Object tracker ID
     * 
     */
    private Integer objectTrackerId;
    /**
     * @return Variable name
     * 
     */
    private String objectTrackerIdVariable;
    /**
     * @return objectTrackerType:Interface SIG Route
     * 
     */
    private String objectTrackerType;
    /**
     * @return IP address
     * 
     */
    private String routeIp;
    /**
     * @return Variable name
     * 
     */
    private String routeIpVariable;
    /**
     * @return IP mask
     * 
     */
    private String routeMask;
    /**
     * @return Variable name
     * 
     */
    private String routeMaskVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;
    /**
     * @return VPN
     * 
     */
    private Integer vpn;
    /**
     * @return Variable name
     * 
     */
    private String vpnVariable;

    private GetServiceObjectTrackerFeatureResult() {}
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return interface name
     * 
     */
    public String interface_() {
        return this.interface_;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceVariable() {
        return this.interfaceVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object tracker ID
     * 
     */
    public Integer objectTrackerId() {
        return this.objectTrackerId;
    }
    /**
     * @return Variable name
     * 
     */
    public String objectTrackerIdVariable() {
        return this.objectTrackerIdVariable;
    }
    /**
     * @return objectTrackerType:Interface SIG Route
     * 
     */
    public String objectTrackerType() {
        return this.objectTrackerType;
    }
    /**
     * @return IP address
     * 
     */
    public String routeIp() {
        return this.routeIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String routeIpVariable() {
        return this.routeIpVariable;
    }
    /**
     * @return IP mask
     * 
     */
    public String routeMask() {
        return this.routeMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String routeMaskVariable() {
        return this.routeMaskVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return VPN
     * 
     */
    public Integer vpn() {
        return this.vpn;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnVariable() {
        return this.vpnVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceObjectTrackerFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private String featureProfileId;
        private String id;
        private String interface_;
        private String interfaceVariable;
        private String name;
        private Integer objectTrackerId;
        private String objectTrackerIdVariable;
        private String objectTrackerType;
        private String routeIp;
        private String routeIpVariable;
        private String routeMask;
        private String routeMaskVariable;
        private Integer version;
        private Integer vpn;
        private String vpnVariable;
        public Builder() {}
        public Builder(GetServiceObjectTrackerFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.id = defaults.id;
    	      this.interface_ = defaults.interface_;
    	      this.interfaceVariable = defaults.interfaceVariable;
    	      this.name = defaults.name;
    	      this.objectTrackerId = defaults.objectTrackerId;
    	      this.objectTrackerIdVariable = defaults.objectTrackerIdVariable;
    	      this.objectTrackerType = defaults.objectTrackerType;
    	      this.routeIp = defaults.routeIp;
    	      this.routeIpVariable = defaults.routeIpVariable;
    	      this.routeMask = defaults.routeMask;
    	      this.routeMaskVariable = defaults.routeMaskVariable;
    	      this.version = defaults.version;
    	      this.vpn = defaults.vpn;
    	      this.vpnVariable = defaults.vpnVariable;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(String interface_) {
            if (interface_ == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "interface_");
            }
            this.interface_ = interface_;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceVariable(String interfaceVariable) {
            if (interfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "interfaceVariable");
            }
            this.interfaceVariable = interfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectTrackerId(Integer objectTrackerId) {
            if (objectTrackerId == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "objectTrackerId");
            }
            this.objectTrackerId = objectTrackerId;
            return this;
        }
        @CustomType.Setter
        public Builder objectTrackerIdVariable(String objectTrackerIdVariable) {
            if (objectTrackerIdVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "objectTrackerIdVariable");
            }
            this.objectTrackerIdVariable = objectTrackerIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder objectTrackerType(String objectTrackerType) {
            if (objectTrackerType == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "objectTrackerType");
            }
            this.objectTrackerType = objectTrackerType;
            return this;
        }
        @CustomType.Setter
        public Builder routeIp(String routeIp) {
            if (routeIp == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "routeIp");
            }
            this.routeIp = routeIp;
            return this;
        }
        @CustomType.Setter
        public Builder routeIpVariable(String routeIpVariable) {
            if (routeIpVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "routeIpVariable");
            }
            this.routeIpVariable = routeIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder routeMask(String routeMask) {
            if (routeMask == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "routeMask");
            }
            this.routeMask = routeMask;
            return this;
        }
        @CustomType.Setter
        public Builder routeMaskVariable(String routeMaskVariable) {
            if (routeMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "routeMaskVariable");
            }
            this.routeMaskVariable = routeMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder vpn(Integer vpn) {
            if (vpn == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "vpn");
            }
            this.vpn = vpn;
            return this;
        }
        @CustomType.Setter
        public Builder vpnVariable(String vpnVariable) {
            if (vpnVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceObjectTrackerFeatureResult", "vpnVariable");
            }
            this.vpnVariable = vpnVariable;
            return this;
        }
        public GetServiceObjectTrackerFeatureResult build() {
            final var _resultValue = new GetServiceObjectTrackerFeatureResult();
            _resultValue.description = description;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.id = id;
            _resultValue.interface_ = interface_;
            _resultValue.interfaceVariable = interfaceVariable;
            _resultValue.name = name;
            _resultValue.objectTrackerId = objectTrackerId;
            _resultValue.objectTrackerIdVariable = objectTrackerIdVariable;
            _resultValue.objectTrackerType = objectTrackerType;
            _resultValue.routeIp = routeIp;
            _resultValue.routeIpVariable = routeIpVariable;
            _resultValue.routeMask = routeMask;
            _resultValue.routeMaskVariable = routeMaskVariable;
            _resultValue.version = version;
            _resultValue.vpn = vpn;
            _resultValue.vpnVariable = vpnVariable;
            return _resultValue;
        }
    }
}
