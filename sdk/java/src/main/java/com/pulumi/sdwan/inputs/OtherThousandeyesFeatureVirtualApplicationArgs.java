// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OtherThousandeyesFeatureVirtualApplicationArgs extends com.pulumi.resources.ResourceArgs {

    public static final OtherThousandeyesFeatureVirtualApplicationArgs Empty = new OtherThousandeyesFeatureVirtualApplicationArgs();

    /**
     * Set the Account Group Token
     * 
     */
    @Import(name="accountGroupToken")
    private @Nullable Output<String> accountGroupToken;

    /**
     * @return Set the Account Group Token
     * 
     */
    public Optional<Output<String>> accountGroupToken() {
        return Optional.ofNullable(this.accountGroupToken);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="accountGroupTokenVariable")
    private @Nullable Output<String> accountGroupTokenVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> accountGroupTokenVariable() {
        return Optional.ofNullable(this.accountGroupTokenVariable);
    }

    /**
     * Set the Agent default gateway
     * 
     */
    @Import(name="agentDefaultGateway")
    private @Nullable Output<String> agentDefaultGateway;

    /**
     * @return Set the Agent default gateway
     * 
     */
    public Optional<Output<String>> agentDefaultGateway() {
        return Optional.ofNullable(this.agentDefaultGateway);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="agentDefaultGatewayVariable")
    private @Nullable Output<String> agentDefaultGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> agentDefaultGatewayVariable() {
        return Optional.ofNullable(this.agentDefaultGatewayVariable);
    }

    /**
     * Set the host name
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return Set the host name
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="hostnameVariable")
    private @Nullable Output<String> hostnameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> hostnameVariable() {
        return Optional.ofNullable(this.hostnameVariable);
    }

    /**
     * Set the Agent IP Address
     * 
     */
    @Import(name="managementIp")
    private @Nullable Output<String> managementIp;

    /**
     * @return Set the Agent IP Address
     * 
     */
    public Optional<Output<String>> managementIp() {
        return Optional.ofNullable(this.managementIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="managementIpVariable")
    private @Nullable Output<String> managementIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> managementIpVariable() {
        return Optional.ofNullable(this.managementIpVariable);
    }

    /**
     * Set the Agent SubnetMask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="managementSubnetMask")
    private @Nullable Output<String> managementSubnetMask;

    /**
     * @return Set the Agent SubnetMask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> managementSubnetMask() {
        return Optional.ofNullable(this.managementSubnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="managementSubnetMaskVariable")
    private @Nullable Output<String> managementSubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> managementSubnetMaskVariable() {
        return Optional.ofNullable(this.managementSubnetMaskVariable);
    }

    /**
     * Set the name server
     * 
     */
    @Import(name="nameServerIp")
    private @Nullable Output<String> nameServerIp;

    /**
     * @return Set the name server
     * 
     */
    public Optional<Output<String>> nameServerIp() {
        return Optional.ofNullable(this.nameServerIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="nameServerIpVariable")
    private @Nullable Output<String> nameServerIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> nameServerIpVariable() {
        return Optional.ofNullable(this.nameServerIpVariable);
    }

    /**
     * Set the proxy PAC url
     * 
     */
    @Import(name="pacUrl")
    private @Nullable Output<String> pacUrl;

    /**
     * @return Set the proxy PAC url
     * 
     */
    public Optional<Output<String>> pacUrl() {
        return Optional.ofNullable(this.pacUrl);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="pacUrlVariable")
    private @Nullable Output<String> pacUrlVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> pacUrlVariable() {
        return Optional.ofNullable(this.pacUrlVariable);
    }

    /**
     * Set the Proxy Host
     * 
     */
    @Import(name="proxyHost")
    private @Nullable Output<String> proxyHost;

    /**
     * @return Set the Proxy Host
     * 
     */
    public Optional<Output<String>> proxyHost() {
        return Optional.ofNullable(this.proxyHost);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="proxyHostVariable")
    private @Nullable Output<String> proxyHostVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> proxyHostVariable() {
        return Optional.ofNullable(this.proxyHostVariable);
    }

    /**
     * Set the Proxy Port
     *   - Range: `1`-`65535`
     * 
     */
    @Import(name="proxyPort")
    private @Nullable Output<Integer> proxyPort;

    /**
     * @return Set the Proxy Port
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> proxyPort() {
        return Optional.ofNullable(this.proxyPort);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="proxyPortVariable")
    private @Nullable Output<String> proxyPortVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> proxyPortVariable() {
        return Optional.ofNullable(this.proxyPortVariable);
    }

    /**
     * Select Web Proxy Type
     * 
     */
    @Import(name="proxyType")
    private @Nullable Output<String> proxyType;

    /**
     * @return Select Web Proxy Type
     * 
     */
    public Optional<Output<String>> proxyType() {
        return Optional.ofNullable(this.proxyType);
    }

    /**
     * VPN number
     *   - Range: `0`-`65530`
     * 
     */
    @Import(name="vpn")
    private @Nullable Output<Integer> vpn;

    /**
     * @return VPN number
     *   - Range: `0`-`65530`
     * 
     */
    public Optional<Output<Integer>> vpn() {
        return Optional.ofNullable(this.vpn);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="vpnVariable")
    private @Nullable Output<String> vpnVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> vpnVariable() {
        return Optional.ofNullable(this.vpnVariable);
    }

    private OtherThousandeyesFeatureVirtualApplicationArgs() {}

    private OtherThousandeyesFeatureVirtualApplicationArgs(OtherThousandeyesFeatureVirtualApplicationArgs $) {
        this.accountGroupToken = $.accountGroupToken;
        this.accountGroupTokenVariable = $.accountGroupTokenVariable;
        this.agentDefaultGateway = $.agentDefaultGateway;
        this.agentDefaultGatewayVariable = $.agentDefaultGatewayVariable;
        this.hostname = $.hostname;
        this.hostnameVariable = $.hostnameVariable;
        this.managementIp = $.managementIp;
        this.managementIpVariable = $.managementIpVariable;
        this.managementSubnetMask = $.managementSubnetMask;
        this.managementSubnetMaskVariable = $.managementSubnetMaskVariable;
        this.nameServerIp = $.nameServerIp;
        this.nameServerIpVariable = $.nameServerIpVariable;
        this.pacUrl = $.pacUrl;
        this.pacUrlVariable = $.pacUrlVariable;
        this.proxyHost = $.proxyHost;
        this.proxyHostVariable = $.proxyHostVariable;
        this.proxyPort = $.proxyPort;
        this.proxyPortVariable = $.proxyPortVariable;
        this.proxyType = $.proxyType;
        this.vpn = $.vpn;
        this.vpnVariable = $.vpnVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OtherThousandeyesFeatureVirtualApplicationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OtherThousandeyesFeatureVirtualApplicationArgs $;

        public Builder() {
            $ = new OtherThousandeyesFeatureVirtualApplicationArgs();
        }

        public Builder(OtherThousandeyesFeatureVirtualApplicationArgs defaults) {
            $ = new OtherThousandeyesFeatureVirtualApplicationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountGroupToken Set the Account Group Token
         * 
         * @return builder
         * 
         */
        public Builder accountGroupToken(@Nullable Output<String> accountGroupToken) {
            $.accountGroupToken = accountGroupToken;
            return this;
        }

        /**
         * @param accountGroupToken Set the Account Group Token
         * 
         * @return builder
         * 
         */
        public Builder accountGroupToken(String accountGroupToken) {
            return accountGroupToken(Output.of(accountGroupToken));
        }

        /**
         * @param accountGroupTokenVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder accountGroupTokenVariable(@Nullable Output<String> accountGroupTokenVariable) {
            $.accountGroupTokenVariable = accountGroupTokenVariable;
            return this;
        }

        /**
         * @param accountGroupTokenVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder accountGroupTokenVariable(String accountGroupTokenVariable) {
            return accountGroupTokenVariable(Output.of(accountGroupTokenVariable));
        }

        /**
         * @param agentDefaultGateway Set the Agent default gateway
         * 
         * @return builder
         * 
         */
        public Builder agentDefaultGateway(@Nullable Output<String> agentDefaultGateway) {
            $.agentDefaultGateway = agentDefaultGateway;
            return this;
        }

        /**
         * @param agentDefaultGateway Set the Agent default gateway
         * 
         * @return builder
         * 
         */
        public Builder agentDefaultGateway(String agentDefaultGateway) {
            return agentDefaultGateway(Output.of(agentDefaultGateway));
        }

        /**
         * @param agentDefaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder agentDefaultGatewayVariable(@Nullable Output<String> agentDefaultGatewayVariable) {
            $.agentDefaultGatewayVariable = agentDefaultGatewayVariable;
            return this;
        }

        /**
         * @param agentDefaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder agentDefaultGatewayVariable(String agentDefaultGatewayVariable) {
            return agentDefaultGatewayVariable(Output.of(agentDefaultGatewayVariable));
        }

        /**
         * @param hostname Set the host name
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname Set the host name
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param hostnameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameVariable(@Nullable Output<String> hostnameVariable) {
            $.hostnameVariable = hostnameVariable;
            return this;
        }

        /**
         * @param hostnameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder hostnameVariable(String hostnameVariable) {
            return hostnameVariable(Output.of(hostnameVariable));
        }

        /**
         * @param managementIp Set the Agent IP Address
         * 
         * @return builder
         * 
         */
        public Builder managementIp(@Nullable Output<String> managementIp) {
            $.managementIp = managementIp;
            return this;
        }

        /**
         * @param managementIp Set the Agent IP Address
         * 
         * @return builder
         * 
         */
        public Builder managementIp(String managementIp) {
            return managementIp(Output.of(managementIp));
        }

        /**
         * @param managementIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder managementIpVariable(@Nullable Output<String> managementIpVariable) {
            $.managementIpVariable = managementIpVariable;
            return this;
        }

        /**
         * @param managementIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder managementIpVariable(String managementIpVariable) {
            return managementIpVariable(Output.of(managementIpVariable));
        }

        /**
         * @param managementSubnetMask Set the Agent SubnetMask
         *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder managementSubnetMask(@Nullable Output<String> managementSubnetMask) {
            $.managementSubnetMask = managementSubnetMask;
            return this;
        }

        /**
         * @param managementSubnetMask Set the Agent SubnetMask
         *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder managementSubnetMask(String managementSubnetMask) {
            return managementSubnetMask(Output.of(managementSubnetMask));
        }

        /**
         * @param managementSubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder managementSubnetMaskVariable(@Nullable Output<String> managementSubnetMaskVariable) {
            $.managementSubnetMaskVariable = managementSubnetMaskVariable;
            return this;
        }

        /**
         * @param managementSubnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder managementSubnetMaskVariable(String managementSubnetMaskVariable) {
            return managementSubnetMaskVariable(Output.of(managementSubnetMaskVariable));
        }

        /**
         * @param nameServerIp Set the name server
         * 
         * @return builder
         * 
         */
        public Builder nameServerIp(@Nullable Output<String> nameServerIp) {
            $.nameServerIp = nameServerIp;
            return this;
        }

        /**
         * @param nameServerIp Set the name server
         * 
         * @return builder
         * 
         */
        public Builder nameServerIp(String nameServerIp) {
            return nameServerIp(Output.of(nameServerIp));
        }

        /**
         * @param nameServerIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nameServerIpVariable(@Nullable Output<String> nameServerIpVariable) {
            $.nameServerIpVariable = nameServerIpVariable;
            return this;
        }

        /**
         * @param nameServerIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nameServerIpVariable(String nameServerIpVariable) {
            return nameServerIpVariable(Output.of(nameServerIpVariable));
        }

        /**
         * @param pacUrl Set the proxy PAC url
         * 
         * @return builder
         * 
         */
        public Builder pacUrl(@Nullable Output<String> pacUrl) {
            $.pacUrl = pacUrl;
            return this;
        }

        /**
         * @param pacUrl Set the proxy PAC url
         * 
         * @return builder
         * 
         */
        public Builder pacUrl(String pacUrl) {
            return pacUrl(Output.of(pacUrl));
        }

        /**
         * @param pacUrlVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pacUrlVariable(@Nullable Output<String> pacUrlVariable) {
            $.pacUrlVariable = pacUrlVariable;
            return this;
        }

        /**
         * @param pacUrlVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder pacUrlVariable(String pacUrlVariable) {
            return pacUrlVariable(Output.of(pacUrlVariable));
        }

        /**
         * @param proxyHost Set the Proxy Host
         * 
         * @return builder
         * 
         */
        public Builder proxyHost(@Nullable Output<String> proxyHost) {
            $.proxyHost = proxyHost;
            return this;
        }

        /**
         * @param proxyHost Set the Proxy Host
         * 
         * @return builder
         * 
         */
        public Builder proxyHost(String proxyHost) {
            return proxyHost(Output.of(proxyHost));
        }

        /**
         * @param proxyHostVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder proxyHostVariable(@Nullable Output<String> proxyHostVariable) {
            $.proxyHostVariable = proxyHostVariable;
            return this;
        }

        /**
         * @param proxyHostVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder proxyHostVariable(String proxyHostVariable) {
            return proxyHostVariable(Output.of(proxyHostVariable));
        }

        /**
         * @param proxyPort Set the Proxy Port
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder proxyPort(@Nullable Output<Integer> proxyPort) {
            $.proxyPort = proxyPort;
            return this;
        }

        /**
         * @param proxyPort Set the Proxy Port
         *   - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder proxyPort(Integer proxyPort) {
            return proxyPort(Output.of(proxyPort));
        }

        /**
         * @param proxyPortVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder proxyPortVariable(@Nullable Output<String> proxyPortVariable) {
            $.proxyPortVariable = proxyPortVariable;
            return this;
        }

        /**
         * @param proxyPortVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder proxyPortVariable(String proxyPortVariable) {
            return proxyPortVariable(Output.of(proxyPortVariable));
        }

        /**
         * @param proxyType Select Web Proxy Type
         * 
         * @return builder
         * 
         */
        public Builder proxyType(@Nullable Output<String> proxyType) {
            $.proxyType = proxyType;
            return this;
        }

        /**
         * @param proxyType Select Web Proxy Type
         * 
         * @return builder
         * 
         */
        public Builder proxyType(String proxyType) {
            return proxyType(Output.of(proxyType));
        }

        /**
         * @param vpn VPN number
         *   - Range: `0`-`65530`
         * 
         * @return builder
         * 
         */
        public Builder vpn(@Nullable Output<Integer> vpn) {
            $.vpn = vpn;
            return this;
        }

        /**
         * @param vpn VPN number
         *   - Range: `0`-`65530`
         * 
         * @return builder
         * 
         */
        public Builder vpn(Integer vpn) {
            return vpn(Output.of(vpn));
        }

        /**
         * @param vpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnVariable(@Nullable Output<String> vpnVariable) {
            $.vpnVariable = vpnVariable;
            return this;
        }

        /**
         * @param vpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder vpnVariable(String vpnVariable) {
            return vpnVariable(Output.of(vpnVariable));
        }

        public OtherThousandeyesFeatureVirtualApplicationArgs build() {
            return $;
        }
    }

}
