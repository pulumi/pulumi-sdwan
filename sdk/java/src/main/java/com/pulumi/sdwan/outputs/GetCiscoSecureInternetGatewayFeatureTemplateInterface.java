// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoSecureInternetGatewayFeatureTemplateInterface {
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    private String application;
    /**
     * @return Auto Tunnel Mode
     * 
     */
    private Boolean autoTunnelMode;
    /**
     * @return IKE keepalive interval (seconds)
     * 
     */
    private Integer deadPeerDetectionInterval;
    /**
     * @return Variable name
     * 
     */
    private String deadPeerDetectionIntervalVariable;
    /**
     * @return IKE keepalive retries
     * 
     */
    private Integer deadPeerDetectionRetries;
    /**
     * @return Variable name
     * 
     */
    private String deadPeerDetectionRetriesVariable;
    /**
     * @return Interface description
     * 
     */
    private String description;
    /**
     * @return Variable name
     * 
     */
    private String descriptionVariable;
    /**
     * @return IKE identity the IKE preshared secret belongs to
     * 
     */
    private String ikeCiphersuite;
    /**
     * @return Variable name
     * 
     */
    private String ikeCiphersuiteVariable;
    /**
     * @return IKE Diffie Hellman Groups
     * 
     */
    private String ikeGroup;
    /**
     * @return Variable name
     * 
     */
    private String ikeGroupVariable;
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    private String ikePreSharedKey;
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    private Boolean ikePreSharedKeyDynamic;
    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    private String ikePreSharedKeyLocalId;
    /**
     * @return Variable name
     * 
     */
    private String ikePreSharedKeyLocalIdVariable;
    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    private String ikePreSharedKeyRemoteId;
    /**
     * @return Variable name
     * 
     */
    private String ikePreSharedKeyRemoteIdVariable;
    /**
     * @return Variable name
     * 
     */
    private String ikePreSharedKeyVariable;
    /**
     * @return IKE rekey interval \n\n seconds
     * 
     */
    private Integer ikeRekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private String ikeRekeyIntervalVariable;
    /**
     * @return IKE Version \n\n
     * 
     */
    private Integer ikeVersion;
    /**
     * @return Variable name
     * 
     */
    private String ikeVersionVariable;
    /**
     * @return Unnumbered interface
     * 
     */
    private Boolean ipUnnumbered;
    /**
     * @return IPsec(ESP) encryption and integrity protocol
     * 
     */
    private String ipsecCiphersuite;
    /**
     * @return Variable name
     * 
     */
    private String ipsecCiphersuiteVariable;
    /**
     * @return IPsec perfect forward secrecy settings
     * 
     */
    private String ipsecPerfectForwardSecrecy;
    /**
     * @return Variable name
     * 
     */
    private String ipsecPerfectForwardSecrecyVariable;
    /**
     * @return IPsec rekey interval \n\n seconds
     * 
     */
    private Integer ipsecRekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private String ipsecRekeyIntervalVariable;
    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     * 
     */
    private Integer ipsecReplayWindow;
    /**
     * @return Variable name
     * 
     */
    private String ipsecReplayWindowVariable;
    /**
     * @return Assign IPv4 address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    private Integer mtu;
    /**
     * @return Variable name
     * 
     */
    private String mtuVariable;
    /**
     * @return Interface name: IPsec when present
     * 
     */
    private String name;
    /**
     * @return Variable name
     * 
     */
    private String nameVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return SIG Tunnel Provider
     * 
     */
    private String sigProvider;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Enable/disable SIG tracking
     * 
     */
    private Boolean trackEnable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private String tracker;
    /**
     * @return SIG Tunnel Data Center
     * 
     */
    private String tunnelDcPreference;
    /**
     * @return Tunnel destination IP address
     * 
     */
    private String tunnelDestination;
    /**
     * @return Variable name
     * 
     */
    private String tunnelDestinationVariable;
    /**
     * @return Public IP required to setup GRE tunnel to Zscaler
     * 
     */
    private String tunnelPublicIp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelPublicIpVariable;
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    private String tunnelRouteVia;
    /**
     * @return Variable name
     * 
     */
    private String tunnelRouteViaVariable;
    /**
     * @return Tunnel source IP Address
     * 
     */
    private String tunnelSource;
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    private String tunnelSourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceInterfaceVariable;
    /**
     * @return Variable name
     * 
     */
    private String tunnelSourceVariable;

    private GetCiscoSecureInternetGatewayFeatureTemplateInterface() {}
    /**
     * @return Enable Application Tunnel Type
     * 
     */
    public String application() {
        return this.application;
    }
    /**
     * @return Auto Tunnel Mode
     * 
     */
    public Boolean autoTunnelMode() {
        return this.autoTunnelMode;
    }
    /**
     * @return IKE keepalive interval (seconds)
     * 
     */
    public Integer deadPeerDetectionInterval() {
        return this.deadPeerDetectionInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String deadPeerDetectionIntervalVariable() {
        return this.deadPeerDetectionIntervalVariable;
    }
    /**
     * @return IKE keepalive retries
     * 
     */
    public Integer deadPeerDetectionRetries() {
        return this.deadPeerDetectionRetries;
    }
    /**
     * @return Variable name
     * 
     */
    public String deadPeerDetectionRetriesVariable() {
        return this.deadPeerDetectionRetriesVariable;
    }
    /**
     * @return Interface description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Variable name
     * 
     */
    public String descriptionVariable() {
        return this.descriptionVariable;
    }
    /**
     * @return IKE identity the IKE preshared secret belongs to
     * 
     */
    public String ikeCiphersuite() {
        return this.ikeCiphersuite;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeCiphersuiteVariable() {
        return this.ikeCiphersuiteVariable;
    }
    /**
     * @return IKE Diffie Hellman Groups
     * 
     */
    public String ikeGroup() {
        return this.ikeGroup;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeGroupVariable() {
        return this.ikeGroupVariable;
    }
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public String ikePreSharedKey() {
        return this.ikePreSharedKey;
    }
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Boolean ikePreSharedKeyDynamic() {
        return this.ikePreSharedKeyDynamic;
    }
    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public String ikePreSharedKeyLocalId() {
        return this.ikePreSharedKeyLocalId;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikePreSharedKeyLocalIdVariable() {
        return this.ikePreSharedKeyLocalIdVariable;
    }
    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public String ikePreSharedKeyRemoteId() {
        return this.ikePreSharedKeyRemoteId;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikePreSharedKeyRemoteIdVariable() {
        return this.ikePreSharedKeyRemoteIdVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikePreSharedKeyVariable() {
        return this.ikePreSharedKeyVariable;
    }
    /**
     * @return IKE rekey interval \n\n seconds
     * 
     */
    public Integer ikeRekeyInterval() {
        return this.ikeRekeyInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeRekeyIntervalVariable() {
        return this.ikeRekeyIntervalVariable;
    }
    /**
     * @return IKE Version \n\n
     * 
     */
    public Integer ikeVersion() {
        return this.ikeVersion;
    }
    /**
     * @return Variable name
     * 
     */
    public String ikeVersionVariable() {
        return this.ikeVersionVariable;
    }
    /**
     * @return Unnumbered interface
     * 
     */
    public Boolean ipUnnumbered() {
        return this.ipUnnumbered;
    }
    /**
     * @return IPsec(ESP) encryption and integrity protocol
     * 
     */
    public String ipsecCiphersuite() {
        return this.ipsecCiphersuite;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecCiphersuiteVariable() {
        return this.ipsecCiphersuiteVariable;
    }
    /**
     * @return IPsec perfect forward secrecy settings
     * 
     */
    public String ipsecPerfectForwardSecrecy() {
        return this.ipsecPerfectForwardSecrecy;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecPerfectForwardSecrecyVariable() {
        return this.ipsecPerfectForwardSecrecyVariable;
    }
    /**
     * @return IPsec rekey interval \n\n seconds
     * 
     */
    public Integer ipsecRekeyInterval() {
        return this.ipsecRekeyInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecRekeyIntervalVariable() {
        return this.ipsecRekeyIntervalVariable;
    }
    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     * 
     */
    public Integer ipsecReplayWindow() {
        return this.ipsecReplayWindow;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipsecReplayWindowVariable() {
        return this.ipsecReplayWindowVariable;
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return Interface MTU \n\n, in bytes
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String mtuVariable() {
        return this.mtuVariable;
    }
    /**
     * @return Interface name: IPsec when present
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Variable name
     * 
     */
    public String nameVariable() {
        return this.nameVariable;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return SIG Tunnel Provider
     * 
     */
    public String sigProvider() {
        return this.sigProvider;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Enable/disable SIG tracking
     * 
     */
    public Boolean trackEnable() {
        return this.trackEnable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public String tracker() {
        return this.tracker;
    }
    /**
     * @return SIG Tunnel Data Center
     * 
     */
    public String tunnelDcPreference() {
        return this.tunnelDcPreference;
    }
    /**
     * @return Tunnel destination IP address
     * 
     */
    public String tunnelDestination() {
        return this.tunnelDestination;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelDestinationVariable() {
        return this.tunnelDestinationVariable;
    }
    /**
     * @return Public IP required to setup GRE tunnel to Zscaler
     * 
     */
    public String tunnelPublicIp() {
        return this.tunnelPublicIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelPublicIpVariable() {
        return this.tunnelPublicIpVariable;
    }
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    public String tunnelRouteVia() {
        return this.tunnelRouteVia;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelRouteViaVariable() {
        return this.tunnelRouteViaVariable;
    }
    /**
     * @return Tunnel source IP Address
     * 
     */
    public String tunnelSource() {
        return this.tunnelSource;
    }
    /**
     * @return \n\n Interface name: ge0/\n\n or ge0/\n\n.vlanid
     * 
     */
    public String tunnelSourceInterface() {
        return this.tunnelSourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceInterfaceVariable() {
        return this.tunnelSourceInterfaceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelSourceVariable() {
        return this.tunnelSourceVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSecureInternetGatewayFeatureTemplateInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String application;
        private Boolean autoTunnelMode;
        private Integer deadPeerDetectionInterval;
        private String deadPeerDetectionIntervalVariable;
        private Integer deadPeerDetectionRetries;
        private String deadPeerDetectionRetriesVariable;
        private String description;
        private String descriptionVariable;
        private String ikeCiphersuite;
        private String ikeCiphersuiteVariable;
        private String ikeGroup;
        private String ikeGroupVariable;
        private String ikePreSharedKey;
        private Boolean ikePreSharedKeyDynamic;
        private String ikePreSharedKeyLocalId;
        private String ikePreSharedKeyLocalIdVariable;
        private String ikePreSharedKeyRemoteId;
        private String ikePreSharedKeyRemoteIdVariable;
        private String ikePreSharedKeyVariable;
        private Integer ikeRekeyInterval;
        private String ikeRekeyIntervalVariable;
        private Integer ikeVersion;
        private String ikeVersionVariable;
        private Boolean ipUnnumbered;
        private String ipsecCiphersuite;
        private String ipsecCiphersuiteVariable;
        private String ipsecPerfectForwardSecrecy;
        private String ipsecPerfectForwardSecrecyVariable;
        private Integer ipsecRekeyInterval;
        private String ipsecRekeyIntervalVariable;
        private Integer ipsecReplayWindow;
        private String ipsecReplayWindowVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private Integer mtu;
        private String mtuVariable;
        private String name;
        private String nameVariable;
        private Boolean optional;
        private Boolean shutdown;
        private String sigProvider;
        private Integer tcpMss;
        private String tcpMssVariable;
        private Boolean trackEnable;
        private String tracker;
        private String tunnelDcPreference;
        private String tunnelDestination;
        private String tunnelDestinationVariable;
        private String tunnelPublicIp;
        private String tunnelPublicIpVariable;
        private String tunnelRouteVia;
        private String tunnelRouteViaVariable;
        private String tunnelSource;
        private String tunnelSourceInterface;
        private String tunnelSourceInterfaceVariable;
        private String tunnelSourceVariable;
        public Builder() {}
        public Builder(GetCiscoSecureInternetGatewayFeatureTemplateInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.application = defaults.application;
    	      this.autoTunnelMode = defaults.autoTunnelMode;
    	      this.deadPeerDetectionInterval = defaults.deadPeerDetectionInterval;
    	      this.deadPeerDetectionIntervalVariable = defaults.deadPeerDetectionIntervalVariable;
    	      this.deadPeerDetectionRetries = defaults.deadPeerDetectionRetries;
    	      this.deadPeerDetectionRetriesVariable = defaults.deadPeerDetectionRetriesVariable;
    	      this.description = defaults.description;
    	      this.descriptionVariable = defaults.descriptionVariable;
    	      this.ikeCiphersuite = defaults.ikeCiphersuite;
    	      this.ikeCiphersuiteVariable = defaults.ikeCiphersuiteVariable;
    	      this.ikeGroup = defaults.ikeGroup;
    	      this.ikeGroupVariable = defaults.ikeGroupVariable;
    	      this.ikePreSharedKey = defaults.ikePreSharedKey;
    	      this.ikePreSharedKeyDynamic = defaults.ikePreSharedKeyDynamic;
    	      this.ikePreSharedKeyLocalId = defaults.ikePreSharedKeyLocalId;
    	      this.ikePreSharedKeyLocalIdVariable = defaults.ikePreSharedKeyLocalIdVariable;
    	      this.ikePreSharedKeyRemoteId = defaults.ikePreSharedKeyRemoteId;
    	      this.ikePreSharedKeyRemoteIdVariable = defaults.ikePreSharedKeyRemoteIdVariable;
    	      this.ikePreSharedKeyVariable = defaults.ikePreSharedKeyVariable;
    	      this.ikeRekeyInterval = defaults.ikeRekeyInterval;
    	      this.ikeRekeyIntervalVariable = defaults.ikeRekeyIntervalVariable;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.ikeVersionVariable = defaults.ikeVersionVariable;
    	      this.ipUnnumbered = defaults.ipUnnumbered;
    	      this.ipsecCiphersuite = defaults.ipsecCiphersuite;
    	      this.ipsecCiphersuiteVariable = defaults.ipsecCiphersuiteVariable;
    	      this.ipsecPerfectForwardSecrecy = defaults.ipsecPerfectForwardSecrecy;
    	      this.ipsecPerfectForwardSecrecyVariable = defaults.ipsecPerfectForwardSecrecyVariable;
    	      this.ipsecRekeyInterval = defaults.ipsecRekeyInterval;
    	      this.ipsecRekeyIntervalVariable = defaults.ipsecRekeyIntervalVariable;
    	      this.ipsecReplayWindow = defaults.ipsecReplayWindow;
    	      this.ipsecReplayWindowVariable = defaults.ipsecReplayWindowVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.mtu = defaults.mtu;
    	      this.mtuVariable = defaults.mtuVariable;
    	      this.name = defaults.name;
    	      this.nameVariable = defaults.nameVariable;
    	      this.optional = defaults.optional;
    	      this.shutdown = defaults.shutdown;
    	      this.sigProvider = defaults.sigProvider;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.trackEnable = defaults.trackEnable;
    	      this.tracker = defaults.tracker;
    	      this.tunnelDcPreference = defaults.tunnelDcPreference;
    	      this.tunnelDestination = defaults.tunnelDestination;
    	      this.tunnelDestinationVariable = defaults.tunnelDestinationVariable;
    	      this.tunnelPublicIp = defaults.tunnelPublicIp;
    	      this.tunnelPublicIpVariable = defaults.tunnelPublicIpVariable;
    	      this.tunnelRouteVia = defaults.tunnelRouteVia;
    	      this.tunnelRouteViaVariable = defaults.tunnelRouteViaVariable;
    	      this.tunnelSource = defaults.tunnelSource;
    	      this.tunnelSourceInterface = defaults.tunnelSourceInterface;
    	      this.tunnelSourceInterfaceVariable = defaults.tunnelSourceInterfaceVariable;
    	      this.tunnelSourceVariable = defaults.tunnelSourceVariable;
        }

        @CustomType.Setter
        public Builder application(String application) {
            if (application == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "application");
            }
            this.application = application;
            return this;
        }
        @CustomType.Setter
        public Builder autoTunnelMode(Boolean autoTunnelMode) {
            if (autoTunnelMode == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "autoTunnelMode");
            }
            this.autoTunnelMode = autoTunnelMode;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionInterval(Integer deadPeerDetectionInterval) {
            if (deadPeerDetectionInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "deadPeerDetectionInterval");
            }
            this.deadPeerDetectionInterval = deadPeerDetectionInterval;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionIntervalVariable(String deadPeerDetectionIntervalVariable) {
            if (deadPeerDetectionIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "deadPeerDetectionIntervalVariable");
            }
            this.deadPeerDetectionIntervalVariable = deadPeerDetectionIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionRetries(Integer deadPeerDetectionRetries) {
            if (deadPeerDetectionRetries == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "deadPeerDetectionRetries");
            }
            this.deadPeerDetectionRetries = deadPeerDetectionRetries;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionRetriesVariable(String deadPeerDetectionRetriesVariable) {
            if (deadPeerDetectionRetriesVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "deadPeerDetectionRetriesVariable");
            }
            this.deadPeerDetectionRetriesVariable = deadPeerDetectionRetriesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder descriptionVariable(String descriptionVariable) {
            if (descriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "descriptionVariable");
            }
            this.descriptionVariable = descriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeCiphersuite(String ikeCiphersuite) {
            if (ikeCiphersuite == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeCiphersuite");
            }
            this.ikeCiphersuite = ikeCiphersuite;
            return this;
        }
        @CustomType.Setter
        public Builder ikeCiphersuiteVariable(String ikeCiphersuiteVariable) {
            if (ikeCiphersuiteVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeCiphersuiteVariable");
            }
            this.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeGroup(String ikeGroup) {
            if (ikeGroup == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeGroup");
            }
            this.ikeGroup = ikeGroup;
            return this;
        }
        @CustomType.Setter
        public Builder ikeGroupVariable(String ikeGroupVariable) {
            if (ikeGroupVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeGroupVariable");
            }
            this.ikeGroupVariable = ikeGroupVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKey(String ikePreSharedKey) {
            if (ikePreSharedKey == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKey");
            }
            this.ikePreSharedKey = ikePreSharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyDynamic(Boolean ikePreSharedKeyDynamic) {
            if (ikePreSharedKeyDynamic == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKeyDynamic");
            }
            this.ikePreSharedKeyDynamic = ikePreSharedKeyDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyLocalId(String ikePreSharedKeyLocalId) {
            if (ikePreSharedKeyLocalId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKeyLocalId");
            }
            this.ikePreSharedKeyLocalId = ikePreSharedKeyLocalId;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyLocalIdVariable(String ikePreSharedKeyLocalIdVariable) {
            if (ikePreSharedKeyLocalIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKeyLocalIdVariable");
            }
            this.ikePreSharedKeyLocalIdVariable = ikePreSharedKeyLocalIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyRemoteId(String ikePreSharedKeyRemoteId) {
            if (ikePreSharedKeyRemoteId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKeyRemoteId");
            }
            this.ikePreSharedKeyRemoteId = ikePreSharedKeyRemoteId;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyRemoteIdVariable(String ikePreSharedKeyRemoteIdVariable) {
            if (ikePreSharedKeyRemoteIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKeyRemoteIdVariable");
            }
            this.ikePreSharedKeyRemoteIdVariable = ikePreSharedKeyRemoteIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyVariable(String ikePreSharedKeyVariable) {
            if (ikePreSharedKeyVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikePreSharedKeyVariable");
            }
            this.ikePreSharedKeyVariable = ikePreSharedKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRekeyInterval(Integer ikeRekeyInterval) {
            if (ikeRekeyInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeRekeyInterval");
            }
            this.ikeRekeyInterval = ikeRekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRekeyIntervalVariable(String ikeRekeyIntervalVariable) {
            if (ikeRekeyIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeRekeyIntervalVariable");
            }
            this.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(Integer ikeVersion) {
            if (ikeVersion == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeVersion");
            }
            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersionVariable(String ikeVersionVariable) {
            if (ikeVersionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ikeVersionVariable");
            }
            this.ikeVersionVariable = ikeVersionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipUnnumbered(Boolean ipUnnumbered) {
            if (ipUnnumbered == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipUnnumbered");
            }
            this.ipUnnumbered = ipUnnumbered;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecCiphersuite(String ipsecCiphersuite) {
            if (ipsecCiphersuite == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecCiphersuite");
            }
            this.ipsecCiphersuite = ipsecCiphersuite;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecCiphersuiteVariable(String ipsecCiphersuiteVariable) {
            if (ipsecCiphersuiteVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecCiphersuiteVariable");
            }
            this.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPerfectForwardSecrecy(String ipsecPerfectForwardSecrecy) {
            if (ipsecPerfectForwardSecrecy == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecPerfectForwardSecrecy");
            }
            this.ipsecPerfectForwardSecrecy = ipsecPerfectForwardSecrecy;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPerfectForwardSecrecyVariable(String ipsecPerfectForwardSecrecyVariable) {
            if (ipsecPerfectForwardSecrecyVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecPerfectForwardSecrecyVariable");
            }
            this.ipsecPerfectForwardSecrecyVariable = ipsecPerfectForwardSecrecyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRekeyInterval(Integer ipsecRekeyInterval) {
            if (ipsecRekeyInterval == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecRekeyInterval");
            }
            this.ipsecRekeyInterval = ipsecRekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRekeyIntervalVariable(String ipsecRekeyIntervalVariable) {
            if (ipsecRekeyIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecRekeyIntervalVariable");
            }
            this.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecReplayWindow(Integer ipsecReplayWindow) {
            if (ipsecReplayWindow == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecReplayWindow");
            }
            this.ipsecReplayWindow = ipsecReplayWindow;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecReplayWindowVariable(String ipsecReplayWindowVariable) {
            if (ipsecReplayWindowVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipsecReplayWindowVariable");
            }
            this.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder mtuVariable(String mtuVariable) {
            if (mtuVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "mtuVariable");
            }
            this.mtuVariable = mtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameVariable(String nameVariable) {
            if (nameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "nameVariable");
            }
            this.nameVariable = nameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder sigProvider(String sigProvider) {
            if (sigProvider == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "sigProvider");
            }
            this.sigProvider = sigProvider;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackEnable(Boolean trackEnable) {
            if (trackEnable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "trackEnable");
            }
            this.trackEnable = trackEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tracker(String tracker) {
            if (tracker == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tracker");
            }
            this.tracker = tracker;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDcPreference(String tunnelDcPreference) {
            if (tunnelDcPreference == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelDcPreference");
            }
            this.tunnelDcPreference = tunnelDcPreference;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestination(String tunnelDestination) {
            if (tunnelDestination == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelDestination");
            }
            this.tunnelDestination = tunnelDestination;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationVariable(String tunnelDestinationVariable) {
            if (tunnelDestinationVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelDestinationVariable");
            }
            this.tunnelDestinationVariable = tunnelDestinationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelPublicIp(String tunnelPublicIp) {
            if (tunnelPublicIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelPublicIp");
            }
            this.tunnelPublicIp = tunnelPublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelPublicIpVariable(String tunnelPublicIpVariable) {
            if (tunnelPublicIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelPublicIpVariable");
            }
            this.tunnelPublicIpVariable = tunnelPublicIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            if (tunnelRouteVia == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelRouteVia");
            }
            this.tunnelRouteVia = tunnelRouteVia;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            if (tunnelRouteViaVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelRouteViaVariable");
            }
            this.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSource(String tunnelSource) {
            if (tunnelSource == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelSource");
            }
            this.tunnelSource = tunnelSource;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            if (tunnelSourceInterface == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelSourceInterface");
            }
            this.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            if (tunnelSourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelSourceInterfaceVariable");
            }
            this.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceVariable(String tunnelSourceVariable) {
            if (tunnelSourceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSecureInternetGatewayFeatureTemplateInterface", "tunnelSourceVariable");
            }
            this.tunnelSourceVariable = tunnelSourceVariable;
            return this;
        }
        public GetCiscoSecureInternetGatewayFeatureTemplateInterface build() {
            final var _resultValue = new GetCiscoSecureInternetGatewayFeatureTemplateInterface();
            _resultValue.application = application;
            _resultValue.autoTunnelMode = autoTunnelMode;
            _resultValue.deadPeerDetectionInterval = deadPeerDetectionInterval;
            _resultValue.deadPeerDetectionIntervalVariable = deadPeerDetectionIntervalVariable;
            _resultValue.deadPeerDetectionRetries = deadPeerDetectionRetries;
            _resultValue.deadPeerDetectionRetriesVariable = deadPeerDetectionRetriesVariable;
            _resultValue.description = description;
            _resultValue.descriptionVariable = descriptionVariable;
            _resultValue.ikeCiphersuite = ikeCiphersuite;
            _resultValue.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            _resultValue.ikeGroup = ikeGroup;
            _resultValue.ikeGroupVariable = ikeGroupVariable;
            _resultValue.ikePreSharedKey = ikePreSharedKey;
            _resultValue.ikePreSharedKeyDynamic = ikePreSharedKeyDynamic;
            _resultValue.ikePreSharedKeyLocalId = ikePreSharedKeyLocalId;
            _resultValue.ikePreSharedKeyLocalIdVariable = ikePreSharedKeyLocalIdVariable;
            _resultValue.ikePreSharedKeyRemoteId = ikePreSharedKeyRemoteId;
            _resultValue.ikePreSharedKeyRemoteIdVariable = ikePreSharedKeyRemoteIdVariable;
            _resultValue.ikePreSharedKeyVariable = ikePreSharedKeyVariable;
            _resultValue.ikeRekeyInterval = ikeRekeyInterval;
            _resultValue.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.ikeVersionVariable = ikeVersionVariable;
            _resultValue.ipUnnumbered = ipUnnumbered;
            _resultValue.ipsecCiphersuite = ipsecCiphersuite;
            _resultValue.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            _resultValue.ipsecPerfectForwardSecrecy = ipsecPerfectForwardSecrecy;
            _resultValue.ipsecPerfectForwardSecrecyVariable = ipsecPerfectForwardSecrecyVariable;
            _resultValue.ipsecRekeyInterval = ipsecRekeyInterval;
            _resultValue.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            _resultValue.ipsecReplayWindow = ipsecReplayWindow;
            _resultValue.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.mtu = mtu;
            _resultValue.mtuVariable = mtuVariable;
            _resultValue.name = name;
            _resultValue.nameVariable = nameVariable;
            _resultValue.optional = optional;
            _resultValue.shutdown = shutdown;
            _resultValue.sigProvider = sigProvider;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.trackEnable = trackEnable;
            _resultValue.tracker = tracker;
            _resultValue.tunnelDcPreference = tunnelDcPreference;
            _resultValue.tunnelDestination = tunnelDestination;
            _resultValue.tunnelDestinationVariable = tunnelDestinationVariable;
            _resultValue.tunnelPublicIp = tunnelPublicIp;
            _resultValue.tunnelPublicIpVariable = tunnelPublicIpVariable;
            _resultValue.tunnelRouteVia = tunnelRouteVia;
            _resultValue.tunnelRouteViaVariable = tunnelRouteViaVariable;
            _resultValue.tunnelSource = tunnelSource;
            _resultValue.tunnelSourceInterface = tunnelSourceInterface;
            _resultValue.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            _resultValue.tunnelSourceVariable = tunnelSourceVariable;
            return _resultValue;
        }
    }
}
