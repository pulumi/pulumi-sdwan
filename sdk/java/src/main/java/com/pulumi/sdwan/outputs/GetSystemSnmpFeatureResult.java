// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetSystemSnmpFeatureCommunity;
import com.pulumi.sdwan.outputs.GetSystemSnmpFeatureGroup;
import com.pulumi.sdwan.outputs.GetSystemSnmpFeatureTrapTargetServer;
import com.pulumi.sdwan.outputs.GetSystemSnmpFeatureUser;
import com.pulumi.sdwan.outputs.GetSystemSnmpFeatureView;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSystemSnmpFeatureResult {
    /**
     * @return Configure SNMP community
     * 
     */
    private List<GetSystemSnmpFeatureCommunity> communities;
    /**
     * @return Set the contact for this managed node
     * 
     */
    private String contactPerson;
    /**
     * @return Variable name
     * 
     */
    private String contactPersonVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return Configure an SNMP group
     * 
     */
    private List<GetSystemSnmpFeatureGroup> groups;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    /**
     * @return Set the physical location of this managed node
     * 
     */
    private String locationOfDevice;
    /**
     * @return Variable name
     * 
     */
    private String locationOfDeviceVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return Enable or disable SNMP
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Configure SNMP server to receive SNMP traps
     * 
     */
    private List<GetSystemSnmpFeatureTrapTargetServer> trapTargetServers;
    /**
     * @return Configure an SNMP user
     * 
     */
    private List<GetSystemSnmpFeatureUser> users;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;
    /**
     * @return Configure a view record
     * 
     */
    private List<GetSystemSnmpFeatureView> views;

    private GetSystemSnmpFeatureResult() {}
    /**
     * @return Configure SNMP community
     * 
     */
    public List<GetSystemSnmpFeatureCommunity> communities() {
        return this.communities;
    }
    /**
     * @return Set the contact for this managed node
     * 
     */
    public String contactPerson() {
        return this.contactPerson;
    }
    /**
     * @return Variable name
     * 
     */
    public String contactPersonVariable() {
        return this.contactPersonVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return Configure an SNMP group
     * 
     */
    public List<GetSystemSnmpFeatureGroup> groups() {
        return this.groups;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set the physical location of this managed node
     * 
     */
    public String locationOfDevice() {
        return this.locationOfDevice;
    }
    /**
     * @return Variable name
     * 
     */
    public String locationOfDeviceVariable() {
        return this.locationOfDeviceVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable or disable SNMP
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Configure SNMP server to receive SNMP traps
     * 
     */
    public List<GetSystemSnmpFeatureTrapTargetServer> trapTargetServers() {
        return this.trapTargetServers;
    }
    /**
     * @return Configure an SNMP user
     * 
     */
    public List<GetSystemSnmpFeatureUser> users() {
        return this.users;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Configure a view record
     * 
     */
    public List<GetSystemSnmpFeatureView> views() {
        return this.views;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemSnmpFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetSystemSnmpFeatureCommunity> communities;
        private String contactPerson;
        private String contactPersonVariable;
        private String description;
        private String featureProfileId;
        private List<GetSystemSnmpFeatureGroup> groups;
        private String id;
        private String locationOfDevice;
        private String locationOfDeviceVariable;
        private String name;
        private Boolean shutdown;
        private String shutdownVariable;
        private List<GetSystemSnmpFeatureTrapTargetServer> trapTargetServers;
        private List<GetSystemSnmpFeatureUser> users;
        private Integer version;
        private List<GetSystemSnmpFeatureView> views;
        public Builder() {}
        public Builder(GetSystemSnmpFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.communities = defaults.communities;
    	      this.contactPerson = defaults.contactPerson;
    	      this.contactPersonVariable = defaults.contactPersonVariable;
    	      this.description = defaults.description;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.locationOfDevice = defaults.locationOfDevice;
    	      this.locationOfDeviceVariable = defaults.locationOfDeviceVariable;
    	      this.name = defaults.name;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.trapTargetServers = defaults.trapTargetServers;
    	      this.users = defaults.users;
    	      this.version = defaults.version;
    	      this.views = defaults.views;
        }

        @CustomType.Setter
        public Builder communities(List<GetSystemSnmpFeatureCommunity> communities) {
            if (communities == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "communities");
            }
            this.communities = communities;
            return this;
        }
        public Builder communities(GetSystemSnmpFeatureCommunity... communities) {
            return communities(List.of(communities));
        }
        @CustomType.Setter
        public Builder contactPerson(String contactPerson) {
            if (contactPerson == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "contactPerson");
            }
            this.contactPerson = contactPerson;
            return this;
        }
        @CustomType.Setter
        public Builder contactPersonVariable(String contactPersonVariable) {
            if (contactPersonVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "contactPersonVariable");
            }
            this.contactPersonVariable = contactPersonVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<GetSystemSnmpFeatureGroup> groups) {
            if (groups == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "groups");
            }
            this.groups = groups;
            return this;
        }
        public Builder groups(GetSystemSnmpFeatureGroup... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder locationOfDevice(String locationOfDevice) {
            if (locationOfDevice == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "locationOfDevice");
            }
            this.locationOfDevice = locationOfDevice;
            return this;
        }
        @CustomType.Setter
        public Builder locationOfDeviceVariable(String locationOfDeviceVariable) {
            if (locationOfDeviceVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "locationOfDeviceVariable");
            }
            this.locationOfDeviceVariable = locationOfDeviceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trapTargetServers(List<GetSystemSnmpFeatureTrapTargetServer> trapTargetServers) {
            if (trapTargetServers == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "trapTargetServers");
            }
            this.trapTargetServers = trapTargetServers;
            return this;
        }
        public Builder trapTargetServers(GetSystemSnmpFeatureTrapTargetServer... trapTargetServers) {
            return trapTargetServers(List.of(trapTargetServers));
        }
        @CustomType.Setter
        public Builder users(List<GetSystemSnmpFeatureUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetSystemSnmpFeatureUser... users) {
            return users(List.of(users));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder views(List<GetSystemSnmpFeatureView> views) {
            if (views == null) {
              throw new MissingRequiredPropertyException("GetSystemSnmpFeatureResult", "views");
            }
            this.views = views;
            return this;
        }
        public Builder views(GetSystemSnmpFeatureView... views) {
            return views(List.of(views));
        }
        public GetSystemSnmpFeatureResult build() {
            final var _resultValue = new GetSystemSnmpFeatureResult();
            _resultValue.communities = communities;
            _resultValue.contactPerson = contactPerson;
            _resultValue.contactPersonVariable = contactPersonVariable;
            _resultValue.description = description;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.groups = groups;
            _resultValue.id = id;
            _resultValue.locationOfDevice = locationOfDevice;
            _resultValue.locationOfDeviceVariable = locationOfDeviceVariable;
            _resultValue.name = name;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.trapTargetServers = trapTargetServers;
            _resultValue.users = users;
            _resultValue.version = version;
            _resultValue.views = views;
            return _resultValue;
        }
    }
}
