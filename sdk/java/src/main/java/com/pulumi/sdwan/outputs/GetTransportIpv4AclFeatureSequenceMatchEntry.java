// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort;
import com.pulumi.sdwan.outputs.GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportIpv4AclFeatureSequenceMatchEntry {
    /**
     * @return Destination Data IP Prefix
     * 
     */
    private String destinationDataPrefix;
    private String destinationDataPrefixListId;
    /**
     * @return Variable name
     * 
     */
    private String destinationDataPrefixVariable;
    /**
     * @return Destination Port List
     * 
     */
    private List<GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort> destinationPorts;
    /**
     * @return DSCP number
     * 
     */
    private List<Integer> dscps;
    /**
     * @return ICMP Message
     * 
     */
    private List<String> icmpMessages;
    /**
     * @return Packet Length
     * 
     */
    private Integer packetLength;
    /**
     * @return protocol number list with at least one item
     * 
     */
    private List<Integer> protocols;
    /**
     * @return Source Data IP Prefix
     * 
     */
    private String sourceDataPrefix;
    private String sourceDataPrefixListId;
    /**
     * @return Variable name
     * 
     */
    private String sourceDataPrefixVariable;
    /**
     * @return Source Port List
     * 
     */
    private List<GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort> sourcePorts;
    /**
     * @return TCP States
     * 
     */
    private String tcpState;

    private GetTransportIpv4AclFeatureSequenceMatchEntry() {}
    /**
     * @return Destination Data IP Prefix
     * 
     */
    public String destinationDataPrefix() {
        return this.destinationDataPrefix;
    }
    public String destinationDataPrefixListId() {
        return this.destinationDataPrefixListId;
    }
    /**
     * @return Variable name
     * 
     */
    public String destinationDataPrefixVariable() {
        return this.destinationDataPrefixVariable;
    }
    /**
     * @return Destination Port List
     * 
     */
    public List<GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort> destinationPorts() {
        return this.destinationPorts;
    }
    /**
     * @return DSCP number
     * 
     */
    public List<Integer> dscps() {
        return this.dscps;
    }
    /**
     * @return ICMP Message
     * 
     */
    public List<String> icmpMessages() {
        return this.icmpMessages;
    }
    /**
     * @return Packet Length
     * 
     */
    public Integer packetLength() {
        return this.packetLength;
    }
    /**
     * @return protocol number list with at least one item
     * 
     */
    public List<Integer> protocols() {
        return this.protocols;
    }
    /**
     * @return Source Data IP Prefix
     * 
     */
    public String sourceDataPrefix() {
        return this.sourceDataPrefix;
    }
    public String sourceDataPrefixListId() {
        return this.sourceDataPrefixListId;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceDataPrefixVariable() {
        return this.sourceDataPrefixVariable;
    }
    /**
     * @return Source Port List
     * 
     */
    public List<GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort> sourcePorts() {
        return this.sourcePorts;
    }
    /**
     * @return TCP States
     * 
     */
    public String tcpState() {
        return this.tcpState;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportIpv4AclFeatureSequenceMatchEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String destinationDataPrefix;
        private String destinationDataPrefixListId;
        private String destinationDataPrefixVariable;
        private List<GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort> destinationPorts;
        private List<Integer> dscps;
        private List<String> icmpMessages;
        private Integer packetLength;
        private List<Integer> protocols;
        private String sourceDataPrefix;
        private String sourceDataPrefixListId;
        private String sourceDataPrefixVariable;
        private List<GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort> sourcePorts;
        private String tcpState;
        public Builder() {}
        public Builder(GetTransportIpv4AclFeatureSequenceMatchEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.destinationDataPrefix = defaults.destinationDataPrefix;
    	      this.destinationDataPrefixListId = defaults.destinationDataPrefixListId;
    	      this.destinationDataPrefixVariable = defaults.destinationDataPrefixVariable;
    	      this.destinationPorts = defaults.destinationPorts;
    	      this.dscps = defaults.dscps;
    	      this.icmpMessages = defaults.icmpMessages;
    	      this.packetLength = defaults.packetLength;
    	      this.protocols = defaults.protocols;
    	      this.sourceDataPrefix = defaults.sourceDataPrefix;
    	      this.sourceDataPrefixListId = defaults.sourceDataPrefixListId;
    	      this.sourceDataPrefixVariable = defaults.sourceDataPrefixVariable;
    	      this.sourcePorts = defaults.sourcePorts;
    	      this.tcpState = defaults.tcpState;
        }

        @CustomType.Setter
        public Builder destinationDataPrefix(String destinationDataPrefix) {
            if (destinationDataPrefix == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "destinationDataPrefix");
            }
            this.destinationDataPrefix = destinationDataPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataPrefixListId(String destinationDataPrefixListId) {
            if (destinationDataPrefixListId == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "destinationDataPrefixListId");
            }
            this.destinationDataPrefixListId = destinationDataPrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder destinationDataPrefixVariable(String destinationDataPrefixVariable) {
            if (destinationDataPrefixVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "destinationDataPrefixVariable");
            }
            this.destinationDataPrefixVariable = destinationDataPrefixVariable;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPorts(List<GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort> destinationPorts) {
            if (destinationPorts == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "destinationPorts");
            }
            this.destinationPorts = destinationPorts;
            return this;
        }
        public Builder destinationPorts(GetTransportIpv4AclFeatureSequenceMatchEntryDestinationPort... destinationPorts) {
            return destinationPorts(List.of(destinationPorts));
        }
        @CustomType.Setter
        public Builder dscps(List<Integer> dscps) {
            if (dscps == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "dscps");
            }
            this.dscps = dscps;
            return this;
        }
        public Builder dscps(Integer... dscps) {
            return dscps(List.of(dscps));
        }
        @CustomType.Setter
        public Builder icmpMessages(List<String> icmpMessages) {
            if (icmpMessages == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "icmpMessages");
            }
            this.icmpMessages = icmpMessages;
            return this;
        }
        public Builder icmpMessages(String... icmpMessages) {
            return icmpMessages(List.of(icmpMessages));
        }
        @CustomType.Setter
        public Builder packetLength(Integer packetLength) {
            if (packetLength == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "packetLength");
            }
            this.packetLength = packetLength;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<Integer> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(Integer... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder sourceDataPrefix(String sourceDataPrefix) {
            if (sourceDataPrefix == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "sourceDataPrefix");
            }
            this.sourceDataPrefix = sourceDataPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataPrefixListId(String sourceDataPrefixListId) {
            if (sourceDataPrefixListId == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "sourceDataPrefixListId");
            }
            this.sourceDataPrefixListId = sourceDataPrefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder sourceDataPrefixVariable(String sourceDataPrefixVariable) {
            if (sourceDataPrefixVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "sourceDataPrefixVariable");
            }
            this.sourceDataPrefixVariable = sourceDataPrefixVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePorts(List<GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort> sourcePorts) {
            if (sourcePorts == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "sourcePorts");
            }
            this.sourcePorts = sourcePorts;
            return this;
        }
        public Builder sourcePorts(GetTransportIpv4AclFeatureSequenceMatchEntrySourcePort... sourcePorts) {
            return sourcePorts(List.of(sourcePorts));
        }
        @CustomType.Setter
        public Builder tcpState(String tcpState) {
            if (tcpState == null) {
              throw new MissingRequiredPropertyException("GetTransportIpv4AclFeatureSequenceMatchEntry", "tcpState");
            }
            this.tcpState = tcpState;
            return this;
        }
        public GetTransportIpv4AclFeatureSequenceMatchEntry build() {
            final var _resultValue = new GetTransportIpv4AclFeatureSequenceMatchEntry();
            _resultValue.destinationDataPrefix = destinationDataPrefix;
            _resultValue.destinationDataPrefixListId = destinationDataPrefixListId;
            _resultValue.destinationDataPrefixVariable = destinationDataPrefixVariable;
            _resultValue.destinationPorts = destinationPorts;
            _resultValue.dscps = dscps;
            _resultValue.icmpMessages = icmpMessages;
            _resultValue.packetLength = packetLength;
            _resultValue.protocols = protocols;
            _resultValue.sourceDataPrefix = sourceDataPrefix;
            _resultValue.sourceDataPrefixListId = sourceDataPrefixListId;
            _resultValue.sourceDataPrefixVariable = sourceDataPrefixVariable;
            _resultValue.sourcePorts = sourcePorts;
            _resultValue.tcpState = tcpState;
            return _resultValue;
        }
    }
}
