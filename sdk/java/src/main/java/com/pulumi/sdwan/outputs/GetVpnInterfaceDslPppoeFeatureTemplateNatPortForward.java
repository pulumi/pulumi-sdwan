// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward {
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return Ending port of port range
     * 
     */
    private Integer portEndRange;
    /**
     * @return Starting port of port range
     * 
     */
    private Integer portStartRange;
    /**
     * @return Private IP Address to translate to
     * 
     */
    private String privateIpAddress;
    /**
     * @return Variable name
     * 
     */
    private String privateIpAddressVariable;
    /**
     * @return VPN in which private IP Address resides
     * 
     */
    private Integer privateVpn;
    /**
     * @return Variable name
     * 
     */
    private String privateVpnVariable;
    /**
     * @return Layer 4 protocol to apply port forwarding to
     * 
     */
    private String protocol;

    private GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward() {}
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return Ending port of port range
     * 
     */
    public Integer portEndRange() {
        return this.portEndRange;
    }
    /**
     * @return Starting port of port range
     * 
     */
    public Integer portStartRange() {
        return this.portStartRange;
    }
    /**
     * @return Private IP Address to translate to
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String privateIpAddressVariable() {
        return this.privateIpAddressVariable;
    }
    /**
     * @return VPN in which private IP Address resides
     * 
     */
    public Integer privateVpn() {
        return this.privateVpn;
    }
    /**
     * @return Variable name
     * 
     */
    public String privateVpnVariable() {
        return this.privateVpnVariable;
    }
    /**
     * @return Layer 4 protocol to apply port forwarding to
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean optional;
        private Integer portEndRange;
        private Integer portStartRange;
        private String privateIpAddress;
        private String privateIpAddressVariable;
        private Integer privateVpn;
        private String privateVpnVariable;
        private String protocol;
        public Builder() {}
        public Builder(GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.optional = defaults.optional;
    	      this.portEndRange = defaults.portEndRange;
    	      this.portStartRange = defaults.portStartRange;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddressVariable = defaults.privateIpAddressVariable;
    	      this.privateVpn = defaults.privateVpn;
    	      this.privateVpnVariable = defaults.privateVpnVariable;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder portEndRange(Integer portEndRange) {
            if (portEndRange == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "portEndRange");
            }
            this.portEndRange = portEndRange;
            return this;
        }
        @CustomType.Setter
        public Builder portStartRange(Integer portStartRange) {
            if (portStartRange == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "portStartRange");
            }
            this.portStartRange = portStartRange;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddressVariable(String privateIpAddressVariable) {
            if (privateIpAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "privateIpAddressVariable");
            }
            this.privateIpAddressVariable = privateIpAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder privateVpn(Integer privateVpn) {
            if (privateVpn == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "privateVpn");
            }
            this.privateVpn = privateVpn;
            return this;
        }
        @CustomType.Setter
        public Builder privateVpnVariable(String privateVpnVariable) {
            if (privateVpnVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "privateVpnVariable");
            }
            this.privateVpnVariable = privateVpnVariable;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        public GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward build() {
            final var _resultValue = new GetVpnInterfaceDslPppoeFeatureTemplateNatPortForward();
            _resultValue.optional = optional;
            _resultValue.portEndRange = portEndRange;
            _resultValue.portStartRange = portStartRange;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.privateIpAddressVariable = privateIpAddressVariable;
            _resultValue.privateVpn = privateVpn;
            _resultValue.privateVpnVariable = privateVpnVariable;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
