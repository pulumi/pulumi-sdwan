// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs Empty = new CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs();

    /**
     * Enable Application Tunnel Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    @Import(name="application")
    private @Nullable Output<String> application;

    /**
     * @return Enable Application Tunnel Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    /**
     * Auto Tunnel Mode
     *   - Default value: `false`
     * 
     */
    @Import(name="autoTunnelMode")
    private @Nullable Output<Boolean> autoTunnelMode;

    /**
     * @return Auto Tunnel Mode
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> autoTunnelMode() {
        return Optional.ofNullable(this.autoTunnelMode);
    }

    /**
     * IKE keepalive interval (seconds)
     *   - Range: `0`-`65535`
     *   - Default value: `10`
     * 
     */
    @Import(name="deadPeerDetectionInterval")
    private @Nullable Output<Integer> deadPeerDetectionInterval;

    /**
     * @return IKE keepalive interval (seconds)
     *   - Range: `0`-`65535`
     *   - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> deadPeerDetectionInterval() {
        return Optional.ofNullable(this.deadPeerDetectionInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="deadPeerDetectionIntervalVariable")
    private @Nullable Output<String> deadPeerDetectionIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> deadPeerDetectionIntervalVariable() {
        return Optional.ofNullable(this.deadPeerDetectionIntervalVariable);
    }

    /**
     * IKE keepalive retries
     *   - Range: `0`-`255`
     *   - Default value: `3`
     * 
     */
    @Import(name="deadPeerDetectionRetries")
    private @Nullable Output<Integer> deadPeerDetectionRetries;

    /**
     * @return IKE keepalive retries
     *   - Range: `0`-`255`
     *   - Default value: `3`
     * 
     */
    public Optional<Output<Integer>> deadPeerDetectionRetries() {
        return Optional.ofNullable(this.deadPeerDetectionRetries);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="deadPeerDetectionRetriesVariable")
    private @Nullable Output<String> deadPeerDetectionRetriesVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> deadPeerDetectionRetriesVariable() {
        return Optional.ofNullable(this.deadPeerDetectionRetriesVariable);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="descriptionVariable")
    private @Nullable Output<String> descriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> descriptionVariable() {
        return Optional.ofNullable(this.descriptionVariable);
    }

    /**
     * IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    @Import(name="ikeCiphersuite")
    private @Nullable Output<String> ikeCiphersuite;

    /**
     * @return IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    public Optional<Output<String>> ikeCiphersuite() {
        return Optional.ofNullable(this.ikeCiphersuite);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeCiphersuiteVariable")
    private @Nullable Output<String> ikeCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeCiphersuiteVariable() {
        return Optional.ofNullable(this.ikeCiphersuiteVariable);
    }

    /**
     * IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`
     *   - Default value: `14`
     * 
     */
    @Import(name="ikeGroup")
    private @Nullable Output<String> ikeGroup;

    /**
     * @return IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`
     *   - Default value: `14`
     * 
     */
    public Optional<Output<String>> ikeGroup() {
        return Optional.ofNullable(this.ikeGroup);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeGroupVariable")
    private @Nullable Output<String> ikeGroupVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeGroupVariable() {
        return Optional.ofNullable(this.ikeGroupVariable);
    }

    /**
     * Use preshared key to authenticate IKE peer
     * 
     */
    @Import(name="ikePreSharedKey")
    private @Nullable Output<String> ikePreSharedKey;

    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Optional<Output<String>> ikePreSharedKey() {
        return Optional.ofNullable(this.ikePreSharedKey);
    }

    /**
     * Use preshared key to authenticate IKE peer
     *   - Default value: `true`
     * 
     */
    @Import(name="ikePreSharedKeyDynamic")
    private @Nullable Output<Boolean> ikePreSharedKeyDynamic;

    /**
     * @return Use preshared key to authenticate IKE peer
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> ikePreSharedKeyDynamic() {
        return Optional.ofNullable(this.ikePreSharedKeyDynamic);
    }

    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Import(name="ikePreSharedKeyLocalId")
    private @Nullable Output<String> ikePreSharedKeyLocalId;

    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyLocalId() {
        return Optional.ofNullable(this.ikePreSharedKeyLocalId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePreSharedKeyLocalIdVariable")
    private @Nullable Output<String> ikePreSharedKeyLocalIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyLocalIdVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyLocalIdVariable);
    }

    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Import(name="ikePreSharedKeyRemoteId")
    private @Nullable Output<String> ikePreSharedKeyRemoteId;

    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyRemoteId() {
        return Optional.ofNullable(this.ikePreSharedKeyRemoteId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePreSharedKeyRemoteIdVariable")
    private @Nullable Output<String> ikePreSharedKeyRemoteIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyRemoteIdVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyRemoteIdVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePreSharedKeyVariable")
    private @Nullable Output<String> ikePreSharedKeyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyVariable);
    }

    /**
     * IKE rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `14400`
     * 
     */
    @Import(name="ikeRekeyInterval")
    private @Nullable Output<Integer> ikeRekeyInterval;

    /**
     * @return IKE rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `14400`
     * 
     */
    public Optional<Output<Integer>> ikeRekeyInterval() {
        return Optional.ofNullable(this.ikeRekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeRekeyIntervalVariable")
    private @Nullable Output<String> ikeRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeRekeyIntervalVariable() {
        return Optional.ofNullable(this.ikeRekeyIntervalVariable);
    }

    /**
     * IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `2`
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<Integer> ikeVersion;

    /**
     * @return IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `2`
     * 
     */
    public Optional<Output<Integer>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeVersionVariable")
    private @Nullable Output<String> ikeVersionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeVersionVariable() {
        return Optional.ofNullable(this.ikeVersionVariable);
    }

    /**
     * Unnumbered interface
     *   - Default value: `true`
     * 
     */
    @Import(name="ipUnnumbered")
    private @Nullable Output<Boolean> ipUnnumbered;

    /**
     * @return Unnumbered interface
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> ipUnnumbered() {
        return Optional.ofNullable(this.ipUnnumbered);
    }

    /**
     * IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    @Import(name="ipsecCiphersuite")
    private @Nullable Output<String> ipsecCiphersuite;

    /**
     * @return IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    public Optional<Output<String>> ipsecCiphersuite() {
        return Optional.ofNullable(this.ipsecCiphersuite);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecCiphersuiteVariable")
    private @Nullable Output<String> ipsecCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecCiphersuiteVariable() {
        return Optional.ofNullable(this.ipsecCiphersuiteVariable);
    }

    /**
     * IPsec perfect forward secrecy settings
     *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
     *   - Default value: `none`
     * 
     */
    @Import(name="ipsecPerfectForwardSecrecy")
    private @Nullable Output<String> ipsecPerfectForwardSecrecy;

    /**
     * @return IPsec perfect forward secrecy settings
     *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
     *   - Default value: `none`
     * 
     */
    public Optional<Output<String>> ipsecPerfectForwardSecrecy() {
        return Optional.ofNullable(this.ipsecPerfectForwardSecrecy);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecPerfectForwardSecrecyVariable")
    private @Nullable Output<String> ipsecPerfectForwardSecrecyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecPerfectForwardSecrecyVariable() {
        return Optional.ofNullable(this.ipsecPerfectForwardSecrecyVariable);
    }

    /**
     * IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `3600`
     * 
     */
    @Import(name="ipsecRekeyInterval")
    private @Nullable Output<Integer> ipsecRekeyInterval;

    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `3600`
     * 
     */
    public Optional<Output<Integer>> ipsecRekeyInterval() {
        return Optional.ofNullable(this.ipsecRekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecRekeyIntervalVariable")
    private @Nullable Output<String> ipsecRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecRekeyIntervalVariable() {
        return Optional.ofNullable(this.ipsecRekeyIntervalVariable);
    }

    /**
     * Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    @Import(name="ipsecReplayWindow")
    private @Nullable Output<Integer> ipsecReplayWindow;

    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    public Optional<Output<Integer>> ipsecReplayWindow() {
        return Optional.ofNullable(this.ipsecReplayWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecReplayWindowVariable")
    private @Nullable Output<String> ipsecReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecReplayWindowVariable() {
        return Optional.ofNullable(this.ipsecReplayWindowVariable);
    }

    /**
     * Assign IPv4 address
     * 
     */
    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    /**
     * @return Assign IPv4 address
     * 
     */
    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipv4AddressVariable")
    private @Nullable Output<String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipv4AddressVariable() {
        return Optional.ofNullable(this.ipv4AddressVariable);
    }

    /**
     * Interface MTU &lt;576..2000&gt;, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1400`
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Interface MTU &lt;576..2000&gt;, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1400`
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="mtuVariable")
    private @Nullable Output<String> mtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> mtuVariable() {
        return Optional.ofNullable(this.mtuVariable);
    }

    /**
     * Interface name: IPsec when present
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Interface name: IPsec when present
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="nameVariable")
    private @Nullable Output<String> nameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> nameVariable() {
        return Optional.ofNullable(this.nameVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Administrative state
     *   - Default value: `false`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * SIG Tunnel Provider
     *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
     *   - Default value: `secure-internet-gateway-umbrella`
     * 
     */
    @Import(name="sigProvider")
    private @Nullable Output<String> sigProvider;

    /**
     * @return SIG Tunnel Provider
     *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
     *   - Default value: `secure-internet-gateway-umbrella`
     * 
     */
    public Optional<Output<String>> sigProvider() {
        return Optional.ofNullable(this.sigProvider);
    }

    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tcpMss")
    private @Nullable Output<Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tcpMss() {
        return Optional.ofNullable(this.tcpMss);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssVariable")
    private @Nullable Output<String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssVariable() {
        return Optional.ofNullable(this.tcpMssVariable);
    }

    /**
     * Enable/disable SIG tracking
     *   - Default value: `true`
     * 
     */
    @Import(name="trackEnable")
    private @Nullable Output<Boolean> trackEnable;

    /**
     * @return Enable/disable SIG tracking
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> trackEnable() {
        return Optional.ofNullable(this.trackEnable);
    }

    /**
     * Enable tracker for this interface
     * 
     */
    @Import(name="tracker")
    private @Nullable Output<String> tracker;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<Output<String>> tracker() {
        return Optional.ofNullable(this.tracker);
    }

    /**
     * SIG Tunnel Data Center
     *   - Choices: `primary-dc`, `secondary-dc`
     *   - Default value: `primary-dc`
     * 
     */
    @Import(name="tunnelDcPreference")
    private @Nullable Output<String> tunnelDcPreference;

    /**
     * @return SIG Tunnel Data Center
     *   - Choices: `primary-dc`, `secondary-dc`
     *   - Default value: `primary-dc`
     * 
     */
    public Optional<Output<String>> tunnelDcPreference() {
        return Optional.ofNullable(this.tunnelDcPreference);
    }

    /**
     * Tunnel destination IP address
     * 
     */
    @Import(name="tunnelDestination")
    private @Nullable Output<String> tunnelDestination;

    /**
     * @return Tunnel destination IP address
     * 
     */
    public Optional<Output<String>> tunnelDestination() {
        return Optional.ofNullable(this.tunnelDestination);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelDestinationVariable")
    private @Nullable Output<String> tunnelDestinationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelDestinationVariable() {
        return Optional.ofNullable(this.tunnelDestinationVariable);
    }

    /**
     * Public IP required to setup GRE tunnel to Zscaler
     *   - Default value: `Auto`
     * 
     */
    @Import(name="tunnelPublicIp")
    private @Nullable Output<String> tunnelPublicIp;

    /**
     * @return Public IP required to setup GRE tunnel to Zscaler
     *   - Default value: `Auto`
     * 
     */
    public Optional<Output<String>> tunnelPublicIp() {
        return Optional.ofNullable(this.tunnelPublicIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelPublicIpVariable")
    private @Nullable Output<String> tunnelPublicIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelPublicIpVariable() {
        return Optional.ofNullable(this.tunnelPublicIpVariable);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelRouteVia")
    private @Nullable Output<String> tunnelRouteVia;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelRouteVia() {
        return Optional.ofNullable(this.tunnelRouteVia);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelRouteViaVariable")
    private @Nullable Output<String> tunnelRouteViaVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelRouteViaVariable() {
        return Optional.ofNullable(this.tunnelRouteViaVariable);
    }

    /**
     * Tunnel source IP Address
     * 
     */
    @Import(name="tunnelSource")
    private @Nullable Output<String> tunnelSource;

    /**
     * @return Tunnel source IP Address
     * 
     */
    public Optional<Output<String>> tunnelSource() {
        return Optional.ofNullable(this.tunnelSource);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelSourceInterface")
    private @Nullable Output<String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelSourceInterface() {
        return Optional.ofNullable(this.tunnelSourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceInterfaceVariable")
    private @Nullable Output<String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceInterfaceVariable() {
        return Optional.ofNullable(this.tunnelSourceInterfaceVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceVariable")
    private @Nullable Output<String> tunnelSourceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceVariable() {
        return Optional.ofNullable(this.tunnelSourceVariable);
    }

    private CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs() {}

    private CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs(CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs $) {
        this.application = $.application;
        this.autoTunnelMode = $.autoTunnelMode;
        this.deadPeerDetectionInterval = $.deadPeerDetectionInterval;
        this.deadPeerDetectionIntervalVariable = $.deadPeerDetectionIntervalVariable;
        this.deadPeerDetectionRetries = $.deadPeerDetectionRetries;
        this.deadPeerDetectionRetriesVariable = $.deadPeerDetectionRetriesVariable;
        this.description = $.description;
        this.descriptionVariable = $.descriptionVariable;
        this.ikeCiphersuite = $.ikeCiphersuite;
        this.ikeCiphersuiteVariable = $.ikeCiphersuiteVariable;
        this.ikeGroup = $.ikeGroup;
        this.ikeGroupVariable = $.ikeGroupVariable;
        this.ikePreSharedKey = $.ikePreSharedKey;
        this.ikePreSharedKeyDynamic = $.ikePreSharedKeyDynamic;
        this.ikePreSharedKeyLocalId = $.ikePreSharedKeyLocalId;
        this.ikePreSharedKeyLocalIdVariable = $.ikePreSharedKeyLocalIdVariable;
        this.ikePreSharedKeyRemoteId = $.ikePreSharedKeyRemoteId;
        this.ikePreSharedKeyRemoteIdVariable = $.ikePreSharedKeyRemoteIdVariable;
        this.ikePreSharedKeyVariable = $.ikePreSharedKeyVariable;
        this.ikeRekeyInterval = $.ikeRekeyInterval;
        this.ikeRekeyIntervalVariable = $.ikeRekeyIntervalVariable;
        this.ikeVersion = $.ikeVersion;
        this.ikeVersionVariable = $.ikeVersionVariable;
        this.ipUnnumbered = $.ipUnnumbered;
        this.ipsecCiphersuite = $.ipsecCiphersuite;
        this.ipsecCiphersuiteVariable = $.ipsecCiphersuiteVariable;
        this.ipsecPerfectForwardSecrecy = $.ipsecPerfectForwardSecrecy;
        this.ipsecPerfectForwardSecrecyVariable = $.ipsecPerfectForwardSecrecyVariable;
        this.ipsecRekeyInterval = $.ipsecRekeyInterval;
        this.ipsecRekeyIntervalVariable = $.ipsecRekeyIntervalVariable;
        this.ipsecReplayWindow = $.ipsecReplayWindow;
        this.ipsecReplayWindowVariable = $.ipsecReplayWindowVariable;
        this.ipv4Address = $.ipv4Address;
        this.ipv4AddressVariable = $.ipv4AddressVariable;
        this.mtu = $.mtu;
        this.mtuVariable = $.mtuVariable;
        this.name = $.name;
        this.nameVariable = $.nameVariable;
        this.optional = $.optional;
        this.shutdown = $.shutdown;
        this.sigProvider = $.sigProvider;
        this.tcpMss = $.tcpMss;
        this.tcpMssVariable = $.tcpMssVariable;
        this.trackEnable = $.trackEnable;
        this.tracker = $.tracker;
        this.tunnelDcPreference = $.tunnelDcPreference;
        this.tunnelDestination = $.tunnelDestination;
        this.tunnelDestinationVariable = $.tunnelDestinationVariable;
        this.tunnelPublicIp = $.tunnelPublicIp;
        this.tunnelPublicIpVariable = $.tunnelPublicIpVariable;
        this.tunnelRouteVia = $.tunnelRouteVia;
        this.tunnelRouteViaVariable = $.tunnelRouteViaVariable;
        this.tunnelSource = $.tunnelSource;
        this.tunnelSourceInterface = $.tunnelSourceInterface;
        this.tunnelSourceInterfaceVariable = $.tunnelSourceInterfaceVariable;
        this.tunnelSourceVariable = $.tunnelSourceVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs $;

        public Builder() {
            $ = new CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs();
        }

        public Builder(CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs defaults) {
            $ = new CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param application Enable Application Tunnel Type
         *   - Choices: `sig`
         *   - Default value: `sig`
         * 
         * @return builder
         * 
         */
        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        /**
         * @param application Enable Application Tunnel Type
         *   - Choices: `sig`
         *   - Default value: `sig`
         * 
         * @return builder
         * 
         */
        public Builder application(String application) {
            return application(Output.of(application));
        }

        /**
         * @param autoTunnelMode Auto Tunnel Mode
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder autoTunnelMode(@Nullable Output<Boolean> autoTunnelMode) {
            $.autoTunnelMode = autoTunnelMode;
            return this;
        }

        /**
         * @param autoTunnelMode Auto Tunnel Mode
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder autoTunnelMode(Boolean autoTunnelMode) {
            return autoTunnelMode(Output.of(autoTunnelMode));
        }

        /**
         * @param deadPeerDetectionInterval IKE keepalive interval (seconds)
         *   - Range: `0`-`65535`
         *   - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionInterval(@Nullable Output<Integer> deadPeerDetectionInterval) {
            $.deadPeerDetectionInterval = deadPeerDetectionInterval;
            return this;
        }

        /**
         * @param deadPeerDetectionInterval IKE keepalive interval (seconds)
         *   - Range: `0`-`65535`
         *   - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionInterval(Integer deadPeerDetectionInterval) {
            return deadPeerDetectionInterval(Output.of(deadPeerDetectionInterval));
        }

        /**
         * @param deadPeerDetectionIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionIntervalVariable(@Nullable Output<String> deadPeerDetectionIntervalVariable) {
            $.deadPeerDetectionIntervalVariable = deadPeerDetectionIntervalVariable;
            return this;
        }

        /**
         * @param deadPeerDetectionIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionIntervalVariable(String deadPeerDetectionIntervalVariable) {
            return deadPeerDetectionIntervalVariable(Output.of(deadPeerDetectionIntervalVariable));
        }

        /**
         * @param deadPeerDetectionRetries IKE keepalive retries
         *   - Range: `0`-`255`
         *   - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetries(@Nullable Output<Integer> deadPeerDetectionRetries) {
            $.deadPeerDetectionRetries = deadPeerDetectionRetries;
            return this;
        }

        /**
         * @param deadPeerDetectionRetries IKE keepalive retries
         *   - Range: `0`-`255`
         *   - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetries(Integer deadPeerDetectionRetries) {
            return deadPeerDetectionRetries(Output.of(deadPeerDetectionRetries));
        }

        /**
         * @param deadPeerDetectionRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetriesVariable(@Nullable Output<String> deadPeerDetectionRetriesVariable) {
            $.deadPeerDetectionRetriesVariable = deadPeerDetectionRetriesVariable;
            return this;
        }

        /**
         * @param deadPeerDetectionRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetriesVariable(String deadPeerDetectionRetriesVariable) {
            return deadPeerDetectionRetriesVariable(Output.of(deadPeerDetectionRetriesVariable));
        }

        /**
         * @param description Interface description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Interface description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param descriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder descriptionVariable(@Nullable Output<String> descriptionVariable) {
            $.descriptionVariable = descriptionVariable;
            return this;
        }

        /**
         * @param descriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder descriptionVariable(String descriptionVariable) {
            return descriptionVariable(Output.of(descriptionVariable));
        }

        /**
         * @param ikeCiphersuite IKE identity the IKE preshared secret belongs to
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
         *   - Default value: `aes256-cbc-sha1`
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuite(@Nullable Output<String> ikeCiphersuite) {
            $.ikeCiphersuite = ikeCiphersuite;
            return this;
        }

        /**
         * @param ikeCiphersuite IKE identity the IKE preshared secret belongs to
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
         *   - Default value: `aes256-cbc-sha1`
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuite(String ikeCiphersuite) {
            return ikeCiphersuite(Output.of(ikeCiphersuite));
        }

        /**
         * @param ikeCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuiteVariable(@Nullable Output<String> ikeCiphersuiteVariable) {
            $.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            return this;
        }

        /**
         * @param ikeCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuiteVariable(String ikeCiphersuiteVariable) {
            return ikeCiphersuiteVariable(Output.of(ikeCiphersuiteVariable));
        }

        /**
         * @param ikeGroup IKE Diffie Hellman Groups
         *   - Choices: `2`, `14`, `15`, `16`
         *   - Default value: `14`
         * 
         * @return builder
         * 
         */
        public Builder ikeGroup(@Nullable Output<String> ikeGroup) {
            $.ikeGroup = ikeGroup;
            return this;
        }

        /**
         * @param ikeGroup IKE Diffie Hellman Groups
         *   - Choices: `2`, `14`, `15`, `16`
         *   - Default value: `14`
         * 
         * @return builder
         * 
         */
        public Builder ikeGroup(String ikeGroup) {
            return ikeGroup(Output.of(ikeGroup));
        }

        /**
         * @param ikeGroupVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeGroupVariable(@Nullable Output<String> ikeGroupVariable) {
            $.ikeGroupVariable = ikeGroupVariable;
            return this;
        }

        /**
         * @param ikeGroupVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeGroupVariable(String ikeGroupVariable) {
            return ikeGroupVariable(Output.of(ikeGroupVariable));
        }

        /**
         * @param ikePreSharedKey Use preshared key to authenticate IKE peer
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKey(@Nullable Output<String> ikePreSharedKey) {
            $.ikePreSharedKey = ikePreSharedKey;
            return this;
        }

        /**
         * @param ikePreSharedKey Use preshared key to authenticate IKE peer
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKey(String ikePreSharedKey) {
            return ikePreSharedKey(Output.of(ikePreSharedKey));
        }

        /**
         * @param ikePreSharedKeyDynamic Use preshared key to authenticate IKE peer
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyDynamic(@Nullable Output<Boolean> ikePreSharedKeyDynamic) {
            $.ikePreSharedKeyDynamic = ikePreSharedKeyDynamic;
            return this;
        }

        /**
         * @param ikePreSharedKeyDynamic Use preshared key to authenticate IKE peer
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyDynamic(Boolean ikePreSharedKeyDynamic) {
            return ikePreSharedKeyDynamic(Output.of(ikePreSharedKeyDynamic));
        }

        /**
         * @param ikePreSharedKeyLocalId IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalId(@Nullable Output<String> ikePreSharedKeyLocalId) {
            $.ikePreSharedKeyLocalId = ikePreSharedKeyLocalId;
            return this;
        }

        /**
         * @param ikePreSharedKeyLocalId IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalId(String ikePreSharedKeyLocalId) {
            return ikePreSharedKeyLocalId(Output.of(ikePreSharedKeyLocalId));
        }

        /**
         * @param ikePreSharedKeyLocalIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalIdVariable(@Nullable Output<String> ikePreSharedKeyLocalIdVariable) {
            $.ikePreSharedKeyLocalIdVariable = ikePreSharedKeyLocalIdVariable;
            return this;
        }

        /**
         * @param ikePreSharedKeyLocalIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalIdVariable(String ikePreSharedKeyLocalIdVariable) {
            return ikePreSharedKeyLocalIdVariable(Output.of(ikePreSharedKeyLocalIdVariable));
        }

        /**
         * @param ikePreSharedKeyRemoteId IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteId(@Nullable Output<String> ikePreSharedKeyRemoteId) {
            $.ikePreSharedKeyRemoteId = ikePreSharedKeyRemoteId;
            return this;
        }

        /**
         * @param ikePreSharedKeyRemoteId IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteId(String ikePreSharedKeyRemoteId) {
            return ikePreSharedKeyRemoteId(Output.of(ikePreSharedKeyRemoteId));
        }

        /**
         * @param ikePreSharedKeyRemoteIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteIdVariable(@Nullable Output<String> ikePreSharedKeyRemoteIdVariable) {
            $.ikePreSharedKeyRemoteIdVariable = ikePreSharedKeyRemoteIdVariable;
            return this;
        }

        /**
         * @param ikePreSharedKeyRemoteIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteIdVariable(String ikePreSharedKeyRemoteIdVariable) {
            return ikePreSharedKeyRemoteIdVariable(Output.of(ikePreSharedKeyRemoteIdVariable));
        }

        /**
         * @param ikePreSharedKeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyVariable(@Nullable Output<String> ikePreSharedKeyVariable) {
            $.ikePreSharedKeyVariable = ikePreSharedKeyVariable;
            return this;
        }

        /**
         * @param ikePreSharedKeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyVariable(String ikePreSharedKeyVariable) {
            return ikePreSharedKeyVariable(Output.of(ikePreSharedKeyVariable));
        }

        /**
         * @param ikeRekeyInterval IKE rekey interval &lt;300..1209600&gt; seconds
         *   - Range: `300`-`1209600`
         *   - Default value: `14400`
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyInterval(@Nullable Output<Integer> ikeRekeyInterval) {
            $.ikeRekeyInterval = ikeRekeyInterval;
            return this;
        }

        /**
         * @param ikeRekeyInterval IKE rekey interval &lt;300..1209600&gt; seconds
         *   - Range: `300`-`1209600`
         *   - Default value: `14400`
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyInterval(Integer ikeRekeyInterval) {
            return ikeRekeyInterval(Output.of(ikeRekeyInterval));
        }

        /**
         * @param ikeRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyIntervalVariable(@Nullable Output<String> ikeRekeyIntervalVariable) {
            $.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            return this;
        }

        /**
         * @param ikeRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyIntervalVariable(String ikeRekeyIntervalVariable) {
            return ikeRekeyIntervalVariable(Output.of(ikeRekeyIntervalVariable));
        }

        /**
         * @param ikeVersion IKE Version &lt;1..2&gt;
         *   - Range: `1`-`2`
         *   - Default value: `2`
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<Integer> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion IKE Version &lt;1..2&gt;
         *   - Range: `1`-`2`
         *   - Default value: `2`
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(Integer ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param ikeVersionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeVersionVariable(@Nullable Output<String> ikeVersionVariable) {
            $.ikeVersionVariable = ikeVersionVariable;
            return this;
        }

        /**
         * @param ikeVersionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeVersionVariable(String ikeVersionVariable) {
            return ikeVersionVariable(Output.of(ikeVersionVariable));
        }

        /**
         * @param ipUnnumbered Unnumbered interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder ipUnnumbered(@Nullable Output<Boolean> ipUnnumbered) {
            $.ipUnnumbered = ipUnnumbered;
            return this;
        }

        /**
         * @param ipUnnumbered Unnumbered interface
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder ipUnnumbered(Boolean ipUnnumbered) {
            return ipUnnumbered(Output.of(ipUnnumbered));
        }

        /**
         * @param ipsecCiphersuite IPsec(ESP) encryption and integrity protocol
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
         *   - Default value: `aes256-gcm`
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuite(@Nullable Output<String> ipsecCiphersuite) {
            $.ipsecCiphersuite = ipsecCiphersuite;
            return this;
        }

        /**
         * @param ipsecCiphersuite IPsec(ESP) encryption and integrity protocol
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
         *   - Default value: `aes256-gcm`
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuite(String ipsecCiphersuite) {
            return ipsecCiphersuite(Output.of(ipsecCiphersuite));
        }

        /**
         * @param ipsecCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuiteVariable(@Nullable Output<String> ipsecCiphersuiteVariable) {
            $.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            return this;
        }

        /**
         * @param ipsecCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuiteVariable(String ipsecCiphersuiteVariable) {
            return ipsecCiphersuiteVariable(Output.of(ipsecCiphersuiteVariable));
        }

        /**
         * @param ipsecPerfectForwardSecrecy IPsec perfect forward secrecy settings
         *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
         *   - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecy(@Nullable Output<String> ipsecPerfectForwardSecrecy) {
            $.ipsecPerfectForwardSecrecy = ipsecPerfectForwardSecrecy;
            return this;
        }

        /**
         * @param ipsecPerfectForwardSecrecy IPsec perfect forward secrecy settings
         *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
         *   - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecy(String ipsecPerfectForwardSecrecy) {
            return ipsecPerfectForwardSecrecy(Output.of(ipsecPerfectForwardSecrecy));
        }

        /**
         * @param ipsecPerfectForwardSecrecyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecyVariable(@Nullable Output<String> ipsecPerfectForwardSecrecyVariable) {
            $.ipsecPerfectForwardSecrecyVariable = ipsecPerfectForwardSecrecyVariable;
            return this;
        }

        /**
         * @param ipsecPerfectForwardSecrecyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecyVariable(String ipsecPerfectForwardSecrecyVariable) {
            return ipsecPerfectForwardSecrecyVariable(Output.of(ipsecPerfectForwardSecrecyVariable));
        }

        /**
         * @param ipsecRekeyInterval IPsec rekey interval &lt;300..1209600&gt; seconds
         *   - Range: `300`-`1209600`
         *   - Default value: `3600`
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyInterval(@Nullable Output<Integer> ipsecRekeyInterval) {
            $.ipsecRekeyInterval = ipsecRekeyInterval;
            return this;
        }

        /**
         * @param ipsecRekeyInterval IPsec rekey interval &lt;300..1209600&gt; seconds
         *   - Range: `300`-`1209600`
         *   - Default value: `3600`
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyInterval(Integer ipsecRekeyInterval) {
            return ipsecRekeyInterval(Output.of(ipsecRekeyInterval));
        }

        /**
         * @param ipsecRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyIntervalVariable(@Nullable Output<String> ipsecRekeyIntervalVariable) {
            $.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            return this;
        }

        /**
         * @param ipsecRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyIntervalVariable(String ipsecRekeyIntervalVariable) {
            return ipsecRekeyIntervalVariable(Output.of(ipsecRekeyIntervalVariable));
        }

        /**
         * @param ipsecReplayWindow Replay window size 32..8192 (must be a power of 2)
         *   - Range: `64`-`4096`
         *   - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindow(@Nullable Output<Integer> ipsecReplayWindow) {
            $.ipsecReplayWindow = ipsecReplayWindow;
            return this;
        }

        /**
         * @param ipsecReplayWindow Replay window size 32..8192 (must be a power of 2)
         *   - Range: `64`-`4096`
         *   - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindow(Integer ipsecReplayWindow) {
            return ipsecReplayWindow(Output.of(ipsecReplayWindow));
        }

        /**
         * @param ipsecReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindowVariable(@Nullable Output<String> ipsecReplayWindowVariable) {
            $.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            return this;
        }

        /**
         * @param ipsecReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindowVariable(String ipsecReplayWindowVariable) {
            return ipsecReplayWindowVariable(Output.of(ipsecReplayWindowVariable));
        }

        /**
         * @param ipv4Address Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        /**
         * @param ipv4Address Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(@Nullable Output<String> ipv4AddressVariable) {
            $.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }

        /**
         * @param ipv4AddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            return ipv4AddressVariable(Output.of(ipv4AddressVariable));
        }

        /**
         * @param mtu Interface MTU &lt;576..2000&gt;, in bytes
         *   - Range: `576`-`2000`
         *   - Default value: `1400`
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Interface MTU &lt;576..2000&gt;, in bytes
         *   - Range: `576`-`2000`
         *   - Default value: `1400`
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param mtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mtuVariable(@Nullable Output<String> mtuVariable) {
            $.mtuVariable = mtuVariable;
            return this;
        }

        /**
         * @param mtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mtuVariable(String mtuVariable) {
            return mtuVariable(Output.of(mtuVariable));
        }

        /**
         * @param name Interface name: IPsec when present
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Interface name: IPsec when present
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nameVariable(@Nullable Output<String> nameVariable) {
            $.nameVariable = nameVariable;
            return this;
        }

        /**
         * @param nameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nameVariable(String nameVariable) {
            return nameVariable(Output.of(nameVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param sigProvider SIG Tunnel Provider
         *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
         *   - Default value: `secure-internet-gateway-umbrella`
         * 
         * @return builder
         * 
         */
        public Builder sigProvider(@Nullable Output<String> sigProvider) {
            $.sigProvider = sigProvider;
            return this;
        }

        /**
         * @param sigProvider SIG Tunnel Provider
         *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
         *   - Default value: `secure-internet-gateway-umbrella`
         * 
         * @return builder
         * 
         */
        public Builder sigProvider(String sigProvider) {
            return sigProvider(Output.of(sigProvider));
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(@Nullable Output<Integer> tcpMss) {
            $.tcpMss = tcpMss;
            return this;
        }

        /**
         * @param tcpMss TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMss(Integer tcpMss) {
            return tcpMss(Output.of(tcpMss));
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(@Nullable Output<String> tcpMssVariable) {
            $.tcpMssVariable = tcpMssVariable;
            return this;
        }

        /**
         * @param tcpMssVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssVariable(String tcpMssVariable) {
            return tcpMssVariable(Output.of(tcpMssVariable));
        }

        /**
         * @param trackEnable Enable/disable SIG tracking
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder trackEnable(@Nullable Output<Boolean> trackEnable) {
            $.trackEnable = trackEnable;
            return this;
        }

        /**
         * @param trackEnable Enable/disable SIG tracking
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder trackEnable(Boolean trackEnable) {
            return trackEnable(Output.of(trackEnable));
        }

        /**
         * @param tracker Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder tracker(@Nullable Output<String> tracker) {
            $.tracker = tracker;
            return this;
        }

        /**
         * @param tracker Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder tracker(String tracker) {
            return tracker(Output.of(tracker));
        }

        /**
         * @param tunnelDcPreference SIG Tunnel Data Center
         *   - Choices: `primary-dc`, `secondary-dc`
         *   - Default value: `primary-dc`
         * 
         * @return builder
         * 
         */
        public Builder tunnelDcPreference(@Nullable Output<String> tunnelDcPreference) {
            $.tunnelDcPreference = tunnelDcPreference;
            return this;
        }

        /**
         * @param tunnelDcPreference SIG Tunnel Data Center
         *   - Choices: `primary-dc`, `secondary-dc`
         *   - Default value: `primary-dc`
         * 
         * @return builder
         * 
         */
        public Builder tunnelDcPreference(String tunnelDcPreference) {
            return tunnelDcPreference(Output.of(tunnelDcPreference));
        }

        /**
         * @param tunnelDestination Tunnel destination IP address
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestination(@Nullable Output<String> tunnelDestination) {
            $.tunnelDestination = tunnelDestination;
            return this;
        }

        /**
         * @param tunnelDestination Tunnel destination IP address
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestination(String tunnelDestination) {
            return tunnelDestination(Output.of(tunnelDestination));
        }

        /**
         * @param tunnelDestinationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationVariable(@Nullable Output<String> tunnelDestinationVariable) {
            $.tunnelDestinationVariable = tunnelDestinationVariable;
            return this;
        }

        /**
         * @param tunnelDestinationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationVariable(String tunnelDestinationVariable) {
            return tunnelDestinationVariable(Output.of(tunnelDestinationVariable));
        }

        /**
         * @param tunnelPublicIp Public IP required to setup GRE tunnel to Zscaler
         *   - Default value: `Auto`
         * 
         * @return builder
         * 
         */
        public Builder tunnelPublicIp(@Nullable Output<String> tunnelPublicIp) {
            $.tunnelPublicIp = tunnelPublicIp;
            return this;
        }

        /**
         * @param tunnelPublicIp Public IP required to setup GRE tunnel to Zscaler
         *   - Default value: `Auto`
         * 
         * @return builder
         * 
         */
        public Builder tunnelPublicIp(String tunnelPublicIp) {
            return tunnelPublicIp(Output.of(tunnelPublicIp));
        }

        /**
         * @param tunnelPublicIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelPublicIpVariable(@Nullable Output<String> tunnelPublicIpVariable) {
            $.tunnelPublicIpVariable = tunnelPublicIpVariable;
            return this;
        }

        /**
         * @param tunnelPublicIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelPublicIpVariable(String tunnelPublicIpVariable) {
            return tunnelPublicIpVariable(Output.of(tunnelPublicIpVariable));
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(@Nullable Output<String> tunnelRouteVia) {
            $.tunnelRouteVia = tunnelRouteVia;
            return this;
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            return tunnelRouteVia(Output.of(tunnelRouteVia));
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(@Nullable Output<String> tunnelRouteViaVariable) {
            $.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            return tunnelRouteViaVariable(Output.of(tunnelRouteViaVariable));
        }

        /**
         * @param tunnelSource Tunnel source IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelSource(@Nullable Output<String> tunnelSource) {
            $.tunnelSource = tunnelSource;
            return this;
        }

        /**
         * @param tunnelSource Tunnel source IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelSource(String tunnelSource) {
            return tunnelSource(Output.of(tunnelSource));
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(@Nullable Output<String> tunnelSourceInterface) {
            $.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            return tunnelSourceInterface(Output.of(tunnelSourceInterface));
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(@Nullable Output<String> tunnelSourceInterfaceVariable) {
            $.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            return tunnelSourceInterfaceVariable(Output.of(tunnelSourceInterfaceVariable));
        }

        /**
         * @param tunnelSourceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceVariable(@Nullable Output<String> tunnelSourceVariable) {
            $.tunnelSourceVariable = tunnelSourceVariable;
            return this;
        }

        /**
         * @param tunnelSourceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceVariable(String tunnelSourceVariable) {
            return tunnelSourceVariable(Output.of(tunnelSourceVariable));
        }

        public CiscoSecureInternetGatewayFeatureTemplateInterfaceArgs build() {
            return $;
        }
    }

}
