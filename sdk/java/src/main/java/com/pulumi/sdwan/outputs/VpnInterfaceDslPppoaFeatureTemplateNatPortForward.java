// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VpnInterfaceDslPppoaFeatureTemplateNatPortForward {
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Ending port of port range
     *   - Range: `0`-`65535`
     * 
     */
    private @Nullable Integer portEndRange;
    /**
     * @return Starting port of port range
     *   - Range: `0`-`65535`
     * 
     */
    private @Nullable Integer portStartRange;
    /**
     * @return Private IP Address to translate to
     * 
     */
    private @Nullable String privateIpAddress;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String privateIpAddressVariable;
    /**
     * @return VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     * 
     */
    private @Nullable Integer privateVpn;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String privateVpnVariable;
    /**
     * @return Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     * 
     */
    private @Nullable String protocol;

    private VpnInterfaceDslPppoaFeatureTemplateNatPortForward() {}
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Ending port of port range
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Integer> portEndRange() {
        return Optional.ofNullable(this.portEndRange);
    }
    /**
     * @return Starting port of port range
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Integer> portStartRange() {
        return Optional.ofNullable(this.portStartRange);
    }
    /**
     * @return Private IP Address to translate to
     * 
     */
    public Optional<String> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> privateIpAddressVariable() {
        return Optional.ofNullable(this.privateIpAddressVariable);
    }
    /**
     * @return VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Integer> privateVpn() {
        return Optional.ofNullable(this.privateVpn);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> privateVpnVariable() {
        return Optional.ofNullable(this.privateVpnVariable);
    }
    /**
     * @return Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     * 
     */
    public Optional<String> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VpnInterfaceDslPppoaFeatureTemplateNatPortForward defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean optional;
        private @Nullable Integer portEndRange;
        private @Nullable Integer portStartRange;
        private @Nullable String privateIpAddress;
        private @Nullable String privateIpAddressVariable;
        private @Nullable Integer privateVpn;
        private @Nullable String privateVpnVariable;
        private @Nullable String protocol;
        public Builder() {}
        public Builder(VpnInterfaceDslPppoaFeatureTemplateNatPortForward defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.optional = defaults.optional;
    	      this.portEndRange = defaults.portEndRange;
    	      this.portStartRange = defaults.portStartRange;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.privateIpAddressVariable = defaults.privateIpAddressVariable;
    	      this.privateVpn = defaults.privateVpn;
    	      this.privateVpnVariable = defaults.privateVpnVariable;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder portEndRange(@Nullable Integer portEndRange) {

            this.portEndRange = portEndRange;
            return this;
        }
        @CustomType.Setter
        public Builder portStartRange(@Nullable Integer portStartRange) {

            this.portStartRange = portStartRange;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(@Nullable String privateIpAddress) {

            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddressVariable(@Nullable String privateIpAddressVariable) {

            this.privateIpAddressVariable = privateIpAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder privateVpn(@Nullable Integer privateVpn) {

            this.privateVpn = privateVpn;
            return this;
        }
        @CustomType.Setter
        public Builder privateVpnVariable(@Nullable String privateVpnVariable) {

            this.privateVpnVariable = privateVpnVariable;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(@Nullable String protocol) {

            this.protocol = protocol;
            return this;
        }
        public VpnInterfaceDslPppoaFeatureTemplateNatPortForward build() {
            final var _resultValue = new VpnInterfaceDslPppoaFeatureTemplateNatPortForward();
            _resultValue.optional = optional;
            _resultValue.portEndRange = portEndRange;
            _resultValue.portStartRange = portStartRange;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.privateIpAddressVariable = privateIpAddressVariable;
            _resultValue.privateVpn = privateVpn;
            _resultValue.privateVpnVariable = privateVpnVariable;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
