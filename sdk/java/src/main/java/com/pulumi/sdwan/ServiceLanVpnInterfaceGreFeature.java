// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.ServiceLanVpnInterfaceGreFeatureArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.ServiceLanVpnInterfaceGreFeatureState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a Service LAN VPN Interface GRE Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.ServiceLanVpnInterfaceGreFeature;
 * import com.pulumi.sdwan.ServiceLanVpnInterfaceGreFeatureArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new ServiceLanVpnInterfaceGreFeature("example", ServiceLanVpnInterfaceGreFeatureArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .featureProfileId("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
 *             .serviceLanVpnFeatureId("140331f6-5418-4755-a059-13c77eb96037")
 *             .interfaceName("gre1")
 *             .interfaceDescription("gre1")
 *             .ipv4Address("70.1.1.1")
 *             .ipv4SubnetMask("255.255.255.0")
 *             .shutdown(true)
 *             .tunnelSourceIpv4Address("78.1.1.1")
 *             .tunnelDestinationIpv4Address("79.1.1.1")
 *             .ipMtu(1500)
 *             .tcpMss(1460)
 *             .clearDontFragment(false)
 *             .applicationTunnelType("none")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Expected import identifier with the format: &#34;service_lan_vpn_interface_gre_feature_id,feature_profile_id,service_lan_vpn_feature_id&#34;
 * 
 * ```sh
 * $ pulumi import sdwan:index/serviceLanVpnInterfaceGreFeature:ServiceLanVpnInterfaceGreFeature example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/serviceLanVpnInterfaceGreFeature:ServiceLanVpnInterfaceGreFeature")
public class ServiceLanVpnInterfaceGreFeature extends com.pulumi.resources.CustomResource {
    /**
     * Enable Application Tunnel Type - Choices: `none`, `sig`
     * 
     */
    @Export(name="applicationTunnelType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> applicationTunnelType;

    /**
     * @return Enable Application Tunnel Type - Choices: `none`, `sig`
     * 
     */
    public Output<Optional<String>> applicationTunnelType() {
        return Codegen.optional(this.applicationTunnelType);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="applicationTunnelTypeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> applicationTunnelTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> applicationTunnelTypeVariable() {
        return Codegen.optional(this.applicationTunnelTypeVariable);
    }
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Export(name="clearDontFragment", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> clearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> clearDontFragment() {
        return Codegen.optional(this.clearDontFragment);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="clearDontFragmentVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> clearDontFragmentVariable() {
        return Codegen.optional(this.clearDontFragmentVariable);
    }
    /**
     * The description of the Feature
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Feature Profile ID
     * 
     */
    @Export(name="featureProfileId", refs={String.class}, tree="[0]")
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * Interface description
     * 
     */
    @Export(name="interfaceDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Output<Optional<String>> interfaceDescription() {
        return Codegen.optional(this.interfaceDescription);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceDescriptionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceDescriptionVariable() {
        return Codegen.optional(this.interfaceDescriptionVariable);
    }
    /**
     * Interface name (1..255)
     * 
     */
    @Export(name="interfaceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceName;

    /**
     * @return Interface name (1..255)
     * 
     */
    public Output<Optional<String>> interfaceName() {
        return Codegen.optional(this.interfaceName);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceNameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceNameVariable() {
        return Codegen.optional(this.interfaceNameVariable);
    }
    /**
     * Interface MTU &lt;576..9976&gt;, in bytes - Range: `576`-`9976` - Default value: `1500`
     * 
     */
    @Export(name="ipMtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipMtu;

    /**
     * @return Interface MTU &lt;576..9976&gt;, in bytes - Range: `576`-`9976` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> ipMtu() {
        return Codegen.optional(this.ipMtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipMtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipMtuVariable() {
        return Codegen.optional(this.ipMtuVariable);
    }
    @Export(name="ipv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4Address;

    public Output<Optional<String>> ipv4Address() {
        return Codegen.optional(this.ipv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4AddressVariable() {
        return Codegen.optional(this.ipv4AddressVariable);
    }
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     *   `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     *   `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     *   `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     *   `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Export(name="ipv4SubnetMask", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Output<Optional<String>> ipv4SubnetMask() {
        return Codegen.optional(this.ipv4SubnetMask);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4SubnetMaskVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4SubnetMaskVariable() {
        return Codegen.optional(this.ipv4SubnetMaskVariable);
    }
    /**
     * The name of the Feature
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Service LAN VPN Feature ID
     * 
     */
    @Export(name="serviceLanVpnFeatureId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> serviceLanVpnFeatureId;

    /**
     * @return Service LAN VPN Feature ID
     * 
     */
    public Output<Optional<String>> serviceLanVpnFeatureId() {
        return Codegen.optional(this.serviceLanVpnFeatureId);
    }
    /**
     * Administrative state - Default value: `false`
     * 
     */
    @Export(name="shutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> shutdown() {
        return Codegen.optional(this.shutdown);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shutdownVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shutdownVariable() {
        return Codegen.optional(this.shutdownVariable);
    }
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Export(name="tcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tcpMss() {
        return Codegen.optional(this.tcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpMssVariable() {
        return Codegen.optional(this.tcpMssVariable);
    }
    /**
     * Tunnel destination IP Address
     * 
     */
    @Export(name="tunnelDestinationIpv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationIpv4Address;

    /**
     * @return Tunnel destination IP Address
     * 
     */
    public Output<Optional<String>> tunnelDestinationIpv4Address() {
        return Codegen.optional(this.tunnelDestinationIpv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelDestinationIpv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelDestinationIpv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelDestinationIpv4AddressVariable() {
        return Codegen.optional(this.tunnelDestinationIpv4AddressVariable);
    }
    /**
     * &lt;1..32 characters&gt; Interface name, can&#39;t be Loopback interface
     * 
     */
    @Export(name="tunnelRouteViaLoopback", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelRouteViaLoopback;

    /**
     * @return &lt;1..32 characters&gt; Interface name, can&#39;t be Loopback interface
     * 
     */
    public Output<Optional<String>> tunnelRouteViaLoopback() {
        return Codegen.optional(this.tunnelRouteViaLoopback);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelRouteViaLoopbackVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelRouteViaLoopbackVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelRouteViaLoopbackVariable() {
        return Codegen.optional(this.tunnelRouteViaLoopbackVariable);
    }
    /**
     * &lt;1..32 characters&gt; Interface name
     * 
     */
    @Export(name="tunnelSourceInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name
     * 
     */
    public Output<Optional<String>> tunnelSourceInterface() {
        return Codegen.optional(this.tunnelSourceInterface);
    }
    /**
     * &lt;1..32 characters&gt; Interface name
     * 
     */
    @Export(name="tunnelSourceInterfaceLoopback", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterfaceLoopback;

    /**
     * @return &lt;1..32 characters&gt; Interface name
     * 
     */
    public Output<Optional<String>> tunnelSourceInterfaceLoopback() {
        return Codegen.optional(this.tunnelSourceInterfaceLoopback);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceInterfaceLoopbackVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterfaceLoopbackVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceInterfaceLoopbackVariable() {
        return Codegen.optional(this.tunnelSourceInterfaceLoopbackVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceInterfaceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceInterfaceVariable() {
        return Codegen.optional(this.tunnelSourceInterfaceVariable);
    }
    /**
     * Tunnel source IP Address
     * 
     */
    @Export(name="tunnelSourceIpv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceIpv4Address;

    /**
     * @return Tunnel source IP Address
     * 
     */
    public Output<Optional<String>> tunnelSourceIpv4Address() {
        return Codegen.optional(this.tunnelSourceIpv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelSourceIpv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelSourceIpv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelSourceIpv4AddressVariable() {
        return Codegen.optional(this.tunnelSourceIpv4AddressVariable);
    }
    /**
     * The version of the Feature
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the Feature
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceLanVpnInterfaceGreFeature(java.lang.String name) {
        this(name, ServiceLanVpnInterfaceGreFeatureArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceLanVpnInterfaceGreFeature(java.lang.String name, ServiceLanVpnInterfaceGreFeatureArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceLanVpnInterfaceGreFeature(java.lang.String name, ServiceLanVpnInterfaceGreFeatureArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/serviceLanVpnInterfaceGreFeature:ServiceLanVpnInterfaceGreFeature", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private ServiceLanVpnInterfaceGreFeature(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceLanVpnInterfaceGreFeatureState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/serviceLanVpnInterfaceGreFeature:ServiceLanVpnInterfaceGreFeature", name, state, makeResourceOptions(options, id), false);
    }

    private static ServiceLanVpnInterfaceGreFeatureArgs makeArgs(ServiceLanVpnInterfaceGreFeatureArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ServiceLanVpnInterfaceGreFeatureArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceLanVpnInterfaceGreFeature get(java.lang.String name, Output<java.lang.String> id, @Nullable ServiceLanVpnInterfaceGreFeatureState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceLanVpnInterfaceGreFeature(name, id, state, options);
    }
}
