// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs Empty = new CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs();

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Network Prefix Length
     *   - Range: `1`-`32`
     * 
     */
    @Import(name="prefixLength")
    private @Nullable Output<Integer> prefixLength;

    /**
     * @return Network Prefix Length
     *   - Range: `1`-`32`
     * 
     */
    public Optional<Output<Integer>> prefixLength() {
        return Optional.ofNullable(this.prefixLength);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="prefixLengthVariable")
    private @Nullable Output<String> prefixLengthVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> prefixLengthVariable() {
        return Optional.ofNullable(this.prefixLengthVariable);
    }

    /**
     * Source IP Subnet to be translated
     * 
     */
    @Import(name="sourceIpSubnet")
    private @Nullable Output<String> sourceIpSubnet;

    /**
     * @return Source IP Subnet to be translated
     * 
     */
    public Optional<Output<String>> sourceIpSubnet() {
        return Optional.ofNullable(this.sourceIpSubnet);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="sourceIpSubnetVariable")
    private @Nullable Output<String> sourceIpSubnetVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> sourceIpSubnetVariable() {
        return Optional.ofNullable(this.sourceIpSubnetVariable);
    }

    /**
     * Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     * 
     */
    @Import(name="staticNatDirection")
    private @Nullable Output<String> staticNatDirection;

    /**
     * @return Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     * 
     */
    public Optional<Output<String>> staticNatDirection() {
        return Optional.ofNullable(this.staticNatDirection);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="staticNatDirectionVariable")
    private @Nullable Output<String> staticNatDirectionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> staticNatDirectionVariable() {
        return Optional.ofNullable(this.staticNatDirectionVariable);
    }

    /**
     * Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     * 
     */
    @Import(name="trackerId")
    private @Nullable Output<Integer> trackerId;

    /**
     * @return Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> trackerId() {
        return Optional.ofNullable(this.trackerId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerIdVariable")
    private @Nullable Output<String> trackerIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerIdVariable() {
        return Optional.ofNullable(this.trackerIdVariable);
    }

    /**
     * Statically translated source IP Subnet
     * 
     */
    @Import(name="translateIpSubnet")
    private @Nullable Output<String> translateIpSubnet;

    /**
     * @return Statically translated source IP Subnet
     * 
     */
    public Optional<Output<String>> translateIpSubnet() {
        return Optional.ofNullable(this.translateIpSubnet);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="translateIpSubnetVariable")
    private @Nullable Output<String> translateIpSubnetVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> translateIpSubnetVariable() {
        return Optional.ofNullable(this.translateIpSubnetVariable);
    }

    private CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs() {}

    private CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs(CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs $) {
        this.optional = $.optional;
        this.prefixLength = $.prefixLength;
        this.prefixLengthVariable = $.prefixLengthVariable;
        this.sourceIpSubnet = $.sourceIpSubnet;
        this.sourceIpSubnetVariable = $.sourceIpSubnetVariable;
        this.staticNatDirection = $.staticNatDirection;
        this.staticNatDirectionVariable = $.staticNatDirectionVariable;
        this.trackerId = $.trackerId;
        this.trackerIdVariable = $.trackerIdVariable;
        this.translateIpSubnet = $.translateIpSubnet;
        this.translateIpSubnetVariable = $.translateIpSubnetVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs $;

        public Builder() {
            $ = new CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs();
        }

        public Builder(CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs defaults) {
            $ = new CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param prefixLength Network Prefix Length
         *   - Range: `1`-`32`
         * 
         * @return builder
         * 
         */
        public Builder prefixLength(@Nullable Output<Integer> prefixLength) {
            $.prefixLength = prefixLength;
            return this;
        }

        /**
         * @param prefixLength Network Prefix Length
         *   - Range: `1`-`32`
         * 
         * @return builder
         * 
         */
        public Builder prefixLength(Integer prefixLength) {
            return prefixLength(Output.of(prefixLength));
        }

        /**
         * @param prefixLengthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder prefixLengthVariable(@Nullable Output<String> prefixLengthVariable) {
            $.prefixLengthVariable = prefixLengthVariable;
            return this;
        }

        /**
         * @param prefixLengthVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder prefixLengthVariable(String prefixLengthVariable) {
            return prefixLengthVariable(Output.of(prefixLengthVariable));
        }

        /**
         * @param sourceIpSubnet Source IP Subnet to be translated
         * 
         * @return builder
         * 
         */
        public Builder sourceIpSubnet(@Nullable Output<String> sourceIpSubnet) {
            $.sourceIpSubnet = sourceIpSubnet;
            return this;
        }

        /**
         * @param sourceIpSubnet Source IP Subnet to be translated
         * 
         * @return builder
         * 
         */
        public Builder sourceIpSubnet(String sourceIpSubnet) {
            return sourceIpSubnet(Output.of(sourceIpSubnet));
        }

        /**
         * @param sourceIpSubnetVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceIpSubnetVariable(@Nullable Output<String> sourceIpSubnetVariable) {
            $.sourceIpSubnetVariable = sourceIpSubnetVariable;
            return this;
        }

        /**
         * @param sourceIpSubnetVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder sourceIpSubnetVariable(String sourceIpSubnetVariable) {
            return sourceIpSubnetVariable(Output.of(sourceIpSubnetVariable));
        }

        /**
         * @param staticNatDirection Direction of static NAT translation
         *   - Choices: `inside`, `outside`
         * 
         * @return builder
         * 
         */
        public Builder staticNatDirection(@Nullable Output<String> staticNatDirection) {
            $.staticNatDirection = staticNatDirection;
            return this;
        }

        /**
         * @param staticNatDirection Direction of static NAT translation
         *   - Choices: `inside`, `outside`
         * 
         * @return builder
         * 
         */
        public Builder staticNatDirection(String staticNatDirection) {
            return staticNatDirection(Output.of(staticNatDirection));
        }

        /**
         * @param staticNatDirectionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder staticNatDirectionVariable(@Nullable Output<String> staticNatDirectionVariable) {
            $.staticNatDirectionVariable = staticNatDirectionVariable;
            return this;
        }

        /**
         * @param staticNatDirectionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder staticNatDirectionVariable(String staticNatDirectionVariable) {
            return staticNatDirectionVariable(Output.of(staticNatDirectionVariable));
        }

        /**
         * @param trackerId Add Object/Object Group Tracker
         *   - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder trackerId(@Nullable Output<Integer> trackerId) {
            $.trackerId = trackerId;
            return this;
        }

        /**
         * @param trackerId Add Object/Object Group Tracker
         *   - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder trackerId(Integer trackerId) {
            return trackerId(Output.of(trackerId));
        }

        /**
         * @param trackerIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerIdVariable(@Nullable Output<String> trackerIdVariable) {
            $.trackerIdVariable = trackerIdVariable;
            return this;
        }

        /**
         * @param trackerIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerIdVariable(String trackerIdVariable) {
            return trackerIdVariable(Output.of(trackerIdVariable));
        }

        /**
         * @param translateIpSubnet Statically translated source IP Subnet
         * 
         * @return builder
         * 
         */
        public Builder translateIpSubnet(@Nullable Output<String> translateIpSubnet) {
            $.translateIpSubnet = translateIpSubnet;
            return this;
        }

        /**
         * @param translateIpSubnet Statically translated source IP Subnet
         * 
         * @return builder
         * 
         */
        public Builder translateIpSubnet(String translateIpSubnet) {
            return translateIpSubnet(Output.of(translateIpSubnet));
        }

        /**
         * @param translateIpSubnetVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder translateIpSubnetVariable(@Nullable Output<String> translateIpSubnetVariable) {
            $.translateIpSubnetVariable = translateIpSubnetVariable;
            return this;
        }

        /**
         * @param translateIpSubnetVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder translateIpSubnetVariable(String translateIpSubnetVariable) {
            return translateIpSubnetVariable(Output.of(translateIpSubnetVariable));
        }

        public CiscoVpnFeatureTemplateStaticNatSubnetRuleArgs build() {
            return $;
        }
    }

}
