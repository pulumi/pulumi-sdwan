// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoDhcpServerFeatureTemplateOption;
import com.pulumi.sdwan.outputs.GetCiscoDhcpServerFeatureTemplateStaticLease;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoDhcpServerFeatureTemplateResult {
    /**
     * @return Configure IPv4 prefix range of the DHCP address pool
     * 
     */
    private String addressPool;
    /**
     * @return Variable name
     * 
     */
    private String addressPoolVariable;
    /**
     * @return Set IP address of default gateway
     * 
     */
    private String defaultGateway;
    /**
     * @return Variable name
     * 
     */
    private String defaultGatewayVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Configure one or more DNS server IP addresses
     * 
     */
    private List<String> dnsServers;
    /**
     * @return Variable name
     * 
     */
    private String dnsServersVariable;
    /**
     * @return Set domain name client uses to resolve hostnames
     * 
     */
    private String domainName;
    /**
     * @return Variable name
     * 
     */
    private String domainNameVariable;
    /**
     * @return Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    private List<String> excludeAddresses;
    /**
     * @return Variable name
     * 
     */
    private String excludeAddressesVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Set MTU on interface to DHCP client
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    /**
     * @return Configure how long a DHCP-assigned IP address is valid
     * 
     */
    private Integer leaseTime;
    /**
     * @return Variable name
     * 
     */
    private String leaseTimeVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Configure Options Code
     * 
     */
    private List<GetCiscoDhcpServerFeatureTemplateOption> options;
    /**
     * @return Configure static IP addresses
     * 
     */
    private List<GetCiscoDhcpServerFeatureTemplateStaticLease> staticLeases;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Configure TFTP server IP addresses
     * 
     */
    private List<String> tftpServers;
    /**
     * @return Variable name
     * 
     */
    private String tftpServersVariable;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoDhcpServerFeatureTemplateResult() {}
    /**
     * @return Configure IPv4 prefix range of the DHCP address pool
     * 
     */
    public String addressPool() {
        return this.addressPool;
    }
    /**
     * @return Variable name
     * 
     */
    public String addressPoolVariable() {
        return this.addressPoolVariable;
    }
    /**
     * @return Set IP address of default gateway
     * 
     */
    public String defaultGateway() {
        return this.defaultGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultGatewayVariable() {
        return this.defaultGatewayVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Configure one or more DNS server IP addresses
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Variable name
     * 
     */
    public String dnsServersVariable() {
        return this.dnsServersVariable;
    }
    /**
     * @return Set domain name client uses to resolve hostnames
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return Variable name
     * 
     */
    public String domainNameVariable() {
        return this.domainNameVariable;
    }
    /**
     * @return Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    public List<String> excludeAddresses() {
        return this.excludeAddresses;
    }
    /**
     * @return Variable name
     * 
     */
    public String excludeAddressesVariable() {
        return this.excludeAddressesVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set MTU on interface to DHCP client
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    /**
     * @return Configure how long a DHCP-assigned IP address is valid
     * 
     */
    public Integer leaseTime() {
        return this.leaseTime;
    }
    /**
     * @return Variable name
     * 
     */
    public String leaseTimeVariable() {
        return this.leaseTimeVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Configure Options Code
     * 
     */
    public List<GetCiscoDhcpServerFeatureTemplateOption> options() {
        return this.options;
    }
    /**
     * @return Configure static IP addresses
     * 
     */
    public List<GetCiscoDhcpServerFeatureTemplateStaticLease> staticLeases() {
        return this.staticLeases;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Configure TFTP server IP addresses
     * 
     */
    public List<String> tftpServers() {
        return this.tftpServers;
    }
    /**
     * @return Variable name
     * 
     */
    public String tftpServersVariable() {
        return this.tftpServersVariable;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoDhcpServerFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addressPool;
        private String addressPoolVariable;
        private String defaultGateway;
        private String defaultGatewayVariable;
        private String description;
        private List<String> deviceTypes;
        private List<String> dnsServers;
        private String dnsServersVariable;
        private String domainName;
        private String domainNameVariable;
        private List<String> excludeAddresses;
        private String excludeAddressesVariable;
        private String id;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private Integer leaseTime;
        private String leaseTimeVariable;
        private String name;
        private List<GetCiscoDhcpServerFeatureTemplateOption> options;
        private List<GetCiscoDhcpServerFeatureTemplateStaticLease> staticLeases;
        private String templateType;
        private List<String> tftpServers;
        private String tftpServersVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoDhcpServerFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressPool = defaults.addressPool;
    	      this.addressPoolVariable = defaults.addressPoolVariable;
    	      this.defaultGateway = defaults.defaultGateway;
    	      this.defaultGatewayVariable = defaults.defaultGatewayVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.dnsServers = defaults.dnsServers;
    	      this.dnsServersVariable = defaults.dnsServersVariable;
    	      this.domainName = defaults.domainName;
    	      this.domainNameVariable = defaults.domainNameVariable;
    	      this.excludeAddresses = defaults.excludeAddresses;
    	      this.excludeAddressesVariable = defaults.excludeAddressesVariable;
    	      this.id = defaults.id;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.leaseTime = defaults.leaseTime;
    	      this.leaseTimeVariable = defaults.leaseTimeVariable;
    	      this.name = defaults.name;
    	      this.options = defaults.options;
    	      this.staticLeases = defaults.staticLeases;
    	      this.templateType = defaults.templateType;
    	      this.tftpServers = defaults.tftpServers;
    	      this.tftpServersVariable = defaults.tftpServersVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder addressPool(String addressPool) {
            if (addressPool == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "addressPool");
            }
            this.addressPool = addressPool;
            return this;
        }
        @CustomType.Setter
        public Builder addressPoolVariable(String addressPoolVariable) {
            if (addressPoolVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "addressPoolVariable");
            }
            this.addressPoolVariable = addressPoolVariable;
            return this;
        }
        @CustomType.Setter
        public Builder defaultGateway(String defaultGateway) {
            if (defaultGateway == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "defaultGateway");
            }
            this.defaultGateway = defaultGateway;
            return this;
        }
        @CustomType.Setter
        public Builder defaultGatewayVariable(String defaultGatewayVariable) {
            if (defaultGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "defaultGatewayVariable");
            }
            this.defaultGatewayVariable = defaultGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder dnsServersVariable(String dnsServersVariable) {
            if (dnsServersVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "dnsServersVariable");
            }
            this.dnsServersVariable = dnsServersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder domainNameVariable(String domainNameVariable) {
            if (domainNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "domainNameVariable");
            }
            this.domainNameVariable = domainNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder excludeAddresses(List<String> excludeAddresses) {
            if (excludeAddresses == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "excludeAddresses");
            }
            this.excludeAddresses = excludeAddresses;
            return this;
        }
        public Builder excludeAddresses(String... excludeAddresses) {
            return excludeAddresses(List.of(excludeAddresses));
        }
        @CustomType.Setter
        public Builder excludeAddressesVariable(String excludeAddressesVariable) {
            if (excludeAddressesVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "excludeAddressesVariable");
            }
            this.excludeAddressesVariable = excludeAddressesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder leaseTime(Integer leaseTime) {
            if (leaseTime == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "leaseTime");
            }
            this.leaseTime = leaseTime;
            return this;
        }
        @CustomType.Setter
        public Builder leaseTimeVariable(String leaseTimeVariable) {
            if (leaseTimeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "leaseTimeVariable");
            }
            this.leaseTimeVariable = leaseTimeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder options(List<GetCiscoDhcpServerFeatureTemplateOption> options) {
            if (options == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "options");
            }
            this.options = options;
            return this;
        }
        public Builder options(GetCiscoDhcpServerFeatureTemplateOption... options) {
            return options(List.of(options));
        }
        @CustomType.Setter
        public Builder staticLeases(List<GetCiscoDhcpServerFeatureTemplateStaticLease> staticLeases) {
            if (staticLeases == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "staticLeases");
            }
            this.staticLeases = staticLeases;
            return this;
        }
        public Builder staticLeases(GetCiscoDhcpServerFeatureTemplateStaticLease... staticLeases) {
            return staticLeases(List.of(staticLeases));
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder tftpServers(List<String> tftpServers) {
            if (tftpServers == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "tftpServers");
            }
            this.tftpServers = tftpServers;
            return this;
        }
        public Builder tftpServers(String... tftpServers) {
            return tftpServers(List.of(tftpServers));
        }
        @CustomType.Setter
        public Builder tftpServersVariable(String tftpServersVariable) {
            if (tftpServersVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "tftpServersVariable");
            }
            this.tftpServersVariable = tftpServersVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoDhcpServerFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoDhcpServerFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoDhcpServerFeatureTemplateResult();
            _resultValue.addressPool = addressPool;
            _resultValue.addressPoolVariable = addressPoolVariable;
            _resultValue.defaultGateway = defaultGateway;
            _resultValue.defaultGatewayVariable = defaultGatewayVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.dnsServers = dnsServers;
            _resultValue.dnsServersVariable = dnsServersVariable;
            _resultValue.domainName = domainName;
            _resultValue.domainNameVariable = domainNameVariable;
            _resultValue.excludeAddresses = excludeAddresses;
            _resultValue.excludeAddressesVariable = excludeAddressesVariable;
            _resultValue.id = id;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.leaseTime = leaseTime;
            _resultValue.leaseTimeVariable = leaseTimeVariable;
            _resultValue.name = name;
            _resultValue.options = options;
            _resultValue.staticLeases = staticLeases;
            _resultValue.templateType = templateType;
            _resultValue.tftpServers = tftpServers;
            _resultValue.tftpServersVariable = tftpServersVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
