// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.TransportManagementVpnInterfaceEthernetProfileParcelArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.TransportManagementVpnInterfaceEthernetProfileParcelState;
import com.pulumi.sdwan.outputs.TransportManagementVpnInterfaceEthernetProfileParcelArpEntry;
import com.pulumi.sdwan.outputs.TransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddress;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a Transport Management VPN Interface Ethernet profile parcel.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.TransportManagementVpnInterfaceEthernetProfileParcel;
 * import com.pulumi.sdwan.TransportManagementVpnInterfaceEthernetProfileParcelArgs;
 * import com.pulumi.sdwan.inputs.TransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddressArgs;
 * import com.pulumi.sdwan.inputs.TransportManagementVpnInterfaceEthernetProfileParcelArpEntryArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new TransportManagementVpnInterfaceEthernetProfileParcel("example", TransportManagementVpnInterfaceEthernetProfileParcelArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .featureProfileId("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
 *             .transportManagementVpnProfileParcelId("140331f6-5418-4755-a059-13c77eb96037")
 *             .shutdown(true)
 *             .interfaceName("GigabitEthernet1")
 *             .basicConfigurationDescription("Transport Management VPN Interface Ethernet")
 *             .ipv4Address("1.2.3.4")
 *             .ipv4SubnetMask("0.0.0.0")
 *             .ipv4SecondaryAddresses(TransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddressArgs.builder()
 *                 .address("1.2.3.4")
 *                 .subnet_mask("0.0.0.0")
 *                 .build())
 *             .ipv4DhcpHelpers("1.2.3.4")
 *             .ipv4IperfServer("example")
 *             .ipv4AutoDetectBandwidth(false)
 *             .ipv6Address("2001:0:0:1::/64")
 *             .arpEntries(TransportManagementVpnInterfaceEthernetProfileParcelArpEntryArgs.builder()
 *                 .ip_address("1.2.3.4")
 *                 .mac_address("00-B0-D0-63-C2-26")
 *                 .build())
 *             .duplex("full")
 *             .macAddress("00-B0-D0-63-C2-26")
 *             .ipMtu(1500)
 *             .interfaceMtu(1500)
 *             .tcpMss(505)
 *             .speed("2500")
 *             .arpTimeout(1200)
 *             .autonegotiate(false)
 *             .mediaType("rj45")
 *             .loadInterval(30)
 *             .icmpRedirectDisable(true)
 *             .ipDirectedBroadcast(false)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import sdwan:index/transportManagementVpnInterfaceEthernetProfileParcel:TransportManagementVpnInterfaceEthernetProfileParcel example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/transportManagementVpnInterfaceEthernetProfileParcel:TransportManagementVpnInterfaceEthernetProfileParcel")
public class TransportManagementVpnInterfaceEthernetProfileParcel extends com.pulumi.resources.CustomResource {
    /**
     * Configure ARP entries
     * 
     */
    @Export(name="arpEntries", refs={List.class,TransportManagementVpnInterfaceEthernetProfileParcelArpEntry.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TransportManagementVpnInterfaceEthernetProfileParcelArpEntry>> arpEntries;

    /**
     * @return Configure ARP entries
     * 
     */
    public Output<Optional<List<TransportManagementVpnInterfaceEthernetProfileParcelArpEntry>>> arpEntries() {
        return Codegen.optional(this.arpEntries);
    }
    /**
     * Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds - Range: `0`-`2147483` - Default value: `1200`
     * 
     */
    @Export(name="arpTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> arpTimeout;

    /**
     * @return Timeout value for dynamically learned ARP entries, &lt;0..2678400&gt; seconds - Range: `0`-`2147483` - Default value: `1200`
     * 
     */
    public Output<Optional<Integer>> arpTimeout() {
        return Codegen.optional(this.arpTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="arpTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> arpTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> arpTimeoutVariable() {
        return Codegen.optional(this.arpTimeoutVariable);
    }
    /**
     * Link autonegotiation
     * 
     */
    @Export(name="autonegotiate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> autonegotiate;

    /**
     * @return Link autonegotiation
     * 
     */
    public Output<Optional<Boolean>> autonegotiate() {
        return Codegen.optional(this.autonegotiate);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="autonegotiateVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> autonegotiateVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> autonegotiateVariable() {
        return Codegen.optional(this.autonegotiateVariable);
    }
    @Export(name="basicConfigurationDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> basicConfigurationDescription;

    public Output<Optional<String>> basicConfigurationDescription() {
        return Codegen.optional(this.basicConfigurationDescription);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="basicConfigurationDescriptionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> basicConfigurationDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> basicConfigurationDescriptionVariable() {
        return Codegen.optional(this.basicConfigurationDescriptionVariable);
    }
    /**
     * The description of the profile parcel
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the profile parcel
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Duplex mode - Choices: `full`, `half`, `auto`
     * 
     */
    @Export(name="duplex", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> duplex;

    /**
     * @return Duplex mode - Choices: `full`, `half`, `auto`
     * 
     */
    public Output<Optional<String>> duplex() {
        return Codegen.optional(this.duplex);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="duplexVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> duplexVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> duplexVariable() {
        return Codegen.optional(this.duplexVariable);
    }
    /**
     * Enable DHCPv6
     * 
     */
    @Export(name="enableDhcpv6", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableDhcpv6;

    /**
     * @return Enable DHCPv6
     * 
     */
    public Output<Optional<Boolean>> enableDhcpv6() {
        return Codegen.optional(this.enableDhcpv6);
    }
    /**
     * Feature Profile ID
     * 
     */
    @Export(name="featureProfileId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<Optional<String>> featureProfileId() {
        return Codegen.optional(this.featureProfileId);
    }
    /**
     * ICMP/ICMPv6 Redirect Disable - Default value: `true`
     * 
     */
    @Export(name="icmpRedirectDisable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> icmpRedirectDisable;

    /**
     * @return ICMP/ICMPv6 Redirect Disable - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> icmpRedirectDisable() {
        return Codegen.optional(this.icmpRedirectDisable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="icmpRedirectDisableVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> icmpRedirectDisableVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> icmpRedirectDisableVariable() {
        return Codegen.optional(this.icmpRedirectDisableVariable);
    }
    /**
     * Interface MTU - Range: `1500`-`9216` - Default value: `1500`
     * 
     */
    @Export(name="interfaceMtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> interfaceMtu;

    /**
     * @return Interface MTU - Range: `1500`-`9216` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> interfaceMtu() {
        return Codegen.optional(this.interfaceMtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceMtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceMtuVariable() {
        return Codegen.optional(this.interfaceMtuVariable);
    }
    @Export(name="interfaceName", refs={String.class}, tree="[0]")
    private Output<String> interfaceName;

    public Output<String> interfaceName() {
        return this.interfaceName;
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceNameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceNameVariable() {
        return Codegen.optional(this.interfaceNameVariable);
    }
    /**
     * IP Directed-Broadcast - Default value: `false`
     * 
     */
    @Export(name="ipDirectedBroadcast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ipDirectedBroadcast;

    /**
     * @return IP Directed-Broadcast - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> ipDirectedBroadcast() {
        return Codegen.optional(this.ipDirectedBroadcast);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipDirectedBroadcastVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipDirectedBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipDirectedBroadcastVariable() {
        return Codegen.optional(this.ipDirectedBroadcastVariable);
    }
    /**
     * IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
     * &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    @Export(name="ipMtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipMtu;

    /**
     * @return IP MTU for GigabitEthernet main &lt;576..Interface MTU&gt;, GigabitEthernet subinterface &lt;576..9216&gt;, Other Interfaces
     * &lt;576..2000&gt; in bytes - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> ipMtu() {
        return Codegen.optional(this.ipMtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipMtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipMtuVariable() {
        return Codegen.optional(this.ipMtuVariable);
    }
    /**
     * IP Address
     * 
     */
    @Export(name="ipv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4Address;

    /**
     * @return IP Address
     * 
     */
    public Output<Optional<String>> ipv4Address() {
        return Codegen.optional(this.ipv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4AddressVariable() {
        return Codegen.optional(this.ipv4AddressVariable);
    }
    /**
     * Interface auto detect bandwidth - Default value: `false`
     * 
     */
    @Export(name="ipv4AutoDetectBandwidth", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ipv4AutoDetectBandwidth;

    /**
     * @return Interface auto detect bandwidth - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> ipv4AutoDetectBandwidth() {
        return Codegen.optional(this.ipv4AutoDetectBandwidth);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4AutoDetectBandwidthVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4AutoDetectBandwidthVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4AutoDetectBandwidthVariable() {
        return Codegen.optional(this.ipv4AutoDetectBandwidthVariable);
    }
    /**
     * DHCP Distance - Range: `1`-`65536`
     * 
     */
    @Export(name="ipv4DhcpDistance", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipv4DhcpDistance;

    /**
     * @return DHCP Distance - Range: `1`-`65536`
     * 
     */
    public Output<Optional<Integer>> ipv4DhcpDistance() {
        return Codegen.optional(this.ipv4DhcpDistance);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4DhcpDistanceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4DhcpDistanceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4DhcpDistanceVariable() {
        return Codegen.optional(this.ipv4DhcpDistanceVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4DhcpHelperVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4DhcpHelperVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4DhcpHelperVariable() {
        return Codegen.optional(this.ipv4DhcpHelperVariable);
    }
    /**
     * List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    @Export(name="ipv4DhcpHelpers", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> ipv4DhcpHelpers;

    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    public Output<Optional<List<String>>> ipv4DhcpHelpers() {
        return Codegen.optional(this.ipv4DhcpHelpers);
    }
    /**
     * Iperf server for auto bandwidth detect
     * 
     */
    @Export(name="ipv4IperfServer", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4IperfServer;

    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    public Output<Optional<String>> ipv4IperfServer() {
        return Codegen.optional(this.ipv4IperfServer);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4IperfServerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4IperfServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4IperfServerVariable() {
        return Codegen.optional(this.ipv4IperfServerVariable);
    }
    /**
     * Secondary IpV4 Addresses
     * 
     */
    @Export(name="ipv4SecondaryAddresses", refs={List.class,TransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddress.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddress>> ipv4SecondaryAddresses;

    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    public Output<Optional<List<TransportManagementVpnInterfaceEthernetProfileParcelIpv4SecondaryAddress>>> ipv4SecondaryAddresses() {
        return Codegen.optional(this.ipv4SecondaryAddresses);
    }
    /**
     * Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Export(name="ipv4SubnetMask", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMask;

    /**
     * @return Subnet Mask - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Output<Optional<String>> ipv4SubnetMask() {
        return Codegen.optional(this.ipv4SubnetMask);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4SubnetMaskVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4SubnetMaskVariable() {
        return Codegen.optional(this.ipv4SubnetMaskVariable);
    }
    /**
     * IPv6 Address Secondary
     * 
     */
    @Export(name="ipv6Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv6Address;

    /**
     * @return IPv6 Address Secondary
     * 
     */
    public Output<Optional<String>> ipv6Address() {
        return Codegen.optional(this.ipv6Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv6AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv6AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv6AddressVariable() {
        return Codegen.optional(this.ipv6AddressVariable);
    }
    /**
     * Interval for interface load calculation - Range: `30`-`600` - Default value: `30`
     * 
     */
    @Export(name="loadInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> loadInterval;

    /**
     * @return Interval for interface load calculation - Range: `30`-`600` - Default value: `30`
     * 
     */
    public Output<Optional<Integer>> loadInterval() {
        return Codegen.optional(this.loadInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="loadIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> loadIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> loadIntervalVariable() {
        return Codegen.optional(this.loadIntervalVariable);
    }
    /**
     * MAC Address
     * 
     */
    @Export(name="macAddress", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> macAddress;

    /**
     * @return MAC Address
     * 
     */
    public Output<Optional<String>> macAddress() {
        return Codegen.optional(this.macAddress);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="macAddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> macAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> macAddressVariable() {
        return Codegen.optional(this.macAddressVariable);
    }
    /**
     * Media type - Choices: `auto-select`, `rj45`, `sfp`
     * 
     */
    @Export(name="mediaType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mediaType;

    /**
     * @return Media type - Choices: `auto-select`, `rj45`, `sfp`
     * 
     */
    public Output<Optional<String>> mediaType() {
        return Codegen.optional(this.mediaType);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="mediaTypeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mediaTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> mediaTypeVariable() {
        return Codegen.optional(this.mediaTypeVariable);
    }
    /**
     * The name of the profile parcel
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the profile parcel
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * - Default value: `true`
     * 
     */
    @Export(name="shutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shutdown;

    /**
     * @return - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> shutdown() {
        return Codegen.optional(this.shutdown);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shutdownVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shutdownVariable() {
        return Codegen.optional(this.shutdownVariable);
    }
    /**
     * Set interface speed - Choices: `10`, `100`, `1000`, `2500`, `10000`
     * 
     */
    @Export(name="speed", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> speed;

    /**
     * @return Set interface speed - Choices: `10`, `100`, `1000`, `2500`, `10000`
     * 
     */
    public Output<Optional<String>> speed() {
        return Codegen.optional(this.speed);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="speedVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> speedVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> speedVariable() {
        return Codegen.optional(this.speedVariable);
    }
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Export(name="tcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tcpMss() {
        return Codegen.optional(this.tcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpMssVariable() {
        return Codegen.optional(this.tcpMssVariable);
    }
    /**
     * Transport Management VPN Profile Parcel ID
     * 
     */
    @Export(name="transportManagementVpnProfileParcelId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> transportManagementVpnProfileParcelId;

    /**
     * @return Transport Management VPN Profile Parcel ID
     * 
     */
    public Output<Optional<String>> transportManagementVpnProfileParcelId() {
        return Codegen.optional(this.transportManagementVpnProfileParcelId);
    }
    /**
     * The version of the profile parcel
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the profile parcel
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TransportManagementVpnInterfaceEthernetProfileParcel(java.lang.String name) {
        this(name, TransportManagementVpnInterfaceEthernetProfileParcelArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TransportManagementVpnInterfaceEthernetProfileParcel(java.lang.String name, TransportManagementVpnInterfaceEthernetProfileParcelArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TransportManagementVpnInterfaceEthernetProfileParcel(java.lang.String name, TransportManagementVpnInterfaceEthernetProfileParcelArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/transportManagementVpnInterfaceEthernetProfileParcel:TransportManagementVpnInterfaceEthernetProfileParcel", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TransportManagementVpnInterfaceEthernetProfileParcel(java.lang.String name, Output<java.lang.String> id, @Nullable TransportManagementVpnInterfaceEthernetProfileParcelState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/transportManagementVpnInterfaceEthernetProfileParcel:TransportManagementVpnInterfaceEthernetProfileParcel", name, state, makeResourceOptions(options, id), false);
    }

    private static TransportManagementVpnInterfaceEthernetProfileParcelArgs makeArgs(TransportManagementVpnInterfaceEthernetProfileParcelArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TransportManagementVpnInterfaceEthernetProfileParcelArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TransportManagementVpnInterfaceEthernetProfileParcel get(java.lang.String name, Output<java.lang.String> id, @Nullable TransportManagementVpnInterfaceEthernetProfileParcelState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TransportManagementVpnInterfaceEthernetProfileParcel(name, id, state, options);
    }
}
