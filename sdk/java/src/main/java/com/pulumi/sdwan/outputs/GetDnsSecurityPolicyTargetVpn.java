// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDnsSecurityPolicyTargetVpn {
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    private String dnsServerIp;
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    private Boolean localDomainBypassEnabled;
    /**
     * @return non empty interger string
     * 
     */
    private String uid;
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    private Boolean umbrellaDefault;
    private List<String> vpns;

    private GetDnsSecurityPolicyTargetVpn() {}
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    public String dnsServerIp() {
        return this.dnsServerIp;
    }
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    public Boolean localDomainBypassEnabled() {
        return this.localDomainBypassEnabled;
    }
    /**
     * @return non empty interger string
     * 
     */
    public String uid() {
        return this.uid;
    }
    /**
     * @return Field will only be under data field if matchAllVpn is true, otherwise field will be under targetVpns and set per entry
     * 
     */
    public Boolean umbrellaDefault() {
        return this.umbrellaDefault;
    }
    public List<String> vpns() {
        return this.vpns;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsSecurityPolicyTargetVpn defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String dnsServerIp;
        private Boolean localDomainBypassEnabled;
        private String uid;
        private Boolean umbrellaDefault;
        private List<String> vpns;
        public Builder() {}
        public Builder(GetDnsSecurityPolicyTargetVpn defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dnsServerIp = defaults.dnsServerIp;
    	      this.localDomainBypassEnabled = defaults.localDomainBypassEnabled;
    	      this.uid = defaults.uid;
    	      this.umbrellaDefault = defaults.umbrellaDefault;
    	      this.vpns = defaults.vpns;
        }

        @CustomType.Setter
        public Builder dnsServerIp(String dnsServerIp) {
            if (dnsServerIp == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyTargetVpn", "dnsServerIp");
            }
            this.dnsServerIp = dnsServerIp;
            return this;
        }
        @CustomType.Setter
        public Builder localDomainBypassEnabled(Boolean localDomainBypassEnabled) {
            if (localDomainBypassEnabled == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyTargetVpn", "localDomainBypassEnabled");
            }
            this.localDomainBypassEnabled = localDomainBypassEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder uid(String uid) {
            if (uid == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyTargetVpn", "uid");
            }
            this.uid = uid;
            return this;
        }
        @CustomType.Setter
        public Builder umbrellaDefault(Boolean umbrellaDefault) {
            if (umbrellaDefault == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyTargetVpn", "umbrellaDefault");
            }
            this.umbrellaDefault = umbrellaDefault;
            return this;
        }
        @CustomType.Setter
        public Builder vpns(List<String> vpns) {
            if (vpns == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyTargetVpn", "vpns");
            }
            this.vpns = vpns;
            return this;
        }
        public Builder vpns(String... vpns) {
            return vpns(List.of(vpns));
        }
        public GetDnsSecurityPolicyTargetVpn build() {
            final var _resultValue = new GetDnsSecurityPolicyTargetVpn();
            _resultValue.dnsServerIp = dnsServerIp;
            _resultValue.localDomainBypassEnabled = localDomainBypassEnabled;
            _resultValue.uid = uid;
            _resultValue.umbrellaDefault = umbrellaDefault;
            _resultValue.vpns = vpns;
            return _resultValue;
        }
    }
}
