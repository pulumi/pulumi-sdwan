// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter;
import com.pulumi.sdwan.outputs.GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationPriorityTrafficPolicyPolicySequenceAction {
    /**
     * @return Backup SLA perferred color
     * 
     */
    private List<String> backupSlaPreferredColors;
    private Boolean cloudProbe;
    private Boolean cloudSaas;
    private String count;
    private Boolean fallbackToRouting;
    private Boolean log;
    private Integer lossCorrectFecThreshold;
    private String lossCorrectType;
    private Boolean natBypass;
    private List<String> natDiaInterfaces;
    private List<Integer> natDiaPools;
    private Boolean natFallback;
    private Integer natPool;
    private Boolean natVpn;
    private String redirectDnsField;
    private String redirectDnsValue;
    private Boolean secureInternetGateway;
    private List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter> setParameters;
    /**
     * @return slaClass
     * 
     */
    private List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass> slaClasses;

    private GetApplicationPriorityTrafficPolicyPolicySequenceAction() {}
    /**
     * @return Backup SLA perferred color
     * 
     */
    public List<String> backupSlaPreferredColors() {
        return this.backupSlaPreferredColors;
    }
    public Boolean cloudProbe() {
        return this.cloudProbe;
    }
    public Boolean cloudSaas() {
        return this.cloudSaas;
    }
    public String count() {
        return this.count;
    }
    public Boolean fallbackToRouting() {
        return this.fallbackToRouting;
    }
    public Boolean log() {
        return this.log;
    }
    public Integer lossCorrectFecThreshold() {
        return this.lossCorrectFecThreshold;
    }
    public String lossCorrectType() {
        return this.lossCorrectType;
    }
    public Boolean natBypass() {
        return this.natBypass;
    }
    public List<String> natDiaInterfaces() {
        return this.natDiaInterfaces;
    }
    public List<Integer> natDiaPools() {
        return this.natDiaPools;
    }
    public Boolean natFallback() {
        return this.natFallback;
    }
    public Integer natPool() {
        return this.natPool;
    }
    public Boolean natVpn() {
        return this.natVpn;
    }
    public String redirectDnsField() {
        return this.redirectDnsField;
    }
    public String redirectDnsValue() {
        return this.redirectDnsValue;
    }
    public Boolean secureInternetGateway() {
        return this.secureInternetGateway;
    }
    public List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter> setParameters() {
        return this.setParameters;
    }
    /**
     * @return slaClass
     * 
     */
    public List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass> slaClasses() {
        return this.slaClasses;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationPriorityTrafficPolicyPolicySequenceAction defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> backupSlaPreferredColors;
        private Boolean cloudProbe;
        private Boolean cloudSaas;
        private String count;
        private Boolean fallbackToRouting;
        private Boolean log;
        private Integer lossCorrectFecThreshold;
        private String lossCorrectType;
        private Boolean natBypass;
        private List<String> natDiaInterfaces;
        private List<Integer> natDiaPools;
        private Boolean natFallback;
        private Integer natPool;
        private Boolean natVpn;
        private String redirectDnsField;
        private String redirectDnsValue;
        private Boolean secureInternetGateway;
        private List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter> setParameters;
        private List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass> slaClasses;
        public Builder() {}
        public Builder(GetApplicationPriorityTrafficPolicyPolicySequenceAction defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupSlaPreferredColors = defaults.backupSlaPreferredColors;
    	      this.cloudProbe = defaults.cloudProbe;
    	      this.cloudSaas = defaults.cloudSaas;
    	      this.count = defaults.count;
    	      this.fallbackToRouting = defaults.fallbackToRouting;
    	      this.log = defaults.log;
    	      this.lossCorrectFecThreshold = defaults.lossCorrectFecThreshold;
    	      this.lossCorrectType = defaults.lossCorrectType;
    	      this.natBypass = defaults.natBypass;
    	      this.natDiaInterfaces = defaults.natDiaInterfaces;
    	      this.natDiaPools = defaults.natDiaPools;
    	      this.natFallback = defaults.natFallback;
    	      this.natPool = defaults.natPool;
    	      this.natVpn = defaults.natVpn;
    	      this.redirectDnsField = defaults.redirectDnsField;
    	      this.redirectDnsValue = defaults.redirectDnsValue;
    	      this.secureInternetGateway = defaults.secureInternetGateway;
    	      this.setParameters = defaults.setParameters;
    	      this.slaClasses = defaults.slaClasses;
        }

        @CustomType.Setter
        public Builder backupSlaPreferredColors(List<String> backupSlaPreferredColors) {
            if (backupSlaPreferredColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "backupSlaPreferredColors");
            }
            this.backupSlaPreferredColors = backupSlaPreferredColors;
            return this;
        }
        public Builder backupSlaPreferredColors(String... backupSlaPreferredColors) {
            return backupSlaPreferredColors(List.of(backupSlaPreferredColors));
        }
        @CustomType.Setter
        public Builder cloudProbe(Boolean cloudProbe) {
            if (cloudProbe == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "cloudProbe");
            }
            this.cloudProbe = cloudProbe;
            return this;
        }
        @CustomType.Setter
        public Builder cloudSaas(Boolean cloudSaas) {
            if (cloudSaas == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "cloudSaas");
            }
            this.cloudSaas = cloudSaas;
            return this;
        }
        @CustomType.Setter
        public Builder count(String count) {
            if (count == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "count");
            }
            this.count = count;
            return this;
        }
        @CustomType.Setter
        public Builder fallbackToRouting(Boolean fallbackToRouting) {
            if (fallbackToRouting == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "fallbackToRouting");
            }
            this.fallbackToRouting = fallbackToRouting;
            return this;
        }
        @CustomType.Setter
        public Builder log(Boolean log) {
            if (log == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "log");
            }
            this.log = log;
            return this;
        }
        @CustomType.Setter
        public Builder lossCorrectFecThreshold(Integer lossCorrectFecThreshold) {
            if (lossCorrectFecThreshold == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "lossCorrectFecThreshold");
            }
            this.lossCorrectFecThreshold = lossCorrectFecThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder lossCorrectType(String lossCorrectType) {
            if (lossCorrectType == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "lossCorrectType");
            }
            this.lossCorrectType = lossCorrectType;
            return this;
        }
        @CustomType.Setter
        public Builder natBypass(Boolean natBypass) {
            if (natBypass == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "natBypass");
            }
            this.natBypass = natBypass;
            return this;
        }
        @CustomType.Setter
        public Builder natDiaInterfaces(List<String> natDiaInterfaces) {
            if (natDiaInterfaces == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "natDiaInterfaces");
            }
            this.natDiaInterfaces = natDiaInterfaces;
            return this;
        }
        public Builder natDiaInterfaces(String... natDiaInterfaces) {
            return natDiaInterfaces(List.of(natDiaInterfaces));
        }
        @CustomType.Setter
        public Builder natDiaPools(List<Integer> natDiaPools) {
            if (natDiaPools == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "natDiaPools");
            }
            this.natDiaPools = natDiaPools;
            return this;
        }
        public Builder natDiaPools(Integer... natDiaPools) {
            return natDiaPools(List.of(natDiaPools));
        }
        @CustomType.Setter
        public Builder natFallback(Boolean natFallback) {
            if (natFallback == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "natFallback");
            }
            this.natFallback = natFallback;
            return this;
        }
        @CustomType.Setter
        public Builder natPool(Integer natPool) {
            if (natPool == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "natPool");
            }
            this.natPool = natPool;
            return this;
        }
        @CustomType.Setter
        public Builder natVpn(Boolean natVpn) {
            if (natVpn == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "natVpn");
            }
            this.natVpn = natVpn;
            return this;
        }
        @CustomType.Setter
        public Builder redirectDnsField(String redirectDnsField) {
            if (redirectDnsField == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "redirectDnsField");
            }
            this.redirectDnsField = redirectDnsField;
            return this;
        }
        @CustomType.Setter
        public Builder redirectDnsValue(String redirectDnsValue) {
            if (redirectDnsValue == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "redirectDnsValue");
            }
            this.redirectDnsValue = redirectDnsValue;
            return this;
        }
        @CustomType.Setter
        public Builder secureInternetGateway(Boolean secureInternetGateway) {
            if (secureInternetGateway == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "secureInternetGateway");
            }
            this.secureInternetGateway = secureInternetGateway;
            return this;
        }
        @CustomType.Setter
        public Builder setParameters(List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter> setParameters) {
            if (setParameters == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "setParameters");
            }
            this.setParameters = setParameters;
            return this;
        }
        public Builder setParameters(GetApplicationPriorityTrafficPolicyPolicySequenceActionSetParameter... setParameters) {
            return setParameters(List.of(setParameters));
        }
        @CustomType.Setter
        public Builder slaClasses(List<GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass> slaClasses) {
            if (slaClasses == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceAction", "slaClasses");
            }
            this.slaClasses = slaClasses;
            return this;
        }
        public Builder slaClasses(GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass... slaClasses) {
            return slaClasses(List.of(slaClasses));
        }
        public GetApplicationPriorityTrafficPolicyPolicySequenceAction build() {
            final var _resultValue = new GetApplicationPriorityTrafficPolicyPolicySequenceAction();
            _resultValue.backupSlaPreferredColors = backupSlaPreferredColors;
            _resultValue.cloudProbe = cloudProbe;
            _resultValue.cloudSaas = cloudSaas;
            _resultValue.count = count;
            _resultValue.fallbackToRouting = fallbackToRouting;
            _resultValue.log = log;
            _resultValue.lossCorrectFecThreshold = lossCorrectFecThreshold;
            _resultValue.lossCorrectType = lossCorrectType;
            _resultValue.natBypass = natBypass;
            _resultValue.natDiaInterfaces = natDiaInterfaces;
            _resultValue.natDiaPools = natDiaPools;
            _resultValue.natFallback = natFallback;
            _resultValue.natPool = natPool;
            _resultValue.natVpn = natVpn;
            _resultValue.redirectDnsField = redirectDnsField;
            _resultValue.redirectDnsValue = redirectDnsValue;
            _resultValue.secureInternetGateway = secureInternetGateway;
            _resultValue.setParameters = setParameters;
            _resultValue.slaClasses = slaClasses;
            return _resultValue;
        }
    }
}
