// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.DnsSecurityPolicyDefinitionTargetVpnArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DnsSecurityPolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DnsSecurityPolicyDefinitionArgs Empty = new DnsSecurityPolicyDefinitionArgs();

    /**
     * Credentials feature template ID
     * 
     */
    @Import(name="ciscoSigCredentialsFeatureTemplateId", required=true)
    private Output<String> ciscoSigCredentialsFeatureTemplateId;

    /**
     * @return Credentials feature template ID
     * 
     */
    public Output<String> ciscoSigCredentialsFeatureTemplateId() {
        return this.ciscoSigCredentialsFeatureTemplateId;
    }

    /**
     * Credentials feature template version
     * 
     */
    @Import(name="ciscoSigCredentialsFeatureTemplateVersion")
    private @Nullable Output<Integer> ciscoSigCredentialsFeatureTemplateVersion;

    /**
     * @return Credentials feature template version
     * 
     */
    public Optional<Output<Integer>> ciscoSigCredentialsFeatureTemplateVersion() {
        return Optional.ofNullable(this.ciscoSigCredentialsFeatureTemplateVersion);
    }

    /**
     * Only relevant when `umbrellaDnsDefault` is `false`
     * 
     */
    @Import(name="customDnsServerIp")
    private @Nullable Output<String> customDnsServerIp;

    /**
     * @return Only relevant when `umbrellaDnsDefault` is `false`
     * 
     */
    public Optional<Output<String>> customDnsServerIp() {
        return Optional.ofNullable(this.customDnsServerIp);
    }

    /**
     * The description of the policy definition.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the policy definition.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Should DNSCrypt be enabled
     * 
     */
    @Import(name="dnscrypt")
    private @Nullable Output<Boolean> dnscrypt;

    /**
     * @return Should DNSCrypt be enabled
     * 
     */
    public Optional<Output<Boolean>> dnscrypt() {
        return Optional.ofNullable(this.dnscrypt);
    }

    /**
     * Local domain bypass list ID
     * 
     */
    @Import(name="domainListId")
    private @Nullable Output<String> domainListId;

    /**
     * @return Local domain bypass list ID
     * 
     */
    public Optional<Output<String>> domainListId() {
        return Optional.ofNullable(this.domainListId);
    }

    /**
     * Local domain bypass list version
     * 
     */
    @Import(name="domainListVersion")
    private @Nullable Output<Integer> domainListVersion;

    /**
     * @return Local domain bypass list version
     * 
     */
    public Optional<Output<Integer>> domainListVersion() {
        return Optional.ofNullable(this.domainListVersion);
    }

    /**
     * Should the local domain bypass list be enabled
     * 
     */
    @Import(name="localDomainBypassEnabled")
    private @Nullable Output<Boolean> localDomainBypassEnabled;

    /**
     * @return Should the local domain bypass list be enabled
     * 
     */
    public Optional<Output<Boolean>> localDomainBypassEnabled() {
        return Optional.ofNullable(this.localDomainBypassEnabled);
    }

    /**
     * Should use match all VPN
     * 
     */
    @Import(name="matchAllVpn", required=true)
    private Output<Boolean> matchAllVpn;

    /**
     * @return Should use match all VPN
     * 
     */
    public Output<Boolean> matchAllVpn() {
        return this.matchAllVpn;
    }

    /**
     * The name of the policy definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Only relevant when `matchAllVpn` is `false`
     * 
     */
    @Import(name="targetVpns")
    private @Nullable Output<List<DnsSecurityPolicyDefinitionTargetVpnArgs>> targetVpns;

    /**
     * @return Only relevant when `matchAllVpn` is `false`
     * 
     */
    public Optional<Output<List<DnsSecurityPolicyDefinitionTargetVpnArgs>>> targetVpns() {
        return Optional.ofNullable(this.targetVpns);
    }

    /**
     * Should use umbrella as DNS Server
     * 
     */
    @Import(name="umbrellaDnsDefault", required=true)
    private Output<Boolean> umbrellaDnsDefault;

    /**
     * @return Should use umbrella as DNS Server
     * 
     */
    public Output<Boolean> umbrellaDnsDefault() {
        return this.umbrellaDnsDefault;
    }

    private DnsSecurityPolicyDefinitionArgs() {}

    private DnsSecurityPolicyDefinitionArgs(DnsSecurityPolicyDefinitionArgs $) {
        this.ciscoSigCredentialsFeatureTemplateId = $.ciscoSigCredentialsFeatureTemplateId;
        this.ciscoSigCredentialsFeatureTemplateVersion = $.ciscoSigCredentialsFeatureTemplateVersion;
        this.customDnsServerIp = $.customDnsServerIp;
        this.description = $.description;
        this.dnscrypt = $.dnscrypt;
        this.domainListId = $.domainListId;
        this.domainListVersion = $.domainListVersion;
        this.localDomainBypassEnabled = $.localDomainBypassEnabled;
        this.matchAllVpn = $.matchAllVpn;
        this.name = $.name;
        this.targetVpns = $.targetVpns;
        this.umbrellaDnsDefault = $.umbrellaDnsDefault;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DnsSecurityPolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DnsSecurityPolicyDefinitionArgs $;

        public Builder() {
            $ = new DnsSecurityPolicyDefinitionArgs();
        }

        public Builder(DnsSecurityPolicyDefinitionArgs defaults) {
            $ = new DnsSecurityPolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ciscoSigCredentialsFeatureTemplateId Credentials feature template ID
         * 
         * @return builder
         * 
         */
        public Builder ciscoSigCredentialsFeatureTemplateId(Output<String> ciscoSigCredentialsFeatureTemplateId) {
            $.ciscoSigCredentialsFeatureTemplateId = ciscoSigCredentialsFeatureTemplateId;
            return this;
        }

        /**
         * @param ciscoSigCredentialsFeatureTemplateId Credentials feature template ID
         * 
         * @return builder
         * 
         */
        public Builder ciscoSigCredentialsFeatureTemplateId(String ciscoSigCredentialsFeatureTemplateId) {
            return ciscoSigCredentialsFeatureTemplateId(Output.of(ciscoSigCredentialsFeatureTemplateId));
        }

        /**
         * @param ciscoSigCredentialsFeatureTemplateVersion Credentials feature template version
         * 
         * @return builder
         * 
         */
        public Builder ciscoSigCredentialsFeatureTemplateVersion(@Nullable Output<Integer> ciscoSigCredentialsFeatureTemplateVersion) {
            $.ciscoSigCredentialsFeatureTemplateVersion = ciscoSigCredentialsFeatureTemplateVersion;
            return this;
        }

        /**
         * @param ciscoSigCredentialsFeatureTemplateVersion Credentials feature template version
         * 
         * @return builder
         * 
         */
        public Builder ciscoSigCredentialsFeatureTemplateVersion(Integer ciscoSigCredentialsFeatureTemplateVersion) {
            return ciscoSigCredentialsFeatureTemplateVersion(Output.of(ciscoSigCredentialsFeatureTemplateVersion));
        }

        /**
         * @param customDnsServerIp Only relevant when `umbrellaDnsDefault` is `false`
         * 
         * @return builder
         * 
         */
        public Builder customDnsServerIp(@Nullable Output<String> customDnsServerIp) {
            $.customDnsServerIp = customDnsServerIp;
            return this;
        }

        /**
         * @param customDnsServerIp Only relevant when `umbrellaDnsDefault` is `false`
         * 
         * @return builder
         * 
         */
        public Builder customDnsServerIp(String customDnsServerIp) {
            return customDnsServerIp(Output.of(customDnsServerIp));
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnscrypt Should DNSCrypt be enabled
         * 
         * @return builder
         * 
         */
        public Builder dnscrypt(@Nullable Output<Boolean> dnscrypt) {
            $.dnscrypt = dnscrypt;
            return this;
        }

        /**
         * @param dnscrypt Should DNSCrypt be enabled
         * 
         * @return builder
         * 
         */
        public Builder dnscrypt(Boolean dnscrypt) {
            return dnscrypt(Output.of(dnscrypt));
        }

        /**
         * @param domainListId Local domain bypass list ID
         * 
         * @return builder
         * 
         */
        public Builder domainListId(@Nullable Output<String> domainListId) {
            $.domainListId = domainListId;
            return this;
        }

        /**
         * @param domainListId Local domain bypass list ID
         * 
         * @return builder
         * 
         */
        public Builder domainListId(String domainListId) {
            return domainListId(Output.of(domainListId));
        }

        /**
         * @param domainListVersion Local domain bypass list version
         * 
         * @return builder
         * 
         */
        public Builder domainListVersion(@Nullable Output<Integer> domainListVersion) {
            $.domainListVersion = domainListVersion;
            return this;
        }

        /**
         * @param domainListVersion Local domain bypass list version
         * 
         * @return builder
         * 
         */
        public Builder domainListVersion(Integer domainListVersion) {
            return domainListVersion(Output.of(domainListVersion));
        }

        /**
         * @param localDomainBypassEnabled Should the local domain bypass list be enabled
         * 
         * @return builder
         * 
         */
        public Builder localDomainBypassEnabled(@Nullable Output<Boolean> localDomainBypassEnabled) {
            $.localDomainBypassEnabled = localDomainBypassEnabled;
            return this;
        }

        /**
         * @param localDomainBypassEnabled Should the local domain bypass list be enabled
         * 
         * @return builder
         * 
         */
        public Builder localDomainBypassEnabled(Boolean localDomainBypassEnabled) {
            return localDomainBypassEnabled(Output.of(localDomainBypassEnabled));
        }

        /**
         * @param matchAllVpn Should use match all VPN
         * 
         * @return builder
         * 
         */
        public Builder matchAllVpn(Output<Boolean> matchAllVpn) {
            $.matchAllVpn = matchAllVpn;
            return this;
        }

        /**
         * @param matchAllVpn Should use match all VPN
         * 
         * @return builder
         * 
         */
        public Builder matchAllVpn(Boolean matchAllVpn) {
            return matchAllVpn(Output.of(matchAllVpn));
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetVpns Only relevant when `matchAllVpn` is `false`
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(@Nullable Output<List<DnsSecurityPolicyDefinitionTargetVpnArgs>> targetVpns) {
            $.targetVpns = targetVpns;
            return this;
        }

        /**
         * @param targetVpns Only relevant when `matchAllVpn` is `false`
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(List<DnsSecurityPolicyDefinitionTargetVpnArgs> targetVpns) {
            return targetVpns(Output.of(targetVpns));
        }

        /**
         * @param targetVpns Only relevant when `matchAllVpn` is `false`
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(DnsSecurityPolicyDefinitionTargetVpnArgs... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }

        /**
         * @param umbrellaDnsDefault Should use umbrella as DNS Server
         * 
         * @return builder
         * 
         */
        public Builder umbrellaDnsDefault(Output<Boolean> umbrellaDnsDefault) {
            $.umbrellaDnsDefault = umbrellaDnsDefault;
            return this;
        }

        /**
         * @param umbrellaDnsDefault Should use umbrella as DNS Server
         * 
         * @return builder
         * 
         */
        public Builder umbrellaDnsDefault(Boolean umbrellaDnsDefault) {
            return umbrellaDnsDefault(Output.of(umbrellaDnsDefault));
        }

        public DnsSecurityPolicyDefinitionArgs build() {
            if ($.ciscoSigCredentialsFeatureTemplateId == null) {
                throw new MissingRequiredPropertyException("DnsSecurityPolicyDefinitionArgs", "ciscoSigCredentialsFeatureTemplateId");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("DnsSecurityPolicyDefinitionArgs", "description");
            }
            if ($.matchAllVpn == null) {
                throw new MissingRequiredPropertyException("DnsSecurityPolicyDefinitionArgs", "matchAllVpn");
            }
            if ($.umbrellaDnsDefault == null) {
                throw new MissingRequiredPropertyException("DnsSecurityPolicyDefinitionArgs", "umbrellaDnsDefault");
            }
            return $;
        }
    }

}
