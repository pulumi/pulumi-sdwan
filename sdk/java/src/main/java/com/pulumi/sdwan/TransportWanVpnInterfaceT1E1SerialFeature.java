// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.TransportWanVpnInterfaceT1E1SerialFeatureArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.TransportWanVpnInterfaceT1E1SerialFeatureState;
import com.pulumi.sdwan.outputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a Transport WAN VPN Interface T1 E1 Serial Feature.
 *   - Minimum SD-WAN Manager version: `20.12.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.sdwan.TransportWanVpnInterfaceT1E1SerialFeature;
 * import com.pulumi.sdwan.TransportWanVpnInterfaceT1E1SerialFeatureArgs;
 * import com.pulumi.sdwan.inputs.TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new TransportWanVpnInterfaceT1E1SerialFeature("example", TransportWanVpnInterfaceT1E1SerialFeatureArgs.builder()
 *             .name("Example")
 *             .description("My Example")
 *             .featureProfileId("f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac")
 *             .transportWanVpnFeatureId("140331f6-5418-4755-a059-13c77eb96037")
 *             .shutdown(true)
 *             .interfaceName("Serial0")
 *             .ipv4Address("1.2.3.4")
 *             .ipv4SubnetMask("0.0.0.0")
 *             .ipv6Address("2001:0:0:1::/64")
 *             .bandwidth(123456)
 *             .bandwidthDownstream(123456)
 *             .clockRate("1200")
 *             .encapsulation("ppp")
 *             .tunnelInterface(true)
 *             .perTunnelQos(true)
 *             .perTunnelQosAggregator(false)
 *             .tunnelQosMode("hub")
 *             .tunnelInterfaceColor("mpls")
 *             .tunnelInterfaceRestrict(true)
 *             .tunnelInterfaceGroups(42949672)
 *             .tunnelInterfaceBorder(false)
 *             .tunnelInterfaceMaxControlConnections(62)
 *             .tunnelInterfaceVbondAsStunServer(false)
 *             .tunnelInterfaceExcludeControllerGroupLists(2)
 *             .tunnelInterfaceVmanageConnectionPreference(8)
 *             .tunnelInterfacePortHop(true)
 *             .tunnelInterfaceLowBandwidthLink(false)
 *             .tunnelInterfaceTunnelTcpMss(1460)
 *             .tunnelInterfaceClearDontFragment(false)
 *             .tunnelInterfaceClearNetworkBroadcast(false)
 *             .tunnelInterfaceCarrier("default")
 *             .tunnelInterfaceBindLoopbackTunnel("example")
 *             .tunnelInterfaceLastResortCircuit(false)
 *             .tunnelInterfaceNatRefreshInterval(5)
 *             .tunnelInterfaceHelloInterval(1000)
 *             .tunnelInterfaceHelloTolerance(12)
 *             .tunnelInterfaceAllowAll(false)
 *             .tunnelInterfaceAllowBgp(false)
 *             .tunnelInterfaceAllowDhcp(true)
 *             .tunnelInterfaceAllowDns(true)
 *             .tunnelInterfaceAllowIcmp(true)
 *             .tunnelInterfaceAllowNetconf(false)
 *             .tunnelInterfaceAllowNtp(false)
 *             .tunnelInterfaceAllowOspf(false)
 *             .tunnelInterfaceAllowSsh(false)
 *             .tunnelInterfaceAllowStun(false)
 *             .tunnelInterfaceAllowHttps(true)
 *             .tunnelInterfaceAllowSnmp(false)
 *             .tunnelInterfaceAllowBfd(false)
 *             .tunnelInterfaceEncapsulations(TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulationArgs.builder()
 *                 .encapsulation("gre")
 *                 .preference(4294967)
 *                 .weight(250)
 *                 .build())
 *             .tcpMss(1460)
 *             .mtu(1500)
 *             .ipMtu(1500)
 *             .tlocExtension("tloc")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Expected import identifier with the format: &#34;transport_wan_vpn_interface_t1_e1_serial_feature_id,feature_profile_id,transport_wan_vpn_feature_id&#34;
 * 
 * ```sh
 * $ pulumi import sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd,f6dd22c8-0b4f-496c-9a0b-6813d1f8b8ac,140331f6-5418-4755-a059-13c77eb96037&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature")
public class TransportWanVpnInterfaceT1E1SerialFeature extends com.pulumi.resources.CustomResource {
    /**
     * Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
     * 
     */
    @Export(name="bandwidth", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidth;

    /**
     * @return Interface bandwidth capacity, in kbps - Range: `1`-`200000000`
     * 
     */
    public Output<Optional<Integer>> bandwidth() {
        return Codegen.optional(this.bandwidth);
    }
    /**
     * Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    @Export(name="bandwidthDownstream", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bandwidthDownstream;

    /**
     * @return Interface downstream bandwidth capacity, in kbps - Range: `1`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> bandwidthDownstream() {
        return Codegen.optional(this.bandwidthDownstream);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="bandwidthDownstreamVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bandwidthDownstreamVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> bandwidthDownstreamVariable() {
        return Codegen.optional(this.bandwidthDownstreamVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="bandwidthVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bandwidthVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> bandwidthVariable() {
        return Codegen.optional(this.bandwidthVariable);
    }
    /**
     * Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
     * `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
     * `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     * 
     */
    @Export(name="clockRate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clockRate;

    /**
     * @return Set preference for interface Clock speed - Choices: `1200`, `2400`, `4800`, `9600`, `14400`, `19200`, `28800`, `32000`,
     * `38400`, `48000`, `56000`, `57600`, `64000`, `72000`, `115200`, `125000`, `148000`, `192000`, `250000`, `256000`,
     * `384000`, `500000`, `512000`, `768000`, `800000`, `1000000`, `2000000`, `4000000`, `5300000`, `8000000`
     * 
     */
    public Output<Optional<String>> clockRate() {
        return Codegen.optional(this.clockRate);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="clockRateVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> clockRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> clockRateVariable() {
        return Codegen.optional(this.clockRateVariable);
    }
    /**
     * The description of the Feature
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     * 
     */
    @Export(name="encapsulation", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> encapsulation;

    /**
     * @return Configure Encapsulation for interface - Choices: `hdlc`, `ppp`, `frame-relay`
     * 
     */
    public Output<Optional<String>> encapsulation() {
        return Codegen.optional(this.encapsulation);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="encapsulationVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> encapsulationVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> encapsulationVariable() {
        return Codegen.optional(this.encapsulationVariable);
    }
    /**
     * Feature Profile ID
     * 
     */
    @Export(name="featureProfileId", refs={String.class}, tree="[0]")
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    @Export(name="interfaceName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceName;

    /**
     * @return Serial Interface Name - slot/subslot/port:channel-group for T1/E1, slot/subslot/port for NIM-1T
     * 
     */
    public Output<Optional<String>> interfaceName() {
        return Codegen.optional(this.interfaceName);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="interfaceNameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> interfaceNameVariable() {
        return Codegen.optional(this.interfaceNameVariable);
    }
    /**
     * Set ip mtu - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    @Export(name="ipMtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipMtu;

    /**
     * @return Set ip mtu - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> ipMtu() {
        return Codegen.optional(this.ipMtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipMtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipMtuVariable() {
        return Codegen.optional(this.ipMtuVariable);
    }
    @Export(name="ipv4Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4Address;

    public Output<Optional<String>> ipv4Address() {
        return Codegen.optional(this.ipv4Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4AddressVariable() {
        return Codegen.optional(this.ipv4AddressVariable);
    }
    /**
     * - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     *   `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     *   `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     *   `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     *   `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Export(name="ipv4SubnetMask", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMask;

    /**
     * @return - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`,
     * `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`,
     * `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`,
     * `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`,
     * `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Output<Optional<String>> ipv4SubnetMask() {
        return Codegen.optional(this.ipv4SubnetMask);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv4SubnetMaskVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv4SubnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv4SubnetMaskVariable() {
        return Codegen.optional(this.ipv4SubnetMaskVariable);
    }
    /**
     * Assign IPv6 address
     * 
     */
    @Export(name="ipv6Address", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv6Address;

    /**
     * @return Assign IPv6 address
     * 
     */
    public Output<Optional<String>> ipv6Address() {
        return Codegen.optional(this.ipv6Address);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="ipv6AddressVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> ipv6AddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> ipv6AddressVariable() {
        return Codegen.optional(this.ipv6AddressVariable);
    }
    /**
     * Interface MTU &lt;68...2000&gt;, in bytes - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    @Export(name="mtu", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> mtu;

    /**
     * @return Interface MTU &lt;68...2000&gt;, in bytes - Range: `576`-`9216` - Default value: `1500`
     * 
     */
    public Output<Optional<Integer>> mtu() {
        return Codegen.optional(this.mtu);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="mtuVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> mtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> mtuVariable() {
        return Codegen.optional(this.mtuVariable);
    }
    /**
     * The name of the Feature
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Per-tunnel Qos - Default value: `false`
     * 
     */
    @Export(name="perTunnelQos", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> perTunnelQos;

    /**
     * @return Per-tunnel Qos - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> perTunnelQos() {
        return Codegen.optional(this.perTunnelQos);
    }
    /**
     * Per-tunnel QoS Aggregator - Default value: `false`
     * 
     */
    @Export(name="perTunnelQosAggregator", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> perTunnelQosAggregator;

    /**
     * @return Per-tunnel QoS Aggregator - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> perTunnelQosAggregator() {
        return Codegen.optional(this.perTunnelQosAggregator);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="perTunnelQosAggregatorVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> perTunnelQosAggregatorVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> perTunnelQosAggregatorVariable() {
        return Codegen.optional(this.perTunnelQosAggregatorVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="perTunnelQosVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> perTunnelQosVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> perTunnelQosVariable() {
        return Codegen.optional(this.perTunnelQosVariable);
    }
    /**
     * 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     * 
     */
    @Export(name="qosShapingRate", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> qosShapingRate;

    /**
     * @return 1ge interfaces: [0..1000000]kbps; 10ge interfaces: [0..10000000]kbps - Range: `8`-`100000000`
     * 
     */
    public Output<Optional<Integer>> qosShapingRate() {
        return Codegen.optional(this.qosShapingRate);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="qosShapingRateVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> qosShapingRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> qosShapingRateVariable() {
        return Codegen.optional(this.qosShapingRateVariable);
    }
    /**
     * Administrative state - Default value: `true`
     * 
     */
    @Export(name="shutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> shutdown;

    /**
     * @return Administrative state - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> shutdown() {
        return Codegen.optional(this.shutdown);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="shutdownVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> shutdownVariable() {
        return Codegen.optional(this.shutdownVariable);
    }
    /**
     * TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Export(name="tcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tcpMss;

    /**
     * @return TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tcpMss() {
        return Codegen.optional(this.tcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tcpMssVariable() {
        return Codegen.optional(this.tcpMssVariable);
    }
    /**
     * Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    @Export(name="tlocExtension", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlocExtension;

    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public Output<Optional<String>> tlocExtension() {
        return Codegen.optional(this.tlocExtension);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tlocExtensionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tlocExtensionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tlocExtensionVariable() {
        return Codegen.optional(this.tlocExtensionVariable);
    }
    /**
     * Transport WAN VPN Feature ID
     * 
     */
    @Export(name="transportWanVpnFeatureId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> transportWanVpnFeatureId;

    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    public Output<Optional<String>> transportWanVpnFeatureId() {
        return Codegen.optional(this.transportWanVpnFeatureId);
    }
    /**
     * Tunnel Interface - Default value: `false`
     * 
     */
    @Export(name="tunnelInterface", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterface;

    /**
     * @return Tunnel Interface - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterface() {
        return Codegen.optional(this.tunnelInterface);
    }
    /**
     * Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowAll;

    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowAll() {
        return Codegen.optional(this.tunnelInterfaceAllowAll);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowAllVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowAllVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowAllVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowAllVariable);
    }
    /**
     * Allow/Deny BFD - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowBfd", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowBfd;

    /**
     * @return Allow/Deny BFD - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowBfd() {
        return Codegen.optional(this.tunnelInterfaceAllowBfd);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowBfdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowBfdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowBfdVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowBfdVariable);
    }
    /**
     * Allow/deny BGP - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowBgp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowBgp;

    /**
     * @return Allow/deny BGP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowBgp() {
        return Codegen.optional(this.tunnelInterfaceAllowBgp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowBgpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowBgpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowBgpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowBgpVariable);
    }
    /**
     * Allow/Deny DHCP - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowDhcp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowDhcp;

    /**
     * @return Allow/Deny DHCP - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowDhcp() {
        return Codegen.optional(this.tunnelInterfaceAllowDhcp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowDhcpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowDhcpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowDhcpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowDhcpVariable);
    }
    /**
     * Allow/Deny DNS - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowDns", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowDns;

    /**
     * @return Allow/Deny DNS - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowDns() {
        return Codegen.optional(this.tunnelInterfaceAllowDns);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowDnsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowDnsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowDnsVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowDnsVariable);
    }
    /**
     * Allow/Deny Https - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowHttps", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowHttps;

    /**
     * @return Allow/Deny Https - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowHttps() {
        return Codegen.optional(this.tunnelInterfaceAllowHttps);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowHttpsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowHttpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowHttpsVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowHttpsVariable);
    }
    /**
     * Allow/Deny ICMP - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfaceAllowIcmp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowIcmp;

    /**
     * @return Allow/Deny ICMP - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowIcmp() {
        return Codegen.optional(this.tunnelInterfaceAllowIcmp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowIcmpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowIcmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowIcmpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowIcmpVariable);
    }
    /**
     * Allow/Deny NETCONF - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowNetconf", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowNetconf;

    /**
     * @return Allow/Deny NETCONF - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowNetconf() {
        return Codegen.optional(this.tunnelInterfaceAllowNetconf);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowNetconfVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowNetconfVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowNetconfVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowNetconfVariable);
    }
    /**
     * Allow/Deny NTP - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowNtp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowNtp;

    /**
     * @return Allow/Deny NTP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowNtp() {
        return Codegen.optional(this.tunnelInterfaceAllowNtp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowNtpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowNtpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowNtpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowNtpVariable);
    }
    /**
     * Allow/Deny OSPF - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowOspf", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowOspf;

    /**
     * @return Allow/Deny OSPF - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowOspf() {
        return Codegen.optional(this.tunnelInterfaceAllowOspf);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowOspfVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowOspfVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowOspfVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowOspfVariable);
    }
    /**
     * Allow/Deny SNMP - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowSnmp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowSnmp;

    /**
     * @return Allow/Deny SNMP - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowSnmp() {
        return Codegen.optional(this.tunnelInterfaceAllowSnmp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowSnmpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowSnmpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowSnmpVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowSnmpVariable);
    }
    /**
     * Allow/Deny SSH - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowSsh", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowSsh;

    /**
     * @return Allow/Deny SSH - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowSsh() {
        return Codegen.optional(this.tunnelInterfaceAllowSsh);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowSshVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowSshVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowSshVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowSshVariable);
    }
    /**
     * Allow/Deny STUN - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceAllowStun", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceAllowStun;

    /**
     * @return Allow/Deny STUN - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceAllowStun() {
        return Codegen.optional(this.tunnelInterfaceAllowStun);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceAllowStunVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceAllowStunVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceAllowStunVariable() {
        return Codegen.optional(this.tunnelInterfaceAllowStunVariable);
    }
    /**
     * Bind loopback tunnel interface to a physical interface
     * 
     */
    @Export(name="tunnelInterfaceBindLoopbackTunnel", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceBindLoopbackTunnel;

    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public Output<Optional<String>> tunnelInterfaceBindLoopbackTunnel() {
        return Codegen.optional(this.tunnelInterfaceBindLoopbackTunnel);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceBindLoopbackTunnelVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceBindLoopbackTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceBindLoopbackTunnelVariable() {
        return Codegen.optional(this.tunnelInterfaceBindLoopbackTunnelVariable);
    }
    /**
     * Set TLOC as border TLOC - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceBorder", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceBorder;

    /**
     * @return Set TLOC as border TLOC - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceBorder() {
        return Codegen.optional(this.tunnelInterfaceBorder);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceBorderVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceBorderVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceBorderVariable() {
        return Codegen.optional(this.tunnelInterfaceBorderVariable);
    }
    /**
     * Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     * 
     */
    @Export(name="tunnelInterfaceCarrier", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceCarrier;

    /**
     * @return Set carrier for TLOC - Choices: `default`, `carrier1`, `carrier2`, `carrier3`, `carrier4`, `carrier5`, `carrier6`,
     * `carrier7`, `carrier8` - Default value: `default`
     * 
     */
    public Output<Optional<String>> tunnelInterfaceCarrier() {
        return Codegen.optional(this.tunnelInterfaceCarrier);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceCarrierVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceCarrierVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceCarrierVariable() {
        return Codegen.optional(this.tunnelInterfaceCarrierVariable);
    }
    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceClearDontFragment", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceClearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface) - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceClearDontFragment() {
        return Codegen.optional(this.tunnelInterfaceClearDontFragment);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceClearDontFragmentVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceClearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceClearDontFragmentVariable() {
        return Codegen.optional(this.tunnelInterfaceClearDontFragmentVariable);
    }
    /**
     * Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceClearNetworkBroadcast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceClearNetworkBroadcast;

    /**
     * @return Accept and respond to network-prefix-directed broadcasts) - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceClearNetworkBroadcast() {
        return Codegen.optional(this.tunnelInterfaceClearNetworkBroadcast);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceClearNetworkBroadcastVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceClearNetworkBroadcastVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceClearNetworkBroadcastVariable() {
        return Codegen.optional(this.tunnelInterfaceClearNetworkBroadcastVariable);
    }
    /**
     * Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     * 
     */
    @Export(name="tunnelInterfaceColor", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceColor;

    /**
     * @return Set color for TLOC - Choices: `default`, `mpls`, `metro-ethernet`, `biz-internet`, `public-internet`, `lte`, `3g`,
     * `red`, `green`, `blue`, `gold`, `silver`, `bronze`, `custom1`, `custom2`, `custom3`, `private1`, `private2`, `private3`,
     * `private4`, `private5`, `private6` - Default value: `default`
     * 
     */
    public Output<Optional<String>> tunnelInterfaceColor() {
        return Codegen.optional(this.tunnelInterfaceColor);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceColorVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceColorVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceColorVariable() {
        return Codegen.optional(this.tunnelInterfaceColorVariable);
    }
    /**
     * Encapsulation for TLOC
     * 
     */
    @Export(name="tunnelInterfaceEncapsulations", refs={List.class,TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>> tunnelInterfaceEncapsulations;

    /**
     * @return Encapsulation for TLOC
     * 
     */
    public Output<Optional<List<TransportWanVpnInterfaceT1E1SerialFeatureTunnelInterfaceEncapsulation>>> tunnelInterfaceEncapsulations() {
        return Codegen.optional(this.tunnelInterfaceEncapsulations);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceExcludeControllerGroupListVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceExcludeControllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceExcludeControllerGroupListVariable() {
        return Codegen.optional(this.tunnelInterfaceExcludeControllerGroupListVariable);
    }
    /**
     * Exclude the following controller groups defined in this list
     * 
     */
    @Export(name="tunnelInterfaceExcludeControllerGroupLists", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> tunnelInterfaceExcludeControllerGroupLists;

    /**
     * @return Exclude the following controller groups defined in this list
     * 
     */
    public Output<Optional<List<Integer>>> tunnelInterfaceExcludeControllerGroupLists() {
        return Codegen.optional(this.tunnelInterfaceExcludeControllerGroupLists);
    }
    /**
     * List of groups - Range: `1`-`4294967295`
     * 
     */
    @Export(name="tunnelInterfaceGroups", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceGroups;

    /**
     * @return List of groups - Range: `1`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceGroups() {
        return Codegen.optional(this.tunnelInterfaceGroups);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceGroupsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceGroupsVariable() {
        return Codegen.optional(this.tunnelInterfaceGroupsVariable);
    }
    /**
     * Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
     * 
     */
    @Export(name="tunnelInterfaceHelloInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceHelloInterval;

    /**
     * @return Set time period of control hello packets &lt;100..600000&gt; milli seconds - Range: `100`-`600000` - Default value: `1000`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceHelloInterval() {
        return Codegen.optional(this.tunnelInterfaceHelloInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceHelloIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceHelloIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceHelloIntervalVariable() {
        return Codegen.optional(this.tunnelInterfaceHelloIntervalVariable);
    }
    /**
     * Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
     * 
     */
    @Export(name="tunnelInterfaceHelloTolerance", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceHelloTolerance;

    /**
     * @return Set tolerance of control hello packets &lt;12..6000&gt; seconds - Range: `12`-`6000` - Default value: `12`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceHelloTolerance() {
        return Codegen.optional(this.tunnelInterfaceHelloTolerance);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceHelloToleranceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceHelloToleranceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceHelloToleranceVariable() {
        return Codegen.optional(this.tunnelInterfaceHelloToleranceVariable);
    }
    /**
     * Set TLOC as last resort - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceLastResortCircuit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceLastResortCircuit;

    /**
     * @return Set TLOC as last resort - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceLastResortCircuit() {
        return Codegen.optional(this.tunnelInterfaceLastResortCircuit);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceLastResortCircuitVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceLastResortCircuitVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceLastResortCircuitVariable() {
        return Codegen.optional(this.tunnelInterfaceLastResortCircuitVariable);
    }
    /**
     * Set the interface as a low-bandwidth circuit - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceLowBandwidthLink", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceLowBandwidthLink;

    /**
     * @return Set the interface as a low-bandwidth circuit - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceLowBandwidthLink() {
        return Codegen.optional(this.tunnelInterfaceLowBandwidthLink);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceLowBandwidthLinkVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceLowBandwidthLinkVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceLowBandwidthLinkVariable() {
        return Codegen.optional(this.tunnelInterfaceLowBandwidthLinkVariable);
    }
    /**
     * Set the maximum number of control connections for this TLOC - Range: `0`-`100`
     * 
     */
    @Export(name="tunnelInterfaceMaxControlConnections", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceMaxControlConnections;

    /**
     * @return Set the maximum number of control connections for this TLOC - Range: `0`-`100`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceMaxControlConnections() {
        return Codegen.optional(this.tunnelInterfaceMaxControlConnections);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceMaxControlConnectionsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceMaxControlConnectionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceMaxControlConnectionsVariable() {
        return Codegen.optional(this.tunnelInterfaceMaxControlConnectionsVariable);
    }
    /**
     * Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
     * 
     */
    @Export(name="tunnelInterfaceNatRefreshInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceNatRefreshInterval;

    /**
     * @return Set time period of nat refresh packets &lt;1...60&gt; seconds - Range: `1`-`60` - Default value: `5`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceNatRefreshInterval() {
        return Codegen.optional(this.tunnelInterfaceNatRefreshInterval);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceNatRefreshIntervalVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceNatRefreshIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceNatRefreshIntervalVariable() {
        return Codegen.optional(this.tunnelInterfaceNatRefreshIntervalVariable);
    }
    /**
     * Disallow port hopping on the tunnel interface - Default value: `true`
     * 
     */
    @Export(name="tunnelInterfacePortHop", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfacePortHop;

    /**
     * @return Disallow port hopping on the tunnel interface - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfacePortHop() {
        return Codegen.optional(this.tunnelInterfacePortHop);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfacePortHopVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfacePortHopVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfacePortHopVariable() {
        return Codegen.optional(this.tunnelInterfacePortHopVariable);
    }
    /**
     * Restrict this TLOC behavior - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceRestrict", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceRestrict;

    /**
     * @return Restrict this TLOC behavior - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceRestrict() {
        return Codegen.optional(this.tunnelInterfaceRestrict);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceRestrictVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceRestrictVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceRestrictVariable() {
        return Codegen.optional(this.tunnelInterfaceRestrictVariable);
    }
    /**
     * Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    @Export(name="tunnelInterfaceTunnelTcpMss", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceTunnelTcpMss;

    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes - Range: `500`-`1460`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceTunnelTcpMss() {
        return Codegen.optional(this.tunnelInterfaceTunnelTcpMss);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceTunnelTcpMssVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceTunnelTcpMssVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceTunnelTcpMssVariable() {
        return Codegen.optional(this.tunnelInterfaceTunnelTcpMssVariable);
    }
    /**
     * Put this wan interface in STUN mode only - Default value: `false`
     * 
     */
    @Export(name="tunnelInterfaceVbondAsStunServer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tunnelInterfaceVbondAsStunServer;

    /**
     * @return Put this wan interface in STUN mode only - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> tunnelInterfaceVbondAsStunServer() {
        return Codegen.optional(this.tunnelInterfaceVbondAsStunServer);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceVbondAsStunServerVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceVbondAsStunServerVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceVbondAsStunServerVariable() {
        return Codegen.optional(this.tunnelInterfaceVbondAsStunServerVariable);
    }
    /**
     * Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
     * 
     */
    @Export(name="tunnelInterfaceVmanageConnectionPreference", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> tunnelInterfaceVmanageConnectionPreference;

    /**
     * @return Set interface preference for control connection to vManage &lt;0..8&gt; - Range: `0`-`8` - Default value: `5`
     * 
     */
    public Output<Optional<Integer>> tunnelInterfaceVmanageConnectionPreference() {
        return Codegen.optional(this.tunnelInterfaceVmanageConnectionPreference);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelInterfaceVmanageConnectionPreferenceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelInterfaceVmanageConnectionPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return Codegen.optional(this.tunnelInterfaceVmanageConnectionPreferenceVariable);
    }
    /**
     * Set tunnel QoS mode - Choices: `spoke`, `hub`
     * 
     */
    @Export(name="tunnelQosMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelQosMode;

    /**
     * @return Set tunnel QoS mode - Choices: `spoke`, `hub`
     * 
     */
    public Output<Optional<String>> tunnelQosMode() {
        return Codegen.optional(this.tunnelQosMode);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="tunnelQosModeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> tunnelQosModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> tunnelQosModeVariable() {
        return Codegen.optional(this.tunnelQosModeVariable);
    }
    /**
     * The version of the Feature
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the Feature
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TransportWanVpnInterfaceT1E1SerialFeature(java.lang.String name) {
        this(name, TransportWanVpnInterfaceT1E1SerialFeatureArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TransportWanVpnInterfaceT1E1SerialFeature(java.lang.String name, TransportWanVpnInterfaceT1E1SerialFeatureArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TransportWanVpnInterfaceT1E1SerialFeature(java.lang.String name, TransportWanVpnInterfaceT1E1SerialFeatureArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TransportWanVpnInterfaceT1E1SerialFeature(java.lang.String name, Output<java.lang.String> id, @Nullable TransportWanVpnInterfaceT1E1SerialFeatureState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/transportWanVpnInterfaceT1E1SerialFeature:TransportWanVpnInterfaceT1E1SerialFeature", name, state, makeResourceOptions(options, id), false);
    }

    private static TransportWanVpnInterfaceT1E1SerialFeatureArgs makeArgs(TransportWanVpnInterfaceT1E1SerialFeatureArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TransportWanVpnInterfaceT1E1SerialFeatureArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TransportWanVpnInterfaceT1E1SerialFeature get(java.lang.String name, Output<java.lang.String> id, @Nullable TransportWanVpnInterfaceT1E1SerialFeatureState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TransportWanVpnInterfaceT1E1SerialFeature(name, id, state, options);
    }
}
