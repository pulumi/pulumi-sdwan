// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCedgePimFeatureTemplateInterface;
import com.pulumi.sdwan.outputs.GetCedgePimFeatureTemplateRpAddress;
import com.pulumi.sdwan.outputs.GetCedgePimFeatureTemplateRpAnnounceField;
import com.pulumi.sdwan.outputs.GetCedgePimFeatureTemplateRpCandidate;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCedgePimFeatureTemplateResult {
    /**
     * @return Enable or disable auto-RP
     * 
     */
    private Boolean autoRp;
    /**
     * @return Variable name
     * 
     */
    private String autoRpVariable;
    /**
     * @return Set Autonomic-Networking virtual interface
     * 
     */
    private String bsrCandidate;
    /**
     * @return Variable name
     * 
     */
    private String bsrCandidateVariable;
    /**
     * @return Turn SSM On / Off
     * 
     */
    private Boolean default_;
    /**
     * @return Variable name
     * 
     */
    private String defaultVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Hash Mask length for RP selection
     * 
     */
    private String hashMaskLength;
    /**
     * @return Variable name
     * 
     */
    private String hashMaskLengthVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Set RP Discovery Interface Name
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return Set PIM interface parameters
     * 
     */
    private List<GetCedgePimFeatureTemplateInterface> interfaces;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Set RP candidate priority
     * 
     */
    private Integer priority;
    /**
     * @return Variable name
     * 
     */
    private String priorityVariable;
    /**
     * @return Set Access List for PIM SSM
     * 
     */
    private String range;
    /**
     * @return Variable name
     * 
     */
    private String rangeVariable;
    /**
     * @return Set Static RP Address(es)
     * 
     */
    private List<GetCedgePimFeatureTemplateRpAddress> rpAddresses;
    /**
     * @return Enable or disable RP Announce
     * 
     */
    private List<GetCedgePimFeatureTemplateRpAnnounceField> rpAnnounceFields;
    /**
     * @return Set BSR RP candidate filter
     * 
     */
    private String rpCandidateAccessList;
    /**
     * @return Variable name
     * 
     */
    private String rpCandidateAccessListVariable;
    /**
     * @return Set RP Discovery Scope
     * 
     */
    private List<GetCedgePimFeatureTemplateRpCandidate> rpCandidates;
    /**
     * @return Set RP Discovery Scope
     * 
     */
    private Integer scope;
    /**
     * @return Variable name
     * 
     */
    private String scopeVariable;
    /**
     * @return Set when PIM router joins the SPT (kbps)
     * 
     */
    private String sptThreshold;
    /**
     * @return Variable name
     * 
     */
    private String sptThresholdVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCedgePimFeatureTemplateResult() {}
    /**
     * @return Enable or disable auto-RP
     * 
     */
    public Boolean autoRp() {
        return this.autoRp;
    }
    /**
     * @return Variable name
     * 
     */
    public String autoRpVariable() {
        return this.autoRpVariable;
    }
    /**
     * @return Set Autonomic-Networking virtual interface
     * 
     */
    public String bsrCandidate() {
        return this.bsrCandidate;
    }
    /**
     * @return Variable name
     * 
     */
    public String bsrCandidateVariable() {
        return this.bsrCandidateVariable;
    }
    /**
     * @return Turn SSM On / Off
     * 
     */
    public Boolean default_() {
        return this.default_;
    }
    /**
     * @return Variable name
     * 
     */
    public String defaultVariable() {
        return this.defaultVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Hash Mask length for RP selection
     * 
     */
    public String hashMaskLength() {
        return this.hashMaskLength;
    }
    /**
     * @return Variable name
     * 
     */
    public String hashMaskLengthVariable() {
        return this.hashMaskLengthVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Set RP Discovery Interface Name
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return Set PIM interface parameters
     * 
     */
    public List<GetCedgePimFeatureTemplateInterface> interfaces() {
        return this.interfaces;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Set RP candidate priority
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Variable name
     * 
     */
    public String priorityVariable() {
        return this.priorityVariable;
    }
    /**
     * @return Set Access List for PIM SSM
     * 
     */
    public String range() {
        return this.range;
    }
    /**
     * @return Variable name
     * 
     */
    public String rangeVariable() {
        return this.rangeVariable;
    }
    /**
     * @return Set Static RP Address(es)
     * 
     */
    public List<GetCedgePimFeatureTemplateRpAddress> rpAddresses() {
        return this.rpAddresses;
    }
    /**
     * @return Enable or disable RP Announce
     * 
     */
    public List<GetCedgePimFeatureTemplateRpAnnounceField> rpAnnounceFields() {
        return this.rpAnnounceFields;
    }
    /**
     * @return Set BSR RP candidate filter
     * 
     */
    public String rpCandidateAccessList() {
        return this.rpCandidateAccessList;
    }
    /**
     * @return Variable name
     * 
     */
    public String rpCandidateAccessListVariable() {
        return this.rpCandidateAccessListVariable;
    }
    /**
     * @return Set RP Discovery Scope
     * 
     */
    public List<GetCedgePimFeatureTemplateRpCandidate> rpCandidates() {
        return this.rpCandidates;
    }
    /**
     * @return Set RP Discovery Scope
     * 
     */
    public Integer scope() {
        return this.scope;
    }
    /**
     * @return Variable name
     * 
     */
    public String scopeVariable() {
        return this.scopeVariable;
    }
    /**
     * @return Set when PIM router joins the SPT (kbps)
     * 
     */
    public String sptThreshold() {
        return this.sptThreshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String sptThresholdVariable() {
        return this.sptThresholdVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCedgePimFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean autoRp;
        private String autoRpVariable;
        private String bsrCandidate;
        private String bsrCandidateVariable;
        private Boolean default_;
        private String defaultVariable;
        private String description;
        private List<String> deviceTypes;
        private String hashMaskLength;
        private String hashMaskLengthVariable;
        private String id;
        private String interfaceName;
        private String interfaceNameVariable;
        private List<GetCedgePimFeatureTemplateInterface> interfaces;
        private String name;
        private Integer priority;
        private String priorityVariable;
        private String range;
        private String rangeVariable;
        private List<GetCedgePimFeatureTemplateRpAddress> rpAddresses;
        private List<GetCedgePimFeatureTemplateRpAnnounceField> rpAnnounceFields;
        private String rpCandidateAccessList;
        private String rpCandidateAccessListVariable;
        private List<GetCedgePimFeatureTemplateRpCandidate> rpCandidates;
        private Integer scope;
        private String scopeVariable;
        private String sptThreshold;
        private String sptThresholdVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetCedgePimFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoRp = defaults.autoRp;
    	      this.autoRpVariable = defaults.autoRpVariable;
    	      this.bsrCandidate = defaults.bsrCandidate;
    	      this.bsrCandidateVariable = defaults.bsrCandidateVariable;
    	      this.default_ = defaults.default_;
    	      this.defaultVariable = defaults.defaultVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.hashMaskLength = defaults.hashMaskLength;
    	      this.hashMaskLengthVariable = defaults.hashMaskLengthVariable;
    	      this.id = defaults.id;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.interfaces = defaults.interfaces;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.priorityVariable = defaults.priorityVariable;
    	      this.range = defaults.range;
    	      this.rangeVariable = defaults.rangeVariable;
    	      this.rpAddresses = defaults.rpAddresses;
    	      this.rpAnnounceFields = defaults.rpAnnounceFields;
    	      this.rpCandidateAccessList = defaults.rpCandidateAccessList;
    	      this.rpCandidateAccessListVariable = defaults.rpCandidateAccessListVariable;
    	      this.rpCandidates = defaults.rpCandidates;
    	      this.scope = defaults.scope;
    	      this.scopeVariable = defaults.scopeVariable;
    	      this.sptThreshold = defaults.sptThreshold;
    	      this.sptThresholdVariable = defaults.sptThresholdVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder autoRp(Boolean autoRp) {
            if (autoRp == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "autoRp");
            }
            this.autoRp = autoRp;
            return this;
        }
        @CustomType.Setter
        public Builder autoRpVariable(String autoRpVariable) {
            if (autoRpVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "autoRpVariable");
            }
            this.autoRpVariable = autoRpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bsrCandidate(String bsrCandidate) {
            if (bsrCandidate == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "bsrCandidate");
            }
            this.bsrCandidate = bsrCandidate;
            return this;
        }
        @CustomType.Setter
        public Builder bsrCandidateVariable(String bsrCandidateVariable) {
            if (bsrCandidateVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "bsrCandidateVariable");
            }
            this.bsrCandidateVariable = bsrCandidateVariable;
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            if (default_ == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "default_");
            }
            this.default_ = default_;
            return this;
        }
        @CustomType.Setter
        public Builder defaultVariable(String defaultVariable) {
            if (defaultVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "defaultVariable");
            }
            this.defaultVariable = defaultVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder hashMaskLength(String hashMaskLength) {
            if (hashMaskLength == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "hashMaskLength");
            }
            this.hashMaskLength = hashMaskLength;
            return this;
        }
        @CustomType.Setter
        public Builder hashMaskLengthVariable(String hashMaskLengthVariable) {
            if (hashMaskLengthVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "hashMaskLengthVariable");
            }
            this.hashMaskLengthVariable = hashMaskLengthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaces(List<GetCedgePimFeatureTemplateInterface> interfaces) {
            if (interfaces == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "interfaces");
            }
            this.interfaces = interfaces;
            return this;
        }
        public Builder interfaces(GetCedgePimFeatureTemplateInterface... interfaces) {
            return interfaces(List.of(interfaces));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder priorityVariable(String priorityVariable) {
            if (priorityVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "priorityVariable");
            }
            this.priorityVariable = priorityVariable;
            return this;
        }
        @CustomType.Setter
        public Builder range(String range) {
            if (range == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "range");
            }
            this.range = range;
            return this;
        }
        @CustomType.Setter
        public Builder rangeVariable(String rangeVariable) {
            if (rangeVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "rangeVariable");
            }
            this.rangeVariable = rangeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder rpAddresses(List<GetCedgePimFeatureTemplateRpAddress> rpAddresses) {
            if (rpAddresses == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "rpAddresses");
            }
            this.rpAddresses = rpAddresses;
            return this;
        }
        public Builder rpAddresses(GetCedgePimFeatureTemplateRpAddress... rpAddresses) {
            return rpAddresses(List.of(rpAddresses));
        }
        @CustomType.Setter
        public Builder rpAnnounceFields(List<GetCedgePimFeatureTemplateRpAnnounceField> rpAnnounceFields) {
            if (rpAnnounceFields == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "rpAnnounceFields");
            }
            this.rpAnnounceFields = rpAnnounceFields;
            return this;
        }
        public Builder rpAnnounceFields(GetCedgePimFeatureTemplateRpAnnounceField... rpAnnounceFields) {
            return rpAnnounceFields(List.of(rpAnnounceFields));
        }
        @CustomType.Setter
        public Builder rpCandidateAccessList(String rpCandidateAccessList) {
            if (rpCandidateAccessList == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "rpCandidateAccessList");
            }
            this.rpCandidateAccessList = rpCandidateAccessList;
            return this;
        }
        @CustomType.Setter
        public Builder rpCandidateAccessListVariable(String rpCandidateAccessListVariable) {
            if (rpCandidateAccessListVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "rpCandidateAccessListVariable");
            }
            this.rpCandidateAccessListVariable = rpCandidateAccessListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder rpCandidates(List<GetCedgePimFeatureTemplateRpCandidate> rpCandidates) {
            if (rpCandidates == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "rpCandidates");
            }
            this.rpCandidates = rpCandidates;
            return this;
        }
        public Builder rpCandidates(GetCedgePimFeatureTemplateRpCandidate... rpCandidates) {
            return rpCandidates(List.of(rpCandidates));
        }
        @CustomType.Setter
        public Builder scope(Integer scope) {
            if (scope == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "scope");
            }
            this.scope = scope;
            return this;
        }
        @CustomType.Setter
        public Builder scopeVariable(String scopeVariable) {
            if (scopeVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "scopeVariable");
            }
            this.scopeVariable = scopeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sptThreshold(String sptThreshold) {
            if (sptThreshold == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "sptThreshold");
            }
            this.sptThreshold = sptThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder sptThresholdVariable(String sptThresholdVariable) {
            if (sptThresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "sptThresholdVariable");
            }
            this.sptThresholdVariable = sptThresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCedgePimFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCedgePimFeatureTemplateResult build() {
            final var _resultValue = new GetCedgePimFeatureTemplateResult();
            _resultValue.autoRp = autoRp;
            _resultValue.autoRpVariable = autoRpVariable;
            _resultValue.bsrCandidate = bsrCandidate;
            _resultValue.bsrCandidateVariable = bsrCandidateVariable;
            _resultValue.default_ = default_;
            _resultValue.defaultVariable = defaultVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.hashMaskLength = hashMaskLength;
            _resultValue.hashMaskLengthVariable = hashMaskLengthVariable;
            _resultValue.id = id;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.interfaces = interfaces;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.priorityVariable = priorityVariable;
            _resultValue.range = range;
            _resultValue.rangeVariable = rangeVariable;
            _resultValue.rpAddresses = rpAddresses;
            _resultValue.rpAnnounceFields = rpAnnounceFields;
            _resultValue.rpCandidateAccessList = rpCandidateAccessList;
            _resultValue.rpCandidateAccessListVariable = rpCandidateAccessListVariable;
            _resultValue.rpCandidates = rpCandidates;
            _resultValue.scope = scope;
            _resultValue.scopeVariable = scopeVariable;
            _resultValue.sptThreshold = sptThreshold;
            _resultValue.sptThresholdVariable = sptThresholdVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
