// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.sdwan.inputs.ServiceDhcpServerFeatureOptionCodeArgs;
import com.pulumi.sdwan.inputs.ServiceDhcpServerFeatureStaticLeaseArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDhcpServerFeatureState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDhcpServerFeatureState Empty = new ServiceDhcpServerFeatureState();

    /**
     * Set IP address of default gateway
     * 
     */
    @Import(name="defaultGateway")
    private @Nullable Output<String> defaultGateway;

    /**
     * @return Set IP address of default gateway
     * 
     */
    public Optional<Output<String>> defaultGateway() {
        return Optional.ofNullable(this.defaultGateway);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="defaultGatewayVariable")
    private @Nullable Output<String> defaultGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> defaultGatewayVariable() {
        return Optional.ofNullable(this.defaultGatewayVariable);
    }

    /**
     * The description of the Feature
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Configure one or more DNS server IP addresses
     * 
     */
    @Import(name="dnsServers")
    private @Nullable Output<List<String>> dnsServers;

    /**
     * @return Configure one or more DNS server IP addresses
     * 
     */
    public Optional<Output<List<String>>> dnsServers() {
        return Optional.ofNullable(this.dnsServers);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="dnsServersVariable")
    private @Nullable Output<String> dnsServersVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> dnsServersVariable() {
        return Optional.ofNullable(this.dnsServersVariable);
    }

    /**
     * Set domain name client uses to resolve hostnames
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return Set domain name client uses to resolve hostnames
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="domainNameVariable")
    private @Nullable Output<String> domainNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> domainNameVariable() {
        return Optional.ofNullable(this.domainNameVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="excludeVariable")
    private @Nullable Output<String> excludeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> excludeVariable() {
        return Optional.ofNullable(this.excludeVariable);
    }

    /**
     * Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    @Import(name="excludes")
    private @Nullable Output<List<String>> excludes;

    /**
     * @return Configure IPv4 address to exclude from DHCP address pool
     * 
     */
    public Optional<Output<List<String>>> excludes() {
        return Optional.ofNullable(this.excludes);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId")
    private @Nullable Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Optional<Output<String>> featureProfileId() {
        return Optional.ofNullable(this.featureProfileId);
    }

    /**
     * Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     * 
     */
    @Import(name="interfaceMtu")
    private @Nullable Output<Integer> interfaceMtu;

    /**
     * @return Set MTU on interface to DHCP client
     *   - Range: `68`-`65535`
     * 
     */
    public Optional<Output<Integer>> interfaceMtu() {
        return Optional.ofNullable(this.interfaceMtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceMtuVariable")
    private @Nullable Output<String> interfaceMtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceMtuVariable() {
        return Optional.ofNullable(this.interfaceMtuVariable);
    }

    /**
     * Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     * 
     */
    @Import(name="leaseTime")
    private @Nullable Output<Integer> leaseTime;

    /**
     * @return Configure how long a DHCP-assigned IP address is valid
     *   - Range: `60`-`31536000`
     *   - Default value: `86400`
     * 
     */
    public Optional<Output<Integer>> leaseTime() {
        return Optional.ofNullable(this.leaseTime);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="leaseTimeVariable")
    private @Nullable Output<String> leaseTimeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> leaseTimeVariable() {
        return Optional.ofNullable(this.leaseTimeVariable);
    }

    /**
     * The name of the Feature
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Network Address
     * 
     */
    @Import(name="networkAddress")
    private @Nullable Output<String> networkAddress;

    /**
     * @return Network Address
     * 
     */
    public Optional<Output<String>> networkAddress() {
        return Optional.ofNullable(this.networkAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="networkAddressVariable")
    private @Nullable Output<String> networkAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> networkAddressVariable() {
        return Optional.ofNullable(this.networkAddressVariable);
    }

    /**
     * Configure Options Code
     * 
     */
    @Import(name="optionCodes")
    private @Nullable Output<List<ServiceDhcpServerFeatureOptionCodeArgs>> optionCodes;

    /**
     * @return Configure Options Code
     * 
     */
    public Optional<Output<List<ServiceDhcpServerFeatureOptionCodeArgs>>> optionCodes() {
        return Optional.ofNullable(this.optionCodes);
    }

    /**
     * Configure static IP addresses
     * 
     */
    @Import(name="staticLeases")
    private @Nullable Output<List<ServiceDhcpServerFeatureStaticLeaseArgs>> staticLeases;

    /**
     * @return Configure static IP addresses
     * 
     */
    public Optional<Output<List<ServiceDhcpServerFeatureStaticLeaseArgs>>> staticLeases() {
        return Optional.ofNullable(this.staticLeases);
    }

    /**
     * Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    @Import(name="subnetMask")
    private @Nullable Output<String> subnetMask;

    /**
     * @return Subnet Mask
     *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
     * 
     */
    public Optional<Output<String>> subnetMask() {
        return Optional.ofNullable(this.subnetMask);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="subnetMaskVariable")
    private @Nullable Output<String> subnetMaskVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> subnetMaskVariable() {
        return Optional.ofNullable(this.subnetMaskVariable);
    }

    /**
     * Configure TFTP server IP addresses
     * 
     */
    @Import(name="tftpServers")
    private @Nullable Output<List<String>> tftpServers;

    /**
     * @return Configure TFTP server IP addresses
     * 
     */
    public Optional<Output<List<String>>> tftpServers() {
        return Optional.ofNullable(this.tftpServers);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tftpServersVariable")
    private @Nullable Output<String> tftpServersVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tftpServersVariable() {
        return Optional.ofNullable(this.tftpServersVariable);
    }

    /**
     * The version of the Feature
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the Feature
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private ServiceDhcpServerFeatureState() {}

    private ServiceDhcpServerFeatureState(ServiceDhcpServerFeatureState $) {
        this.defaultGateway = $.defaultGateway;
        this.defaultGatewayVariable = $.defaultGatewayVariable;
        this.description = $.description;
        this.dnsServers = $.dnsServers;
        this.dnsServersVariable = $.dnsServersVariable;
        this.domainName = $.domainName;
        this.domainNameVariable = $.domainNameVariable;
        this.excludeVariable = $.excludeVariable;
        this.excludes = $.excludes;
        this.featureProfileId = $.featureProfileId;
        this.interfaceMtu = $.interfaceMtu;
        this.interfaceMtuVariable = $.interfaceMtuVariable;
        this.leaseTime = $.leaseTime;
        this.leaseTimeVariable = $.leaseTimeVariable;
        this.name = $.name;
        this.networkAddress = $.networkAddress;
        this.networkAddressVariable = $.networkAddressVariable;
        this.optionCodes = $.optionCodes;
        this.staticLeases = $.staticLeases;
        this.subnetMask = $.subnetMask;
        this.subnetMaskVariable = $.subnetMaskVariable;
        this.tftpServers = $.tftpServers;
        this.tftpServersVariable = $.tftpServersVariable;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDhcpServerFeatureState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDhcpServerFeatureState $;

        public Builder() {
            $ = new ServiceDhcpServerFeatureState();
        }

        public Builder(ServiceDhcpServerFeatureState defaults) {
            $ = new ServiceDhcpServerFeatureState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultGateway Set IP address of default gateway
         * 
         * @return builder
         * 
         */
        public Builder defaultGateway(@Nullable Output<String> defaultGateway) {
            $.defaultGateway = defaultGateway;
            return this;
        }

        /**
         * @param defaultGateway Set IP address of default gateway
         * 
         * @return builder
         * 
         */
        public Builder defaultGateway(String defaultGateway) {
            return defaultGateway(Output.of(defaultGateway));
        }

        /**
         * @param defaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder defaultGatewayVariable(@Nullable Output<String> defaultGatewayVariable) {
            $.defaultGatewayVariable = defaultGatewayVariable;
            return this;
        }

        /**
         * @param defaultGatewayVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder defaultGatewayVariable(String defaultGatewayVariable) {
            return defaultGatewayVariable(Output.of(defaultGatewayVariable));
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dnsServers Configure one or more DNS server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(@Nullable Output<List<String>> dnsServers) {
            $.dnsServers = dnsServers;
            return this;
        }

        /**
         * @param dnsServers Configure one or more DNS server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(List<String> dnsServers) {
            return dnsServers(Output.of(dnsServers));
        }

        /**
         * @param dnsServers Configure one or more DNS server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }

        /**
         * @param dnsServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dnsServersVariable(@Nullable Output<String> dnsServersVariable) {
            $.dnsServersVariable = dnsServersVariable;
            return this;
        }

        /**
         * @param dnsServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder dnsServersVariable(String dnsServersVariable) {
            return dnsServersVariable(Output.of(dnsServersVariable));
        }

        /**
         * @param domainName Set domain name client uses to resolve hostnames
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName Set domain name client uses to resolve hostnames
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param domainNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder domainNameVariable(@Nullable Output<String> domainNameVariable) {
            $.domainNameVariable = domainNameVariable;
            return this;
        }

        /**
         * @param domainNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder domainNameVariable(String domainNameVariable) {
            return domainNameVariable(Output.of(domainNameVariable));
        }

        /**
         * @param excludeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder excludeVariable(@Nullable Output<String> excludeVariable) {
            $.excludeVariable = excludeVariable;
            return this;
        }

        /**
         * @param excludeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder excludeVariable(String excludeVariable) {
            return excludeVariable(Output.of(excludeVariable));
        }

        /**
         * @param excludes Configure IPv4 address to exclude from DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder excludes(@Nullable Output<List<String>> excludes) {
            $.excludes = excludes;
            return this;
        }

        /**
         * @param excludes Configure IPv4 address to exclude from DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder excludes(List<String> excludes) {
            return excludes(Output.of(excludes));
        }

        /**
         * @param excludes Configure IPv4 address to exclude from DHCP address pool
         * 
         * @return builder
         * 
         */
        public Builder excludes(String... excludes) {
            return excludes(List.of(excludes));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(@Nullable Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param interfaceMtu Set MTU on interface to DHCP client
         *   - Range: `68`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtu(@Nullable Output<Integer> interfaceMtu) {
            $.interfaceMtu = interfaceMtu;
            return this;
        }

        /**
         * @param interfaceMtu Set MTU on interface to DHCP client
         *   - Range: `68`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtu(Integer interfaceMtu) {
            return interfaceMtu(Output.of(interfaceMtu));
        }

        /**
         * @param interfaceMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtuVariable(@Nullable Output<String> interfaceMtuVariable) {
            $.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }

        /**
         * @param interfaceMtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            return interfaceMtuVariable(Output.of(interfaceMtuVariable));
        }

        /**
         * @param leaseTime Configure how long a DHCP-assigned IP address is valid
         *   - Range: `60`-`31536000`
         *   - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder leaseTime(@Nullable Output<Integer> leaseTime) {
            $.leaseTime = leaseTime;
            return this;
        }

        /**
         * @param leaseTime Configure how long a DHCP-assigned IP address is valid
         *   - Range: `60`-`31536000`
         *   - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder leaseTime(Integer leaseTime) {
            return leaseTime(Output.of(leaseTime));
        }

        /**
         * @param leaseTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder leaseTimeVariable(@Nullable Output<String> leaseTimeVariable) {
            $.leaseTimeVariable = leaseTimeVariable;
            return this;
        }

        /**
         * @param leaseTimeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder leaseTimeVariable(String leaseTimeVariable) {
            return leaseTimeVariable(Output.of(leaseTimeVariable));
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param networkAddress Network Address
         * 
         * @return builder
         * 
         */
        public Builder networkAddress(@Nullable Output<String> networkAddress) {
            $.networkAddress = networkAddress;
            return this;
        }

        /**
         * @param networkAddress Network Address
         * 
         * @return builder
         * 
         */
        public Builder networkAddress(String networkAddress) {
            return networkAddress(Output.of(networkAddress));
        }

        /**
         * @param networkAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder networkAddressVariable(@Nullable Output<String> networkAddressVariable) {
            $.networkAddressVariable = networkAddressVariable;
            return this;
        }

        /**
         * @param networkAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder networkAddressVariable(String networkAddressVariable) {
            return networkAddressVariable(Output.of(networkAddressVariable));
        }

        /**
         * @param optionCodes Configure Options Code
         * 
         * @return builder
         * 
         */
        public Builder optionCodes(@Nullable Output<List<ServiceDhcpServerFeatureOptionCodeArgs>> optionCodes) {
            $.optionCodes = optionCodes;
            return this;
        }

        /**
         * @param optionCodes Configure Options Code
         * 
         * @return builder
         * 
         */
        public Builder optionCodes(List<ServiceDhcpServerFeatureOptionCodeArgs> optionCodes) {
            return optionCodes(Output.of(optionCodes));
        }

        /**
         * @param optionCodes Configure Options Code
         * 
         * @return builder
         * 
         */
        public Builder optionCodes(ServiceDhcpServerFeatureOptionCodeArgs... optionCodes) {
            return optionCodes(List.of(optionCodes));
        }

        /**
         * @param staticLeases Configure static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticLeases(@Nullable Output<List<ServiceDhcpServerFeatureStaticLeaseArgs>> staticLeases) {
            $.staticLeases = staticLeases;
            return this;
        }

        /**
         * @param staticLeases Configure static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticLeases(List<ServiceDhcpServerFeatureStaticLeaseArgs> staticLeases) {
            return staticLeases(Output.of(staticLeases));
        }

        /**
         * @param staticLeases Configure static IP addresses
         * 
         * @return builder
         * 
         */
        public Builder staticLeases(ServiceDhcpServerFeatureStaticLeaseArgs... staticLeases) {
            return staticLeases(List.of(staticLeases));
        }

        /**
         * @param subnetMask Subnet Mask
         *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(@Nullable Output<String> subnetMask) {
            $.subnetMask = subnetMask;
            return this;
        }

        /**
         * @param subnetMask Subnet Mask
         *   - Choices: `255.255.255.255`, `255.255.255.254`, `255.255.255.252`, `255.255.255.248`, `255.255.255.240`, `255.255.255.224`, `255.255.255.192`, `255.255.255.128`, `255.255.255.0`, `255.255.254.0`, `255.255.252.0`, `255.255.248.0`, `255.255.240.0`, `255.255.224.0`, `255.255.192.0`, `255.255.128.0`, `255.255.0.0`, `255.254.0.0`, `255.252.0.0`, `255.240.0.0`, `255.224.0.0`, `255.192.0.0`, `255.128.0.0`, `255.0.0.0`, `254.0.0.0`, `252.0.0.0`, `248.0.0.0`, `240.0.0.0`, `224.0.0.0`, `192.0.0.0`, `128.0.0.0`, `0.0.0.0`
         * 
         * @return builder
         * 
         */
        public Builder subnetMask(String subnetMask) {
            return subnetMask(Output.of(subnetMask));
        }

        /**
         * @param subnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder subnetMaskVariable(@Nullable Output<String> subnetMaskVariable) {
            $.subnetMaskVariable = subnetMaskVariable;
            return this;
        }

        /**
         * @param subnetMaskVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder subnetMaskVariable(String subnetMaskVariable) {
            return subnetMaskVariable(Output.of(subnetMaskVariable));
        }

        /**
         * @param tftpServers Configure TFTP server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder tftpServers(@Nullable Output<List<String>> tftpServers) {
            $.tftpServers = tftpServers;
            return this;
        }

        /**
         * @param tftpServers Configure TFTP server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder tftpServers(List<String> tftpServers) {
            return tftpServers(Output.of(tftpServers));
        }

        /**
         * @param tftpServers Configure TFTP server IP addresses
         * 
         * @return builder
         * 
         */
        public Builder tftpServers(String... tftpServers) {
            return tftpServers(List.of(tftpServers));
        }

        /**
         * @param tftpServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tftpServersVariable(@Nullable Output<String> tftpServersVariable) {
            $.tftpServersVariable = tftpServersVariable;
            return this;
        }

        /**
         * @param tftpServersVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tftpServersVariable(String tftpServersVariable) {
            return tftpServersVariable(Output.of(tftpServersVariable));
        }

        /**
         * @param version The version of the Feature
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the Feature
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public ServiceDhcpServerFeatureState build() {
            return $;
        }
    }

}
