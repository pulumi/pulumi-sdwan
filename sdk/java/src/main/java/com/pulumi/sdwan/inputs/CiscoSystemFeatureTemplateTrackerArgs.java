// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoSystemFeatureTemplateTrackerArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoSystemFeatureTemplateTrackerArgs Empty = new CiscoSystemFeatureTemplateTrackerArgs();

    /**
     * Type of grouping to be performed for tracker group
     *   - Choices: `or`, `and`
     *   - Default value: `or`
     * 
     */
    @Import(name="boolean")
    private @Nullable Output<String> boolean_;

    /**
     * @return Type of grouping to be performed for tracker group
     *   - Choices: `or`, `and`
     *   - Default value: `or`
     * 
     */
    public Optional<Output<String>> boolean_() {
        return Optional.ofNullable(this.boolean_);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="booleanVariable")
    private @Nullable Output<String> booleanVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> booleanVariable() {
        return Optional.ofNullable(this.booleanVariable);
    }

    /**
     * Tracker member names separated by space
     * 
     */
    @Import(name="elements")
    private @Nullable Output<List<String>> elements;

    /**
     * @return Tracker member names separated by space
     * 
     */
    public Optional<Output<List<String>>> elements() {
        return Optional.ofNullable(this.elements);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="elementsVariable")
    private @Nullable Output<String> elementsVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> elementsVariable() {
        return Optional.ofNullable(this.elementsVariable);
    }

    /**
     * API url of endpoint
     * 
     */
    @Import(name="endpointApiUrl")
    private @Nullable Output<String> endpointApiUrl;

    /**
     * @return API url of endpoint
     * 
     */
    public Optional<Output<String>> endpointApiUrl() {
        return Optional.ofNullable(this.endpointApiUrl);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointApiUrlVariable")
    private @Nullable Output<String> endpointApiUrlVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointApiUrlVariable() {
        return Optional.ofNullable(this.endpointApiUrlVariable);
    }

    /**
     * DNS name of endpoint
     * 
     */
    @Import(name="endpointDnsName")
    private @Nullable Output<String> endpointDnsName;

    /**
     * @return DNS name of endpoint
     * 
     */
    public Optional<Output<String>> endpointDnsName() {
        return Optional.ofNullable(this.endpointDnsName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointDnsNameVariable")
    private @Nullable Output<String> endpointDnsNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointDnsNameVariable() {
        return Optional.ofNullable(this.endpointDnsNameVariable);
    }

    /**
     * IP address of endpoint
     * 
     */
    @Import(name="endpointIp")
    private @Nullable Output<String> endpointIp;

    /**
     * @return IP address of endpoint
     * 
     */
    public Optional<Output<String>> endpointIp() {
        return Optional.ofNullable(this.endpointIp);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="endpointIpVariable")
    private @Nullable Output<String> endpointIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> endpointIpVariable() {
        return Optional.ofNullable(this.endpointIpVariable);
    }

    /**
     * Probe interval &lt;10..600&gt; seconds
     *   - Range: `20`-`600`
     *   - Default value: `60`
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return Probe interval &lt;10..600&gt; seconds
     *   - Range: `20`-`600`
     *   - Default value: `60`
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="intervalVariable")
    private @Nullable Output<String> intervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> intervalVariable() {
        return Optional.ofNullable(this.intervalVariable);
    }

    /**
     * Probe failure multiplier &lt;1..10&gt; failed attempts
     *   - Range: `1`-`10`
     *   - Default value: `3`
     * 
     */
    @Import(name="multiplier")
    private @Nullable Output<Integer> multiplier;

    /**
     * @return Probe failure multiplier &lt;1..10&gt; failed attempts
     *   - Range: `1`-`10`
     *   - Default value: `3`
     * 
     */
    public Optional<Output<Integer>> multiplier() {
        return Optional.ofNullable(this.multiplier);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="multiplierVariable")
    private @Nullable Output<String> multiplierVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> multiplierVariable() {
        return Optional.ofNullable(this.multiplierVariable);
    }

    /**
     * Tracker name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Tracker name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="nameVariable")
    private @Nullable Output<String> nameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> nameVariable() {
        return Optional.ofNullable(this.nameVariable);
    }

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Probe Timeout threshold &lt;100..1000&gt; milliseconds
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return Probe Timeout threshold &lt;100..1000&gt; milliseconds
     *   - Range: `100`-`1000`
     *   - Default value: `300`
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="thresholdVariable")
    private @Nullable Output<String> thresholdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> thresholdVariable() {
        return Optional.ofNullable(this.thresholdVariable);
    }

    /**
     * Default(Interface)
     *   - Choices: `tracker-group`, `interface`, `static-route`
     *   - Default value: `interface`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Default(Interface)
     *   - Choices: `tracker-group`, `interface`, `static-route`
     *   - Default value: `interface`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="typeVariable")
    private @Nullable Output<String> typeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> typeVariable() {
        return Optional.ofNullable(this.typeVariable);
    }

    private CiscoSystemFeatureTemplateTrackerArgs() {}

    private CiscoSystemFeatureTemplateTrackerArgs(CiscoSystemFeatureTemplateTrackerArgs $) {
        this.boolean_ = $.boolean_;
        this.booleanVariable = $.booleanVariable;
        this.elements = $.elements;
        this.elementsVariable = $.elementsVariable;
        this.endpointApiUrl = $.endpointApiUrl;
        this.endpointApiUrlVariable = $.endpointApiUrlVariable;
        this.endpointDnsName = $.endpointDnsName;
        this.endpointDnsNameVariable = $.endpointDnsNameVariable;
        this.endpointIp = $.endpointIp;
        this.endpointIpVariable = $.endpointIpVariable;
        this.interval = $.interval;
        this.intervalVariable = $.intervalVariable;
        this.multiplier = $.multiplier;
        this.multiplierVariable = $.multiplierVariable;
        this.name = $.name;
        this.nameVariable = $.nameVariable;
        this.optional = $.optional;
        this.threshold = $.threshold;
        this.thresholdVariable = $.thresholdVariable;
        this.type = $.type;
        this.typeVariable = $.typeVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoSystemFeatureTemplateTrackerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoSystemFeatureTemplateTrackerArgs $;

        public Builder() {
            $ = new CiscoSystemFeatureTemplateTrackerArgs();
        }

        public Builder(CiscoSystemFeatureTemplateTrackerArgs defaults) {
            $ = new CiscoSystemFeatureTemplateTrackerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param boolean_ Type of grouping to be performed for tracker group
         *   - Choices: `or`, `and`
         *   - Default value: `or`
         * 
         * @return builder
         * 
         */
        public Builder boolean_(@Nullable Output<String> boolean_) {
            $.boolean_ = boolean_;
            return this;
        }

        /**
         * @param boolean_ Type of grouping to be performed for tracker group
         *   - Choices: `or`, `and`
         *   - Default value: `or`
         * 
         * @return builder
         * 
         */
        public Builder boolean_(String boolean_) {
            return boolean_(Output.of(boolean_));
        }

        /**
         * @param booleanVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder booleanVariable(@Nullable Output<String> booleanVariable) {
            $.booleanVariable = booleanVariable;
            return this;
        }

        /**
         * @param booleanVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder booleanVariable(String booleanVariable) {
            return booleanVariable(Output.of(booleanVariable));
        }

        /**
         * @param elements Tracker member names separated by space
         * 
         * @return builder
         * 
         */
        public Builder elements(@Nullable Output<List<String>> elements) {
            $.elements = elements;
            return this;
        }

        /**
         * @param elements Tracker member names separated by space
         * 
         * @return builder
         * 
         */
        public Builder elements(List<String> elements) {
            return elements(Output.of(elements));
        }

        /**
         * @param elements Tracker member names separated by space
         * 
         * @return builder
         * 
         */
        public Builder elements(String... elements) {
            return elements(List.of(elements));
        }

        /**
         * @param elementsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder elementsVariable(@Nullable Output<String> elementsVariable) {
            $.elementsVariable = elementsVariable;
            return this;
        }

        /**
         * @param elementsVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder elementsVariable(String elementsVariable) {
            return elementsVariable(Output.of(elementsVariable));
        }

        /**
         * @param endpointApiUrl API url of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrl(@Nullable Output<String> endpointApiUrl) {
            $.endpointApiUrl = endpointApiUrl;
            return this;
        }

        /**
         * @param endpointApiUrl API url of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrl(String endpointApiUrl) {
            return endpointApiUrl(Output.of(endpointApiUrl));
        }

        /**
         * @param endpointApiUrlVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrlVariable(@Nullable Output<String> endpointApiUrlVariable) {
            $.endpointApiUrlVariable = endpointApiUrlVariable;
            return this;
        }

        /**
         * @param endpointApiUrlVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointApiUrlVariable(String endpointApiUrlVariable) {
            return endpointApiUrlVariable(Output.of(endpointApiUrlVariable));
        }

        /**
         * @param endpointDnsName DNS name of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsName(@Nullable Output<String> endpointDnsName) {
            $.endpointDnsName = endpointDnsName;
            return this;
        }

        /**
         * @param endpointDnsName DNS name of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsName(String endpointDnsName) {
            return endpointDnsName(Output.of(endpointDnsName));
        }

        /**
         * @param endpointDnsNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsNameVariable(@Nullable Output<String> endpointDnsNameVariable) {
            $.endpointDnsNameVariable = endpointDnsNameVariable;
            return this;
        }

        /**
         * @param endpointDnsNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointDnsNameVariable(String endpointDnsNameVariable) {
            return endpointDnsNameVariable(Output.of(endpointDnsNameVariable));
        }

        /**
         * @param endpointIp IP address of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointIp(@Nullable Output<String> endpointIp) {
            $.endpointIp = endpointIp;
            return this;
        }

        /**
         * @param endpointIp IP address of endpoint
         * 
         * @return builder
         * 
         */
        public Builder endpointIp(String endpointIp) {
            return endpointIp(Output.of(endpointIp));
        }

        /**
         * @param endpointIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointIpVariable(@Nullable Output<String> endpointIpVariable) {
            $.endpointIpVariable = endpointIpVariable;
            return this;
        }

        /**
         * @param endpointIpVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder endpointIpVariable(String endpointIpVariable) {
            return endpointIpVariable(Output.of(endpointIpVariable));
        }

        /**
         * @param interval Probe interval &lt;10..600&gt; seconds
         *   - Range: `20`-`600`
         *   - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Probe interval &lt;10..600&gt; seconds
         *   - Range: `20`-`600`
         *   - Default value: `60`
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param intervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder intervalVariable(@Nullable Output<String> intervalVariable) {
            $.intervalVariable = intervalVariable;
            return this;
        }

        /**
         * @param intervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder intervalVariable(String intervalVariable) {
            return intervalVariable(Output.of(intervalVariable));
        }

        /**
         * @param multiplier Probe failure multiplier &lt;1..10&gt; failed attempts
         *   - Range: `1`-`10`
         *   - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder multiplier(@Nullable Output<Integer> multiplier) {
            $.multiplier = multiplier;
            return this;
        }

        /**
         * @param multiplier Probe failure multiplier &lt;1..10&gt; failed attempts
         *   - Range: `1`-`10`
         *   - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder multiplier(Integer multiplier) {
            return multiplier(Output.of(multiplier));
        }

        /**
         * @param multiplierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiplierVariable(@Nullable Output<String> multiplierVariable) {
            $.multiplierVariable = multiplierVariable;
            return this;
        }

        /**
         * @param multiplierVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder multiplierVariable(String multiplierVariable) {
            return multiplierVariable(Output.of(multiplierVariable));
        }

        /**
         * @param name Tracker name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Tracker name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nameVariable(@Nullable Output<String> nameVariable) {
            $.nameVariable = nameVariable;
            return this;
        }

        /**
         * @param nameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder nameVariable(String nameVariable) {
            return nameVariable(Output.of(nameVariable));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param threshold Probe Timeout threshold &lt;100..1000&gt; milliseconds
         *   - Range: `100`-`1000`
         *   - Default value: `300`
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Probe Timeout threshold &lt;100..1000&gt; milliseconds
         *   - Range: `100`-`1000`
         *   - Default value: `300`
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param thresholdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder thresholdVariable(@Nullable Output<String> thresholdVariable) {
            $.thresholdVariable = thresholdVariable;
            return this;
        }

        /**
         * @param thresholdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder thresholdVariable(String thresholdVariable) {
            return thresholdVariable(Output.of(thresholdVariable));
        }

        /**
         * @param type Default(Interface)
         *   - Choices: `tracker-group`, `interface`, `static-route`
         *   - Default value: `interface`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Default(Interface)
         *   - Choices: `tracker-group`, `interface`, `static-route`
         *   - Default value: `interface`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param typeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder typeVariable(@Nullable Output<String> typeVariable) {
            $.typeVariable = typeVariable;
            return this;
        }

        /**
         * @param typeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder typeVariable(String typeVariable) {
            return typeVariable(Output.of(typeVariable));
        }

        public CiscoSystemFeatureTemplateTrackerArgs build() {
            return $;
        }
    }

}
