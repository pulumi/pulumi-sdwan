// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsSslDecryptionPolicyDefinitionUrlRuleArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsSslDecryptionPolicyDefinitionUrlRuleArgs Empty = new TlsSslDecryptionPolicyDefinitionUrlRuleArgs();

    /**
     * Country
     * 
     */
    @Import(name="ruleName")
    private @Nullable Output<String> ruleName;

    /**
     * @return Country
     * 
     */
    public Optional<Output<String>> ruleName() {
        return Optional.ofNullable(this.ruleName);
    }

    /**
     * List of VPN IDs
     * 
     */
    @Import(name="targetVpns")
    private @Nullable Output<List<String>> targetVpns;

    /**
     * @return List of VPN IDs
     * 
     */
    public Optional<Output<List<String>>> targetVpns() {
        return Optional.ofNullable(this.targetVpns);
    }

    /**
     * TLS SSL Profile Policy ID
     * 
     */
    @Import(name="tlsSslProfilePolicyId")
    private @Nullable Output<String> tlsSslProfilePolicyId;

    /**
     * @return TLS SSL Profile Policy ID
     * 
     */
    public Optional<Output<String>> tlsSslProfilePolicyId() {
        return Optional.ofNullable(this.tlsSslProfilePolicyId);
    }

    /**
     * TLS SSL Profile Policy version
     * 
     */
    @Import(name="tlsSslProfileVersion")
    private @Nullable Output<Integer> tlsSslProfileVersion;

    /**
     * @return TLS SSL Profile Policy version
     * 
     */
    public Optional<Output<Integer>> tlsSslProfileVersion() {
        return Optional.ofNullable(this.tlsSslProfileVersion);
    }

    private TlsSslDecryptionPolicyDefinitionUrlRuleArgs() {}

    private TlsSslDecryptionPolicyDefinitionUrlRuleArgs(TlsSslDecryptionPolicyDefinitionUrlRuleArgs $) {
        this.ruleName = $.ruleName;
        this.targetVpns = $.targetVpns;
        this.tlsSslProfilePolicyId = $.tlsSslProfilePolicyId;
        this.tlsSslProfileVersion = $.tlsSslProfileVersion;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsSslDecryptionPolicyDefinitionUrlRuleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsSslDecryptionPolicyDefinitionUrlRuleArgs $;

        public Builder() {
            $ = new TlsSslDecryptionPolicyDefinitionUrlRuleArgs();
        }

        public Builder(TlsSslDecryptionPolicyDefinitionUrlRuleArgs defaults) {
            $ = new TlsSslDecryptionPolicyDefinitionUrlRuleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ruleName Country
         * 
         * @return builder
         * 
         */
        public Builder ruleName(@Nullable Output<String> ruleName) {
            $.ruleName = ruleName;
            return this;
        }

        /**
         * @param ruleName Country
         * 
         * @return builder
         * 
         */
        public Builder ruleName(String ruleName) {
            return ruleName(Output.of(ruleName));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(@Nullable Output<List<String>> targetVpns) {
            $.targetVpns = targetVpns;
            return this;
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(List<String> targetVpns) {
            return targetVpns(Output.of(targetVpns));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(String... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }

        /**
         * @param tlsSslProfilePolicyId TLS SSL Profile Policy ID
         * 
         * @return builder
         * 
         */
        public Builder tlsSslProfilePolicyId(@Nullable Output<String> tlsSslProfilePolicyId) {
            $.tlsSslProfilePolicyId = tlsSslProfilePolicyId;
            return this;
        }

        /**
         * @param tlsSslProfilePolicyId TLS SSL Profile Policy ID
         * 
         * @return builder
         * 
         */
        public Builder tlsSslProfilePolicyId(String tlsSslProfilePolicyId) {
            return tlsSslProfilePolicyId(Output.of(tlsSslProfilePolicyId));
        }

        /**
         * @param tlsSslProfileVersion TLS SSL Profile Policy version
         * 
         * @return builder
         * 
         */
        public Builder tlsSslProfileVersion(@Nullable Output<Integer> tlsSslProfileVersion) {
            $.tlsSslProfileVersion = tlsSslProfileVersion;
            return this;
        }

        /**
         * @param tlsSslProfileVersion TLS SSL Profile Policy version
         * 
         * @return builder
         * 
         */
        public Builder tlsSslProfileVersion(Integer tlsSslProfileVersion) {
            return tlsSslProfileVersion(Output.of(tlsSslProfileVersion));
        }

        public TlsSslDecryptionPolicyDefinitionUrlRuleArgs build() {
            return $;
        }
    }

}
