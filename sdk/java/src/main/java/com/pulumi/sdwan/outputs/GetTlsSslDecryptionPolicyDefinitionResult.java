// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTlsSslDecryptionPolicyDefinitionNetworkRule;
import com.pulumi.sdwan.outputs.GetTlsSslDecryptionPolicyDefinitionUrlRule;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTlsSslDecryptionPolicyDefinitionResult {
    /**
     * @return Certificate Lifetime(in Days)
     * 
     */
    private Integer certificateLifetimeInDays;
    /**
     * @return Certificate revocation status
     * 
     */
    private String certificateRevocationStatus;
    /**
     * @return Default action (applies when `mode` set to `security`)
     * 
     */
    private String defaultAction;
    /**
     * @return The description of the policy definition.
     * 
     */
    private String description;
    /**
     * @return EC Key Type
     * 
     */
    private String ecKeyType;
    /**
     * @return Expired certificate action
     * 
     */
    private String expiredCertificate;
    /**
     * @return Failure mode
     * 
     */
    private String failureMode;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Minimal TLS Version
     * 
     */
    private String minimalTlsVersion;
    /**
     * @return The policy mode
     * 
     */
    private String mode;
    /**
     * @return The name of the policy definition.
     * 
     */
    private String name;
    /**
     * @return List of network rules (applies when `mode` set to `security`)
     * 
     */
    private List<GetTlsSslDecryptionPolicyDefinitionNetworkRule> networkRules;
    /**
     * @return RSA key pair modules
     * 
     */
    private String rsaKeyPairModulus;
    /**
     * @return SSL decryption enabled
     * 
     */
    private String sslDecryptionEnabled;
    /**
     * @return Unknown revocation status action
     * 
     */
    private String unknownRevocationStatus;
    /**
     * @return Unsupported cipher suites action
     * 
     */
    private String unsupportedCipherSuites;
    /**
     * @return Unsupported protocol versions action
     * 
     */
    private String unsupportedProtocolVersions;
    /**
     * @return Untrusted certificate action
     * 
     */
    private String untrustedCertificate;
    /**
     * @return List of url rules (applies when `mode` set to `security`)
     * 
     */
    private List<GetTlsSslDecryptionPolicyDefinitionUrlRule> urlRules;
    /**
     * @return Use default CA certificate bundle
     * 
     */
    private Boolean useDefaultCaCertBundle;
    /**
     * @return The version of the object
     * 
     */
    private Integer version;

    private GetTlsSslDecryptionPolicyDefinitionResult() {}
    /**
     * @return Certificate Lifetime(in Days)
     * 
     */
    public Integer certificateLifetimeInDays() {
        return this.certificateLifetimeInDays;
    }
    /**
     * @return Certificate revocation status
     * 
     */
    public String certificateRevocationStatus() {
        return this.certificateRevocationStatus;
    }
    /**
     * @return Default action (applies when `mode` set to `security`)
     * 
     */
    public String defaultAction() {
        return this.defaultAction;
    }
    /**
     * @return The description of the policy definition.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return EC Key Type
     * 
     */
    public String ecKeyType() {
        return this.ecKeyType;
    }
    /**
     * @return Expired certificate action
     * 
     */
    public String expiredCertificate() {
        return this.expiredCertificate;
    }
    /**
     * @return Failure mode
     * 
     */
    public String failureMode() {
        return this.failureMode;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Minimal TLS Version
     * 
     */
    public String minimalTlsVersion() {
        return this.minimalTlsVersion;
    }
    /**
     * @return The policy mode
     * 
     */
    public String mode() {
        return this.mode;
    }
    /**
     * @return The name of the policy definition.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return List of network rules (applies when `mode` set to `security`)
     * 
     */
    public List<GetTlsSslDecryptionPolicyDefinitionNetworkRule> networkRules() {
        return this.networkRules;
    }
    /**
     * @return RSA key pair modules
     * 
     */
    public String rsaKeyPairModulus() {
        return this.rsaKeyPairModulus;
    }
    /**
     * @return SSL decryption enabled
     * 
     */
    public String sslDecryptionEnabled() {
        return this.sslDecryptionEnabled;
    }
    /**
     * @return Unknown revocation status action
     * 
     */
    public String unknownRevocationStatus() {
        return this.unknownRevocationStatus;
    }
    /**
     * @return Unsupported cipher suites action
     * 
     */
    public String unsupportedCipherSuites() {
        return this.unsupportedCipherSuites;
    }
    /**
     * @return Unsupported protocol versions action
     * 
     */
    public String unsupportedProtocolVersions() {
        return this.unsupportedProtocolVersions;
    }
    /**
     * @return Untrusted certificate action
     * 
     */
    public String untrustedCertificate() {
        return this.untrustedCertificate;
    }
    /**
     * @return List of url rules (applies when `mode` set to `security`)
     * 
     */
    public List<GetTlsSslDecryptionPolicyDefinitionUrlRule> urlRules() {
        return this.urlRules;
    }
    /**
     * @return Use default CA certificate bundle
     * 
     */
    public Boolean useDefaultCaCertBundle() {
        return this.useDefaultCaCertBundle;
    }
    /**
     * @return The version of the object
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTlsSslDecryptionPolicyDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer certificateLifetimeInDays;
        private String certificateRevocationStatus;
        private String defaultAction;
        private String description;
        private String ecKeyType;
        private String expiredCertificate;
        private String failureMode;
        private String id;
        private String minimalTlsVersion;
        private String mode;
        private String name;
        private List<GetTlsSslDecryptionPolicyDefinitionNetworkRule> networkRules;
        private String rsaKeyPairModulus;
        private String sslDecryptionEnabled;
        private String unknownRevocationStatus;
        private String unsupportedCipherSuites;
        private String unsupportedProtocolVersions;
        private String untrustedCertificate;
        private List<GetTlsSslDecryptionPolicyDefinitionUrlRule> urlRules;
        private Boolean useDefaultCaCertBundle;
        private Integer version;
        public Builder() {}
        public Builder(GetTlsSslDecryptionPolicyDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateLifetimeInDays = defaults.certificateLifetimeInDays;
    	      this.certificateRevocationStatus = defaults.certificateRevocationStatus;
    	      this.defaultAction = defaults.defaultAction;
    	      this.description = defaults.description;
    	      this.ecKeyType = defaults.ecKeyType;
    	      this.expiredCertificate = defaults.expiredCertificate;
    	      this.failureMode = defaults.failureMode;
    	      this.id = defaults.id;
    	      this.minimalTlsVersion = defaults.minimalTlsVersion;
    	      this.mode = defaults.mode;
    	      this.name = defaults.name;
    	      this.networkRules = defaults.networkRules;
    	      this.rsaKeyPairModulus = defaults.rsaKeyPairModulus;
    	      this.sslDecryptionEnabled = defaults.sslDecryptionEnabled;
    	      this.unknownRevocationStatus = defaults.unknownRevocationStatus;
    	      this.unsupportedCipherSuites = defaults.unsupportedCipherSuites;
    	      this.unsupportedProtocolVersions = defaults.unsupportedProtocolVersions;
    	      this.untrustedCertificate = defaults.untrustedCertificate;
    	      this.urlRules = defaults.urlRules;
    	      this.useDefaultCaCertBundle = defaults.useDefaultCaCertBundle;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder certificateLifetimeInDays(Integer certificateLifetimeInDays) {
            if (certificateLifetimeInDays == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "certificateLifetimeInDays");
            }
            this.certificateLifetimeInDays = certificateLifetimeInDays;
            return this;
        }
        @CustomType.Setter
        public Builder certificateRevocationStatus(String certificateRevocationStatus) {
            if (certificateRevocationStatus == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "certificateRevocationStatus");
            }
            this.certificateRevocationStatus = certificateRevocationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder defaultAction(String defaultAction) {
            if (defaultAction == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "defaultAction");
            }
            this.defaultAction = defaultAction;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder ecKeyType(String ecKeyType) {
            if (ecKeyType == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "ecKeyType");
            }
            this.ecKeyType = ecKeyType;
            return this;
        }
        @CustomType.Setter
        public Builder expiredCertificate(String expiredCertificate) {
            if (expiredCertificate == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "expiredCertificate");
            }
            this.expiredCertificate = expiredCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder failureMode(String failureMode) {
            if (failureMode == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "failureMode");
            }
            this.failureMode = failureMode;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder minimalTlsVersion(String minimalTlsVersion) {
            if (minimalTlsVersion == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "minimalTlsVersion");
            }
            this.minimalTlsVersion = minimalTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder mode(String mode) {
            if (mode == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "mode");
            }
            this.mode = mode;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder networkRules(List<GetTlsSslDecryptionPolicyDefinitionNetworkRule> networkRules) {
            if (networkRules == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "networkRules");
            }
            this.networkRules = networkRules;
            return this;
        }
        public Builder networkRules(GetTlsSslDecryptionPolicyDefinitionNetworkRule... networkRules) {
            return networkRules(List.of(networkRules));
        }
        @CustomType.Setter
        public Builder rsaKeyPairModulus(String rsaKeyPairModulus) {
            if (rsaKeyPairModulus == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "rsaKeyPairModulus");
            }
            this.rsaKeyPairModulus = rsaKeyPairModulus;
            return this;
        }
        @CustomType.Setter
        public Builder sslDecryptionEnabled(String sslDecryptionEnabled) {
            if (sslDecryptionEnabled == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "sslDecryptionEnabled");
            }
            this.sslDecryptionEnabled = sslDecryptionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder unknownRevocationStatus(String unknownRevocationStatus) {
            if (unknownRevocationStatus == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "unknownRevocationStatus");
            }
            this.unknownRevocationStatus = unknownRevocationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder unsupportedCipherSuites(String unsupportedCipherSuites) {
            if (unsupportedCipherSuites == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "unsupportedCipherSuites");
            }
            this.unsupportedCipherSuites = unsupportedCipherSuites;
            return this;
        }
        @CustomType.Setter
        public Builder unsupportedProtocolVersions(String unsupportedProtocolVersions) {
            if (unsupportedProtocolVersions == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "unsupportedProtocolVersions");
            }
            this.unsupportedProtocolVersions = unsupportedProtocolVersions;
            return this;
        }
        @CustomType.Setter
        public Builder untrustedCertificate(String untrustedCertificate) {
            if (untrustedCertificate == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "untrustedCertificate");
            }
            this.untrustedCertificate = untrustedCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder urlRules(List<GetTlsSslDecryptionPolicyDefinitionUrlRule> urlRules) {
            if (urlRules == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "urlRules");
            }
            this.urlRules = urlRules;
            return this;
        }
        public Builder urlRules(GetTlsSslDecryptionPolicyDefinitionUrlRule... urlRules) {
            return urlRules(List.of(urlRules));
        }
        @CustomType.Setter
        public Builder useDefaultCaCertBundle(Boolean useDefaultCaCertBundle) {
            if (useDefaultCaCertBundle == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "useDefaultCaCertBundle");
            }
            this.useDefaultCaCertBundle = useDefaultCaCertBundle;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTlsSslDecryptionPolicyDefinitionResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetTlsSslDecryptionPolicyDefinitionResult build() {
            final var _resultValue = new GetTlsSslDecryptionPolicyDefinitionResult();
            _resultValue.certificateLifetimeInDays = certificateLifetimeInDays;
            _resultValue.certificateRevocationStatus = certificateRevocationStatus;
            _resultValue.defaultAction = defaultAction;
            _resultValue.description = description;
            _resultValue.ecKeyType = ecKeyType;
            _resultValue.expiredCertificate = expiredCertificate;
            _resultValue.failureMode = failureMode;
            _resultValue.id = id;
            _resultValue.minimalTlsVersion = minimalTlsVersion;
            _resultValue.mode = mode;
            _resultValue.name = name;
            _resultValue.networkRules = networkRules;
            _resultValue.rsaKeyPairModulus = rsaKeyPairModulus;
            _resultValue.sslDecryptionEnabled = sslDecryptionEnabled;
            _resultValue.unknownRevocationStatus = unknownRevocationStatus;
            _resultValue.unsupportedCipherSuites = unsupportedCipherSuites;
            _resultValue.unsupportedProtocolVersions = unsupportedProtocolVersions;
            _resultValue.untrustedCertificate = untrustedCertificate;
            _resultValue.urlRules = urlRules;
            _resultValue.useDefaultCaCertBundle = useDefaultCaCertBundle;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
