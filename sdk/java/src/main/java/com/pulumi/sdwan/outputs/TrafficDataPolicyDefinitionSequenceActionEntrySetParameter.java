// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TrafficDataPolicyDefinitionSequenceActionEntrySetParameter {
    /**
     * @return DSCP, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     * 
     */
    private @Nullable Integer dscp;
    /**
     * @return Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
     * 
     */
    private @Nullable String forwardingClass;
    /**
     * @return Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    private @Nullable String localTlocListColor;
    /**
     * @return Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    private @Nullable String localTlocListEncap;
    /**
     * @return Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    private @Nullable Boolean localTlocListRestrict;
    /**
     * @return Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     * 
     */
    private @Nullable String nextHop;
    /**
     * @return Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
     * 
     */
    private @Nullable Boolean nextHopLoose;
    /**
     * @return Policer list ID, Attribute conditional on `type` being equal to `policer`
     * 
     */
    private @Nullable String policerListId;
    /**
     * @return Policer list version
     * 
     */
    private @Nullable Integer policerListVersion;
    /**
     * @return Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     * 
     */
    private @Nullable String preferredColorGroupListId;
    /**
     * @return Preferred color group list version
     * 
     */
    private @Nullable Integer preferredColorGroupListVersion;
    /**
     * @return Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable String serviceTlocColor;
    /**
     * @return Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    private @Nullable String serviceTlocEncapsulation;
    /**
     * @return Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable String serviceTlocIp;
    /**
     * @return Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable String serviceTlocListId;
    /**
     * @return Service TLOC list version
     * 
     */
    private @Nullable Integer serviceTlocListVersion;
    /**
     * @return Service TLOC Local, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable Boolean serviceTlocLocal;
    /**
     * @return Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
     * 
     */
    private @Nullable Boolean serviceTlocRestrict;
    /**
     * @return Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    private @Nullable String serviceType;
    /**
     * @return Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    private @Nullable Integer serviceVpnId;
    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    private @Nullable String tlocColor;
    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    private @Nullable String tlocEncapsulation;
    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    private @Nullable String tlocIp;
    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    private @Nullable String tlocListId;
    /**
     * @return TLOC list version
     * 
     */
    private @Nullable Integer tlocListVersion;
    /**
     * @return Type of set parameter
     *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
     * 
     */
    private String type;
    /**
     * @return DSCP, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65530`
     * 
     */
    private @Nullable Integer vpnId;

    private TrafficDataPolicyDefinitionSequenceActionEntrySetParameter() {}
    /**
     * @return DSCP, Attribute conditional on `type` being equal to `dscp`
     *   - Range: `0`-`63`
     * 
     */
    public Optional<Integer> dscp() {
        return Optional.ofNullable(this.dscp);
    }
    /**
     * @return Forwarding class, Attribute conditional on `type` being equal to `forwardingClass`
     * 
     */
    public Optional<String> forwardingClass() {
        return Optional.ofNullable(this.forwardingClass);
    }
    /**
     * @return Local TLOC list color. Space separated list of colors., Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    public Optional<String> localTlocListColor() {
        return Optional.ofNullable(this.localTlocListColor);
    }
    /**
     * @return Local TLOC list encapsulation., Attribute conditional on `type` being equal to `localTlocList`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    public Optional<String> localTlocListEncap() {
        return Optional.ofNullable(this.localTlocListEncap);
    }
    /**
     * @return Local TLOC list restrict, Attribute conditional on `type` being equal to `localTlocList`
     * 
     */
    public Optional<Boolean> localTlocListRestrict() {
        return Optional.ofNullable(this.localTlocListRestrict);
    }
    /**
     * @return Next hop IP, Attribute conditional on `type` being equal to `nextHop`
     * 
     */
    public Optional<String> nextHop() {
        return Optional.ofNullable(this.nextHop);
    }
    /**
     * @return Use routing table entry to forward the packet in case Next-hop is not available, Attribute conditional on `type` being equal to `nextHopLoose`
     * 
     */
    public Optional<Boolean> nextHopLoose() {
        return Optional.ofNullable(this.nextHopLoose);
    }
    /**
     * @return Policer list ID, Attribute conditional on `type` being equal to `policer`
     * 
     */
    public Optional<String> policerListId() {
        return Optional.ofNullable(this.policerListId);
    }
    /**
     * @return Policer list version
     * 
     */
    public Optional<Integer> policerListVersion() {
        return Optional.ofNullable(this.policerListVersion);
    }
    /**
     * @return Preferred color group list ID, Attribute conditional on `type` being equal to `preferredColorGroup`
     * 
     */
    public Optional<String> preferredColorGroupListId() {
        return Optional.ofNullable(this.preferredColorGroupListId);
    }
    /**
     * @return Preferred color group list version
     * 
     */
    public Optional<Integer> preferredColorGroupListVersion() {
        return Optional.ofNullable(this.preferredColorGroupListVersion);
    }
    /**
     * @return Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<String> serviceTlocColor() {
        return Optional.ofNullable(this.serviceTlocColor);
    }
    /**
     * @return Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    public Optional<String> serviceTlocEncapsulation() {
        return Optional.ofNullable(this.serviceTlocEncapsulation);
    }
    /**
     * @return Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<String> serviceTlocIp() {
        return Optional.ofNullable(this.serviceTlocIp);
    }
    /**
     * @return Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<String> serviceTlocListId() {
        return Optional.ofNullable(this.serviceTlocListId);
    }
    /**
     * @return Service TLOC list version
     * 
     */
    public Optional<Integer> serviceTlocListVersion() {
        return Optional.ofNullable(this.serviceTlocListVersion);
    }
    /**
     * @return Service TLOC Local, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Boolean> serviceTlocLocal() {
        return Optional.ofNullable(this.serviceTlocLocal);
    }
    /**
     * @return Service TLOC Restrict, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Boolean> serviceTlocRestrict() {
        return Optional.ofNullable(this.serviceTlocRestrict);
    }
    /**
     * @return Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    public Optional<String> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }
    /**
     * @return Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    public Optional<Integer> serviceVpnId() {
        return Optional.ofNullable(this.serviceVpnId);
    }
    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<String> tlocColor() {
        return Optional.ofNullable(this.tlocColor);
    }
    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`, `ipsec gre`
     * 
     */
    public Optional<String> tlocEncapsulation() {
        return Optional.ofNullable(this.tlocEncapsulation);
    }
    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<String> tlocIp() {
        return Optional.ofNullable(this.tlocIp);
    }
    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    public Optional<String> tlocListId() {
        return Optional.ofNullable(this.tlocListId);
    }
    /**
     * @return TLOC list version
     * 
     */
    public Optional<Integer> tlocListVersion() {
        return Optional.ofNullable(this.tlocListVersion);
    }
    /**
     * @return Type of set parameter
     *   - Choices: `dscp`, `forwardingClass`, `localTlocList`, `nextHop`, `nextHopLoose`, `policer`, `preferredColorGroup`, `tlocList`, `tloc`, `service`, `vpn`
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return DSCP, Attribute conditional on `type` being equal to `vpn`
     *   - Range: `0`-`65530`
     * 
     */
    public Optional<Integer> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TrafficDataPolicyDefinitionSequenceActionEntrySetParameter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer dscp;
        private @Nullable String forwardingClass;
        private @Nullable String localTlocListColor;
        private @Nullable String localTlocListEncap;
        private @Nullable Boolean localTlocListRestrict;
        private @Nullable String nextHop;
        private @Nullable Boolean nextHopLoose;
        private @Nullable String policerListId;
        private @Nullable Integer policerListVersion;
        private @Nullable String preferredColorGroupListId;
        private @Nullable Integer preferredColorGroupListVersion;
        private @Nullable String serviceTlocColor;
        private @Nullable String serviceTlocEncapsulation;
        private @Nullable String serviceTlocIp;
        private @Nullable String serviceTlocListId;
        private @Nullable Integer serviceTlocListVersion;
        private @Nullable Boolean serviceTlocLocal;
        private @Nullable Boolean serviceTlocRestrict;
        private @Nullable String serviceType;
        private @Nullable Integer serviceVpnId;
        private @Nullable String tlocColor;
        private @Nullable String tlocEncapsulation;
        private @Nullable String tlocIp;
        private @Nullable String tlocListId;
        private @Nullable Integer tlocListVersion;
        private String type;
        private @Nullable Integer vpnId;
        public Builder() {}
        public Builder(TrafficDataPolicyDefinitionSequenceActionEntrySetParameter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dscp = defaults.dscp;
    	      this.forwardingClass = defaults.forwardingClass;
    	      this.localTlocListColor = defaults.localTlocListColor;
    	      this.localTlocListEncap = defaults.localTlocListEncap;
    	      this.localTlocListRestrict = defaults.localTlocListRestrict;
    	      this.nextHop = defaults.nextHop;
    	      this.nextHopLoose = defaults.nextHopLoose;
    	      this.policerListId = defaults.policerListId;
    	      this.policerListVersion = defaults.policerListVersion;
    	      this.preferredColorGroupListId = defaults.preferredColorGroupListId;
    	      this.preferredColorGroupListVersion = defaults.preferredColorGroupListVersion;
    	      this.serviceTlocColor = defaults.serviceTlocColor;
    	      this.serviceTlocEncapsulation = defaults.serviceTlocEncapsulation;
    	      this.serviceTlocIp = defaults.serviceTlocIp;
    	      this.serviceTlocListId = defaults.serviceTlocListId;
    	      this.serviceTlocListVersion = defaults.serviceTlocListVersion;
    	      this.serviceTlocLocal = defaults.serviceTlocLocal;
    	      this.serviceTlocRestrict = defaults.serviceTlocRestrict;
    	      this.serviceType = defaults.serviceType;
    	      this.serviceVpnId = defaults.serviceVpnId;
    	      this.tlocColor = defaults.tlocColor;
    	      this.tlocEncapsulation = defaults.tlocEncapsulation;
    	      this.tlocIp = defaults.tlocIp;
    	      this.tlocListId = defaults.tlocListId;
    	      this.tlocListVersion = defaults.tlocListVersion;
    	      this.type = defaults.type;
    	      this.vpnId = defaults.vpnId;
        }

        @CustomType.Setter
        public Builder dscp(@Nullable Integer dscp) {

            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder forwardingClass(@Nullable String forwardingClass) {

            this.forwardingClass = forwardingClass;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListColor(@Nullable String localTlocListColor) {

            this.localTlocListColor = localTlocListColor;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListEncap(@Nullable String localTlocListEncap) {

            this.localTlocListEncap = localTlocListEncap;
            return this;
        }
        @CustomType.Setter
        public Builder localTlocListRestrict(@Nullable Boolean localTlocListRestrict) {

            this.localTlocListRestrict = localTlocListRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder nextHop(@Nullable String nextHop) {

            this.nextHop = nextHop;
            return this;
        }
        @CustomType.Setter
        public Builder nextHopLoose(@Nullable Boolean nextHopLoose) {

            this.nextHopLoose = nextHopLoose;
            return this;
        }
        @CustomType.Setter
        public Builder policerListId(@Nullable String policerListId) {

            this.policerListId = policerListId;
            return this;
        }
        @CustomType.Setter
        public Builder policerListVersion(@Nullable Integer policerListVersion) {

            this.policerListVersion = policerListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColorGroupListId(@Nullable String preferredColorGroupListId) {

            this.preferredColorGroupListId = preferredColorGroupListId;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColorGroupListVersion(@Nullable Integer preferredColorGroupListVersion) {

            this.preferredColorGroupListVersion = preferredColorGroupListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocColor(@Nullable String serviceTlocColor) {

            this.serviceTlocColor = serviceTlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocEncapsulation(@Nullable String serviceTlocEncapsulation) {

            this.serviceTlocEncapsulation = serviceTlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocIp(@Nullable String serviceTlocIp) {

            this.serviceTlocIp = serviceTlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListId(@Nullable String serviceTlocListId) {

            this.serviceTlocListId = serviceTlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocListVersion(@Nullable Integer serviceTlocListVersion) {

            this.serviceTlocListVersion = serviceTlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocLocal(@Nullable Boolean serviceTlocLocal) {

            this.serviceTlocLocal = serviceTlocLocal;
            return this;
        }
        @CustomType.Setter
        public Builder serviceTlocRestrict(@Nullable Boolean serviceTlocRestrict) {

            this.serviceTlocRestrict = serviceTlocRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(@Nullable String serviceType) {

            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder serviceVpnId(@Nullable Integer serviceVpnId) {

            this.serviceVpnId = serviceVpnId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocColor(@Nullable String tlocColor) {

            this.tlocColor = tlocColor;
            return this;
        }
        @CustomType.Setter
        public Builder tlocEncapsulation(@Nullable String tlocEncapsulation) {

            this.tlocEncapsulation = tlocEncapsulation;
            return this;
        }
        @CustomType.Setter
        public Builder tlocIp(@Nullable String tlocIp) {

            this.tlocIp = tlocIp;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListId(@Nullable String tlocListId) {

            this.tlocListId = tlocListId;
            return this;
        }
        @CustomType.Setter
        public Builder tlocListVersion(@Nullable Integer tlocListVersion) {

            this.tlocListVersion = tlocListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("TrafficDataPolicyDefinitionSequenceActionEntrySetParameter", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vpnId(@Nullable Integer vpnId) {

            this.vpnId = vpnId;
            return this;
        }
        public TrafficDataPolicyDefinitionSequenceActionEntrySetParameter build() {
            final var _resultValue = new TrafficDataPolicyDefinitionSequenceActionEntrySetParameter();
            _resultValue.dscp = dscp;
            _resultValue.forwardingClass = forwardingClass;
            _resultValue.localTlocListColor = localTlocListColor;
            _resultValue.localTlocListEncap = localTlocListEncap;
            _resultValue.localTlocListRestrict = localTlocListRestrict;
            _resultValue.nextHop = nextHop;
            _resultValue.nextHopLoose = nextHopLoose;
            _resultValue.policerListId = policerListId;
            _resultValue.policerListVersion = policerListVersion;
            _resultValue.preferredColorGroupListId = preferredColorGroupListId;
            _resultValue.preferredColorGroupListVersion = preferredColorGroupListVersion;
            _resultValue.serviceTlocColor = serviceTlocColor;
            _resultValue.serviceTlocEncapsulation = serviceTlocEncapsulation;
            _resultValue.serviceTlocIp = serviceTlocIp;
            _resultValue.serviceTlocListId = serviceTlocListId;
            _resultValue.serviceTlocListVersion = serviceTlocListVersion;
            _resultValue.serviceTlocLocal = serviceTlocLocal;
            _resultValue.serviceTlocRestrict = serviceTlocRestrict;
            _resultValue.serviceType = serviceType;
            _resultValue.serviceVpnId = serviceVpnId;
            _resultValue.tlocColor = tlocColor;
            _resultValue.tlocEncapsulation = tlocEncapsulation;
            _resultValue.tlocIp = tlocIp;
            _resultValue.tlocListId = tlocListId;
            _resultValue.tlocListVersion = tlocListVersion;
            _resultValue.type = type;
            _resultValue.vpnId = vpnId;
            return _resultValue;
        }
    }
}
