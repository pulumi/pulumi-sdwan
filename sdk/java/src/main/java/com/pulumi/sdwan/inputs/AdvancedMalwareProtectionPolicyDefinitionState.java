// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdvancedMalwareProtectionPolicyDefinitionState extends com.pulumi.resources.ResourceArgs {

    public static final AdvancedMalwareProtectionPolicyDefinitionState Empty = new AdvancedMalwareProtectionPolicyDefinitionState();

    /**
     * File reputation alerts Log level - Choices: `critical`, `warning`, `info`
     * 
     */
    @Import(name="alertLogLevel")
    private @Nullable Output<String> alertLogLevel;

    /**
     * @return File reputation alerts Log level - Choices: `critical`, `warning`, `info`
     * 
     */
    public Optional<Output<String>> alertLogLevel() {
        return Optional.ofNullable(this.alertLogLevel);
    }

    /**
     * AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
     * 
     */
    @Import(name="ampCloudRegion")
    private @Nullable Output<String> ampCloudRegion;

    /**
     * @return AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
     * 
     */
    public Optional<Output<String>> ampCloudRegion() {
        return Optional.ofNullable(this.ampCloudRegion);
    }

    /**
     * AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
     * 
     */
    @Import(name="ampCloudRegionEstServer")
    private @Nullable Output<String> ampCloudRegionEstServer;

    /**
     * @return AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
     * 
     */
    public Optional<Output<String>> ampCloudRegionEstServer() {
        return Optional.ofNullable(this.ampCloudRegionEstServer);
    }

    /**
     * The description of the policy definition
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the policy definition
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Should file analysis be enabled
     * 
     */
    @Import(name="fileAnalysis")
    private @Nullable Output<Boolean> fileAnalysis;

    /**
     * @return Should file analysis be enabled
     * 
     */
    public Optional<Output<Boolean>> fileAnalysis() {
        return Optional.ofNullable(this.fileAnalysis);
    }

    /**
     * File analysis alerts Log level - Choices: `critical`, `warning`, `info`
     * 
     */
    @Import(name="fileAnalysisAlertLogLevel")
    private @Nullable Output<String> fileAnalysisAlertLogLevel;

    /**
     * @return File analysis alerts Log level - Choices: `critical`, `warning`, `info`
     * 
     */
    public Optional<Output<String>> fileAnalysisAlertLogLevel() {
        return Optional.ofNullable(this.fileAnalysisAlertLogLevel);
    }

    /**
     * TG Cloud Region - Choices: `nam`, `eu`
     * 
     */
    @Import(name="fileAnalysisCloudRegion")
    private @Nullable Output<String> fileAnalysisCloudRegion;

    /**
     * @return TG Cloud Region - Choices: `nam`, `eu`
     * 
     */
    public Optional<Output<String>> fileAnalysisCloudRegion() {
        return Optional.ofNullable(this.fileAnalysisCloudRegion);
    }

    /**
     * List of file type
     * 
     */
    @Import(name="fileAnalysisFileTypes")
    private @Nullable Output<List<String>> fileAnalysisFileTypes;

    /**
     * @return List of file type
     * 
     */
    public Optional<Output<List<String>>> fileAnalysisFileTypes() {
        return Optional.ofNullable(this.fileAnalysisFileTypes);
    }

    /**
     * Should match all VPNs
     * 
     */
    @Import(name="matchAllVpn")
    private @Nullable Output<Boolean> matchAllVpn;

    /**
     * @return Should match all VPNs
     * 
     */
    public Optional<Output<Boolean>> matchAllVpn() {
        return Optional.ofNullable(this.matchAllVpn);
    }

    /**
     * The policy mode - Choices: `security`, `unified` - Default value: `security`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The policy mode - Choices: `security`, `unified` - Default value: `security`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the policy definition
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of VPN IDs
     * 
     */
    @Import(name="targetVpns")
    private @Nullable Output<List<String>> targetVpns;

    /**
     * @return List of VPN IDs
     * 
     */
    public Optional<Output<List<String>>> targetVpns() {
        return Optional.ofNullable(this.targetVpns);
    }

    /**
     * The version of the object
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return The version of the object
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private AdvancedMalwareProtectionPolicyDefinitionState() {}

    private AdvancedMalwareProtectionPolicyDefinitionState(AdvancedMalwareProtectionPolicyDefinitionState $) {
        this.alertLogLevel = $.alertLogLevel;
        this.ampCloudRegion = $.ampCloudRegion;
        this.ampCloudRegionEstServer = $.ampCloudRegionEstServer;
        this.description = $.description;
        this.fileAnalysis = $.fileAnalysis;
        this.fileAnalysisAlertLogLevel = $.fileAnalysisAlertLogLevel;
        this.fileAnalysisCloudRegion = $.fileAnalysisCloudRegion;
        this.fileAnalysisFileTypes = $.fileAnalysisFileTypes;
        this.matchAllVpn = $.matchAllVpn;
        this.mode = $.mode;
        this.name = $.name;
        this.targetVpns = $.targetVpns;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedMalwareProtectionPolicyDefinitionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedMalwareProtectionPolicyDefinitionState $;

        public Builder() {
            $ = new AdvancedMalwareProtectionPolicyDefinitionState();
        }

        public Builder(AdvancedMalwareProtectionPolicyDefinitionState defaults) {
            $ = new AdvancedMalwareProtectionPolicyDefinitionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertLogLevel File reputation alerts Log level - Choices: `critical`, `warning`, `info`
         * 
         * @return builder
         * 
         */
        public Builder alertLogLevel(@Nullable Output<String> alertLogLevel) {
            $.alertLogLevel = alertLogLevel;
            return this;
        }

        /**
         * @param alertLogLevel File reputation alerts Log level - Choices: `critical`, `warning`, `info`
         * 
         * @return builder
         * 
         */
        public Builder alertLogLevel(String alertLogLevel) {
            return alertLogLevel(Output.of(alertLogLevel));
        }

        /**
         * @param ampCloudRegion AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
         * 
         * @return builder
         * 
         */
        public Builder ampCloudRegion(@Nullable Output<String> ampCloudRegion) {
            $.ampCloudRegion = ampCloudRegion;
            return this;
        }

        /**
         * @param ampCloudRegion AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
         * 
         * @return builder
         * 
         */
        public Builder ampCloudRegion(String ampCloudRegion) {
            return ampCloudRegion(Output.of(ampCloudRegion));
        }

        /**
         * @param ampCloudRegionEstServer AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
         * 
         * @return builder
         * 
         */
        public Builder ampCloudRegionEstServer(@Nullable Output<String> ampCloudRegionEstServer) {
            $.ampCloudRegionEstServer = ampCloudRegionEstServer;
            return this;
        }

        /**
         * @param ampCloudRegionEstServer AMP Cloud Region - Choices: `nam`, `eu`, `apjc`
         * 
         * @return builder
         * 
         */
        public Builder ampCloudRegionEstServer(String ampCloudRegionEstServer) {
            return ampCloudRegionEstServer(Output.of(ampCloudRegionEstServer));
        }

        /**
         * @param description The description of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileAnalysis Should file analysis be enabled
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysis(@Nullable Output<Boolean> fileAnalysis) {
            $.fileAnalysis = fileAnalysis;
            return this;
        }

        /**
         * @param fileAnalysis Should file analysis be enabled
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysis(Boolean fileAnalysis) {
            return fileAnalysis(Output.of(fileAnalysis));
        }

        /**
         * @param fileAnalysisAlertLogLevel File analysis alerts Log level - Choices: `critical`, `warning`, `info`
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisAlertLogLevel(@Nullable Output<String> fileAnalysisAlertLogLevel) {
            $.fileAnalysisAlertLogLevel = fileAnalysisAlertLogLevel;
            return this;
        }

        /**
         * @param fileAnalysisAlertLogLevel File analysis alerts Log level - Choices: `critical`, `warning`, `info`
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisAlertLogLevel(String fileAnalysisAlertLogLevel) {
            return fileAnalysisAlertLogLevel(Output.of(fileAnalysisAlertLogLevel));
        }

        /**
         * @param fileAnalysisCloudRegion TG Cloud Region - Choices: `nam`, `eu`
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisCloudRegion(@Nullable Output<String> fileAnalysisCloudRegion) {
            $.fileAnalysisCloudRegion = fileAnalysisCloudRegion;
            return this;
        }

        /**
         * @param fileAnalysisCloudRegion TG Cloud Region - Choices: `nam`, `eu`
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisCloudRegion(String fileAnalysisCloudRegion) {
            return fileAnalysisCloudRegion(Output.of(fileAnalysisCloudRegion));
        }

        /**
         * @param fileAnalysisFileTypes List of file type
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisFileTypes(@Nullable Output<List<String>> fileAnalysisFileTypes) {
            $.fileAnalysisFileTypes = fileAnalysisFileTypes;
            return this;
        }

        /**
         * @param fileAnalysisFileTypes List of file type
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisFileTypes(List<String> fileAnalysisFileTypes) {
            return fileAnalysisFileTypes(Output.of(fileAnalysisFileTypes));
        }

        /**
         * @param fileAnalysisFileTypes List of file type
         * 
         * @return builder
         * 
         */
        public Builder fileAnalysisFileTypes(String... fileAnalysisFileTypes) {
            return fileAnalysisFileTypes(List.of(fileAnalysisFileTypes));
        }

        /**
         * @param matchAllVpn Should match all VPNs
         * 
         * @return builder
         * 
         */
        public Builder matchAllVpn(@Nullable Output<Boolean> matchAllVpn) {
            $.matchAllVpn = matchAllVpn;
            return this;
        }

        /**
         * @param matchAllVpn Should match all VPNs
         * 
         * @return builder
         * 
         */
        public Builder matchAllVpn(Boolean matchAllVpn) {
            return matchAllVpn(Output.of(matchAllVpn));
        }

        /**
         * @param mode The policy mode - Choices: `security`, `unified` - Default value: `security`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode - Choices: `security`, `unified` - Default value: `security`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(@Nullable Output<List<String>> targetVpns) {
            $.targetVpns = targetVpns;
            return this;
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(List<String> targetVpns) {
            return targetVpns(Output.of(targetVpns));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(String... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }

        /**
         * @param version The version of the object
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version The version of the object
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public AdvancedMalwareProtectionPolicyDefinitionState build() {
            return $;
        }
    }

}
