// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureArp;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureStaticNat66;
import com.pulumi.sdwan.outputs.GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransportWanVpnInterfaceEthernetFeatureResult {
    private String aclIpv4EgressFeatureId;
    private String aclIpv4IngressFeatureId;
    private String aclIpv6EgressFeatureId;
    private String aclIpv6IngressFeatureId;
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    private Integer arpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String arpTimeoutVariable;
    /**
     * @return Configure ARP entries
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureArp> arps;
    /**
     * @return Interface auto detect bandwidth
     * 
     */
    private Boolean autoDetectBandwidth;
    /**
     * @return Variable name
     * 
     */
    private String autoDetectBandwidthVariable;
    /**
     * @return Link autonegotiation
     * 
     */
    private Boolean autonegotiate;
    /**
     * @return Variable name
     * 
     */
    private String autonegotiateVariable;
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthDownstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthDownstreamVariable;
    /**
     * @return Interface upstream bandwidth capacity, in kbps
     * 
     */
    private Integer bandwidthUpstream;
    /**
     * @return Variable name
     * 
     */
    private String bandwidthUpstreamVariable;
    /**
     * @return Block packets originating from IP address that is not from this source
     * 
     */
    private Boolean blockNonSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String blockNonSourceIpVariable;
    /**
     * @return The description of the Feature
     * 
     */
    private String description;
    /**
     * @return Duplex mode
     * 
     */
    private String duplex;
    /**
     * @return Variable name
     * 
     */
    private String duplexVariable;
    /**
     * @return Enable DHCPv6
     * 
     */
    private Boolean enableDhcpv6;
    /**
     * @return Feature Profile ID
     * 
     */
    private String featureProfileId;
    /**
     * @return GRE tunnel source IP
     * 
     */
    private String greTunnelSourceIp;
    /**
     * @return Variable name
     * 
     */
    private String greTunnelSourceIpVariable;
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    private Boolean icmpRedirectDisable;
    /**
     * @return Variable name
     * 
     */
    private String icmpRedirectDisableVariable;
    /**
     * @return The id of the Feature
     * 
     */
    private String id;
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
     * 
     */
    private Integer interfaceMtu;
    /**
     * @return Variable name
     * 
     */
    private String interfaceMtuVariable;
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    private String iperfServer;
    /**
     * @return Variable name
     * 
     */
    private String iperfServerVariable;
    /**
     * @return IP Address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return IPv4 Configuration Type
     * 
     */
    private String ipv4ConfigurationType;
    /**
     * @return DHCP Distance
     * 
     */
    private Integer ipv4DhcpDistance;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpDistanceVariable;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpHelperVariable;
    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    private List<String> ipv4DhcpHelpers;
    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
    /**
     * @return Subnet Mask
     * 
     */
    private String ipv4SubnetMask;
    /**
     * @return Variable name
     * 
     */
    private String ipv4SubnetMaskVariable;
    /**
     * @return IPv6 Address Secondary
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return IPv6 Configuration Type
     * 
     */
    private String ipv6ConfigurationType;
    /**
     * @return secondary IPv6 addresses
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses;
    /**
     * @return Static secondary IPv6 addresses
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses;
    /**
     * @return Interval for interface load calculation
     * 
     */
    private Integer loadInterval;
    /**
     * @return Variable name
     * 
     */
    private String loadIntervalVariable;
    /**
     * @return MAC Address
     * 
     */
    private String macAddress;
    /**
     * @return Variable name
     * 
     */
    private String macAddressVariable;
    /**
     * @return Media type
     * 
     */
    private String mediaType;
    /**
     * @return Variable name
     * 
     */
    private String mediaTypeVariable;
    /**
     * @return The name of the Feature
     * 
     */
    private String name;
    /**
     * @return NAT64 on this interface
     * 
     */
    private Boolean nat64;
    /**
     * @return NAT66 on this interface
     * 
     */
    private Boolean nat66;
    /**
     * @return enable Network Address Translation on this interface
     * 
     */
    private Boolean natIpv4;
    /**
     * @return Variable name
     * 
     */
    private String natIpv4Variable;
    /**
     * @return enable Network Address Translation ipv6 on this interface
     * 
     */
    private Boolean natIpv6;
    /**
     * @return Variable name
     * 
     */
    private String natIpv6Variable;
    /**
     * @return NAT Inside Source Loopback Interface
     * 
     */
    private String natLoopback;
    /**
     * @return Variable name
     * 
     */
    private String natLoopbackVariable;
    /**
     * @return NAT Overload
     * 
     */
    private Boolean natOverload;
    /**
     * @return Variable name
     * 
     */
    private String natOverloadVariable;
    /**
     * @return NAT Pool Prefix Length
     * 
     */
    private Integer natPrefixLength;
    /**
     * @return Variable name
     * 
     */
    private String natPrefixLengthVariable;
    /**
     * @return NAT Pool Range End
     * 
     */
    private String natRangeEnd;
    /**
     * @return Variable name
     * 
     */
    private String natRangeEndVariable;
    /**
     * @return NAT Pool Range Start
     * 
     */
    private String natRangeStart;
    /**
     * @return Variable name
     * 
     */
    private String natRangeStartVariable;
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    private Integer natTcpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String natTcpTimeoutVariable;
    /**
     * @return NAT Type
     * 
     */
    private String natType;
    /**
     * @return Variable name
     * 
     */
    private String natTypeVariable;
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    private Integer natUdpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String natUdpTimeoutVariable;
    /**
     * @return static NAT
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat> newStaticNats;
    /**
     * @return Per-tunnel Qos
     * 
     */
    private Boolean perTunnelQos;
    /**
     * @return Variable name
     * 
     */
    private String perTunnelQosVariable;
    /**
     * @return Adaptive QoS
     * 
     */
    private Boolean qosAdaptive;
    /**
     * @return Shaping Rate Downstream
     * 
     */
    private Boolean qosAdaptiveBandwidthDownstream;
    /**
     * @return Shaping Rate Upstream
     * 
     */
    private Boolean qosAdaptiveBandwidthUpstream;
    /**
     * @return Adaptive QoS default downstream bandwidth (kbps)
     * 
     */
    private Integer qosAdaptiveDefaultDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveDefaultDownstreamVariable;
    /**
     * @return Adaptive QoS default upstream bandwidth (kbps)
     * 
     */
    private Integer qosAdaptiveDefaultUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveDefaultUpstreamVariable;
    /**
     * @return Downstream max bandwidth limit (kbps)
     * 
     */
    private Integer qosAdaptiveMaxDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMaxDownstreamVariable;
    /**
     * @return Upstream max bandwidth limit (kbps)
     * 
     */
    private Integer qosAdaptiveMaxUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMaxUpstreamVariable;
    /**
     * @return Downstream min bandwidth limit (kbps)
     * 
     */
    private Integer qosAdaptiveMinDownstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMinDownstreamVariable;
    /**
     * @return Upstream min bandwidth limit (kbps)
     * 
     */
    private Integer qosAdaptiveMinUpstream;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptiveMinUpstreamVariable;
    /**
     * @return Adapt Period(Minutes)
     * 
     */
    private Integer qosAdaptivePeriod;
    /**
     * @return Variable name
     * 
     */
    private String qosAdaptivePeriodVariable;
    /**
     * @return Shaping Rate (Kbps)
     * 
     */
    private Integer qosShapingRate;
    /**
     * @return Variable name
     * 
     */
    private String qosShapingRateVariable;
    /**
     * @return Service Provider Name
     * 
     */
    private String serviceProvider;
    /**
     * @return Variable name
     * 
     */
    private String serviceProviderVariable;
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Set interface speed
     * 
     */
    private String speed;
    /**
     * @return Variable name
     * 
     */
    private String speedVariable;
    /**
     * @return static NAT66
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureStaticNat66> staticNat66s;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssVariable;
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    private String tlocExtension;
    /**
     * @return Variable name
     * 
     */
    private String tlocExtensionVariable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private String tracker;
    /**
     * @return Variable name
     * 
     */
    private String trackerVariable;
    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    private String transportWanVpnFeatureId;
    /**
     * @return Tunnels Bandwidth Percent
     * 
     */
    private Integer tunnelBandwidthPercent;
    /**
     * @return Variable name
     * 
     */
    private String tunnelBandwidthPercentVariable;
    /**
     * @return Tunnel Interface on/off
     * 
     */
    private Boolean tunnelInterface;
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    private Boolean tunnelInterfaceAllowAll;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowAllVariable;
    /**
     * @return Allow/Deny BFD
     * 
     */
    private Boolean tunnelInterfaceAllowBfd;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowBfdVariable;
    /**
     * @return Allow/deny BGP
     * 
     */
    private Boolean tunnelInterfaceAllowBgp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowBgpVariable;
    /**
     * @return Allow/Deny DHCP
     * 
     */
    private Boolean tunnelInterfaceAllowDhcp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDhcpVariable;
    /**
     * @return Allow/Deny DNS
     * 
     */
    private Boolean tunnelInterfaceAllowDns;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowDnsVariable;
    /**
     * @return Allow/Deny HTTPS
     * 
     */
    private Boolean tunnelInterfaceAllowHttps;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowHttpsVariable;
    /**
     * @return Allow/Deny ICMP
     * 
     */
    private Boolean tunnelInterfaceAllowIcmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowIcmpVariable;
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    private Boolean tunnelInterfaceAllowNetconf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNetconfVariable;
    /**
     * @return Allow/Deny NTP
     * 
     */
    private Boolean tunnelInterfaceAllowNtp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowNtpVariable;
    /**
     * @return Allow/Deny OSPF
     * 
     */
    private Boolean tunnelInterfaceAllowOspf;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowOspfVariable;
    /**
     * @return Allow/Deny SNMP
     * 
     */
    private Boolean tunnelInterfaceAllowSnmp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSnmpVariable;
    /**
     * @return Allow/Deny SSH
     * 
     */
    private Boolean tunnelInterfaceAllowSsh;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowSshVariable;
    /**
     * @return Allow/Deny STUN
     * 
     */
    private Boolean tunnelInterfaceAllowStun;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceAllowStunVariable;
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnel;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBindLoopbackTunnelVariable;
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    private Boolean tunnelInterfaceBorder;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceBorderVariable;
    /**
     * @return Set carrier for TLOC
     * 
     */
    private String tunnelInterfaceCarrier;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceCarrierVariable;
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    private Boolean tunnelInterfaceClearDontFragment;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceClearDontFragmentVariable;
    /**
     * @return Set color for TLOC
     * 
     */
    private String tunnelInterfaceColor;
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    private Boolean tunnelInterfaceColorRestrict;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceColorRestrictVariable;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceColorVariable;
    /**
     * @return CTS SGT Propagation configuration
     * 
     */
    private Boolean tunnelInterfaceCtsSgtPropagation;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceCtsSgtPropagationVariable;
    /**
     * @return Encapsulation for TLOC
     * 
     */
    private List<GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceExcludeControllerGroupListVariable;
    /**
     * @return Exclude the following controller groups defined in this list.
     * 
     */
    private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
    /**
     * @return GRE tunnel destination IP
     * 
     */
    private String tunnelInterfaceGreTunnelDestinationIp;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceGreTunnelDestinationIpVariable;
    /**
     * @return List of groups
     * 
     */
    private Integer tunnelInterfaceGroups;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceGroupsVariable;
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    private Integer tunnelInterfaceHelloInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloIntervalVariable;
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceHelloTolerance;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceHelloToleranceVariable;
    /**
     * @return Set TLOC as last resort
     * 
     */
    private Boolean tunnelInterfaceLastResortCircuit;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLastResortCircuitVariable;
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    private Boolean tunnelInterfaceLowBandwidthLink;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceLowBandwidthLinkVariable;
    /**
     * @return Maximum Control Connections
     * 
     */
    private Integer tunnelInterfaceMaxControlConnections;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceMaxControlConnectionsVariable;
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    private Integer tunnelInterfaceNatRefreshInterval;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNatRefreshIntervalVariable;
    /**
     * @return Accept and respond to network-prefix-directed broadcasts
     * 
     */
    private Boolean tunnelInterfaceNetworkBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceNetworkBroadcastVariable;
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    private Boolean tunnelInterfacePortHop;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfacePortHopVariable;
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tunnelInterfaceTunnelTcpMss;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceTunnelTcpMssVariable;
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    private Boolean tunnelInterfaceVbondAsStunServer;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVbondAsStunServerVariable;
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    private Integer tunnelInterfaceVmanageConnectionPreference;
    /**
     * @return Variable name
     * 
     */
    private String tunnelInterfaceVmanageConnectionPreferenceVariable;
    /**
     * @return Set tunnel QoS mode
     * 
     */
    private String tunnelQosMode;
    /**
     * @return Variable name
     * 
     */
    private String tunnelQosModeVariable;
    /**
     * @return The version of the Feature
     * 
     */
    private Integer version;
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    private String xconnect;
    /**
     * @return Variable name
     * 
     */
    private String xconnectVariable;

    private GetTransportWanVpnInterfaceEthernetFeatureResult() {}
    public String aclIpv4EgressFeatureId() {
        return this.aclIpv4EgressFeatureId;
    }
    public String aclIpv4IngressFeatureId() {
        return this.aclIpv4IngressFeatureId;
    }
    public String aclIpv6EgressFeatureId() {
        return this.aclIpv6EgressFeatureId;
    }
    public String aclIpv6IngressFeatureId() {
        return this.aclIpv6IngressFeatureId;
    }
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpTimeoutVariable() {
        return this.arpTimeoutVariable;
    }
    /**
     * @return Configure ARP entries
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureArp> arps() {
        return this.arps;
    }
    /**
     * @return Interface auto detect bandwidth
     * 
     */
    public Boolean autoDetectBandwidth() {
        return this.autoDetectBandwidth;
    }
    /**
     * @return Variable name
     * 
     */
    public String autoDetectBandwidthVariable() {
        return this.autoDetectBandwidthVariable;
    }
    /**
     * @return Link autonegotiation
     * 
     */
    public Boolean autonegotiate() {
        return this.autonegotiate;
    }
    /**
     * @return Variable name
     * 
     */
    public String autonegotiateVariable() {
        return this.autonegotiateVariable;
    }
    /**
     * @return Interface downstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthDownstream() {
        return this.bandwidthDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthDownstreamVariable() {
        return this.bandwidthDownstreamVariable;
    }
    /**
     * @return Interface upstream bandwidth capacity, in kbps
     * 
     */
    public Integer bandwidthUpstream() {
        return this.bandwidthUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String bandwidthUpstreamVariable() {
        return this.bandwidthUpstreamVariable;
    }
    /**
     * @return Block packets originating from IP address that is not from this source
     * 
     */
    public Boolean blockNonSourceIp() {
        return this.blockNonSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String blockNonSourceIpVariable() {
        return this.blockNonSourceIpVariable;
    }
    /**
     * @return The description of the Feature
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Duplex mode
     * 
     */
    public String duplex() {
        return this.duplex;
    }
    /**
     * @return Variable name
     * 
     */
    public String duplexVariable() {
        return this.duplexVariable;
    }
    /**
     * @return Enable DHCPv6
     * 
     */
    public Boolean enableDhcpv6() {
        return this.enableDhcpv6;
    }
    /**
     * @return Feature Profile ID
     * 
     */
    public String featureProfileId() {
        return this.featureProfileId;
    }
    /**
     * @return GRE tunnel source IP
     * 
     */
    public String greTunnelSourceIp() {
        return this.greTunnelSourceIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String greTunnelSourceIpVariable() {
        return this.greTunnelSourceIpVariable;
    }
    /**
     * @return ICMP/ICMPv6 Redirect Disable
     * 
     */
    public Boolean icmpRedirectDisable() {
        return this.icmpRedirectDisable;
    }
    /**
     * @return Variable name
     * 
     */
    public String icmpRedirectDisableVariable() {
        return this.icmpRedirectDisableVariable;
    }
    /**
     * @return The id of the Feature
     * 
     */
    public String id() {
        return this.id;
    }
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return Interface MTU GigabitEthernet0 \n\n, Other GigabitEthernet \n\n in bytes
     * 
     */
    public Integer interfaceMtu() {
        return this.interfaceMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceMtuVariable() {
        return this.interfaceMtuVariable;
    }
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return IP MTU for GigabitEthernet main \n\n, GigabitEthernet subinterface \n\n, Other Interfaces \n\n in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return Iperf server for auto bandwidth detect
     * 
     */
    public String iperfServer() {
        return this.iperfServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String iperfServerVariable() {
        return this.iperfServerVariable;
    }
    /**
     * @return IP Address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return IPv4 Configuration Type
     * 
     */
    public String ipv4ConfigurationType() {
        return this.ipv4ConfigurationType;
    }
    /**
     * @return DHCP Distance
     * 
     */
    public Integer ipv4DhcpDistance() {
        return this.ipv4DhcpDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpDistanceVariable() {
        return this.ipv4DhcpDistanceVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpHelperVariable() {
        return this.ipv4DhcpHelperVariable;
    }
    /**
     * @return List of DHCP IPv4 helper addresses (min 1, max 8)
     * 
     */
    public List<String> ipv4DhcpHelpers() {
        return this.ipv4DhcpHelpers;
    }
    /**
     * @return Secondary IpV4 Addresses
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses() {
        return this.ipv4SecondaryAddresses;
    }
    /**
     * @return Subnet Mask
     * 
     */
    public String ipv4SubnetMask() {
        return this.ipv4SubnetMask;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4SubnetMaskVariable() {
        return this.ipv4SubnetMaskVariable;
    }
    /**
     * @return IPv6 Address Secondary
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return IPv6 Configuration Type
     * 
     */
    public String ipv6ConfigurationType() {
        return this.ipv6ConfigurationType;
    }
    /**
     * @return secondary IPv6 addresses
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses() {
        return this.ipv6DhcpSecondaryAddresses;
    }
    /**
     * @return Static secondary IPv6 addresses
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses() {
        return this.ipv6SecondaryAddresses;
    }
    /**
     * @return Interval for interface load calculation
     * 
     */
    public Integer loadInterval() {
        return this.loadInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String loadIntervalVariable() {
        return this.loadIntervalVariable;
    }
    /**
     * @return MAC Address
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String macAddressVariable() {
        return this.macAddressVariable;
    }
    /**
     * @return Media type
     * 
     */
    public String mediaType() {
        return this.mediaType;
    }
    /**
     * @return Variable name
     * 
     */
    public String mediaTypeVariable() {
        return this.mediaTypeVariable;
    }
    /**
     * @return The name of the Feature
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return NAT64 on this interface
     * 
     */
    public Boolean nat64() {
        return this.nat64;
    }
    /**
     * @return NAT66 on this interface
     * 
     */
    public Boolean nat66() {
        return this.nat66;
    }
    /**
     * @return enable Network Address Translation on this interface
     * 
     */
    public Boolean natIpv4() {
        return this.natIpv4;
    }
    /**
     * @return Variable name
     * 
     */
    public String natIpv4Variable() {
        return this.natIpv4Variable;
    }
    /**
     * @return enable Network Address Translation ipv6 on this interface
     * 
     */
    public Boolean natIpv6() {
        return this.natIpv6;
    }
    /**
     * @return Variable name
     * 
     */
    public String natIpv6Variable() {
        return this.natIpv6Variable;
    }
    /**
     * @return NAT Inside Source Loopback Interface
     * 
     */
    public String natLoopback() {
        return this.natLoopback;
    }
    /**
     * @return Variable name
     * 
     */
    public String natLoopbackVariable() {
        return this.natLoopbackVariable;
    }
    /**
     * @return NAT Overload
     * 
     */
    public Boolean natOverload() {
        return this.natOverload;
    }
    /**
     * @return Variable name
     * 
     */
    public String natOverloadVariable() {
        return this.natOverloadVariable;
    }
    /**
     * @return NAT Pool Prefix Length
     * 
     */
    public Integer natPrefixLength() {
        return this.natPrefixLength;
    }
    /**
     * @return Variable name
     * 
     */
    public String natPrefixLengthVariable() {
        return this.natPrefixLengthVariable;
    }
    /**
     * @return NAT Pool Range End
     * 
     */
    public String natRangeEnd() {
        return this.natRangeEnd;
    }
    /**
     * @return Variable name
     * 
     */
    public String natRangeEndVariable() {
        return this.natRangeEndVariable;
    }
    /**
     * @return NAT Pool Range Start
     * 
     */
    public String natRangeStart() {
        return this.natRangeStart;
    }
    /**
     * @return Variable name
     * 
     */
    public String natRangeStartVariable() {
        return this.natRangeStartVariable;
    }
    /**
     * @return Set NAT TCP session timeout, in minutes
     * 
     */
    public Integer natTcpTimeout() {
        return this.natTcpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String natTcpTimeoutVariable() {
        return this.natTcpTimeoutVariable;
    }
    /**
     * @return NAT Type
     * 
     */
    public String natType() {
        return this.natType;
    }
    /**
     * @return Variable name
     * 
     */
    public String natTypeVariable() {
        return this.natTypeVariable;
    }
    /**
     * @return Set NAT UDP session timeout, in minutes
     * 
     */
    public Integer natUdpTimeout() {
        return this.natUdpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String natUdpTimeoutVariable() {
        return this.natUdpTimeoutVariable;
    }
    /**
     * @return static NAT
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat> newStaticNats() {
        return this.newStaticNats;
    }
    /**
     * @return Per-tunnel Qos
     * 
     */
    public Boolean perTunnelQos() {
        return this.perTunnelQos;
    }
    /**
     * @return Variable name
     * 
     */
    public String perTunnelQosVariable() {
        return this.perTunnelQosVariable;
    }
    /**
     * @return Adaptive QoS
     * 
     */
    public Boolean qosAdaptive() {
        return this.qosAdaptive;
    }
    /**
     * @return Shaping Rate Downstream
     * 
     */
    public Boolean qosAdaptiveBandwidthDownstream() {
        return this.qosAdaptiveBandwidthDownstream;
    }
    /**
     * @return Shaping Rate Upstream
     * 
     */
    public Boolean qosAdaptiveBandwidthUpstream() {
        return this.qosAdaptiveBandwidthUpstream;
    }
    /**
     * @return Adaptive QoS default downstream bandwidth (kbps)
     * 
     */
    public Integer qosAdaptiveDefaultDownstream() {
        return this.qosAdaptiveDefaultDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveDefaultDownstreamVariable() {
        return this.qosAdaptiveDefaultDownstreamVariable;
    }
    /**
     * @return Adaptive QoS default upstream bandwidth (kbps)
     * 
     */
    public Integer qosAdaptiveDefaultUpstream() {
        return this.qosAdaptiveDefaultUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveDefaultUpstreamVariable() {
        return this.qosAdaptiveDefaultUpstreamVariable;
    }
    /**
     * @return Downstream max bandwidth limit (kbps)
     * 
     */
    public Integer qosAdaptiveMaxDownstream() {
        return this.qosAdaptiveMaxDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMaxDownstreamVariable() {
        return this.qosAdaptiveMaxDownstreamVariable;
    }
    /**
     * @return Upstream max bandwidth limit (kbps)
     * 
     */
    public Integer qosAdaptiveMaxUpstream() {
        return this.qosAdaptiveMaxUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMaxUpstreamVariable() {
        return this.qosAdaptiveMaxUpstreamVariable;
    }
    /**
     * @return Downstream min bandwidth limit (kbps)
     * 
     */
    public Integer qosAdaptiveMinDownstream() {
        return this.qosAdaptiveMinDownstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMinDownstreamVariable() {
        return this.qosAdaptiveMinDownstreamVariable;
    }
    /**
     * @return Upstream min bandwidth limit (kbps)
     * 
     */
    public Integer qosAdaptiveMinUpstream() {
        return this.qosAdaptiveMinUpstream;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptiveMinUpstreamVariable() {
        return this.qosAdaptiveMinUpstreamVariable;
    }
    /**
     * @return Adapt Period(Minutes)
     * 
     */
    public Integer qosAdaptivePeriod() {
        return this.qosAdaptivePeriod;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosAdaptivePeriodVariable() {
        return this.qosAdaptivePeriodVariable;
    }
    /**
     * @return Shaping Rate (Kbps)
     * 
     */
    public Integer qosShapingRate() {
        return this.qosShapingRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String qosShapingRateVariable() {
        return this.qosShapingRateVariable;
    }
    /**
     * @return Service Provider Name
     * 
     */
    public String serviceProvider() {
        return this.serviceProvider;
    }
    /**
     * @return Variable name
     * 
     */
    public String serviceProviderVariable() {
        return this.serviceProviderVariable;
    }
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Set interface speed
     * 
     */
    public String speed() {
        return this.speed;
    }
    /**
     * @return Variable name
     * 
     */
    public String speedVariable() {
        return this.speedVariable;
    }
    /**
     * @return static NAT66
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureStaticNat66> staticNat66s() {
        return this.staticNat66s;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMss() {
        return this.tcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssVariable() {
        return this.tcpMssVariable;
    }
    /**
     * @return Extends a local TLOC to a remote node only for vpn 0
     * 
     */
    public String tlocExtension() {
        return this.tlocExtension;
    }
    /**
     * @return Variable name
     * 
     */
    public String tlocExtensionVariable() {
        return this.tlocExtensionVariable;
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public String tracker() {
        return this.tracker;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackerVariable() {
        return this.trackerVariable;
    }
    /**
     * @return Transport WAN VPN Feature ID
     * 
     */
    public String transportWanVpnFeatureId() {
        return this.transportWanVpnFeatureId;
    }
    /**
     * @return Tunnels Bandwidth Percent
     * 
     */
    public Integer tunnelBandwidthPercent() {
        return this.tunnelBandwidthPercent;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelBandwidthPercentVariable() {
        return this.tunnelBandwidthPercentVariable;
    }
    /**
     * @return Tunnel Interface on/off
     * 
     */
    public Boolean tunnelInterface() {
        return this.tunnelInterface;
    }
    /**
     * @return Allow all traffic. Overrides all other allow-service options if allow-service all is set
     * 
     */
    public Boolean tunnelInterfaceAllowAll() {
        return this.tunnelInterfaceAllowAll;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowAllVariable() {
        return this.tunnelInterfaceAllowAllVariable;
    }
    /**
     * @return Allow/Deny BFD
     * 
     */
    public Boolean tunnelInterfaceAllowBfd() {
        return this.tunnelInterfaceAllowBfd;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowBfdVariable() {
        return this.tunnelInterfaceAllowBfdVariable;
    }
    /**
     * @return Allow/deny BGP
     * 
     */
    public Boolean tunnelInterfaceAllowBgp() {
        return this.tunnelInterfaceAllowBgp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowBgpVariable() {
        return this.tunnelInterfaceAllowBgpVariable;
    }
    /**
     * @return Allow/Deny DHCP
     * 
     */
    public Boolean tunnelInterfaceAllowDhcp() {
        return this.tunnelInterfaceAllowDhcp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDhcpVariable() {
        return this.tunnelInterfaceAllowDhcpVariable;
    }
    /**
     * @return Allow/Deny DNS
     * 
     */
    public Boolean tunnelInterfaceAllowDns() {
        return this.tunnelInterfaceAllowDns;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowDnsVariable() {
        return this.tunnelInterfaceAllowDnsVariable;
    }
    /**
     * @return Allow/Deny HTTPS
     * 
     */
    public Boolean tunnelInterfaceAllowHttps() {
        return this.tunnelInterfaceAllowHttps;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowHttpsVariable() {
        return this.tunnelInterfaceAllowHttpsVariable;
    }
    /**
     * @return Allow/Deny ICMP
     * 
     */
    public Boolean tunnelInterfaceAllowIcmp() {
        return this.tunnelInterfaceAllowIcmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowIcmpVariable() {
        return this.tunnelInterfaceAllowIcmpVariable;
    }
    /**
     * @return Allow/Deny NETCONF
     * 
     */
    public Boolean tunnelInterfaceAllowNetconf() {
        return this.tunnelInterfaceAllowNetconf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNetconfVariable() {
        return this.tunnelInterfaceAllowNetconfVariable;
    }
    /**
     * @return Allow/Deny NTP
     * 
     */
    public Boolean tunnelInterfaceAllowNtp() {
        return this.tunnelInterfaceAllowNtp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowNtpVariable() {
        return this.tunnelInterfaceAllowNtpVariable;
    }
    /**
     * @return Allow/Deny OSPF
     * 
     */
    public Boolean tunnelInterfaceAllowOspf() {
        return this.tunnelInterfaceAllowOspf;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowOspfVariable() {
        return this.tunnelInterfaceAllowOspfVariable;
    }
    /**
     * @return Allow/Deny SNMP
     * 
     */
    public Boolean tunnelInterfaceAllowSnmp() {
        return this.tunnelInterfaceAllowSnmp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSnmpVariable() {
        return this.tunnelInterfaceAllowSnmpVariable;
    }
    /**
     * @return Allow/Deny SSH
     * 
     */
    public Boolean tunnelInterfaceAllowSsh() {
        return this.tunnelInterfaceAllowSsh;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowSshVariable() {
        return this.tunnelInterfaceAllowSshVariable;
    }
    /**
     * @return Allow/Deny STUN
     * 
     */
    public Boolean tunnelInterfaceAllowStun() {
        return this.tunnelInterfaceAllowStun;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceAllowStunVariable() {
        return this.tunnelInterfaceAllowStunVariable;
    }
    /**
     * @return Bind loopback tunnel interface to a physical interface
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnel() {
        return this.tunnelInterfaceBindLoopbackTunnel;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBindLoopbackTunnelVariable() {
        return this.tunnelInterfaceBindLoopbackTunnelVariable;
    }
    /**
     * @return Set TLOC as border TLOC
     * 
     */
    public Boolean tunnelInterfaceBorder() {
        return this.tunnelInterfaceBorder;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceBorderVariable() {
        return this.tunnelInterfaceBorderVariable;
    }
    /**
     * @return Set carrier for TLOC
     * 
     */
    public String tunnelInterfaceCarrier() {
        return this.tunnelInterfaceCarrier;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceCarrierVariable() {
        return this.tunnelInterfaceCarrierVariable;
    }
    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     * 
     */
    public Boolean tunnelInterfaceClearDontFragment() {
        return this.tunnelInterfaceClearDontFragment;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceClearDontFragmentVariable() {
        return this.tunnelInterfaceClearDontFragmentVariable;
    }
    /**
     * @return Set color for TLOC
     * 
     */
    public String tunnelInterfaceColor() {
        return this.tunnelInterfaceColor;
    }
    /**
     * @return Restrict this TLOC behavior
     * 
     */
    public Boolean tunnelInterfaceColorRestrict() {
        return this.tunnelInterfaceColorRestrict;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceColorRestrictVariable() {
        return this.tunnelInterfaceColorRestrictVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceColorVariable() {
        return this.tunnelInterfaceColorVariable;
    }
    /**
     * @return CTS SGT Propagation configuration
     * 
     */
    public Boolean tunnelInterfaceCtsSgtPropagation() {
        return this.tunnelInterfaceCtsSgtPropagation;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceCtsSgtPropagationVariable() {
        return this.tunnelInterfaceCtsSgtPropagationVariable;
    }
    /**
     * @return Encapsulation for TLOC
     * 
     */
    public List<GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations() {
        return this.tunnelInterfaceEncapsulations;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceExcludeControllerGroupListVariable() {
        return this.tunnelInterfaceExcludeControllerGroupListVariable;
    }
    /**
     * @return Exclude the following controller groups defined in this list.
     * 
     */
    public List<Integer> tunnelInterfaceExcludeControllerGroupLists() {
        return this.tunnelInterfaceExcludeControllerGroupLists;
    }
    /**
     * @return GRE tunnel destination IP
     * 
     */
    public String tunnelInterfaceGreTunnelDestinationIp() {
        return this.tunnelInterfaceGreTunnelDestinationIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceGreTunnelDestinationIpVariable() {
        return this.tunnelInterfaceGreTunnelDestinationIpVariable;
    }
    /**
     * @return List of groups
     * 
     */
    public Integer tunnelInterfaceGroups() {
        return this.tunnelInterfaceGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceGroupsVariable() {
        return this.tunnelInterfaceGroupsVariable;
    }
    /**
     * @return Set time period of control hello packets \n\n milli seconds
     * 
     */
    public Integer tunnelInterfaceHelloInterval() {
        return this.tunnelInterfaceHelloInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloIntervalVariable() {
        return this.tunnelInterfaceHelloIntervalVariable;
    }
    /**
     * @return Set tolerance of control hello packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceHelloTolerance() {
        return this.tunnelInterfaceHelloTolerance;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceHelloToleranceVariable() {
        return this.tunnelInterfaceHelloToleranceVariable;
    }
    /**
     * @return Set TLOC as last resort
     * 
     */
    public Boolean tunnelInterfaceLastResortCircuit() {
        return this.tunnelInterfaceLastResortCircuit;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLastResortCircuitVariable() {
        return this.tunnelInterfaceLastResortCircuitVariable;
    }
    /**
     * @return Set the interface as a low-bandwidth circuit
     * 
     */
    public Boolean tunnelInterfaceLowBandwidthLink() {
        return this.tunnelInterfaceLowBandwidthLink;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceLowBandwidthLinkVariable() {
        return this.tunnelInterfaceLowBandwidthLinkVariable;
    }
    /**
     * @return Maximum Control Connections
     * 
     */
    public Integer tunnelInterfaceMaxControlConnections() {
        return this.tunnelInterfaceMaxControlConnections;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceMaxControlConnectionsVariable() {
        return this.tunnelInterfaceMaxControlConnectionsVariable;
    }
    /**
     * @return Set time period of nat refresh packets \n\n seconds
     * 
     */
    public Integer tunnelInterfaceNatRefreshInterval() {
        return this.tunnelInterfaceNatRefreshInterval;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNatRefreshIntervalVariable() {
        return this.tunnelInterfaceNatRefreshIntervalVariable;
    }
    /**
     * @return Accept and respond to network-prefix-directed broadcasts
     * 
     */
    public Boolean tunnelInterfaceNetworkBroadcast() {
        return this.tunnelInterfaceNetworkBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceNetworkBroadcastVariable() {
        return this.tunnelInterfaceNetworkBroadcastVariable;
    }
    /**
     * @return Disallow port hopping on the tunnel interface
     * 
     */
    public Boolean tunnelInterfacePortHop() {
        return this.tunnelInterfacePortHop;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfacePortHopVariable() {
        return this.tunnelInterfacePortHopVariable;
    }
    /**
     * @return Tunnel TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tunnelInterfaceTunnelTcpMss() {
        return this.tunnelInterfaceTunnelTcpMss;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceTunnelTcpMssVariable() {
        return this.tunnelInterfaceTunnelTcpMssVariable;
    }
    /**
     * @return Put this wan interface in STUN mode only
     * 
     */
    public Boolean tunnelInterfaceVbondAsStunServer() {
        return this.tunnelInterfaceVbondAsStunServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVbondAsStunServerVariable() {
        return this.tunnelInterfaceVbondAsStunServerVariable;
    }
    /**
     * @return Set interface preference for control connection to vManage \n\n
     * 
     */
    public Integer tunnelInterfaceVmanageConnectionPreference() {
        return this.tunnelInterfaceVmanageConnectionPreference;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelInterfaceVmanageConnectionPreferenceVariable() {
        return this.tunnelInterfaceVmanageConnectionPreferenceVariable;
    }
    /**
     * @return Set tunnel QoS mode
     * 
     */
    public String tunnelQosMode() {
        return this.tunnelQosMode;
    }
    /**
     * @return Variable name
     * 
     */
    public String tunnelQosModeVariable() {
        return this.tunnelQosModeVariable;
    }
    /**
     * @return The version of the Feature
     * 
     */
    public Integer version() {
        return this.version;
    }
    /**
     * @return Extend remote TLOC over a GRE tunnel to a local WAN interface
     * 
     */
    public String xconnect() {
        return this.xconnect;
    }
    /**
     * @return Variable name
     * 
     */
    public String xconnectVariable() {
        return this.xconnectVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransportWanVpnInterfaceEthernetFeatureResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclIpv4EgressFeatureId;
        private String aclIpv4IngressFeatureId;
        private String aclIpv6EgressFeatureId;
        private String aclIpv6IngressFeatureId;
        private Integer arpTimeout;
        private String arpTimeoutVariable;
        private List<GetTransportWanVpnInterfaceEthernetFeatureArp> arps;
        private Boolean autoDetectBandwidth;
        private String autoDetectBandwidthVariable;
        private Boolean autonegotiate;
        private String autonegotiateVariable;
        private Integer bandwidthDownstream;
        private String bandwidthDownstreamVariable;
        private Integer bandwidthUpstream;
        private String bandwidthUpstreamVariable;
        private Boolean blockNonSourceIp;
        private String blockNonSourceIpVariable;
        private String description;
        private String duplex;
        private String duplexVariable;
        private Boolean enableDhcpv6;
        private String featureProfileId;
        private String greTunnelSourceIp;
        private String greTunnelSourceIpVariable;
        private Boolean icmpRedirectDisable;
        private String icmpRedirectDisableVariable;
        private String id;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private Integer interfaceMtu;
        private String interfaceMtuVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private String iperfServer;
        private String iperfServerVariable;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private String ipv4ConfigurationType;
        private Integer ipv4DhcpDistance;
        private String ipv4DhcpDistanceVariable;
        private String ipv4DhcpHelperVariable;
        private List<String> ipv4DhcpHelpers;
        private List<GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses;
        private String ipv4SubnetMask;
        private String ipv4SubnetMaskVariable;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private String ipv6ConfigurationType;
        private List<GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses;
        private List<GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses;
        private Integer loadInterval;
        private String loadIntervalVariable;
        private String macAddress;
        private String macAddressVariable;
        private String mediaType;
        private String mediaTypeVariable;
        private String name;
        private Boolean nat64;
        private Boolean nat66;
        private Boolean natIpv4;
        private String natIpv4Variable;
        private Boolean natIpv6;
        private String natIpv6Variable;
        private String natLoopback;
        private String natLoopbackVariable;
        private Boolean natOverload;
        private String natOverloadVariable;
        private Integer natPrefixLength;
        private String natPrefixLengthVariable;
        private String natRangeEnd;
        private String natRangeEndVariable;
        private String natRangeStart;
        private String natRangeStartVariable;
        private Integer natTcpTimeout;
        private String natTcpTimeoutVariable;
        private String natType;
        private String natTypeVariable;
        private Integer natUdpTimeout;
        private String natUdpTimeoutVariable;
        private List<GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat> newStaticNats;
        private Boolean perTunnelQos;
        private String perTunnelQosVariable;
        private Boolean qosAdaptive;
        private Boolean qosAdaptiveBandwidthDownstream;
        private Boolean qosAdaptiveBandwidthUpstream;
        private Integer qosAdaptiveDefaultDownstream;
        private String qosAdaptiveDefaultDownstreamVariable;
        private Integer qosAdaptiveDefaultUpstream;
        private String qosAdaptiveDefaultUpstreamVariable;
        private Integer qosAdaptiveMaxDownstream;
        private String qosAdaptiveMaxDownstreamVariable;
        private Integer qosAdaptiveMaxUpstream;
        private String qosAdaptiveMaxUpstreamVariable;
        private Integer qosAdaptiveMinDownstream;
        private String qosAdaptiveMinDownstreamVariable;
        private Integer qosAdaptiveMinUpstream;
        private String qosAdaptiveMinUpstreamVariable;
        private Integer qosAdaptivePeriod;
        private String qosAdaptivePeriodVariable;
        private Integer qosShapingRate;
        private String qosShapingRateVariable;
        private String serviceProvider;
        private String serviceProviderVariable;
        private Boolean shutdown;
        private String shutdownVariable;
        private String speed;
        private String speedVariable;
        private List<GetTransportWanVpnInterfaceEthernetFeatureStaticNat66> staticNat66s;
        private Integer tcpMss;
        private String tcpMssVariable;
        private String tlocExtension;
        private String tlocExtensionVariable;
        private String tracker;
        private String trackerVariable;
        private String transportWanVpnFeatureId;
        private Integer tunnelBandwidthPercent;
        private String tunnelBandwidthPercentVariable;
        private Boolean tunnelInterface;
        private Boolean tunnelInterfaceAllowAll;
        private String tunnelInterfaceAllowAllVariable;
        private Boolean tunnelInterfaceAllowBfd;
        private String tunnelInterfaceAllowBfdVariable;
        private Boolean tunnelInterfaceAllowBgp;
        private String tunnelInterfaceAllowBgpVariable;
        private Boolean tunnelInterfaceAllowDhcp;
        private String tunnelInterfaceAllowDhcpVariable;
        private Boolean tunnelInterfaceAllowDns;
        private String tunnelInterfaceAllowDnsVariable;
        private Boolean tunnelInterfaceAllowHttps;
        private String tunnelInterfaceAllowHttpsVariable;
        private Boolean tunnelInterfaceAllowIcmp;
        private String tunnelInterfaceAllowIcmpVariable;
        private Boolean tunnelInterfaceAllowNetconf;
        private String tunnelInterfaceAllowNetconfVariable;
        private Boolean tunnelInterfaceAllowNtp;
        private String tunnelInterfaceAllowNtpVariable;
        private Boolean tunnelInterfaceAllowOspf;
        private String tunnelInterfaceAllowOspfVariable;
        private Boolean tunnelInterfaceAllowSnmp;
        private String tunnelInterfaceAllowSnmpVariable;
        private Boolean tunnelInterfaceAllowSsh;
        private String tunnelInterfaceAllowSshVariable;
        private Boolean tunnelInterfaceAllowStun;
        private String tunnelInterfaceAllowStunVariable;
        private String tunnelInterfaceBindLoopbackTunnel;
        private String tunnelInterfaceBindLoopbackTunnelVariable;
        private Boolean tunnelInterfaceBorder;
        private String tunnelInterfaceBorderVariable;
        private String tunnelInterfaceCarrier;
        private String tunnelInterfaceCarrierVariable;
        private Boolean tunnelInterfaceClearDontFragment;
        private String tunnelInterfaceClearDontFragmentVariable;
        private String tunnelInterfaceColor;
        private Boolean tunnelInterfaceColorRestrict;
        private String tunnelInterfaceColorRestrictVariable;
        private String tunnelInterfaceColorVariable;
        private Boolean tunnelInterfaceCtsSgtPropagation;
        private String tunnelInterfaceCtsSgtPropagationVariable;
        private List<GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations;
        private String tunnelInterfaceExcludeControllerGroupListVariable;
        private List<Integer> tunnelInterfaceExcludeControllerGroupLists;
        private String tunnelInterfaceGreTunnelDestinationIp;
        private String tunnelInterfaceGreTunnelDestinationIpVariable;
        private Integer tunnelInterfaceGroups;
        private String tunnelInterfaceGroupsVariable;
        private Integer tunnelInterfaceHelloInterval;
        private String tunnelInterfaceHelloIntervalVariable;
        private Integer tunnelInterfaceHelloTolerance;
        private String tunnelInterfaceHelloToleranceVariable;
        private Boolean tunnelInterfaceLastResortCircuit;
        private String tunnelInterfaceLastResortCircuitVariable;
        private Boolean tunnelInterfaceLowBandwidthLink;
        private String tunnelInterfaceLowBandwidthLinkVariable;
        private Integer tunnelInterfaceMaxControlConnections;
        private String tunnelInterfaceMaxControlConnectionsVariable;
        private Integer tunnelInterfaceNatRefreshInterval;
        private String tunnelInterfaceNatRefreshIntervalVariable;
        private Boolean tunnelInterfaceNetworkBroadcast;
        private String tunnelInterfaceNetworkBroadcastVariable;
        private Boolean tunnelInterfacePortHop;
        private String tunnelInterfacePortHopVariable;
        private Integer tunnelInterfaceTunnelTcpMss;
        private String tunnelInterfaceTunnelTcpMssVariable;
        private Boolean tunnelInterfaceVbondAsStunServer;
        private String tunnelInterfaceVbondAsStunServerVariable;
        private Integer tunnelInterfaceVmanageConnectionPreference;
        private String tunnelInterfaceVmanageConnectionPreferenceVariable;
        private String tunnelQosMode;
        private String tunnelQosModeVariable;
        private Integer version;
        private String xconnect;
        private String xconnectVariable;
        public Builder() {}
        public Builder(GetTransportWanVpnInterfaceEthernetFeatureResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclIpv4EgressFeatureId = defaults.aclIpv4EgressFeatureId;
    	      this.aclIpv4IngressFeatureId = defaults.aclIpv4IngressFeatureId;
    	      this.aclIpv6EgressFeatureId = defaults.aclIpv6EgressFeatureId;
    	      this.aclIpv6IngressFeatureId = defaults.aclIpv6IngressFeatureId;
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.arpTimeoutVariable = defaults.arpTimeoutVariable;
    	      this.arps = defaults.arps;
    	      this.autoDetectBandwidth = defaults.autoDetectBandwidth;
    	      this.autoDetectBandwidthVariable = defaults.autoDetectBandwidthVariable;
    	      this.autonegotiate = defaults.autonegotiate;
    	      this.autonegotiateVariable = defaults.autonegotiateVariable;
    	      this.bandwidthDownstream = defaults.bandwidthDownstream;
    	      this.bandwidthDownstreamVariable = defaults.bandwidthDownstreamVariable;
    	      this.bandwidthUpstream = defaults.bandwidthUpstream;
    	      this.bandwidthUpstreamVariable = defaults.bandwidthUpstreamVariable;
    	      this.blockNonSourceIp = defaults.blockNonSourceIp;
    	      this.blockNonSourceIpVariable = defaults.blockNonSourceIpVariable;
    	      this.description = defaults.description;
    	      this.duplex = defaults.duplex;
    	      this.duplexVariable = defaults.duplexVariable;
    	      this.enableDhcpv6 = defaults.enableDhcpv6;
    	      this.featureProfileId = defaults.featureProfileId;
    	      this.greTunnelSourceIp = defaults.greTunnelSourceIp;
    	      this.greTunnelSourceIpVariable = defaults.greTunnelSourceIpVariable;
    	      this.icmpRedirectDisable = defaults.icmpRedirectDisable;
    	      this.icmpRedirectDisableVariable = defaults.icmpRedirectDisableVariable;
    	      this.id = defaults.id;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.interfaceMtu = defaults.interfaceMtu;
    	      this.interfaceMtuVariable = defaults.interfaceMtuVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.iperfServer = defaults.iperfServer;
    	      this.iperfServerVariable = defaults.iperfServerVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4ConfigurationType = defaults.ipv4ConfigurationType;
    	      this.ipv4DhcpDistance = defaults.ipv4DhcpDistance;
    	      this.ipv4DhcpDistanceVariable = defaults.ipv4DhcpDistanceVariable;
    	      this.ipv4DhcpHelperVariable = defaults.ipv4DhcpHelperVariable;
    	      this.ipv4DhcpHelpers = defaults.ipv4DhcpHelpers;
    	      this.ipv4SecondaryAddresses = defaults.ipv4SecondaryAddresses;
    	      this.ipv4SubnetMask = defaults.ipv4SubnetMask;
    	      this.ipv4SubnetMaskVariable = defaults.ipv4SubnetMaskVariable;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.ipv6ConfigurationType = defaults.ipv6ConfigurationType;
    	      this.ipv6DhcpSecondaryAddresses = defaults.ipv6DhcpSecondaryAddresses;
    	      this.ipv6SecondaryAddresses = defaults.ipv6SecondaryAddresses;
    	      this.loadInterval = defaults.loadInterval;
    	      this.loadIntervalVariable = defaults.loadIntervalVariable;
    	      this.macAddress = defaults.macAddress;
    	      this.macAddressVariable = defaults.macAddressVariable;
    	      this.mediaType = defaults.mediaType;
    	      this.mediaTypeVariable = defaults.mediaTypeVariable;
    	      this.name = defaults.name;
    	      this.nat64 = defaults.nat64;
    	      this.nat66 = defaults.nat66;
    	      this.natIpv4 = defaults.natIpv4;
    	      this.natIpv4Variable = defaults.natIpv4Variable;
    	      this.natIpv6 = defaults.natIpv6;
    	      this.natIpv6Variable = defaults.natIpv6Variable;
    	      this.natLoopback = defaults.natLoopback;
    	      this.natLoopbackVariable = defaults.natLoopbackVariable;
    	      this.natOverload = defaults.natOverload;
    	      this.natOverloadVariable = defaults.natOverloadVariable;
    	      this.natPrefixLength = defaults.natPrefixLength;
    	      this.natPrefixLengthVariable = defaults.natPrefixLengthVariable;
    	      this.natRangeEnd = defaults.natRangeEnd;
    	      this.natRangeEndVariable = defaults.natRangeEndVariable;
    	      this.natRangeStart = defaults.natRangeStart;
    	      this.natRangeStartVariable = defaults.natRangeStartVariable;
    	      this.natTcpTimeout = defaults.natTcpTimeout;
    	      this.natTcpTimeoutVariable = defaults.natTcpTimeoutVariable;
    	      this.natType = defaults.natType;
    	      this.natTypeVariable = defaults.natTypeVariable;
    	      this.natUdpTimeout = defaults.natUdpTimeout;
    	      this.natUdpTimeoutVariable = defaults.natUdpTimeoutVariable;
    	      this.newStaticNats = defaults.newStaticNats;
    	      this.perTunnelQos = defaults.perTunnelQos;
    	      this.perTunnelQosVariable = defaults.perTunnelQosVariable;
    	      this.qosAdaptive = defaults.qosAdaptive;
    	      this.qosAdaptiveBandwidthDownstream = defaults.qosAdaptiveBandwidthDownstream;
    	      this.qosAdaptiveBandwidthUpstream = defaults.qosAdaptiveBandwidthUpstream;
    	      this.qosAdaptiveDefaultDownstream = defaults.qosAdaptiveDefaultDownstream;
    	      this.qosAdaptiveDefaultDownstreamVariable = defaults.qosAdaptiveDefaultDownstreamVariable;
    	      this.qosAdaptiveDefaultUpstream = defaults.qosAdaptiveDefaultUpstream;
    	      this.qosAdaptiveDefaultUpstreamVariable = defaults.qosAdaptiveDefaultUpstreamVariable;
    	      this.qosAdaptiveMaxDownstream = defaults.qosAdaptiveMaxDownstream;
    	      this.qosAdaptiveMaxDownstreamVariable = defaults.qosAdaptiveMaxDownstreamVariable;
    	      this.qosAdaptiveMaxUpstream = defaults.qosAdaptiveMaxUpstream;
    	      this.qosAdaptiveMaxUpstreamVariable = defaults.qosAdaptiveMaxUpstreamVariable;
    	      this.qosAdaptiveMinDownstream = defaults.qosAdaptiveMinDownstream;
    	      this.qosAdaptiveMinDownstreamVariable = defaults.qosAdaptiveMinDownstreamVariable;
    	      this.qosAdaptiveMinUpstream = defaults.qosAdaptiveMinUpstream;
    	      this.qosAdaptiveMinUpstreamVariable = defaults.qosAdaptiveMinUpstreamVariable;
    	      this.qosAdaptivePeriod = defaults.qosAdaptivePeriod;
    	      this.qosAdaptivePeriodVariable = defaults.qosAdaptivePeriodVariable;
    	      this.qosShapingRate = defaults.qosShapingRate;
    	      this.qosShapingRateVariable = defaults.qosShapingRateVariable;
    	      this.serviceProvider = defaults.serviceProvider;
    	      this.serviceProviderVariable = defaults.serviceProviderVariable;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.speed = defaults.speed;
    	      this.speedVariable = defaults.speedVariable;
    	      this.staticNat66s = defaults.staticNat66s;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.tlocExtension = defaults.tlocExtension;
    	      this.tlocExtensionVariable = defaults.tlocExtensionVariable;
    	      this.tracker = defaults.tracker;
    	      this.trackerVariable = defaults.trackerVariable;
    	      this.transportWanVpnFeatureId = defaults.transportWanVpnFeatureId;
    	      this.tunnelBandwidthPercent = defaults.tunnelBandwidthPercent;
    	      this.tunnelBandwidthPercentVariable = defaults.tunnelBandwidthPercentVariable;
    	      this.tunnelInterface = defaults.tunnelInterface;
    	      this.tunnelInterfaceAllowAll = defaults.tunnelInterfaceAllowAll;
    	      this.tunnelInterfaceAllowAllVariable = defaults.tunnelInterfaceAllowAllVariable;
    	      this.tunnelInterfaceAllowBfd = defaults.tunnelInterfaceAllowBfd;
    	      this.tunnelInterfaceAllowBfdVariable = defaults.tunnelInterfaceAllowBfdVariable;
    	      this.tunnelInterfaceAllowBgp = defaults.tunnelInterfaceAllowBgp;
    	      this.tunnelInterfaceAllowBgpVariable = defaults.tunnelInterfaceAllowBgpVariable;
    	      this.tunnelInterfaceAllowDhcp = defaults.tunnelInterfaceAllowDhcp;
    	      this.tunnelInterfaceAllowDhcpVariable = defaults.tunnelInterfaceAllowDhcpVariable;
    	      this.tunnelInterfaceAllowDns = defaults.tunnelInterfaceAllowDns;
    	      this.tunnelInterfaceAllowDnsVariable = defaults.tunnelInterfaceAllowDnsVariable;
    	      this.tunnelInterfaceAllowHttps = defaults.tunnelInterfaceAllowHttps;
    	      this.tunnelInterfaceAllowHttpsVariable = defaults.tunnelInterfaceAllowHttpsVariable;
    	      this.tunnelInterfaceAllowIcmp = defaults.tunnelInterfaceAllowIcmp;
    	      this.tunnelInterfaceAllowIcmpVariable = defaults.tunnelInterfaceAllowIcmpVariable;
    	      this.tunnelInterfaceAllowNetconf = defaults.tunnelInterfaceAllowNetconf;
    	      this.tunnelInterfaceAllowNetconfVariable = defaults.tunnelInterfaceAllowNetconfVariable;
    	      this.tunnelInterfaceAllowNtp = defaults.tunnelInterfaceAllowNtp;
    	      this.tunnelInterfaceAllowNtpVariable = defaults.tunnelInterfaceAllowNtpVariable;
    	      this.tunnelInterfaceAllowOspf = defaults.tunnelInterfaceAllowOspf;
    	      this.tunnelInterfaceAllowOspfVariable = defaults.tunnelInterfaceAllowOspfVariable;
    	      this.tunnelInterfaceAllowSnmp = defaults.tunnelInterfaceAllowSnmp;
    	      this.tunnelInterfaceAllowSnmpVariable = defaults.tunnelInterfaceAllowSnmpVariable;
    	      this.tunnelInterfaceAllowSsh = defaults.tunnelInterfaceAllowSsh;
    	      this.tunnelInterfaceAllowSshVariable = defaults.tunnelInterfaceAllowSshVariable;
    	      this.tunnelInterfaceAllowStun = defaults.tunnelInterfaceAllowStun;
    	      this.tunnelInterfaceAllowStunVariable = defaults.tunnelInterfaceAllowStunVariable;
    	      this.tunnelInterfaceBindLoopbackTunnel = defaults.tunnelInterfaceBindLoopbackTunnel;
    	      this.tunnelInterfaceBindLoopbackTunnelVariable = defaults.tunnelInterfaceBindLoopbackTunnelVariable;
    	      this.tunnelInterfaceBorder = defaults.tunnelInterfaceBorder;
    	      this.tunnelInterfaceBorderVariable = defaults.tunnelInterfaceBorderVariable;
    	      this.tunnelInterfaceCarrier = defaults.tunnelInterfaceCarrier;
    	      this.tunnelInterfaceCarrierVariable = defaults.tunnelInterfaceCarrierVariable;
    	      this.tunnelInterfaceClearDontFragment = defaults.tunnelInterfaceClearDontFragment;
    	      this.tunnelInterfaceClearDontFragmentVariable = defaults.tunnelInterfaceClearDontFragmentVariable;
    	      this.tunnelInterfaceColor = defaults.tunnelInterfaceColor;
    	      this.tunnelInterfaceColorRestrict = defaults.tunnelInterfaceColorRestrict;
    	      this.tunnelInterfaceColorRestrictVariable = defaults.tunnelInterfaceColorRestrictVariable;
    	      this.tunnelInterfaceColorVariable = defaults.tunnelInterfaceColorVariable;
    	      this.tunnelInterfaceCtsSgtPropagation = defaults.tunnelInterfaceCtsSgtPropagation;
    	      this.tunnelInterfaceCtsSgtPropagationVariable = defaults.tunnelInterfaceCtsSgtPropagationVariable;
    	      this.tunnelInterfaceEncapsulations = defaults.tunnelInterfaceEncapsulations;
    	      this.tunnelInterfaceExcludeControllerGroupListVariable = defaults.tunnelInterfaceExcludeControllerGroupListVariable;
    	      this.tunnelInterfaceExcludeControllerGroupLists = defaults.tunnelInterfaceExcludeControllerGroupLists;
    	      this.tunnelInterfaceGreTunnelDestinationIp = defaults.tunnelInterfaceGreTunnelDestinationIp;
    	      this.tunnelInterfaceGreTunnelDestinationIpVariable = defaults.tunnelInterfaceGreTunnelDestinationIpVariable;
    	      this.tunnelInterfaceGroups = defaults.tunnelInterfaceGroups;
    	      this.tunnelInterfaceGroupsVariable = defaults.tunnelInterfaceGroupsVariable;
    	      this.tunnelInterfaceHelloInterval = defaults.tunnelInterfaceHelloInterval;
    	      this.tunnelInterfaceHelloIntervalVariable = defaults.tunnelInterfaceHelloIntervalVariable;
    	      this.tunnelInterfaceHelloTolerance = defaults.tunnelInterfaceHelloTolerance;
    	      this.tunnelInterfaceHelloToleranceVariable = defaults.tunnelInterfaceHelloToleranceVariable;
    	      this.tunnelInterfaceLastResortCircuit = defaults.tunnelInterfaceLastResortCircuit;
    	      this.tunnelInterfaceLastResortCircuitVariable = defaults.tunnelInterfaceLastResortCircuitVariable;
    	      this.tunnelInterfaceLowBandwidthLink = defaults.tunnelInterfaceLowBandwidthLink;
    	      this.tunnelInterfaceLowBandwidthLinkVariable = defaults.tunnelInterfaceLowBandwidthLinkVariable;
    	      this.tunnelInterfaceMaxControlConnections = defaults.tunnelInterfaceMaxControlConnections;
    	      this.tunnelInterfaceMaxControlConnectionsVariable = defaults.tunnelInterfaceMaxControlConnectionsVariable;
    	      this.tunnelInterfaceNatRefreshInterval = defaults.tunnelInterfaceNatRefreshInterval;
    	      this.tunnelInterfaceNatRefreshIntervalVariable = defaults.tunnelInterfaceNatRefreshIntervalVariable;
    	      this.tunnelInterfaceNetworkBroadcast = defaults.tunnelInterfaceNetworkBroadcast;
    	      this.tunnelInterfaceNetworkBroadcastVariable = defaults.tunnelInterfaceNetworkBroadcastVariable;
    	      this.tunnelInterfacePortHop = defaults.tunnelInterfacePortHop;
    	      this.tunnelInterfacePortHopVariable = defaults.tunnelInterfacePortHopVariable;
    	      this.tunnelInterfaceTunnelTcpMss = defaults.tunnelInterfaceTunnelTcpMss;
    	      this.tunnelInterfaceTunnelTcpMssVariable = defaults.tunnelInterfaceTunnelTcpMssVariable;
    	      this.tunnelInterfaceVbondAsStunServer = defaults.tunnelInterfaceVbondAsStunServer;
    	      this.tunnelInterfaceVbondAsStunServerVariable = defaults.tunnelInterfaceVbondAsStunServerVariable;
    	      this.tunnelInterfaceVmanageConnectionPreference = defaults.tunnelInterfaceVmanageConnectionPreference;
    	      this.tunnelInterfaceVmanageConnectionPreferenceVariable = defaults.tunnelInterfaceVmanageConnectionPreferenceVariable;
    	      this.tunnelQosMode = defaults.tunnelQosMode;
    	      this.tunnelQosModeVariable = defaults.tunnelQosModeVariable;
    	      this.version = defaults.version;
    	      this.xconnect = defaults.xconnect;
    	      this.xconnectVariable = defaults.xconnectVariable;
        }

        @CustomType.Setter
        public Builder aclIpv4EgressFeatureId(String aclIpv4EgressFeatureId) {
            if (aclIpv4EgressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "aclIpv4EgressFeatureId");
            }
            this.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv4IngressFeatureId(String aclIpv4IngressFeatureId) {
            if (aclIpv4IngressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "aclIpv4IngressFeatureId");
            }
            this.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6EgressFeatureId(String aclIpv6EgressFeatureId) {
            if (aclIpv6EgressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "aclIpv6EgressFeatureId");
            }
            this.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder aclIpv6IngressFeatureId(String aclIpv6IngressFeatureId) {
            if (aclIpv6IngressFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "aclIpv6IngressFeatureId");
            }
            this.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            if (arpTimeout == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "arpTimeout");
            }
            this.arpTimeout = arpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            if (arpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "arpTimeoutVariable");
            }
            this.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder arps(List<GetTransportWanVpnInterfaceEthernetFeatureArp> arps) {
            if (arps == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "arps");
            }
            this.arps = arps;
            return this;
        }
        public Builder arps(GetTransportWanVpnInterfaceEthernetFeatureArp... arps) {
            return arps(List.of(arps));
        }
        @CustomType.Setter
        public Builder autoDetectBandwidth(Boolean autoDetectBandwidth) {
            if (autoDetectBandwidth == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "autoDetectBandwidth");
            }
            this.autoDetectBandwidth = autoDetectBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder autoDetectBandwidthVariable(String autoDetectBandwidthVariable) {
            if (autoDetectBandwidthVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "autoDetectBandwidthVariable");
            }
            this.autoDetectBandwidthVariable = autoDetectBandwidthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiate(Boolean autonegotiate) {
            if (autonegotiate == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "autonegotiate");
            }
            this.autonegotiate = autonegotiate;
            return this;
        }
        @CustomType.Setter
        public Builder autonegotiateVariable(String autonegotiateVariable) {
            if (autonegotiateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "autonegotiateVariable");
            }
            this.autonegotiateVariable = autonegotiateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstream(Integer bandwidthDownstream) {
            if (bandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "bandwidthDownstream");
            }
            this.bandwidthDownstream = bandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthDownstreamVariable(String bandwidthDownstreamVariable) {
            if (bandwidthDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "bandwidthDownstreamVariable");
            }
            this.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthUpstream(Integer bandwidthUpstream) {
            if (bandwidthUpstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "bandwidthUpstream");
            }
            this.bandwidthUpstream = bandwidthUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthUpstreamVariable(String bandwidthUpstreamVariable) {
            if (bandwidthUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "bandwidthUpstreamVariable");
            }
            this.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder blockNonSourceIp(Boolean blockNonSourceIp) {
            if (blockNonSourceIp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "blockNonSourceIp");
            }
            this.blockNonSourceIp = blockNonSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder blockNonSourceIpVariable(String blockNonSourceIpVariable) {
            if (blockNonSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "blockNonSourceIpVariable");
            }
            this.blockNonSourceIpVariable = blockNonSourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder duplex(String duplex) {
            if (duplex == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "duplex");
            }
            this.duplex = duplex;
            return this;
        }
        @CustomType.Setter
        public Builder duplexVariable(String duplexVariable) {
            if (duplexVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "duplexVariable");
            }
            this.duplexVariable = duplexVariable;
            return this;
        }
        @CustomType.Setter
        public Builder enableDhcpv6(Boolean enableDhcpv6) {
            if (enableDhcpv6 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "enableDhcpv6");
            }
            this.enableDhcpv6 = enableDhcpv6;
            return this;
        }
        @CustomType.Setter
        public Builder featureProfileId(String featureProfileId) {
            if (featureProfileId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "featureProfileId");
            }
            this.featureProfileId = featureProfileId;
            return this;
        }
        @CustomType.Setter
        public Builder greTunnelSourceIp(String greTunnelSourceIp) {
            if (greTunnelSourceIp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "greTunnelSourceIp");
            }
            this.greTunnelSourceIp = greTunnelSourceIp;
            return this;
        }
        @CustomType.Setter
        public Builder greTunnelSourceIpVariable(String greTunnelSourceIpVariable) {
            if (greTunnelSourceIpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "greTunnelSourceIpVariable");
            }
            this.greTunnelSourceIpVariable = greTunnelSourceIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisable(Boolean icmpRedirectDisable) {
            if (icmpRedirectDisable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "icmpRedirectDisable");
            }
            this.icmpRedirectDisable = icmpRedirectDisable;
            return this;
        }
        @CustomType.Setter
        public Builder icmpRedirectDisableVariable(String icmpRedirectDisableVariable) {
            if (icmpRedirectDisableVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "icmpRedirectDisableVariable");
            }
            this.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtu(Integer interfaceMtu) {
            if (interfaceMtu == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "interfaceMtu");
            }
            this.interfaceMtu = interfaceMtu;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceMtuVariable(String interfaceMtuVariable) {
            if (interfaceMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "interfaceMtuVariable");
            }
            this.interfaceMtuVariable = interfaceMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder iperfServer(String iperfServer) {
            if (iperfServer == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "iperfServer");
            }
            this.iperfServer = iperfServer;
            return this;
        }
        @CustomType.Setter
        public Builder iperfServerVariable(String iperfServerVariable) {
            if (iperfServerVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "iperfServerVariable");
            }
            this.iperfServerVariable = iperfServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4ConfigurationType(String ipv4ConfigurationType) {
            if (ipv4ConfigurationType == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4ConfigurationType");
            }
            this.ipv4ConfigurationType = ipv4ConfigurationType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpDistance(Integer ipv4DhcpDistance) {
            if (ipv4DhcpDistance == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4DhcpDistance");
            }
            this.ipv4DhcpDistance = ipv4DhcpDistance;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpDistanceVariable(String ipv4DhcpDistanceVariable) {
            if (ipv4DhcpDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4DhcpDistanceVariable");
            }
            this.ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelperVariable(String ipv4DhcpHelperVariable) {
            if (ipv4DhcpHelperVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4DhcpHelperVariable");
            }
            this.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            if (ipv4DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4DhcpHelpers");
            }
            this.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv4SecondaryAddresses(List<GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress> ipv4SecondaryAddresses) {
            if (ipv4SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4SecondaryAddresses");
            }
            this.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }
        public Builder ipv4SecondaryAddresses(GetTransportWanVpnInterfaceEthernetFeatureIpv4SecondaryAddress... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv4SubnetMask(String ipv4SubnetMask) {
            if (ipv4SubnetMask == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4SubnetMask");
            }
            this.ipv4SubnetMask = ipv4SubnetMask;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4SubnetMaskVariable(String ipv4SubnetMaskVariable) {
            if (ipv4SubnetMaskVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv4SubnetMaskVariable");
            }
            this.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6ConfigurationType(String ipv6ConfigurationType) {
            if (ipv6ConfigurationType == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv6ConfigurationType");
            }
            this.ipv6ConfigurationType = ipv6ConfigurationType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpSecondaryAddresses(List<GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress> ipv6DhcpSecondaryAddresses) {
            if (ipv6DhcpSecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv6DhcpSecondaryAddresses");
            }
            this.ipv6DhcpSecondaryAddresses = ipv6DhcpSecondaryAddresses;
            return this;
        }
        public Builder ipv6DhcpSecondaryAddresses(GetTransportWanVpnInterfaceEthernetFeatureIpv6DhcpSecondaryAddress... ipv6DhcpSecondaryAddresses) {
            return ipv6DhcpSecondaryAddresses(List.of(ipv6DhcpSecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv6SecondaryAddresses(List<GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress> ipv6SecondaryAddresses) {
            if (ipv6SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "ipv6SecondaryAddresses");
            }
            this.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            return this;
        }
        public Builder ipv6SecondaryAddresses(GetTransportWanVpnInterfaceEthernetFeatureIpv6SecondaryAddress... ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(List.of(ipv6SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder loadInterval(Integer loadInterval) {
            if (loadInterval == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "loadInterval");
            }
            this.loadInterval = loadInterval;
            return this;
        }
        @CustomType.Setter
        public Builder loadIntervalVariable(String loadIntervalVariable) {
            if (loadIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "loadIntervalVariable");
            }
            this.loadIntervalVariable = loadIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder macAddressVariable(String macAddressVariable) {
            if (macAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "macAddressVariable");
            }
            this.macAddressVariable = macAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mediaType(String mediaType) {
            if (mediaType == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "mediaType");
            }
            this.mediaType = mediaType;
            return this;
        }
        @CustomType.Setter
        public Builder mediaTypeVariable(String mediaTypeVariable) {
            if (mediaTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "mediaTypeVariable");
            }
            this.mediaTypeVariable = mediaTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nat64(Boolean nat64) {
            if (nat64 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "nat64");
            }
            this.nat64 = nat64;
            return this;
        }
        @CustomType.Setter
        public Builder nat66(Boolean nat66) {
            if (nat66 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "nat66");
            }
            this.nat66 = nat66;
            return this;
        }
        @CustomType.Setter
        public Builder natIpv4(Boolean natIpv4) {
            if (natIpv4 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natIpv4");
            }
            this.natIpv4 = natIpv4;
            return this;
        }
        @CustomType.Setter
        public Builder natIpv4Variable(String natIpv4Variable) {
            if (natIpv4Variable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natIpv4Variable");
            }
            this.natIpv4Variable = natIpv4Variable;
            return this;
        }
        @CustomType.Setter
        public Builder natIpv6(Boolean natIpv6) {
            if (natIpv6 == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natIpv6");
            }
            this.natIpv6 = natIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder natIpv6Variable(String natIpv6Variable) {
            if (natIpv6Variable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natIpv6Variable");
            }
            this.natIpv6Variable = natIpv6Variable;
            return this;
        }
        @CustomType.Setter
        public Builder natLoopback(String natLoopback) {
            if (natLoopback == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natLoopback");
            }
            this.natLoopback = natLoopback;
            return this;
        }
        @CustomType.Setter
        public Builder natLoopbackVariable(String natLoopbackVariable) {
            if (natLoopbackVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natLoopbackVariable");
            }
            this.natLoopbackVariable = natLoopbackVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natOverload(Boolean natOverload) {
            if (natOverload == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natOverload");
            }
            this.natOverload = natOverload;
            return this;
        }
        @CustomType.Setter
        public Builder natOverloadVariable(String natOverloadVariable) {
            if (natOverloadVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natOverloadVariable");
            }
            this.natOverloadVariable = natOverloadVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natPrefixLength(Integer natPrefixLength) {
            if (natPrefixLength == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natPrefixLength");
            }
            this.natPrefixLength = natPrefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder natPrefixLengthVariable(String natPrefixLengthVariable) {
            if (natPrefixLengthVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natPrefixLengthVariable");
            }
            this.natPrefixLengthVariable = natPrefixLengthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natRangeEnd(String natRangeEnd) {
            if (natRangeEnd == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natRangeEnd");
            }
            this.natRangeEnd = natRangeEnd;
            return this;
        }
        @CustomType.Setter
        public Builder natRangeEndVariable(String natRangeEndVariable) {
            if (natRangeEndVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natRangeEndVariable");
            }
            this.natRangeEndVariable = natRangeEndVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natRangeStart(String natRangeStart) {
            if (natRangeStart == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natRangeStart");
            }
            this.natRangeStart = natRangeStart;
            return this;
        }
        @CustomType.Setter
        public Builder natRangeStartVariable(String natRangeStartVariable) {
            if (natRangeStartVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natRangeStartVariable");
            }
            this.natRangeStartVariable = natRangeStartVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natTcpTimeout(Integer natTcpTimeout) {
            if (natTcpTimeout == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natTcpTimeout");
            }
            this.natTcpTimeout = natTcpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder natTcpTimeoutVariable(String natTcpTimeoutVariable) {
            if (natTcpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natTcpTimeoutVariable");
            }
            this.natTcpTimeoutVariable = natTcpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natType(String natType) {
            if (natType == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natType");
            }
            this.natType = natType;
            return this;
        }
        @CustomType.Setter
        public Builder natTypeVariable(String natTypeVariable) {
            if (natTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natTypeVariable");
            }
            this.natTypeVariable = natTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder natUdpTimeout(Integer natUdpTimeout) {
            if (natUdpTimeout == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natUdpTimeout");
            }
            this.natUdpTimeout = natUdpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder natUdpTimeoutVariable(String natUdpTimeoutVariable) {
            if (natUdpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "natUdpTimeoutVariable");
            }
            this.natUdpTimeoutVariable = natUdpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder newStaticNats(List<GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat> newStaticNats) {
            if (newStaticNats == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "newStaticNats");
            }
            this.newStaticNats = newStaticNats;
            return this;
        }
        public Builder newStaticNats(GetTransportWanVpnInterfaceEthernetFeatureNewStaticNat... newStaticNats) {
            return newStaticNats(List.of(newStaticNats));
        }
        @CustomType.Setter
        public Builder perTunnelQos(Boolean perTunnelQos) {
            if (perTunnelQos == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "perTunnelQos");
            }
            this.perTunnelQos = perTunnelQos;
            return this;
        }
        @CustomType.Setter
        public Builder perTunnelQosVariable(String perTunnelQosVariable) {
            if (perTunnelQosVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "perTunnelQosVariable");
            }
            this.perTunnelQosVariable = perTunnelQosVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptive(Boolean qosAdaptive) {
            if (qosAdaptive == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptive");
            }
            this.qosAdaptive = qosAdaptive;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthDownstream(Boolean qosAdaptiveBandwidthDownstream) {
            if (qosAdaptiveBandwidthDownstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveBandwidthDownstream");
            }
            this.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveBandwidthUpstream(Boolean qosAdaptiveBandwidthUpstream) {
            if (qosAdaptiveBandwidthUpstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveBandwidthUpstream");
            }
            this.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveDefaultDownstream(Integer qosAdaptiveDefaultDownstream) {
            if (qosAdaptiveDefaultDownstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveDefaultDownstream");
            }
            this.qosAdaptiveDefaultDownstream = qosAdaptiveDefaultDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveDefaultDownstreamVariable(String qosAdaptiveDefaultDownstreamVariable) {
            if (qosAdaptiveDefaultDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveDefaultDownstreamVariable");
            }
            this.qosAdaptiveDefaultDownstreamVariable = qosAdaptiveDefaultDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveDefaultUpstream(Integer qosAdaptiveDefaultUpstream) {
            if (qosAdaptiveDefaultUpstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveDefaultUpstream");
            }
            this.qosAdaptiveDefaultUpstream = qosAdaptiveDefaultUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveDefaultUpstreamVariable(String qosAdaptiveDefaultUpstreamVariable) {
            if (qosAdaptiveDefaultUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveDefaultUpstreamVariable");
            }
            this.qosAdaptiveDefaultUpstreamVariable = qosAdaptiveDefaultUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxDownstream(Integer qosAdaptiveMaxDownstream) {
            if (qosAdaptiveMaxDownstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMaxDownstream");
            }
            this.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxDownstreamVariable(String qosAdaptiveMaxDownstreamVariable) {
            if (qosAdaptiveMaxDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMaxDownstreamVariable");
            }
            this.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxUpstream(Integer qosAdaptiveMaxUpstream) {
            if (qosAdaptiveMaxUpstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMaxUpstream");
            }
            this.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMaxUpstreamVariable(String qosAdaptiveMaxUpstreamVariable) {
            if (qosAdaptiveMaxUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMaxUpstreamVariable");
            }
            this.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinDownstream(Integer qosAdaptiveMinDownstream) {
            if (qosAdaptiveMinDownstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMinDownstream");
            }
            this.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinDownstreamVariable(String qosAdaptiveMinDownstreamVariable) {
            if (qosAdaptiveMinDownstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMinDownstreamVariable");
            }
            this.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinUpstream(Integer qosAdaptiveMinUpstream) {
            if (qosAdaptiveMinUpstream == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMinUpstream");
            }
            this.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptiveMinUpstreamVariable(String qosAdaptiveMinUpstreamVariable) {
            if (qosAdaptiveMinUpstreamVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptiveMinUpstreamVariable");
            }
            this.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptivePeriod(Integer qosAdaptivePeriod) {
            if (qosAdaptivePeriod == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptivePeriod");
            }
            this.qosAdaptivePeriod = qosAdaptivePeriod;
            return this;
        }
        @CustomType.Setter
        public Builder qosAdaptivePeriodVariable(String qosAdaptivePeriodVariable) {
            if (qosAdaptivePeriodVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosAdaptivePeriodVariable");
            }
            this.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            return this;
        }
        @CustomType.Setter
        public Builder qosShapingRate(Integer qosShapingRate) {
            if (qosShapingRate == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosShapingRate");
            }
            this.qosShapingRate = qosShapingRate;
            return this;
        }
        @CustomType.Setter
        public Builder qosShapingRateVariable(String qosShapingRateVariable) {
            if (qosShapingRateVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "qosShapingRateVariable");
            }
            this.qosShapingRateVariable = qosShapingRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProvider(String serviceProvider) {
            if (serviceProvider == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "serviceProvider");
            }
            this.serviceProvider = serviceProvider;
            return this;
        }
        @CustomType.Setter
        public Builder serviceProviderVariable(String serviceProviderVariable) {
            if (serviceProviderVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "serviceProviderVariable");
            }
            this.serviceProviderVariable = serviceProviderVariable;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder speed(String speed) {
            if (speed == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "speed");
            }
            this.speed = speed;
            return this;
        }
        @CustomType.Setter
        public Builder speedVariable(String speedVariable) {
            if (speedVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "speedVariable");
            }
            this.speedVariable = speedVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticNat66s(List<GetTransportWanVpnInterfaceEthernetFeatureStaticNat66> staticNat66s) {
            if (staticNat66s == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "staticNat66s");
            }
            this.staticNat66s = staticNat66s;
            return this;
        }
        public Builder staticNat66s(GetTransportWanVpnInterfaceEthernetFeatureStaticNat66... staticNat66s) {
            return staticNat66s(List.of(staticNat66s));
        }
        @CustomType.Setter
        public Builder tcpMss(Integer tcpMss) {
            if (tcpMss == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tcpMss");
            }
            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(String tcpMssVariable) {
            if (tcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tcpMssVariable");
            }
            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtension(String tlocExtension) {
            if (tlocExtension == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tlocExtension");
            }
            this.tlocExtension = tlocExtension;
            return this;
        }
        @CustomType.Setter
        public Builder tlocExtensionVariable(String tlocExtensionVariable) {
            if (tlocExtensionVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tlocExtensionVariable");
            }
            this.tlocExtensionVariable = tlocExtensionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tracker(String tracker) {
            if (tracker == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tracker");
            }
            this.tracker = tracker;
            return this;
        }
        @CustomType.Setter
        public Builder trackerVariable(String trackerVariable) {
            if (trackerVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "trackerVariable");
            }
            this.trackerVariable = trackerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder transportWanVpnFeatureId(String transportWanVpnFeatureId) {
            if (transportWanVpnFeatureId == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "transportWanVpnFeatureId");
            }
            this.transportWanVpnFeatureId = transportWanVpnFeatureId;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelBandwidthPercent(Integer tunnelBandwidthPercent) {
            if (tunnelBandwidthPercent == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelBandwidthPercent");
            }
            this.tunnelBandwidthPercent = tunnelBandwidthPercent;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelBandwidthPercentVariable(String tunnelBandwidthPercentVariable) {
            if (tunnelBandwidthPercentVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelBandwidthPercentVariable");
            }
            this.tunnelBandwidthPercentVariable = tunnelBandwidthPercentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterface(Boolean tunnelInterface) {
            if (tunnelInterface == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterface");
            }
            this.tunnelInterface = tunnelInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAll(Boolean tunnelInterfaceAllowAll) {
            if (tunnelInterfaceAllowAll == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowAll");
            }
            this.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowAllVariable(String tunnelInterfaceAllowAllVariable) {
            if (tunnelInterfaceAllowAllVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowAllVariable");
            }
            this.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBfd(Boolean tunnelInterfaceAllowBfd) {
            if (tunnelInterfaceAllowBfd == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowBfd");
            }
            this.tunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBfdVariable(String tunnelInterfaceAllowBfdVariable) {
            if (tunnelInterfaceAllowBfdVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowBfdVariable");
            }
            this.tunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgp(Boolean tunnelInterfaceAllowBgp) {
            if (tunnelInterfaceAllowBgp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowBgp");
            }
            this.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowBgpVariable(String tunnelInterfaceAllowBgpVariable) {
            if (tunnelInterfaceAllowBgpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowBgpVariable");
            }
            this.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcp(Boolean tunnelInterfaceAllowDhcp) {
            if (tunnelInterfaceAllowDhcp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowDhcp");
            }
            this.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDhcpVariable(String tunnelInterfaceAllowDhcpVariable) {
            if (tunnelInterfaceAllowDhcpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowDhcpVariable");
            }
            this.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDns(Boolean tunnelInterfaceAllowDns) {
            if (tunnelInterfaceAllowDns == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowDns");
            }
            this.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowDnsVariable(String tunnelInterfaceAllowDnsVariable) {
            if (tunnelInterfaceAllowDnsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowDnsVariable");
            }
            this.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttps(Boolean tunnelInterfaceAllowHttps) {
            if (tunnelInterfaceAllowHttps == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowHttps");
            }
            this.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowHttpsVariable(String tunnelInterfaceAllowHttpsVariable) {
            if (tunnelInterfaceAllowHttpsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowHttpsVariable");
            }
            this.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmp(Boolean tunnelInterfaceAllowIcmp) {
            if (tunnelInterfaceAllowIcmp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowIcmp");
            }
            this.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowIcmpVariable(String tunnelInterfaceAllowIcmpVariable) {
            if (tunnelInterfaceAllowIcmpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowIcmpVariable");
            }
            this.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconf(Boolean tunnelInterfaceAllowNetconf) {
            if (tunnelInterfaceAllowNetconf == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowNetconf");
            }
            this.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNetconfVariable(String tunnelInterfaceAllowNetconfVariable) {
            if (tunnelInterfaceAllowNetconfVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowNetconfVariable");
            }
            this.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtp(Boolean tunnelInterfaceAllowNtp) {
            if (tunnelInterfaceAllowNtp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowNtp");
            }
            this.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowNtpVariable(String tunnelInterfaceAllowNtpVariable) {
            if (tunnelInterfaceAllowNtpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowNtpVariable");
            }
            this.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspf(Boolean tunnelInterfaceAllowOspf) {
            if (tunnelInterfaceAllowOspf == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowOspf");
            }
            this.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowOspfVariable(String tunnelInterfaceAllowOspfVariable) {
            if (tunnelInterfaceAllowOspfVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowOspfVariable");
            }
            this.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmp(Boolean tunnelInterfaceAllowSnmp) {
            if (tunnelInterfaceAllowSnmp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowSnmp");
            }
            this.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSnmpVariable(String tunnelInterfaceAllowSnmpVariable) {
            if (tunnelInterfaceAllowSnmpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowSnmpVariable");
            }
            this.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSsh(Boolean tunnelInterfaceAllowSsh) {
            if (tunnelInterfaceAllowSsh == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowSsh");
            }
            this.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowSshVariable(String tunnelInterfaceAllowSshVariable) {
            if (tunnelInterfaceAllowSshVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowSshVariable");
            }
            this.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStun(Boolean tunnelInterfaceAllowStun) {
            if (tunnelInterfaceAllowStun == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowStun");
            }
            this.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceAllowStunVariable(String tunnelInterfaceAllowStunVariable) {
            if (tunnelInterfaceAllowStunVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceAllowStunVariable");
            }
            this.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnel(String tunnelInterfaceBindLoopbackTunnel) {
            if (tunnelInterfaceBindLoopbackTunnel == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceBindLoopbackTunnel");
            }
            this.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBindLoopbackTunnelVariable(String tunnelInterfaceBindLoopbackTunnelVariable) {
            if (tunnelInterfaceBindLoopbackTunnelVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceBindLoopbackTunnelVariable");
            }
            this.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorder(Boolean tunnelInterfaceBorder) {
            if (tunnelInterfaceBorder == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceBorder");
            }
            this.tunnelInterfaceBorder = tunnelInterfaceBorder;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceBorderVariable(String tunnelInterfaceBorderVariable) {
            if (tunnelInterfaceBorderVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceBorderVariable");
            }
            this.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrier(String tunnelInterfaceCarrier) {
            if (tunnelInterfaceCarrier == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceCarrier");
            }
            this.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCarrierVariable(String tunnelInterfaceCarrierVariable) {
            if (tunnelInterfaceCarrierVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceCarrierVariable");
            }
            this.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragment(Boolean tunnelInterfaceClearDontFragment) {
            if (tunnelInterfaceClearDontFragment == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceClearDontFragment");
            }
            this.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceClearDontFragmentVariable(String tunnelInterfaceClearDontFragmentVariable) {
            if (tunnelInterfaceClearDontFragmentVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceClearDontFragmentVariable");
            }
            this.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColor(String tunnelInterfaceColor) {
            if (tunnelInterfaceColor == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceColor");
            }
            this.tunnelInterfaceColor = tunnelInterfaceColor;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorRestrict(Boolean tunnelInterfaceColorRestrict) {
            if (tunnelInterfaceColorRestrict == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceColorRestrict");
            }
            this.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorRestrictVariable(String tunnelInterfaceColorRestrictVariable) {
            if (tunnelInterfaceColorRestrictVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceColorRestrictVariable");
            }
            this.tunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceColorVariable(String tunnelInterfaceColorVariable) {
            if (tunnelInterfaceColorVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceColorVariable");
            }
            this.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCtsSgtPropagation(Boolean tunnelInterfaceCtsSgtPropagation) {
            if (tunnelInterfaceCtsSgtPropagation == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceCtsSgtPropagation");
            }
            this.tunnelInterfaceCtsSgtPropagation = tunnelInterfaceCtsSgtPropagation;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceCtsSgtPropagationVariable(String tunnelInterfaceCtsSgtPropagationVariable) {
            if (tunnelInterfaceCtsSgtPropagationVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceCtsSgtPropagationVariable");
            }
            this.tunnelInterfaceCtsSgtPropagationVariable = tunnelInterfaceCtsSgtPropagationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceEncapsulations(List<GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation> tunnelInterfaceEncapsulations) {
            if (tunnelInterfaceEncapsulations == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceEncapsulations");
            }
            this.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            return this;
        }
        public Builder tunnelInterfaceEncapsulations(GetTransportWanVpnInterfaceEthernetFeatureTunnelInterfaceEncapsulation... tunnelInterfaceEncapsulations) {
            return tunnelInterfaceEncapsulations(List.of(tunnelInterfaceEncapsulations));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupListVariable(String tunnelInterfaceExcludeControllerGroupListVariable) {
            if (tunnelInterfaceExcludeControllerGroupListVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceExcludeControllerGroupListVariable");
            }
            this.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceExcludeControllerGroupLists(List<Integer> tunnelInterfaceExcludeControllerGroupLists) {
            if (tunnelInterfaceExcludeControllerGroupLists == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceExcludeControllerGroupLists");
            }
            this.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            return this;
        }
        public Builder tunnelInterfaceExcludeControllerGroupLists(Integer... tunnelInterfaceExcludeControllerGroupLists) {
            return tunnelInterfaceExcludeControllerGroupLists(List.of(tunnelInterfaceExcludeControllerGroupLists));
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGreTunnelDestinationIp(String tunnelInterfaceGreTunnelDestinationIp) {
            if (tunnelInterfaceGreTunnelDestinationIp == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceGreTunnelDestinationIp");
            }
            this.tunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGreTunnelDestinationIpVariable(String tunnelInterfaceGreTunnelDestinationIpVariable) {
            if (tunnelInterfaceGreTunnelDestinationIpVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceGreTunnelDestinationIpVariable");
            }
            this.tunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroups(Integer tunnelInterfaceGroups) {
            if (tunnelInterfaceGroups == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceGroups");
            }
            this.tunnelInterfaceGroups = tunnelInterfaceGroups;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceGroupsVariable(String tunnelInterfaceGroupsVariable) {
            if (tunnelInterfaceGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceGroupsVariable");
            }
            this.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloInterval(Integer tunnelInterfaceHelloInterval) {
            if (tunnelInterfaceHelloInterval == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceHelloInterval");
            }
            this.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloIntervalVariable(String tunnelInterfaceHelloIntervalVariable) {
            if (tunnelInterfaceHelloIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceHelloIntervalVariable");
            }
            this.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloTolerance(Integer tunnelInterfaceHelloTolerance) {
            if (tunnelInterfaceHelloTolerance == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceHelloTolerance");
            }
            this.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceHelloToleranceVariable(String tunnelInterfaceHelloToleranceVariable) {
            if (tunnelInterfaceHelloToleranceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceHelloToleranceVariable");
            }
            this.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuit(Boolean tunnelInterfaceLastResortCircuit) {
            if (tunnelInterfaceLastResortCircuit == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceLastResortCircuit");
            }
            this.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLastResortCircuitVariable(String tunnelInterfaceLastResortCircuitVariable) {
            if (tunnelInterfaceLastResortCircuitVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceLastResortCircuitVariable");
            }
            this.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLink(Boolean tunnelInterfaceLowBandwidthLink) {
            if (tunnelInterfaceLowBandwidthLink == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceLowBandwidthLink");
            }
            this.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceLowBandwidthLinkVariable(String tunnelInterfaceLowBandwidthLinkVariable) {
            if (tunnelInterfaceLowBandwidthLinkVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceLowBandwidthLinkVariable");
            }
            this.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnections(Integer tunnelInterfaceMaxControlConnections) {
            if (tunnelInterfaceMaxControlConnections == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceMaxControlConnections");
            }
            this.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceMaxControlConnectionsVariable(String tunnelInterfaceMaxControlConnectionsVariable) {
            if (tunnelInterfaceMaxControlConnectionsVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceMaxControlConnectionsVariable");
            }
            this.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshInterval(Integer tunnelInterfaceNatRefreshInterval) {
            if (tunnelInterfaceNatRefreshInterval == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceNatRefreshInterval");
            }
            this.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNatRefreshIntervalVariable(String tunnelInterfaceNatRefreshIntervalVariable) {
            if (tunnelInterfaceNatRefreshIntervalVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceNatRefreshIntervalVariable");
            }
            this.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNetworkBroadcast(Boolean tunnelInterfaceNetworkBroadcast) {
            if (tunnelInterfaceNetworkBroadcast == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceNetworkBroadcast");
            }
            this.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceNetworkBroadcastVariable(String tunnelInterfaceNetworkBroadcastVariable) {
            if (tunnelInterfaceNetworkBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceNetworkBroadcastVariable");
            }
            this.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHop(Boolean tunnelInterfacePortHop) {
            if (tunnelInterfacePortHop == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfacePortHop");
            }
            this.tunnelInterfacePortHop = tunnelInterfacePortHop;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfacePortHopVariable(String tunnelInterfacePortHopVariable) {
            if (tunnelInterfacePortHopVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfacePortHopVariable");
            }
            this.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMss(Integer tunnelInterfaceTunnelTcpMss) {
            if (tunnelInterfaceTunnelTcpMss == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceTunnelTcpMss");
            }
            this.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceTunnelTcpMssVariable(String tunnelInterfaceTunnelTcpMssVariable) {
            if (tunnelInterfaceTunnelTcpMssVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceTunnelTcpMssVariable");
            }
            this.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServer(Boolean tunnelInterfaceVbondAsStunServer) {
            if (tunnelInterfaceVbondAsStunServer == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceVbondAsStunServer");
            }
            this.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVbondAsStunServerVariable(String tunnelInterfaceVbondAsStunServerVariable) {
            if (tunnelInterfaceVbondAsStunServerVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceVbondAsStunServerVariable");
            }
            this.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreference(Integer tunnelInterfaceVmanageConnectionPreference) {
            if (tunnelInterfaceVmanageConnectionPreference == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceVmanageConnectionPreference");
            }
            this.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelInterfaceVmanageConnectionPreferenceVariable(String tunnelInterfaceVmanageConnectionPreferenceVariable) {
            if (tunnelInterfaceVmanageConnectionPreferenceVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelInterfaceVmanageConnectionPreferenceVariable");
            }
            this.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosMode(String tunnelQosMode) {
            if (tunnelQosMode == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelQosMode");
            }
            this.tunnelQosMode = tunnelQosMode;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelQosModeVariable(String tunnelQosModeVariable) {
            if (tunnelQosModeVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "tunnelQosModeVariable");
            }
            this.tunnelQosModeVariable = tunnelQosModeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "version");
            }
            this.version = version;
            return this;
        }
        @CustomType.Setter
        public Builder xconnect(String xconnect) {
            if (xconnect == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "xconnect");
            }
            this.xconnect = xconnect;
            return this;
        }
        @CustomType.Setter
        public Builder xconnectVariable(String xconnectVariable) {
            if (xconnectVariable == null) {
              throw new MissingRequiredPropertyException("GetTransportWanVpnInterfaceEthernetFeatureResult", "xconnectVariable");
            }
            this.xconnectVariable = xconnectVariable;
            return this;
        }
        public GetTransportWanVpnInterfaceEthernetFeatureResult build() {
            final var _resultValue = new GetTransportWanVpnInterfaceEthernetFeatureResult();
            _resultValue.aclIpv4EgressFeatureId = aclIpv4EgressFeatureId;
            _resultValue.aclIpv4IngressFeatureId = aclIpv4IngressFeatureId;
            _resultValue.aclIpv6EgressFeatureId = aclIpv6EgressFeatureId;
            _resultValue.aclIpv6IngressFeatureId = aclIpv6IngressFeatureId;
            _resultValue.arpTimeout = arpTimeout;
            _resultValue.arpTimeoutVariable = arpTimeoutVariable;
            _resultValue.arps = arps;
            _resultValue.autoDetectBandwidth = autoDetectBandwidth;
            _resultValue.autoDetectBandwidthVariable = autoDetectBandwidthVariable;
            _resultValue.autonegotiate = autonegotiate;
            _resultValue.autonegotiateVariable = autonegotiateVariable;
            _resultValue.bandwidthDownstream = bandwidthDownstream;
            _resultValue.bandwidthDownstreamVariable = bandwidthDownstreamVariable;
            _resultValue.bandwidthUpstream = bandwidthUpstream;
            _resultValue.bandwidthUpstreamVariable = bandwidthUpstreamVariable;
            _resultValue.blockNonSourceIp = blockNonSourceIp;
            _resultValue.blockNonSourceIpVariable = blockNonSourceIpVariable;
            _resultValue.description = description;
            _resultValue.duplex = duplex;
            _resultValue.duplexVariable = duplexVariable;
            _resultValue.enableDhcpv6 = enableDhcpv6;
            _resultValue.featureProfileId = featureProfileId;
            _resultValue.greTunnelSourceIp = greTunnelSourceIp;
            _resultValue.greTunnelSourceIpVariable = greTunnelSourceIpVariable;
            _resultValue.icmpRedirectDisable = icmpRedirectDisable;
            _resultValue.icmpRedirectDisableVariable = icmpRedirectDisableVariable;
            _resultValue.id = id;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.interfaceMtu = interfaceMtu;
            _resultValue.interfaceMtuVariable = interfaceMtuVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.iperfServer = iperfServer;
            _resultValue.iperfServerVariable = iperfServerVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4ConfigurationType = ipv4ConfigurationType;
            _resultValue.ipv4DhcpDistance = ipv4DhcpDistance;
            _resultValue.ipv4DhcpDistanceVariable = ipv4DhcpDistanceVariable;
            _resultValue.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            _resultValue.ipv4DhcpHelpers = ipv4DhcpHelpers;
            _resultValue.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            _resultValue.ipv4SubnetMask = ipv4SubnetMask;
            _resultValue.ipv4SubnetMaskVariable = ipv4SubnetMaskVariable;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.ipv6ConfigurationType = ipv6ConfigurationType;
            _resultValue.ipv6DhcpSecondaryAddresses = ipv6DhcpSecondaryAddresses;
            _resultValue.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            _resultValue.loadInterval = loadInterval;
            _resultValue.loadIntervalVariable = loadIntervalVariable;
            _resultValue.macAddress = macAddress;
            _resultValue.macAddressVariable = macAddressVariable;
            _resultValue.mediaType = mediaType;
            _resultValue.mediaTypeVariable = mediaTypeVariable;
            _resultValue.name = name;
            _resultValue.nat64 = nat64;
            _resultValue.nat66 = nat66;
            _resultValue.natIpv4 = natIpv4;
            _resultValue.natIpv4Variable = natIpv4Variable;
            _resultValue.natIpv6 = natIpv6;
            _resultValue.natIpv6Variable = natIpv6Variable;
            _resultValue.natLoopback = natLoopback;
            _resultValue.natLoopbackVariable = natLoopbackVariable;
            _resultValue.natOverload = natOverload;
            _resultValue.natOverloadVariable = natOverloadVariable;
            _resultValue.natPrefixLength = natPrefixLength;
            _resultValue.natPrefixLengthVariable = natPrefixLengthVariable;
            _resultValue.natRangeEnd = natRangeEnd;
            _resultValue.natRangeEndVariable = natRangeEndVariable;
            _resultValue.natRangeStart = natRangeStart;
            _resultValue.natRangeStartVariable = natRangeStartVariable;
            _resultValue.natTcpTimeout = natTcpTimeout;
            _resultValue.natTcpTimeoutVariable = natTcpTimeoutVariable;
            _resultValue.natType = natType;
            _resultValue.natTypeVariable = natTypeVariable;
            _resultValue.natUdpTimeout = natUdpTimeout;
            _resultValue.natUdpTimeoutVariable = natUdpTimeoutVariable;
            _resultValue.newStaticNats = newStaticNats;
            _resultValue.perTunnelQos = perTunnelQos;
            _resultValue.perTunnelQosVariable = perTunnelQosVariable;
            _resultValue.qosAdaptive = qosAdaptive;
            _resultValue.qosAdaptiveBandwidthDownstream = qosAdaptiveBandwidthDownstream;
            _resultValue.qosAdaptiveBandwidthUpstream = qosAdaptiveBandwidthUpstream;
            _resultValue.qosAdaptiveDefaultDownstream = qosAdaptiveDefaultDownstream;
            _resultValue.qosAdaptiveDefaultDownstreamVariable = qosAdaptiveDefaultDownstreamVariable;
            _resultValue.qosAdaptiveDefaultUpstream = qosAdaptiveDefaultUpstream;
            _resultValue.qosAdaptiveDefaultUpstreamVariable = qosAdaptiveDefaultUpstreamVariable;
            _resultValue.qosAdaptiveMaxDownstream = qosAdaptiveMaxDownstream;
            _resultValue.qosAdaptiveMaxDownstreamVariable = qosAdaptiveMaxDownstreamVariable;
            _resultValue.qosAdaptiveMaxUpstream = qosAdaptiveMaxUpstream;
            _resultValue.qosAdaptiveMaxUpstreamVariable = qosAdaptiveMaxUpstreamVariable;
            _resultValue.qosAdaptiveMinDownstream = qosAdaptiveMinDownstream;
            _resultValue.qosAdaptiveMinDownstreamVariable = qosAdaptiveMinDownstreamVariable;
            _resultValue.qosAdaptiveMinUpstream = qosAdaptiveMinUpstream;
            _resultValue.qosAdaptiveMinUpstreamVariable = qosAdaptiveMinUpstreamVariable;
            _resultValue.qosAdaptivePeriod = qosAdaptivePeriod;
            _resultValue.qosAdaptivePeriodVariable = qosAdaptivePeriodVariable;
            _resultValue.qosShapingRate = qosShapingRate;
            _resultValue.qosShapingRateVariable = qosShapingRateVariable;
            _resultValue.serviceProvider = serviceProvider;
            _resultValue.serviceProviderVariable = serviceProviderVariable;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.speed = speed;
            _resultValue.speedVariable = speedVariable;
            _resultValue.staticNat66s = staticNat66s;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.tlocExtension = tlocExtension;
            _resultValue.tlocExtensionVariable = tlocExtensionVariable;
            _resultValue.tracker = tracker;
            _resultValue.trackerVariable = trackerVariable;
            _resultValue.transportWanVpnFeatureId = transportWanVpnFeatureId;
            _resultValue.tunnelBandwidthPercent = tunnelBandwidthPercent;
            _resultValue.tunnelBandwidthPercentVariable = tunnelBandwidthPercentVariable;
            _resultValue.tunnelInterface = tunnelInterface;
            _resultValue.tunnelInterfaceAllowAll = tunnelInterfaceAllowAll;
            _resultValue.tunnelInterfaceAllowAllVariable = tunnelInterfaceAllowAllVariable;
            _resultValue.tunnelInterfaceAllowBfd = tunnelInterfaceAllowBfd;
            _resultValue.tunnelInterfaceAllowBfdVariable = tunnelInterfaceAllowBfdVariable;
            _resultValue.tunnelInterfaceAllowBgp = tunnelInterfaceAllowBgp;
            _resultValue.tunnelInterfaceAllowBgpVariable = tunnelInterfaceAllowBgpVariable;
            _resultValue.tunnelInterfaceAllowDhcp = tunnelInterfaceAllowDhcp;
            _resultValue.tunnelInterfaceAllowDhcpVariable = tunnelInterfaceAllowDhcpVariable;
            _resultValue.tunnelInterfaceAllowDns = tunnelInterfaceAllowDns;
            _resultValue.tunnelInterfaceAllowDnsVariable = tunnelInterfaceAllowDnsVariable;
            _resultValue.tunnelInterfaceAllowHttps = tunnelInterfaceAllowHttps;
            _resultValue.tunnelInterfaceAllowHttpsVariable = tunnelInterfaceAllowHttpsVariable;
            _resultValue.tunnelInterfaceAllowIcmp = tunnelInterfaceAllowIcmp;
            _resultValue.tunnelInterfaceAllowIcmpVariable = tunnelInterfaceAllowIcmpVariable;
            _resultValue.tunnelInterfaceAllowNetconf = tunnelInterfaceAllowNetconf;
            _resultValue.tunnelInterfaceAllowNetconfVariable = tunnelInterfaceAllowNetconfVariable;
            _resultValue.tunnelInterfaceAllowNtp = tunnelInterfaceAllowNtp;
            _resultValue.tunnelInterfaceAllowNtpVariable = tunnelInterfaceAllowNtpVariable;
            _resultValue.tunnelInterfaceAllowOspf = tunnelInterfaceAllowOspf;
            _resultValue.tunnelInterfaceAllowOspfVariable = tunnelInterfaceAllowOspfVariable;
            _resultValue.tunnelInterfaceAllowSnmp = tunnelInterfaceAllowSnmp;
            _resultValue.tunnelInterfaceAllowSnmpVariable = tunnelInterfaceAllowSnmpVariable;
            _resultValue.tunnelInterfaceAllowSsh = tunnelInterfaceAllowSsh;
            _resultValue.tunnelInterfaceAllowSshVariable = tunnelInterfaceAllowSshVariable;
            _resultValue.tunnelInterfaceAllowStun = tunnelInterfaceAllowStun;
            _resultValue.tunnelInterfaceAllowStunVariable = tunnelInterfaceAllowStunVariable;
            _resultValue.tunnelInterfaceBindLoopbackTunnel = tunnelInterfaceBindLoopbackTunnel;
            _resultValue.tunnelInterfaceBindLoopbackTunnelVariable = tunnelInterfaceBindLoopbackTunnelVariable;
            _resultValue.tunnelInterfaceBorder = tunnelInterfaceBorder;
            _resultValue.tunnelInterfaceBorderVariable = tunnelInterfaceBorderVariable;
            _resultValue.tunnelInterfaceCarrier = tunnelInterfaceCarrier;
            _resultValue.tunnelInterfaceCarrierVariable = tunnelInterfaceCarrierVariable;
            _resultValue.tunnelInterfaceClearDontFragment = tunnelInterfaceClearDontFragment;
            _resultValue.tunnelInterfaceClearDontFragmentVariable = tunnelInterfaceClearDontFragmentVariable;
            _resultValue.tunnelInterfaceColor = tunnelInterfaceColor;
            _resultValue.tunnelInterfaceColorRestrict = tunnelInterfaceColorRestrict;
            _resultValue.tunnelInterfaceColorRestrictVariable = tunnelInterfaceColorRestrictVariable;
            _resultValue.tunnelInterfaceColorVariable = tunnelInterfaceColorVariable;
            _resultValue.tunnelInterfaceCtsSgtPropagation = tunnelInterfaceCtsSgtPropagation;
            _resultValue.tunnelInterfaceCtsSgtPropagationVariable = tunnelInterfaceCtsSgtPropagationVariable;
            _resultValue.tunnelInterfaceEncapsulations = tunnelInterfaceEncapsulations;
            _resultValue.tunnelInterfaceExcludeControllerGroupListVariable = tunnelInterfaceExcludeControllerGroupListVariable;
            _resultValue.tunnelInterfaceExcludeControllerGroupLists = tunnelInterfaceExcludeControllerGroupLists;
            _resultValue.tunnelInterfaceGreTunnelDestinationIp = tunnelInterfaceGreTunnelDestinationIp;
            _resultValue.tunnelInterfaceGreTunnelDestinationIpVariable = tunnelInterfaceGreTunnelDestinationIpVariable;
            _resultValue.tunnelInterfaceGroups = tunnelInterfaceGroups;
            _resultValue.tunnelInterfaceGroupsVariable = tunnelInterfaceGroupsVariable;
            _resultValue.tunnelInterfaceHelloInterval = tunnelInterfaceHelloInterval;
            _resultValue.tunnelInterfaceHelloIntervalVariable = tunnelInterfaceHelloIntervalVariable;
            _resultValue.tunnelInterfaceHelloTolerance = tunnelInterfaceHelloTolerance;
            _resultValue.tunnelInterfaceHelloToleranceVariable = tunnelInterfaceHelloToleranceVariable;
            _resultValue.tunnelInterfaceLastResortCircuit = tunnelInterfaceLastResortCircuit;
            _resultValue.tunnelInterfaceLastResortCircuitVariable = tunnelInterfaceLastResortCircuitVariable;
            _resultValue.tunnelInterfaceLowBandwidthLink = tunnelInterfaceLowBandwidthLink;
            _resultValue.tunnelInterfaceLowBandwidthLinkVariable = tunnelInterfaceLowBandwidthLinkVariable;
            _resultValue.tunnelInterfaceMaxControlConnections = tunnelInterfaceMaxControlConnections;
            _resultValue.tunnelInterfaceMaxControlConnectionsVariable = tunnelInterfaceMaxControlConnectionsVariable;
            _resultValue.tunnelInterfaceNatRefreshInterval = tunnelInterfaceNatRefreshInterval;
            _resultValue.tunnelInterfaceNatRefreshIntervalVariable = tunnelInterfaceNatRefreshIntervalVariable;
            _resultValue.tunnelInterfaceNetworkBroadcast = tunnelInterfaceNetworkBroadcast;
            _resultValue.tunnelInterfaceNetworkBroadcastVariable = tunnelInterfaceNetworkBroadcastVariable;
            _resultValue.tunnelInterfacePortHop = tunnelInterfacePortHop;
            _resultValue.tunnelInterfacePortHopVariable = tunnelInterfacePortHopVariable;
            _resultValue.tunnelInterfaceTunnelTcpMss = tunnelInterfaceTunnelTcpMss;
            _resultValue.tunnelInterfaceTunnelTcpMssVariable = tunnelInterfaceTunnelTcpMssVariable;
            _resultValue.tunnelInterfaceVbondAsStunServer = tunnelInterfaceVbondAsStunServer;
            _resultValue.tunnelInterfaceVbondAsStunServerVariable = tunnelInterfaceVbondAsStunServerVariable;
            _resultValue.tunnelInterfaceVmanageConnectionPreference = tunnelInterfaceVmanageConnectionPreference;
            _resultValue.tunnelInterfaceVmanageConnectionPreferenceVariable = tunnelInterfaceVmanageConnectionPreferenceVariable;
            _resultValue.tunnelQosMode = tunnelQosMode;
            _resultValue.tunnelQosModeVariable = tunnelQosModeVariable;
            _resultValue.version = version;
            _resultValue.xconnect = xconnect;
            _resultValue.xconnectVariable = xconnectVariable;
            return _resultValue;
        }
    }
}
