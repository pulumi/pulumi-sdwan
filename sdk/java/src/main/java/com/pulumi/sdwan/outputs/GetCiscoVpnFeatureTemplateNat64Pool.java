// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCiscoVpnFeatureTemplateNat64Pool {
    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    private String endAddress;
    /**
     * @return Variable name
     * 
     */
    private String endAddressVariable;
    /**
     * @return Enable Route Leaking from Global VPN to this Service VPN
     * 
     */
    private Boolean leakFromGlobal;
    /**
     * @return Select protocol for route leaking
     * 
     */
    private String leakFromGlobalProtocol;
    /**
     * @return Enable Route Leaking from this Service VPN to Global VPN
     * 
     */
    private Boolean leakToGlobal;
    /**
     * @return NAT64 Pool name
     * 
     */
    private String name;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private Boolean optional;
    /**
     * @return NAT 64 Overload Option
     * 
     */
    private Boolean overload;
    /**
     * @return Variable name
     * 
     */
    private String overloadVariable;
    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    private String startAddress;
    /**
     * @return Variable name
     * 
     */
    private String startAddressVariable;

    private GetCiscoVpnFeatureTemplateNat64Pool() {}
    /**
     * @return Ending IP address of NAT pool range
     * 
     */
    public String endAddress() {
        return this.endAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String endAddressVariable() {
        return this.endAddressVariable;
    }
    /**
     * @return Enable Route Leaking from Global VPN to this Service VPN
     * 
     */
    public Boolean leakFromGlobal() {
        return this.leakFromGlobal;
    }
    /**
     * @return Select protocol for route leaking
     * 
     */
    public String leakFromGlobalProtocol() {
        return this.leakFromGlobalProtocol;
    }
    /**
     * @return Enable Route Leaking from this Service VPN to Global VPN
     * 
     */
    public Boolean leakToGlobal() {
        return this.leakToGlobal;
    }
    /**
     * @return NAT64 Pool name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Boolean optional() {
        return this.optional;
    }
    /**
     * @return NAT 64 Overload Option
     * 
     */
    public Boolean overload() {
        return this.overload;
    }
    /**
     * @return Variable name
     * 
     */
    public String overloadVariable() {
        return this.overloadVariable;
    }
    /**
     * @return Starting IP address of NAT pool range
     * 
     */
    public String startAddress() {
        return this.startAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String startAddressVariable() {
        return this.startAddressVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoVpnFeatureTemplateNat64Pool defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String endAddress;
        private String endAddressVariable;
        private Boolean leakFromGlobal;
        private String leakFromGlobalProtocol;
        private Boolean leakToGlobal;
        private String name;
        private Boolean optional;
        private Boolean overload;
        private String overloadVariable;
        private String startAddress;
        private String startAddressVariable;
        public Builder() {}
        public Builder(GetCiscoVpnFeatureTemplateNat64Pool defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.endAddress = defaults.endAddress;
    	      this.endAddressVariable = defaults.endAddressVariable;
    	      this.leakFromGlobal = defaults.leakFromGlobal;
    	      this.leakFromGlobalProtocol = defaults.leakFromGlobalProtocol;
    	      this.leakToGlobal = defaults.leakToGlobal;
    	      this.name = defaults.name;
    	      this.optional = defaults.optional;
    	      this.overload = defaults.overload;
    	      this.overloadVariable = defaults.overloadVariable;
    	      this.startAddress = defaults.startAddress;
    	      this.startAddressVariable = defaults.startAddressVariable;
        }

        @CustomType.Setter
        public Builder endAddress(String endAddress) {
            if (endAddress == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "endAddress");
            }
            this.endAddress = endAddress;
            return this;
        }
        @CustomType.Setter
        public Builder endAddressVariable(String endAddressVariable) {
            if (endAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "endAddressVariable");
            }
            this.endAddressVariable = endAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder leakFromGlobal(Boolean leakFromGlobal) {
            if (leakFromGlobal == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "leakFromGlobal");
            }
            this.leakFromGlobal = leakFromGlobal;
            return this;
        }
        @CustomType.Setter
        public Builder leakFromGlobalProtocol(String leakFromGlobalProtocol) {
            if (leakFromGlobalProtocol == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "leakFromGlobalProtocol");
            }
            this.leakFromGlobalProtocol = leakFromGlobalProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder leakToGlobal(Boolean leakToGlobal) {
            if (leakToGlobal == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "leakToGlobal");
            }
            this.leakToGlobal = leakToGlobal;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder optional(Boolean optional) {
            if (optional == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "optional");
            }
            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder overload(Boolean overload) {
            if (overload == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "overload");
            }
            this.overload = overload;
            return this;
        }
        @CustomType.Setter
        public Builder overloadVariable(String overloadVariable) {
            if (overloadVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "overloadVariable");
            }
            this.overloadVariable = overloadVariable;
            return this;
        }
        @CustomType.Setter
        public Builder startAddress(String startAddress) {
            if (startAddress == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "startAddress");
            }
            this.startAddress = startAddress;
            return this;
        }
        @CustomType.Setter
        public Builder startAddressVariable(String startAddressVariable) {
            if (startAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoVpnFeatureTemplateNat64Pool", "startAddressVariable");
            }
            this.startAddressVariable = startAddressVariable;
            return this;
        }
        public GetCiscoVpnFeatureTemplateNat64Pool build() {
            final var _resultValue = new GetCiscoVpnFeatureTemplateNat64Pool();
            _resultValue.endAddress = endAddress;
            _resultValue.endAddressVariable = endAddressVariable;
            _resultValue.leakFromGlobal = leakFromGlobal;
            _resultValue.leakFromGlobalProtocol = leakFromGlobalProtocol;
            _resultValue.leakToGlobal = leakToGlobal;
            _resultValue.name = name;
            _resultValue.optional = optional;
            _resultValue.overload = overload;
            _resultValue.overloadVariable = overloadVariable;
            _resultValue.startAddress = startAddress;
            _resultValue.startAddressVariable = startAddressVariable;
            return _resultValue;
        }
    }
}
