// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCedgeAaaFeatureTemplateAccountingRule;
import com.pulumi.sdwan.outputs.GetCedgeAaaFeatureTemplateAuthorizationRule;
import com.pulumi.sdwan.outputs.GetCedgeAaaFeatureTemplateRadiusClient;
import com.pulumi.sdwan.outputs.GetCedgeAaaFeatureTemplateRadiusServerGroup;
import com.pulumi.sdwan.outputs.GetCedgeAaaFeatureTemplateTacacsServerGroup;
import com.pulumi.sdwan.outputs.GetCedgeAaaFeatureTemplateUser;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCedgeAaaFeatureTemplateResult {
    /**
     * @return Configure the accounting rules
     * 
     */
    private List<GetCedgeAaaFeatureTemplateAccountingRule> accountingRules;
    /**
     * @return For configuration mode commands.
     * 
     */
    private Boolean authorizationConfigCommands;
    /**
     * @return Variable name
     * 
     */
    private String authorizationConfigCommandsVariable;
    /**
     * @return For enabling console authorization
     * 
     */
    private Boolean authorizationConsole;
    /**
     * @return Variable name
     * 
     */
    private String authorizationConsoleVariable;
    /**
     * @return Configure the Authorization Rules
     * 
     */
    private List<GetCedgeAaaFeatureTemplateAuthorizationRule> authorizationRules;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Accounting configurations parameters
     * 
     */
    private Boolean dot1xAccounting;
    /**
     * @return Variable name
     * 
     */
    private String dot1xAccountingVariable;
    /**
     * @return Authentication configurations parameters
     * 
     */
    private Boolean dot1xAuthentication;
    /**
     * @return Variable name
     * 
     */
    private String dot1xAuthenticationVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Specify a RADIUS client
     * 
     */
    private List<GetCedgeAaaFeatureTemplateRadiusClient> radiusClients;
    /**
     * @return Authentication Type
     * 
     */
    private String radiusDynamicAuthorAuthenticationType;
    /**
     * @return Variable name
     * 
     */
    private String radiusDynamicAuthorAuthenticationTypeVariable;
    /**
     * @return Domain Stripping
     * 
     */
    private String radiusDynamicAuthorDomainStripping;
    /**
     * @return Variable name
     * 
     */
    private String radiusDynamicAuthorDomainStrippingVariable;
    /**
     * @return Specify Radius Dynamic Author Port
     * 
     */
    private Integer radiusDynamicAuthorPort;
    /**
     * @return Variable name
     * 
     */
    private String radiusDynamicAuthorPortVariable;
    /**
     * @return Specify a radius dynamic author server-key
     * 
     */
    private String radiusDynamicAuthorServerKey;
    /**
     * @return Variable name
     * 
     */
    private String radiusDynamicAuthorServerKeyVariable;
    /**
     * @return Configure the Radius serverGroup
     * 
     */
    private List<GetCedgeAaaFeatureTemplateRadiusServerGroup> radiusServerGroups;
    /**
     * @return CTS Authorization List
     * 
     */
    private String radiusTrustsecCtsAuthorizationList;
    /**
     * @return Variable name
     * 
     */
    private String radiusTrustsecCtsAuthorizationListVariable;
    /**
     * @return RADIUS trustsec group
     * 
     */
    private String radiusTrustsecGroup;
    /**
     * @return ServerGroups priority order
     * 
     */
    private String serverGroupsPriorityOrder;
    /**
     * @return Configure the TACACS serverGroup
     * 
     */
    private List<GetCedgeAaaFeatureTemplateTacacsServerGroup> tacacsServerGroups;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Create local login account
     * 
     */
    private List<GetCedgeAaaFeatureTemplateUser> users;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCedgeAaaFeatureTemplateResult() {}
    /**
     * @return Configure the accounting rules
     * 
     */
    public List<GetCedgeAaaFeatureTemplateAccountingRule> accountingRules() {
        return this.accountingRules;
    }
    /**
     * @return For configuration mode commands.
     * 
     */
    public Boolean authorizationConfigCommands() {
        return this.authorizationConfigCommands;
    }
    /**
     * @return Variable name
     * 
     */
    public String authorizationConfigCommandsVariable() {
        return this.authorizationConfigCommandsVariable;
    }
    /**
     * @return For enabling console authorization
     * 
     */
    public Boolean authorizationConsole() {
        return this.authorizationConsole;
    }
    /**
     * @return Variable name
     * 
     */
    public String authorizationConsoleVariable() {
        return this.authorizationConsoleVariable;
    }
    /**
     * @return Configure the Authorization Rules
     * 
     */
    public List<GetCedgeAaaFeatureTemplateAuthorizationRule> authorizationRules() {
        return this.authorizationRules;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Accounting configurations parameters
     * 
     */
    public Boolean dot1xAccounting() {
        return this.dot1xAccounting;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xAccountingVariable() {
        return this.dot1xAccountingVariable;
    }
    /**
     * @return Authentication configurations parameters
     * 
     */
    public Boolean dot1xAuthentication() {
        return this.dot1xAuthentication;
    }
    /**
     * @return Variable name
     * 
     */
    public String dot1xAuthenticationVariable() {
        return this.dot1xAuthenticationVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specify a RADIUS client
     * 
     */
    public List<GetCedgeAaaFeatureTemplateRadiusClient> radiusClients() {
        return this.radiusClients;
    }
    /**
     * @return Authentication Type
     * 
     */
    public String radiusDynamicAuthorAuthenticationType() {
        return this.radiusDynamicAuthorAuthenticationType;
    }
    /**
     * @return Variable name
     * 
     */
    public String radiusDynamicAuthorAuthenticationTypeVariable() {
        return this.radiusDynamicAuthorAuthenticationTypeVariable;
    }
    /**
     * @return Domain Stripping
     * 
     */
    public String radiusDynamicAuthorDomainStripping() {
        return this.radiusDynamicAuthorDomainStripping;
    }
    /**
     * @return Variable name
     * 
     */
    public String radiusDynamicAuthorDomainStrippingVariable() {
        return this.radiusDynamicAuthorDomainStrippingVariable;
    }
    /**
     * @return Specify Radius Dynamic Author Port
     * 
     */
    public Integer radiusDynamicAuthorPort() {
        return this.radiusDynamicAuthorPort;
    }
    /**
     * @return Variable name
     * 
     */
    public String radiusDynamicAuthorPortVariable() {
        return this.radiusDynamicAuthorPortVariable;
    }
    /**
     * @return Specify a radius dynamic author server-key
     * 
     */
    public String radiusDynamicAuthorServerKey() {
        return this.radiusDynamicAuthorServerKey;
    }
    /**
     * @return Variable name
     * 
     */
    public String radiusDynamicAuthorServerKeyVariable() {
        return this.radiusDynamicAuthorServerKeyVariable;
    }
    /**
     * @return Configure the Radius serverGroup
     * 
     */
    public List<GetCedgeAaaFeatureTemplateRadiusServerGroup> radiusServerGroups() {
        return this.radiusServerGroups;
    }
    /**
     * @return CTS Authorization List
     * 
     */
    public String radiusTrustsecCtsAuthorizationList() {
        return this.radiusTrustsecCtsAuthorizationList;
    }
    /**
     * @return Variable name
     * 
     */
    public String radiusTrustsecCtsAuthorizationListVariable() {
        return this.radiusTrustsecCtsAuthorizationListVariable;
    }
    /**
     * @return RADIUS trustsec group
     * 
     */
    public String radiusTrustsecGroup() {
        return this.radiusTrustsecGroup;
    }
    /**
     * @return ServerGroups priority order
     * 
     */
    public String serverGroupsPriorityOrder() {
        return this.serverGroupsPriorityOrder;
    }
    /**
     * @return Configure the TACACS serverGroup
     * 
     */
    public List<GetCedgeAaaFeatureTemplateTacacsServerGroup> tacacsServerGroups() {
        return this.tacacsServerGroups;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Create local login account
     * 
     */
    public List<GetCedgeAaaFeatureTemplateUser> users() {
        return this.users;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCedgeAaaFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetCedgeAaaFeatureTemplateAccountingRule> accountingRules;
        private Boolean authorizationConfigCommands;
        private String authorizationConfigCommandsVariable;
        private Boolean authorizationConsole;
        private String authorizationConsoleVariable;
        private List<GetCedgeAaaFeatureTemplateAuthorizationRule> authorizationRules;
        private String description;
        private List<String> deviceTypes;
        private Boolean dot1xAccounting;
        private String dot1xAccountingVariable;
        private Boolean dot1xAuthentication;
        private String dot1xAuthenticationVariable;
        private String id;
        private String name;
        private List<GetCedgeAaaFeatureTemplateRadiusClient> radiusClients;
        private String radiusDynamicAuthorAuthenticationType;
        private String radiusDynamicAuthorAuthenticationTypeVariable;
        private String radiusDynamicAuthorDomainStripping;
        private String radiusDynamicAuthorDomainStrippingVariable;
        private Integer radiusDynamicAuthorPort;
        private String radiusDynamicAuthorPortVariable;
        private String radiusDynamicAuthorServerKey;
        private String radiusDynamicAuthorServerKeyVariable;
        private List<GetCedgeAaaFeatureTemplateRadiusServerGroup> radiusServerGroups;
        private String radiusTrustsecCtsAuthorizationList;
        private String radiusTrustsecCtsAuthorizationListVariable;
        private String radiusTrustsecGroup;
        private String serverGroupsPriorityOrder;
        private List<GetCedgeAaaFeatureTemplateTacacsServerGroup> tacacsServerGroups;
        private String templateType;
        private List<GetCedgeAaaFeatureTemplateUser> users;
        private Integer version;
        public Builder() {}
        public Builder(GetCedgeAaaFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountingRules = defaults.accountingRules;
    	      this.authorizationConfigCommands = defaults.authorizationConfigCommands;
    	      this.authorizationConfigCommandsVariable = defaults.authorizationConfigCommandsVariable;
    	      this.authorizationConsole = defaults.authorizationConsole;
    	      this.authorizationConsoleVariable = defaults.authorizationConsoleVariable;
    	      this.authorizationRules = defaults.authorizationRules;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.dot1xAccounting = defaults.dot1xAccounting;
    	      this.dot1xAccountingVariable = defaults.dot1xAccountingVariable;
    	      this.dot1xAuthentication = defaults.dot1xAuthentication;
    	      this.dot1xAuthenticationVariable = defaults.dot1xAuthenticationVariable;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.radiusClients = defaults.radiusClients;
    	      this.radiusDynamicAuthorAuthenticationType = defaults.radiusDynamicAuthorAuthenticationType;
    	      this.radiusDynamicAuthorAuthenticationTypeVariable = defaults.radiusDynamicAuthorAuthenticationTypeVariable;
    	      this.radiusDynamicAuthorDomainStripping = defaults.radiusDynamicAuthorDomainStripping;
    	      this.radiusDynamicAuthorDomainStrippingVariable = defaults.radiusDynamicAuthorDomainStrippingVariable;
    	      this.radiusDynamicAuthorPort = defaults.radiusDynamicAuthorPort;
    	      this.radiusDynamicAuthorPortVariable = defaults.radiusDynamicAuthorPortVariable;
    	      this.radiusDynamicAuthorServerKey = defaults.radiusDynamicAuthorServerKey;
    	      this.radiusDynamicAuthorServerKeyVariable = defaults.radiusDynamicAuthorServerKeyVariable;
    	      this.radiusServerGroups = defaults.radiusServerGroups;
    	      this.radiusTrustsecCtsAuthorizationList = defaults.radiusTrustsecCtsAuthorizationList;
    	      this.radiusTrustsecCtsAuthorizationListVariable = defaults.radiusTrustsecCtsAuthorizationListVariable;
    	      this.radiusTrustsecGroup = defaults.radiusTrustsecGroup;
    	      this.serverGroupsPriorityOrder = defaults.serverGroupsPriorityOrder;
    	      this.tacacsServerGroups = defaults.tacacsServerGroups;
    	      this.templateType = defaults.templateType;
    	      this.users = defaults.users;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder accountingRules(List<GetCedgeAaaFeatureTemplateAccountingRule> accountingRules) {
            if (accountingRules == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "accountingRules");
            }
            this.accountingRules = accountingRules;
            return this;
        }
        public Builder accountingRules(GetCedgeAaaFeatureTemplateAccountingRule... accountingRules) {
            return accountingRules(List.of(accountingRules));
        }
        @CustomType.Setter
        public Builder authorizationConfigCommands(Boolean authorizationConfigCommands) {
            if (authorizationConfigCommands == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "authorizationConfigCommands");
            }
            this.authorizationConfigCommands = authorizationConfigCommands;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationConfigCommandsVariable(String authorizationConfigCommandsVariable) {
            if (authorizationConfigCommandsVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "authorizationConfigCommandsVariable");
            }
            this.authorizationConfigCommandsVariable = authorizationConfigCommandsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationConsole(Boolean authorizationConsole) {
            if (authorizationConsole == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "authorizationConsole");
            }
            this.authorizationConsole = authorizationConsole;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationConsoleVariable(String authorizationConsoleVariable) {
            if (authorizationConsoleVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "authorizationConsoleVariable");
            }
            this.authorizationConsoleVariable = authorizationConsoleVariable;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationRules(List<GetCedgeAaaFeatureTemplateAuthorizationRule> authorizationRules) {
            if (authorizationRules == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "authorizationRules");
            }
            this.authorizationRules = authorizationRules;
            return this;
        }
        public Builder authorizationRules(GetCedgeAaaFeatureTemplateAuthorizationRule... authorizationRules) {
            return authorizationRules(List.of(authorizationRules));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder dot1xAccounting(Boolean dot1xAccounting) {
            if (dot1xAccounting == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "dot1xAccounting");
            }
            this.dot1xAccounting = dot1xAccounting;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xAccountingVariable(String dot1xAccountingVariable) {
            if (dot1xAccountingVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "dot1xAccountingVariable");
            }
            this.dot1xAccountingVariable = dot1xAccountingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xAuthentication(Boolean dot1xAuthentication) {
            if (dot1xAuthentication == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "dot1xAuthentication");
            }
            this.dot1xAuthentication = dot1xAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder dot1xAuthenticationVariable(String dot1xAuthenticationVariable) {
            if (dot1xAuthenticationVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "dot1xAuthenticationVariable");
            }
            this.dot1xAuthenticationVariable = dot1xAuthenticationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder radiusClients(List<GetCedgeAaaFeatureTemplateRadiusClient> radiusClients) {
            if (radiusClients == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusClients");
            }
            this.radiusClients = radiusClients;
            return this;
        }
        public Builder radiusClients(GetCedgeAaaFeatureTemplateRadiusClient... radiusClients) {
            return radiusClients(List.of(radiusClients));
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorAuthenticationType(String radiusDynamicAuthorAuthenticationType) {
            if (radiusDynamicAuthorAuthenticationType == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorAuthenticationType");
            }
            this.radiusDynamicAuthorAuthenticationType = radiusDynamicAuthorAuthenticationType;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorAuthenticationTypeVariable(String radiusDynamicAuthorAuthenticationTypeVariable) {
            if (radiusDynamicAuthorAuthenticationTypeVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorAuthenticationTypeVariable");
            }
            this.radiusDynamicAuthorAuthenticationTypeVariable = radiusDynamicAuthorAuthenticationTypeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorDomainStripping(String radiusDynamicAuthorDomainStripping) {
            if (radiusDynamicAuthorDomainStripping == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorDomainStripping");
            }
            this.radiusDynamicAuthorDomainStripping = radiusDynamicAuthorDomainStripping;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorDomainStrippingVariable(String radiusDynamicAuthorDomainStrippingVariable) {
            if (radiusDynamicAuthorDomainStrippingVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorDomainStrippingVariable");
            }
            this.radiusDynamicAuthorDomainStrippingVariable = radiusDynamicAuthorDomainStrippingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorPort(Integer radiusDynamicAuthorPort) {
            if (radiusDynamicAuthorPort == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorPort");
            }
            this.radiusDynamicAuthorPort = radiusDynamicAuthorPort;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorPortVariable(String radiusDynamicAuthorPortVariable) {
            if (radiusDynamicAuthorPortVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorPortVariable");
            }
            this.radiusDynamicAuthorPortVariable = radiusDynamicAuthorPortVariable;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorServerKey(String radiusDynamicAuthorServerKey) {
            if (radiusDynamicAuthorServerKey == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorServerKey");
            }
            this.radiusDynamicAuthorServerKey = radiusDynamicAuthorServerKey;
            return this;
        }
        @CustomType.Setter
        public Builder radiusDynamicAuthorServerKeyVariable(String radiusDynamicAuthorServerKeyVariable) {
            if (radiusDynamicAuthorServerKeyVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusDynamicAuthorServerKeyVariable");
            }
            this.radiusDynamicAuthorServerKeyVariable = radiusDynamicAuthorServerKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder radiusServerGroups(List<GetCedgeAaaFeatureTemplateRadiusServerGroup> radiusServerGroups) {
            if (radiusServerGroups == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusServerGroups");
            }
            this.radiusServerGroups = radiusServerGroups;
            return this;
        }
        public Builder radiusServerGroups(GetCedgeAaaFeatureTemplateRadiusServerGroup... radiusServerGroups) {
            return radiusServerGroups(List.of(radiusServerGroups));
        }
        @CustomType.Setter
        public Builder radiusTrustsecCtsAuthorizationList(String radiusTrustsecCtsAuthorizationList) {
            if (radiusTrustsecCtsAuthorizationList == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusTrustsecCtsAuthorizationList");
            }
            this.radiusTrustsecCtsAuthorizationList = radiusTrustsecCtsAuthorizationList;
            return this;
        }
        @CustomType.Setter
        public Builder radiusTrustsecCtsAuthorizationListVariable(String radiusTrustsecCtsAuthorizationListVariable) {
            if (radiusTrustsecCtsAuthorizationListVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusTrustsecCtsAuthorizationListVariable");
            }
            this.radiusTrustsecCtsAuthorizationListVariable = radiusTrustsecCtsAuthorizationListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder radiusTrustsecGroup(String radiusTrustsecGroup) {
            if (radiusTrustsecGroup == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "radiusTrustsecGroup");
            }
            this.radiusTrustsecGroup = radiusTrustsecGroup;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupsPriorityOrder(String serverGroupsPriorityOrder) {
            if (serverGroupsPriorityOrder == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "serverGroupsPriorityOrder");
            }
            this.serverGroupsPriorityOrder = serverGroupsPriorityOrder;
            return this;
        }
        @CustomType.Setter
        public Builder tacacsServerGroups(List<GetCedgeAaaFeatureTemplateTacacsServerGroup> tacacsServerGroups) {
            if (tacacsServerGroups == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "tacacsServerGroups");
            }
            this.tacacsServerGroups = tacacsServerGroups;
            return this;
        }
        public Builder tacacsServerGroups(GetCedgeAaaFeatureTemplateTacacsServerGroup... tacacsServerGroups) {
            return tacacsServerGroups(List.of(tacacsServerGroups));
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder users(List<GetCedgeAaaFeatureTemplateUser> users) {
            if (users == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "users");
            }
            this.users = users;
            return this;
        }
        public Builder users(GetCedgeAaaFeatureTemplateUser... users) {
            return users(List.of(users));
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCedgeAaaFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCedgeAaaFeatureTemplateResult build() {
            final var _resultValue = new GetCedgeAaaFeatureTemplateResult();
            _resultValue.accountingRules = accountingRules;
            _resultValue.authorizationConfigCommands = authorizationConfigCommands;
            _resultValue.authorizationConfigCommandsVariable = authorizationConfigCommandsVariable;
            _resultValue.authorizationConsole = authorizationConsole;
            _resultValue.authorizationConsoleVariable = authorizationConsoleVariable;
            _resultValue.authorizationRules = authorizationRules;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.dot1xAccounting = dot1xAccounting;
            _resultValue.dot1xAccountingVariable = dot1xAccountingVariable;
            _resultValue.dot1xAuthentication = dot1xAuthentication;
            _resultValue.dot1xAuthenticationVariable = dot1xAuthenticationVariable;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.radiusClients = radiusClients;
            _resultValue.radiusDynamicAuthorAuthenticationType = radiusDynamicAuthorAuthenticationType;
            _resultValue.radiusDynamicAuthorAuthenticationTypeVariable = radiusDynamicAuthorAuthenticationTypeVariable;
            _resultValue.radiusDynamicAuthorDomainStripping = radiusDynamicAuthorDomainStripping;
            _resultValue.radiusDynamicAuthorDomainStrippingVariable = radiusDynamicAuthorDomainStrippingVariable;
            _resultValue.radiusDynamicAuthorPort = radiusDynamicAuthorPort;
            _resultValue.radiusDynamicAuthorPortVariable = radiusDynamicAuthorPortVariable;
            _resultValue.radiusDynamicAuthorServerKey = radiusDynamicAuthorServerKey;
            _resultValue.radiusDynamicAuthorServerKeyVariable = radiusDynamicAuthorServerKeyVariable;
            _resultValue.radiusServerGroups = radiusServerGroups;
            _resultValue.radiusTrustsecCtsAuthorizationList = radiusTrustsecCtsAuthorizationList;
            _resultValue.radiusTrustsecCtsAuthorizationListVariable = radiusTrustsecCtsAuthorizationListVariable;
            _resultValue.radiusTrustsecGroup = radiusTrustsecGroup;
            _resultValue.serverGroupsPriorityOrder = serverGroupsPriorityOrder;
            _resultValue.tacacsServerGroups = tacacsServerGroups;
            _resultValue.templateType = templateType;
            _resultValue.users = users;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
