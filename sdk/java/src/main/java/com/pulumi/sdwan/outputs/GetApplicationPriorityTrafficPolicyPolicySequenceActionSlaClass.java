// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass {
    private Boolean fallbackToBestPath;
    private String preferredColorGroupListId;
    private List<String> preferredColors;
    private List<String> preferredRemoteColors;
    private Boolean remoteColorRestrict;
    private String slaClassListId;
    private Boolean strict;

    private GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass() {}
    public Boolean fallbackToBestPath() {
        return this.fallbackToBestPath;
    }
    public String preferredColorGroupListId() {
        return this.preferredColorGroupListId;
    }
    public List<String> preferredColors() {
        return this.preferredColors;
    }
    public List<String> preferredRemoteColors() {
        return this.preferredRemoteColors;
    }
    public Boolean remoteColorRestrict() {
        return this.remoteColorRestrict;
    }
    public String slaClassListId() {
        return this.slaClassListId;
    }
    public Boolean strict() {
        return this.strict;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean fallbackToBestPath;
        private String preferredColorGroupListId;
        private List<String> preferredColors;
        private List<String> preferredRemoteColors;
        private Boolean remoteColorRestrict;
        private String slaClassListId;
        private Boolean strict;
        public Builder() {}
        public Builder(GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.fallbackToBestPath = defaults.fallbackToBestPath;
    	      this.preferredColorGroupListId = defaults.preferredColorGroupListId;
    	      this.preferredColors = defaults.preferredColors;
    	      this.preferredRemoteColors = defaults.preferredRemoteColors;
    	      this.remoteColorRestrict = defaults.remoteColorRestrict;
    	      this.slaClassListId = defaults.slaClassListId;
    	      this.strict = defaults.strict;
        }

        @CustomType.Setter
        public Builder fallbackToBestPath(Boolean fallbackToBestPath) {
            if (fallbackToBestPath == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "fallbackToBestPath");
            }
            this.fallbackToBestPath = fallbackToBestPath;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColorGroupListId(String preferredColorGroupListId) {
            if (preferredColorGroupListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "preferredColorGroupListId");
            }
            this.preferredColorGroupListId = preferredColorGroupListId;
            return this;
        }
        @CustomType.Setter
        public Builder preferredColors(List<String> preferredColors) {
            if (preferredColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "preferredColors");
            }
            this.preferredColors = preferredColors;
            return this;
        }
        public Builder preferredColors(String... preferredColors) {
            return preferredColors(List.of(preferredColors));
        }
        @CustomType.Setter
        public Builder preferredRemoteColors(List<String> preferredRemoteColors) {
            if (preferredRemoteColors == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "preferredRemoteColors");
            }
            this.preferredRemoteColors = preferredRemoteColors;
            return this;
        }
        public Builder preferredRemoteColors(String... preferredRemoteColors) {
            return preferredRemoteColors(List.of(preferredRemoteColors));
        }
        @CustomType.Setter
        public Builder remoteColorRestrict(Boolean remoteColorRestrict) {
            if (remoteColorRestrict == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "remoteColorRestrict");
            }
            this.remoteColorRestrict = remoteColorRestrict;
            return this;
        }
        @CustomType.Setter
        public Builder slaClassListId(String slaClassListId) {
            if (slaClassListId == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "slaClassListId");
            }
            this.slaClassListId = slaClassListId;
            return this;
        }
        @CustomType.Setter
        public Builder strict(Boolean strict) {
            if (strict == null) {
              throw new MissingRequiredPropertyException("GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass", "strict");
            }
            this.strict = strict;
            return this;
        }
        public GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass build() {
            final var _resultValue = new GetApplicationPriorityTrafficPolicyPolicySequenceActionSlaClass();
            _resultValue.fallbackToBestPath = fallbackToBestPath;
            _resultValue.preferredColorGroupListId = preferredColorGroupListId;
            _resultValue.preferredColors = preferredColors;
            _resultValue.preferredRemoteColors = preferredRemoteColors;
            _resultValue.remoteColorRestrict = remoteColorRestrict;
            _resultValue.slaClassListId = slaClassListId;
            _resultValue.strict = strict;
            return _resultValue;
        }
    }
}
