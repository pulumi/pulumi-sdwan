// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.sdwan.CiscoSystemFeatureTemplateArgs;
import com.pulumi.sdwan.Utilities;
import com.pulumi.sdwan.inputs.CiscoSystemFeatureTemplateState;
import com.pulumi.sdwan.outputs.CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber;
import com.pulumi.sdwan.outputs.CiscoSystemFeatureTemplateObjectTracker;
import com.pulumi.sdwan.outputs.CiscoSystemFeatureTemplateTracker;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage a Cisco System feature template.
 *   - Minimum SD-WAN Manager version: `15.0.0`
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * The `pulumi import` command can be used, for example:
 * 
 * ```sh
 * $ pulumi import sdwan:index/ciscoSystemFeatureTemplate:CiscoSystemFeatureTemplate example &#34;f6b2c44c-693c-4763-b010-895aa3d236bd&#34;
 * ```
 * 
 */
@ResourceType(type="sdwan:index/ciscoSystemFeatureTemplate:CiscoSystemFeatureTemplate")
public class CiscoSystemFeatureTemplate extends com.pulumi.resources.CustomResource {
    /**
     * Collect admin-tech before reboot due to daemon failure - Default value: `true`
     * 
     */
    @Export(name="adminTechOnFailure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> adminTechOnFailure;

    /**
     * @return Collect admin-tech before reboot due to daemon failure - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> adminTechOnFailure() {
        return Codegen.optional(this.adminTechOnFailure);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="adminTechOnFailureVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> adminTechOnFailureVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> adminTechOnFailureVariable() {
        return Codegen.optional(this.adminTechOnFailureVariable);
    }
    /**
     * Set the affinity group number for router - Range: `1`-`255`
     * 
     */
    @Export(name="affinityGroupNumber", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> affinityGroupNumber;

    /**
     * @return Set the affinity group number for router - Range: `1`-`255`
     * 
     */
    public Output<Optional<Integer>> affinityGroupNumber() {
        return Codegen.optional(this.affinityGroupNumber);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="affinityGroupNumberVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> affinityGroupNumberVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> affinityGroupNumberVariable() {
        return Codegen.optional(this.affinityGroupNumberVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="affinityGroupPreferenceVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> affinityGroupPreferenceVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> affinityGroupPreferenceVariable() {
        return Codegen.optional(this.affinityGroupPreferenceVariable);
    }
    /**
     * Set the affinity group preference
     * 
     */
    @Export(name="affinityGroupPreferences", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> affinityGroupPreferences;

    /**
     * @return Set the affinity group preference
     * 
     */
    public Output<Optional<List<Integer>>> affinityGroupPreferences() {
        return Codegen.optional(this.affinityGroupPreferences);
    }
    /**
     * Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
     * value: `9600`
     * 
     */
    @Export(name="consoleBaudRate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consoleBaudRate;

    /**
     * @return Set the console baud rate - Choices: `1200`, `2400`, `4800`, `9600`, `19200`, `38400`, `57600`, `115200` - Default
     * value: `9600`
     * 
     */
    public Output<Optional<String>> consoleBaudRate() {
        return Codegen.optional(this.consoleBaudRate);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="consoleBaudRateVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consoleBaudRateVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> consoleBaudRateVariable() {
        return Codegen.optional(this.consoleBaudRateVariable);
    }
    /**
     * Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
     * 
     */
    @Export(name="controlSessionPps", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> controlSessionPps;

    /**
     * @return Set the policer rate for control sessions - Range: `1`-`65535` - Default value: `300`
     * 
     */
    public Output<Optional<Integer>> controlSessionPps() {
        return Codegen.optional(this.controlSessionPps);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="controlSessionPpsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> controlSessionPpsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> controlSessionPpsVariable() {
        return Codegen.optional(this.controlSessionPpsVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="controllerGroupListVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> controllerGroupListVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> controllerGroupListVariable() {
        return Codegen.optional(this.controllerGroupListVariable);
    }
    /**
     * Configure a list of comma-separated device groups
     * 
     */
    @Export(name="controllerGroupLists", refs={List.class,Integer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Integer>> controllerGroupLists;

    /**
     * @return Configure a list of comma-separated device groups
     * 
     */
    public Output<Optional<List<Integer>>> controllerGroupLists() {
        return Codegen.optional(this.controllerGroupLists);
    }
    /**
     * The description of the feature template
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * Device groups (Use comma(,) for multiple groups)
     * 
     */
    @Export(name="deviceGroups", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> deviceGroups;

    /**
     * @return Device groups (Use comma(,) for multiple groups)
     * 
     */
    public Output<Optional<List<String>>> deviceGroups() {
        return Codegen.optional(this.deviceGroups);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="deviceGroupsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deviceGroupsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> deviceGroupsVariable() {
        return Codegen.optional(this.deviceGroupsVariable);
    }
    /**
     * List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Export(name="deviceTypes", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`,
     * `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`,
     * `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * Enable migration mode to Multi-Region Fabric - Choices: `enabled`, `enabled-from-bgp-core`
     * 
     */
    @Export(name="enableMrfMigration", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enableMrfMigration;

    /**
     * @return Enable migration mode to Multi-Region Fabric - Choices: `enabled`, `enabled-from-bgp-core`
     * 
     */
    public Output<Optional<String>> enableMrfMigration() {
        return Codegen.optional(this.enableMrfMigration);
    }
    /**
     * Enhanced App Aware Routing - Choices: `disabled`, `aggressive`, `moderate`, `conservative` - Default value: `disabled`
     * 
     */
    @Export(name="enhancedAppAwareRouting", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enhancedAppAwareRouting;

    /**
     * @return Enhanced App Aware Routing - Choices: `disabled`, `aggressive`, `moderate`, `conservative` - Default value: `disabled`
     * 
     */
    public Output<Optional<String>> enhancedAppAwareRouting() {
        return Codegen.optional(this.enhancedAppAwareRouting);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="enhancedAppAwareRoutingVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enhancedAppAwareRoutingVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> enhancedAppAwareRoutingVariable() {
        return Codegen.optional(this.enhancedAppAwareRoutingVariable);
    }
    /**
     * Enable Geo fencing - Default value: `false`
     * 
     */
    @Export(name="geoFencing", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> geoFencing;

    /**
     * @return Enable Geo fencing - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> geoFencing() {
        return Codegen.optional(this.geoFencing);
    }
    /**
     * Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
     * 
     */
    @Export(name="geoFencingRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> geoFencingRange;

    /**
     * @return Set the device’s geo fencing range - Range: `100`-`10000` - Default value: `100`
     * 
     */
    public Output<Optional<Integer>> geoFencingRange() {
        return Codegen.optional(this.geoFencingRange);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="geoFencingRangeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> geoFencingRangeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> geoFencingRangeVariable() {
        return Codegen.optional(this.geoFencingRangeVariable);
    }
    /**
     * Enable Geo fencing - Default value: `false`
     * 
     */
    @Export(name="geoFencingSms", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> geoFencingSms;

    /**
     * @return Enable Geo fencing - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> geoFencingSms() {
        return Codegen.optional(this.geoFencingSms);
    }
    /**
     * Set device’s geo fencing SMS phone number
     * 
     */
    @Export(name="geoFencingSmsPhoneNumbers", refs={List.class,CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber>> geoFencingSmsPhoneNumbers;

    /**
     * @return Set device’s geo fencing SMS phone number
     * 
     */
    public Output<Optional<List<CiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber>>> geoFencingSmsPhoneNumbers() {
        return Codegen.optional(this.geoFencingSmsPhoneNumbers);
    }
    /**
     * Set the hostname
     * 
     */
    @Export(name="hostname", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostname;

    /**
     * @return Set the hostname
     * 
     */
    public Output<Optional<String>> hostname() {
        return Codegen.optional(this.hostname);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="hostnameVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> hostnameVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> hostnameVariable() {
        return Codegen.optional(this.hostnameVariable);
    }
    /**
     * Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    @Export(name="idleTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> idleTimeout;

    /**
     * @return Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    public Output<Optional<Integer>> idleTimeout() {
        return Codegen.optional(this.idleTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="idleTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> idleTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> idleTimeoutVariable() {
        return Codegen.optional(this.idleTimeoutVariable);
    }
    /**
     * Set the device’s physical latitude - Range: `-90`-`90`
     * 
     */
    @Export(name="latitude", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> latitude;

    /**
     * @return Set the device’s physical latitude - Range: `-90`-`90`
     * 
     */
    public Output<Optional<Double>> latitude() {
        return Codegen.optional(this.latitude);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="latitudeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> latitudeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> latitudeVariable() {
        return Codegen.optional(this.latitudeVariable);
    }
    /**
     * Set the location of the device
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return Set the location of the device
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="locationVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> locationVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> locationVariable() {
        return Codegen.optional(this.locationVariable);
    }
    /**
     * Set the device’s physical longitude - Range: `-180`-`180`
     * 
     */
    @Export(name="longitude", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> longitude;

    /**
     * @return Set the device’s physical longitude - Range: `-180`-`180`
     * 
     */
    public Output<Optional<Double>> longitude() {
        return Codegen.optional(this.longitude);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="longitudeVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> longitudeVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> longitudeVariable() {
        return Codegen.optional(this.longitudeVariable);
    }
    /**
     * Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
     * 
     */
    @Export(name="maxOmpSessions", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> maxOmpSessions;

    /**
     * @return Set the maximum number of OMP sessions &lt;1..100&gt; the device can have - Range: `1`-`100`
     * 
     */
    public Output<Optional<Integer>> maxOmpSessions() {
        return Codegen.optional(this.maxOmpSessions);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="maxOmpSessionsVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maxOmpSessionsVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> maxOmpSessionsVariable() {
        return Codegen.optional(this.maxOmpSessionsVariable);
    }
    /**
     * Set BGP community during migration from BGP-core based network - Range: `1`-`4294967295`
     * 
     */
    @Export(name="migrationBgpCommunity", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> migrationBgpCommunity;

    /**
     * @return Set BGP community during migration from BGP-core based network - Range: `1`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> migrationBgpCommunity() {
        return Codegen.optional(this.migrationBgpCommunity);
    }
    /**
     * Device is multi-tenant - Default value: `false`
     * 
     */
    @Export(name="multiTenant", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> multiTenant;

    /**
     * @return Device is multi-tenant - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> multiTenant() {
        return Codegen.optional(this.multiTenant);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="multiTenantVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> multiTenantVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> multiTenantVariable() {
        return Codegen.optional(this.multiTenantVariable);
    }
    /**
     * The name of the feature template
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Object Track configuration
     * 
     */
    @Export(name="objectTrackers", refs={List.class,CiscoSystemFeatureTemplateObjectTracker.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CiscoSystemFeatureTemplateObjectTracker>> objectTrackers;

    /**
     * @return Object Track configuration
     * 
     */
    public Output<Optional<List<CiscoSystemFeatureTemplateObjectTracker>>> objectTrackers() {
        return Codegen.optional(this.objectTrackers);
    }
    /**
     * Enable or disable On-demand Tunnel - Default value: `false`
     * 
     */
    @Export(name="onDemandTunnel", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> onDemandTunnel;

    /**
     * @return Enable or disable On-demand Tunnel - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> onDemandTunnel() {
        return Codegen.optional(this.onDemandTunnel);
    }
    /**
     * Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    @Export(name="onDemandTunnelIdleTimeout", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> onDemandTunnelIdleTimeout;

    /**
     * @return Idle CLI timeout in minutes - Range: `0`-`300`
     * 
     */
    public Output<Optional<Integer>> onDemandTunnelIdleTimeout() {
        return Codegen.optional(this.onDemandTunnelIdleTimeout);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="onDemandTunnelIdleTimeoutVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onDemandTunnelIdleTimeoutVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> onDemandTunnelIdleTimeoutVariable() {
        return Codegen.optional(this.onDemandTunnelIdleTimeoutVariable);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="onDemandTunnelVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> onDemandTunnelVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> onDemandTunnelVariable() {
        return Codegen.optional(this.onDemandTunnelVariable);
    }
    /**
     * Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
     * 
     */
    @Export(name="overlayId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> overlayId;

    /**
     * @return Set the Overlay ID - Range: `1`-`4294967295` - Default value: `1`
     * 
     */
    public Output<Optional<Integer>> overlayId() {
        return Codegen.optional(this.overlayId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="overlayIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> overlayIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> overlayIdVariable() {
        return Codegen.optional(this.overlayIdVariable);
    }
    /**
     * Enable port hopping - Default value: `true`
     * 
     */
    @Export(name="portHopping", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> portHopping;

    /**
     * @return Enable port hopping - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> portHopping() {
        return Codegen.optional(this.portHopping);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="portHoppingVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> portHoppingVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> portHoppingVariable() {
        return Codegen.optional(this.portHoppingVariable);
    }
    /**
     * Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
     * 
     */
    @Export(name="portOffset", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> portOffset;

    /**
     * @return Set the TLOC port offset when multiple devices are behind a NAT - Range: `0`-`19` - Default value: `0`
     * 
     */
    public Output<Optional<Integer>> portOffset() {
        return Codegen.optional(this.portOffset);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="portOffsetVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> portOffsetVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> portOffsetVariable() {
        return Codegen.optional(this.portOffsetVariable);
    }
    /**
     * Set region ID - Range: `1`-`63`
     * 
     */
    @Export(name="regionId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> regionId;

    /**
     * @return Set region ID - Range: `1`-`63`
     * 
     */
    public Output<Optional<Integer>> regionId() {
        return Codegen.optional(this.regionId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="regionIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> regionIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> regionIdVariable() {
        return Codegen.optional(this.regionIdVariable);
    }
    /**
     * Set the role for router - Choices: `edge-router`, `border-router`
     * 
     */
    @Export(name="role", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> role;

    /**
     * @return Set the role for router - Choices: `edge-router`, `border-router`
     * 
     */
    public Output<Optional<String>> role() {
        return Codegen.optional(this.role);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="roleVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> roleVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> roleVariable() {
        return Codegen.optional(this.roleVariable);
    }
    /**
     * Set secondary region ID - Range: `1`-`63`
     * 
     */
    @Export(name="secondaryRegionId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> secondaryRegionId;

    /**
     * @return Set secondary region ID - Range: `1`-`63`
     * 
     */
    public Output<Optional<Integer>> secondaryRegionId() {
        return Codegen.optional(this.secondaryRegionId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="secondaryRegionIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> secondaryRegionIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> secondaryRegionIdVariable() {
        return Codegen.optional(this.secondaryRegionIdVariable);
    }
    /**
     * Set the site identifier - Range: `1`-`4294967295`
     * 
     */
    @Export(name="siteId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> siteId;

    /**
     * @return Set the site identifier - Range: `1`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> siteId() {
        return Codegen.optional(this.siteId);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="siteIdVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> siteIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> siteIdVariable() {
        return Codegen.optional(this.siteIdVariable);
    }
    /**
     * Set a text description of the device
     * 
     */
    @Export(name="systemDescription", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> systemDescription;

    /**
     * @return Set a text description of the device
     * 
     */
    public Output<Optional<String>> systemDescription() {
        return Codegen.optional(this.systemDescription);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="systemDescriptionVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> systemDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> systemDescriptionVariable() {
        return Codegen.optional(this.systemDescriptionVariable);
    }
    /**
     * Set the system IP address
     * 
     */
    @Export(name="systemIp", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> systemIp;

    /**
     * @return Set the system IP address
     * 
     */
    public Output<Optional<String>> systemIp() {
        return Codegen.optional(this.systemIp);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="systemIpVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> systemIpVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> systemIpVariable() {
        return Codegen.optional(this.systemIpVariable);
    }
    /**
     * The template type
     * 
     */
    @Export(name="templateType", refs={String.class}, tree="[0]")
    private Output<String> templateType;

    /**
     * @return The template type
     * 
     */
    public Output<String> templateType() {
        return this.templateType;
    }
    /**
     * Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
     * `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
     * `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
     * `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
     * `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
     * `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
     * `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
     * `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
     * `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
     * `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
     * `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
     * `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
     * `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
     * `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
     * `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
     * `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
     * `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
     * `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
     * `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
     * `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
     * `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
     * `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
     * `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
     * `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
     * `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
     * `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
     * `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
     * `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
     * `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
     * `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
     * `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
     * `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
     * `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
     * `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
     * `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
     * `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
     * `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
     * `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
     * `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
     * `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
     * `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
     * `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
     * `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
     * `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
     * `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
     * `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
     * `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
     * `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
     * `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
     * `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
     * `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
     * `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
     * `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
     * `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
     * `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
     * `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
     * `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
     * `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
     * `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
     * `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
     * `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
     * `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
     * `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
     * `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
     * `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
     * `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
     * `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
     * `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
     * `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
     * `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
     * `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
     * `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
     * `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
     * `Africa/Harare`, `UTC` - Default value: `UTC`
     * 
     */
    @Export(name="timezone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezone;

    /**
     * @return Set the timezone - Choices: `Europe/Andorra`, `Asia/Dubai`, `Asia/Kabul`, `America/Antigua`, `America/Anguilla`,
     * `Europe/Tirane`, `Asia/Yerevan`, `Africa/Luanda`, `Antarctica/McMurdo`, `Antarctica/Rothera`, `Antarctica/Palmer`,
     * `Antarctica/Mawson`, `Antarctica/Davis`, `Antarctica/Casey`, `Antarctica/Vostok`, `Antarctica/DumontDUrville`,
     * `Antarctica/Syowa`, `America/Argentina/Buenos_Aires`, `America/Argentina/Cordoba`, `America/Argentina/Salta`,
     * `America/Argentina/Jujuy`, `America/Argentina/Tucuman`, `America/Argentina/Catamarca`, `America/Argentina/La_Rioja`,
     * `America/Argentina/San_Juan`, `America/Argentina/Mendoza`, `America/Argentina/San_Luis`,
     * `America/Argentina/Rio_Gallegos`, `America/Argentina/Ushuaia`, `Pacific/Pago_Pago`, `Europe/Vienna`,
     * `Australia/Lord_Howe`, `Antarctica/Macquarie`, `Australia/Hobart`, `Australia/Currie`, `Australia/Melbourne`,
     * `Australia/Sydney`, `Australia/Broken_Hill`, `Australia/Brisbane`, `Australia/Lindeman`, `Australia/Adelaide`,
     * `Australia/Darwin`, `Australia/Perth`, `Australia/Eucla`, `America/Aruba`, `Europe/Mariehamn`, `Asia/Baku`,
     * `Europe/Sarajevo`, `America/Barbados`, `Asia/Dhaka`, `Europe/Brussels`, `Africa/Ouagadougou`, `Europe/Sofia`,
     * `Asia/Bahrain`, `Africa/Bujumbura`, `Africa/Porto-Novo`, `America/St_Barthelemy`, `Atlantic/Bermuda`, `Asia/Brunei`,
     * `America/La_Paz`, `America/Kralendijk`, `America/Noronha`, `America/Belem`, `America/Fortaleza`, `America/Recife`,
     * `America/Araguaina`, `America/Maceio`, `America/Bahia`, `America/Sao_Paulo`, `America/Campo_Grande`, `America/Cuiaba`,
     * `America/Santarem`, `America/Porto_Velho`, `America/Boa_Vista`, `America/Manaus`, `America/Eirunepe`,
     * `America/Rio_Branco`, `America/Nassau`, `Asia/Thimphu`, `Africa/Gaborone`, `Europe/Minsk`, `America/Belize`,
     * `America/St_Johns`, `America/Halifax`, `America/Glace_Bay`, `America/Moncton`, `America/Goose_Bay`,
     * `America/Blanc-Sablon`, `America/Toronto`, `America/Nipigon`, `America/Thunder_Bay`, `America/Iqaluit`,
     * `America/Pangnirtung`, `America/Resolute`, `America/Atikokan`, `America/Rankin_Inlet`, `America/Winnipeg`,
     * `America/Rainy_River`, `America/Regina`, `America/Swift_Current`, `America/Edmonton`, `America/Cambridge_Bay`,
     * `America/Yellowknife`, `America/Inuvik`, `America/Creston`, `America/Dawson_Creek`, `America/Vancouver`,
     * `America/Whitehorse`, `America/Dawson`, `Indian/Cocos`, `Africa/Kinshasa`, `Africa/Lubumbashi`, `Africa/Bangui`,
     * `Africa/Brazzaville`, `Europe/Zurich`, `Africa/Abidjan`, `Pacific/Rarotonga`, `America/Santiago`, `Pacific/Easter`,
     * `Africa/Douala`, `Asia/Shanghai`, `Asia/Harbin`, `Asia/Chongqing`, `Asia/Urumqi`, `Asia/Kashgar`, `America/Bogota`,
     * `America/Costa_Rica`, `America/Havana`, `Atlantic/Cape_Verde`, `America/Curacao`, `Indian/Christmas`, `Asia/Nicosia`,
     * `Europe/Prague`, `Europe/Berlin`, `Europe/Busingen`, `Africa/Djibouti`, `Europe/Copenhagen`, `America/Dominica`,
     * `America/Santo_Domingo`, `Africa/Algiers`, `America/Guayaquil`, `Pacific/Galapagos`, `Europe/Tallinn`, `Africa/Cairo`,
     * `Africa/El_Aaiun`, `Africa/Asmara`, `Europe/Madrid`, `Africa/Ceuta`, `Atlantic/Canary`, `Africa/Addis_Ababa`,
     * `Europe/Helsinki`, `Pacific/Fiji`, `Atlantic/Stanley`, `Pacific/Chuuk`, `Pacific/Pohnpei`, `Pacific/Kosrae`,
     * `Atlantic/Faroe`, `Europe/Paris`, `Africa/Libreville`, `Europe/London`, `America/Grenada`, `Asia/Tbilisi`,
     * `America/Cayenne`, `Europe/Guernsey`, `Africa/Accra`, `Europe/Gibraltar`, `America/Godthab`, `America/Danmarkshavn`,
     * `America/Scoresbysund`, `America/Thule`, `Africa/Banjul`, `Africa/Conakry`, `America/Guadeloupe`, `Africa/Malabo`,
     * `Europe/Athens`, `Atlantic/South_Georgia`, `America/Guatemala`, `Pacific/Guam`, `Africa/Bissau`, `America/Guyana`,
     * `Asia/Hong_Kong`, `America/Tegucigalpa`, `Europe/Zagreb`, `America/Port-au-Prince`, `Europe/Budapest`, `Asia/Jakarta`,
     * `Asia/Pontianak`, `Asia/Makassar`, `Asia/Jayapura`, `Europe/Dublin`, `Asia/Jerusalem`, `Europe/Isle_of_Man`,
     * `Asia/Kolkata`, `Indian/Chagos`, `Asia/Baghdad`, `Asia/Tehran`, `Atlantic/Reykjavik`, `Europe/Rome`, `Europe/Jersey`,
     * `America/Jamaica`, `Asia/Amman`, `Asia/Tokyo`, `Africa/Nairobi`, `Asia/Bishkek`, `Asia/Phnom_Penh`, `Pacific/Tarawa`,
     * `Pacific/Enderbury`, `Pacific/Kiritimati`, `Indian/Comoro`, `America/St_Kitts`, `Asia/Pyongyang`, `Asia/Seoul`,
     * `Asia/Kuwait`, `America/Cayman`, `Asia/Almaty`, `Asia/Qyzylorda`, `Asia/Aqtobe`, `Asia/Aqtau`, `Asia/Oral`,
     * `Asia/Vientiane`, `Asia/Beirut`, `America/St_Lucia`, `Europe/Vaduz`, `Asia/Colombo`, `Africa/Monrovia`, `Africa/Maseru`,
     * `Europe/Vilnius`, `Europe/Luxembourg`, `Europe/Riga`, `Africa/Tripoli`, `Africa/Casablanca`, `Europe/Monaco`,
     * `Europe/Chisinau`, `Europe/Podgorica`, `America/Marigot`, `Indian/Antananarivo`, `Pacific/Majuro`, `Pacific/Kwajalein`,
     * `Europe/Skopje`, `Africa/Bamako`, `Asia/Rangoon`, `Asia/Ulaanbaatar`, `Asia/Hovd`, `Asia/Choibalsan`, `Asia/Macau`,
     * `Pacific/Saipan`, `America/Martinique`, `Africa/Nouakchott`, `America/Montserrat`, `Europe/Malta`, `Indian/Mauritius`,
     * `Indian/Maldives`, `Africa/Blantyre`, `America/Mexico_City`, `America/Cancun`, `America/Merida`, `America/Monterrey`,
     * `America/Matamoros`, `America/Mazatlan`, `America/Chihuahua`, `America/Ojinaga`, `America/Hermosillo`,
     * `America/Tijuana`, `America/Santa_Isabel`, `America/Bahia_Banderas`, `Asia/Kuala_Lumpur`, `Asia/Kuching`,
     * `Africa/Maputo`, `Africa/Windhoek`, `Pacific/Noumea`, `Africa/Niamey`, `Pacific/Norfolk`, `Africa/Lagos`,
     * `America/Managua`, `Europe/Amsterdam`, `Europe/Oslo`, `Asia/Kathmandu`, `Pacific/Nauru`, `Pacific/Niue`,
     * `Pacific/Auckland`, `Pacific/Chatham`, `Asia/Muscat`, `America/Panama`, `America/Lima`, `Pacific/Tahiti`,
     * `Pacific/Marquesas`, `Pacific/Gambier`, `Pacific/Port_Moresby`, `Asia/Manila`, `Asia/Karachi`, `Europe/Warsaw`,
     * `America/Miquelon`, `Pacific/Pitcairn`, `America/Puerto_Rico`, `Asia/Gaza`, `Asia/Hebron`, `Europe/Lisbon`,
     * `Atlantic/Madeira`, `Atlantic/Azores`, `Pacific/Palau`, `America/Asuncion`, `Asia/Qatar`, `Indian/Reunion`,
     * `Europe/Bucharest`, `Europe/Belgrade`, `Europe/Kaliningrad`, `Europe/Moscow`, `Europe/Volgograd`, `Europe/Samara`,
     * `Asia/Yekaterinburg`, `Asia/Omsk`, `Asia/Novosibirsk`, `Asia/Novokuznetsk`, `Asia/Krasnoyarsk`, `Asia/Irkutsk`,
     * `Asia/Yakutsk`, `Asia/Khandyga`, `Asia/Vladivostok`, `Asia/Sakhalin`, `Asia/Ust-Nera`, `Asia/Magadan`, `Asia/Kamchatka`,
     * `Asia/Anadyr`, `Africa/Kigali`, `Asia/Riyadh`, `Pacific/Guadalcanal`, `Indian/Mahe`, `Africa/Khartoum`,
     * `Europe/Stockholm`, `Asia/Singapore`, `Atlantic/St_Helena`, `Europe/Ljubljana`, `Arctic/Longyearbyen`,
     * `Europe/Bratislava`, `Africa/Freetown`, `Europe/San_Marino`, `Africa/Dakar`, `Africa/Mogadishu`, `America/Paramaribo`,
     * `Africa/Juba`, `Africa/Sao_Tome`, `America/El_Salvador`, `America/Lower_Princes`, `Asia/Damascus`, `Africa/Mbabane`,
     * `America/Grand_Turk`, `Africa/Ndjamena`, `Indian/Kerguelen`, `Africa/Lome`, `Asia/Bangkok`, `Asia/Dushanbe`,
     * `Pacific/Fakaofo`, `Asia/Dili`, `Asia/Ashgabat`, `Africa/Tunis`, `Pacific/Tongatapu`, `Europe/Istanbul`,
     * `America/Port_of_Spain`, `Pacific/Funafuti`, `Asia/Taipei`, `Africa/Dar_es_Salaam`, `Europe/Kiev`, `Europe/Uzhgorod`,
     * `Europe/Zaporozhye`, `Europe/Simferopol`, `Africa/Kampala`, `Pacific/Johnston`, `Pacific/Midway`, `Pacific/Wake`,
     * `America/New_York`, `America/Detroit`, `America/Kentucky/Louisville`, `America/Kentucky/Monticello`,
     * `America/Indiana/Indianapolis`, `America/Indiana/Vincennes`, `America/Indiana/Winamac`, `America/Indiana/Marengo`,
     * `America/Indiana/Petersburg`, `America/Indiana/Vevay`, `America/Chicago`, `America/Indiana/Tell_City`,
     * `America/Indiana/Knox`, `America/Menominee`, `America/North_Dakota/Center`, `America/North_Dakota/New_Salem`,
     * `America/North_Dakota/Beulah`, `America/Denver`, `America/Boise`, `America/Phoenix`, `America/Los_Angeles`,
     * `America/Anchorage`, `America/Juneau`, `America/Sitka`, `America/Yakutat`, `America/Nome`, `America/Adak`,
     * `America/Metlakatla`, `Pacific/Honolulu`, `America/Montevideo`, `Asia/Samarkand`, `Asia/Tashkent`, `Europe/Vatican`,
     * `America/St_Vincent`, `America/Caracas`, `America/Tortola`, `America/St_Thomas`, `Asia/Ho_Chi_Minh`, `Pacific/Efate`,
     * `Pacific/Wallis`, `Pacific/Apia`, `Asia/Aden`, `Indian/Mayotte`, `Africa/Johannesburg`, `Africa/Lusaka`,
     * `Africa/Harare`, `UTC` - Default value: `UTC`
     * 
     */
    public Output<Optional<String>> timezone() {
        return Codegen.optional(this.timezone);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="timezoneVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> timezoneVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> timezoneVariable() {
        return Codegen.optional(this.timezoneVariable);
    }
    /**
     * Enable or disable default gateway tracking - Default value: `true`
     * 
     */
    @Export(name="trackDefaultGateway", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trackDefaultGateway;

    /**
     * @return Enable or disable default gateway tracking - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> trackDefaultGateway() {
        return Codegen.optional(this.trackDefaultGateway);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="trackDefaultGatewayVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackDefaultGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> trackDefaultGatewayVariable() {
        return Codegen.optional(this.trackDefaultGatewayVariable);
    }
    /**
     * OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
     * 
     */
    @Export(name="trackInterfaceTag", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trackInterfaceTag;

    /**
     * @return OMP Tag attached to routes based on interface tracking - Range: `1`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> trackInterfaceTag() {
        return Codegen.optional(this.trackInterfaceTag);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="trackInterfaceTagVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackInterfaceTagVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> trackInterfaceTagVariable() {
        return Codegen.optional(this.trackInterfaceTagVariable);
    }
    /**
     * Configure tracking of transport - Default value: `true`
     * 
     */
    @Export(name="trackTransport", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trackTransport;

    /**
     * @return Configure tracking of transport - Default value: `true`
     * 
     */
    public Output<Optional<Boolean>> trackTransport() {
        return Codegen.optional(this.trackTransport);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="trackTransportVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trackTransportVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> trackTransportVariable() {
        return Codegen.optional(this.trackTransportVariable);
    }
    /**
     * Tracker configuration
     * 
     */
    @Export(name="trackers", refs={List.class,CiscoSystemFeatureTemplateTracker.class}, tree="[0,1]")
    private Output</* @Nullable */ List<CiscoSystemFeatureTemplateTracker>> trackers;

    /**
     * @return Tracker configuration
     * 
     */
    public Output<Optional<List<CiscoSystemFeatureTemplateTracker>>> trackers() {
        return Codegen.optional(this.trackers);
    }
    /**
     * Enable transport gateway - Default value: `false`
     * 
     */
    @Export(name="transportGateway", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> transportGateway;

    /**
     * @return Enable transport gateway - Default value: `false`
     * 
     */
    public Output<Optional<Boolean>> transportGateway() {
        return Codegen.optional(this.transportGateway);
    }
    /**
     * Variable name
     * 
     */
    @Export(name="transportGatewayVariable", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> transportGatewayVariable;

    /**
     * @return Variable name
     * 
     */
    public Output<Optional<String>> transportGatewayVariable() {
        return Codegen.optional(this.transportGatewayVariable);
    }
    /**
     * The version of the feature template
     * 
     */
    @Export(name="version", refs={Integer.class}, tree="[0]")
    private Output<Integer> version;

    /**
     * @return The version of the feature template
     * 
     */
    public Output<Integer> version() {
        return this.version;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CiscoSystemFeatureTemplate(java.lang.String name) {
        this(name, CiscoSystemFeatureTemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CiscoSystemFeatureTemplate(java.lang.String name, CiscoSystemFeatureTemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CiscoSystemFeatureTemplate(java.lang.String name, CiscoSystemFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/ciscoSystemFeatureTemplate:CiscoSystemFeatureTemplate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private CiscoSystemFeatureTemplate(java.lang.String name, Output<java.lang.String> id, @Nullable CiscoSystemFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("sdwan:index/ciscoSystemFeatureTemplate:CiscoSystemFeatureTemplate", name, state, makeResourceOptions(options, id), false);
    }

    private static CiscoSystemFeatureTemplateArgs makeArgs(CiscoSystemFeatureTemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? CiscoSystemFeatureTemplateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CiscoSystemFeatureTemplate get(java.lang.String name, Output<java.lang.String> id, @Nullable CiscoSystemFeatureTemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CiscoSystemFeatureTemplate(name, id, state, options);
    }
}
