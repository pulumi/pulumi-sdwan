// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCedgeMulticastFeatureTemplateResult {
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Replicator is local to this device
     * 
     */
    private Boolean localReplicator;
    /**
     * @return Variable name
     * 
     */
    private String localReplicatorVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Shortest Path Tree (SPT) Only Mode
     * 
     */
    private Boolean sptOnly;
    /**
     * @return Variable name
     * 
     */
    private String sptOnlyVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Set number of joins per group the router supports
     * 
     */
    private Integer threshold;
    /**
     * @return Variable name
     * 
     */
    private String thresholdVariable;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCedgeMulticastFeatureTemplateResult() {}
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Replicator is local to this device
     * 
     */
    public Boolean localReplicator() {
        return this.localReplicator;
    }
    /**
     * @return Variable name
     * 
     */
    public String localReplicatorVariable() {
        return this.localReplicatorVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Shortest Path Tree (SPT) Only Mode
     * 
     */
    public Boolean sptOnly() {
        return this.sptOnly;
    }
    /**
     * @return Variable name
     * 
     */
    public String sptOnlyVariable() {
        return this.sptOnlyVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Set number of joins per group the router supports
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }
    /**
     * @return Variable name
     * 
     */
    public String thresholdVariable() {
        return this.thresholdVariable;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCedgeMulticastFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String description;
        private List<String> deviceTypes;
        private String id;
        private Boolean localReplicator;
        private String localReplicatorVariable;
        private String name;
        private Boolean sptOnly;
        private String sptOnlyVariable;
        private String templateType;
        private Integer threshold;
        private String thresholdVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetCedgeMulticastFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.id = defaults.id;
    	      this.localReplicator = defaults.localReplicator;
    	      this.localReplicatorVariable = defaults.localReplicatorVariable;
    	      this.name = defaults.name;
    	      this.sptOnly = defaults.sptOnly;
    	      this.sptOnlyVariable = defaults.sptOnlyVariable;
    	      this.templateType = defaults.templateType;
    	      this.threshold = defaults.threshold;
    	      this.thresholdVariable = defaults.thresholdVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder localReplicator(Boolean localReplicator) {
            if (localReplicator == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "localReplicator");
            }
            this.localReplicator = localReplicator;
            return this;
        }
        @CustomType.Setter
        public Builder localReplicatorVariable(String localReplicatorVariable) {
            if (localReplicatorVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "localReplicatorVariable");
            }
            this.localReplicatorVariable = localReplicatorVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder sptOnly(Boolean sptOnly) {
            if (sptOnly == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "sptOnly");
            }
            this.sptOnly = sptOnly;
            return this;
        }
        @CustomType.Setter
        public Builder sptOnlyVariable(String sptOnlyVariable) {
            if (sptOnlyVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "sptOnlyVariable");
            }
            this.sptOnlyVariable = sptOnlyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder thresholdVariable(String thresholdVariable) {
            if (thresholdVariable == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "thresholdVariable");
            }
            this.thresholdVariable = thresholdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCedgeMulticastFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCedgeMulticastFeatureTemplateResult build() {
            final var _resultValue = new GetCedgeMulticastFeatureTemplateResult();
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.id = id;
            _resultValue.localReplicator = localReplicator;
            _resultValue.localReplicatorVariable = localReplicatorVariable;
            _resultValue.name = name;
            _resultValue.sptOnly = sptOnly;
            _resultValue.sptOnlyVariable = sptOnlyVariable;
            _resultValue.templateType = templateType;
            _resultValue.threshold = threshold;
            _resultValue.thresholdVariable = thresholdVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
