// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs Empty = new CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs();

    /**
     * Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     * 
     */
    @Import(name="community")
    private @Nullable Output<String> community;

    /**
     * @return Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
     * 
     */
    public Optional<Output<String>> community() {
        return Optional.ofNullable(this.community);
    }

    /**
     * Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     * 
     */
    @Import(name="communityAdditive")
    private @Nullable Output<Boolean> communityAdditive;

    /**
     * @return Community additive, Attribute conditional on `type` being equal to `communityAdditive`
     * 
     */
    public Optional<Output<Boolean>> communityAdditive() {
        return Optional.ofNullable(this.communityAdditive);
    }

    /**
     * OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="ompTag")
    private @Nullable Output<Integer> ompTag;

    /**
     * @return OMP tag, Attribute conditional on `type` being equal to `ompTag`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> ompTag() {
        return Optional.ofNullable(this.ompTag);
    }

    /**
     * Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     * 
     */
    @Import(name="preference")
    private @Nullable Output<Integer> preference;

    /**
     * @return Preference, Attribute conditional on `type` being equal to `preference`
     *   - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> preference() {
        return Optional.ofNullable(this.preference);
    }

    /**
     * Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocColor")
    private @Nullable Output<String> serviceTlocColor;

    /**
     * @return Service TLOC color, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<String>> serviceTlocColor() {
        return Optional.ofNullable(this.serviceTlocColor);
    }

    /**
     * Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    @Import(name="serviceTlocEncapsulation")
    private @Nullable Output<String> serviceTlocEncapsulation;

    /**
     * @return Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    public Optional<Output<String>> serviceTlocEncapsulation() {
        return Optional.ofNullable(this.serviceTlocEncapsulation);
    }

    /**
     * Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocIp")
    private @Nullable Output<String> serviceTlocIp;

    /**
     * @return Service TLOC IP address, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<String>> serviceTlocIp() {
        return Optional.ofNullable(this.serviceTlocIp);
    }

    /**
     * Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    @Import(name="serviceTlocListId")
    private @Nullable Output<String> serviceTlocListId;

    /**
     * @return Service TLOC list ID, Attribute conditional on `type` being equal to `service`
     * 
     */
    public Optional<Output<String>> serviceTlocListId() {
        return Optional.ofNullable(this.serviceTlocListId);
    }

    /**
     * Service TLOC list version
     * 
     */
    @Import(name="serviceTlocListVersion")
    private @Nullable Output<Integer> serviceTlocListVersion;

    /**
     * @return Service TLOC list version
     * 
     */
    public Optional<Output<Integer>> serviceTlocListVersion() {
        return Optional.ofNullable(this.serviceTlocListVersion);
    }

    /**
     * Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return Service type, Attribute conditional on `type` being equal to `service`
     *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    @Import(name="serviceVpnId")
    private @Nullable Output<Integer> serviceVpnId;

    /**
     * @return Service VPN ID, Attribute conditional on `type` being equal to `service`
     *   - Range: `0`-`65536`
     * 
     */
    public Optional<Output<Integer>> serviceVpnId() {
        return Optional.ofNullable(this.serviceVpnId);
    }

    /**
     * TLOC action, Attribute conditional on `type` being equal to `tlocAction`
     *   - Choices: `strict`, `primary`, `backup`, `ecmp`
     * 
     */
    @Import(name="tlocAction")
    private @Nullable Output<String> tlocAction;

    /**
     * @return TLOC action, Attribute conditional on `type` being equal to `tlocAction`
     *   - Choices: `strict`, `primary`, `backup`, `ecmp`
     * 
     */
    public Optional<Output<String>> tlocAction() {
        return Optional.ofNullable(this.tlocAction);
    }

    /**
     * TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    @Import(name="tlocColor")
    private @Nullable Output<String> tlocColor;

    /**
     * @return TLOC color, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<Output<String>> tlocColor() {
        return Optional.ofNullable(this.tlocColor);
    }

    /**
     * TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    @Import(name="tlocEncapsulation")
    private @Nullable Output<String> tlocEncapsulation;

    /**
     * @return TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
     *   - Choices: `ipsec`, `gre`
     * 
     */
    public Optional<Output<String>> tlocEncapsulation() {
        return Optional.ofNullable(this.tlocEncapsulation);
    }

    /**
     * TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    @Import(name="tlocIp")
    private @Nullable Output<String> tlocIp;

    /**
     * @return TLOC IP address, Attribute conditional on `type` being equal to `tloc`
     * 
     */
    public Optional<Output<String>> tlocIp() {
        return Optional.ofNullable(this.tlocIp);
    }

    /**
     * TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    @Import(name="tlocListId")
    private @Nullable Output<String> tlocListId;

    /**
     * @return TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
     * 
     */
    public Optional<Output<String>> tlocListId() {
        return Optional.ofNullable(this.tlocListId);
    }

    /**
     * TLOC list version
     * 
     */
    @Import(name="tlocListVersion")
    private @Nullable Output<Integer> tlocListVersion;

    /**
     * @return TLOC list version
     * 
     */
    public Optional<Output<Integer>> tlocListVersion() {
        return Optional.ofNullable(this.tlocListVersion);
    }

    /**
     * Type of set parameter
     *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of set parameter
     *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs() {}

    private CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs(CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs $) {
        this.community = $.community;
        this.communityAdditive = $.communityAdditive;
        this.ompTag = $.ompTag;
        this.preference = $.preference;
        this.serviceTlocColor = $.serviceTlocColor;
        this.serviceTlocEncapsulation = $.serviceTlocEncapsulation;
        this.serviceTlocIp = $.serviceTlocIp;
        this.serviceTlocListId = $.serviceTlocListId;
        this.serviceTlocListVersion = $.serviceTlocListVersion;
        this.serviceType = $.serviceType;
        this.serviceVpnId = $.serviceVpnId;
        this.tlocAction = $.tlocAction;
        this.tlocColor = $.tlocColor;
        this.tlocEncapsulation = $.tlocEncapsulation;
        this.tlocIp = $.tlocIp;
        this.tlocListId = $.tlocListId;
        this.tlocListVersion = $.tlocListVersion;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs $;

        public Builder() {
            $ = new CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs();
        }

        public Builder(CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs defaults) {
            $ = new CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param community Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
         * 
         * @return builder
         * 
         */
        public Builder community(@Nullable Output<String> community) {
            $.community = community;
            return this;
        }

        /**
         * @param community Community value, e.g. `1000:10000` or `internet` or `local-AS`, Attribute conditional on `type` being equal to `community`
         * 
         * @return builder
         * 
         */
        public Builder community(String community) {
            return community(Output.of(community));
        }

        /**
         * @param communityAdditive Community additive, Attribute conditional on `type` being equal to `communityAdditive`
         * 
         * @return builder
         * 
         */
        public Builder communityAdditive(@Nullable Output<Boolean> communityAdditive) {
            $.communityAdditive = communityAdditive;
            return this;
        }

        /**
         * @param communityAdditive Community additive, Attribute conditional on `type` being equal to `communityAdditive`
         * 
         * @return builder
         * 
         */
        public Builder communityAdditive(Boolean communityAdditive) {
            return communityAdditive(Output.of(communityAdditive));
        }

        /**
         * @param ompTag OMP tag, Attribute conditional on `type` being equal to `ompTag`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder ompTag(@Nullable Output<Integer> ompTag) {
            $.ompTag = ompTag;
            return this;
        }

        /**
         * @param ompTag OMP tag, Attribute conditional on `type` being equal to `ompTag`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder ompTag(Integer ompTag) {
            return ompTag(Output.of(ompTag));
        }

        /**
         * @param preference Preference, Attribute conditional on `type` being equal to `preference`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder preference(@Nullable Output<Integer> preference) {
            $.preference = preference;
            return this;
        }

        /**
         * @param preference Preference, Attribute conditional on `type` being equal to `preference`
         *   - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder preference(Integer preference) {
            return preference(Output.of(preference));
        }

        /**
         * @param serviceTlocColor Service TLOC color, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocColor(@Nullable Output<String> serviceTlocColor) {
            $.serviceTlocColor = serviceTlocColor;
            return this;
        }

        /**
         * @param serviceTlocColor Service TLOC color, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocColor(String serviceTlocColor) {
            return serviceTlocColor(Output.of(serviceTlocColor));
        }

        /**
         * @param serviceTlocEncapsulation Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
         *   - Choices: `ipsec`, `gre`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocEncapsulation(@Nullable Output<String> serviceTlocEncapsulation) {
            $.serviceTlocEncapsulation = serviceTlocEncapsulation;
            return this;
        }

        /**
         * @param serviceTlocEncapsulation Service TLOC encapsulation, Attribute conditional on `type` being equal to `service`
         *   - Choices: `ipsec`, `gre`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocEncapsulation(String serviceTlocEncapsulation) {
            return serviceTlocEncapsulation(Output.of(serviceTlocEncapsulation));
        }

        /**
         * @param serviceTlocIp Service TLOC IP address, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocIp(@Nullable Output<String> serviceTlocIp) {
            $.serviceTlocIp = serviceTlocIp;
            return this;
        }

        /**
         * @param serviceTlocIp Service TLOC IP address, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocIp(String serviceTlocIp) {
            return serviceTlocIp(Output.of(serviceTlocIp));
        }

        /**
         * @param serviceTlocListId Service TLOC list ID, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListId(@Nullable Output<String> serviceTlocListId) {
            $.serviceTlocListId = serviceTlocListId;
            return this;
        }

        /**
         * @param serviceTlocListId Service TLOC list ID, Attribute conditional on `type` being equal to `service`
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListId(String serviceTlocListId) {
            return serviceTlocListId(Output.of(serviceTlocListId));
        }

        /**
         * @param serviceTlocListVersion Service TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListVersion(@Nullable Output<Integer> serviceTlocListVersion) {
            $.serviceTlocListVersion = serviceTlocListVersion;
            return this;
        }

        /**
         * @param serviceTlocListVersion Service TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder serviceTlocListVersion(Integer serviceTlocListVersion) {
            return serviceTlocListVersion(Output.of(serviceTlocListVersion));
        }

        /**
         * @param serviceType Service type, Attribute conditional on `type` being equal to `service`
         *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType Service type, Attribute conditional on `type` being equal to `service`
         *   - Choices: `FW`, `IDP`, `IDS`, `netsvc1`, `netsvc2`, `netsvc3`, `netsvc4`, `netsvc5`
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param serviceVpnId Service VPN ID, Attribute conditional on `type` being equal to `service`
         *   - Range: `0`-`65536`
         * 
         * @return builder
         * 
         */
        public Builder serviceVpnId(@Nullable Output<Integer> serviceVpnId) {
            $.serviceVpnId = serviceVpnId;
            return this;
        }

        /**
         * @param serviceVpnId Service VPN ID, Attribute conditional on `type` being equal to `service`
         *   - Range: `0`-`65536`
         * 
         * @return builder
         * 
         */
        public Builder serviceVpnId(Integer serviceVpnId) {
            return serviceVpnId(Output.of(serviceVpnId));
        }

        /**
         * @param tlocAction TLOC action, Attribute conditional on `type` being equal to `tlocAction`
         *   - Choices: `strict`, `primary`, `backup`, `ecmp`
         * 
         * @return builder
         * 
         */
        public Builder tlocAction(@Nullable Output<String> tlocAction) {
            $.tlocAction = tlocAction;
            return this;
        }

        /**
         * @param tlocAction TLOC action, Attribute conditional on `type` being equal to `tlocAction`
         *   - Choices: `strict`, `primary`, `backup`, `ecmp`
         * 
         * @return builder
         * 
         */
        public Builder tlocAction(String tlocAction) {
            return tlocAction(Output.of(tlocAction));
        }

        /**
         * @param tlocColor TLOC color, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocColor(@Nullable Output<String> tlocColor) {
            $.tlocColor = tlocColor;
            return this;
        }

        /**
         * @param tlocColor TLOC color, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocColor(String tlocColor) {
            return tlocColor(Output.of(tlocColor));
        }

        /**
         * @param tlocEncapsulation TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
         *   - Choices: `ipsec`, `gre`
         * 
         * @return builder
         * 
         */
        public Builder tlocEncapsulation(@Nullable Output<String> tlocEncapsulation) {
            $.tlocEncapsulation = tlocEncapsulation;
            return this;
        }

        /**
         * @param tlocEncapsulation TLOC encapsulation, Attribute conditional on `type` being equal to `tloc`
         *   - Choices: `ipsec`, `gre`
         * 
         * @return builder
         * 
         */
        public Builder tlocEncapsulation(String tlocEncapsulation) {
            return tlocEncapsulation(Output.of(tlocEncapsulation));
        }

        /**
         * @param tlocIp TLOC IP address, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocIp(@Nullable Output<String> tlocIp) {
            $.tlocIp = tlocIp;
            return this;
        }

        /**
         * @param tlocIp TLOC IP address, Attribute conditional on `type` being equal to `tloc`
         * 
         * @return builder
         * 
         */
        public Builder tlocIp(String tlocIp) {
            return tlocIp(Output.of(tlocIp));
        }

        /**
         * @param tlocListId TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(@Nullable Output<String> tlocListId) {
            $.tlocListId = tlocListId;
            return this;
        }

        /**
         * @param tlocListId TLOC list ID, Attribute conditional on `type` being equal to `tlocList`
         * 
         * @return builder
         * 
         */
        public Builder tlocListId(String tlocListId) {
            return tlocListId(Output.of(tlocListId));
        }

        /**
         * @param tlocListVersion TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder tlocListVersion(@Nullable Output<Integer> tlocListVersion) {
            $.tlocListVersion = tlocListVersion;
            return this;
        }

        /**
         * @param tlocListVersion TLOC list version
         * 
         * @return builder
         * 
         */
        public Builder tlocListVersion(Integer tlocListVersion) {
            return tlocListVersion(Output.of(tlocListVersion));
        }

        /**
         * @param type Type of set parameter
         *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of set parameter
         *   - Choices: `tlocList`, `tloc`, `tlocAction`, `preference`, `ompTag`, `community`, `communityAdditive`, `service`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CustomControlTopologyPolicyDefinitionSequenceActionEntrySetParameterArgs", "type");
            }
            return $;
        }
    }

}
