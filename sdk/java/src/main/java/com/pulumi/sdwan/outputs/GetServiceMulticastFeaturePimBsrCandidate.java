// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServiceMulticastFeaturePimBsrCandidate {
    /**
     * @return Set BSR RP candidate filter
     * 
     */
    private String acceptCandidateAccessList;
    /**
     * @return Variable name
     * 
     */
    private String acceptCandidateAccessListVariable;
    /**
     * @return Hash Mask length for RP selection
     * 
     */
    private Integer hashMaskLength;
    /**
     * @return Variable name
     * 
     */
    private String hashMaskLengthVariable;
    /**
     * @return Set Autonomic-Networking virtual interface
     * 
     */
    private String interfaceName;
    /**
     * @return Variable name
     * 
     */
    private String interfaceNameVariable;
    /**
     * @return Set RP candidate priority
     * 
     */
    private Integer priority;
    /**
     * @return Variable name
     * 
     */
    private String priorityVariable;

    private GetServiceMulticastFeaturePimBsrCandidate() {}
    /**
     * @return Set BSR RP candidate filter
     * 
     */
    public String acceptCandidateAccessList() {
        return this.acceptCandidateAccessList;
    }
    /**
     * @return Variable name
     * 
     */
    public String acceptCandidateAccessListVariable() {
        return this.acceptCandidateAccessListVariable;
    }
    /**
     * @return Hash Mask length for RP selection
     * 
     */
    public Integer hashMaskLength() {
        return this.hashMaskLength;
    }
    /**
     * @return Variable name
     * 
     */
    public String hashMaskLengthVariable() {
        return this.hashMaskLengthVariable;
    }
    /**
     * @return Set Autonomic-Networking virtual interface
     * 
     */
    public String interfaceName() {
        return this.interfaceName;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceNameVariable() {
        return this.interfaceNameVariable;
    }
    /**
     * @return Set RP candidate priority
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return Variable name
     * 
     */
    public String priorityVariable() {
        return this.priorityVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServiceMulticastFeaturePimBsrCandidate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acceptCandidateAccessList;
        private String acceptCandidateAccessListVariable;
        private Integer hashMaskLength;
        private String hashMaskLengthVariable;
        private String interfaceName;
        private String interfaceNameVariable;
        private Integer priority;
        private String priorityVariable;
        public Builder() {}
        public Builder(GetServiceMulticastFeaturePimBsrCandidate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptCandidateAccessList = defaults.acceptCandidateAccessList;
    	      this.acceptCandidateAccessListVariable = defaults.acceptCandidateAccessListVariable;
    	      this.hashMaskLength = defaults.hashMaskLength;
    	      this.hashMaskLengthVariable = defaults.hashMaskLengthVariable;
    	      this.interfaceName = defaults.interfaceName;
    	      this.interfaceNameVariable = defaults.interfaceNameVariable;
    	      this.priority = defaults.priority;
    	      this.priorityVariable = defaults.priorityVariable;
        }

        @CustomType.Setter
        public Builder acceptCandidateAccessList(String acceptCandidateAccessList) {
            if (acceptCandidateAccessList == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "acceptCandidateAccessList");
            }
            this.acceptCandidateAccessList = acceptCandidateAccessList;
            return this;
        }
        @CustomType.Setter
        public Builder acceptCandidateAccessListVariable(String acceptCandidateAccessListVariable) {
            if (acceptCandidateAccessListVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "acceptCandidateAccessListVariable");
            }
            this.acceptCandidateAccessListVariable = acceptCandidateAccessListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hashMaskLength(Integer hashMaskLength) {
            if (hashMaskLength == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "hashMaskLength");
            }
            this.hashMaskLength = hashMaskLength;
            return this;
        }
        @CustomType.Setter
        public Builder hashMaskLengthVariable(String hashMaskLengthVariable) {
            if (hashMaskLengthVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "hashMaskLengthVariable");
            }
            this.hashMaskLengthVariable = hashMaskLengthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceName(String interfaceName) {
            if (interfaceName == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "interfaceName");
            }
            this.interfaceName = interfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            if (interfaceNameVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "interfaceNameVariable");
            }
            this.interfaceNameVariable = interfaceNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder priorityVariable(String priorityVariable) {
            if (priorityVariable == null) {
              throw new MissingRequiredPropertyException("GetServiceMulticastFeaturePimBsrCandidate", "priorityVariable");
            }
            this.priorityVariable = priorityVariable;
            return this;
        }
        public GetServiceMulticastFeaturePimBsrCandidate build() {
            final var _resultValue = new GetServiceMulticastFeaturePimBsrCandidate();
            _resultValue.acceptCandidateAccessList = acceptCandidateAccessList;
            _resultValue.acceptCandidateAccessListVariable = acceptCandidateAccessListVariable;
            _resultValue.hashMaskLength = hashMaskLength;
            _resultValue.hashMaskLengthVariable = hashMaskLengthVariable;
            _resultValue.interfaceName = interfaceName;
            _resultValue.interfaceNameVariable = interfaceNameVariable;
            _resultValue.priority = priority;
            _resultValue.priorityVariable = priorityVariable;
            return _resultValue;
        }
    }
}
