// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs extends com.pulumi.resources.ResourceArgs {

    public static final VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs Empty = new VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs();

    /**
     * Indicates if list item is considered optional.
     * 
     */
    @Import(name="optional")
    private @Nullable Output<Boolean> optional;

    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Output<Boolean>> optional() {
        return Optional.ofNullable(this.optional);
    }

    /**
     * Ending port of port range
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="portEndRange")
    private @Nullable Output<Integer> portEndRange;

    /**
     * @return Ending port of port range
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> portEndRange() {
        return Optional.ofNullable(this.portEndRange);
    }

    /**
     * Starting port of port range
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="portStartRange")
    private @Nullable Output<Integer> portStartRange;

    /**
     * @return Starting port of port range
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> portStartRange() {
        return Optional.ofNullable(this.portStartRange);
    }

    /**
     * Private IP Address to translate to
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return Private IP Address to translate to
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="privateIpAddressVariable")
    private @Nullable Output<String> privateIpAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> privateIpAddressVariable() {
        return Optional.ofNullable(this.privateIpAddressVariable);
    }

    /**
     * VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     * 
     */
    @Import(name="privateVpn")
    private @Nullable Output<Integer> privateVpn;

    /**
     * @return VPN in which private IP Address resides
     *   - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> privateVpn() {
        return Optional.ofNullable(this.privateVpn);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="privateVpnVariable")
    private @Nullable Output<String> privateVpnVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> privateVpnVariable() {
        return Optional.ofNullable(this.privateVpnVariable);
    }

    /**
     * Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Layer 4 protocol to apply port forwarding to
     *   - Choices: `tcp`, `udp`
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs() {}

    private VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs(VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs $) {
        this.optional = $.optional;
        this.portEndRange = $.portEndRange;
        this.portStartRange = $.portStartRange;
        this.privateIpAddress = $.privateIpAddress;
        this.privateIpAddressVariable = $.privateIpAddressVariable;
        this.privateVpn = $.privateVpn;
        this.privateVpnVariable = $.privateVpnVariable;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs $;

        public Builder() {
            $ = new VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs();
        }

        public Builder(VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs defaults) {
            $ = new VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(@Nullable Output<Boolean> optional) {
            $.optional = optional;
            return this;
        }

        /**
         * @param optional Indicates if list item is considered optional.
         * 
         * @return builder
         * 
         */
        public Builder optional(Boolean optional) {
            return optional(Output.of(optional));
        }

        /**
         * @param portEndRange Ending port of port range
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder portEndRange(@Nullable Output<Integer> portEndRange) {
            $.portEndRange = portEndRange;
            return this;
        }

        /**
         * @param portEndRange Ending port of port range
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder portEndRange(Integer portEndRange) {
            return portEndRange(Output.of(portEndRange));
        }

        /**
         * @param portStartRange Starting port of port range
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder portStartRange(@Nullable Output<Integer> portStartRange) {
            $.portStartRange = portStartRange;
            return this;
        }

        /**
         * @param portStartRange Starting port of port range
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder portStartRange(Integer portStartRange) {
            return portStartRange(Output.of(portStartRange));
        }

        /**
         * @param privateIpAddress Private IP Address to translate to
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress Private IP Address to translate to
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param privateIpAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddressVariable(@Nullable Output<String> privateIpAddressVariable) {
            $.privateIpAddressVariable = privateIpAddressVariable;
            return this;
        }

        /**
         * @param privateIpAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddressVariable(String privateIpAddressVariable) {
            return privateIpAddressVariable(Output.of(privateIpAddressVariable));
        }

        /**
         * @param privateVpn VPN in which private IP Address resides
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder privateVpn(@Nullable Output<Integer> privateVpn) {
            $.privateVpn = privateVpn;
            return this;
        }

        /**
         * @param privateVpn VPN in which private IP Address resides
         *   - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder privateVpn(Integer privateVpn) {
            return privateVpn(Output.of(privateVpn));
        }

        /**
         * @param privateVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder privateVpnVariable(@Nullable Output<String> privateVpnVariable) {
            $.privateVpnVariable = privateVpnVariable;
            return this;
        }

        /**
         * @param privateVpnVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder privateVpnVariable(String privateVpnVariable) {
            return privateVpnVariable(Output.of(privateVpnVariable));
        }

        /**
         * @param protocol Layer 4 protocol to apply port forwarding to
         *   - Choices: `tcp`, `udp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Layer 4 protocol to apply port forwarding to
         *   - Choices: `tcp`, `udp`
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public VpnInterfaceEthernetPppoeFeatureTemplateNatPortForwardArgs build() {
            return $;
        }
    }

}
