// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UrlFilteringPolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final UrlFilteringPolicyDefinitionArgs Empty = new UrlFilteringPolicyDefinitionArgs();

    /**
     * List of alerts options that will be exported as syslog messages
     * 
     */
    @Import(name="alerts")
    private @Nullable Output<List<String>> alerts;

    /**
     * @return List of alerts options that will be exported as syslog messages
     * 
     */
    public Optional<Output<List<String>>> alerts() {
        return Optional.ofNullable(this.alerts);
    }

    /**
     * Allow URL list ID
     * 
     */
    @Import(name="allowUrlListId")
    private @Nullable Output<String> allowUrlListId;

    /**
     * @return Allow URL list ID
     * 
     */
    public Optional<Output<String>> allowUrlListId() {
        return Optional.ofNullable(this.allowUrlListId);
    }

    /**
     * Allow URL list version
     * 
     */
    @Import(name="allowUrlListVersion")
    private @Nullable Output<Integer> allowUrlListVersion;

    /**
     * @return Allow URL list version
     * 
     */
    public Optional<Output<Integer>> allowUrlListVersion() {
        return Optional.ofNullable(this.allowUrlListVersion);
    }

    /**
     * Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
     * 
     */
    @Import(name="blockPageAction")
    private @Nullable Output<String> blockPageAction;

    /**
     * @return Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
     * 
     */
    public Optional<Output<String>> blockPageAction() {
        return Optional.ofNullable(this.blockPageAction);
    }

    /**
     * The message displayed or URL redirected to when a blocked page is accessed.
     * 
     */
    @Import(name="blockPageContents")
    private @Nullable Output<String> blockPageContents;

    /**
     * @return The message displayed or URL redirected to when a blocked page is accessed.
     * 
     */
    public Optional<Output<String>> blockPageContents() {
        return Optional.ofNullable(this.blockPageContents);
    }

    /**
     * Block URL list ID
     * 
     */
    @Import(name="blockUrlListId")
    private @Nullable Output<String> blockUrlListId;

    /**
     * @return Block URL list ID
     * 
     */
    public Optional<Output<String>> blockUrlListId() {
        return Optional.ofNullable(this.blockUrlListId);
    }

    /**
     * Block URL list version
     * 
     */
    @Import(name="blockUrlListVersion")
    private @Nullable Output<Integer> blockUrlListVersion;

    /**
     * @return Block URL list version
     * 
     */
    public Optional<Output<Integer>> blockUrlListVersion() {
        return Optional.ofNullable(this.blockUrlListVersion);
    }

    /**
     * The description of the policy definition.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the policy definition.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The policy mode - Choices: `security`, `unified`
     * 
     */
    @Import(name="mode")
    private @Nullable Output<String> mode;

    /**
     * @return The policy mode - Choices: `security`, `unified`
     * 
     */
    public Optional<Output<String>> mode() {
        return Optional.ofNullable(this.mode);
    }

    /**
     * The name of the policy definition.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy definition.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of VPN IDs
     * 
     */
    @Import(name="targetVpns")
    private @Nullable Output<List<String>> targetVpns;

    /**
     * @return List of VPN IDs
     * 
     */
    public Optional<Output<List<String>>> targetVpns() {
        return Optional.ofNullable(this.targetVpns);
    }

    /**
     * List of categories to block or allow
     * 
     */
    @Import(name="webCategories")
    private @Nullable Output<List<String>> webCategories;

    /**
     * @return List of categories to block or allow
     * 
     */
    public Optional<Output<List<String>>> webCategories() {
        return Optional.ofNullable(this.webCategories);
    }

    /**
     * whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
     * 
     */
    @Import(name="webCategoriesAction")
    private @Nullable Output<String> webCategoriesAction;

    /**
     * @return whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
     * 
     */
    public Optional<Output<String>> webCategoriesAction() {
        return Optional.ofNullable(this.webCategoriesAction);
    }

    /**
     * The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
     * `trustworthy`
     * 
     */
    @Import(name="webReputation")
    private @Nullable Output<String> webReputation;

    /**
     * @return The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
     * `trustworthy`
     * 
     */
    public Optional<Output<String>> webReputation() {
        return Optional.ofNullable(this.webReputation);
    }

    private UrlFilteringPolicyDefinitionArgs() {}

    private UrlFilteringPolicyDefinitionArgs(UrlFilteringPolicyDefinitionArgs $) {
        this.alerts = $.alerts;
        this.allowUrlListId = $.allowUrlListId;
        this.allowUrlListVersion = $.allowUrlListVersion;
        this.blockPageAction = $.blockPageAction;
        this.blockPageContents = $.blockPageContents;
        this.blockUrlListId = $.blockUrlListId;
        this.blockUrlListVersion = $.blockUrlListVersion;
        this.description = $.description;
        this.mode = $.mode;
        this.name = $.name;
        this.targetVpns = $.targetVpns;
        this.webCategories = $.webCategories;
        this.webCategoriesAction = $.webCategoriesAction;
        this.webReputation = $.webReputation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UrlFilteringPolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UrlFilteringPolicyDefinitionArgs $;

        public Builder() {
            $ = new UrlFilteringPolicyDefinitionArgs();
        }

        public Builder(UrlFilteringPolicyDefinitionArgs defaults) {
            $ = new UrlFilteringPolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param alerts List of alerts options that will be exported as syslog messages
         * 
         * @return builder
         * 
         */
        public Builder alerts(@Nullable Output<List<String>> alerts) {
            $.alerts = alerts;
            return this;
        }

        /**
         * @param alerts List of alerts options that will be exported as syslog messages
         * 
         * @return builder
         * 
         */
        public Builder alerts(List<String> alerts) {
            return alerts(Output.of(alerts));
        }

        /**
         * @param alerts List of alerts options that will be exported as syslog messages
         * 
         * @return builder
         * 
         */
        public Builder alerts(String... alerts) {
            return alerts(List.of(alerts));
        }

        /**
         * @param allowUrlListId Allow URL list ID
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListId(@Nullable Output<String> allowUrlListId) {
            $.allowUrlListId = allowUrlListId;
            return this;
        }

        /**
         * @param allowUrlListId Allow URL list ID
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListId(String allowUrlListId) {
            return allowUrlListId(Output.of(allowUrlListId));
        }

        /**
         * @param allowUrlListVersion Allow URL list version
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListVersion(@Nullable Output<Integer> allowUrlListVersion) {
            $.allowUrlListVersion = allowUrlListVersion;
            return this;
        }

        /**
         * @param allowUrlListVersion Allow URL list version
         * 
         * @return builder
         * 
         */
        public Builder allowUrlListVersion(Integer allowUrlListVersion) {
            return allowUrlListVersion(Output.of(allowUrlListVersion));
        }

        /**
         * @param blockPageAction Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
         * 
         * @return builder
         * 
         */
        public Builder blockPageAction(@Nullable Output<String> blockPageAction) {
            $.blockPageAction = blockPageAction;
            return this;
        }

        /**
         * @param blockPageAction Redirect to a URL or display a message when a blocked page is accessed. - Choices: `text`, `redirectUrl`
         * 
         * @return builder
         * 
         */
        public Builder blockPageAction(String blockPageAction) {
            return blockPageAction(Output.of(blockPageAction));
        }

        /**
         * @param blockPageContents The message displayed or URL redirected to when a blocked page is accessed.
         * 
         * @return builder
         * 
         */
        public Builder blockPageContents(@Nullable Output<String> blockPageContents) {
            $.blockPageContents = blockPageContents;
            return this;
        }

        /**
         * @param blockPageContents The message displayed or URL redirected to when a blocked page is accessed.
         * 
         * @return builder
         * 
         */
        public Builder blockPageContents(String blockPageContents) {
            return blockPageContents(Output.of(blockPageContents));
        }

        /**
         * @param blockUrlListId Block URL list ID
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListId(@Nullable Output<String> blockUrlListId) {
            $.blockUrlListId = blockUrlListId;
            return this;
        }

        /**
         * @param blockUrlListId Block URL list ID
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListId(String blockUrlListId) {
            return blockUrlListId(Output.of(blockUrlListId));
        }

        /**
         * @param blockUrlListVersion Block URL list version
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListVersion(@Nullable Output<Integer> blockUrlListVersion) {
            $.blockUrlListVersion = blockUrlListVersion;
            return this;
        }

        /**
         * @param blockUrlListVersion Block URL list version
         * 
         * @return builder
         * 
         */
        public Builder blockUrlListVersion(Integer blockUrlListVersion) {
            return blockUrlListVersion(Output.of(blockUrlListVersion));
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param mode The policy mode - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(@Nullable Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The policy mode - Choices: `security`, `unified`
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy definition.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(@Nullable Output<List<String>> targetVpns) {
            $.targetVpns = targetVpns;
            return this;
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(List<String> targetVpns) {
            return targetVpns(Output.of(targetVpns));
        }

        /**
         * @param targetVpns List of VPN IDs
         * 
         * @return builder
         * 
         */
        public Builder targetVpns(String... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }

        /**
         * @param webCategories List of categories to block or allow
         * 
         * @return builder
         * 
         */
        public Builder webCategories(@Nullable Output<List<String>> webCategories) {
            $.webCategories = webCategories;
            return this;
        }

        /**
         * @param webCategories List of categories to block or allow
         * 
         * @return builder
         * 
         */
        public Builder webCategories(List<String> webCategories) {
            return webCategories(Output.of(webCategories));
        }

        /**
         * @param webCategories List of categories to block or allow
         * 
         * @return builder
         * 
         */
        public Builder webCategories(String... webCategories) {
            return webCategories(List.of(webCategories));
        }

        /**
         * @param webCategoriesAction whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
         * 
         * @return builder
         * 
         */
        public Builder webCategoriesAction(@Nullable Output<String> webCategoriesAction) {
            $.webCategoriesAction = webCategoriesAction;
            return this;
        }

        /**
         * @param webCategoriesAction whether the selected web categories should be blocked or allowed. - Choices: `block`, `allow`
         * 
         * @return builder
         * 
         */
        public Builder webCategoriesAction(String webCategoriesAction) {
            return webCategoriesAction(Output.of(webCategoriesAction));
        }

        /**
         * @param webReputation The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
         * `trustworthy`
         * 
         * @return builder
         * 
         */
        public Builder webReputation(@Nullable Output<String> webReputation) {
            $.webReputation = webReputation;
            return this;
        }

        /**
         * @param webReputation The web reputation of the policy definition - Choices: `high-risk`, `suspicious`, `moderate-risk`, `low-risk`,
         * `trustworthy`
         * 
         * @return builder
         * 
         */
        public Builder webReputation(String webReputation) {
            return webReputation(Output.of(webReputation));
        }

        public UrlFilteringPolicyDefinitionArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("UrlFilteringPolicyDefinitionArgs", "description");
            }
            return $;
        }
    }

}
