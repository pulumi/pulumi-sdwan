// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber;
import com.pulumi.sdwan.outputs.GetCiscoSystemFeatureTemplateObjectTracker;
import com.pulumi.sdwan.outputs.GetCiscoSystemFeatureTemplateTracker;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCiscoSystemFeatureTemplateResult {
    /**
     * @return Collect admin-tech before reboot due to daemon failure
     * 
     */
    private Boolean adminTechOnFailure;
    /**
     * @return Variable name
     * 
     */
    private String adminTechOnFailureVariable;
    /**
     * @return Set the affinity group number for router
     * 
     */
    private Integer affinityGroupNumber;
    /**
     * @return Variable name
     * 
     */
    private String affinityGroupNumberVariable;
    /**
     * @return Variable name
     * 
     */
    private String affinityGroupPreferenceVariable;
    /**
     * @return Set the affinity group preference
     * 
     */
    private List<Integer> affinityGroupPreferences;
    /**
     * @return Set the console baud rate
     * 
     */
    private String consoleBaudRate;
    /**
     * @return Variable name
     * 
     */
    private String consoleBaudRateVariable;
    /**
     * @return Set the policer rate for control sessions
     * 
     */
    private Integer controlSessionPps;
    /**
     * @return Variable name
     * 
     */
    private String controlSessionPpsVariable;
    /**
     * @return Variable name
     * 
     */
    private String controllerGroupListVariable;
    /**
     * @return Configure a list of comma-separated device groups
     * 
     */
    private List<Integer> controllerGroupLists;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return Device groups (Use comma(,) for multiple groups)
     * 
     */
    private List<String> deviceGroups;
    /**
     * @return Variable name
     * 
     */
    private String deviceGroupsVariable;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return Enable migration mode to Multi-Region Fabric
     * 
     */
    private String enableMrfMigration;
    /**
     * @return Enhanced App Aware Routing
     * 
     */
    private String enhancedAppAwareRouting;
    /**
     * @return Variable name
     * 
     */
    private String enhancedAppAwareRoutingVariable;
    /**
     * @return Enable Geo fencing
     * 
     */
    private Boolean geoFencing;
    /**
     * @return Set the device’s geo fencing range
     * 
     */
    private Integer geoFencingRange;
    /**
     * @return Variable name
     * 
     */
    private String geoFencingRangeVariable;
    /**
     * @return Enable Geo fencing
     * 
     */
    private Boolean geoFencingSms;
    /**
     * @return Set device’s geo fencing SMS phone number
     * 
     */
    private List<GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber> geoFencingSmsPhoneNumbers;
    /**
     * @return Set the hostname
     * 
     */
    private String hostname;
    /**
     * @return Variable name
     * 
     */
    private String hostnameVariable;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Idle CLI timeout in minutes
     * 
     */
    private Integer idleTimeout;
    /**
     * @return Variable name
     * 
     */
    private String idleTimeoutVariable;
    /**
     * @return Set the device’s physical latitude
     * 
     */
    private Double latitude;
    /**
     * @return Variable name
     * 
     */
    private String latitudeVariable;
    /**
     * @return Set the location of the device
     * 
     */
    private String location;
    /**
     * @return Variable name
     * 
     */
    private String locationVariable;
    /**
     * @return Set the device’s physical longitude
     * 
     */
    private Double longitude;
    /**
     * @return Variable name
     * 
     */
    private String longitudeVariable;
    /**
     * @return Set the maximum number of OMP sessions \n\n the device can have
     * 
     */
    private Integer maxOmpSessions;
    /**
     * @return Variable name
     * 
     */
    private String maxOmpSessionsVariable;
    /**
     * @return Set BGP community during migration from BGP-core based network
     * 
     */
    private Integer migrationBgpCommunity;
    /**
     * @return Device is multi-tenant
     * 
     */
    private Boolean multiTenant;
    /**
     * @return Variable name
     * 
     */
    private String multiTenantVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Object Track configuration
     * 
     */
    private List<GetCiscoSystemFeatureTemplateObjectTracker> objectTrackers;
    /**
     * @return Enable or disable On-demand Tunnel
     * 
     */
    private Boolean onDemandTunnel;
    /**
     * @return Idle CLI timeout in minutes
     * 
     */
    private Integer onDemandTunnelIdleTimeout;
    /**
     * @return Variable name
     * 
     */
    private String onDemandTunnelIdleTimeoutVariable;
    /**
     * @return Variable name
     * 
     */
    private String onDemandTunnelVariable;
    /**
     * @return Set the Overlay ID
     * 
     */
    private Integer overlayId;
    /**
     * @return Variable name
     * 
     */
    private String overlayIdVariable;
    /**
     * @return Enable port hopping
     * 
     */
    private Boolean portHopping;
    /**
     * @return Variable name
     * 
     */
    private String portHoppingVariable;
    /**
     * @return Set the TLOC port offset when multiple devices are behind a NAT
     * 
     */
    private Integer portOffset;
    /**
     * @return Variable name
     * 
     */
    private String portOffsetVariable;
    /**
     * @return Set region ID
     * 
     */
    private Integer regionId;
    /**
     * @return Variable name
     * 
     */
    private String regionIdVariable;
    /**
     * @return Set the role for router
     * 
     */
    private String role;
    /**
     * @return Variable name
     * 
     */
    private String roleVariable;
    /**
     * @return Set secondary region ID
     * 
     */
    private Integer secondaryRegionId;
    /**
     * @return Variable name
     * 
     */
    private String secondaryRegionIdVariable;
    /**
     * @return Set the site identifier
     * 
     */
    private Integer siteId;
    /**
     * @return Variable name
     * 
     */
    private String siteIdVariable;
    /**
     * @return Set a text description of the device
     * 
     */
    private String systemDescription;
    /**
     * @return Variable name
     * 
     */
    private String systemDescriptionVariable;
    /**
     * @return Set the system IP address
     * 
     */
    private String systemIp;
    /**
     * @return Variable name
     * 
     */
    private String systemIpVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return Set the timezone
     * 
     */
    private String timezone;
    /**
     * @return Variable name
     * 
     */
    private String timezoneVariable;
    /**
     * @return Enable or disable default gateway tracking
     * 
     */
    private Boolean trackDefaultGateway;
    /**
     * @return Variable name
     * 
     */
    private String trackDefaultGatewayVariable;
    /**
     * @return OMP Tag attached to routes based on interface tracking
     * 
     */
    private Integer trackInterfaceTag;
    /**
     * @return Variable name
     * 
     */
    private String trackInterfaceTagVariable;
    /**
     * @return Configure tracking of transport
     * 
     */
    private Boolean trackTransport;
    /**
     * @return Variable name
     * 
     */
    private String trackTransportVariable;
    /**
     * @return Tracker configuration
     * 
     */
    private List<GetCiscoSystemFeatureTemplateTracker> trackers;
    /**
     * @return Enable transport gateway
     * 
     */
    private Boolean transportGateway;
    /**
     * @return Variable name
     * 
     */
    private String transportGatewayVariable;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetCiscoSystemFeatureTemplateResult() {}
    /**
     * @return Collect admin-tech before reboot due to daemon failure
     * 
     */
    public Boolean adminTechOnFailure() {
        return this.adminTechOnFailure;
    }
    /**
     * @return Variable name
     * 
     */
    public String adminTechOnFailureVariable() {
        return this.adminTechOnFailureVariable;
    }
    /**
     * @return Set the affinity group number for router
     * 
     */
    public Integer affinityGroupNumber() {
        return this.affinityGroupNumber;
    }
    /**
     * @return Variable name
     * 
     */
    public String affinityGroupNumberVariable() {
        return this.affinityGroupNumberVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String affinityGroupPreferenceVariable() {
        return this.affinityGroupPreferenceVariable;
    }
    /**
     * @return Set the affinity group preference
     * 
     */
    public List<Integer> affinityGroupPreferences() {
        return this.affinityGroupPreferences;
    }
    /**
     * @return Set the console baud rate
     * 
     */
    public String consoleBaudRate() {
        return this.consoleBaudRate;
    }
    /**
     * @return Variable name
     * 
     */
    public String consoleBaudRateVariable() {
        return this.consoleBaudRateVariable;
    }
    /**
     * @return Set the policer rate for control sessions
     * 
     */
    public Integer controlSessionPps() {
        return this.controlSessionPps;
    }
    /**
     * @return Variable name
     * 
     */
    public String controlSessionPpsVariable() {
        return this.controlSessionPpsVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String controllerGroupListVariable() {
        return this.controllerGroupListVariable;
    }
    /**
     * @return Configure a list of comma-separated device groups
     * 
     */
    public List<Integer> controllerGroupLists() {
        return this.controllerGroupLists;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Device groups (Use comma(,) for multiple groups)
     * 
     */
    public List<String> deviceGroups() {
        return this.deviceGroups;
    }
    /**
     * @return Variable name
     * 
     */
    public String deviceGroupsVariable() {
        return this.deviceGroupsVariable;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return Enable migration mode to Multi-Region Fabric
     * 
     */
    public String enableMrfMigration() {
        return this.enableMrfMigration;
    }
    /**
     * @return Enhanced App Aware Routing
     * 
     */
    public String enhancedAppAwareRouting() {
        return this.enhancedAppAwareRouting;
    }
    /**
     * @return Variable name
     * 
     */
    public String enhancedAppAwareRoutingVariable() {
        return this.enhancedAppAwareRoutingVariable;
    }
    /**
     * @return Enable Geo fencing
     * 
     */
    public Boolean geoFencing() {
        return this.geoFencing;
    }
    /**
     * @return Set the device’s geo fencing range
     * 
     */
    public Integer geoFencingRange() {
        return this.geoFencingRange;
    }
    /**
     * @return Variable name
     * 
     */
    public String geoFencingRangeVariable() {
        return this.geoFencingRangeVariable;
    }
    /**
     * @return Enable Geo fencing
     * 
     */
    public Boolean geoFencingSms() {
        return this.geoFencingSms;
    }
    /**
     * @return Set device’s geo fencing SMS phone number
     * 
     */
    public List<GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber> geoFencingSmsPhoneNumbers() {
        return this.geoFencingSmsPhoneNumbers;
    }
    /**
     * @return Set the hostname
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return Variable name
     * 
     */
    public String hostnameVariable() {
        return this.hostnameVariable;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Idle CLI timeout in minutes
     * 
     */
    public Integer idleTimeout() {
        return this.idleTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String idleTimeoutVariable() {
        return this.idleTimeoutVariable;
    }
    /**
     * @return Set the device’s physical latitude
     * 
     */
    public Double latitude() {
        return this.latitude;
    }
    /**
     * @return Variable name
     * 
     */
    public String latitudeVariable() {
        return this.latitudeVariable;
    }
    /**
     * @return Set the location of the device
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return Variable name
     * 
     */
    public String locationVariable() {
        return this.locationVariable;
    }
    /**
     * @return Set the device’s physical longitude
     * 
     */
    public Double longitude() {
        return this.longitude;
    }
    /**
     * @return Variable name
     * 
     */
    public String longitudeVariable() {
        return this.longitudeVariable;
    }
    /**
     * @return Set the maximum number of OMP sessions \n\n the device can have
     * 
     */
    public Integer maxOmpSessions() {
        return this.maxOmpSessions;
    }
    /**
     * @return Variable name
     * 
     */
    public String maxOmpSessionsVariable() {
        return this.maxOmpSessionsVariable;
    }
    /**
     * @return Set BGP community during migration from BGP-core based network
     * 
     */
    public Integer migrationBgpCommunity() {
        return this.migrationBgpCommunity;
    }
    /**
     * @return Device is multi-tenant
     * 
     */
    public Boolean multiTenant() {
        return this.multiTenant;
    }
    /**
     * @return Variable name
     * 
     */
    public String multiTenantVariable() {
        return this.multiTenantVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Object Track configuration
     * 
     */
    public List<GetCiscoSystemFeatureTemplateObjectTracker> objectTrackers() {
        return this.objectTrackers;
    }
    /**
     * @return Enable or disable On-demand Tunnel
     * 
     */
    public Boolean onDemandTunnel() {
        return this.onDemandTunnel;
    }
    /**
     * @return Idle CLI timeout in minutes
     * 
     */
    public Integer onDemandTunnelIdleTimeout() {
        return this.onDemandTunnelIdleTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String onDemandTunnelIdleTimeoutVariable() {
        return this.onDemandTunnelIdleTimeoutVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String onDemandTunnelVariable() {
        return this.onDemandTunnelVariable;
    }
    /**
     * @return Set the Overlay ID
     * 
     */
    public Integer overlayId() {
        return this.overlayId;
    }
    /**
     * @return Variable name
     * 
     */
    public String overlayIdVariable() {
        return this.overlayIdVariable;
    }
    /**
     * @return Enable port hopping
     * 
     */
    public Boolean portHopping() {
        return this.portHopping;
    }
    /**
     * @return Variable name
     * 
     */
    public String portHoppingVariable() {
        return this.portHoppingVariable;
    }
    /**
     * @return Set the TLOC port offset when multiple devices are behind a NAT
     * 
     */
    public Integer portOffset() {
        return this.portOffset;
    }
    /**
     * @return Variable name
     * 
     */
    public String portOffsetVariable() {
        return this.portOffsetVariable;
    }
    /**
     * @return Set region ID
     * 
     */
    public Integer regionId() {
        return this.regionId;
    }
    /**
     * @return Variable name
     * 
     */
    public String regionIdVariable() {
        return this.regionIdVariable;
    }
    /**
     * @return Set the role for router
     * 
     */
    public String role() {
        return this.role;
    }
    /**
     * @return Variable name
     * 
     */
    public String roleVariable() {
        return this.roleVariable;
    }
    /**
     * @return Set secondary region ID
     * 
     */
    public Integer secondaryRegionId() {
        return this.secondaryRegionId;
    }
    /**
     * @return Variable name
     * 
     */
    public String secondaryRegionIdVariable() {
        return this.secondaryRegionIdVariable;
    }
    /**
     * @return Set the site identifier
     * 
     */
    public Integer siteId() {
        return this.siteId;
    }
    /**
     * @return Variable name
     * 
     */
    public String siteIdVariable() {
        return this.siteIdVariable;
    }
    /**
     * @return Set a text description of the device
     * 
     */
    public String systemDescription() {
        return this.systemDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String systemDescriptionVariable() {
        return this.systemDescriptionVariable;
    }
    /**
     * @return Set the system IP address
     * 
     */
    public String systemIp() {
        return this.systemIp;
    }
    /**
     * @return Variable name
     * 
     */
    public String systemIpVariable() {
        return this.systemIpVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return Set the timezone
     * 
     */
    public String timezone() {
        return this.timezone;
    }
    /**
     * @return Variable name
     * 
     */
    public String timezoneVariable() {
        return this.timezoneVariable;
    }
    /**
     * @return Enable or disable default gateway tracking
     * 
     */
    public Boolean trackDefaultGateway() {
        return this.trackDefaultGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackDefaultGatewayVariable() {
        return this.trackDefaultGatewayVariable;
    }
    /**
     * @return OMP Tag attached to routes based on interface tracking
     * 
     */
    public Integer trackInterfaceTag() {
        return this.trackInterfaceTag;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackInterfaceTagVariable() {
        return this.trackInterfaceTagVariable;
    }
    /**
     * @return Configure tracking of transport
     * 
     */
    public Boolean trackTransport() {
        return this.trackTransport;
    }
    /**
     * @return Variable name
     * 
     */
    public String trackTransportVariable() {
        return this.trackTransportVariable;
    }
    /**
     * @return Tracker configuration
     * 
     */
    public List<GetCiscoSystemFeatureTemplateTracker> trackers() {
        return this.trackers;
    }
    /**
     * @return Enable transport gateway
     * 
     */
    public Boolean transportGateway() {
        return this.transportGateway;
    }
    /**
     * @return Variable name
     * 
     */
    public String transportGatewayVariable() {
        return this.transportGatewayVariable;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCiscoSystemFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean adminTechOnFailure;
        private String adminTechOnFailureVariable;
        private Integer affinityGroupNumber;
        private String affinityGroupNumberVariable;
        private String affinityGroupPreferenceVariable;
        private List<Integer> affinityGroupPreferences;
        private String consoleBaudRate;
        private String consoleBaudRateVariable;
        private Integer controlSessionPps;
        private String controlSessionPpsVariable;
        private String controllerGroupListVariable;
        private List<Integer> controllerGroupLists;
        private String description;
        private List<String> deviceGroups;
        private String deviceGroupsVariable;
        private List<String> deviceTypes;
        private String enableMrfMigration;
        private String enhancedAppAwareRouting;
        private String enhancedAppAwareRoutingVariable;
        private Boolean geoFencing;
        private Integer geoFencingRange;
        private String geoFencingRangeVariable;
        private Boolean geoFencingSms;
        private List<GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber> geoFencingSmsPhoneNumbers;
        private String hostname;
        private String hostnameVariable;
        private String id;
        private Integer idleTimeout;
        private String idleTimeoutVariable;
        private Double latitude;
        private String latitudeVariable;
        private String location;
        private String locationVariable;
        private Double longitude;
        private String longitudeVariable;
        private Integer maxOmpSessions;
        private String maxOmpSessionsVariable;
        private Integer migrationBgpCommunity;
        private Boolean multiTenant;
        private String multiTenantVariable;
        private String name;
        private List<GetCiscoSystemFeatureTemplateObjectTracker> objectTrackers;
        private Boolean onDemandTunnel;
        private Integer onDemandTunnelIdleTimeout;
        private String onDemandTunnelIdleTimeoutVariable;
        private String onDemandTunnelVariable;
        private Integer overlayId;
        private String overlayIdVariable;
        private Boolean portHopping;
        private String portHoppingVariable;
        private Integer portOffset;
        private String portOffsetVariable;
        private Integer regionId;
        private String regionIdVariable;
        private String role;
        private String roleVariable;
        private Integer secondaryRegionId;
        private String secondaryRegionIdVariable;
        private Integer siteId;
        private String siteIdVariable;
        private String systemDescription;
        private String systemDescriptionVariable;
        private String systemIp;
        private String systemIpVariable;
        private String templateType;
        private String timezone;
        private String timezoneVariable;
        private Boolean trackDefaultGateway;
        private String trackDefaultGatewayVariable;
        private Integer trackInterfaceTag;
        private String trackInterfaceTagVariable;
        private Boolean trackTransport;
        private String trackTransportVariable;
        private List<GetCiscoSystemFeatureTemplateTracker> trackers;
        private Boolean transportGateway;
        private String transportGatewayVariable;
        private Integer version;
        public Builder() {}
        public Builder(GetCiscoSystemFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.adminTechOnFailure = defaults.adminTechOnFailure;
    	      this.adminTechOnFailureVariable = defaults.adminTechOnFailureVariable;
    	      this.affinityGroupNumber = defaults.affinityGroupNumber;
    	      this.affinityGroupNumberVariable = defaults.affinityGroupNumberVariable;
    	      this.affinityGroupPreferenceVariable = defaults.affinityGroupPreferenceVariable;
    	      this.affinityGroupPreferences = defaults.affinityGroupPreferences;
    	      this.consoleBaudRate = defaults.consoleBaudRate;
    	      this.consoleBaudRateVariable = defaults.consoleBaudRateVariable;
    	      this.controlSessionPps = defaults.controlSessionPps;
    	      this.controlSessionPpsVariable = defaults.controlSessionPpsVariable;
    	      this.controllerGroupListVariable = defaults.controllerGroupListVariable;
    	      this.controllerGroupLists = defaults.controllerGroupLists;
    	      this.description = defaults.description;
    	      this.deviceGroups = defaults.deviceGroups;
    	      this.deviceGroupsVariable = defaults.deviceGroupsVariable;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.enableMrfMigration = defaults.enableMrfMigration;
    	      this.enhancedAppAwareRouting = defaults.enhancedAppAwareRouting;
    	      this.enhancedAppAwareRoutingVariable = defaults.enhancedAppAwareRoutingVariable;
    	      this.geoFencing = defaults.geoFencing;
    	      this.geoFencingRange = defaults.geoFencingRange;
    	      this.geoFencingRangeVariable = defaults.geoFencingRangeVariable;
    	      this.geoFencingSms = defaults.geoFencingSms;
    	      this.geoFencingSmsPhoneNumbers = defaults.geoFencingSmsPhoneNumbers;
    	      this.hostname = defaults.hostname;
    	      this.hostnameVariable = defaults.hostnameVariable;
    	      this.id = defaults.id;
    	      this.idleTimeout = defaults.idleTimeout;
    	      this.idleTimeoutVariable = defaults.idleTimeoutVariable;
    	      this.latitude = defaults.latitude;
    	      this.latitudeVariable = defaults.latitudeVariable;
    	      this.location = defaults.location;
    	      this.locationVariable = defaults.locationVariable;
    	      this.longitude = defaults.longitude;
    	      this.longitudeVariable = defaults.longitudeVariable;
    	      this.maxOmpSessions = defaults.maxOmpSessions;
    	      this.maxOmpSessionsVariable = defaults.maxOmpSessionsVariable;
    	      this.migrationBgpCommunity = defaults.migrationBgpCommunity;
    	      this.multiTenant = defaults.multiTenant;
    	      this.multiTenantVariable = defaults.multiTenantVariable;
    	      this.name = defaults.name;
    	      this.objectTrackers = defaults.objectTrackers;
    	      this.onDemandTunnel = defaults.onDemandTunnel;
    	      this.onDemandTunnelIdleTimeout = defaults.onDemandTunnelIdleTimeout;
    	      this.onDemandTunnelIdleTimeoutVariable = defaults.onDemandTunnelIdleTimeoutVariable;
    	      this.onDemandTunnelVariable = defaults.onDemandTunnelVariable;
    	      this.overlayId = defaults.overlayId;
    	      this.overlayIdVariable = defaults.overlayIdVariable;
    	      this.portHopping = defaults.portHopping;
    	      this.portHoppingVariable = defaults.portHoppingVariable;
    	      this.portOffset = defaults.portOffset;
    	      this.portOffsetVariable = defaults.portOffsetVariable;
    	      this.regionId = defaults.regionId;
    	      this.regionIdVariable = defaults.regionIdVariable;
    	      this.role = defaults.role;
    	      this.roleVariable = defaults.roleVariable;
    	      this.secondaryRegionId = defaults.secondaryRegionId;
    	      this.secondaryRegionIdVariable = defaults.secondaryRegionIdVariable;
    	      this.siteId = defaults.siteId;
    	      this.siteIdVariable = defaults.siteIdVariable;
    	      this.systemDescription = defaults.systemDescription;
    	      this.systemDescriptionVariable = defaults.systemDescriptionVariable;
    	      this.systemIp = defaults.systemIp;
    	      this.systemIpVariable = defaults.systemIpVariable;
    	      this.templateType = defaults.templateType;
    	      this.timezone = defaults.timezone;
    	      this.timezoneVariable = defaults.timezoneVariable;
    	      this.trackDefaultGateway = defaults.trackDefaultGateway;
    	      this.trackDefaultGatewayVariable = defaults.trackDefaultGatewayVariable;
    	      this.trackInterfaceTag = defaults.trackInterfaceTag;
    	      this.trackInterfaceTagVariable = defaults.trackInterfaceTagVariable;
    	      this.trackTransport = defaults.trackTransport;
    	      this.trackTransportVariable = defaults.trackTransportVariable;
    	      this.trackers = defaults.trackers;
    	      this.transportGateway = defaults.transportGateway;
    	      this.transportGatewayVariable = defaults.transportGatewayVariable;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder adminTechOnFailure(Boolean adminTechOnFailure) {
            if (adminTechOnFailure == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "adminTechOnFailure");
            }
            this.adminTechOnFailure = adminTechOnFailure;
            return this;
        }
        @CustomType.Setter
        public Builder adminTechOnFailureVariable(String adminTechOnFailureVariable) {
            if (adminTechOnFailureVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "adminTechOnFailureVariable");
            }
            this.adminTechOnFailureVariable = adminTechOnFailureVariable;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupNumber(Integer affinityGroupNumber) {
            if (affinityGroupNumber == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "affinityGroupNumber");
            }
            this.affinityGroupNumber = affinityGroupNumber;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupNumberVariable(String affinityGroupNumberVariable) {
            if (affinityGroupNumberVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "affinityGroupNumberVariable");
            }
            this.affinityGroupNumberVariable = affinityGroupNumberVariable;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupPreferenceVariable(String affinityGroupPreferenceVariable) {
            if (affinityGroupPreferenceVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "affinityGroupPreferenceVariable");
            }
            this.affinityGroupPreferenceVariable = affinityGroupPreferenceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder affinityGroupPreferences(List<Integer> affinityGroupPreferences) {
            if (affinityGroupPreferences == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "affinityGroupPreferences");
            }
            this.affinityGroupPreferences = affinityGroupPreferences;
            return this;
        }
        public Builder affinityGroupPreferences(Integer... affinityGroupPreferences) {
            return affinityGroupPreferences(List.of(affinityGroupPreferences));
        }
        @CustomType.Setter
        public Builder consoleBaudRate(String consoleBaudRate) {
            if (consoleBaudRate == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "consoleBaudRate");
            }
            this.consoleBaudRate = consoleBaudRate;
            return this;
        }
        @CustomType.Setter
        public Builder consoleBaudRateVariable(String consoleBaudRateVariable) {
            if (consoleBaudRateVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "consoleBaudRateVariable");
            }
            this.consoleBaudRateVariable = consoleBaudRateVariable;
            return this;
        }
        @CustomType.Setter
        public Builder controlSessionPps(Integer controlSessionPps) {
            if (controlSessionPps == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "controlSessionPps");
            }
            this.controlSessionPps = controlSessionPps;
            return this;
        }
        @CustomType.Setter
        public Builder controlSessionPpsVariable(String controlSessionPpsVariable) {
            if (controlSessionPpsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "controlSessionPpsVariable");
            }
            this.controlSessionPpsVariable = controlSessionPpsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder controllerGroupListVariable(String controllerGroupListVariable) {
            if (controllerGroupListVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "controllerGroupListVariable");
            }
            this.controllerGroupListVariable = controllerGroupListVariable;
            return this;
        }
        @CustomType.Setter
        public Builder controllerGroupLists(List<Integer> controllerGroupLists) {
            if (controllerGroupLists == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "controllerGroupLists");
            }
            this.controllerGroupLists = controllerGroupLists;
            return this;
        }
        public Builder controllerGroupLists(Integer... controllerGroupLists) {
            return controllerGroupLists(List.of(controllerGroupLists));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceGroups(List<String> deviceGroups) {
            if (deviceGroups == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "deviceGroups");
            }
            this.deviceGroups = deviceGroups;
            return this;
        }
        public Builder deviceGroups(String... deviceGroups) {
            return deviceGroups(List.of(deviceGroups));
        }
        @CustomType.Setter
        public Builder deviceGroupsVariable(String deviceGroupsVariable) {
            if (deviceGroupsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "deviceGroupsVariable");
            }
            this.deviceGroupsVariable = deviceGroupsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder enableMrfMigration(String enableMrfMigration) {
            if (enableMrfMigration == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "enableMrfMigration");
            }
            this.enableMrfMigration = enableMrfMigration;
            return this;
        }
        @CustomType.Setter
        public Builder enhancedAppAwareRouting(String enhancedAppAwareRouting) {
            if (enhancedAppAwareRouting == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "enhancedAppAwareRouting");
            }
            this.enhancedAppAwareRouting = enhancedAppAwareRouting;
            return this;
        }
        @CustomType.Setter
        public Builder enhancedAppAwareRoutingVariable(String enhancedAppAwareRoutingVariable) {
            if (enhancedAppAwareRoutingVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "enhancedAppAwareRoutingVariable");
            }
            this.enhancedAppAwareRoutingVariable = enhancedAppAwareRoutingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder geoFencing(Boolean geoFencing) {
            if (geoFencing == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "geoFencing");
            }
            this.geoFencing = geoFencing;
            return this;
        }
        @CustomType.Setter
        public Builder geoFencingRange(Integer geoFencingRange) {
            if (geoFencingRange == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "geoFencingRange");
            }
            this.geoFencingRange = geoFencingRange;
            return this;
        }
        @CustomType.Setter
        public Builder geoFencingRangeVariable(String geoFencingRangeVariable) {
            if (geoFencingRangeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "geoFencingRangeVariable");
            }
            this.geoFencingRangeVariable = geoFencingRangeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder geoFencingSms(Boolean geoFencingSms) {
            if (geoFencingSms == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "geoFencingSms");
            }
            this.geoFencingSms = geoFencingSms;
            return this;
        }
        @CustomType.Setter
        public Builder geoFencingSmsPhoneNumbers(List<GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber> geoFencingSmsPhoneNumbers) {
            if (geoFencingSmsPhoneNumbers == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "geoFencingSmsPhoneNumbers");
            }
            this.geoFencingSmsPhoneNumbers = geoFencingSmsPhoneNumbers;
            return this;
        }
        public Builder geoFencingSmsPhoneNumbers(GetCiscoSystemFeatureTemplateGeoFencingSmsPhoneNumber... geoFencingSmsPhoneNumbers) {
            return geoFencingSmsPhoneNumbers(List.of(geoFencingSmsPhoneNumbers));
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameVariable(String hostnameVariable) {
            if (hostnameVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "hostnameVariable");
            }
            this.hostnameVariable = hostnameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeout(Integer idleTimeout) {
            if (idleTimeout == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "idleTimeout");
            }
            this.idleTimeout = idleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder idleTimeoutVariable(String idleTimeoutVariable) {
            if (idleTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "idleTimeoutVariable");
            }
            this.idleTimeoutVariable = idleTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder latitude(Double latitude) {
            if (latitude == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "latitude");
            }
            this.latitude = latitude;
            return this;
        }
        @CustomType.Setter
        public Builder latitudeVariable(String latitudeVariable) {
            if (latitudeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "latitudeVariable");
            }
            this.latitudeVariable = latitudeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder locationVariable(String locationVariable) {
            if (locationVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "locationVariable");
            }
            this.locationVariable = locationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder longitude(Double longitude) {
            if (longitude == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "longitude");
            }
            this.longitude = longitude;
            return this;
        }
        @CustomType.Setter
        public Builder longitudeVariable(String longitudeVariable) {
            if (longitudeVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "longitudeVariable");
            }
            this.longitudeVariable = longitudeVariable;
            return this;
        }
        @CustomType.Setter
        public Builder maxOmpSessions(Integer maxOmpSessions) {
            if (maxOmpSessions == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "maxOmpSessions");
            }
            this.maxOmpSessions = maxOmpSessions;
            return this;
        }
        @CustomType.Setter
        public Builder maxOmpSessionsVariable(String maxOmpSessionsVariable) {
            if (maxOmpSessionsVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "maxOmpSessionsVariable");
            }
            this.maxOmpSessionsVariable = maxOmpSessionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder migrationBgpCommunity(Integer migrationBgpCommunity) {
            if (migrationBgpCommunity == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "migrationBgpCommunity");
            }
            this.migrationBgpCommunity = migrationBgpCommunity;
            return this;
        }
        @CustomType.Setter
        public Builder multiTenant(Boolean multiTenant) {
            if (multiTenant == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "multiTenant");
            }
            this.multiTenant = multiTenant;
            return this;
        }
        @CustomType.Setter
        public Builder multiTenantVariable(String multiTenantVariable) {
            if (multiTenantVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "multiTenantVariable");
            }
            this.multiTenantVariable = multiTenantVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder objectTrackers(List<GetCiscoSystemFeatureTemplateObjectTracker> objectTrackers) {
            if (objectTrackers == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "objectTrackers");
            }
            this.objectTrackers = objectTrackers;
            return this;
        }
        public Builder objectTrackers(GetCiscoSystemFeatureTemplateObjectTracker... objectTrackers) {
            return objectTrackers(List.of(objectTrackers));
        }
        @CustomType.Setter
        public Builder onDemandTunnel(Boolean onDemandTunnel) {
            if (onDemandTunnel == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "onDemandTunnel");
            }
            this.onDemandTunnel = onDemandTunnel;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandTunnelIdleTimeout(Integer onDemandTunnelIdleTimeout) {
            if (onDemandTunnelIdleTimeout == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "onDemandTunnelIdleTimeout");
            }
            this.onDemandTunnelIdleTimeout = onDemandTunnelIdleTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandTunnelIdleTimeoutVariable(String onDemandTunnelIdleTimeoutVariable) {
            if (onDemandTunnelIdleTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "onDemandTunnelIdleTimeoutVariable");
            }
            this.onDemandTunnelIdleTimeoutVariable = onDemandTunnelIdleTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder onDemandTunnelVariable(String onDemandTunnelVariable) {
            if (onDemandTunnelVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "onDemandTunnelVariable");
            }
            this.onDemandTunnelVariable = onDemandTunnelVariable;
            return this;
        }
        @CustomType.Setter
        public Builder overlayId(Integer overlayId) {
            if (overlayId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "overlayId");
            }
            this.overlayId = overlayId;
            return this;
        }
        @CustomType.Setter
        public Builder overlayIdVariable(String overlayIdVariable) {
            if (overlayIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "overlayIdVariable");
            }
            this.overlayIdVariable = overlayIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder portHopping(Boolean portHopping) {
            if (portHopping == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "portHopping");
            }
            this.portHopping = portHopping;
            return this;
        }
        @CustomType.Setter
        public Builder portHoppingVariable(String portHoppingVariable) {
            if (portHoppingVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "portHoppingVariable");
            }
            this.portHoppingVariable = portHoppingVariable;
            return this;
        }
        @CustomType.Setter
        public Builder portOffset(Integer portOffset) {
            if (portOffset == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "portOffset");
            }
            this.portOffset = portOffset;
            return this;
        }
        @CustomType.Setter
        public Builder portOffsetVariable(String portOffsetVariable) {
            if (portOffsetVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "portOffsetVariable");
            }
            this.portOffsetVariable = portOffsetVariable;
            return this;
        }
        @CustomType.Setter
        public Builder regionId(Integer regionId) {
            if (regionId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "regionId");
            }
            this.regionId = regionId;
            return this;
        }
        @CustomType.Setter
        public Builder regionIdVariable(String regionIdVariable) {
            if (regionIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "regionIdVariable");
            }
            this.regionIdVariable = regionIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder role(String role) {
            if (role == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "role");
            }
            this.role = role;
            return this;
        }
        @CustomType.Setter
        public Builder roleVariable(String roleVariable) {
            if (roleVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "roleVariable");
            }
            this.roleVariable = roleVariable;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryRegionId(Integer secondaryRegionId) {
            if (secondaryRegionId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "secondaryRegionId");
            }
            this.secondaryRegionId = secondaryRegionId;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryRegionIdVariable(String secondaryRegionIdVariable) {
            if (secondaryRegionIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "secondaryRegionIdVariable");
            }
            this.secondaryRegionIdVariable = secondaryRegionIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder siteId(Integer siteId) {
            if (siteId == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "siteId");
            }
            this.siteId = siteId;
            return this;
        }
        @CustomType.Setter
        public Builder siteIdVariable(String siteIdVariable) {
            if (siteIdVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "siteIdVariable");
            }
            this.siteIdVariable = siteIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder systemDescription(String systemDescription) {
            if (systemDescription == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "systemDescription");
            }
            this.systemDescription = systemDescription;
            return this;
        }
        @CustomType.Setter
        public Builder systemDescriptionVariable(String systemDescriptionVariable) {
            if (systemDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "systemDescriptionVariable");
            }
            this.systemDescriptionVariable = systemDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder systemIp(String systemIp) {
            if (systemIp == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "systemIp");
            }
            this.systemIp = systemIp;
            return this;
        }
        @CustomType.Setter
        public Builder systemIpVariable(String systemIpVariable) {
            if (systemIpVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "systemIpVariable");
            }
            this.systemIpVariable = systemIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder timezone(String timezone) {
            if (timezone == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "timezone");
            }
            this.timezone = timezone;
            return this;
        }
        @CustomType.Setter
        public Builder timezoneVariable(String timezoneVariable) {
            if (timezoneVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "timezoneVariable");
            }
            this.timezoneVariable = timezoneVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackDefaultGateway(Boolean trackDefaultGateway) {
            if (trackDefaultGateway == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackDefaultGateway");
            }
            this.trackDefaultGateway = trackDefaultGateway;
            return this;
        }
        @CustomType.Setter
        public Builder trackDefaultGatewayVariable(String trackDefaultGatewayVariable) {
            if (trackDefaultGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackDefaultGatewayVariable");
            }
            this.trackDefaultGatewayVariable = trackDefaultGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackInterfaceTag(Integer trackInterfaceTag) {
            if (trackInterfaceTag == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackInterfaceTag");
            }
            this.trackInterfaceTag = trackInterfaceTag;
            return this;
        }
        @CustomType.Setter
        public Builder trackInterfaceTagVariable(String trackInterfaceTagVariable) {
            if (trackInterfaceTagVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackInterfaceTagVariable");
            }
            this.trackInterfaceTagVariable = trackInterfaceTagVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackTransport(Boolean trackTransport) {
            if (trackTransport == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackTransport");
            }
            this.trackTransport = trackTransport;
            return this;
        }
        @CustomType.Setter
        public Builder trackTransportVariable(String trackTransportVariable) {
            if (trackTransportVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackTransportVariable");
            }
            this.trackTransportVariable = trackTransportVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackers(List<GetCiscoSystemFeatureTemplateTracker> trackers) {
            if (trackers == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "trackers");
            }
            this.trackers = trackers;
            return this;
        }
        public Builder trackers(GetCiscoSystemFeatureTemplateTracker... trackers) {
            return trackers(List.of(trackers));
        }
        @CustomType.Setter
        public Builder transportGateway(Boolean transportGateway) {
            if (transportGateway == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "transportGateway");
            }
            this.transportGateway = transportGateway;
            return this;
        }
        @CustomType.Setter
        public Builder transportGatewayVariable(String transportGatewayVariable) {
            if (transportGatewayVariable == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "transportGatewayVariable");
            }
            this.transportGatewayVariable = transportGatewayVariable;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetCiscoSystemFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetCiscoSystemFeatureTemplateResult build() {
            final var _resultValue = new GetCiscoSystemFeatureTemplateResult();
            _resultValue.adminTechOnFailure = adminTechOnFailure;
            _resultValue.adminTechOnFailureVariable = adminTechOnFailureVariable;
            _resultValue.affinityGroupNumber = affinityGroupNumber;
            _resultValue.affinityGroupNumberVariable = affinityGroupNumberVariable;
            _resultValue.affinityGroupPreferenceVariable = affinityGroupPreferenceVariable;
            _resultValue.affinityGroupPreferences = affinityGroupPreferences;
            _resultValue.consoleBaudRate = consoleBaudRate;
            _resultValue.consoleBaudRateVariable = consoleBaudRateVariable;
            _resultValue.controlSessionPps = controlSessionPps;
            _resultValue.controlSessionPpsVariable = controlSessionPpsVariable;
            _resultValue.controllerGroupListVariable = controllerGroupListVariable;
            _resultValue.controllerGroupLists = controllerGroupLists;
            _resultValue.description = description;
            _resultValue.deviceGroups = deviceGroups;
            _resultValue.deviceGroupsVariable = deviceGroupsVariable;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.enableMrfMigration = enableMrfMigration;
            _resultValue.enhancedAppAwareRouting = enhancedAppAwareRouting;
            _resultValue.enhancedAppAwareRoutingVariable = enhancedAppAwareRoutingVariable;
            _resultValue.geoFencing = geoFencing;
            _resultValue.geoFencingRange = geoFencingRange;
            _resultValue.geoFencingRangeVariable = geoFencingRangeVariable;
            _resultValue.geoFencingSms = geoFencingSms;
            _resultValue.geoFencingSmsPhoneNumbers = geoFencingSmsPhoneNumbers;
            _resultValue.hostname = hostname;
            _resultValue.hostnameVariable = hostnameVariable;
            _resultValue.id = id;
            _resultValue.idleTimeout = idleTimeout;
            _resultValue.idleTimeoutVariable = idleTimeoutVariable;
            _resultValue.latitude = latitude;
            _resultValue.latitudeVariable = latitudeVariable;
            _resultValue.location = location;
            _resultValue.locationVariable = locationVariable;
            _resultValue.longitude = longitude;
            _resultValue.longitudeVariable = longitudeVariable;
            _resultValue.maxOmpSessions = maxOmpSessions;
            _resultValue.maxOmpSessionsVariable = maxOmpSessionsVariable;
            _resultValue.migrationBgpCommunity = migrationBgpCommunity;
            _resultValue.multiTenant = multiTenant;
            _resultValue.multiTenantVariable = multiTenantVariable;
            _resultValue.name = name;
            _resultValue.objectTrackers = objectTrackers;
            _resultValue.onDemandTunnel = onDemandTunnel;
            _resultValue.onDemandTunnelIdleTimeout = onDemandTunnelIdleTimeout;
            _resultValue.onDemandTunnelIdleTimeoutVariable = onDemandTunnelIdleTimeoutVariable;
            _resultValue.onDemandTunnelVariable = onDemandTunnelVariable;
            _resultValue.overlayId = overlayId;
            _resultValue.overlayIdVariable = overlayIdVariable;
            _resultValue.portHopping = portHopping;
            _resultValue.portHoppingVariable = portHoppingVariable;
            _resultValue.portOffset = portOffset;
            _resultValue.portOffsetVariable = portOffsetVariable;
            _resultValue.regionId = regionId;
            _resultValue.regionIdVariable = regionIdVariable;
            _resultValue.role = role;
            _resultValue.roleVariable = roleVariable;
            _resultValue.secondaryRegionId = secondaryRegionId;
            _resultValue.secondaryRegionIdVariable = secondaryRegionIdVariable;
            _resultValue.siteId = siteId;
            _resultValue.siteIdVariable = siteIdVariable;
            _resultValue.systemDescription = systemDescription;
            _resultValue.systemDescriptionVariable = systemDescriptionVariable;
            _resultValue.systemIp = systemIp;
            _resultValue.systemIpVariable = systemIpVariable;
            _resultValue.templateType = templateType;
            _resultValue.timezone = timezone;
            _resultValue.timezoneVariable = timezoneVariable;
            _resultValue.trackDefaultGateway = trackDefaultGateway;
            _resultValue.trackDefaultGatewayVariable = trackDefaultGatewayVariable;
            _resultValue.trackInterfaceTag = trackInterfaceTag;
            _resultValue.trackInterfaceTagVariable = trackInterfaceTagVariable;
            _resultValue.trackTransport = trackTransport;
            _resultValue.trackTransportVariable = trackTransportVariable;
            _resultValue.trackers = trackers;
            _resultValue.transportGateway = transportGateway;
            _resultValue.transportGatewayVariable = transportGatewayVariable;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
