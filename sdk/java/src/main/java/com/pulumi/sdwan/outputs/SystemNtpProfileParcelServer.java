// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class SystemNtpProfileParcelServer {
    /**
     * @return Set authentication key for the server
     *   - Range: `1`-`65535`
     * 
     */
    private @Nullable Integer authenticationKey;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String authenticationKeyVariable;
    /**
     * @return Set hostname or IP address of server
     * 
     */
    private @Nullable String hostnameIpAddress;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String hostnameIpAddressVariable;
    /**
     * @return Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     * 
     */
    private @Nullable Integer ntpVersion;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ntpVersionVariable;
    /**
     * @return Prefer this NTP server
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean preferThisNtpServer;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String preferThisNtpServerVariable;
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    private @Nullable String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String sourceInterfaceVariable;
    /**
     * @return Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    private @Nullable Integer vpn;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String vpnVariable;

    private SystemNtpProfileParcelServer() {}
    /**
     * @return Set authentication key for the server
     *   - Range: `1`-`65535`
     * 
     */
    public Optional<Integer> authenticationKey() {
        return Optional.ofNullable(this.authenticationKey);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> authenticationKeyVariable() {
        return Optional.ofNullable(this.authenticationKeyVariable);
    }
    /**
     * @return Set hostname or IP address of server
     * 
     */
    public Optional<String> hostnameIpAddress() {
        return Optional.ofNullable(this.hostnameIpAddress);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> hostnameIpAddressVariable() {
        return Optional.ofNullable(this.hostnameIpAddressVariable);
    }
    /**
     * @return Set NTP version
     *   - Range: `1`-`4`
     *   - Default value: `4`
     * 
     */
    public Optional<Integer> ntpVersion() {
        return Optional.ofNullable(this.ntpVersion);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ntpVersionVariable() {
        return Optional.ofNullable(this.ntpVersionVariable);
    }
    /**
     * @return Prefer this NTP server
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> preferThisNtpServer() {
        return Optional.ofNullable(this.preferThisNtpServer);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> preferThisNtpServerVariable() {
        return Optional.ofNullable(this.preferThisNtpServerVariable);
    }
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    public Optional<String> sourceInterface() {
        return Optional.ofNullable(this.sourceInterface);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> sourceInterfaceVariable() {
        return Optional.ofNullable(this.sourceInterfaceVariable);
    }
    /**
     * @return Set VPN in which NTP server is located
     *   - Range: `0`-`65530`
     *   - Default value: `0`
     * 
     */
    public Optional<Integer> vpn() {
        return Optional.ofNullable(this.vpn);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> vpnVariable() {
        return Optional.ofNullable(this.vpnVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(SystemNtpProfileParcelServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer authenticationKey;
        private @Nullable String authenticationKeyVariable;
        private @Nullable String hostnameIpAddress;
        private @Nullable String hostnameIpAddressVariable;
        private @Nullable Integer ntpVersion;
        private @Nullable String ntpVersionVariable;
        private @Nullable Boolean preferThisNtpServer;
        private @Nullable String preferThisNtpServerVariable;
        private @Nullable String sourceInterface;
        private @Nullable String sourceInterfaceVariable;
        private @Nullable Integer vpn;
        private @Nullable String vpnVariable;
        public Builder() {}
        public Builder(SystemNtpProfileParcelServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationKey = defaults.authenticationKey;
    	      this.authenticationKeyVariable = defaults.authenticationKeyVariable;
    	      this.hostnameIpAddress = defaults.hostnameIpAddress;
    	      this.hostnameIpAddressVariable = defaults.hostnameIpAddressVariable;
    	      this.ntpVersion = defaults.ntpVersion;
    	      this.ntpVersionVariable = defaults.ntpVersionVariable;
    	      this.preferThisNtpServer = defaults.preferThisNtpServer;
    	      this.preferThisNtpServerVariable = defaults.preferThisNtpServerVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.vpn = defaults.vpn;
    	      this.vpnVariable = defaults.vpnVariable;
        }

        @CustomType.Setter
        public Builder authenticationKey(@Nullable Integer authenticationKey) {

            this.authenticationKey = authenticationKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationKeyVariable(@Nullable String authenticationKeyVariable) {

            this.authenticationKeyVariable = authenticationKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpAddress(@Nullable String hostnameIpAddress) {

            this.hostnameIpAddress = hostnameIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpAddressVariable(@Nullable String hostnameIpAddressVariable) {

            this.hostnameIpAddressVariable = hostnameIpAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ntpVersion(@Nullable Integer ntpVersion) {

            this.ntpVersion = ntpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ntpVersionVariable(@Nullable String ntpVersionVariable) {

            this.ntpVersionVariable = ntpVersionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder preferThisNtpServer(@Nullable Boolean preferThisNtpServer) {

            this.preferThisNtpServer = preferThisNtpServer;
            return this;
        }
        @CustomType.Setter
        public Builder preferThisNtpServerVariable(@Nullable String preferThisNtpServerVariable) {

            this.preferThisNtpServerVariable = preferThisNtpServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(@Nullable String sourceInterface) {

            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(@Nullable String sourceInterfaceVariable) {

            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpn(@Nullable Integer vpn) {

            this.vpn = vpn;
            return this;
        }
        @CustomType.Setter
        public Builder vpnVariable(@Nullable String vpnVariable) {

            this.vpnVariable = vpnVariable;
            return this;
        }
        public SystemNtpProfileParcelServer build() {
            final var _resultValue = new SystemNtpProfileParcelServer();
            _resultValue.authenticationKey = authenticationKey;
            _resultValue.authenticationKeyVariable = authenticationKeyVariable;
            _resultValue.hostnameIpAddress = hostnameIpAddress;
            _resultValue.hostnameIpAddressVariable = hostnameIpAddressVariable;
            _resultValue.ntpVersion = ntpVersion;
            _resultValue.ntpVersionVariable = ntpVersionVariable;
            _resultValue.preferThisNtpServer = preferThisNtpServer;
            _resultValue.preferThisNtpServerVariable = preferThisNtpServerVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.vpn = vpn;
            _resultValue.vpnVariable = vpnVariable;
            return _resultValue;
        }
    }
}
