// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.inputs.SystemSecurityFeatureKeyArgs;
import com.pulumi.sdwan.inputs.SystemSecurityFeatureKeychainArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SystemSecurityFeatureArgs extends com.pulumi.resources.ResourceArgs {

    public static final SystemSecurityFeatureArgs Empty = new SystemSecurityFeatureArgs();

    /**
     * Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
     * `512`
     * 
     */
    @Import(name="antiReplayWindow")
    private @Nullable Output<String> antiReplayWindow;

    /**
     * @return Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
     * `512`
     * 
     */
    public Optional<Output<String>> antiReplayWindow() {
        return Optional.ofNullable(this.antiReplayWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="antiReplayWindowVariable")
    private @Nullable Output<String> antiReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> antiReplayWindowVariable() {
        return Optional.ofNullable(this.antiReplayWindowVariable);
    }

    /**
     * The description of the Feature
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the Feature
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
     * 
     */
    @Import(name="extendedAntiReplayWindow")
    private @Nullable Output<Integer> extendedAntiReplayWindow;

    /**
     * @return Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
     * 
     */
    public Optional<Output<Integer>> extendedAntiReplayWindow() {
        return Optional.ofNullable(this.extendedAntiReplayWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="extendedAntiReplayWindowVariable")
    private @Nullable Output<String> extendedAntiReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> extendedAntiReplayWindowVariable() {
        return Optional.ofNullable(this.extendedAntiReplayWindowVariable);
    }

    /**
     * Feature Profile ID
     * 
     */
    @Import(name="featureProfileId", required=true)
    private Output<String> featureProfileId;

    /**
     * @return Feature Profile ID
     * 
     */
    public Output<String> featureProfileId() {
        return this.featureProfileId;
    }

    /**
     * Variable name
     * 
     */
    @Import(name="integrityTypeVariable")
    private @Nullable Output<String> integrityTypeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> integrityTypeVariable() {
        return Optional.ofNullable(this.integrityTypeVariable);
    }

    /**
     * Set the authentication type for DTLS connections
     * 
     */
    @Import(name="integrityTypes")
    private @Nullable Output<List<String>> integrityTypes;

    /**
     * @return Set the authentication type for DTLS connections
     * 
     */
    public Optional<Output<List<String>>> integrityTypes() {
        return Optional.ofNullable(this.integrityTypes);
    }

    /**
     * Enable or disable IPsec pairwise-keying - Default value: `false`
     * 
     */
    @Import(name="ipsecPairwiseKeying")
    private @Nullable Output<Boolean> ipsecPairwiseKeying;

    /**
     * @return Enable or disable IPsec pairwise-keying - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> ipsecPairwiseKeying() {
        return Optional.ofNullable(this.ipsecPairwiseKeying);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecPairwiseKeyingVariable")
    private @Nullable Output<String> ipsecPairwiseKeyingVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecPairwiseKeyingVariable() {
        return Optional.ofNullable(this.ipsecPairwiseKeyingVariable);
    }

    /**
     * Configure a Keychain
     * 
     */
    @Import(name="keychains")
    private @Nullable Output<List<SystemSecurityFeatureKeychainArgs>> keychains;

    /**
     * @return Configure a Keychain
     * 
     */
    public Optional<Output<List<SystemSecurityFeatureKeychainArgs>>> keychains() {
        return Optional.ofNullable(this.keychains);
    }

    /**
     * Configure a Key
     * 
     */
    @Import(name="keys")
    private @Nullable Output<List<SystemSecurityFeatureKeyArgs>> keys;

    /**
     * @return Configure a Key
     * 
     */
    public Optional<Output<List<SystemSecurityFeatureKeyArgs>>> keys() {
        return Optional.ofNullable(this.keys);
    }

    /**
     * The name of the Feature
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the Feature
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
     * 
     */
    @Import(name="rekey")
    private @Nullable Output<Integer> rekey;

    /**
     * @return Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
     * 
     */
    public Optional<Output<Integer>> rekey() {
        return Optional.ofNullable(this.rekey);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="rekeyVariable")
    private @Nullable Output<String> rekeyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> rekeyVariable() {
        return Optional.ofNullable(this.rekeyVariable);
    }

    private SystemSecurityFeatureArgs() {}

    private SystemSecurityFeatureArgs(SystemSecurityFeatureArgs $) {
        this.antiReplayWindow = $.antiReplayWindow;
        this.antiReplayWindowVariable = $.antiReplayWindowVariable;
        this.description = $.description;
        this.extendedAntiReplayWindow = $.extendedAntiReplayWindow;
        this.extendedAntiReplayWindowVariable = $.extendedAntiReplayWindowVariable;
        this.featureProfileId = $.featureProfileId;
        this.integrityTypeVariable = $.integrityTypeVariable;
        this.integrityTypes = $.integrityTypes;
        this.ipsecPairwiseKeying = $.ipsecPairwiseKeying;
        this.ipsecPairwiseKeyingVariable = $.ipsecPairwiseKeyingVariable;
        this.keychains = $.keychains;
        this.keys = $.keys;
        this.name = $.name;
        this.rekey = $.rekey;
        this.rekeyVariable = $.rekeyVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemSecurityFeatureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemSecurityFeatureArgs $;

        public Builder() {
            $ = new SystemSecurityFeatureArgs();
        }

        public Builder(SystemSecurityFeatureArgs defaults) {
            $ = new SystemSecurityFeatureArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param antiReplayWindow Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
         * `512`
         * 
         * @return builder
         * 
         */
        public Builder antiReplayWindow(@Nullable Output<String> antiReplayWindow) {
            $.antiReplayWindow = antiReplayWindow;
            return this;
        }

        /**
         * @param antiReplayWindow Set the sliding replay window size - Choices: `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`, `8192` - Default value:
         * `512`
         * 
         * @return builder
         * 
         */
        public Builder antiReplayWindow(String antiReplayWindow) {
            return antiReplayWindow(Output.of(antiReplayWindow));
        }

        /**
         * @param antiReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder antiReplayWindowVariable(@Nullable Output<String> antiReplayWindowVariable) {
            $.antiReplayWindowVariable = antiReplayWindowVariable;
            return this;
        }

        /**
         * @param antiReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder antiReplayWindowVariable(String antiReplayWindowVariable) {
            return antiReplayWindowVariable(Output.of(antiReplayWindowVariable));
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the Feature
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param extendedAntiReplayWindow Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder extendedAntiReplayWindow(@Nullable Output<Integer> extendedAntiReplayWindow) {
            $.extendedAntiReplayWindow = extendedAntiReplayWindow;
            return this;
        }

        /**
         * @param extendedAntiReplayWindow Extended Anti-Replay Window - Range: `10`-`2048` - Default value: `256`
         * 
         * @return builder
         * 
         */
        public Builder extendedAntiReplayWindow(Integer extendedAntiReplayWindow) {
            return extendedAntiReplayWindow(Output.of(extendedAntiReplayWindow));
        }

        /**
         * @param extendedAntiReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder extendedAntiReplayWindowVariable(@Nullable Output<String> extendedAntiReplayWindowVariable) {
            $.extendedAntiReplayWindowVariable = extendedAntiReplayWindowVariable;
            return this;
        }

        /**
         * @param extendedAntiReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder extendedAntiReplayWindowVariable(String extendedAntiReplayWindowVariable) {
            return extendedAntiReplayWindowVariable(Output.of(extendedAntiReplayWindowVariable));
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(Output<String> featureProfileId) {
            $.featureProfileId = featureProfileId;
            return this;
        }

        /**
         * @param featureProfileId Feature Profile ID
         * 
         * @return builder
         * 
         */
        public Builder featureProfileId(String featureProfileId) {
            return featureProfileId(Output.of(featureProfileId));
        }

        /**
         * @param integrityTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder integrityTypeVariable(@Nullable Output<String> integrityTypeVariable) {
            $.integrityTypeVariable = integrityTypeVariable;
            return this;
        }

        /**
         * @param integrityTypeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder integrityTypeVariable(String integrityTypeVariable) {
            return integrityTypeVariable(Output.of(integrityTypeVariable));
        }

        /**
         * @param integrityTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder integrityTypes(@Nullable Output<List<String>> integrityTypes) {
            $.integrityTypes = integrityTypes;
            return this;
        }

        /**
         * @param integrityTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder integrityTypes(List<String> integrityTypes) {
            return integrityTypes(Output.of(integrityTypes));
        }

        /**
         * @param integrityTypes Set the authentication type for DTLS connections
         * 
         * @return builder
         * 
         */
        public Builder integrityTypes(String... integrityTypes) {
            return integrityTypes(List.of(integrityTypes));
        }

        /**
         * @param ipsecPairwiseKeying Enable or disable IPsec pairwise-keying - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipsecPairwiseKeying(@Nullable Output<Boolean> ipsecPairwiseKeying) {
            $.ipsecPairwiseKeying = ipsecPairwiseKeying;
            return this;
        }

        /**
         * @param ipsecPairwiseKeying Enable or disable IPsec pairwise-keying - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder ipsecPairwiseKeying(Boolean ipsecPairwiseKeying) {
            return ipsecPairwiseKeying(Output.of(ipsecPairwiseKeying));
        }

        /**
         * @param ipsecPairwiseKeyingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecPairwiseKeyingVariable(@Nullable Output<String> ipsecPairwiseKeyingVariable) {
            $.ipsecPairwiseKeyingVariable = ipsecPairwiseKeyingVariable;
            return this;
        }

        /**
         * @param ipsecPairwiseKeyingVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecPairwiseKeyingVariable(String ipsecPairwiseKeyingVariable) {
            return ipsecPairwiseKeyingVariable(Output.of(ipsecPairwiseKeyingVariable));
        }

        /**
         * @param keychains Configure a Keychain
         * 
         * @return builder
         * 
         */
        public Builder keychains(@Nullable Output<List<SystemSecurityFeatureKeychainArgs>> keychains) {
            $.keychains = keychains;
            return this;
        }

        /**
         * @param keychains Configure a Keychain
         * 
         * @return builder
         * 
         */
        public Builder keychains(List<SystemSecurityFeatureKeychainArgs> keychains) {
            return keychains(Output.of(keychains));
        }

        /**
         * @param keychains Configure a Keychain
         * 
         * @return builder
         * 
         */
        public Builder keychains(SystemSecurityFeatureKeychainArgs... keychains) {
            return keychains(List.of(keychains));
        }

        /**
         * @param keys Configure a Key
         * 
         * @return builder
         * 
         */
        public Builder keys(@Nullable Output<List<SystemSecurityFeatureKeyArgs>> keys) {
            $.keys = keys;
            return this;
        }

        /**
         * @param keys Configure a Key
         * 
         * @return builder
         * 
         */
        public Builder keys(List<SystemSecurityFeatureKeyArgs> keys) {
            return keys(Output.of(keys));
        }

        /**
         * @param keys Configure a Key
         * 
         * @return builder
         * 
         */
        public Builder keys(SystemSecurityFeatureKeyArgs... keys) {
            return keys(List.of(keys));
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the Feature
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rekey Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder rekey(@Nullable Output<Integer> rekey) {
            $.rekey = rekey;
            return this;
        }

        /**
         * @param rekey Set how often to change the AES key for DTLS connections - Range: `10`-`1209600` - Default value: `86400`
         * 
         * @return builder
         * 
         */
        public Builder rekey(Integer rekey) {
            return rekey(Output.of(rekey));
        }

        /**
         * @param rekeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rekeyVariable(@Nullable Output<String> rekeyVariable) {
            $.rekeyVariable = rekeyVariable;
            return this;
        }

        /**
         * @param rekeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder rekeyVariable(String rekeyVariable) {
            return rekeyVariable(Output.of(rekeyVariable));
        }

        public SystemSecurityFeatureArgs build() {
            if ($.featureProfileId == null) {
                throw new MissingRequiredPropertyException("SystemSecurityFeatureArgs", "featureProfileId");
            }
            return $;
        }
    }

}
