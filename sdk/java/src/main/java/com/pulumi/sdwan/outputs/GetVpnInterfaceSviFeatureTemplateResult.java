// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv4AccessList;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv4Vrrp;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv6AccessList;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateIpv6Vrrp;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplatePolicer;
import com.pulumi.sdwan.outputs.GetVpnInterfaceSviFeatureTemplateStaticArpEntry;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVpnInterfaceSviFeatureTemplateResult {
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    private Integer arpTimeout;
    /**
     * @return Variable name
     * 
     */
    private String arpTimeoutVariable;
    /**
     * @return The description of the feature template
     * 
     */
    private String description;
    /**
     * @return List of supported device types
     * 
     */
    private List<String> deviceTypes;
    /**
     * @return The id of the feature template
     * 
     */
    private String id;
    /**
     * @return Interface name: VLAN 1 - VLAN 4094 when present
     * 
     */
    private String ifName;
    /**
     * @return Variable name
     * 
     */
    private String ifNameVariable;
    /**
     * @return Interface description
     * 
     */
    private String interfaceDescription;
    /**
     * @return Variable name
     * 
     */
    private String interfaceDescriptionVariable;
    /**
     * @return IP Directed-Broadcast
     * 
     */
    private Boolean ipDirectedBroadcast;
    /**
     * @return Variable name
     * 
     */
    private String ipDirectedBroadcastVariable;
    /**
     * @return IP MTU \n\n, in bytes
     * 
     */
    private Integer ipMtu;
    /**
     * @return Variable name
     * 
     */
    private String ipMtuVariable;
    /**
     * @return Apply ACL
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv4AccessList> ipv4AccessLists;
    /**
     * @return Assign IPv4 address
     * 
     */
    private String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv4AddressVariable;
    /**
     * @return Variable name
     * 
     */
    private String ipv4DhcpHelperVariable;
    /**
     * @return List of DHCP helper addresses
     * 
     */
    private List<String> ipv4DhcpHelpers;
    /**
     * @return Assign secondary IP addresses
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses;
    /**
     * @return Enable VRRP
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv4Vrrp> ipv4Vrrps;
    /**
     * @return Apply ACL
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv6AccessList> ipv6AccessLists;
    /**
     * @return Assign IPv6 address
     * 
     */
    private String ipv6Address;
    /**
     * @return Variable name
     * 
     */
    private String ipv6AddressVariable;
    /**
     * @return Enable DHCPv6
     * 
     */
    private Boolean ipv6DhcpClient;
    /**
     * @return Variable name
     * 
     */
    private String ipv6DhcpClientVariable;
    /**
     * @return Set administrative distance for DHCP default route
     * 
     */
    private Integer ipv6DhcpDistance;
    /**
     * @return Variable name
     * 
     */
    private String ipv6DhcpDistanceVariable;
    /**
     * @return DHCPv6 Helper
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers;
    /**
     * @return Enable DHCPv6 rapid commit
     * 
     */
    private Boolean ipv6DhcpRapidCommit;
    /**
     * @return Variable name
     * 
     */
    private String ipv6DhcpRapidCommitVariable;
    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses;
    /**
     * @return Enable VRRP
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateIpv6Vrrp> ipv6Vrrps;
    /**
     * @return Interface MTU \n\n in bytes
     * 
     */
    private Integer mtu;
    /**
     * @return Variable name
     * 
     */
    private String mtuVariable;
    /**
     * @return The name of the feature template
     * 
     */
    private String name;
    /**
     * @return Enable policer
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplatePolicer> policers;
    /**
     * @return Administrative state
     * 
     */
    private Boolean shutdown;
    /**
     * @return Variable name
     * 
     */
    private String shutdownVariable;
    /**
     * @return Configure static ARP entries
     * 
     */
    private List<GetVpnInterfaceSviFeatureTemplateStaticArpEntry> staticArpEntries;
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    private Integer tcpMssAdjust;
    /**
     * @return Variable name
     * 
     */
    private String tcpMssAdjustVariable;
    /**
     * @return The template type
     * 
     */
    private String templateType;
    /**
     * @return The version of the feature template
     * 
     */
    private Integer version;

    private GetVpnInterfaceSviFeatureTemplateResult() {}
    /**
     * @return Timeout value for dynamically learned ARP entries, \n\n seconds
     * 
     */
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    /**
     * @return Variable name
     * 
     */
    public String arpTimeoutVariable() {
        return this.arpTimeoutVariable;
    }
    /**
     * @return The description of the feature template
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return List of supported device types
     * 
     */
    public List<String> deviceTypes() {
        return this.deviceTypes;
    }
    /**
     * @return The id of the feature template
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface name: VLAN 1 - VLAN 4094 when present
     * 
     */
    public String ifName() {
        return this.ifName;
    }
    /**
     * @return Variable name
     * 
     */
    public String ifNameVariable() {
        return this.ifNameVariable;
    }
    /**
     * @return Interface description
     * 
     */
    public String interfaceDescription() {
        return this.interfaceDescription;
    }
    /**
     * @return Variable name
     * 
     */
    public String interfaceDescriptionVariable() {
        return this.interfaceDescriptionVariable;
    }
    /**
     * @return IP Directed-Broadcast
     * 
     */
    public Boolean ipDirectedBroadcast() {
        return this.ipDirectedBroadcast;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipDirectedBroadcastVariable() {
        return this.ipDirectedBroadcastVariable;
    }
    /**
     * @return IP MTU \n\n, in bytes
     * 
     */
    public Integer ipMtu() {
        return this.ipMtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipMtuVariable() {
        return this.ipMtuVariable;
    }
    /**
     * @return Apply ACL
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv4AccessList> ipv4AccessLists() {
        return this.ipv4AccessLists;
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4AddressVariable() {
        return this.ipv4AddressVariable;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv4DhcpHelperVariable() {
        return this.ipv4DhcpHelperVariable;
    }
    /**
     * @return List of DHCP helper addresses
     * 
     */
    public List<String> ipv4DhcpHelpers() {
        return this.ipv4DhcpHelpers;
    }
    /**
     * @return Assign secondary IP addresses
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses() {
        return this.ipv4SecondaryAddresses;
    }
    /**
     * @return Enable VRRP
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv4Vrrp> ipv4Vrrps() {
        return this.ipv4Vrrps;
    }
    /**
     * @return Apply ACL
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv6AccessList> ipv6AccessLists() {
        return this.ipv6AccessLists;
    }
    /**
     * @return Assign IPv6 address
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6AddressVariable() {
        return this.ipv6AddressVariable;
    }
    /**
     * @return Enable DHCPv6
     * 
     */
    public Boolean ipv6DhcpClient() {
        return this.ipv6DhcpClient;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6DhcpClientVariable() {
        return this.ipv6DhcpClientVariable;
    }
    /**
     * @return Set administrative distance for DHCP default route
     * 
     */
    public Integer ipv6DhcpDistance() {
        return this.ipv6DhcpDistance;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6DhcpDistanceVariable() {
        return this.ipv6DhcpDistanceVariable;
    }
    /**
     * @return DHCPv6 Helper
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers() {
        return this.ipv6DhcpHelpers;
    }
    /**
     * @return Enable DHCPv6 rapid commit
     * 
     */
    public Boolean ipv6DhcpRapidCommit() {
        return this.ipv6DhcpRapidCommit;
    }
    /**
     * @return Variable name
     * 
     */
    public String ipv6DhcpRapidCommitVariable() {
        return this.ipv6DhcpRapidCommitVariable;
    }
    /**
     * @return Assign secondary IPv6 addresses
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses() {
        return this.ipv6SecondaryAddresses;
    }
    /**
     * @return Enable VRRP
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateIpv6Vrrp> ipv6Vrrps() {
        return this.ipv6Vrrps;
    }
    /**
     * @return Interface MTU \n\n in bytes
     * 
     */
    public Integer mtu() {
        return this.mtu;
    }
    /**
     * @return Variable name
     * 
     */
    public String mtuVariable() {
        return this.mtuVariable;
    }
    /**
     * @return The name of the feature template
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enable policer
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplatePolicer> policers() {
        return this.policers;
    }
    /**
     * @return Administrative state
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    /**
     * @return Variable name
     * 
     */
    public String shutdownVariable() {
        return this.shutdownVariable;
    }
    /**
     * @return Configure static ARP entries
     * 
     */
    public List<GetVpnInterfaceSviFeatureTemplateStaticArpEntry> staticArpEntries() {
        return this.staticArpEntries;
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     * 
     */
    public Integer tcpMssAdjust() {
        return this.tcpMssAdjust;
    }
    /**
     * @return Variable name
     * 
     */
    public String tcpMssAdjustVariable() {
        return this.tcpMssAdjustVariable;
    }
    /**
     * @return The template type
     * 
     */
    public String templateType() {
        return this.templateType;
    }
    /**
     * @return The version of the feature template
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpnInterfaceSviFeatureTemplateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer arpTimeout;
        private String arpTimeoutVariable;
        private String description;
        private List<String> deviceTypes;
        private String id;
        private String ifName;
        private String ifNameVariable;
        private String interfaceDescription;
        private String interfaceDescriptionVariable;
        private Boolean ipDirectedBroadcast;
        private String ipDirectedBroadcastVariable;
        private Integer ipMtu;
        private String ipMtuVariable;
        private List<GetVpnInterfaceSviFeatureTemplateIpv4AccessList> ipv4AccessLists;
        private String ipv4Address;
        private String ipv4AddressVariable;
        private String ipv4DhcpHelperVariable;
        private List<String> ipv4DhcpHelpers;
        private List<GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses;
        private List<GetVpnInterfaceSviFeatureTemplateIpv4Vrrp> ipv4Vrrps;
        private List<GetVpnInterfaceSviFeatureTemplateIpv6AccessList> ipv6AccessLists;
        private String ipv6Address;
        private String ipv6AddressVariable;
        private Boolean ipv6DhcpClient;
        private String ipv6DhcpClientVariable;
        private Integer ipv6DhcpDistance;
        private String ipv6DhcpDistanceVariable;
        private List<GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers;
        private Boolean ipv6DhcpRapidCommit;
        private String ipv6DhcpRapidCommitVariable;
        private List<GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses;
        private List<GetVpnInterfaceSviFeatureTemplateIpv6Vrrp> ipv6Vrrps;
        private Integer mtu;
        private String mtuVariable;
        private String name;
        private List<GetVpnInterfaceSviFeatureTemplatePolicer> policers;
        private Boolean shutdown;
        private String shutdownVariable;
        private List<GetVpnInterfaceSviFeatureTemplateStaticArpEntry> staticArpEntries;
        private Integer tcpMssAdjust;
        private String tcpMssAdjustVariable;
        private String templateType;
        private Integer version;
        public Builder() {}
        public Builder(GetVpnInterfaceSviFeatureTemplateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.arpTimeoutVariable = defaults.arpTimeoutVariable;
    	      this.description = defaults.description;
    	      this.deviceTypes = defaults.deviceTypes;
    	      this.id = defaults.id;
    	      this.ifName = defaults.ifName;
    	      this.ifNameVariable = defaults.ifNameVariable;
    	      this.interfaceDescription = defaults.interfaceDescription;
    	      this.interfaceDescriptionVariable = defaults.interfaceDescriptionVariable;
    	      this.ipDirectedBroadcast = defaults.ipDirectedBroadcast;
    	      this.ipDirectedBroadcastVariable = defaults.ipDirectedBroadcastVariable;
    	      this.ipMtu = defaults.ipMtu;
    	      this.ipMtuVariable = defaults.ipMtuVariable;
    	      this.ipv4AccessLists = defaults.ipv4AccessLists;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.ipv4DhcpHelperVariable = defaults.ipv4DhcpHelperVariable;
    	      this.ipv4DhcpHelpers = defaults.ipv4DhcpHelpers;
    	      this.ipv4SecondaryAddresses = defaults.ipv4SecondaryAddresses;
    	      this.ipv4Vrrps = defaults.ipv4Vrrps;
    	      this.ipv6AccessLists = defaults.ipv6AccessLists;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6AddressVariable = defaults.ipv6AddressVariable;
    	      this.ipv6DhcpClient = defaults.ipv6DhcpClient;
    	      this.ipv6DhcpClientVariable = defaults.ipv6DhcpClientVariable;
    	      this.ipv6DhcpDistance = defaults.ipv6DhcpDistance;
    	      this.ipv6DhcpDistanceVariable = defaults.ipv6DhcpDistanceVariable;
    	      this.ipv6DhcpHelpers = defaults.ipv6DhcpHelpers;
    	      this.ipv6DhcpRapidCommit = defaults.ipv6DhcpRapidCommit;
    	      this.ipv6DhcpRapidCommitVariable = defaults.ipv6DhcpRapidCommitVariable;
    	      this.ipv6SecondaryAddresses = defaults.ipv6SecondaryAddresses;
    	      this.ipv6Vrrps = defaults.ipv6Vrrps;
    	      this.mtu = defaults.mtu;
    	      this.mtuVariable = defaults.mtuVariable;
    	      this.name = defaults.name;
    	      this.policers = defaults.policers;
    	      this.shutdown = defaults.shutdown;
    	      this.shutdownVariable = defaults.shutdownVariable;
    	      this.staticArpEntries = defaults.staticArpEntries;
    	      this.tcpMssAdjust = defaults.tcpMssAdjust;
    	      this.tcpMssAdjustVariable = defaults.tcpMssAdjustVariable;
    	      this.templateType = defaults.templateType;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            if (arpTimeout == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "arpTimeout");
            }
            this.arpTimeout = arpTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder arpTimeoutVariable(String arpTimeoutVariable) {
            if (arpTimeoutVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "arpTimeoutVariable");
            }
            this.arpTimeoutVariable = arpTimeoutVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceTypes(List<String> deviceTypes) {
            if (deviceTypes == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "deviceTypes");
            }
            this.deviceTypes = deviceTypes;
            return this;
        }
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ifName(String ifName) {
            if (ifName == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ifName");
            }
            this.ifName = ifName;
            return this;
        }
        @CustomType.Setter
        public Builder ifNameVariable(String ifNameVariable) {
            if (ifNameVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ifNameVariable");
            }
            this.ifNameVariable = ifNameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescription(String interfaceDescription) {
            if (interfaceDescription == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "interfaceDescription");
            }
            this.interfaceDescription = interfaceDescription;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            if (interfaceDescriptionVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "interfaceDescriptionVariable");
            }
            this.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcast(Boolean ipDirectedBroadcast) {
            if (ipDirectedBroadcast == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipDirectedBroadcast");
            }
            this.ipDirectedBroadcast = ipDirectedBroadcast;
            return this;
        }
        @CustomType.Setter
        public Builder ipDirectedBroadcastVariable(String ipDirectedBroadcastVariable) {
            if (ipDirectedBroadcastVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipDirectedBroadcastVariable");
            }
            this.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtu(Integer ipMtu) {
            if (ipMtu == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipMtu");
            }
            this.ipMtu = ipMtu;
            return this;
        }
        @CustomType.Setter
        public Builder ipMtuVariable(String ipMtuVariable) {
            if (ipMtuVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipMtuVariable");
            }
            this.ipMtuVariable = ipMtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AccessLists(List<GetVpnInterfaceSviFeatureTemplateIpv4AccessList> ipv4AccessLists) {
            if (ipv4AccessLists == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4AccessLists");
            }
            this.ipv4AccessLists = ipv4AccessLists;
            return this;
        }
        public Builder ipv4AccessLists(GetVpnInterfaceSviFeatureTemplateIpv4AccessList... ipv4AccessLists) {
            return ipv4AccessLists(List.of(ipv4AccessLists));
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(String ipv4AddressVariable) {
            if (ipv4AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4AddressVariable");
            }
            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelperVariable(String ipv4DhcpHelperVariable) {
            if (ipv4DhcpHelperVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4DhcpHelperVariable");
            }
            this.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4DhcpHelpers(List<String> ipv4DhcpHelpers) {
            if (ipv4DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4DhcpHelpers");
            }
            this.ipv4DhcpHelpers = ipv4DhcpHelpers;
            return this;
        }
        public Builder ipv4DhcpHelpers(String... ipv4DhcpHelpers) {
            return ipv4DhcpHelpers(List.of(ipv4DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv4SecondaryAddresses(List<GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress> ipv4SecondaryAddresses) {
            if (ipv4SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4SecondaryAddresses");
            }
            this.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            return this;
        }
        public Builder ipv4SecondaryAddresses(GetVpnInterfaceSviFeatureTemplateIpv4SecondaryAddress... ipv4SecondaryAddresses) {
            return ipv4SecondaryAddresses(List.of(ipv4SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv4Vrrps(List<GetVpnInterfaceSviFeatureTemplateIpv4Vrrp> ipv4Vrrps) {
            if (ipv4Vrrps == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv4Vrrps");
            }
            this.ipv4Vrrps = ipv4Vrrps;
            return this;
        }
        public Builder ipv4Vrrps(GetVpnInterfaceSviFeatureTemplateIpv4Vrrp... ipv4Vrrps) {
            return ipv4Vrrps(List.of(ipv4Vrrps));
        }
        @CustomType.Setter
        public Builder ipv6AccessLists(List<GetVpnInterfaceSviFeatureTemplateIpv6AccessList> ipv6AccessLists) {
            if (ipv6AccessLists == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6AccessLists");
            }
            this.ipv6AccessLists = ipv6AccessLists;
            return this;
        }
        public Builder ipv6AccessLists(GetVpnInterfaceSviFeatureTemplateIpv6AccessList... ipv6AccessLists) {
            return ipv6AccessLists(List.of(ipv6AccessLists));
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressVariable(String ipv6AddressVariable) {
            if (ipv6AddressVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6AddressVariable");
            }
            this.ipv6AddressVariable = ipv6AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpClient(Boolean ipv6DhcpClient) {
            if (ipv6DhcpClient == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpClient");
            }
            this.ipv6DhcpClient = ipv6DhcpClient;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpClientVariable(String ipv6DhcpClientVariable) {
            if (ipv6DhcpClientVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpClientVariable");
            }
            this.ipv6DhcpClientVariable = ipv6DhcpClientVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpDistance(Integer ipv6DhcpDistance) {
            if (ipv6DhcpDistance == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpDistance");
            }
            this.ipv6DhcpDistance = ipv6DhcpDistance;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpDistanceVariable(String ipv6DhcpDistanceVariable) {
            if (ipv6DhcpDistanceVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpDistanceVariable");
            }
            this.ipv6DhcpDistanceVariable = ipv6DhcpDistanceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpHelpers(List<GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper> ipv6DhcpHelpers) {
            if (ipv6DhcpHelpers == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpHelpers");
            }
            this.ipv6DhcpHelpers = ipv6DhcpHelpers;
            return this;
        }
        public Builder ipv6DhcpHelpers(GetVpnInterfaceSviFeatureTemplateIpv6DhcpHelper... ipv6DhcpHelpers) {
            return ipv6DhcpHelpers(List.of(ipv6DhcpHelpers));
        }
        @CustomType.Setter
        public Builder ipv6DhcpRapidCommit(Boolean ipv6DhcpRapidCommit) {
            if (ipv6DhcpRapidCommit == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpRapidCommit");
            }
            this.ipv6DhcpRapidCommit = ipv6DhcpRapidCommit;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6DhcpRapidCommitVariable(String ipv6DhcpRapidCommitVariable) {
            if (ipv6DhcpRapidCommitVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6DhcpRapidCommitVariable");
            }
            this.ipv6DhcpRapidCommitVariable = ipv6DhcpRapidCommitVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6SecondaryAddresses(List<GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress> ipv6SecondaryAddresses) {
            if (ipv6SecondaryAddresses == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6SecondaryAddresses");
            }
            this.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            return this;
        }
        public Builder ipv6SecondaryAddresses(GetVpnInterfaceSviFeatureTemplateIpv6SecondaryAddress... ipv6SecondaryAddresses) {
            return ipv6SecondaryAddresses(List.of(ipv6SecondaryAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Vrrps(List<GetVpnInterfaceSviFeatureTemplateIpv6Vrrp> ipv6Vrrps) {
            if (ipv6Vrrps == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "ipv6Vrrps");
            }
            this.ipv6Vrrps = ipv6Vrrps;
            return this;
        }
        public Builder ipv6Vrrps(GetVpnInterfaceSviFeatureTemplateIpv6Vrrp... ipv6Vrrps) {
            return ipv6Vrrps(List.of(ipv6Vrrps));
        }
        @CustomType.Setter
        public Builder mtu(Integer mtu) {
            if (mtu == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "mtu");
            }
            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder mtuVariable(String mtuVariable) {
            if (mtuVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "mtuVariable");
            }
            this.mtuVariable = mtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder policers(List<GetVpnInterfaceSviFeatureTemplatePolicer> policers) {
            if (policers == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "policers");
            }
            this.policers = policers;
            return this;
        }
        public Builder policers(GetVpnInterfaceSviFeatureTemplatePolicer... policers) {
            return policers(List.of(policers));
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            if (shutdown == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "shutdown");
            }
            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder shutdownVariable(String shutdownVariable) {
            if (shutdownVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "shutdownVariable");
            }
            this.shutdownVariable = shutdownVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticArpEntries(List<GetVpnInterfaceSviFeatureTemplateStaticArpEntry> staticArpEntries) {
            if (staticArpEntries == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "staticArpEntries");
            }
            this.staticArpEntries = staticArpEntries;
            return this;
        }
        public Builder staticArpEntries(GetVpnInterfaceSviFeatureTemplateStaticArpEntry... staticArpEntries) {
            return staticArpEntries(List.of(staticArpEntries));
        }
        @CustomType.Setter
        public Builder tcpMssAdjust(Integer tcpMssAdjust) {
            if (tcpMssAdjust == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "tcpMssAdjust");
            }
            this.tcpMssAdjust = tcpMssAdjust;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssAdjustVariable(String tcpMssAdjustVariable) {
            if (tcpMssAdjustVariable == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "tcpMssAdjustVariable");
            }
            this.tcpMssAdjustVariable = tcpMssAdjustVariable;
            return this;
        }
        @CustomType.Setter
        public Builder templateType(String templateType) {
            if (templateType == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "templateType");
            }
            this.templateType = templateType;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetVpnInterfaceSviFeatureTemplateResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetVpnInterfaceSviFeatureTemplateResult build() {
            final var _resultValue = new GetVpnInterfaceSviFeatureTemplateResult();
            _resultValue.arpTimeout = arpTimeout;
            _resultValue.arpTimeoutVariable = arpTimeoutVariable;
            _resultValue.description = description;
            _resultValue.deviceTypes = deviceTypes;
            _resultValue.id = id;
            _resultValue.ifName = ifName;
            _resultValue.ifNameVariable = ifNameVariable;
            _resultValue.interfaceDescription = interfaceDescription;
            _resultValue.interfaceDescriptionVariable = interfaceDescriptionVariable;
            _resultValue.ipDirectedBroadcast = ipDirectedBroadcast;
            _resultValue.ipDirectedBroadcastVariable = ipDirectedBroadcastVariable;
            _resultValue.ipMtu = ipMtu;
            _resultValue.ipMtuVariable = ipMtuVariable;
            _resultValue.ipv4AccessLists = ipv4AccessLists;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.ipv4DhcpHelperVariable = ipv4DhcpHelperVariable;
            _resultValue.ipv4DhcpHelpers = ipv4DhcpHelpers;
            _resultValue.ipv4SecondaryAddresses = ipv4SecondaryAddresses;
            _resultValue.ipv4Vrrps = ipv4Vrrps;
            _resultValue.ipv6AccessLists = ipv6AccessLists;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6AddressVariable = ipv6AddressVariable;
            _resultValue.ipv6DhcpClient = ipv6DhcpClient;
            _resultValue.ipv6DhcpClientVariable = ipv6DhcpClientVariable;
            _resultValue.ipv6DhcpDistance = ipv6DhcpDistance;
            _resultValue.ipv6DhcpDistanceVariable = ipv6DhcpDistanceVariable;
            _resultValue.ipv6DhcpHelpers = ipv6DhcpHelpers;
            _resultValue.ipv6DhcpRapidCommit = ipv6DhcpRapidCommit;
            _resultValue.ipv6DhcpRapidCommitVariable = ipv6DhcpRapidCommitVariable;
            _resultValue.ipv6SecondaryAddresses = ipv6SecondaryAddresses;
            _resultValue.ipv6Vrrps = ipv6Vrrps;
            _resultValue.mtu = mtu;
            _resultValue.mtuVariable = mtuVariable;
            _resultValue.name = name;
            _resultValue.policers = policers;
            _resultValue.shutdown = shutdown;
            _resultValue.shutdownVariable = shutdownVariable;
            _resultValue.staticArpEntries = staticArpEntries;
            _resultValue.tcpMssAdjust = tcpMssAdjust;
            _resultValue.tcpMssAdjustVariable = tcpMssAdjustVariable;
            _resultValue.templateType = templateType;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
