// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSystemSecurityFeatureKey {
    /**
     * @return Configure Accept AO Mismatch
     * 
     */
    private Boolean acceptAoMismatch;
    /**
     * @return Variable name
     * 
     */
    private String acceptAoMismatchVariable;
    /**
     * @return Send lifetime Duration (seconds)
     * 
     */
    private Integer acceptLifeTimeDuration;
    /**
     * @return Variable name
     * 
     */
    private String acceptLifeTimeDurationVariable;
    /**
     * @return Configure Key lifetime end time
     * 
     */
    private Integer acceptLifeTimeExact;
    /**
     * @return Infinite lifetime
     * 
     */
    private Boolean acceptLifeTimeInfinite;
    /**
     * @return Variable name
     * 
     */
    private String acceptLifeTimeInfiniteVariable;
    /**
     * @return Configure Send lifetime Local
     * 
     */
    private Boolean acceptLifeTimeLocal;
    /**
     * @return Variable name
     * 
     */
    private String acceptLifeTimeLocalVariable;
    /**
     * @return Configure Key lifetime start time
     * 
     */
    private Integer acceptLifeTimeStartEpoch;
    /**
     * @return Crypto Algorithm
     * 
     */
    private String cryptoAlgorithm;
    /**
     * @return Select the Key ID
     * 
     */
    private Integer id;
    /**
     * @return Configure Include TCP Options
     * 
     */
    private Boolean includeTcpOptions;
    /**
     * @return Variable name
     * 
     */
    private String includeTcpOptionsVariable;
    /**
     * @return Specify the Key String
     * 
     */
    private String keyString;
    /**
     * @return Variable name
     * 
     */
    private String keyStringVariable;
    /**
     * @return Select the chain name
     * 
     */
    private String name;
    /**
     * @return Specify the Receiver ID
     * 
     */
    private Integer receiverId;
    /**
     * @return Variable name
     * 
     */
    private String receiverIdVariable;
    /**
     * @return Specify the Send ID
     * 
     */
    private Integer sendId;
    /**
     * @return Variable name
     * 
     */
    private String sendIdVariable;
    /**
     * @return Send lifetime Duration (seconds)
     * 
     */
    private Integer sendLifeTimeDuration;
    /**
     * @return Variable name
     * 
     */
    private String sendLifeTimeDurationVariable;
    /**
     * @return Configure Key lifetime end time
     * 
     */
    private Integer sendLifeTimeExact;
    /**
     * @return Infinite lifetime
     * 
     */
    private Boolean sendLifeTimeInfinite;
    /**
     * @return Variable name
     * 
     */
    private String sendLifeTimeInfiniteVariable;
    /**
     * @return Configure Send lifetime Local
     * 
     */
    private Boolean sendLifeTimeLocal;
    /**
     * @return Variable name
     * 
     */
    private String sendLifeTimeLocalVariable;
    /**
     * @return Configure Key lifetime start time
     * 
     */
    private Integer sendLifeTimeStartEpoch;

    private GetSystemSecurityFeatureKey() {}
    /**
     * @return Configure Accept AO Mismatch
     * 
     */
    public Boolean acceptAoMismatch() {
        return this.acceptAoMismatch;
    }
    /**
     * @return Variable name
     * 
     */
    public String acceptAoMismatchVariable() {
        return this.acceptAoMismatchVariable;
    }
    /**
     * @return Send lifetime Duration (seconds)
     * 
     */
    public Integer acceptLifeTimeDuration() {
        return this.acceptLifeTimeDuration;
    }
    /**
     * @return Variable name
     * 
     */
    public String acceptLifeTimeDurationVariable() {
        return this.acceptLifeTimeDurationVariable;
    }
    /**
     * @return Configure Key lifetime end time
     * 
     */
    public Integer acceptLifeTimeExact() {
        return this.acceptLifeTimeExact;
    }
    /**
     * @return Infinite lifetime
     * 
     */
    public Boolean acceptLifeTimeInfinite() {
        return this.acceptLifeTimeInfinite;
    }
    /**
     * @return Variable name
     * 
     */
    public String acceptLifeTimeInfiniteVariable() {
        return this.acceptLifeTimeInfiniteVariable;
    }
    /**
     * @return Configure Send lifetime Local
     * 
     */
    public Boolean acceptLifeTimeLocal() {
        return this.acceptLifeTimeLocal;
    }
    /**
     * @return Variable name
     * 
     */
    public String acceptLifeTimeLocalVariable() {
        return this.acceptLifeTimeLocalVariable;
    }
    /**
     * @return Configure Key lifetime start time
     * 
     */
    public Integer acceptLifeTimeStartEpoch() {
        return this.acceptLifeTimeStartEpoch;
    }
    /**
     * @return Crypto Algorithm
     * 
     */
    public String cryptoAlgorithm() {
        return this.cryptoAlgorithm;
    }
    /**
     * @return Select the Key ID
     * 
     */
    public Integer id() {
        return this.id;
    }
    /**
     * @return Configure Include TCP Options
     * 
     */
    public Boolean includeTcpOptions() {
        return this.includeTcpOptions;
    }
    /**
     * @return Variable name
     * 
     */
    public String includeTcpOptionsVariable() {
        return this.includeTcpOptionsVariable;
    }
    /**
     * @return Specify the Key String
     * 
     */
    public String keyString() {
        return this.keyString;
    }
    /**
     * @return Variable name
     * 
     */
    public String keyStringVariable() {
        return this.keyStringVariable;
    }
    /**
     * @return Select the chain name
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Specify the Receiver ID
     * 
     */
    public Integer receiverId() {
        return this.receiverId;
    }
    /**
     * @return Variable name
     * 
     */
    public String receiverIdVariable() {
        return this.receiverIdVariable;
    }
    /**
     * @return Specify the Send ID
     * 
     */
    public Integer sendId() {
        return this.sendId;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendIdVariable() {
        return this.sendIdVariable;
    }
    /**
     * @return Send lifetime Duration (seconds)
     * 
     */
    public Integer sendLifeTimeDuration() {
        return this.sendLifeTimeDuration;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendLifeTimeDurationVariable() {
        return this.sendLifeTimeDurationVariable;
    }
    /**
     * @return Configure Key lifetime end time
     * 
     */
    public Integer sendLifeTimeExact() {
        return this.sendLifeTimeExact;
    }
    /**
     * @return Infinite lifetime
     * 
     */
    public Boolean sendLifeTimeInfinite() {
        return this.sendLifeTimeInfinite;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendLifeTimeInfiniteVariable() {
        return this.sendLifeTimeInfiniteVariable;
    }
    /**
     * @return Configure Send lifetime Local
     * 
     */
    public Boolean sendLifeTimeLocal() {
        return this.sendLifeTimeLocal;
    }
    /**
     * @return Variable name
     * 
     */
    public String sendLifeTimeLocalVariable() {
        return this.sendLifeTimeLocalVariable;
    }
    /**
     * @return Configure Key lifetime start time
     * 
     */
    public Integer sendLifeTimeStartEpoch() {
        return this.sendLifeTimeStartEpoch;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemSecurityFeatureKey defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean acceptAoMismatch;
        private String acceptAoMismatchVariable;
        private Integer acceptLifeTimeDuration;
        private String acceptLifeTimeDurationVariable;
        private Integer acceptLifeTimeExact;
        private Boolean acceptLifeTimeInfinite;
        private String acceptLifeTimeInfiniteVariable;
        private Boolean acceptLifeTimeLocal;
        private String acceptLifeTimeLocalVariable;
        private Integer acceptLifeTimeStartEpoch;
        private String cryptoAlgorithm;
        private Integer id;
        private Boolean includeTcpOptions;
        private String includeTcpOptionsVariable;
        private String keyString;
        private String keyStringVariable;
        private String name;
        private Integer receiverId;
        private String receiverIdVariable;
        private Integer sendId;
        private String sendIdVariable;
        private Integer sendLifeTimeDuration;
        private String sendLifeTimeDurationVariable;
        private Integer sendLifeTimeExact;
        private Boolean sendLifeTimeInfinite;
        private String sendLifeTimeInfiniteVariable;
        private Boolean sendLifeTimeLocal;
        private String sendLifeTimeLocalVariable;
        private Integer sendLifeTimeStartEpoch;
        public Builder() {}
        public Builder(GetSystemSecurityFeatureKey defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acceptAoMismatch = defaults.acceptAoMismatch;
    	      this.acceptAoMismatchVariable = defaults.acceptAoMismatchVariable;
    	      this.acceptLifeTimeDuration = defaults.acceptLifeTimeDuration;
    	      this.acceptLifeTimeDurationVariable = defaults.acceptLifeTimeDurationVariable;
    	      this.acceptLifeTimeExact = defaults.acceptLifeTimeExact;
    	      this.acceptLifeTimeInfinite = defaults.acceptLifeTimeInfinite;
    	      this.acceptLifeTimeInfiniteVariable = defaults.acceptLifeTimeInfiniteVariable;
    	      this.acceptLifeTimeLocal = defaults.acceptLifeTimeLocal;
    	      this.acceptLifeTimeLocalVariable = defaults.acceptLifeTimeLocalVariable;
    	      this.acceptLifeTimeStartEpoch = defaults.acceptLifeTimeStartEpoch;
    	      this.cryptoAlgorithm = defaults.cryptoAlgorithm;
    	      this.id = defaults.id;
    	      this.includeTcpOptions = defaults.includeTcpOptions;
    	      this.includeTcpOptionsVariable = defaults.includeTcpOptionsVariable;
    	      this.keyString = defaults.keyString;
    	      this.keyStringVariable = defaults.keyStringVariable;
    	      this.name = defaults.name;
    	      this.receiverId = defaults.receiverId;
    	      this.receiverIdVariable = defaults.receiverIdVariable;
    	      this.sendId = defaults.sendId;
    	      this.sendIdVariable = defaults.sendIdVariable;
    	      this.sendLifeTimeDuration = defaults.sendLifeTimeDuration;
    	      this.sendLifeTimeDurationVariable = defaults.sendLifeTimeDurationVariable;
    	      this.sendLifeTimeExact = defaults.sendLifeTimeExact;
    	      this.sendLifeTimeInfinite = defaults.sendLifeTimeInfinite;
    	      this.sendLifeTimeInfiniteVariable = defaults.sendLifeTimeInfiniteVariable;
    	      this.sendLifeTimeLocal = defaults.sendLifeTimeLocal;
    	      this.sendLifeTimeLocalVariable = defaults.sendLifeTimeLocalVariable;
    	      this.sendLifeTimeStartEpoch = defaults.sendLifeTimeStartEpoch;
        }

        @CustomType.Setter
        public Builder acceptAoMismatch(Boolean acceptAoMismatch) {
            if (acceptAoMismatch == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptAoMismatch");
            }
            this.acceptAoMismatch = acceptAoMismatch;
            return this;
        }
        @CustomType.Setter
        public Builder acceptAoMismatchVariable(String acceptAoMismatchVariable) {
            if (acceptAoMismatchVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptAoMismatchVariable");
            }
            this.acceptAoMismatchVariable = acceptAoMismatchVariable;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeDuration(Integer acceptLifeTimeDuration) {
            if (acceptLifeTimeDuration == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeDuration");
            }
            this.acceptLifeTimeDuration = acceptLifeTimeDuration;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeDurationVariable(String acceptLifeTimeDurationVariable) {
            if (acceptLifeTimeDurationVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeDurationVariable");
            }
            this.acceptLifeTimeDurationVariable = acceptLifeTimeDurationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeExact(Integer acceptLifeTimeExact) {
            if (acceptLifeTimeExact == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeExact");
            }
            this.acceptLifeTimeExact = acceptLifeTimeExact;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeInfinite(Boolean acceptLifeTimeInfinite) {
            if (acceptLifeTimeInfinite == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeInfinite");
            }
            this.acceptLifeTimeInfinite = acceptLifeTimeInfinite;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeInfiniteVariable(String acceptLifeTimeInfiniteVariable) {
            if (acceptLifeTimeInfiniteVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeInfiniteVariable");
            }
            this.acceptLifeTimeInfiniteVariable = acceptLifeTimeInfiniteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeLocal(Boolean acceptLifeTimeLocal) {
            if (acceptLifeTimeLocal == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeLocal");
            }
            this.acceptLifeTimeLocal = acceptLifeTimeLocal;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeLocalVariable(String acceptLifeTimeLocalVariable) {
            if (acceptLifeTimeLocalVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeLocalVariable");
            }
            this.acceptLifeTimeLocalVariable = acceptLifeTimeLocalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder acceptLifeTimeStartEpoch(Integer acceptLifeTimeStartEpoch) {
            if (acceptLifeTimeStartEpoch == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "acceptLifeTimeStartEpoch");
            }
            this.acceptLifeTimeStartEpoch = acceptLifeTimeStartEpoch;
            return this;
        }
        @CustomType.Setter
        public Builder cryptoAlgorithm(String cryptoAlgorithm) {
            if (cryptoAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "cryptoAlgorithm");
            }
            this.cryptoAlgorithm = cryptoAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder id(Integer id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeTcpOptions(Boolean includeTcpOptions) {
            if (includeTcpOptions == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "includeTcpOptions");
            }
            this.includeTcpOptions = includeTcpOptions;
            return this;
        }
        @CustomType.Setter
        public Builder includeTcpOptionsVariable(String includeTcpOptionsVariable) {
            if (includeTcpOptionsVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "includeTcpOptionsVariable");
            }
            this.includeTcpOptionsVariable = includeTcpOptionsVariable;
            return this;
        }
        @CustomType.Setter
        public Builder keyString(String keyString) {
            if (keyString == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "keyString");
            }
            this.keyString = keyString;
            return this;
        }
        @CustomType.Setter
        public Builder keyStringVariable(String keyStringVariable) {
            if (keyStringVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "keyStringVariable");
            }
            this.keyStringVariable = keyStringVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder receiverId(Integer receiverId) {
            if (receiverId == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "receiverId");
            }
            this.receiverId = receiverId;
            return this;
        }
        @CustomType.Setter
        public Builder receiverIdVariable(String receiverIdVariable) {
            if (receiverIdVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "receiverIdVariable");
            }
            this.receiverIdVariable = receiverIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendId(Integer sendId) {
            if (sendId == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendId");
            }
            this.sendId = sendId;
            return this;
        }
        @CustomType.Setter
        public Builder sendIdVariable(String sendIdVariable) {
            if (sendIdVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendIdVariable");
            }
            this.sendIdVariable = sendIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeDuration(Integer sendLifeTimeDuration) {
            if (sendLifeTimeDuration == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeDuration");
            }
            this.sendLifeTimeDuration = sendLifeTimeDuration;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeDurationVariable(String sendLifeTimeDurationVariable) {
            if (sendLifeTimeDurationVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeDurationVariable");
            }
            this.sendLifeTimeDurationVariable = sendLifeTimeDurationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeExact(Integer sendLifeTimeExact) {
            if (sendLifeTimeExact == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeExact");
            }
            this.sendLifeTimeExact = sendLifeTimeExact;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeInfinite(Boolean sendLifeTimeInfinite) {
            if (sendLifeTimeInfinite == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeInfinite");
            }
            this.sendLifeTimeInfinite = sendLifeTimeInfinite;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeInfiniteVariable(String sendLifeTimeInfiniteVariable) {
            if (sendLifeTimeInfiniteVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeInfiniteVariable");
            }
            this.sendLifeTimeInfiniteVariable = sendLifeTimeInfiniteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeLocal(Boolean sendLifeTimeLocal) {
            if (sendLifeTimeLocal == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeLocal");
            }
            this.sendLifeTimeLocal = sendLifeTimeLocal;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeLocalVariable(String sendLifeTimeLocalVariable) {
            if (sendLifeTimeLocalVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeLocalVariable");
            }
            this.sendLifeTimeLocalVariable = sendLifeTimeLocalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sendLifeTimeStartEpoch(Integer sendLifeTimeStartEpoch) {
            if (sendLifeTimeStartEpoch == null) {
              throw new MissingRequiredPropertyException("GetSystemSecurityFeatureKey", "sendLifeTimeStartEpoch");
            }
            this.sendLifeTimeStartEpoch = sendLifeTimeStartEpoch;
            return this;
        }
        public GetSystemSecurityFeatureKey build() {
            final var _resultValue = new GetSystemSecurityFeatureKey();
            _resultValue.acceptAoMismatch = acceptAoMismatch;
            _resultValue.acceptAoMismatchVariable = acceptAoMismatchVariable;
            _resultValue.acceptLifeTimeDuration = acceptLifeTimeDuration;
            _resultValue.acceptLifeTimeDurationVariable = acceptLifeTimeDurationVariable;
            _resultValue.acceptLifeTimeExact = acceptLifeTimeExact;
            _resultValue.acceptLifeTimeInfinite = acceptLifeTimeInfinite;
            _resultValue.acceptLifeTimeInfiniteVariable = acceptLifeTimeInfiniteVariable;
            _resultValue.acceptLifeTimeLocal = acceptLifeTimeLocal;
            _resultValue.acceptLifeTimeLocalVariable = acceptLifeTimeLocalVariable;
            _resultValue.acceptLifeTimeStartEpoch = acceptLifeTimeStartEpoch;
            _resultValue.cryptoAlgorithm = cryptoAlgorithm;
            _resultValue.id = id;
            _resultValue.includeTcpOptions = includeTcpOptions;
            _resultValue.includeTcpOptionsVariable = includeTcpOptionsVariable;
            _resultValue.keyString = keyString;
            _resultValue.keyStringVariable = keyStringVariable;
            _resultValue.name = name;
            _resultValue.receiverId = receiverId;
            _resultValue.receiverIdVariable = receiverIdVariable;
            _resultValue.sendId = sendId;
            _resultValue.sendIdVariable = sendIdVariable;
            _resultValue.sendLifeTimeDuration = sendLifeTimeDuration;
            _resultValue.sendLifeTimeDurationVariable = sendLifeTimeDurationVariable;
            _resultValue.sendLifeTimeExact = sendLifeTimeExact;
            _resultValue.sendLifeTimeInfinite = sendLifeTimeInfinite;
            _resultValue.sendLifeTimeInfiniteVariable = sendLifeTimeInfiniteVariable;
            _resultValue.sendLifeTimeLocal = sendLifeTimeLocal;
            _resultValue.sendLifeTimeLocalVariable = sendLifeTimeLocalVariable;
            _resultValue.sendLifeTimeStartEpoch = sendLifeTimeStartEpoch;
            return _resultValue;
        }
    }
}
