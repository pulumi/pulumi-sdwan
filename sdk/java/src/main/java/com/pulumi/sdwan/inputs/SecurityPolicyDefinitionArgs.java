// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityPolicyDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityPolicyDefinitionArgs Empty = new SecurityPolicyDefinitionArgs();

    /**
     * Destination Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
     * 
     */
    @Import(name="destinationZone")
    private @Nullable Output<String> destinationZone;

    /**
     * @return Destination Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
     * 
     */
    public Optional<Output<String>> destinationZone() {
        return Optional.ofNullable(this.destinationZone);
    }

    /**
     * Policy definition ID
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Policy definition ID
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * Source Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
     * 
     */
    @Import(name="sourceZone")
    private @Nullable Output<String> sourceZone;

    /**
     * @return Source Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
     * 
     */
    public Optional<Output<String>> sourceZone() {
        return Optional.ofNullable(this.sourceZone);
    }

    /**
     * Policy definition type
     *   - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Policy definition type
     *   - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * Policy definition version
     * 
     */
    @Import(name="version")
    private @Nullable Output<Integer> version;

    /**
     * @return Policy definition version
     * 
     */
    public Optional<Output<Integer>> version() {
        return Optional.ofNullable(this.version);
    }

    private SecurityPolicyDefinitionArgs() {}

    private SecurityPolicyDefinitionArgs(SecurityPolicyDefinitionArgs $) {
        this.destinationZone = $.destinationZone;
        this.id = $.id;
        this.sourceZone = $.sourceZone;
        this.type = $.type;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityPolicyDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityPolicyDefinitionArgs $;

        public Builder() {
            $ = new SecurityPolicyDefinitionArgs();
        }

        public Builder(SecurityPolicyDefinitionArgs defaults) {
            $ = new SecurityPolicyDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param destinationZone Destination Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
         * 
         * @return builder
         * 
         */
        public Builder destinationZone(@Nullable Output<String> destinationZone) {
            $.destinationZone = destinationZone;
            return this;
        }

        /**
         * @param destinationZone Destination Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
         * 
         * @return builder
         * 
         */
        public Builder destinationZone(String destinationZone) {
            return destinationZone(Output.of(destinationZone));
        }

        /**
         * @param id Policy definition ID
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Policy definition ID
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param sourceZone Source Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
         * 
         * @return builder
         * 
         */
        public Builder sourceZone(@Nullable Output<String> sourceZone) {
            $.sourceZone = sourceZone;
            return this;
        }

        /**
         * @param sourceZone Source Zone, Attribute conditional on `type` being equal to `zoneBasedFW`
         * 
         * @return builder
         * 
         */
        public Builder sourceZone(String sourceZone) {
            return sourceZone(Output.of(sourceZone));
        }

        /**
         * @param type Policy definition type
         *   - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Policy definition type
         *   - Choices: `urlFiltering`, `zoneBasedFW`, `intrusionPrevention`, `sslDecryption`, `advancedMalwareProtection`, `dnsSecurity`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param version Policy definition version
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<Integer> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version Policy definition version
         * 
         * @return builder
         * 
         */
        public Builder version(Integer version) {
            return version(Output.of(version));
        }

        public SecurityPolicyDefinitionArgs build() {
            if ($.id == null) {
                throw new MissingRequiredPropertyException("SecurityPolicyDefinitionArgs", "id");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("SecurityPolicyDefinitionArgs", "type");
            }
            return $;
        }
    }

}
