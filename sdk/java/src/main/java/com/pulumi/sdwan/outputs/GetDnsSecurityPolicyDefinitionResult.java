// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.sdwan.outputs.GetDnsSecurityPolicyDefinitionTargetVpn;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDnsSecurityPolicyDefinitionResult {
    /**
     * @return Credentials feature template ID
     * 
     */
    private String ciscoSigCredentialsFeatureTemplateId;
    /**
     * @return Credentials feature template version
     * 
     */
    private Integer ciscoSigCredentialsFeatureTemplateVersion;
    /**
     * @return Only relevant when `umbrella_dns_default` is `false`
     * 
     */
    private String customDnsServerIp;
    /**
     * @return The description of the policy definition.
     * 
     */
    private String description;
    /**
     * @return Should DNSCrypt be enabled
     * 
     */
    private Boolean dnscrypt;
    /**
     * @return Local domain bypass list ID
     * 
     */
    private String domainListId;
    /**
     * @return Local domain bypass list version
     * 
     */
    private Integer domainListVersion;
    /**
     * @return The id of the object
     * 
     */
    private String id;
    /**
     * @return Should the local domain bypass list be enabled
     * 
     */
    private Boolean localDomainBypassEnabled;
    /**
     * @return Should use match all VPN
     * 
     */
    private Boolean matchAllVpn;
    /**
     * @return The name of the policy definition.
     * 
     */
    private String name;
    /**
     * @return Only relevant when `match_all_vpn` is `false`
     * 
     */
    private List<GetDnsSecurityPolicyDefinitionTargetVpn> targetVpns;
    /**
     * @return Should use umbrella as DNS Server
     * 
     */
    private Boolean umbrellaDnsDefault;
    /**
     * @return The version of the object
     * 
     */
    private Integer version;

    private GetDnsSecurityPolicyDefinitionResult() {}
    /**
     * @return Credentials feature template ID
     * 
     */
    public String ciscoSigCredentialsFeatureTemplateId() {
        return this.ciscoSigCredentialsFeatureTemplateId;
    }
    /**
     * @return Credentials feature template version
     * 
     */
    public Integer ciscoSigCredentialsFeatureTemplateVersion() {
        return this.ciscoSigCredentialsFeatureTemplateVersion;
    }
    /**
     * @return Only relevant when `umbrella_dns_default` is `false`
     * 
     */
    public String customDnsServerIp() {
        return this.customDnsServerIp;
    }
    /**
     * @return The description of the policy definition.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Should DNSCrypt be enabled
     * 
     */
    public Boolean dnscrypt() {
        return this.dnscrypt;
    }
    /**
     * @return Local domain bypass list ID
     * 
     */
    public String domainListId() {
        return this.domainListId;
    }
    /**
     * @return Local domain bypass list version
     * 
     */
    public Integer domainListVersion() {
        return this.domainListVersion;
    }
    /**
     * @return The id of the object
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Should the local domain bypass list be enabled
     * 
     */
    public Boolean localDomainBypassEnabled() {
        return this.localDomainBypassEnabled;
    }
    /**
     * @return Should use match all VPN
     * 
     */
    public Boolean matchAllVpn() {
        return this.matchAllVpn;
    }
    /**
     * @return The name of the policy definition.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Only relevant when `match_all_vpn` is `false`
     * 
     */
    public List<GetDnsSecurityPolicyDefinitionTargetVpn> targetVpns() {
        return this.targetVpns;
    }
    /**
     * @return Should use umbrella as DNS Server
     * 
     */
    public Boolean umbrellaDnsDefault() {
        return this.umbrellaDnsDefault;
    }
    /**
     * @return The version of the object
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDnsSecurityPolicyDefinitionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ciscoSigCredentialsFeatureTemplateId;
        private Integer ciscoSigCredentialsFeatureTemplateVersion;
        private String customDnsServerIp;
        private String description;
        private Boolean dnscrypt;
        private String domainListId;
        private Integer domainListVersion;
        private String id;
        private Boolean localDomainBypassEnabled;
        private Boolean matchAllVpn;
        private String name;
        private List<GetDnsSecurityPolicyDefinitionTargetVpn> targetVpns;
        private Boolean umbrellaDnsDefault;
        private Integer version;
        public Builder() {}
        public Builder(GetDnsSecurityPolicyDefinitionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ciscoSigCredentialsFeatureTemplateId = defaults.ciscoSigCredentialsFeatureTemplateId;
    	      this.ciscoSigCredentialsFeatureTemplateVersion = defaults.ciscoSigCredentialsFeatureTemplateVersion;
    	      this.customDnsServerIp = defaults.customDnsServerIp;
    	      this.description = defaults.description;
    	      this.dnscrypt = defaults.dnscrypt;
    	      this.domainListId = defaults.domainListId;
    	      this.domainListVersion = defaults.domainListVersion;
    	      this.id = defaults.id;
    	      this.localDomainBypassEnabled = defaults.localDomainBypassEnabled;
    	      this.matchAllVpn = defaults.matchAllVpn;
    	      this.name = defaults.name;
    	      this.targetVpns = defaults.targetVpns;
    	      this.umbrellaDnsDefault = defaults.umbrellaDnsDefault;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder ciscoSigCredentialsFeatureTemplateId(String ciscoSigCredentialsFeatureTemplateId) {
            if (ciscoSigCredentialsFeatureTemplateId == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "ciscoSigCredentialsFeatureTemplateId");
            }
            this.ciscoSigCredentialsFeatureTemplateId = ciscoSigCredentialsFeatureTemplateId;
            return this;
        }
        @CustomType.Setter
        public Builder ciscoSigCredentialsFeatureTemplateVersion(Integer ciscoSigCredentialsFeatureTemplateVersion) {
            if (ciscoSigCredentialsFeatureTemplateVersion == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "ciscoSigCredentialsFeatureTemplateVersion");
            }
            this.ciscoSigCredentialsFeatureTemplateVersion = ciscoSigCredentialsFeatureTemplateVersion;
            return this;
        }
        @CustomType.Setter
        public Builder customDnsServerIp(String customDnsServerIp) {
            if (customDnsServerIp == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "customDnsServerIp");
            }
            this.customDnsServerIp = customDnsServerIp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnscrypt(Boolean dnscrypt) {
            if (dnscrypt == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "dnscrypt");
            }
            this.dnscrypt = dnscrypt;
            return this;
        }
        @CustomType.Setter
        public Builder domainListId(String domainListId) {
            if (domainListId == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "domainListId");
            }
            this.domainListId = domainListId;
            return this;
        }
        @CustomType.Setter
        public Builder domainListVersion(Integer domainListVersion) {
            if (domainListVersion == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "domainListVersion");
            }
            this.domainListVersion = domainListVersion;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder localDomainBypassEnabled(Boolean localDomainBypassEnabled) {
            if (localDomainBypassEnabled == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "localDomainBypassEnabled");
            }
            this.localDomainBypassEnabled = localDomainBypassEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder matchAllVpn(Boolean matchAllVpn) {
            if (matchAllVpn == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "matchAllVpn");
            }
            this.matchAllVpn = matchAllVpn;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder targetVpns(List<GetDnsSecurityPolicyDefinitionTargetVpn> targetVpns) {
            if (targetVpns == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "targetVpns");
            }
            this.targetVpns = targetVpns;
            return this;
        }
        public Builder targetVpns(GetDnsSecurityPolicyDefinitionTargetVpn... targetVpns) {
            return targetVpns(List.of(targetVpns));
        }
        @CustomType.Setter
        public Builder umbrellaDnsDefault(Boolean umbrellaDnsDefault) {
            if (umbrellaDnsDefault == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "umbrellaDnsDefault");
            }
            this.umbrellaDnsDefault = umbrellaDnsDefault;
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            if (version == null) {
              throw new MissingRequiredPropertyException("GetDnsSecurityPolicyDefinitionResult", "version");
            }
            this.version = version;
            return this;
        }
        public GetDnsSecurityPolicyDefinitionResult build() {
            final var _resultValue = new GetDnsSecurityPolicyDefinitionResult();
            _resultValue.ciscoSigCredentialsFeatureTemplateId = ciscoSigCredentialsFeatureTemplateId;
            _resultValue.ciscoSigCredentialsFeatureTemplateVersion = ciscoSigCredentialsFeatureTemplateVersion;
            _resultValue.customDnsServerIp = customDnsServerIp;
            _resultValue.description = description;
            _resultValue.dnscrypt = dnscrypt;
            _resultValue.domainListId = domainListId;
            _resultValue.domainListVersion = domainListVersion;
            _resultValue.id = id;
            _resultValue.localDomainBypassEnabled = localDomainBypassEnabled;
            _resultValue.matchAllVpn = matchAllVpn;
            _resultValue.name = name;
            _resultValue.targetVpns = targetVpns;
            _resultValue.umbrellaDnsDefault = umbrellaDnsDefault;
            _resultValue.version = version;
            return _resultValue;
        }
    }
}
