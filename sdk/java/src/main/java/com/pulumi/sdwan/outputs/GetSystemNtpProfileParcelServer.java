// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSystemNtpProfileParcelServer {
    /**
     * @return Set authentication key for the server
     * 
     */
    private Integer authenticationKey;
    /**
     * @return Variable name
     * 
     */
    private String authenticationKeyVariable;
    /**
     * @return Set hostname or IP address of server
     * 
     */
    private String hostnameIpAddress;
    /**
     * @return Variable name
     * 
     */
    private String hostnameIpAddressVariable;
    /**
     * @return Set NTP version
     * 
     */
    private Integer ntpVersion;
    /**
     * @return Variable name
     * 
     */
    private String ntpVersionVariable;
    /**
     * @return Prefer this NTP server
     * 
     */
    private Boolean preferThisNtpServer;
    /**
     * @return Variable name
     * 
     */
    private String preferThisNtpServerVariable;
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    private String sourceInterface;
    /**
     * @return Variable name
     * 
     */
    private String sourceInterfaceVariable;
    /**
     * @return Set VPN in which NTP server is located
     * 
     */
    private Integer vpn;
    /**
     * @return Variable name
     * 
     */
    private String vpnVariable;

    private GetSystemNtpProfileParcelServer() {}
    /**
     * @return Set authentication key for the server
     * 
     */
    public Integer authenticationKey() {
        return this.authenticationKey;
    }
    /**
     * @return Variable name
     * 
     */
    public String authenticationKeyVariable() {
        return this.authenticationKeyVariable;
    }
    /**
     * @return Set hostname or IP address of server
     * 
     */
    public String hostnameIpAddress() {
        return this.hostnameIpAddress;
    }
    /**
     * @return Variable name
     * 
     */
    public String hostnameIpAddressVariable() {
        return this.hostnameIpAddressVariable;
    }
    /**
     * @return Set NTP version
     * 
     */
    public Integer ntpVersion() {
        return this.ntpVersion;
    }
    /**
     * @return Variable name
     * 
     */
    public String ntpVersionVariable() {
        return this.ntpVersionVariable;
    }
    /**
     * @return Prefer this NTP server
     * 
     */
    public Boolean preferThisNtpServer() {
        return this.preferThisNtpServer;
    }
    /**
     * @return Variable name
     * 
     */
    public String preferThisNtpServerVariable() {
        return this.preferThisNtpServerVariable;
    }
    /**
     * @return Set interface to use to reach NTP server
     * 
     */
    public String sourceInterface() {
        return this.sourceInterface;
    }
    /**
     * @return Variable name
     * 
     */
    public String sourceInterfaceVariable() {
        return this.sourceInterfaceVariable;
    }
    /**
     * @return Set VPN in which NTP server is located
     * 
     */
    public Integer vpn() {
        return this.vpn;
    }
    /**
     * @return Variable name
     * 
     */
    public String vpnVariable() {
        return this.vpnVariable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSystemNtpProfileParcelServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer authenticationKey;
        private String authenticationKeyVariable;
        private String hostnameIpAddress;
        private String hostnameIpAddressVariable;
        private Integer ntpVersion;
        private String ntpVersionVariable;
        private Boolean preferThisNtpServer;
        private String preferThisNtpServerVariable;
        private String sourceInterface;
        private String sourceInterfaceVariable;
        private Integer vpn;
        private String vpnVariable;
        public Builder() {}
        public Builder(GetSystemNtpProfileParcelServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationKey = defaults.authenticationKey;
    	      this.authenticationKeyVariable = defaults.authenticationKeyVariable;
    	      this.hostnameIpAddress = defaults.hostnameIpAddress;
    	      this.hostnameIpAddressVariable = defaults.hostnameIpAddressVariable;
    	      this.ntpVersion = defaults.ntpVersion;
    	      this.ntpVersionVariable = defaults.ntpVersionVariable;
    	      this.preferThisNtpServer = defaults.preferThisNtpServer;
    	      this.preferThisNtpServerVariable = defaults.preferThisNtpServerVariable;
    	      this.sourceInterface = defaults.sourceInterface;
    	      this.sourceInterfaceVariable = defaults.sourceInterfaceVariable;
    	      this.vpn = defaults.vpn;
    	      this.vpnVariable = defaults.vpnVariable;
        }

        @CustomType.Setter
        public Builder authenticationKey(Integer authenticationKey) {
            if (authenticationKey == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "authenticationKey");
            }
            this.authenticationKey = authenticationKey;
            return this;
        }
        @CustomType.Setter
        public Builder authenticationKeyVariable(String authenticationKeyVariable) {
            if (authenticationKeyVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "authenticationKeyVariable");
            }
            this.authenticationKeyVariable = authenticationKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpAddress(String hostnameIpAddress) {
            if (hostnameIpAddress == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "hostnameIpAddress");
            }
            this.hostnameIpAddress = hostnameIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder hostnameIpAddressVariable(String hostnameIpAddressVariable) {
            if (hostnameIpAddressVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "hostnameIpAddressVariable");
            }
            this.hostnameIpAddressVariable = hostnameIpAddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ntpVersion(Integer ntpVersion) {
            if (ntpVersion == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "ntpVersion");
            }
            this.ntpVersion = ntpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ntpVersionVariable(String ntpVersionVariable) {
            if (ntpVersionVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "ntpVersionVariable");
            }
            this.ntpVersionVariable = ntpVersionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder preferThisNtpServer(Boolean preferThisNtpServer) {
            if (preferThisNtpServer == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "preferThisNtpServer");
            }
            this.preferThisNtpServer = preferThisNtpServer;
            return this;
        }
        @CustomType.Setter
        public Builder preferThisNtpServerVariable(String preferThisNtpServerVariable) {
            if (preferThisNtpServerVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "preferThisNtpServerVariable");
            }
            this.preferThisNtpServerVariable = preferThisNtpServerVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterface(String sourceInterface) {
            if (sourceInterface == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "sourceInterface");
            }
            this.sourceInterface = sourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceVariable(String sourceInterfaceVariable) {
            if (sourceInterfaceVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "sourceInterfaceVariable");
            }
            this.sourceInterfaceVariable = sourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder vpn(Integer vpn) {
            if (vpn == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "vpn");
            }
            this.vpn = vpn;
            return this;
        }
        @CustomType.Setter
        public Builder vpnVariable(String vpnVariable) {
            if (vpnVariable == null) {
              throw new MissingRequiredPropertyException("GetSystemNtpProfileParcelServer", "vpnVariable");
            }
            this.vpnVariable = vpnVariable;
            return this;
        }
        public GetSystemNtpProfileParcelServer build() {
            final var _resultValue = new GetSystemNtpProfileParcelServer();
            _resultValue.authenticationKey = authenticationKey;
            _resultValue.authenticationKeyVariable = authenticationKeyVariable;
            _resultValue.hostnameIpAddress = hostnameIpAddress;
            _resultValue.hostnameIpAddressVariable = hostnameIpAddressVariable;
            _resultValue.ntpVersion = ntpVersion;
            _resultValue.ntpVersionVariable = ntpVersionVariable;
            _resultValue.preferThisNtpServer = preferThisNtpServer;
            _resultValue.preferThisNtpServerVariable = preferThisNtpServerVariable;
            _resultValue.sourceInterface = sourceInterface;
            _resultValue.sourceInterfaceVariable = sourceInterfaceVariable;
            _resultValue.vpn = vpn;
            _resultValue.vpnVariable = vpnVariable;
            return _resultValue;
        }
    }
}
