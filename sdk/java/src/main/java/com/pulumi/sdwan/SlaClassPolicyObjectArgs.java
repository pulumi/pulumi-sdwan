// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SlaClassPolicyObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final SlaClassPolicyObjectArgs Empty = new SlaClassPolicyObjectArgs();

    /**
     * App Probe Class Policy Object ID
     * 
     */
    @Import(name="appProbeClassId")
    private @Nullable Output<String> appProbeClassId;

    /**
     * @return App Probe Class Policy Object ID
     * 
     */
    public Optional<Output<String>> appProbeClassId() {
        return Optional.ofNullable(this.appProbeClassId);
    }

    /**
     * App Probe Class Policy Object version
     * 
     */
    @Import(name="appProbeClassVersion")
    private @Nullable Output<Integer> appProbeClassVersion;

    /**
     * @return App Probe Class Policy Object version
     * 
     */
    public Optional<Output<Integer>> appProbeClassVersion() {
        return Optional.ofNullable(this.appProbeClassVersion);
    }

    /**
     * - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`,
     *   `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`,
     *   `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
     * 
     */
    @Import(name="fallbackBestTunnelCriteria")
    private @Nullable Output<String> fallbackBestTunnelCriteria;

    /**
     * @return - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`,
     * `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`,
     * `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
     * 
     */
    public Optional<Output<String>> fallbackBestTunnelCriteria() {
        return Optional.ofNullable(this.fallbackBestTunnelCriteria);
    }

    /**
     * Jitter variance in ms - Range: `1`-`1000`
     * 
     */
    @Import(name="fallbackBestTunnelJitter")
    private @Nullable Output<Integer> fallbackBestTunnelJitter;

    /**
     * @return Jitter variance in ms - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> fallbackBestTunnelJitter() {
        return Optional.ofNullable(this.fallbackBestTunnelJitter);
    }

    /**
     * Latency variance in ms - Range: `1`-`1000`
     * 
     */
    @Import(name="fallbackBestTunnelLatency")
    private @Nullable Output<Integer> fallbackBestTunnelLatency;

    /**
     * @return Latency variance in ms - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> fallbackBestTunnelLatency() {
        return Optional.ofNullable(this.fallbackBestTunnelLatency);
    }

    /**
     * Loss variance in percent - Range: `1`-`100`
     * 
     */
    @Import(name="fallbackBestTunnelLoss")
    private @Nullable Output<Integer> fallbackBestTunnelLoss;

    /**
     * @return Loss variance in percent - Range: `1`-`100`
     * 
     */
    public Optional<Output<Integer>> fallbackBestTunnelLoss() {
        return Optional.ofNullable(this.fallbackBestTunnelLoss);
    }

    /**
     * Jitter in ms - Range: `1`-`1000`
     * 
     */
    @Import(name="jitter")
    private @Nullable Output<Integer> jitter;

    /**
     * @return Jitter in ms - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> jitter() {
        return Optional.ofNullable(this.jitter);
    }

    /**
     * Latency in ms - Range: `1`-`1000`
     * 
     */
    @Import(name="latency")
    private @Nullable Output<Integer> latency;

    /**
     * @return Latency in ms - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> latency() {
        return Optional.ofNullable(this.latency);
    }

    /**
     * Loss in percent - Range: `1`-`100`
     * 
     */
    @Import(name="loss")
    private @Nullable Output<Integer> loss;

    /**
     * @return Loss in percent - Range: `1`-`100`
     * 
     */
    public Optional<Output<Integer>> loss() {
        return Optional.ofNullable(this.loss);
    }

    /**
     * The name of the policy object
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the policy object
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private SlaClassPolicyObjectArgs() {}

    private SlaClassPolicyObjectArgs(SlaClassPolicyObjectArgs $) {
        this.appProbeClassId = $.appProbeClassId;
        this.appProbeClassVersion = $.appProbeClassVersion;
        this.fallbackBestTunnelCriteria = $.fallbackBestTunnelCriteria;
        this.fallbackBestTunnelJitter = $.fallbackBestTunnelJitter;
        this.fallbackBestTunnelLatency = $.fallbackBestTunnelLatency;
        this.fallbackBestTunnelLoss = $.fallbackBestTunnelLoss;
        this.jitter = $.jitter;
        this.latency = $.latency;
        this.loss = $.loss;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlaClassPolicyObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlaClassPolicyObjectArgs $;

        public Builder() {
            $ = new SlaClassPolicyObjectArgs();
        }

        public Builder(SlaClassPolicyObjectArgs defaults) {
            $ = new SlaClassPolicyObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param appProbeClassId App Probe Class Policy Object ID
         * 
         * @return builder
         * 
         */
        public Builder appProbeClassId(@Nullable Output<String> appProbeClassId) {
            $.appProbeClassId = appProbeClassId;
            return this;
        }

        /**
         * @param appProbeClassId App Probe Class Policy Object ID
         * 
         * @return builder
         * 
         */
        public Builder appProbeClassId(String appProbeClassId) {
            return appProbeClassId(Output.of(appProbeClassId));
        }

        /**
         * @param appProbeClassVersion App Probe Class Policy Object version
         * 
         * @return builder
         * 
         */
        public Builder appProbeClassVersion(@Nullable Output<Integer> appProbeClassVersion) {
            $.appProbeClassVersion = appProbeClassVersion;
            return this;
        }

        /**
         * @param appProbeClassVersion App Probe Class Policy Object version
         * 
         * @return builder
         * 
         */
        public Builder appProbeClassVersion(Integer appProbeClassVersion) {
            return appProbeClassVersion(Output.of(appProbeClassVersion));
        }

        /**
         * @param fallbackBestTunnelCriteria - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`,
         * `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`,
         * `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelCriteria(@Nullable Output<String> fallbackBestTunnelCriteria) {
            $.fallbackBestTunnelCriteria = fallbackBestTunnelCriteria;
            return this;
        }

        /**
         * @param fallbackBestTunnelCriteria - Choices: `loss`, `latency`, `jitter`, `loss-latency`, `loss-jitter`, `latency-loss`, `latency-jitter`,
         * `jitter-latency`, `jitter-loss`, `loss-latency-jitter`, `loss-jitter-latency`, `latency-loss-jitter`,
         * `latency-jitter-loss`, `jitter-latency-loss`, `jitter-loss-latency`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelCriteria(String fallbackBestTunnelCriteria) {
            return fallbackBestTunnelCriteria(Output.of(fallbackBestTunnelCriteria));
        }

        /**
         * @param fallbackBestTunnelJitter Jitter variance in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelJitter(@Nullable Output<Integer> fallbackBestTunnelJitter) {
            $.fallbackBestTunnelJitter = fallbackBestTunnelJitter;
            return this;
        }

        /**
         * @param fallbackBestTunnelJitter Jitter variance in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelJitter(Integer fallbackBestTunnelJitter) {
            return fallbackBestTunnelJitter(Output.of(fallbackBestTunnelJitter));
        }

        /**
         * @param fallbackBestTunnelLatency Latency variance in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLatency(@Nullable Output<Integer> fallbackBestTunnelLatency) {
            $.fallbackBestTunnelLatency = fallbackBestTunnelLatency;
            return this;
        }

        /**
         * @param fallbackBestTunnelLatency Latency variance in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLatency(Integer fallbackBestTunnelLatency) {
            return fallbackBestTunnelLatency(Output.of(fallbackBestTunnelLatency));
        }

        /**
         * @param fallbackBestTunnelLoss Loss variance in percent - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLoss(@Nullable Output<Integer> fallbackBestTunnelLoss) {
            $.fallbackBestTunnelLoss = fallbackBestTunnelLoss;
            return this;
        }

        /**
         * @param fallbackBestTunnelLoss Loss variance in percent - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder fallbackBestTunnelLoss(Integer fallbackBestTunnelLoss) {
            return fallbackBestTunnelLoss(Output.of(fallbackBestTunnelLoss));
        }

        /**
         * @param jitter Jitter in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder jitter(@Nullable Output<Integer> jitter) {
            $.jitter = jitter;
            return this;
        }

        /**
         * @param jitter Jitter in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder jitter(Integer jitter) {
            return jitter(Output.of(jitter));
        }

        /**
         * @param latency Latency in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder latency(@Nullable Output<Integer> latency) {
            $.latency = latency;
            return this;
        }

        /**
         * @param latency Latency in ms - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder latency(Integer latency) {
            return latency(Output.of(latency));
        }

        /**
         * @param loss Loss in percent - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder loss(@Nullable Output<Integer> loss) {
            $.loss = loss;
            return this;
        }

        /**
         * @param loss Loss in percent - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder loss(Integer loss) {
            return loss(Output.of(loss));
        }

        /**
         * @param name The name of the policy object
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the policy object
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public SlaClassPolicyObjectArgs build() {
            return $;
        }
    }

}
