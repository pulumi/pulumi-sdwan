// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoSecureInternetGatewayFeatureTemplateInterface {
    /**
     * @return Enable Application Tunnel Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    private @Nullable String application;
    /**
     * @return Auto Tunnel Mode
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean autoTunnelMode;
    /**
     * @return IKE keepalive interval (seconds)
     *   - Range: `0`-`65535`
     *   - Default value: `10`
     * 
     */
    private @Nullable Integer deadPeerDetectionInterval;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String deadPeerDetectionIntervalVariable;
    /**
     * @return IKE keepalive retries
     *   - Range: `0`-`255`
     *   - Default value: `3`
     * 
     */
    private @Nullable Integer deadPeerDetectionRetries;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String deadPeerDetectionRetriesVariable;
    /**
     * @return Interface description
     * 
     */
    private @Nullable String description;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String descriptionVariable;
    /**
     * @return IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    private @Nullable String ikeCiphersuite;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikeCiphersuiteVariable;
    /**
     * @return IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`
     *   - Default value: `14`
     * 
     */
    private @Nullable String ikeGroup;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikeGroupVariable;
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    private @Nullable String ikePreSharedKey;
    /**
     * @return Use preshared key to authenticate IKE peer
     *   - Default value: `true`
     * 
     */
    private @Nullable Boolean ikePreSharedKeyDynamic;
    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    private @Nullable String ikePreSharedKeyLocalId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikePreSharedKeyLocalIdVariable;
    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    private @Nullable String ikePreSharedKeyRemoteId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikePreSharedKeyRemoteIdVariable;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikePreSharedKeyVariable;
    /**
     * @return IKE rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `14400`
     * 
     */
    private @Nullable Integer ikeRekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikeRekeyIntervalVariable;
    /**
     * @return IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `2`
     * 
     */
    private @Nullable Integer ikeVersion;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ikeVersionVariable;
    /**
     * @return Unnumbered interface
     *   - Default value: `true`
     * 
     */
    private @Nullable Boolean ipUnnumbered;
    /**
     * @return IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    private @Nullable String ipsecCiphersuite;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ipsecCiphersuiteVariable;
    /**
     * @return IPsec perfect forward secrecy settings
     *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
     *   - Default value: `none`
     * 
     */
    private @Nullable String ipsecPerfectForwardSecrecy;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ipsecPerfectForwardSecrecyVariable;
    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `3600`
     * 
     */
    private @Nullable Integer ipsecRekeyInterval;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ipsecRekeyIntervalVariable;
    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    private @Nullable Integer ipsecReplayWindow;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ipsecReplayWindowVariable;
    /**
     * @return Assign IPv4 address
     * 
     */
    private @Nullable String ipv4Address;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String ipv4AddressVariable;
    /**
     * @return Interface MTU &lt;576..2000&gt;, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1400`
     * 
     */
    private @Nullable Integer mtu;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String mtuVariable;
    /**
     * @return Interface name: IPsec when present
     * 
     */
    private @Nullable String name;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String nameVariable;
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Administrative state
     *   - Default value: `false`
     * 
     */
    private @Nullable Boolean shutdown;
    /**
     * @return SIG Tunnel Provider
     *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
     *   - Default value: `secure-internet-gateway-umbrella`
     * 
     */
    private @Nullable String sigProvider;
    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    private @Nullable Integer tcpMss;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String tcpMssVariable;
    /**
     * @return Enable/disable SIG tracking
     *   - Default value: `true`
     * 
     */
    private @Nullable Boolean trackEnable;
    /**
     * @return Enable tracker for this interface
     * 
     */
    private @Nullable String tracker;
    /**
     * @return SIG Tunnel Data Center
     *   - Choices: `primary-dc`, `secondary-dc`
     *   - Default value: `primary-dc`
     * 
     */
    private @Nullable String tunnelDcPreference;
    /**
     * @return Tunnel destination IP address
     * 
     */
    private @Nullable String tunnelDestination;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String tunnelDestinationVariable;
    /**
     * @return Public IP required to setup GRE tunnel to Zscaler
     *   - Default value: `Auto`
     * 
     */
    private @Nullable String tunnelPublicIp;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String tunnelPublicIpVariable;
    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    private @Nullable String tunnelRouteVia;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String tunnelRouteViaVariable;
    /**
     * @return Tunnel source IP Address
     * 
     */
    private @Nullable String tunnelSource;
    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    private @Nullable String tunnelSourceInterface;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String tunnelSourceInterfaceVariable;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String tunnelSourceVariable;

    private CiscoSecureInternetGatewayFeatureTemplateInterface() {}
    /**
     * @return Enable Application Tunnel Type
     *   - Choices: `sig`
     *   - Default value: `sig`
     * 
     */
    public Optional<String> application() {
        return Optional.ofNullable(this.application);
    }
    /**
     * @return Auto Tunnel Mode
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> autoTunnelMode() {
        return Optional.ofNullable(this.autoTunnelMode);
    }
    /**
     * @return IKE keepalive interval (seconds)
     *   - Range: `0`-`65535`
     *   - Default value: `10`
     * 
     */
    public Optional<Integer> deadPeerDetectionInterval() {
        return Optional.ofNullable(this.deadPeerDetectionInterval);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> deadPeerDetectionIntervalVariable() {
        return Optional.ofNullable(this.deadPeerDetectionIntervalVariable);
    }
    /**
     * @return IKE keepalive retries
     *   - Range: `0`-`255`
     *   - Default value: `3`
     * 
     */
    public Optional<Integer> deadPeerDetectionRetries() {
        return Optional.ofNullable(this.deadPeerDetectionRetries);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> deadPeerDetectionRetriesVariable() {
        return Optional.ofNullable(this.deadPeerDetectionRetriesVariable);
    }
    /**
     * @return Interface description
     * 
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> descriptionVariable() {
        return Optional.ofNullable(this.descriptionVariable);
    }
    /**
     * @return IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    public Optional<String> ikeCiphersuite() {
        return Optional.ofNullable(this.ikeCiphersuite);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikeCiphersuiteVariable() {
        return Optional.ofNullable(this.ikeCiphersuiteVariable);
    }
    /**
     * @return IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`
     *   - Default value: `14`
     * 
     */
    public Optional<String> ikeGroup() {
        return Optional.ofNullable(this.ikeGroup);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikeGroupVariable() {
        return Optional.ofNullable(this.ikeGroupVariable);
    }
    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Optional<String> ikePreSharedKey() {
        return Optional.ofNullable(this.ikePreSharedKey);
    }
    /**
     * @return Use preshared key to authenticate IKE peer
     *   - Default value: `true`
     * 
     */
    public Optional<Boolean> ikePreSharedKeyDynamic() {
        return Optional.ofNullable(this.ikePreSharedKeyDynamic);
    }
    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<String> ikePreSharedKeyLocalId() {
        return Optional.ofNullable(this.ikePreSharedKeyLocalId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikePreSharedKeyLocalIdVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyLocalIdVariable);
    }
    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<String> ikePreSharedKeyRemoteId() {
        return Optional.ofNullable(this.ikePreSharedKeyRemoteId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikePreSharedKeyRemoteIdVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyRemoteIdVariable);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikePreSharedKeyVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyVariable);
    }
    /**
     * @return IKE rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `14400`
     * 
     */
    public Optional<Integer> ikeRekeyInterval() {
        return Optional.ofNullable(this.ikeRekeyInterval);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikeRekeyIntervalVariable() {
        return Optional.ofNullable(this.ikeRekeyIntervalVariable);
    }
    /**
     * @return IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `2`
     * 
     */
    public Optional<Integer> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ikeVersionVariable() {
        return Optional.ofNullable(this.ikeVersionVariable);
    }
    /**
     * @return Unnumbered interface
     *   - Default value: `true`
     * 
     */
    public Optional<Boolean> ipUnnumbered() {
        return Optional.ofNullable(this.ipUnnumbered);
    }
    /**
     * @return IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    public Optional<String> ipsecCiphersuite() {
        return Optional.ofNullable(this.ipsecCiphersuite);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ipsecCiphersuiteVariable() {
        return Optional.ofNullable(this.ipsecCiphersuiteVariable);
    }
    /**
     * @return IPsec perfect forward secrecy settings
     *   - Choices: `group-2`, `group-14`, `group-15`, `group-16`, `none`
     *   - Default value: `none`
     * 
     */
    public Optional<String> ipsecPerfectForwardSecrecy() {
        return Optional.ofNullable(this.ipsecPerfectForwardSecrecy);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ipsecPerfectForwardSecrecyVariable() {
        return Optional.ofNullable(this.ipsecPerfectForwardSecrecyVariable);
    }
    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `300`-`1209600`
     *   - Default value: `3600`
     * 
     */
    public Optional<Integer> ipsecRekeyInterval() {
        return Optional.ofNullable(this.ipsecRekeyInterval);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ipsecRekeyIntervalVariable() {
        return Optional.ofNullable(this.ipsecRekeyIntervalVariable);
    }
    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    public Optional<Integer> ipsecReplayWindow() {
        return Optional.ofNullable(this.ipsecReplayWindow);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ipsecReplayWindowVariable() {
        return Optional.ofNullable(this.ipsecReplayWindowVariable);
    }
    /**
     * @return Assign IPv4 address
     * 
     */
    public Optional<String> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> ipv4AddressVariable() {
        return Optional.ofNullable(this.ipv4AddressVariable);
    }
    /**
     * @return Interface MTU &lt;576..2000&gt;, in bytes
     *   - Range: `576`-`2000`
     *   - Default value: `1400`
     * 
     */
    public Optional<Integer> mtu() {
        return Optional.ofNullable(this.mtu);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> mtuVariable() {
        return Optional.ofNullable(this.mtuVariable);
    }
    /**
     * @return Interface name: IPsec when present
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> nameVariable() {
        return Optional.ofNullable(this.nameVariable);
    }
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Administrative state
     *   - Default value: `false`
     * 
     */
    public Optional<Boolean> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }
    /**
     * @return SIG Tunnel Provider
     *   - Choices: `secure-internet-gateway-umbrella`, `secure-internet-gateway-zscaler`, `secure-internet-gateway-other`
     *   - Default value: `secure-internet-gateway-umbrella`
     * 
     */
    public Optional<String> sigProvider() {
        return Optional.ofNullable(this.sigProvider);
    }
    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Integer> tcpMss() {
        return Optional.ofNullable(this.tcpMss);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> tcpMssVariable() {
        return Optional.ofNullable(this.tcpMssVariable);
    }
    /**
     * @return Enable/disable SIG tracking
     *   - Default value: `true`
     * 
     */
    public Optional<Boolean> trackEnable() {
        return Optional.ofNullable(this.trackEnable);
    }
    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<String> tracker() {
        return Optional.ofNullable(this.tracker);
    }
    /**
     * @return SIG Tunnel Data Center
     *   - Choices: `primary-dc`, `secondary-dc`
     *   - Default value: `primary-dc`
     * 
     */
    public Optional<String> tunnelDcPreference() {
        return Optional.ofNullable(this.tunnelDcPreference);
    }
    /**
     * @return Tunnel destination IP address
     * 
     */
    public Optional<String> tunnelDestination() {
        return Optional.ofNullable(this.tunnelDestination);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> tunnelDestinationVariable() {
        return Optional.ofNullable(this.tunnelDestinationVariable);
    }
    /**
     * @return Public IP required to setup GRE tunnel to Zscaler
     *   - Default value: `Auto`
     * 
     */
    public Optional<String> tunnelPublicIp() {
        return Optional.ofNullable(this.tunnelPublicIp);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> tunnelPublicIpVariable() {
        return Optional.ofNullable(this.tunnelPublicIpVariable);
    }
    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<String> tunnelRouteVia() {
        return Optional.ofNullable(this.tunnelRouteVia);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> tunnelRouteViaVariable() {
        return Optional.ofNullable(this.tunnelRouteViaVariable);
    }
    /**
     * @return Tunnel source IP Address
     * 
     */
    public Optional<String> tunnelSource() {
        return Optional.ofNullable(this.tunnelSource);
    }
    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<String> tunnelSourceInterface() {
        return Optional.ofNullable(this.tunnelSourceInterface);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> tunnelSourceInterfaceVariable() {
        return Optional.ofNullable(this.tunnelSourceInterfaceVariable);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> tunnelSourceVariable() {
        return Optional.ofNullable(this.tunnelSourceVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoSecureInternetGatewayFeatureTemplateInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String application;
        private @Nullable Boolean autoTunnelMode;
        private @Nullable Integer deadPeerDetectionInterval;
        private @Nullable String deadPeerDetectionIntervalVariable;
        private @Nullable Integer deadPeerDetectionRetries;
        private @Nullable String deadPeerDetectionRetriesVariable;
        private @Nullable String description;
        private @Nullable String descriptionVariable;
        private @Nullable String ikeCiphersuite;
        private @Nullable String ikeCiphersuiteVariable;
        private @Nullable String ikeGroup;
        private @Nullable String ikeGroupVariable;
        private @Nullable String ikePreSharedKey;
        private @Nullable Boolean ikePreSharedKeyDynamic;
        private @Nullable String ikePreSharedKeyLocalId;
        private @Nullable String ikePreSharedKeyLocalIdVariable;
        private @Nullable String ikePreSharedKeyRemoteId;
        private @Nullable String ikePreSharedKeyRemoteIdVariable;
        private @Nullable String ikePreSharedKeyVariable;
        private @Nullable Integer ikeRekeyInterval;
        private @Nullable String ikeRekeyIntervalVariable;
        private @Nullable Integer ikeVersion;
        private @Nullable String ikeVersionVariable;
        private @Nullable Boolean ipUnnumbered;
        private @Nullable String ipsecCiphersuite;
        private @Nullable String ipsecCiphersuiteVariable;
        private @Nullable String ipsecPerfectForwardSecrecy;
        private @Nullable String ipsecPerfectForwardSecrecyVariable;
        private @Nullable Integer ipsecRekeyInterval;
        private @Nullable String ipsecRekeyIntervalVariable;
        private @Nullable Integer ipsecReplayWindow;
        private @Nullable String ipsecReplayWindowVariable;
        private @Nullable String ipv4Address;
        private @Nullable String ipv4AddressVariable;
        private @Nullable Integer mtu;
        private @Nullable String mtuVariable;
        private @Nullable String name;
        private @Nullable String nameVariable;
        private @Nullable Boolean optional;
        private @Nullable Boolean shutdown;
        private @Nullable String sigProvider;
        private @Nullable Integer tcpMss;
        private @Nullable String tcpMssVariable;
        private @Nullable Boolean trackEnable;
        private @Nullable String tracker;
        private @Nullable String tunnelDcPreference;
        private @Nullable String tunnelDestination;
        private @Nullable String tunnelDestinationVariable;
        private @Nullable String tunnelPublicIp;
        private @Nullable String tunnelPublicIpVariable;
        private @Nullable String tunnelRouteVia;
        private @Nullable String tunnelRouteViaVariable;
        private @Nullable String tunnelSource;
        private @Nullable String tunnelSourceInterface;
        private @Nullable String tunnelSourceInterfaceVariable;
        private @Nullable String tunnelSourceVariable;
        public Builder() {}
        public Builder(CiscoSecureInternetGatewayFeatureTemplateInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.application = defaults.application;
    	      this.autoTunnelMode = defaults.autoTunnelMode;
    	      this.deadPeerDetectionInterval = defaults.deadPeerDetectionInterval;
    	      this.deadPeerDetectionIntervalVariable = defaults.deadPeerDetectionIntervalVariable;
    	      this.deadPeerDetectionRetries = defaults.deadPeerDetectionRetries;
    	      this.deadPeerDetectionRetriesVariable = defaults.deadPeerDetectionRetriesVariable;
    	      this.description = defaults.description;
    	      this.descriptionVariable = defaults.descriptionVariable;
    	      this.ikeCiphersuite = defaults.ikeCiphersuite;
    	      this.ikeCiphersuiteVariable = defaults.ikeCiphersuiteVariable;
    	      this.ikeGroup = defaults.ikeGroup;
    	      this.ikeGroupVariable = defaults.ikeGroupVariable;
    	      this.ikePreSharedKey = defaults.ikePreSharedKey;
    	      this.ikePreSharedKeyDynamic = defaults.ikePreSharedKeyDynamic;
    	      this.ikePreSharedKeyLocalId = defaults.ikePreSharedKeyLocalId;
    	      this.ikePreSharedKeyLocalIdVariable = defaults.ikePreSharedKeyLocalIdVariable;
    	      this.ikePreSharedKeyRemoteId = defaults.ikePreSharedKeyRemoteId;
    	      this.ikePreSharedKeyRemoteIdVariable = defaults.ikePreSharedKeyRemoteIdVariable;
    	      this.ikePreSharedKeyVariable = defaults.ikePreSharedKeyVariable;
    	      this.ikeRekeyInterval = defaults.ikeRekeyInterval;
    	      this.ikeRekeyIntervalVariable = defaults.ikeRekeyIntervalVariable;
    	      this.ikeVersion = defaults.ikeVersion;
    	      this.ikeVersionVariable = defaults.ikeVersionVariable;
    	      this.ipUnnumbered = defaults.ipUnnumbered;
    	      this.ipsecCiphersuite = defaults.ipsecCiphersuite;
    	      this.ipsecCiphersuiteVariable = defaults.ipsecCiphersuiteVariable;
    	      this.ipsecPerfectForwardSecrecy = defaults.ipsecPerfectForwardSecrecy;
    	      this.ipsecPerfectForwardSecrecyVariable = defaults.ipsecPerfectForwardSecrecyVariable;
    	      this.ipsecRekeyInterval = defaults.ipsecRekeyInterval;
    	      this.ipsecRekeyIntervalVariable = defaults.ipsecRekeyIntervalVariable;
    	      this.ipsecReplayWindow = defaults.ipsecReplayWindow;
    	      this.ipsecReplayWindowVariable = defaults.ipsecReplayWindowVariable;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressVariable = defaults.ipv4AddressVariable;
    	      this.mtu = defaults.mtu;
    	      this.mtuVariable = defaults.mtuVariable;
    	      this.name = defaults.name;
    	      this.nameVariable = defaults.nameVariable;
    	      this.optional = defaults.optional;
    	      this.shutdown = defaults.shutdown;
    	      this.sigProvider = defaults.sigProvider;
    	      this.tcpMss = defaults.tcpMss;
    	      this.tcpMssVariable = defaults.tcpMssVariable;
    	      this.trackEnable = defaults.trackEnable;
    	      this.tracker = defaults.tracker;
    	      this.tunnelDcPreference = defaults.tunnelDcPreference;
    	      this.tunnelDestination = defaults.tunnelDestination;
    	      this.tunnelDestinationVariable = defaults.tunnelDestinationVariable;
    	      this.tunnelPublicIp = defaults.tunnelPublicIp;
    	      this.tunnelPublicIpVariable = defaults.tunnelPublicIpVariable;
    	      this.tunnelRouteVia = defaults.tunnelRouteVia;
    	      this.tunnelRouteViaVariable = defaults.tunnelRouteViaVariable;
    	      this.tunnelSource = defaults.tunnelSource;
    	      this.tunnelSourceInterface = defaults.tunnelSourceInterface;
    	      this.tunnelSourceInterfaceVariable = defaults.tunnelSourceInterfaceVariable;
    	      this.tunnelSourceVariable = defaults.tunnelSourceVariable;
        }

        @CustomType.Setter
        public Builder application(@Nullable String application) {

            this.application = application;
            return this;
        }
        @CustomType.Setter
        public Builder autoTunnelMode(@Nullable Boolean autoTunnelMode) {

            this.autoTunnelMode = autoTunnelMode;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionInterval(@Nullable Integer deadPeerDetectionInterval) {

            this.deadPeerDetectionInterval = deadPeerDetectionInterval;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionIntervalVariable(@Nullable String deadPeerDetectionIntervalVariable) {

            this.deadPeerDetectionIntervalVariable = deadPeerDetectionIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionRetries(@Nullable Integer deadPeerDetectionRetries) {

            this.deadPeerDetectionRetries = deadPeerDetectionRetries;
            return this;
        }
        @CustomType.Setter
        public Builder deadPeerDetectionRetriesVariable(@Nullable String deadPeerDetectionRetriesVariable) {

            this.deadPeerDetectionRetriesVariable = deadPeerDetectionRetriesVariable;
            return this;
        }
        @CustomType.Setter
        public Builder description(@Nullable String description) {

            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder descriptionVariable(@Nullable String descriptionVariable) {

            this.descriptionVariable = descriptionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeCiphersuite(@Nullable String ikeCiphersuite) {

            this.ikeCiphersuite = ikeCiphersuite;
            return this;
        }
        @CustomType.Setter
        public Builder ikeCiphersuiteVariable(@Nullable String ikeCiphersuiteVariable) {

            this.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeGroup(@Nullable String ikeGroup) {

            this.ikeGroup = ikeGroup;
            return this;
        }
        @CustomType.Setter
        public Builder ikeGroupVariable(@Nullable String ikeGroupVariable) {

            this.ikeGroupVariable = ikeGroupVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKey(@Nullable String ikePreSharedKey) {

            this.ikePreSharedKey = ikePreSharedKey;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyDynamic(@Nullable Boolean ikePreSharedKeyDynamic) {

            this.ikePreSharedKeyDynamic = ikePreSharedKeyDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyLocalId(@Nullable String ikePreSharedKeyLocalId) {

            this.ikePreSharedKeyLocalId = ikePreSharedKeyLocalId;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyLocalIdVariable(@Nullable String ikePreSharedKeyLocalIdVariable) {

            this.ikePreSharedKeyLocalIdVariable = ikePreSharedKeyLocalIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyRemoteId(@Nullable String ikePreSharedKeyRemoteId) {

            this.ikePreSharedKeyRemoteId = ikePreSharedKeyRemoteId;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyRemoteIdVariable(@Nullable String ikePreSharedKeyRemoteIdVariable) {

            this.ikePreSharedKeyRemoteIdVariable = ikePreSharedKeyRemoteIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikePreSharedKeyVariable(@Nullable String ikePreSharedKeyVariable) {

            this.ikePreSharedKeyVariable = ikePreSharedKeyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRekeyInterval(@Nullable Integer ikeRekeyInterval) {

            this.ikeRekeyInterval = ikeRekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ikeRekeyIntervalVariable(@Nullable String ikeRekeyIntervalVariable) {

            this.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersion(@Nullable Integer ikeVersion) {

            this.ikeVersion = ikeVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ikeVersionVariable(@Nullable String ikeVersionVariable) {

            this.ikeVersionVariable = ikeVersionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipUnnumbered(@Nullable Boolean ipUnnumbered) {

            this.ipUnnumbered = ipUnnumbered;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecCiphersuite(@Nullable String ipsecCiphersuite) {

            this.ipsecCiphersuite = ipsecCiphersuite;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecCiphersuiteVariable(@Nullable String ipsecCiphersuiteVariable) {

            this.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPerfectForwardSecrecy(@Nullable String ipsecPerfectForwardSecrecy) {

            this.ipsecPerfectForwardSecrecy = ipsecPerfectForwardSecrecy;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecPerfectForwardSecrecyVariable(@Nullable String ipsecPerfectForwardSecrecyVariable) {

            this.ipsecPerfectForwardSecrecyVariable = ipsecPerfectForwardSecrecyVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRekeyInterval(@Nullable Integer ipsecRekeyInterval) {

            this.ipsecRekeyInterval = ipsecRekeyInterval;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecRekeyIntervalVariable(@Nullable String ipsecRekeyIntervalVariable) {

            this.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecReplayWindow(@Nullable Integer ipsecReplayWindow) {

            this.ipsecReplayWindow = ipsecReplayWindow;
            return this;
        }
        @CustomType.Setter
        public Builder ipsecReplayWindowVariable(@Nullable String ipsecReplayWindowVariable) {

            this.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(@Nullable String ipv4Address) {

            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressVariable(@Nullable String ipv4AddressVariable) {

            this.ipv4AddressVariable = ipv4AddressVariable;
            return this;
        }
        @CustomType.Setter
        public Builder mtu(@Nullable Integer mtu) {

            this.mtu = mtu;
            return this;
        }
        @CustomType.Setter
        public Builder mtuVariable(@Nullable String mtuVariable) {

            this.mtuVariable = mtuVariable;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder nameVariable(@Nullable String nameVariable) {

            this.nameVariable = nameVariable;
            return this;
        }
        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(@Nullable Boolean shutdown) {

            this.shutdown = shutdown;
            return this;
        }
        @CustomType.Setter
        public Builder sigProvider(@Nullable String sigProvider) {

            this.sigProvider = sigProvider;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMss(@Nullable Integer tcpMss) {

            this.tcpMss = tcpMss;
            return this;
        }
        @CustomType.Setter
        public Builder tcpMssVariable(@Nullable String tcpMssVariable) {

            this.tcpMssVariable = tcpMssVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackEnable(@Nullable Boolean trackEnable) {

            this.trackEnable = trackEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tracker(@Nullable String tracker) {

            this.tracker = tracker;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDcPreference(@Nullable String tunnelDcPreference) {

            this.tunnelDcPreference = tunnelDcPreference;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestination(@Nullable String tunnelDestination) {

            this.tunnelDestination = tunnelDestination;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationVariable(@Nullable String tunnelDestinationVariable) {

            this.tunnelDestinationVariable = tunnelDestinationVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelPublicIp(@Nullable String tunnelPublicIp) {

            this.tunnelPublicIp = tunnelPublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelPublicIpVariable(@Nullable String tunnelPublicIpVariable) {

            this.tunnelPublicIpVariable = tunnelPublicIpVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteVia(@Nullable String tunnelRouteVia) {

            this.tunnelRouteVia = tunnelRouteVia;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelRouteViaVariable(@Nullable String tunnelRouteViaVariable) {

            this.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSource(@Nullable String tunnelSource) {

            this.tunnelSource = tunnelSource;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterface(@Nullable String tunnelSourceInterface) {

            this.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceInterfaceVariable(@Nullable String tunnelSourceInterfaceVariable) {

            this.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSourceVariable(@Nullable String tunnelSourceVariable) {

            this.tunnelSourceVariable = tunnelSourceVariable;
            return this;
        }
        public CiscoSecureInternetGatewayFeatureTemplateInterface build() {
            final var _resultValue = new CiscoSecureInternetGatewayFeatureTemplateInterface();
            _resultValue.application = application;
            _resultValue.autoTunnelMode = autoTunnelMode;
            _resultValue.deadPeerDetectionInterval = deadPeerDetectionInterval;
            _resultValue.deadPeerDetectionIntervalVariable = deadPeerDetectionIntervalVariable;
            _resultValue.deadPeerDetectionRetries = deadPeerDetectionRetries;
            _resultValue.deadPeerDetectionRetriesVariable = deadPeerDetectionRetriesVariable;
            _resultValue.description = description;
            _resultValue.descriptionVariable = descriptionVariable;
            _resultValue.ikeCiphersuite = ikeCiphersuite;
            _resultValue.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            _resultValue.ikeGroup = ikeGroup;
            _resultValue.ikeGroupVariable = ikeGroupVariable;
            _resultValue.ikePreSharedKey = ikePreSharedKey;
            _resultValue.ikePreSharedKeyDynamic = ikePreSharedKeyDynamic;
            _resultValue.ikePreSharedKeyLocalId = ikePreSharedKeyLocalId;
            _resultValue.ikePreSharedKeyLocalIdVariable = ikePreSharedKeyLocalIdVariable;
            _resultValue.ikePreSharedKeyRemoteId = ikePreSharedKeyRemoteId;
            _resultValue.ikePreSharedKeyRemoteIdVariable = ikePreSharedKeyRemoteIdVariable;
            _resultValue.ikePreSharedKeyVariable = ikePreSharedKeyVariable;
            _resultValue.ikeRekeyInterval = ikeRekeyInterval;
            _resultValue.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            _resultValue.ikeVersion = ikeVersion;
            _resultValue.ikeVersionVariable = ikeVersionVariable;
            _resultValue.ipUnnumbered = ipUnnumbered;
            _resultValue.ipsecCiphersuite = ipsecCiphersuite;
            _resultValue.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            _resultValue.ipsecPerfectForwardSecrecy = ipsecPerfectForwardSecrecy;
            _resultValue.ipsecPerfectForwardSecrecyVariable = ipsecPerfectForwardSecrecyVariable;
            _resultValue.ipsecRekeyInterval = ipsecRekeyInterval;
            _resultValue.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            _resultValue.ipsecReplayWindow = ipsecReplayWindow;
            _resultValue.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4AddressVariable = ipv4AddressVariable;
            _resultValue.mtu = mtu;
            _resultValue.mtuVariable = mtuVariable;
            _resultValue.name = name;
            _resultValue.nameVariable = nameVariable;
            _resultValue.optional = optional;
            _resultValue.shutdown = shutdown;
            _resultValue.sigProvider = sigProvider;
            _resultValue.tcpMss = tcpMss;
            _resultValue.tcpMssVariable = tcpMssVariable;
            _resultValue.trackEnable = trackEnable;
            _resultValue.tracker = tracker;
            _resultValue.tunnelDcPreference = tunnelDcPreference;
            _resultValue.tunnelDestination = tunnelDestination;
            _resultValue.tunnelDestinationVariable = tunnelDestinationVariable;
            _resultValue.tunnelPublicIp = tunnelPublicIp;
            _resultValue.tunnelPublicIpVariable = tunnelPublicIpVariable;
            _resultValue.tunnelRouteVia = tunnelRouteVia;
            _resultValue.tunnelRouteViaVariable = tunnelRouteViaVariable;
            _resultValue.tunnelSource = tunnelSource;
            _resultValue.tunnelSourceInterface = tunnelSourceInterface;
            _resultValue.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            _resultValue.tunnelSourceVariable = tunnelSourceVariable;
            return _resultValue;
        }
    }
}
