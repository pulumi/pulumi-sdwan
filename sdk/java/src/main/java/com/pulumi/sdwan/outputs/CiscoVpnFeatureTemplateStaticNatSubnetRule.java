// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CiscoVpnFeatureTemplateStaticNatSubnetRule {
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    private @Nullable Boolean optional;
    /**
     * @return Network Prefix Length
     *   - Range: `1`-`32`
     * 
     */
    private @Nullable Integer prefixLength;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String prefixLengthVariable;
    /**
     * @return Source IP Subnet to be translated
     * 
     */
    private @Nullable String sourceIpSubnet;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String sourceIpSubnetVariable;
    /**
     * @return Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     * 
     */
    private @Nullable String staticNatDirection;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String staticNatDirectionVariable;
    /**
     * @return Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     * 
     */
    private @Nullable Integer trackerId;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String trackerIdVariable;
    /**
     * @return Statically translated source IP Subnet
     * 
     */
    private @Nullable String translateIpSubnet;
    /**
     * @return Variable name
     * 
     */
    private @Nullable String translateIpSubnetVariable;

    private CiscoVpnFeatureTemplateStaticNatSubnetRule() {}
    /**
     * @return Indicates if list item is considered optional.
     * 
     */
    public Optional<Boolean> optional() {
        return Optional.ofNullable(this.optional);
    }
    /**
     * @return Network Prefix Length
     *   - Range: `1`-`32`
     * 
     */
    public Optional<Integer> prefixLength() {
        return Optional.ofNullable(this.prefixLength);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> prefixLengthVariable() {
        return Optional.ofNullable(this.prefixLengthVariable);
    }
    /**
     * @return Source IP Subnet to be translated
     * 
     */
    public Optional<String> sourceIpSubnet() {
        return Optional.ofNullable(this.sourceIpSubnet);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> sourceIpSubnetVariable() {
        return Optional.ofNullable(this.sourceIpSubnetVariable);
    }
    /**
     * @return Direction of static NAT translation
     *   - Choices: `inside`, `outside`
     * 
     */
    public Optional<String> staticNatDirection() {
        return Optional.ofNullable(this.staticNatDirection);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> staticNatDirectionVariable() {
        return Optional.ofNullable(this.staticNatDirectionVariable);
    }
    /**
     * @return Add Object/Object Group Tracker
     *   - Range: `1`-`1000`
     * 
     */
    public Optional<Integer> trackerId() {
        return Optional.ofNullable(this.trackerId);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> trackerIdVariable() {
        return Optional.ofNullable(this.trackerIdVariable);
    }
    /**
     * @return Statically translated source IP Subnet
     * 
     */
    public Optional<String> translateIpSubnet() {
        return Optional.ofNullable(this.translateIpSubnet);
    }
    /**
     * @return Variable name
     * 
     */
    public Optional<String> translateIpSubnetVariable() {
        return Optional.ofNullable(this.translateIpSubnetVariable);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CiscoVpnFeatureTemplateStaticNatSubnetRule defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Boolean optional;
        private @Nullable Integer prefixLength;
        private @Nullable String prefixLengthVariable;
        private @Nullable String sourceIpSubnet;
        private @Nullable String sourceIpSubnetVariable;
        private @Nullable String staticNatDirection;
        private @Nullable String staticNatDirectionVariable;
        private @Nullable Integer trackerId;
        private @Nullable String trackerIdVariable;
        private @Nullable String translateIpSubnet;
        private @Nullable String translateIpSubnetVariable;
        public Builder() {}
        public Builder(CiscoVpnFeatureTemplateStaticNatSubnetRule defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.optional = defaults.optional;
    	      this.prefixLength = defaults.prefixLength;
    	      this.prefixLengthVariable = defaults.prefixLengthVariable;
    	      this.sourceIpSubnet = defaults.sourceIpSubnet;
    	      this.sourceIpSubnetVariable = defaults.sourceIpSubnetVariable;
    	      this.staticNatDirection = defaults.staticNatDirection;
    	      this.staticNatDirectionVariable = defaults.staticNatDirectionVariable;
    	      this.trackerId = defaults.trackerId;
    	      this.trackerIdVariable = defaults.trackerIdVariable;
    	      this.translateIpSubnet = defaults.translateIpSubnet;
    	      this.translateIpSubnetVariable = defaults.translateIpSubnetVariable;
        }

        @CustomType.Setter
        public Builder optional(@Nullable Boolean optional) {

            this.optional = optional;
            return this;
        }
        @CustomType.Setter
        public Builder prefixLength(@Nullable Integer prefixLength) {

            this.prefixLength = prefixLength;
            return this;
        }
        @CustomType.Setter
        public Builder prefixLengthVariable(@Nullable String prefixLengthVariable) {

            this.prefixLengthVariable = prefixLengthVariable;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpSubnet(@Nullable String sourceIpSubnet) {

            this.sourceIpSubnet = sourceIpSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder sourceIpSubnetVariable(@Nullable String sourceIpSubnetVariable) {

            this.sourceIpSubnetVariable = sourceIpSubnetVariable;
            return this;
        }
        @CustomType.Setter
        public Builder staticNatDirection(@Nullable String staticNatDirection) {

            this.staticNatDirection = staticNatDirection;
            return this;
        }
        @CustomType.Setter
        public Builder staticNatDirectionVariable(@Nullable String staticNatDirectionVariable) {

            this.staticNatDirectionVariable = staticNatDirectionVariable;
            return this;
        }
        @CustomType.Setter
        public Builder trackerId(@Nullable Integer trackerId) {

            this.trackerId = trackerId;
            return this;
        }
        @CustomType.Setter
        public Builder trackerIdVariable(@Nullable String trackerIdVariable) {

            this.trackerIdVariable = trackerIdVariable;
            return this;
        }
        @CustomType.Setter
        public Builder translateIpSubnet(@Nullable String translateIpSubnet) {

            this.translateIpSubnet = translateIpSubnet;
            return this;
        }
        @CustomType.Setter
        public Builder translateIpSubnetVariable(@Nullable String translateIpSubnetVariable) {

            this.translateIpSubnetVariable = translateIpSubnetVariable;
            return this;
        }
        public CiscoVpnFeatureTemplateStaticNatSubnetRule build() {
            final var _resultValue = new CiscoVpnFeatureTemplateStaticNatSubnetRule();
            _resultValue.optional = optional;
            _resultValue.prefixLength = prefixLength;
            _resultValue.prefixLengthVariable = prefixLengthVariable;
            _resultValue.sourceIpSubnet = sourceIpSubnet;
            _resultValue.sourceIpSubnetVariable = sourceIpSubnetVariable;
            _resultValue.staticNatDirection = staticNatDirection;
            _resultValue.staticNatDirectionVariable = staticNatDirectionVariable;
            _resultValue.trackerId = trackerId;
            _resultValue.trackerIdVariable = trackerIdVariable;
            _resultValue.translateIpSubnet = translateIpSubnet;
            _resultValue.translateIpSubnetVariable = translateIpSubnetVariable;
            return _resultValue;
        }
    }
}
