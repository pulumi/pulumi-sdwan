// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.sdwan;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CiscoVpnInterfaceIpsecFeatureTemplateArgs extends com.pulumi.resources.ResourceArgs {

    public static final CiscoVpnInterfaceIpsecFeatureTemplateArgs Empty = new CiscoVpnInterfaceIpsecFeatureTemplateArgs();

    /**
     * Enable Application Tunnel Type
     *   - Choices: `none`, `sig`
     *   - Default value: `none`
     * 
     */
    @Import(name="application")
    private @Nullable Output<String> application;

    /**
     * @return Enable Application Tunnel Type
     *   - Choices: `none`, `sig`
     *   - Default value: `none`
     * 
     */
    public Optional<Output<String>> application() {
        return Optional.ofNullable(this.application);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="applicationVariable")
    private @Nullable Output<String> applicationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> applicationVariable() {
        return Optional.ofNullable(this.applicationVariable);
    }

    /**
     * Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    @Import(name="clearDontFragment")
    private @Nullable Output<Boolean> clearDontFragment;

    /**
     * @return Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
     *   - Default value: `false`
     * 
     */
    public Optional<Output<Boolean>> clearDontFragment() {
        return Optional.ofNullable(this.clearDontFragment);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="clearDontFragmentVariable")
    private @Nullable Output<String> clearDontFragmentVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> clearDontFragmentVariable() {
        return Optional.ofNullable(this.clearDontFragmentVariable);
    }

    /**
     * IKE keepalive interval (seconds)
     *   - Range: `10`-`3600`
     *   - Default value: `10`
     * 
     */
    @Import(name="deadPeerDetectionInterval")
    private @Nullable Output<Integer> deadPeerDetectionInterval;

    /**
     * @return IKE keepalive interval (seconds)
     *   - Range: `10`-`3600`
     *   - Default value: `10`
     * 
     */
    public Optional<Output<Integer>> deadPeerDetectionInterval() {
        return Optional.ofNullable(this.deadPeerDetectionInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="deadPeerDetectionIntervalVariable")
    private @Nullable Output<String> deadPeerDetectionIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> deadPeerDetectionIntervalVariable() {
        return Optional.ofNullable(this.deadPeerDetectionIntervalVariable);
    }

    /**
     * IKE keepalive retries
     *   - Range: `2`-`60`
     *   - Default value: `3`
     * 
     */
    @Import(name="deadPeerDetectionRetries")
    private @Nullable Output<Integer> deadPeerDetectionRetries;

    /**
     * @return IKE keepalive retries
     *   - Range: `2`-`60`
     *   - Default value: `3`
     * 
     */
    public Optional<Output<Integer>> deadPeerDetectionRetries() {
        return Optional.ofNullable(this.deadPeerDetectionRetries);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="deadPeerDetectionRetriesVariable")
    private @Nullable Output<String> deadPeerDetectionRetriesVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> deadPeerDetectionRetriesVariable() {
        return Optional.ofNullable(this.deadPeerDetectionRetriesVariable);
    }

    /**
     * The description of the feature template
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the feature template
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    @Import(name="deviceTypes", required=true)
    private Output<List<String>> deviceTypes;

    /**
     * @return List of supported device types
     *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
     * 
     */
    public Output<List<String>> deviceTypes() {
        return this.deviceTypes;
    }

    /**
     * IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    @Import(name="ikeCiphersuite")
    private @Nullable Output<String> ikeCiphersuite;

    /**
     * @return IKE identity the IKE preshared secret belongs to
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
     *   - Default value: `aes256-cbc-sha1`
     * 
     */
    public Optional<Output<String>> ikeCiphersuite() {
        return Optional.ofNullable(this.ikeCiphersuite);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeCiphersuiteVariable")
    private @Nullable Output<String> ikeCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeCiphersuiteVariable() {
        return Optional.ofNullable(this.ikeCiphersuiteVariable);
    }

    /**
     * IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24`
     *   - Default value: `16`
     * 
     */
    @Import(name="ikeGroup")
    private @Nullable Output<String> ikeGroup;

    /**
     * @return IKE Diffie Hellman Groups
     *   - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24`
     *   - Default value: `16`
     * 
     */
    public Optional<Output<String>> ikeGroup() {
        return Optional.ofNullable(this.ikeGroup);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeGroupVariable")
    private @Nullable Output<String> ikeGroupVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeGroupVariable() {
        return Optional.ofNullable(this.ikeGroupVariable);
    }

    /**
     * IKE integrity protocol
     *   - Choices: `main`, `aggressive`
     *   - Default value: `main`
     * 
     */
    @Import(name="ikeMode")
    private @Nullable Output<String> ikeMode;

    /**
     * @return IKE integrity protocol
     *   - Choices: `main`, `aggressive`
     *   - Default value: `main`
     * 
     */
    public Optional<Output<String>> ikeMode() {
        return Optional.ofNullable(this.ikeMode);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeModeVariable")
    private @Nullable Output<String> ikeModeVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeModeVariable() {
        return Optional.ofNullable(this.ikeModeVariable);
    }

    /**
     * Use preshared key to authenticate IKE peer
     * 
     */
    @Import(name="ikePreSharedKey")
    private @Nullable Output<String> ikePreSharedKey;

    /**
     * @return Use preshared key to authenticate IKE peer
     * 
     */
    public Optional<Output<String>> ikePreSharedKey() {
        return Optional.ofNullable(this.ikePreSharedKey);
    }

    /**
     * IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Import(name="ikePreSharedKeyLocalId")
    private @Nullable Output<String> ikePreSharedKeyLocalId;

    /**
     * @return IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyLocalId() {
        return Optional.ofNullable(this.ikePreSharedKeyLocalId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePreSharedKeyLocalIdVariable")
    private @Nullable Output<String> ikePreSharedKeyLocalIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyLocalIdVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyLocalIdVariable);
    }

    /**
     * IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    @Import(name="ikePreSharedKeyRemoteId")
    private @Nullable Output<String> ikePreSharedKeyRemoteId;

    /**
     * @return IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyRemoteId() {
        return Optional.ofNullable(this.ikePreSharedKeyRemoteId);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePreSharedKeyRemoteIdVariable")
    private @Nullable Output<String> ikePreSharedKeyRemoteIdVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyRemoteIdVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyRemoteIdVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikePreSharedKeyVariable")
    private @Nullable Output<String> ikePreSharedKeyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikePreSharedKeyVariable() {
        return Optional.ofNullable(this.ikePreSharedKeyVariable);
    }

    /**
     * IKE rekey interval &lt;60..86400&gt; seconds
     *   - Range: `60`-`86400`
     *   - Default value: `14400`
     * 
     */
    @Import(name="ikeRekeyInterval")
    private @Nullable Output<Integer> ikeRekeyInterval;

    /**
     * @return IKE rekey interval &lt;60..86400&gt; seconds
     *   - Range: `60`-`86400`
     *   - Default value: `14400`
     * 
     */
    public Optional<Output<Integer>> ikeRekeyInterval() {
        return Optional.ofNullable(this.ikeRekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ikeRekeyIntervalVariable")
    private @Nullable Output<String> ikeRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ikeRekeyIntervalVariable() {
        return Optional.ofNullable(this.ikeRekeyIntervalVariable);
    }

    /**
     * IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `1`
     * 
     */
    @Import(name="ikeVersion")
    private @Nullable Output<Integer> ikeVersion;

    /**
     * @return IKE Version &lt;1..2&gt;
     *   - Range: `1`-`2`
     *   - Default value: `1`
     * 
     */
    public Optional<Output<Integer>> ikeVersion() {
        return Optional.ofNullable(this.ikeVersion);
    }

    /**
     * Interface description
     * 
     */
    @Import(name="interfaceDescription")
    private @Nullable Output<String> interfaceDescription;

    /**
     * @return Interface description
     * 
     */
    public Optional<Output<String>> interfaceDescription() {
        return Optional.ofNullable(this.interfaceDescription);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceDescriptionVariable")
    private @Nullable Output<String> interfaceDescriptionVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceDescriptionVariable() {
        return Optional.ofNullable(this.interfaceDescriptionVariable);
    }

    /**
     * Interface name: IPsec when present
     * 
     */
    @Import(name="interfaceName")
    private @Nullable Output<String> interfaceName;

    /**
     * @return Interface name: IPsec when present
     * 
     */
    public Optional<Output<String>> interfaceName() {
        return Optional.ofNullable(this.interfaceName);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="interfaceNameVariable")
    private @Nullable Output<String> interfaceNameVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> interfaceNameVariable() {
        return Optional.ofNullable(this.interfaceNameVariable);
    }

    /**
     * Assign IPv4 address
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return Assign IPv4 address
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipAddressVariable")
    private @Nullable Output<String> ipAddressVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipAddressVariable() {
        return Optional.ofNullable(this.ipAddressVariable);
    }

    /**
     * IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    @Import(name="ipsecCiphersuite")
    private @Nullable Output<String> ipsecCiphersuite;

    /**
     * @return IPsec(ESP) encryption and integrity protocol
     *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
     *   - Default value: `aes256-gcm`
     * 
     */
    public Optional<Output<String>> ipsecCiphersuite() {
        return Optional.ofNullable(this.ipsecCiphersuite);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecCiphersuiteVariable")
    private @Nullable Output<String> ipsecCiphersuiteVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecCiphersuiteVariable() {
        return Optional.ofNullable(this.ipsecCiphersuiteVariable);
    }

    /**
     * IPsec perfect forward secrecy settings
     *   - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`, `group-19`, `group-20`, `group-21`, `group-24`, `none`
     *   - Default value: `group-16`
     * 
     */
    @Import(name="ipsecPerfectForwardSecrecy")
    private @Nullable Output<String> ipsecPerfectForwardSecrecy;

    /**
     * @return IPsec perfect forward secrecy settings
     *   - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`, `group-19`, `group-20`, `group-21`, `group-24`, `none`
     *   - Default value: `group-16`
     * 
     */
    public Optional<Output<String>> ipsecPerfectForwardSecrecy() {
        return Optional.ofNullable(this.ipsecPerfectForwardSecrecy);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecPerfectForwardSecrecyVariable")
    private @Nullable Output<String> ipsecPerfectForwardSecrecyVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecPerfectForwardSecrecyVariable() {
        return Optional.ofNullable(this.ipsecPerfectForwardSecrecyVariable);
    }

    /**
     * IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `120`-`2592000`
     *   - Default value: `3600`
     * 
     */
    @Import(name="ipsecRekeyInterval")
    private @Nullable Output<Integer> ipsecRekeyInterval;

    /**
     * @return IPsec rekey interval &lt;300..1209600&gt; seconds
     *   - Range: `120`-`2592000`
     *   - Default value: `3600`
     * 
     */
    public Optional<Output<Integer>> ipsecRekeyInterval() {
        return Optional.ofNullable(this.ipsecRekeyInterval);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecRekeyIntervalVariable")
    private @Nullable Output<String> ipsecRekeyIntervalVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecRekeyIntervalVariable() {
        return Optional.ofNullable(this.ipsecRekeyIntervalVariable);
    }

    /**
     * Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    @Import(name="ipsecReplayWindow")
    private @Nullable Output<Integer> ipsecReplayWindow;

    /**
     * @return Replay window size 32..8192 (must be a power of 2)
     *   - Range: `64`-`4096`
     *   - Default value: `512`
     * 
     */
    public Optional<Output<Integer>> ipsecReplayWindow() {
        return Optional.ofNullable(this.ipsecReplayWindow);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="ipsecReplayWindowVariable")
    private @Nullable Output<String> ipsecReplayWindowVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> ipsecReplayWindowVariable() {
        return Optional.ofNullable(this.ipsecReplayWindowVariable);
    }

    /**
     * Interface MTU &lt;68..9216&gt;, in bytes
     *   - Range: `68`-`9216`
     *   - Default value: `1500`
     * 
     */
    @Import(name="mtu")
    private @Nullable Output<Integer> mtu;

    /**
     * @return Interface MTU &lt;68..9216&gt;, in bytes
     *   - Range: `68`-`9216`
     *   - Default value: `1500`
     * 
     */
    public Optional<Output<Integer>> mtu() {
        return Optional.ofNullable(this.mtu);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="mtuVariable")
    private @Nullable Output<String> mtuVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> mtuVariable() {
        return Optional.ofNullable(this.mtuVariable);
    }

    /**
     * The name of the feature template
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the feature template
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Administrative state
     *   - Default value: `true`
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Administrative state
     *   - Default value: `true`
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="shutdownVariable")
    private @Nullable Output<String> shutdownVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> shutdownVariable() {
        return Optional.ofNullable(this.shutdownVariable);
    }

    /**
     * TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    @Import(name="tcpMssAdjust")
    private @Nullable Output<Integer> tcpMssAdjust;

    /**
     * @return TCP MSS on SYN packets, in bytes
     *   - Range: `500`-`1460`
     * 
     */
    public Optional<Output<Integer>> tcpMssAdjust() {
        return Optional.ofNullable(this.tcpMssAdjust);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tcpMssAdjustVariable")
    private @Nullable Output<String> tcpMssAdjustVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tcpMssAdjustVariable() {
        return Optional.ofNullable(this.tcpMssAdjustVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="trackerVariable")
    private @Nullable Output<String> trackerVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> trackerVariable() {
        return Optional.ofNullable(this.trackerVariable);
    }

    /**
     * Enable tracker for this interface
     * 
     */
    @Import(name="trackers")
    private @Nullable Output<List<String>> trackers;

    /**
     * @return Enable tracker for this interface
     * 
     */
    public Optional<Output<List<String>>> trackers() {
        return Optional.ofNullable(this.trackers);
    }

    /**
     * Tunnel destination IP address
     * 
     */
    @Import(name="tunnelDestination")
    private @Nullable Output<String> tunnelDestination;

    /**
     * @return Tunnel destination IP address
     * 
     */
    public Optional<Output<String>> tunnelDestination() {
        return Optional.ofNullable(this.tunnelDestination);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelDestinationVariable")
    private @Nullable Output<String> tunnelDestinationVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelDestinationVariable() {
        return Optional.ofNullable(this.tunnelDestinationVariable);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelRouteVia")
    private @Nullable Output<String> tunnelRouteVia;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelRouteVia() {
        return Optional.ofNullable(this.tunnelRouteVia);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelRouteViaVariable")
    private @Nullable Output<String> tunnelRouteViaVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelRouteViaVariable() {
        return Optional.ofNullable(this.tunnelRouteViaVariable);
    }

    /**
     * Tunnel source IP Address
     * 
     */
    @Import(name="tunnelSource")
    private @Nullable Output<String> tunnelSource;

    /**
     * @return Tunnel source IP Address
     * 
     */
    public Optional<Output<String>> tunnelSource() {
        return Optional.ofNullable(this.tunnelSource);
    }

    /**
     * &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    @Import(name="tunnelSourceInterface")
    private @Nullable Output<String> tunnelSourceInterface;

    /**
     * @return &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
     * 
     */
    public Optional<Output<String>> tunnelSourceInterface() {
        return Optional.ofNullable(this.tunnelSourceInterface);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceInterfaceVariable")
    private @Nullable Output<String> tunnelSourceInterfaceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceInterfaceVariable() {
        return Optional.ofNullable(this.tunnelSourceInterfaceVariable);
    }

    /**
     * Variable name
     * 
     */
    @Import(name="tunnelSourceVariable")
    private @Nullable Output<String> tunnelSourceVariable;

    /**
     * @return Variable name
     * 
     */
    public Optional<Output<String>> tunnelSourceVariable() {
        return Optional.ofNullable(this.tunnelSourceVariable);
    }

    private CiscoVpnInterfaceIpsecFeatureTemplateArgs() {}

    private CiscoVpnInterfaceIpsecFeatureTemplateArgs(CiscoVpnInterfaceIpsecFeatureTemplateArgs $) {
        this.application = $.application;
        this.applicationVariable = $.applicationVariable;
        this.clearDontFragment = $.clearDontFragment;
        this.clearDontFragmentVariable = $.clearDontFragmentVariable;
        this.deadPeerDetectionInterval = $.deadPeerDetectionInterval;
        this.deadPeerDetectionIntervalVariable = $.deadPeerDetectionIntervalVariable;
        this.deadPeerDetectionRetries = $.deadPeerDetectionRetries;
        this.deadPeerDetectionRetriesVariable = $.deadPeerDetectionRetriesVariable;
        this.description = $.description;
        this.deviceTypes = $.deviceTypes;
        this.ikeCiphersuite = $.ikeCiphersuite;
        this.ikeCiphersuiteVariable = $.ikeCiphersuiteVariable;
        this.ikeGroup = $.ikeGroup;
        this.ikeGroupVariable = $.ikeGroupVariable;
        this.ikeMode = $.ikeMode;
        this.ikeModeVariable = $.ikeModeVariable;
        this.ikePreSharedKey = $.ikePreSharedKey;
        this.ikePreSharedKeyLocalId = $.ikePreSharedKeyLocalId;
        this.ikePreSharedKeyLocalIdVariable = $.ikePreSharedKeyLocalIdVariable;
        this.ikePreSharedKeyRemoteId = $.ikePreSharedKeyRemoteId;
        this.ikePreSharedKeyRemoteIdVariable = $.ikePreSharedKeyRemoteIdVariable;
        this.ikePreSharedKeyVariable = $.ikePreSharedKeyVariable;
        this.ikeRekeyInterval = $.ikeRekeyInterval;
        this.ikeRekeyIntervalVariable = $.ikeRekeyIntervalVariable;
        this.ikeVersion = $.ikeVersion;
        this.interfaceDescription = $.interfaceDescription;
        this.interfaceDescriptionVariable = $.interfaceDescriptionVariable;
        this.interfaceName = $.interfaceName;
        this.interfaceNameVariable = $.interfaceNameVariable;
        this.ipAddress = $.ipAddress;
        this.ipAddressVariable = $.ipAddressVariable;
        this.ipsecCiphersuite = $.ipsecCiphersuite;
        this.ipsecCiphersuiteVariable = $.ipsecCiphersuiteVariable;
        this.ipsecPerfectForwardSecrecy = $.ipsecPerfectForwardSecrecy;
        this.ipsecPerfectForwardSecrecyVariable = $.ipsecPerfectForwardSecrecyVariable;
        this.ipsecRekeyInterval = $.ipsecRekeyInterval;
        this.ipsecRekeyIntervalVariable = $.ipsecRekeyIntervalVariable;
        this.ipsecReplayWindow = $.ipsecReplayWindow;
        this.ipsecReplayWindowVariable = $.ipsecReplayWindowVariable;
        this.mtu = $.mtu;
        this.mtuVariable = $.mtuVariable;
        this.name = $.name;
        this.shutdown = $.shutdown;
        this.shutdownVariable = $.shutdownVariable;
        this.tcpMssAdjust = $.tcpMssAdjust;
        this.tcpMssAdjustVariable = $.tcpMssAdjustVariable;
        this.trackerVariable = $.trackerVariable;
        this.trackers = $.trackers;
        this.tunnelDestination = $.tunnelDestination;
        this.tunnelDestinationVariable = $.tunnelDestinationVariable;
        this.tunnelRouteVia = $.tunnelRouteVia;
        this.tunnelRouteViaVariable = $.tunnelRouteViaVariable;
        this.tunnelSource = $.tunnelSource;
        this.tunnelSourceInterface = $.tunnelSourceInterface;
        this.tunnelSourceInterfaceVariable = $.tunnelSourceInterfaceVariable;
        this.tunnelSourceVariable = $.tunnelSourceVariable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CiscoVpnInterfaceIpsecFeatureTemplateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CiscoVpnInterfaceIpsecFeatureTemplateArgs $;

        public Builder() {
            $ = new CiscoVpnInterfaceIpsecFeatureTemplateArgs();
        }

        public Builder(CiscoVpnInterfaceIpsecFeatureTemplateArgs defaults) {
            $ = new CiscoVpnInterfaceIpsecFeatureTemplateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param application Enable Application Tunnel Type
         *   - Choices: `none`, `sig`
         *   - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder application(@Nullable Output<String> application) {
            $.application = application;
            return this;
        }

        /**
         * @param application Enable Application Tunnel Type
         *   - Choices: `none`, `sig`
         *   - Default value: `none`
         * 
         * @return builder
         * 
         */
        public Builder application(String application) {
            return application(Output.of(application));
        }

        /**
         * @param applicationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder applicationVariable(@Nullable Output<String> applicationVariable) {
            $.applicationVariable = applicationVariable;
            return this;
        }

        /**
         * @param applicationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder applicationVariable(String applicationVariable) {
            return applicationVariable(Output.of(applicationVariable));
        }

        /**
         * @param clearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragment(@Nullable Output<Boolean> clearDontFragment) {
            $.clearDontFragment = clearDontFragment;
            return this;
        }

        /**
         * @param clearDontFragment Enable clear dont fragment (Currently Only SDWAN Tunnel Interface)
         *   - Default value: `false`
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragment(Boolean clearDontFragment) {
            return clearDontFragment(Output.of(clearDontFragment));
        }

        /**
         * @param clearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentVariable(@Nullable Output<String> clearDontFragmentVariable) {
            $.clearDontFragmentVariable = clearDontFragmentVariable;
            return this;
        }

        /**
         * @param clearDontFragmentVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder clearDontFragmentVariable(String clearDontFragmentVariable) {
            return clearDontFragmentVariable(Output.of(clearDontFragmentVariable));
        }

        /**
         * @param deadPeerDetectionInterval IKE keepalive interval (seconds)
         *   - Range: `10`-`3600`
         *   - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionInterval(@Nullable Output<Integer> deadPeerDetectionInterval) {
            $.deadPeerDetectionInterval = deadPeerDetectionInterval;
            return this;
        }

        /**
         * @param deadPeerDetectionInterval IKE keepalive interval (seconds)
         *   - Range: `10`-`3600`
         *   - Default value: `10`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionInterval(Integer deadPeerDetectionInterval) {
            return deadPeerDetectionInterval(Output.of(deadPeerDetectionInterval));
        }

        /**
         * @param deadPeerDetectionIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionIntervalVariable(@Nullable Output<String> deadPeerDetectionIntervalVariable) {
            $.deadPeerDetectionIntervalVariable = deadPeerDetectionIntervalVariable;
            return this;
        }

        /**
         * @param deadPeerDetectionIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionIntervalVariable(String deadPeerDetectionIntervalVariable) {
            return deadPeerDetectionIntervalVariable(Output.of(deadPeerDetectionIntervalVariable));
        }

        /**
         * @param deadPeerDetectionRetries IKE keepalive retries
         *   - Range: `2`-`60`
         *   - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetries(@Nullable Output<Integer> deadPeerDetectionRetries) {
            $.deadPeerDetectionRetries = deadPeerDetectionRetries;
            return this;
        }

        /**
         * @param deadPeerDetectionRetries IKE keepalive retries
         *   - Range: `2`-`60`
         *   - Default value: `3`
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetries(Integer deadPeerDetectionRetries) {
            return deadPeerDetectionRetries(Output.of(deadPeerDetectionRetries));
        }

        /**
         * @param deadPeerDetectionRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetriesVariable(@Nullable Output<String> deadPeerDetectionRetriesVariable) {
            $.deadPeerDetectionRetriesVariable = deadPeerDetectionRetriesVariable;
            return this;
        }

        /**
         * @param deadPeerDetectionRetriesVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder deadPeerDetectionRetriesVariable(String deadPeerDetectionRetriesVariable) {
            return deadPeerDetectionRetriesVariable(Output.of(deadPeerDetectionRetriesVariable));
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the feature template
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(Output<List<String>> deviceTypes) {
            $.deviceTypes = deviceTypes;
            return this;
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(List<String> deviceTypes) {
            return deviceTypes(Output.of(deviceTypes));
        }

        /**
         * @param deviceTypes List of supported device types
         *   - Choices: `vedge-C8000V`, `vedge-C8300-1N1S-4T2X`, `vedge-C8300-1N1S-6T`, `vedge-C8300-2N2S-6T`, `vedge-C8300-2N2S-4T2X`, `vedge-C8500-12X4QC`, `vedge-C8500-12X`, `vedge-C8500-20X6C`, `vedge-C8500L-8S4X`, `vedge-C8200-1N-4T`, `vedge-C8200L-1N-4T`
         * 
         * @return builder
         * 
         */
        public Builder deviceTypes(String... deviceTypes) {
            return deviceTypes(List.of(deviceTypes));
        }

        /**
         * @param ikeCiphersuite IKE identity the IKE preshared secret belongs to
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
         *   - Default value: `aes256-cbc-sha1`
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuite(@Nullable Output<String> ikeCiphersuite) {
            $.ikeCiphersuite = ikeCiphersuite;
            return this;
        }

        /**
         * @param ikeCiphersuite IKE identity the IKE preshared secret belongs to
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha2`, `aes128-cbc-sha1`, `aes128-cbc-sha2`
         *   - Default value: `aes256-cbc-sha1`
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuite(String ikeCiphersuite) {
            return ikeCiphersuite(Output.of(ikeCiphersuite));
        }

        /**
         * @param ikeCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuiteVariable(@Nullable Output<String> ikeCiphersuiteVariable) {
            $.ikeCiphersuiteVariable = ikeCiphersuiteVariable;
            return this;
        }

        /**
         * @param ikeCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeCiphersuiteVariable(String ikeCiphersuiteVariable) {
            return ikeCiphersuiteVariable(Output.of(ikeCiphersuiteVariable));
        }

        /**
         * @param ikeGroup IKE Diffie Hellman Groups
         *   - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24`
         *   - Default value: `16`
         * 
         * @return builder
         * 
         */
        public Builder ikeGroup(@Nullable Output<String> ikeGroup) {
            $.ikeGroup = ikeGroup;
            return this;
        }

        /**
         * @param ikeGroup IKE Diffie Hellman Groups
         *   - Choices: `2`, `14`, `15`, `16`, `19`, `20`, `21`, `24`
         *   - Default value: `16`
         * 
         * @return builder
         * 
         */
        public Builder ikeGroup(String ikeGroup) {
            return ikeGroup(Output.of(ikeGroup));
        }

        /**
         * @param ikeGroupVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeGroupVariable(@Nullable Output<String> ikeGroupVariable) {
            $.ikeGroupVariable = ikeGroupVariable;
            return this;
        }

        /**
         * @param ikeGroupVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeGroupVariable(String ikeGroupVariable) {
            return ikeGroupVariable(Output.of(ikeGroupVariable));
        }

        /**
         * @param ikeMode IKE integrity protocol
         *   - Choices: `main`, `aggressive`
         *   - Default value: `main`
         * 
         * @return builder
         * 
         */
        public Builder ikeMode(@Nullable Output<String> ikeMode) {
            $.ikeMode = ikeMode;
            return this;
        }

        /**
         * @param ikeMode IKE integrity protocol
         *   - Choices: `main`, `aggressive`
         *   - Default value: `main`
         * 
         * @return builder
         * 
         */
        public Builder ikeMode(String ikeMode) {
            return ikeMode(Output.of(ikeMode));
        }

        /**
         * @param ikeModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeModeVariable(@Nullable Output<String> ikeModeVariable) {
            $.ikeModeVariable = ikeModeVariable;
            return this;
        }

        /**
         * @param ikeModeVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeModeVariable(String ikeModeVariable) {
            return ikeModeVariable(Output.of(ikeModeVariable));
        }

        /**
         * @param ikePreSharedKey Use preshared key to authenticate IKE peer
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKey(@Nullable Output<String> ikePreSharedKey) {
            $.ikePreSharedKey = ikePreSharedKey;
            return this;
        }

        /**
         * @param ikePreSharedKey Use preshared key to authenticate IKE peer
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKey(String ikePreSharedKey) {
            return ikePreSharedKey(Output.of(ikePreSharedKey));
        }

        /**
         * @param ikePreSharedKeyLocalId IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalId(@Nullable Output<String> ikePreSharedKeyLocalId) {
            $.ikePreSharedKeyLocalId = ikePreSharedKeyLocalId;
            return this;
        }

        /**
         * @param ikePreSharedKeyLocalId IKE ID for the local endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalId(String ikePreSharedKeyLocalId) {
            return ikePreSharedKeyLocalId(Output.of(ikePreSharedKeyLocalId));
        }

        /**
         * @param ikePreSharedKeyLocalIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalIdVariable(@Nullable Output<String> ikePreSharedKeyLocalIdVariable) {
            $.ikePreSharedKeyLocalIdVariable = ikePreSharedKeyLocalIdVariable;
            return this;
        }

        /**
         * @param ikePreSharedKeyLocalIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyLocalIdVariable(String ikePreSharedKeyLocalIdVariable) {
            return ikePreSharedKeyLocalIdVariable(Output.of(ikePreSharedKeyLocalIdVariable));
        }

        /**
         * @param ikePreSharedKeyRemoteId IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteId(@Nullable Output<String> ikePreSharedKeyRemoteId) {
            $.ikePreSharedKeyRemoteId = ikePreSharedKeyRemoteId;
            return this;
        }

        /**
         * @param ikePreSharedKeyRemoteId IKE ID for the remote endpoint. Input IPv4 address, domain name, or email address
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteId(String ikePreSharedKeyRemoteId) {
            return ikePreSharedKeyRemoteId(Output.of(ikePreSharedKeyRemoteId));
        }

        /**
         * @param ikePreSharedKeyRemoteIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteIdVariable(@Nullable Output<String> ikePreSharedKeyRemoteIdVariable) {
            $.ikePreSharedKeyRemoteIdVariable = ikePreSharedKeyRemoteIdVariable;
            return this;
        }

        /**
         * @param ikePreSharedKeyRemoteIdVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyRemoteIdVariable(String ikePreSharedKeyRemoteIdVariable) {
            return ikePreSharedKeyRemoteIdVariable(Output.of(ikePreSharedKeyRemoteIdVariable));
        }

        /**
         * @param ikePreSharedKeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyVariable(@Nullable Output<String> ikePreSharedKeyVariable) {
            $.ikePreSharedKeyVariable = ikePreSharedKeyVariable;
            return this;
        }

        /**
         * @param ikePreSharedKeyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikePreSharedKeyVariable(String ikePreSharedKeyVariable) {
            return ikePreSharedKeyVariable(Output.of(ikePreSharedKeyVariable));
        }

        /**
         * @param ikeRekeyInterval IKE rekey interval &lt;60..86400&gt; seconds
         *   - Range: `60`-`86400`
         *   - Default value: `14400`
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyInterval(@Nullable Output<Integer> ikeRekeyInterval) {
            $.ikeRekeyInterval = ikeRekeyInterval;
            return this;
        }

        /**
         * @param ikeRekeyInterval IKE rekey interval &lt;60..86400&gt; seconds
         *   - Range: `60`-`86400`
         *   - Default value: `14400`
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyInterval(Integer ikeRekeyInterval) {
            return ikeRekeyInterval(Output.of(ikeRekeyInterval));
        }

        /**
         * @param ikeRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyIntervalVariable(@Nullable Output<String> ikeRekeyIntervalVariable) {
            $.ikeRekeyIntervalVariable = ikeRekeyIntervalVariable;
            return this;
        }

        /**
         * @param ikeRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ikeRekeyIntervalVariable(String ikeRekeyIntervalVariable) {
            return ikeRekeyIntervalVariable(Output.of(ikeRekeyIntervalVariable));
        }

        /**
         * @param ikeVersion IKE Version &lt;1..2&gt;
         *   - Range: `1`-`2`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(@Nullable Output<Integer> ikeVersion) {
            $.ikeVersion = ikeVersion;
            return this;
        }

        /**
         * @param ikeVersion IKE Version &lt;1..2&gt;
         *   - Range: `1`-`2`
         *   - Default value: `1`
         * 
         * @return builder
         * 
         */
        public Builder ikeVersion(Integer ikeVersion) {
            return ikeVersion(Output.of(ikeVersion));
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(@Nullable Output<String> interfaceDescription) {
            $.interfaceDescription = interfaceDescription;
            return this;
        }

        /**
         * @param interfaceDescription Interface description
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescription(String interfaceDescription) {
            return interfaceDescription(Output.of(interfaceDescription));
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(@Nullable Output<String> interfaceDescriptionVariable) {
            $.interfaceDescriptionVariable = interfaceDescriptionVariable;
            return this;
        }

        /**
         * @param interfaceDescriptionVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceDescriptionVariable(String interfaceDescriptionVariable) {
            return interfaceDescriptionVariable(Output.of(interfaceDescriptionVariable));
        }

        /**
         * @param interfaceName Interface name: IPsec when present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(@Nullable Output<String> interfaceName) {
            $.interfaceName = interfaceName;
            return this;
        }

        /**
         * @param interfaceName Interface name: IPsec when present
         * 
         * @return builder
         * 
         */
        public Builder interfaceName(String interfaceName) {
            return interfaceName(Output.of(interfaceName));
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(@Nullable Output<String> interfaceNameVariable) {
            $.interfaceNameVariable = interfaceNameVariable;
            return this;
        }

        /**
         * @param interfaceNameVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder interfaceNameVariable(String interfaceNameVariable) {
            return interfaceNameVariable(Output.of(interfaceNameVariable));
        }

        /**
         * @param ipAddress Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress Assign IPv4 address
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVariable(@Nullable Output<String> ipAddressVariable) {
            $.ipAddressVariable = ipAddressVariable;
            return this;
        }

        /**
         * @param ipAddressVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVariable(String ipAddressVariable) {
            return ipAddressVariable(Output.of(ipAddressVariable));
        }

        /**
         * @param ipsecCiphersuite IPsec(ESP) encryption and integrity protocol
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
         *   - Default value: `aes256-gcm`
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuite(@Nullable Output<String> ipsecCiphersuite) {
            $.ipsecCiphersuite = ipsecCiphersuite;
            return this;
        }

        /**
         * @param ipsecCiphersuite IPsec(ESP) encryption and integrity protocol
         *   - Choices: `aes256-cbc-sha1`, `aes256-cbc-sha384`, `aes256-cbc-sha256`, `aes256-cbc-sha512`, `aes256-gcm`, `null-sha1`, `null-sha384`, `null-sha256`, `null-sha512`
         *   - Default value: `aes256-gcm`
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuite(String ipsecCiphersuite) {
            return ipsecCiphersuite(Output.of(ipsecCiphersuite));
        }

        /**
         * @param ipsecCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuiteVariable(@Nullable Output<String> ipsecCiphersuiteVariable) {
            $.ipsecCiphersuiteVariable = ipsecCiphersuiteVariable;
            return this;
        }

        /**
         * @param ipsecCiphersuiteVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecCiphersuiteVariable(String ipsecCiphersuiteVariable) {
            return ipsecCiphersuiteVariable(Output.of(ipsecCiphersuiteVariable));
        }

        /**
         * @param ipsecPerfectForwardSecrecy IPsec perfect forward secrecy settings
         *   - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`, `group-19`, `group-20`, `group-21`, `group-24`, `none`
         *   - Default value: `group-16`
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecy(@Nullable Output<String> ipsecPerfectForwardSecrecy) {
            $.ipsecPerfectForwardSecrecy = ipsecPerfectForwardSecrecy;
            return this;
        }

        /**
         * @param ipsecPerfectForwardSecrecy IPsec perfect forward secrecy settings
         *   - Choices: `group-1`, `group-2`, `group-5`, `group-14`, `group-15`, `group-16`, `group-19`, `group-20`, `group-21`, `group-24`, `none`
         *   - Default value: `group-16`
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecy(String ipsecPerfectForwardSecrecy) {
            return ipsecPerfectForwardSecrecy(Output.of(ipsecPerfectForwardSecrecy));
        }

        /**
         * @param ipsecPerfectForwardSecrecyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecyVariable(@Nullable Output<String> ipsecPerfectForwardSecrecyVariable) {
            $.ipsecPerfectForwardSecrecyVariable = ipsecPerfectForwardSecrecyVariable;
            return this;
        }

        /**
         * @param ipsecPerfectForwardSecrecyVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecPerfectForwardSecrecyVariable(String ipsecPerfectForwardSecrecyVariable) {
            return ipsecPerfectForwardSecrecyVariable(Output.of(ipsecPerfectForwardSecrecyVariable));
        }

        /**
         * @param ipsecRekeyInterval IPsec rekey interval &lt;300..1209600&gt; seconds
         *   - Range: `120`-`2592000`
         *   - Default value: `3600`
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyInterval(@Nullable Output<Integer> ipsecRekeyInterval) {
            $.ipsecRekeyInterval = ipsecRekeyInterval;
            return this;
        }

        /**
         * @param ipsecRekeyInterval IPsec rekey interval &lt;300..1209600&gt; seconds
         *   - Range: `120`-`2592000`
         *   - Default value: `3600`
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyInterval(Integer ipsecRekeyInterval) {
            return ipsecRekeyInterval(Output.of(ipsecRekeyInterval));
        }

        /**
         * @param ipsecRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyIntervalVariable(@Nullable Output<String> ipsecRekeyIntervalVariable) {
            $.ipsecRekeyIntervalVariable = ipsecRekeyIntervalVariable;
            return this;
        }

        /**
         * @param ipsecRekeyIntervalVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecRekeyIntervalVariable(String ipsecRekeyIntervalVariable) {
            return ipsecRekeyIntervalVariable(Output.of(ipsecRekeyIntervalVariable));
        }

        /**
         * @param ipsecReplayWindow Replay window size 32..8192 (must be a power of 2)
         *   - Range: `64`-`4096`
         *   - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindow(@Nullable Output<Integer> ipsecReplayWindow) {
            $.ipsecReplayWindow = ipsecReplayWindow;
            return this;
        }

        /**
         * @param ipsecReplayWindow Replay window size 32..8192 (must be a power of 2)
         *   - Range: `64`-`4096`
         *   - Default value: `512`
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindow(Integer ipsecReplayWindow) {
            return ipsecReplayWindow(Output.of(ipsecReplayWindow));
        }

        /**
         * @param ipsecReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindowVariable(@Nullable Output<String> ipsecReplayWindowVariable) {
            $.ipsecReplayWindowVariable = ipsecReplayWindowVariable;
            return this;
        }

        /**
         * @param ipsecReplayWindowVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder ipsecReplayWindowVariable(String ipsecReplayWindowVariable) {
            return ipsecReplayWindowVariable(Output.of(ipsecReplayWindowVariable));
        }

        /**
         * @param mtu Interface MTU &lt;68..9216&gt;, in bytes
         *   - Range: `68`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder mtu(@Nullable Output<Integer> mtu) {
            $.mtu = mtu;
            return this;
        }

        /**
         * @param mtu Interface MTU &lt;68..9216&gt;, in bytes
         *   - Range: `68`-`9216`
         *   - Default value: `1500`
         * 
         * @return builder
         * 
         */
        public Builder mtu(Integer mtu) {
            return mtu(Output.of(mtu));
        }

        /**
         * @param mtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mtuVariable(@Nullable Output<String> mtuVariable) {
            $.mtuVariable = mtuVariable;
            return this;
        }

        /**
         * @param mtuVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder mtuVariable(String mtuVariable) {
            return mtuVariable(Output.of(mtuVariable));
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the feature template
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Administrative state
         *   - Default value: `true`
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(@Nullable Output<String> shutdownVariable) {
            $.shutdownVariable = shutdownVariable;
            return this;
        }

        /**
         * @param shutdownVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder shutdownVariable(String shutdownVariable) {
            return shutdownVariable(Output.of(shutdownVariable));
        }

        /**
         * @param tcpMssAdjust TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjust(@Nullable Output<Integer> tcpMssAdjust) {
            $.tcpMssAdjust = tcpMssAdjust;
            return this;
        }

        /**
         * @param tcpMssAdjust TCP MSS on SYN packets, in bytes
         *   - Range: `500`-`1460`
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjust(Integer tcpMssAdjust) {
            return tcpMssAdjust(Output.of(tcpMssAdjust));
        }

        /**
         * @param tcpMssAdjustVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjustVariable(@Nullable Output<String> tcpMssAdjustVariable) {
            $.tcpMssAdjustVariable = tcpMssAdjustVariable;
            return this;
        }

        /**
         * @param tcpMssAdjustVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tcpMssAdjustVariable(String tcpMssAdjustVariable) {
            return tcpMssAdjustVariable(Output.of(tcpMssAdjustVariable));
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(@Nullable Output<String> trackerVariable) {
            $.trackerVariable = trackerVariable;
            return this;
        }

        /**
         * @param trackerVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder trackerVariable(String trackerVariable) {
            return trackerVariable(Output.of(trackerVariable));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(@Nullable Output<List<String>> trackers) {
            $.trackers = trackers;
            return this;
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(List<String> trackers) {
            return trackers(Output.of(trackers));
        }

        /**
         * @param trackers Enable tracker for this interface
         * 
         * @return builder
         * 
         */
        public Builder trackers(String... trackers) {
            return trackers(List.of(trackers));
        }

        /**
         * @param tunnelDestination Tunnel destination IP address
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestination(@Nullable Output<String> tunnelDestination) {
            $.tunnelDestination = tunnelDestination;
            return this;
        }

        /**
         * @param tunnelDestination Tunnel destination IP address
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestination(String tunnelDestination) {
            return tunnelDestination(Output.of(tunnelDestination));
        }

        /**
         * @param tunnelDestinationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationVariable(@Nullable Output<String> tunnelDestinationVariable) {
            $.tunnelDestinationVariable = tunnelDestinationVariable;
            return this;
        }

        /**
         * @param tunnelDestinationVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelDestinationVariable(String tunnelDestinationVariable) {
            return tunnelDestinationVariable(Output.of(tunnelDestinationVariable));
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(@Nullable Output<String> tunnelRouteVia) {
            $.tunnelRouteVia = tunnelRouteVia;
            return this;
        }

        /**
         * @param tunnelRouteVia &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteVia(String tunnelRouteVia) {
            return tunnelRouteVia(Output.of(tunnelRouteVia));
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(@Nullable Output<String> tunnelRouteViaVariable) {
            $.tunnelRouteViaVariable = tunnelRouteViaVariable;
            return this;
        }

        /**
         * @param tunnelRouteViaVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelRouteViaVariable(String tunnelRouteViaVariable) {
            return tunnelRouteViaVariable(Output.of(tunnelRouteViaVariable));
        }

        /**
         * @param tunnelSource Tunnel source IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelSource(@Nullable Output<String> tunnelSource) {
            $.tunnelSource = tunnelSource;
            return this;
        }

        /**
         * @param tunnelSource Tunnel source IP Address
         * 
         * @return builder
         * 
         */
        public Builder tunnelSource(String tunnelSource) {
            return tunnelSource(Output.of(tunnelSource));
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(@Nullable Output<String> tunnelSourceInterface) {
            $.tunnelSourceInterface = tunnelSourceInterface;
            return this;
        }

        /**
         * @param tunnelSourceInterface &lt;1..32 characters&gt; Interface name: ge0/&lt;0-..&gt; or ge0/&lt;0-..&gt;.vlanid
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterface(String tunnelSourceInterface) {
            return tunnelSourceInterface(Output.of(tunnelSourceInterface));
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(@Nullable Output<String> tunnelSourceInterfaceVariable) {
            $.tunnelSourceInterfaceVariable = tunnelSourceInterfaceVariable;
            return this;
        }

        /**
         * @param tunnelSourceInterfaceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceInterfaceVariable(String tunnelSourceInterfaceVariable) {
            return tunnelSourceInterfaceVariable(Output.of(tunnelSourceInterfaceVariable));
        }

        /**
         * @param tunnelSourceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceVariable(@Nullable Output<String> tunnelSourceVariable) {
            $.tunnelSourceVariable = tunnelSourceVariable;
            return this;
        }

        /**
         * @param tunnelSourceVariable Variable name
         * 
         * @return builder
         * 
         */
        public Builder tunnelSourceVariable(String tunnelSourceVariable) {
            return tunnelSourceVariable(Output.of(tunnelSourceVariable));
        }

        public CiscoVpnInterfaceIpsecFeatureTemplateArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("CiscoVpnInterfaceIpsecFeatureTemplateArgs", "description");
            }
            if ($.deviceTypes == null) {
                throw new MissingRequiredPropertyException("CiscoVpnInterfaceIpsecFeatureTemplateArgs", "deviceTypes");
            }
            return $;
        }
    }

}
